

Microchip MPLAB XC8 Assembler V2.40 build 20220703182018 
                                                                                               Thu Mar 09 19:07:58 2023

Microchip MPLAB XC8 C Compiler v2.40 (Free license) build 20220703182018 Og1 
     1                           	processor	18F67K40
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     6                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     7                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	text0,global,reloc=2,class=CODE,delta=1
     9                           	psect	text1,global,reloc=2,class=CODE,delta=1
    10                           	psect	text2,global,reloc=2,class=CODE,delta=1
    11                           	psect	text3,global,reloc=2,class=CODE,delta=1
    12                           	psect	text4,global,reloc=2,class=CODE,delta=1
    13                           	psect	text5,global,reloc=2,class=CODE,delta=1
    14                           	psect	text6,global,reloc=2,class=CODE,delta=1
    15                           	psect	text7,global,reloc=2,class=CODE,delta=1
    16                           	psect	text8,global,reloc=2,class=CODE,delta=1
    17                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=1
    18                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=1
    19                           	psect	text11,global,reloc=2,class=CODE,delta=1
    20                           	psect	text12,global,reloc=2,class=CODE,delta=1
    21                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    22                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    23                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    24                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    25   000000                     
    26                           ; Generated 06/04/2022 GMT
    27                           ; 
    28                           ; Copyright Â© 2022, Microchip Technology Inc. and its subsidiaries ("Microchip")
    29                           ; All rights reserved.
    30                           ; 
    31                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    32                           ; 
    33                           ; Redistribution and use in source and binary forms, with or without modification, are
    34                           ; permitted provided that the following conditions are met:
    35                           ; 
    36                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    37                           ;        conditions and the following disclaimer.
    38                           ; 
    39                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    40                           ;        of conditions and the following disclaimer in the documentation and/or other
    41                           ;        materials provided with the distribution. Publication is not required when
    42                           ;        this file is used in an embedded application.
    43                           ; 
    44                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    45                           ;        software without specific prior written permission.
    46                           ; 
    47                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    48                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    49                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    50                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    51                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    52                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    53                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    54                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    55                           ; 
    56                           ; 
    57                           ; Code-generator required, PIC18F67K40 Definitions
    58                           ; 
    59                           ; SFR Addresses
    60   000000                     _TRISFbits	set	3974
    61   000000                     _LATFbits	set	3966
    62   000000                     _LATDbits	set	3964
    63   000000                     _LATGbits	set	3967
    64   000000                     _TRISGbits	set	3975
    65   000000                     _TRISEbits	set	3973
    66   000000                     _SSP2CON2bits	set	3802
    67   000000                     _SSP2CLKPPS	set	3612
    68   000000                     _SSP2DATPPS	set	3613
    69   000000                     _ANSELDbits	set	3751
    70   000000                     _SSP2ADD	set	3798
    71   000000                     _SSP2CON1bits	set	3801
    72   000000                     _LATCbits	set	3963
    73   000000                     _LATEbits	set	3965
    74   000000                     _TRISCbits	set	3971
    75   000000                     _SSP2CON2	set	3802
    76   000000                     _TRISDbits	set	3972
    77   000000                     _CCPR4H	set	3873
    78   000000                     _CCPR3H	set	3877
    79   000000                     _SSP2STAT	set	3800
    80   000000                     _SSP2BUF	set	3797
    81   000000                     _RC7PPS	set	3689
    82   000000                     _RD5PPS	set	3695
    83   000000                     _RE2PPS	set	3700
    84   000000                     _RD6PPS	set	3696
    85   000000                     _TRISHbits	set	3976
    86   000000                     _T2PR	set	4028
    87   000000                     _T2CONbits	set	4029
    88   000000                     _CCPR2H	set	4006
    89   000000                     _CCPR1H	set	4010
    90   000000                     _LATHbits	set	3968
    91   000000                     _RE4PPS	set	3702
    92   000000                     _RG6PPS	set	3720
    93   000000                     _T2CLKCONbits	set	4031
    94   000000                     _T2HLTbits	set	4030
    95   000000                     _CCP1CONbits	set	4011
    96   000000                     _CCPTMRS0bits	set	4013
    97   000000                     _CCP2CONbits	set	4007
    98   000000                     _CCP3CONbits	set	3878
    99   000000                     _CCP4CONbits	set	3874
   100                           
   101                           ; #config settings
   102                           
   103                           	psect	cinit
   104   01F38C                     __pcinit:
   105                           	callstack 0
   106   01F38C                     start_initialization:
   107                           	callstack 0
   108   01F38C                     __initialization:
   109                           	callstack 0
   110                           
   111                           ; Clear objects allocated to COMRAM (18 bytes)
   112   01F38C  EE00  F02E         	lfsr	0,__pbssCOMRAM
   113   01F390  0E12               	movlw	18
   114   01F392                     clear_0:
   115   01F392  6AEE               	clrf	postinc0,c
   116   01F394  06E8               	decf	wreg,f,c
   117   01F396  E1FD               	bnz	clear_0
   118   01F398                     end_of_initialization:
   119                           	callstack 0
   120   01F398                     __end_of__initialization:
   121                           	callstack 0
   122   01F398  0100               	movlb	0
   123   01F39A  EFB8  F0FD         	goto	_main	;jump to C main() function
   124                           
   125                           	psect	bssCOMRAM
   126   00002E                     __pbssCOMRAM:
   127                           	callstack 0
   128   00002E                     _motorR:
   129                           	callstack 0
   130   00002E                     	ds	9
   131   000037                     _motorL:
   132                           	callstack 0
   133   000037                     	ds	9
   134                           
   135                           	psect	cstackCOMRAM
   136   000001                     __pcstackCOMRAM:
   137                           	callstack 0
   138   000001                     ?___wmul:
   139                           	callstack 0
   140   000001                     initDCmotorsPWM@PWMperiod:
   141                           	callstack 0
   142   000001                     motor_init@mL:
   143                           	callstack 0
   144   000001                     ___wmul@multiplier:
   145                           	callstack 0
   146                           
   147                           ; 2 bytes @ 0x0
   148   000001                     	ds	2
   149   000003                     motor_init@mR:
   150                           	callstack 0
   151   000003                     ___wmul@multiplicand:
   152                           	callstack 0
   153                           
   154                           ; 2 bytes @ 0x2
   155   000003                     	ds	2
   156   000005                     ___wmul@product:
   157                           	callstack 0
   158                           
   159                           ; 2 bytes @ 0x4
   160   000005                     	ds	2
   161   000007                     ?___lwdiv:
   162                           	callstack 0
   163   000007                     ___lwdiv@dividend:
   164                           	callstack 0
   165                           
   166                           ; 2 bytes @ 0x6
   167   000007                     	ds	2
   168   000009                     ___lwdiv@divisor:
   169                           	callstack 0
   170                           
   171                           ; 2 bytes @ 0x8
   172   000009                     	ds	2
   173   00000B                     ___lwdiv@quotient:
   174                           	callstack 0
   175                           
   176                           ; 2 bytes @ 0xA
   177   00000B                     	ds	2
   178   00000D                     ___lwdiv@counter:
   179                           	callstack 0
   180                           
   181                           ; 1 bytes @ 0xC
   182   00000D                     	ds	1
   183   00000E                     setMotorPWM@m:
   184                           	callstack 0
   185                           
   186                           ; 2 bytes @ 0xD
   187   00000E                     	ds	2
   188   000010                     ??_setMotorPWM:
   189                           
   190                           ; 1 bytes @ 0xF
   191   000010                     	ds	2
   192   000012                     setMotorPWM@posDuty:
   193                           	callstack 0
   194                           
   195                           ; 1 bytes @ 0x11
   196   000012                     	ds	1
   197   000013                     setMotorPWM@negDuty:
   198                           	callstack 0
   199                           
   200                           ; 1 bytes @ 0x12
   201   000013                     	ds	1
   202   000014                     stop@mL:
   203                           	callstack 0
   204                           
   205                           ; 2 bytes @ 0x13
   206   000014                     	ds	2
   207   000016                     stop@mR:
   208                           	callstack 0
   209                           
   210                           ; 2 bytes @ 0x15
   211   000016                     	ds	2
   212   000018                     stop@i:
   213                           	callstack 0
   214                           
   215                           ; 2 bytes @ 0x17
   216   000018                     	ds	2
   217   00001A                     reverse@mL:
   218                           	callstack 0
   219   00001A                     left_45@mL:
   220                           	callstack 0
   221   00001A                     right_45@mL:
   222                           	callstack 0
   223   00001A                     space@mL:
   224                           	callstack 0
   225                           
   226                           ; 2 bytes @ 0x19
   227   00001A                     	ds	2
   228   00001C                     reverse@mR:
   229                           	callstack 0
   230   00001C                     left_45@mR:
   231                           	callstack 0
   232   00001C                     right_45@mR:
   233                           	callstack 0
   234   00001C                     space@mR:
   235                           	callstack 0
   236                           
   237                           ; 2 bytes @ 0x1B
   238   00001C                     	ds	2
   239   00001E                     ??_space:
   240   00001E                     left_45@count:
   241                           	callstack 0
   242   00001E                     right_45@count:
   243                           	callstack 0
   244                           
   245                           ; 2 bytes @ 0x1D
   246   00001E                     	ds	2
   247   000020                     ??_left_45:
   248   000020                     ??_right_45:
   249                           
   250                           ; 1 bytes @ 0x1F
   251   000020                     	ds	2
   252   000022                     left_45@i:
   253                           	callstack 0
   254   000022                     right_45@i:
   255                           	callstack 0
   256                           
   257                           ; 2 bytes @ 0x21
   258   000022                     	ds	2
   259   000024                     instructions@mL:
   260                           	callstack 0
   261                           
   262                           ; 2 bytes @ 0x23
   263   000024                     	ds	2
   264   000026                     instructions@mR:
   265                           	callstack 0
   266                           
   267                           ; 2 bytes @ 0x25
   268   000026                     	ds	2
   269   000028                     instructions@count:
   270                           	callstack 0
   271                           
   272                           ; 2 bytes @ 0x27
   273   000028                     	ds	2
   274   00002A                     ??_instructions:
   275                           
   276                           ; 1 bytes @ 0x29
   277   00002A                     	ds	2
   278   00002C                     ??_main:
   279                           
   280                           ; 1 bytes @ 0x2B
   281   00002C                     	ds	2
   282                           
   283 ;;
   284 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   285 ;;
   286 ;; *************** function _main *****************
   287 ;; Defined at:
   288 ;;		line 14 in file "../main.c"
   289 ;; Parameters:    Size  Location     Type
   290 ;;		None
   291 ;; Auto vars:     Size  Location     Type
   292 ;;		None
   293 ;; Return value:  Size  Location     Type
   294 ;;                  1    wreg      void 
   295 ;; Registers used:
   296 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   297 ;; Tracked objects:
   298 ;;		On entry : 0/0
   299 ;;		On exit  : 0/0
   300 ;;		Unchanged: 0/0
   301 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   302 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   303 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   304 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   305 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   306 ;;Total ram usage:        2 bytes
   307 ;; Hardware stack levels required when called: 5
   308 ;; This function calls:
   309 ;;		_buggyLEDs_init
   310 ;;		_initDCmotorsPWM
   311 ;;		_instructions
   312 ;;		_motor_init
   313 ;; This function is called by:
   314 ;;		Startup code after reset
   315 ;; This function uses a non-reentrant model
   316 ;;
   317                           
   318                           	psect	text0
   319   01FB70                     __ptext0:
   320                           	callstack 0
   321   01FB70                     _main:
   322                           	callstack 26
   323   01FB70                     
   324                           ;../main.c: 16:     initDCmotorsPWM(99);
   325   01FB70  0E00               	movlw	0
   326   01FB72  6E02               	movwf	(initDCmotorsPWM@PWMperiod+1)^0,c
   327   01FB74  0E63               	movlw	99
   328   01FB76  6E01               	movwf	initDCmotorsPWM@PWMperiod^0,c
   329   01FB78  EC4C  F0FA         	call	_initDCmotorsPWM	;wreg free
   330   01FB7C                     
   331                           ;../main.c: 17:     buggyLEDs_init();
   332   01FB7C  ECCF  F0F9         	call	_buggyLEDs_init	;wreg free
   333   01FB80                     
   334                           ;../main.c: 18:     motor_init(&motorL,&motorR);
   335   01FB80  0E37               	movlw	low _motorL
   336   01FB82  6E01               	movwf	motor_init@mL^0,c
   337   01FB84  0E00               	movlw	high _motorL
   338   01FB86  6E02               	movwf	(motor_init@mL+1)^0,c
   339   01FB88  0E2E               	movlw	low _motorR
   340   01FB8A  6E03               	movwf	motor_init@mR^0,c
   341   01FB8C  0E00               	movlw	high _motorR
   342   01FB8E  6E04               	movwf	(motor_init@mR+1)^0,c
   343   01FB90  ECED  F0F9         	call	_motor_init	;wreg free
   344   01FB94                     
   345                           ;../main.c: 21:     _delay((unsigned long)((1000)*(64000000/4000.0)));
   346   01FB94  0E52               	movlw	82
   347   01FB96  6E2D               	movwf	(??_main+1)^0,c
   348   01FB98  0E2B               	movlw	43
   349   01FB9A  6E2C               	movwf	??_main^0,c
   350   01FB9C  0E00               	movlw	0
   351   01FB9E                     u637:
   352   01FB9E  2EE8               	decfsz	wreg,f,c
   353   01FBA0  D7FE               	bra	u637
   354   01FBA2  2E2C               	decfsz	??_main^0,f,c
   355   01FBA4  D7FC               	bra	u637
   356   01FBA6  2E2D               	decfsz	(??_main+1)^0,f,c
   357   01FBA8  D7FA               	bra	u637
   358   01FBAA  D000               	nop2	
   359   01FBAC                     
   360                           ;../main.c: 22:     instructions(&motorL,&motorR,1);
   361   01FBAC  0E37               	movlw	low _motorL
   362   01FBAE  6E24               	movwf	instructions@mL^0,c
   363   01FBB0  0E00               	movlw	high _motorL
   364   01FBB2  6E25               	movwf	(instructions@mL+1)^0,c
   365   01FBB4  0E2E               	movlw	low _motorR
   366   01FBB6  6E26               	movwf	instructions@mR^0,c
   367   01FBB8  0E00               	movlw	high _motorR
   368   01FBBA  6E27               	movwf	(instructions@mR+1)^0,c
   369   01FBBC  0E00               	movlw	0
   370   01FBBE  6E29               	movwf	(instructions@count+1)^0,c
   371   01FBC0  0E01               	movlw	1
   372   01FBC2  6E28               	movwf	instructions@count^0,c
   373   01FBC4  EC8E  F0FE         	call	_instructions	;wreg free
   374   01FBC8                     
   375                           ;../main.c: 23:     _delay((unsigned long)((1000)*(64000000/4000.0)));
   376   01FBC8  0E52               	movlw	82
   377   01FBCA  6E2D               	movwf	(??_main+1)^0,c
   378   01FBCC  0E2B               	movlw	43
   379   01FBCE  6E2C               	movwf	??_main^0,c
   380   01FBD0  0E00               	movlw	0
   381   01FBD2                     u647:
   382   01FBD2  2EE8               	decfsz	wreg,f,c
   383   01FBD4  D7FE               	bra	u647
   384   01FBD6  2E2C               	decfsz	??_main^0,f,c
   385   01FBD8  D7FC               	bra	u647
   386   01FBDA  2E2D               	decfsz	(??_main+1)^0,f,c
   387   01FBDC  D7FA               	bra	u647
   388   01FBDE  D000               	nop2	
   389   01FBE0                     
   390                           ;../main.c: 24:     instructions(&motorL,&motorR,2);
   391   01FBE0  0E37               	movlw	low _motorL
   392   01FBE2  6E24               	movwf	instructions@mL^0,c
   393   01FBE4  0E00               	movlw	high _motorL
   394   01FBE6  6E25               	movwf	(instructions@mL+1)^0,c
   395   01FBE8  0E2E               	movlw	low _motorR
   396   01FBEA  6E26               	movwf	instructions@mR^0,c
   397   01FBEC  0E00               	movlw	high _motorR
   398   01FBEE  6E27               	movwf	(instructions@mR+1)^0,c
   399   01FBF0  0E00               	movlw	0
   400   01FBF2  6E29               	movwf	(instructions@count+1)^0,c
   401   01FBF4  0E02               	movlw	2
   402   01FBF6  6E28               	movwf	instructions@count^0,c
   403   01FBF8  EC8E  F0FE         	call	_instructions	;wreg free
   404   01FBFC                     
   405                           ;../main.c: 25:     _delay((unsigned long)((1000)*(64000000/4000.0)));
   406   01FBFC  0E52               	movlw	82
   407   01FBFE  6E2D               	movwf	(??_main+1)^0,c
   408   01FC00  0E2B               	movlw	43
   409   01FC02  6E2C               	movwf	??_main^0,c
   410   01FC04  0E00               	movlw	0
   411   01FC06                     u657:
   412   01FC06  2EE8               	decfsz	wreg,f,c
   413   01FC08  D7FE               	bra	u657
   414   01FC0A  2E2C               	decfsz	??_main^0,f,c
   415   01FC0C  D7FC               	bra	u657
   416   01FC0E  2E2D               	decfsz	(??_main+1)^0,f,c
   417   01FC10  D7FA               	bra	u657
   418   01FC12  D000               	nop2	
   419   01FC14                     
   420                           ;../main.c: 26:     instructions(&motorL,&motorR,3);
   421   01FC14  0E37               	movlw	low _motorL
   422   01FC16  6E24               	movwf	instructions@mL^0,c
   423   01FC18  0E00               	movlw	high _motorL
   424   01FC1A  6E25               	movwf	(instructions@mL+1)^0,c
   425   01FC1C  0E2E               	movlw	low _motorR
   426   01FC1E  6E26               	movwf	instructions@mR^0,c
   427   01FC20  0E00               	movlw	high _motorR
   428   01FC22  6E27               	movwf	(instructions@mR+1)^0,c
   429   01FC24  0E00               	movlw	0
   430   01FC26  6E29               	movwf	(instructions@count+1)^0,c
   431   01FC28  0E03               	movlw	3
   432   01FC2A  6E28               	movwf	instructions@count^0,c
   433   01FC2C  EC8E  F0FE         	call	_instructions	;wreg free
   434   01FC30                     
   435                           ;../main.c: 27:     _delay((unsigned long)((1000)*(64000000/4000.0)));
   436   01FC30  0E52               	movlw	82
   437   01FC32  6E2D               	movwf	(??_main+1)^0,c
   438   01FC34  0E2B               	movlw	43
   439   01FC36  6E2C               	movwf	??_main^0,c
   440   01FC38  0E00               	movlw	0
   441   01FC3A                     u667:
   442   01FC3A  2EE8               	decfsz	wreg,f,c
   443   01FC3C  D7FE               	bra	u667
   444   01FC3E  2E2C               	decfsz	??_main^0,f,c
   445   01FC40  D7FC               	bra	u667
   446   01FC42  2E2D               	decfsz	(??_main+1)^0,f,c
   447   01FC44  D7FA               	bra	u667
   448   01FC46  D000               	nop2	
   449   01FC48                     
   450                           ;../main.c: 28:     instructions(&motorL,&motorR,4);
   451   01FC48  0E37               	movlw	low _motorL
   452   01FC4A  6E24               	movwf	instructions@mL^0,c
   453   01FC4C  0E00               	movlw	high _motorL
   454   01FC4E  6E25               	movwf	(instructions@mL+1)^0,c
   455   01FC50  0E2E               	movlw	low _motorR
   456   01FC52  6E26               	movwf	instructions@mR^0,c
   457   01FC54  0E00               	movlw	high _motorR
   458   01FC56  6E27               	movwf	(instructions@mR+1)^0,c
   459   01FC58  0E00               	movlw	0
   460   01FC5A  6E29               	movwf	(instructions@count+1)^0,c
   461   01FC5C  0E04               	movlw	4
   462   01FC5E  6E28               	movwf	instructions@count^0,c
   463   01FC60  EC8E  F0FE         	call	_instructions	;wreg free
   464   01FC64                     
   465                           ;../main.c: 29:     _delay((unsigned long)((1000)*(64000000/4000.0)));
   466   01FC64  0E52               	movlw	82
   467   01FC66  6E2D               	movwf	(??_main+1)^0,c
   468   01FC68  0E2B               	movlw	43
   469   01FC6A  6E2C               	movwf	??_main^0,c
   470   01FC6C  0E00               	movlw	0
   471   01FC6E                     u677:
   472   01FC6E  2EE8               	decfsz	wreg,f,c
   473   01FC70  D7FE               	bra	u677
   474   01FC72  2E2C               	decfsz	??_main^0,f,c
   475   01FC74  D7FC               	bra	u677
   476   01FC76  2E2D               	decfsz	(??_main+1)^0,f,c
   477   01FC78  D7FA               	bra	u677
   478   01FC7A  D000               	nop2	
   479   01FC7C                     
   480                           ;../main.c: 30:     instructions(&motorL,&motorR,5);
   481   01FC7C  0E37               	movlw	low _motorL
   482   01FC7E  6E24               	movwf	instructions@mL^0,c
   483   01FC80  0E00               	movlw	high _motorL
   484   01FC82  6E25               	movwf	(instructions@mL+1)^0,c
   485   01FC84  0E2E               	movlw	low _motorR
   486   01FC86  6E26               	movwf	instructions@mR^0,c
   487   01FC88  0E00               	movlw	high _motorR
   488   01FC8A  6E27               	movwf	(instructions@mR+1)^0,c
   489   01FC8C  0E00               	movlw	0
   490   01FC8E  6E29               	movwf	(instructions@count+1)^0,c
   491   01FC90  0E05               	movlw	5
   492   01FC92  6E28               	movwf	instructions@count^0,c
   493   01FC94  EC8E  F0FE         	call	_instructions	;wreg free
   494   01FC98                     
   495                           ;../main.c: 31:     _delay((unsigned long)((1000)*(64000000/4000.0)));
   496   01FC98  0E52               	movlw	82
   497   01FC9A  6E2D               	movwf	(??_main+1)^0,c
   498   01FC9C  0E2B               	movlw	43
   499   01FC9E  6E2C               	movwf	??_main^0,c
   500   01FCA0  0E00               	movlw	0
   501   01FCA2                     u687:
   502   01FCA2  2EE8               	decfsz	wreg,f,c
   503   01FCA4  D7FE               	bra	u687
   504   01FCA6  2E2C               	decfsz	??_main^0,f,c
   505   01FCA8  D7FC               	bra	u687
   506   01FCAA  2E2D               	decfsz	(??_main+1)^0,f,c
   507   01FCAC  D7FA               	bra	u687
   508   01FCAE  D000               	nop2	
   509   01FCB0                     
   510                           ;../main.c: 32:     instructions(&motorL,&motorR,6);
   511   01FCB0  0E37               	movlw	low _motorL
   512   01FCB2  6E24               	movwf	instructions@mL^0,c
   513   01FCB4  0E00               	movlw	high _motorL
   514   01FCB6  6E25               	movwf	(instructions@mL+1)^0,c
   515   01FCB8  0E2E               	movlw	low _motorR
   516   01FCBA  6E26               	movwf	instructions@mR^0,c
   517   01FCBC  0E00               	movlw	high _motorR
   518   01FCBE  6E27               	movwf	(instructions@mR+1)^0,c
   519   01FCC0  0E00               	movlw	0
   520   01FCC2  6E29               	movwf	(instructions@count+1)^0,c
   521   01FCC4  0E06               	movlw	6
   522   01FCC6  6E28               	movwf	instructions@count^0,c
   523   01FCC8  EC8E  F0FE         	call	_instructions	;wreg free
   524   01FCCC                     
   525                           ;../main.c: 33:     _delay((unsigned long)((1000)*(64000000/4000.0)));
   526   01FCCC  0E52               	movlw	82
   527   01FCCE  6E2D               	movwf	(??_main+1)^0,c
   528   01FCD0  0E2B               	movlw	43
   529   01FCD2  6E2C               	movwf	??_main^0,c
   530   01FCD4  0E00               	movlw	0
   531   01FCD6                     u697:
   532   01FCD6  2EE8               	decfsz	wreg,f,c
   533   01FCD8  D7FE               	bra	u697
   534   01FCDA  2E2C               	decfsz	??_main^0,f,c
   535   01FCDC  D7FC               	bra	u697
   536   01FCDE  2E2D               	decfsz	(??_main+1)^0,f,c
   537   01FCE0  D7FA               	bra	u697
   538   01FCE2  D000               	nop2	
   539   01FCE4                     
   540                           ;../main.c: 34:     instructions(&motorL,&motorR,7);
   541   01FCE4  0E37               	movlw	low _motorL
   542   01FCE6  6E24               	movwf	instructions@mL^0,c
   543   01FCE8  0E00               	movlw	high _motorL
   544   01FCEA  6E25               	movwf	(instructions@mL+1)^0,c
   545   01FCEC  0E2E               	movlw	low _motorR
   546   01FCEE  6E26               	movwf	instructions@mR^0,c
   547   01FCF0  0E00               	movlw	high _motorR
   548   01FCF2  6E27               	movwf	(instructions@mR+1)^0,c
   549   01FCF4  0E00               	movlw	0
   550   01FCF6  6E29               	movwf	(instructions@count+1)^0,c
   551   01FCF8  0E07               	movlw	7
   552   01FCFA  6E28               	movwf	instructions@count^0,c
   553   01FCFC  EC8E  F0FE         	call	_instructions	;wreg free
   554   01FD00                     
   555                           ;../main.c: 35:     _delay((unsigned long)((1000)*(64000000/4000.0)));
   556   01FD00  0E52               	movlw	82
   557   01FD02  6E2D               	movwf	(??_main+1)^0,c
   558   01FD04  0E2B               	movlw	43
   559   01FD06  6E2C               	movwf	??_main^0,c
   560   01FD08  0E00               	movlw	0
   561   01FD0A                     u707:
   562   01FD0A  2EE8               	decfsz	wreg,f,c
   563   01FD0C  D7FE               	bra	u707
   564   01FD0E  2E2C               	decfsz	??_main^0,f,c
   565   01FD10  D7FC               	bra	u707
   566   01FD12  2E2D               	decfsz	(??_main+1)^0,f,c
   567   01FD14  D7FA               	bra	u707
   568   01FD16  D000               	nop2	
   569   01FD18  EF00  F000         	goto	start
   570   01FD1C                     __end_of_main:
   571                           	callstack 0
   572                           
   573 ;; *************** function _motor_init *****************
   574 ;; Defined at:
   575 ;;		line 94 in file "../dc_motor.c"
   576 ;; Parameters:    Size  Location     Type
   577 ;;  mL              2    0[COMRAM] PTR struct DC_motor
   578 ;;		 -> motorL(9), 
   579 ;;  mR              2    2[COMRAM] PTR struct DC_motor
   580 ;;		 -> motorR(9), 
   581 ;; Auto vars:     Size  Location     Type
   582 ;;		None
   583 ;; Return value:  Size  Location     Type
   584 ;;                  1    wreg      void 
   585 ;; Registers used:
   586 ;;		wreg, status,2, status,0
   587 ;; Tracked objects:
   588 ;;		On entry : 0/0
   589 ;;		On exit  : 0/0
   590 ;;		Unchanged: 0/0
   591 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   592 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   593 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   594 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   595 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   596 ;;Total ram usage:        4 bytes
   597 ;; Hardware stack levels used: 1
   598 ;; This function calls:
   599 ;;		Nothing
   600 ;; This function is called by:
   601 ;;		_main
   602 ;; This function uses a non-reentrant model
   603 ;;
   604                           
   605                           	psect	text1
   606   01F3DA                     __ptext1:
   607                           	callstack 0
   608   01F3DA                     _motor_init:
   609                           	callstack 30
   610   01F3DA                     
   611                           ;../dc_motor.c: 94: void motor_init(DC_motor *mL, DC_motor *mR);../dc_motor.c: 95: {;../
      +                          dc_motor.c: 96:     motorL.power=0;
   612   01F3DA  0E00               	movlw	0
   613   01F3DC  6E37               	movwf	_motorL^0,c
   614                           
   615                           ;../dc_motor.c: 97:     motorL.direction=1;
   616   01F3DE  0E01               	movlw	1
   617   01F3E0  6E38               	movwf	(_motorL+1)^0,c
   618                           
   619                           ;../dc_motor.c: 98:     motorL.brakemode=1;
   620   01F3E2  0E01               	movlw	1
   621   01F3E4  6E39               	movwf	(_motorL+2)^0,c
   622   01F3E6                     
   623                           ;../dc_motor.c: 99:     motorL.posDutyHighByte=(unsigned char *)(&CCPR1H);
   624   01F3E6  0EAA               	movlw	170
   625   01F3E8  6E3C               	movwf	(_motorL+5)^0,c
   626   01F3EA  0E0F               	movlw	15
   627   01F3EC  6E3D               	movwf	(_motorL+6)^0,c
   628   01F3EE                     
   629                           ;../dc_motor.c: 100:     motorL.negDutyHighByte=(unsigned char *)(&CCPR2H);
   630   01F3EE  0EA6               	movlw	166
   631   01F3F0  6E3E               	movwf	(_motorL+7)^0,c
   632   01F3F2  0E0F               	movlw	15
   633   01F3F4  6E3F               	movwf	(_motorL+8)^0,c
   634                           
   635                           ;../dc_motor.c: 101:     motorL.PWMperiod=99;
   636   01F3F6  0E00               	movlw	0
   637   01F3F8  6E3B               	movwf	(_motorL+4)^0,c
   638   01F3FA  0E63               	movlw	99
   639   01F3FC  6E3A               	movwf	(_motorL+3)^0,c
   640                           
   641                           ;../dc_motor.c: 103:     motorR.power=0;
   642   01F3FE  0E00               	movlw	0
   643   01F400  6E2E               	movwf	_motorR^0,c
   644                           
   645                           ;../dc_motor.c: 104:     motorR.direction=1;
   646   01F402  0E01               	movlw	1
   647   01F404  6E2F               	movwf	(_motorR+1)^0,c
   648                           
   649                           ;../dc_motor.c: 105:     motorR.brakemode=1;
   650   01F406  0E01               	movlw	1
   651   01F408  6E30               	movwf	(_motorR+2)^0,c
   652   01F40A                     
   653                           ;../dc_motor.c: 106:     motorR.posDutyHighByte=(unsigned char *)(&CCPR3H);
   654   01F40A  0E25               	movlw	37
   655   01F40C  6E33               	movwf	(_motorR+5)^0,c
   656   01F40E  0E0F               	movlw	15
   657   01F410  6E34               	movwf	(_motorR+6)^0,c
   658   01F412                     
   659                           ;../dc_motor.c: 107:     motorR.negDutyHighByte=(unsigned char *)(&CCPR4H);
   660   01F412  0E21               	movlw	33
   661   01F414  6E35               	movwf	(_motorR+7)^0,c
   662   01F416  0E0F               	movlw	15
   663   01F418  6E36               	movwf	(_motorR+8)^0,c
   664                           
   665                           ;../dc_motor.c: 108:     motorR.PWMperiod=99;
   666   01F41A  0E00               	movlw	0
   667   01F41C  6E32               	movwf	(_motorR+4)^0,c
   668   01F41E  0E63               	movlw	99
   669   01F420  6E31               	movwf	(_motorR+3)^0,c
   670   01F422  0012               	return		;funcret
   671   01F424                     __end_of_motor_init:
   672                           	callstack 0
   673                           
   674 ;; *************** function _instructions *****************
   675 ;; Defined at:
   676 ;;		line 254 in file "../dc_motor.c"
   677 ;; Parameters:    Size  Location     Type
   678 ;;  mL              2   35[COMRAM] PTR struct DC_motor
   679 ;;		 -> motorL(9), 
   680 ;;  mR              2   37[COMRAM] PTR struct DC_motor
   681 ;;		 -> motorR(9), 
   682 ;;  count           2   39[COMRAM] int 
   683 ;; Auto vars:     Size  Location     Type
   684 ;;		None
   685 ;; Return value:  Size  Location     Type
   686 ;;                  1    wreg      void 
   687 ;; Registers used:
   688 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   689 ;; Tracked objects:
   690 ;;		On entry : 0/0
   691 ;;		On exit  : 0/0
   692 ;;		Unchanged: 0/0
   693 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   694 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   695 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   696 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   697 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   698 ;;Total ram usage:        8 bytes
   699 ;; Hardware stack levels used: 1
   700 ;; Hardware stack levels required when called: 4
   701 ;; This function calls:
   702 ;;		_left_45
   703 ;;		_reverse
   704 ;;		_right_45
   705 ;;		_space
   706 ;;		_stop
   707 ;; This function is called by:
   708 ;;		_main
   709 ;; This function uses a non-reentrant model
   710 ;;
   711                           
   712                           	psect	text2
   713   01FD1C                     __ptext2:
   714                           	callstack 0
   715   01FD1C                     _instructions:
   716                           	callstack 26
   717   01FD1C                     
   718                           ;../dc_motor.c: 254: void instructions(DC_motor *mL, DC_motor *mR, int count);../dc_moto
      +                          r.c: 255: {;../dc_motor.c: 256:     space(mL,mR);
   719   01FD1C  C024  F01A         	movff	instructions@mL,space@mL
   720   01FD20  C025  F01B         	movff	instructions@mL+1,space@mL+1
   721   01FD24  C026  F01C         	movff	instructions@mR,space@mR
   722   01FD28  C027  F01D         	movff	instructions@mR+1,space@mR+1
   723   01FD2C  EC4B  F0FB         	call	_space	;wreg free
   724   01FD30                     
   725                           ;../dc_motor.c: 257:     _delay((unsigned long)((500)*(64000000/4000.0)));
   726   01FD30  0E29               	movlw	41
   727   01FD32  6E2B               	movwf	(??_instructions+1)^0,c
   728   01FD34  0E96               	movlw	150
   729   01FD36  6E2A               	movwf	??_instructions^0,c
   730   01FD38  0E7F               	movlw	127
   731   01FD3A                     u717:
   732   01FD3A  2EE8               	decfsz	wreg,f,c
   733   01FD3C  D7FE               	bra	u717
   734   01FD3E  2E2A               	decfsz	??_instructions^0,f,c
   735   01FD40  D7FC               	bra	u717
   736   01FD42  2E2B               	decfsz	(??_instructions+1)^0,f,c
   737   01FD44  D7FA               	bra	u717
   738   01FD46  F000               	nop	
   739   01FD48                     
   740                           ;../dc_motor.c: 258:     stop(mL,mR);
   741   01FD48  C024  F014         	movff	instructions@mL,stop@mL
   742   01FD4C  C025  F015         	movff	instructions@mL+1,stop@mL+1
   743   01FD50  C026  F016         	movff	instructions@mR,stop@mR
   744   01FD54  C027  F017         	movff	instructions@mR+1,stop@mR+1
   745   01FD58  EC94  F0FA         	call	_stop	;wreg free
   746                           
   747                           ;../dc_motor.c: 259:     _delay((unsigned long)((500)*(64000000/4000.0)));
   748   01FD5C  0E29               	movlw	41
   749   01FD5E  6E2B               	movwf	(??_instructions+1)^0,c
   750   01FD60  0E96               	movlw	150
   751   01FD62  6E2A               	movwf	??_instructions^0,c
   752   01FD64  0E7F               	movlw	127
   753   01FD66                     u727:
   754   01FD66  2EE8               	decfsz	wreg,f,c
   755   01FD68  D7FE               	bra	u727
   756   01FD6A  2E2A               	decfsz	??_instructions^0,f,c
   757   01FD6C  D7FC               	bra	u727
   758   01FD6E  2E2B               	decfsz	(??_instructions+1)^0,f,c
   759   01FD70  D7FA               	bra	u727
   760   01FD72  F000               	nop	
   761   01FD74                     
   762                           ;../dc_motor.c: 260:     if (count == 1){right_45(mL,mR,2); stop(mL,mR);}
   763   01FD74  0428               	decf	instructions@count^0,w,c
   764   01FD76  1029               	iorwf	(instructions@count+1)^0,w,c
   765   01FD78  A4D8               	btfss	status,2,c
   766   01FD7A  EFC1  F0FE         	goto	u541
   767   01FD7E  EFC3  F0FE         	goto	u540
   768   01FD82                     u541:
   769   01FD82  EFDB  F0FE         	goto	l1551
   770   01FD86                     u540:
   771   01FD86  C024  F01A         	movff	instructions@mL,right_45@mL
   772   01FD8A  C025  F01B         	movff	instructions@mL+1,right_45@mL+1
   773   01FD8E  C026  F01C         	movff	instructions@mR,right_45@mR
   774   01FD92  C027  F01D         	movff	instructions@mR+1,right_45@mR+1
   775   01FD96  0E00               	movlw	0
   776   01FD98  6E1F               	movwf	(right_45@count+1)^0,c
   777   01FD9A  0E02               	movlw	2
   778   01FD9C  6E1E               	movwf	right_45@count^0,c
   779   01FD9E  ECCB  F0FB         	call	_right_45	;wreg free
   780   01FDA2  C024  F014         	movff	instructions@mL,stop@mL
   781   01FDA6  C025  F015         	movff	instructions@mL+1,stop@mL+1
   782   01FDAA  C026  F016         	movff	instructions@mR,stop@mR
   783   01FDAE  C027  F017         	movff	instructions@mR+1,stop@mR+1
   784   01FDB2  EC94  F0FA         	call	_stop	;wreg free
   785   01FDB6                     l1551:
   786                           
   787                           ;../dc_motor.c: 261:     if (count == 2){left_45(mL,mR,2); stop(mL,mR);}
   788   01FDB6  0E02               	movlw	2
   789   01FDB8  1828               	xorwf	instructions@count^0,w,c
   790   01FDBA  1029               	iorwf	(instructions@count+1)^0,w,c
   791   01FDBC  A4D8               	btfss	status,2,c
   792   01FDBE  EFE3  F0FE         	goto	u551
   793   01FDC2  EFE5  F0FE         	goto	u550
   794   01FDC6                     u551:
   795   01FDC6  EFFD  F0FE         	goto	l1555
   796   01FDCA                     u550:
   797   01FDCA  C024  F01A         	movff	instructions@mL,left_45@mL
   798   01FDCE  C025  F01B         	movff	instructions@mL+1,left_45@mL+1
   799   01FDD2  C026  F01C         	movff	instructions@mR,left_45@mR
   800   01FDD6  C027  F01D         	movff	instructions@mR+1,left_45@mR+1
   801   01FDDA  0E00               	movlw	0
   802   01FDDC  6E1F               	movwf	(left_45@count+1)^0,c
   803   01FDDE  0E02               	movlw	2
   804   01FDE0  6E1E               	movwf	left_45@count^0,c
   805   01FDE2  EC62  F0FC         	call	_left_45	;wreg free
   806   01FDE6  C024  F014         	movff	instructions@mL,stop@mL
   807   01FDEA  C025  F015         	movff	instructions@mL+1,stop@mL+1
   808   01FDEE  C026  F016         	movff	instructions@mR,stop@mR
   809   01FDF2  C027  F017         	movff	instructions@mR+1,stop@mR+1
   810   01FDF6  EC94  F0FA         	call	_stop	;wreg free
   811   01FDFA                     l1555:
   812                           
   813                           ;../dc_motor.c: 262:     if (count == 3){right_45(mL,mR,4); stop(mL,mR);}
   814   01FDFA  0E03               	movlw	3
   815   01FDFC  1828               	xorwf	instructions@count^0,w,c
   816   01FDFE  1029               	iorwf	(instructions@count+1)^0,w,c
   817   01FE00  A4D8               	btfss	status,2,c
   818   01FE02  EF05  F0FF         	goto	u561
   819   01FE06  EF07  F0FF         	goto	u560
   820   01FE0A                     u561:
   821   01FE0A  EF1F  F0FF         	goto	l1559
   822   01FE0E                     u560:
   823   01FE0E  C024  F01A         	movff	instructions@mL,right_45@mL
   824   01FE12  C025  F01B         	movff	instructions@mL+1,right_45@mL+1
   825   01FE16  C026  F01C         	movff	instructions@mR,right_45@mR
   826   01FE1A  C027  F01D         	movff	instructions@mR+1,right_45@mR+1
   827   01FE1E  0E00               	movlw	0
   828   01FE20  6E1F               	movwf	(right_45@count+1)^0,c
   829   01FE22  0E04               	movlw	4
   830   01FE24  6E1E               	movwf	right_45@count^0,c
   831   01FE26  ECCB  F0FB         	call	_right_45	;wreg free
   832   01FE2A  C024  F014         	movff	instructions@mL,stop@mL
   833   01FE2E  C025  F015         	movff	instructions@mL+1,stop@mL+1
   834   01FE32  C026  F016         	movff	instructions@mR,stop@mR
   835   01FE36  C027  F017         	movff	instructions@mR+1,stop@mR+1
   836   01FE3A  EC94  F0FA         	call	_stop	;wreg free
   837   01FE3E                     l1559:
   838                           
   839                           ;../dc_motor.c: 263:     if (count == 4){reverse(mL,mR); _delay((unsigned long)((400)*(6
      +                          4000000/4000.0)));stop(mL,mR);_delay((unsigned long)((500)*(64000000/4000.0)));right_45(
      +                          mL,mR,2); stop(mL,mR);}
   840   01FE3E  0E04               	movlw	4
   841   01FE40  1828               	xorwf	instructions@count^0,w,c
   842   01FE42  1029               	iorwf	(instructions@count+1)^0,w,c
   843   01FE44  A4D8               	btfss	status,2,c
   844   01FE46  EF27  F0FF         	goto	u571
   845   01FE4A  EF29  F0FF         	goto	u570
   846   01FE4E                     u571:
   847   01FE4E  EF6D  F0FF         	goto	l1571
   848   01FE52                     u570:
   849   01FE52  C024  F01A         	movff	instructions@mL,reverse@mL
   850   01FE56  C025  F01B         	movff	instructions@mL+1,reverse@mL+1
   851   01FE5A  C026  F01C         	movff	instructions@mR,reverse@mR
   852   01FE5E  C027  F01D         	movff	instructions@mR+1,reverse@mR+1
   853   01FE62  ECEC  F0FA         	call	_reverse	;wreg free
   854   01FE66  0E21               	movlw	33
   855   01FE68  6E2B               	movwf	(??_instructions+1)^0,c
   856   01FE6A  0E78               	movlw	120
   857   01FE6C  6E2A               	movwf	??_instructions^0,c
   858   01FE6E  0E98               	movlw	152
   859   01FE70                     u737:
   860   01FE70  2EE8               	decfsz	wreg,f,c
   861   01FE72  D7FE               	bra	u737
   862   01FE74  2E2A               	decfsz	??_instructions^0,f,c
   863   01FE76  D7FC               	bra	u737
   864   01FE78  2E2B               	decfsz	(??_instructions+1)^0,f,c
   865   01FE7A  D7FA               	bra	u737
   866   01FE7C  D000               	nop2	
   867   01FE7E  C024  F014         	movff	instructions@mL,stop@mL
   868   01FE82  C025  F015         	movff	instructions@mL+1,stop@mL+1
   869   01FE86  C026  F016         	movff	instructions@mR,stop@mR
   870   01FE8A  C027  F017         	movff	instructions@mR+1,stop@mR+1
   871   01FE8E  EC94  F0FA         	call	_stop	;wreg free
   872   01FE92  0E29               	movlw	41
   873   01FE94  6E2B               	movwf	(??_instructions+1)^0,c
   874   01FE96  0E96               	movlw	150
   875   01FE98  6E2A               	movwf	??_instructions^0,c
   876   01FE9A  0E7F               	movlw	127
   877   01FE9C                     u747:
   878   01FE9C  2EE8               	decfsz	wreg,f,c
   879   01FE9E  D7FE               	bra	u747
   880   01FEA0  2E2A               	decfsz	??_instructions^0,f,c
   881   01FEA2  D7FC               	bra	u747
   882   01FEA4  2E2B               	decfsz	(??_instructions+1)^0,f,c
   883   01FEA6  D7FA               	bra	u747
   884   01FEA8  F000               	nop	
   885   01FEAA  C024  F01A         	movff	instructions@mL,right_45@mL
   886   01FEAE  C025  F01B         	movff	instructions@mL+1,right_45@mL+1
   887   01FEB2  C026  F01C         	movff	instructions@mR,right_45@mR
   888   01FEB6  C027  F01D         	movff	instructions@mR+1,right_45@mR+1
   889   01FEBA  0E00               	movlw	0
   890   01FEBC  6E1F               	movwf	(right_45@count+1)^0,c
   891   01FEBE  0E02               	movlw	2
   892   01FEC0  6E1E               	movwf	right_45@count^0,c
   893   01FEC2  ECCB  F0FB         	call	_right_45	;wreg free
   894   01FEC6  C024  F014         	movff	instructions@mL,stop@mL
   895   01FECA  C025  F015         	movff	instructions@mL+1,stop@mL+1
   896   01FECE  C026  F016         	movff	instructions@mR,stop@mR
   897   01FED2  C027  F017         	movff	instructions@mR+1,stop@mR+1
   898   01FED6  EC94  F0FA         	call	_stop	;wreg free
   899   01FEDA                     l1571:
   900                           
   901                           ;../dc_motor.c: 264:     if (count == 5){reverse(mL,mR); _delay((unsigned long)((400)*(6
      +                          4000000/4000.0)));stop(mL,mR);_delay((unsigned long)((500)*(64000000/4000.0)));left_45(m
      +                          L,mR,2); stop(mL,mR);}
   902   01FEDA  0E05               	movlw	5
   903   01FEDC  1828               	xorwf	instructions@count^0,w,c
   904   01FEDE  1029               	iorwf	(instructions@count+1)^0,w,c
   905   01FEE0  A4D8               	btfss	status,2,c
   906   01FEE2  EF75  F0FF         	goto	u581
   907   01FEE6  EF77  F0FF         	goto	u580
   908   01FEEA                     u581:
   909   01FEEA  EFBB  F0FF         	goto	l1583
   910   01FEEE                     u580:
   911   01FEEE  C024  F01A         	movff	instructions@mL,reverse@mL
   912   01FEF2  C025  F01B         	movff	instructions@mL+1,reverse@mL+1
   913   01FEF6  C026  F01C         	movff	instructions@mR,reverse@mR
   914   01FEFA  C027  F01D         	movff	instructions@mR+1,reverse@mR+1
   915   01FEFE  ECEC  F0FA         	call	_reverse	;wreg free
   916   01FF02  0E21               	movlw	33
   917   01FF04  6E2B               	movwf	(??_instructions+1)^0,c
   918   01FF06  0E78               	movlw	120
   919   01FF08  6E2A               	movwf	??_instructions^0,c
   920   01FF0A  0E98               	movlw	152
   921   01FF0C                     u757:
   922   01FF0C  2EE8               	decfsz	wreg,f,c
   923   01FF0E  D7FE               	bra	u757
   924   01FF10  2E2A               	decfsz	??_instructions^0,f,c
   925   01FF12  D7FC               	bra	u757
   926   01FF14  2E2B               	decfsz	(??_instructions+1)^0,f,c
   927   01FF16  D7FA               	bra	u757
   928   01FF18  D000               	nop2	
   929   01FF1A  C024  F014         	movff	instructions@mL,stop@mL
   930   01FF1E  C025  F015         	movff	instructions@mL+1,stop@mL+1
   931   01FF22  C026  F016         	movff	instructions@mR,stop@mR
   932   01FF26  C027  F017         	movff	instructions@mR+1,stop@mR+1
   933   01FF2A  EC94  F0FA         	call	_stop	;wreg free
   934   01FF2E  0E29               	movlw	41
   935   01FF30  6E2B               	movwf	(??_instructions+1)^0,c
   936   01FF32  0E96               	movlw	150
   937   01FF34  6E2A               	movwf	??_instructions^0,c
   938   01FF36  0E7F               	movlw	127
   939   01FF38                     u767:
   940   01FF38  2EE8               	decfsz	wreg,f,c
   941   01FF3A  D7FE               	bra	u767
   942   01FF3C  2E2A               	decfsz	??_instructions^0,f,c
   943   01FF3E  D7FC               	bra	u767
   944   01FF40  2E2B               	decfsz	(??_instructions+1)^0,f,c
   945   01FF42  D7FA               	bra	u767
   946   01FF44  F000               	nop	
   947   01FF46  C024  F01A         	movff	instructions@mL,left_45@mL
   948   01FF4A  C025  F01B         	movff	instructions@mL+1,left_45@mL+1
   949   01FF4E  C026  F01C         	movff	instructions@mR,left_45@mR
   950   01FF52  C027  F01D         	movff	instructions@mR+1,left_45@mR+1
   951   01FF56  0E00               	movlw	0
   952   01FF58  6E1F               	movwf	(left_45@count+1)^0,c
   953   01FF5A  0E02               	movlw	2
   954   01FF5C  6E1E               	movwf	left_45@count^0,c
   955   01FF5E  EC62  F0FC         	call	_left_45	;wreg free
   956   01FF62  C024  F014         	movff	instructions@mL,stop@mL
   957   01FF66  C025  F015         	movff	instructions@mL+1,stop@mL+1
   958   01FF6A  C026  F016         	movff	instructions@mR,stop@mR
   959   01FF6E  C027  F017         	movff	instructions@mR+1,stop@mR+1
   960   01FF72  EC94  F0FA         	call	_stop	;wreg free
   961   01FF76                     l1583:
   962                           
   963                           ;../dc_motor.c: 265:     if (count == 6){right_45(mL,mR,3); stop(mL,mR);}
   964   01FF76  0E06               	movlw	6
   965   01FF78  1828               	xorwf	instructions@count^0,w,c
   966   01FF7A  1029               	iorwf	(instructions@count+1)^0,w,c
   967   01FF7C  A4D8               	btfss	status,2,c
   968   01FF7E  EFC3  F0FF         	goto	u591
   969   01FF82  EFC5  F0FF         	goto	u590
   970   01FF86                     u591:
   971   01FF86  EFDD  F0FF         	goto	l1587
   972   01FF8A                     u590:
   973   01FF8A  C024  F01A         	movff	instructions@mL,right_45@mL
   974   01FF8E  C025  F01B         	movff	instructions@mL+1,right_45@mL+1
   975   01FF92  C026  F01C         	movff	instructions@mR,right_45@mR
   976   01FF96  C027  F01D         	movff	instructions@mR+1,right_45@mR+1
   977   01FF9A  0E00               	movlw	0
   978   01FF9C  6E1F               	movwf	(right_45@count+1)^0,c
   979   01FF9E  0E03               	movlw	3
   980   01FFA0  6E1E               	movwf	right_45@count^0,c
   981   01FFA2  ECCB  F0FB         	call	_right_45	;wreg free
   982   01FFA6  C024  F014         	movff	instructions@mL,stop@mL
   983   01FFAA  C025  F015         	movff	instructions@mL+1,stop@mL+1
   984   01FFAE  C026  F016         	movff	instructions@mR,stop@mR
   985   01FFB2  C027  F017         	movff	instructions@mR+1,stop@mR+1
   986   01FFB6  EC94  F0FA         	call	_stop	;wreg free
   987   01FFBA                     l1587:
   988                           
   989                           ;../dc_motor.c: 266:     if (count == 7){left_45(mL,mR,3); stop(mL,mR);}
   990   01FFBA  0E07               	movlw	7
   991   01FFBC  1828               	xorwf	instructions@count^0,w,c
   992   01FFBE  1029               	iorwf	(instructions@count+1)^0,w,c
   993   01FFC0  A4D8               	btfss	status,2,c
   994   01FFC2  EFE5  F0FF         	goto	u601
   995   01FFC6  EFE7  F0FF         	goto	u600
   996   01FFCA                     u601:
   997   01FFCA  EFFF  F0FF         	goto	l216
   998   01FFCE                     u600:
   999   01FFCE  C024  F01A         	movff	instructions@mL,left_45@mL
  1000   01FFD2  C025  F01B         	movff	instructions@mL+1,left_45@mL+1
  1001   01FFD6  C026  F01C         	movff	instructions@mR,left_45@mR
  1002   01FFDA  C027  F01D         	movff	instructions@mR+1,left_45@mR+1
  1003   01FFDE  0E00               	movlw	0
  1004   01FFE0  6E1F               	movwf	(left_45@count+1)^0,c
  1005   01FFE2  0E03               	movlw	3
  1006   01FFE4  6E1E               	movwf	left_45@count^0,c
  1007   01FFE6  EC62  F0FC         	call	_left_45	;wreg free
  1008   01FFEA  C024  F014         	movff	instructions@mL,stop@mL
  1009   01FFEE  C025  F015         	movff	instructions@mL+1,stop@mL+1
  1010   01FFF2  C026  F016         	movff	instructions@mR,stop@mR
  1011   01FFF6  C027  F017         	movff	instructions@mR+1,stop@mR+1
  1012   01FFFA  EC94  F0FA         	call	_stop	;wreg free
  1013   01FFFE                     l216:
  1014   01FFFE  0012               	return		;funcret
  1015   020000                     __end_of_instructions:
  1016                           	callstack 0
  1017                           
  1018 ;; *************** function _space *****************
  1019 ;; Defined at:
  1020 ;;		line 231 in file "../dc_motor.c"
  1021 ;; Parameters:    Size  Location     Type
  1022 ;;  mL              2   25[COMRAM] PTR struct DC_motor
  1023 ;;		 -> motorL(9), 
  1024 ;;  mR              2   27[COMRAM] PTR struct DC_motor
  1025 ;;		 -> motorR(9), 
  1026 ;; Auto vars:     Size  Location     Type
  1027 ;;		None
  1028 ;; Return value:  Size  Location     Type
  1029 ;;                  1    wreg      void 
  1030 ;; Registers used:
  1031 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1032 ;; Tracked objects:
  1033 ;;		On entry : 0/0
  1034 ;;		On exit  : 0/0
  1035 ;;		Unchanged: 0/0
  1036 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1037 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1038 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1039 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1040 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1041 ;;Total ram usage:        6 bytes
  1042 ;; Hardware stack levels used: 1
  1043 ;; Hardware stack levels required when called: 3
  1044 ;; This function calls:
  1045 ;;		_setMotorPWM
  1046 ;;		_stop
  1047 ;; This function is called by:
  1048 ;;		_instructions
  1049 ;; This function uses a non-reentrant model
  1050 ;;
  1051                           
  1052                           	psect	text3
  1053   01F696                     __ptext3:
  1054                           	callstack 0
  1055   01F696                     _space:
  1056                           	callstack 26
  1057   01F696                     
  1058                           ;../dc_motor.c: 231: void space(DC_motor *mL, DC_motor *mR);../dc_motor.c: 232: {;../dc_
      +                          motor.c: 233:     stop(mL,mR);
  1059   01F696  C01A  F014         	movff	space@mL,stop@mL
  1060   01F69A  C01B  F015         	movff	space@mL+1,stop@mL+1
  1061   01F69E  C01C  F016         	movff	space@mR,stop@mR
  1062   01F6A2  C01D  F017         	movff	space@mR+1,stop@mR+1
  1063   01F6A6  EC94  F0FA         	call	_stop	;wreg free
  1064   01F6AA                     
  1065                           ;../dc_motor.c: 234:     LATHbits.LATH1 = 1;
  1066   01F6AA  8280               	bsf	128,1,c	;volatile
  1067   01F6AC                     
  1068                           ;../dc_motor.c: 235:     mL-> direction = 0;
  1069   01F6AC  EE20 F001          	lfsr	2,1
  1070   01F6B0  501A               	movf	space@mL^0,w,c
  1071   01F6B2  26D9               	addwf	fsr2l,f,c
  1072   01F6B4  501B               	movf	(space@mL+1)^0,w,c
  1073   01F6B6  22DA               	addwfc	fsr2h,f,c
  1074   01F6B8  0E00               	movlw	0
  1075   01F6BA  6EDF               	movwf	indf2,c
  1076   01F6BC                     
  1077                           ;../dc_motor.c: 236:     mR-> direction = 0;
  1078   01F6BC  EE20 F001          	lfsr	2,1
  1079   01F6C0  501C               	movf	space@mR^0,w,c
  1080   01F6C2  26D9               	addwf	fsr2l,f,c
  1081   01F6C4  501D               	movf	(space@mR+1)^0,w,c
  1082   01F6C6  22DA               	addwfc	fsr2h,f,c
  1083   01F6C8  0E00               	movlw	0
  1084   01F6CA  6EDF               	movwf	indf2,c
  1085                           
  1086                           ;../dc_motor.c: 237:     setMotorPWM(mR);
  1087   01F6CC  C01C  F00E         	movff	space@mR,setMotorPWM@m
  1088   01F6D0  C01D  F00F         	movff	space@mR+1,setMotorPWM@m+1
  1089   01F6D4  EC02  F0FD         	call	_setMotorPWM	;wreg free
  1090                           
  1091                           ;../dc_motor.c: 238:     setMotorPWM(mL);
  1092   01F6D8  C01A  F00E         	movff	space@mL,setMotorPWM@m
  1093   01F6DC  C01B  F00F         	movff	space@mL+1,setMotorPWM@m+1
  1094   01F6E0  EC02  F0FD         	call	_setMotorPWM	;wreg free
  1095                           
  1096                           ;../dc_motor.c: 239:     while ((mL->power <40) && (mR->power <40)){
  1097   01F6E4  EF90  F0FB         	goto	l1495
  1098   01F6E8                     l1487:
  1099                           
  1100                           ;../dc_motor.c: 240:         mL->power += 10;
  1101   01F6E8  C01A  FFD9         	movff	space@mL,fsr2l
  1102   01F6EC  C01B  FFDA         	movff	space@mL+1,fsr2h
  1103   01F6F0  0E0A               	movlw	10
  1104   01F6F2  26DF               	addwf	indf2,f,c
  1105                           
  1106                           ;../dc_motor.c: 241:         mR->power += 10;
  1107   01F6F4  C01C  FFD9         	movff	space@mR,fsr2l
  1108   01F6F8  C01D  FFDA         	movff	space@mR+1,fsr2h
  1109   01F6FC  0E0A               	movlw	10
  1110   01F6FE  26DF               	addwf	indf2,f,c
  1111   01F700                     
  1112                           ;../dc_motor.c: 242:         setMotorPWM(mL);
  1113   01F700  C01A  F00E         	movff	space@mL,setMotorPWM@m
  1114   01F704  C01B  F00F         	movff	space@mL+1,setMotorPWM@m+1
  1115   01F708  EC02  F0FD         	call	_setMotorPWM	;wreg free
  1116   01F70C                     
  1117                           ;../dc_motor.c: 243:         setMotorPWM(mR);
  1118   01F70C  C01C  F00E         	movff	space@mR,setMotorPWM@m
  1119   01F710  C01D  F00F         	movff	space@mR+1,setMotorPWM@m+1
  1120   01F714  EC02  F0FD         	call	_setMotorPWM	;wreg free
  1121   01F718                     
  1122                           ;../dc_motor.c: 244:         _delay((unsigned long)((20)*(64000000/4000000.0)));
  1123   01F718  0E6A               	movlw	106
  1124   01F71A                     u777:
  1125   01F71A  2EE8               	decfsz	wreg,f,c
  1126   01F71C  D7FE               	bra	u777
  1127   01F71E  D000               	nop2	
  1128   01F720                     l1495:
  1129                           
  1130                           ;../dc_motor.c: 239:     while ((mL->power <40) && (mR->power <40)){
  1131   01F720  C01A  FFD9         	movff	space@mL,fsr2l
  1132   01F724  C01B  FFDA         	movff	space@mL+1,fsr2h
  1133   01F728  0E28               	movlw	40
  1134   01F72A  60DF               	cpfslt	indf2,c
  1135   01F72C  EF9A  F0FB         	goto	u521
  1136   01F730  EF9C  F0FB         	goto	u520
  1137   01F734                     u521:
  1138   01F734  EFA8  F0FB         	goto	l1499
  1139   01F738                     u520:
  1140   01F738  C01C  FFD9         	movff	space@mR,fsr2l
  1141   01F73C  C01D  FFDA         	movff	space@mR+1,fsr2h
  1142   01F740  0E27               	movlw	39
  1143   01F742  64DF               	cpfsgt	indf2,c
  1144   01F744  EFA6  F0FB         	goto	u531
  1145   01F748  EFA8  F0FB         	goto	u530
  1146   01F74C                     u531:
  1147   01F74C  EF74  F0FB         	goto	l1487
  1148   01F750                     u530:
  1149   01F750                     l1499:
  1150                           
  1151                           ;../dc_motor.c: 246:     _delay((unsigned long)((300)*(64000000/4000.0)));
  1152   01F750  0E19               	movlw	25
  1153   01F752  6E1F               	movwf	(??_space+1)^0,c
  1154   01F754  0E5A               	movlw	90
  1155   01F756  6E1E               	movwf	??_space^0,c
  1156   01F758  0EB2               	movlw	178
  1157   01F75A                     u787:
  1158   01F75A  2EE8               	decfsz	wreg,f,c
  1159   01F75C  D7FE               	bra	u787
  1160   01F75E  2E1E               	decfsz	??_space^0,f,c
  1161   01F760  D7FC               	bra	u787
  1162   01F762  2E1F               	decfsz	(??_space+1)^0,f,c
  1163   01F764  D7FA               	bra	u787
  1164   01F766                     
  1165                           ;../dc_motor.c: 247:     stop(mL,mR);
  1166   01F766  C01A  F014         	movff	space@mL,stop@mL
  1167   01F76A  C01B  F015         	movff	space@mL+1,stop@mL+1
  1168   01F76E  C01C  F016         	movff	space@mR,stop@mR
  1169   01F772  C01D  F017         	movff	space@mR+1,stop@mR+1
  1170   01F776  EC94  F0FA         	call	_stop	;wreg free
  1171   01F77A                     
  1172                           ;../dc_motor.c: 248:     _delay((unsigned long)((200)*(64000000/4000.0)));
  1173   01F77A  0E11               	movlw	17
  1174   01F77C  6E1F               	movwf	(??_space+1)^0,c
  1175   01F77E  0E3C               	movlw	60
  1176   01F780  6E1E               	movwf	??_space^0,c
  1177   01F782  0ECB               	movlw	203
  1178   01F784                     u797:
  1179   01F784  2EE8               	decfsz	wreg,f,c
  1180   01F786  D7FE               	bra	u797
  1181   01F788  2E1E               	decfsz	??_space^0,f,c
  1182   01F78A  D7FC               	bra	u797
  1183   01F78C  2E1F               	decfsz	(??_space+1)^0,f,c
  1184   01F78E  D7FA               	bra	u797
  1185   01F790  F000               	nop	
  1186   01F792                     
  1187                           ;../dc_motor.c: 249:     LATHbits.LATH1 = 0;
  1188   01F792  9280               	bcf	128,1,c	;volatile
  1189   01F794  0012               	return		;funcret
  1190   01F796                     __end_of_space:
  1191                           	callstack 0
  1192                           
  1193 ;; *************** function _right_45 *****************
  1194 ;; Defined at:
  1195 ;;		line 210 in file "../dc_motor.c"
  1196 ;; Parameters:    Size  Location     Type
  1197 ;;  mL              2   25[COMRAM] PTR struct DC_motor
  1198 ;;		 -> motorL(9), 
  1199 ;;  mR              2   27[COMRAM] PTR struct DC_motor
  1200 ;;		 -> motorR(9), 
  1201 ;;  count           2   29[COMRAM] int 
  1202 ;; Auto vars:     Size  Location     Type
  1203 ;;  i               2   33[COMRAM] int 
  1204 ;; Return value:  Size  Location     Type
  1205 ;;                  1    wreg      void 
  1206 ;; Registers used:
  1207 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1208 ;; Tracked objects:
  1209 ;;		On entry : 0/0
  1210 ;;		On exit  : 0/0
  1211 ;;		Unchanged: 0/0
  1212 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1213 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1214 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1215 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1216 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1217 ;;Total ram usage:       10 bytes
  1218 ;; Hardware stack levels used: 1
  1219 ;; Hardware stack levels required when called: 3
  1220 ;; This function calls:
  1221 ;;		_setMotorPWM
  1222 ;;		_stop
  1223 ;; This function is called by:
  1224 ;;		_instructions
  1225 ;; This function uses a non-reentrant model
  1226 ;;
  1227                           
  1228                           	psect	text4
  1229   01F796                     __ptext4:
  1230                           	callstack 0
  1231   01F796                     _right_45:
  1232                           	callstack 26
  1233   01F796                     
  1234                           ;../dc_motor.c: 210: void right_45(DC_motor *mL, DC_motor *mR, int count);../dc_motor.c:
      +                           211: {;../dc_motor.c: 212:     mL-> direction = 1;
  1235   01F796  EE20 F001          	lfsr	2,1
  1236   01F79A  501A               	movf	right_45@mL^0,w,c
  1237   01F79C  26D9               	addwf	fsr2l,f,c
  1238   01F79E  501B               	movf	(right_45@mL+1)^0,w,c
  1239   01F7A0  22DA               	addwfc	fsr2h,f,c
  1240   01F7A2  0E01               	movlw	1
  1241   01F7A4  6EDF               	movwf	indf2,c
  1242                           
  1243                           ;../dc_motor.c: 213:     mR-> direction = 0;
  1244   01F7A6  EE20 F001          	lfsr	2,1
  1245   01F7AA  501C               	movf	right_45@mR^0,w,c
  1246   01F7AC  26D9               	addwf	fsr2l,f,c
  1247   01F7AE  501D               	movf	(right_45@mR+1)^0,w,c
  1248   01F7B0  22DA               	addwfc	fsr2h,f,c
  1249   01F7B2  0E00               	movlw	0
  1250   01F7B4  6EDF               	movwf	indf2,c
  1251   01F7B6                     
  1252                           ;../dc_motor.c: 214:     LATHbits.LATH0 = 1;
  1253   01F7B6  8080               	bsf	128,0,c	;volatile
  1254   01F7B8                     
  1255                           ;../dc_motor.c: 215:     int i;;../dc_motor.c: 216:     for (i = 0;i<count;i++){
  1256   01F7B8  0E00               	movlw	0
  1257   01F7BA  6E23               	movwf	(right_45@i+1)^0,c
  1258   01F7BC  0E00               	movlw	0
  1259   01F7BE  6E22               	movwf	right_45@i^0,c
  1260   01F7C0  EF52  F0FC         	goto	l1477
  1261   01F7C4                     l1449:
  1262                           
  1263                           ;../dc_motor.c: 218:         if (mL->power <= 30){mL->power += 10;}
  1264   01F7C4  C01A  FFD9         	movff	right_45@mL,fsr2l
  1265   01F7C8  C01B  FFDA         	movff	right_45@mL+1,fsr2h
  1266   01F7CC  0E1F               	movlw	31
  1267   01F7CE  60DF               	cpfslt	indf2,c
  1268   01F7D0  EFEC  F0FB         	goto	u471
  1269   01F7D4  EFEE  F0FB         	goto	u470
  1270   01F7D8                     u471:
  1271   01F7D8  EFF4  F0FB         	goto	l1453
  1272   01F7DC                     u470:
  1273   01F7DC  C01A  FFD9         	movff	right_45@mL,fsr2l
  1274   01F7E0  C01B  FFDA         	movff	right_45@mL+1,fsr2h
  1275   01F7E4  0E0A               	movlw	10
  1276   01F7E6  26DF               	addwf	indf2,f,c
  1277   01F7E8                     l1453:
  1278                           
  1279                           ;../dc_motor.c: 219:         if (mR->power <= 30){mR->power += 10;}
  1280   01F7E8  C01C  FFD9         	movff	right_45@mR,fsr2l
  1281   01F7EC  C01D  FFDA         	movff	right_45@mR+1,fsr2h
  1282   01F7F0  0E1F               	movlw	31
  1283   01F7F2  60DF               	cpfslt	indf2,c
  1284   01F7F4  EFFE  F0FB         	goto	u481
  1285   01F7F8  EF00  F0FC         	goto	u480
  1286   01F7FC                     u481:
  1287   01F7FC  EF06  F0FC         	goto	l1457
  1288   01F800                     u480:
  1289   01F800  C01C  FFD9         	movff	right_45@mR,fsr2l
  1290   01F804  C01D  FFDA         	movff	right_45@mR+1,fsr2h
  1291   01F808  0E0A               	movlw	10
  1292   01F80A  26DF               	addwf	indf2,f,c
  1293   01F80C                     l1457:
  1294                           
  1295                           ;../dc_motor.c: 220:         setMotorPWM(mL);
  1296   01F80C  C01A  F00E         	movff	right_45@mL,setMotorPWM@m
  1297   01F810  C01B  F00F         	movff	right_45@mL+1,setMotorPWM@m+1
  1298   01F814  EC02  F0FD         	call	_setMotorPWM	;wreg free
  1299   01F818                     
  1300                           ;../dc_motor.c: 221:         setMotorPWM(mR);
  1301   01F818  C01C  F00E         	movff	right_45@mR,setMotorPWM@m
  1302   01F81C  C01D  F00F         	movff	right_45@mR+1,setMotorPWM@m+1
  1303   01F820  EC02  F0FD         	call	_setMotorPWM	;wreg free
  1304   01F824                     
  1305                           ;../dc_motor.c: 222:         _delay((unsigned long)((50)*(64000000/4000000.0)));
  1306   01F824  0EA0               	movlw	160
  1307   01F826                     u807:
  1308   01F826  D000               	nop2	
  1309   01F828  2EE8               	decfsz	wreg,f,c
  1310   01F82A  D7FD               	bra	u807
  1311   01F82C                     l1463:
  1312                           
  1313                           ;../dc_motor.c: 217:     while ((mL->power <= 30) || (mR->power <= 30)){
  1314   01F82C  C01A  FFD9         	movff	right_45@mL,fsr2l
  1315   01F830  C01B  FFDA         	movff	right_45@mL+1,fsr2h
  1316   01F834  0E1E               	movlw	30
  1317   01F836  64DF               	cpfsgt	indf2,c
  1318   01F838  EF20  F0FC         	goto	u491
  1319   01F83C  EF22  F0FC         	goto	u490
  1320   01F840                     u491:
  1321   01F840  EFE2  F0FB         	goto	l1449
  1322   01F844                     u490:
  1323   01F844  C01C  FFD9         	movff	right_45@mR,fsr2l
  1324   01F848  C01D  FFDA         	movff	right_45@mR+1,fsr2h
  1325   01F84C  0E1E               	movlw	30
  1326   01F84E  64DF               	cpfsgt	indf2,c
  1327   01F850  EF2C  F0FC         	goto	u501
  1328   01F854  EF2E  F0FC         	goto	u500
  1329   01F858                     u501:
  1330   01F858  EFE2  F0FB         	goto	l1449
  1331   01F85C                     u500:
  1332   01F85C                     
  1333                           ;../dc_motor.c: 224:     _delay((unsigned long)((250)*(64000000/4000.0)));
  1334   01F85C  0E15               	movlw	21
  1335   01F85E  6E21               	movwf	(??_right_45+1)^0,c
  1336   01F860  0E4B               	movlw	75
  1337   01F862  6E20               	movwf	??_right_45^0,c
  1338   01F864  0EBE               	movlw	190
  1339   01F866                     u817:
  1340   01F866  2EE8               	decfsz	wreg,f,c
  1341   01F868  D7FE               	bra	u817
  1342   01F86A  2E20               	decfsz	??_right_45^0,f,c
  1343   01F86C  D7FC               	bra	u817
  1344   01F86E  2E21               	decfsz	(??_right_45+1)^0,f,c
  1345   01F870  D7FA               	bra	u817
  1346   01F872  D000               	nop2	
  1347   01F874                     
  1348                           ;../dc_motor.c: 225:     stop(mL,mR);
  1349   01F874  C01A  F014         	movff	right_45@mL,stop@mL
  1350   01F878  C01B  F015         	movff	right_45@mL+1,stop@mL+1
  1351   01F87C  C01C  F016         	movff	right_45@mR,stop@mR
  1352   01F880  C01D  F017         	movff	right_45@mR+1,stop@mR+1
  1353   01F884  EC94  F0FA         	call	_stop	;wreg free
  1354   01F888                     
  1355                           ;../dc_motor.c: 226:     _delay((unsigned long)((150)*(64000000/4000.0)));
  1356   01F888  0E0D               	movlw	13
  1357   01F88A  6E21               	movwf	(??_right_45+1)^0,c
  1358   01F88C  0E2D               	movlw	45
  1359   01F88E  6E20               	movwf	??_right_45^0,c
  1360   01F890  0ED8               	movlw	216
  1361   01F892                     u827:
  1362   01F892  2EE8               	decfsz	wreg,f,c
  1363   01F894  D7FE               	bra	u827
  1364   01F896  2E20               	decfsz	??_right_45^0,f,c
  1365   01F898  D7FC               	bra	u827
  1366   01F89A  2E21               	decfsz	(??_right_45+1)^0,f,c
  1367   01F89C  D7FA               	bra	u827
  1368   01F89E                     
  1369                           ;../dc_motor.c: 227:     LATHbits.LATH0 = 0;
  1370   01F89E  9080               	bcf	128,0,c	;volatile
  1371   01F8A0                     
  1372                           ;../dc_motor.c: 228: }
  1373   01F8A0  4A22               	infsnz	right_45@i^0,f,c
  1374   01F8A2  2A23               	incf	(right_45@i+1)^0,f,c
  1375   01F8A4                     l1477:
  1376   01F8A4  501E               	movf	right_45@count^0,w,c
  1377   01F8A6  5C22               	subwf	right_45@i^0,w,c
  1378   01F8A8  5023               	movf	(right_45@i+1)^0,w,c
  1379   01F8AA  0A80               	xorlw	128
  1380   01F8AC  6E20               	movwf	??_right_45^0,c
  1381   01F8AE  501F               	movf	(right_45@count+1)^0,w,c
  1382   01F8B0  0A80               	xorlw	128
  1383   01F8B2  5820               	subwfb	??_right_45^0,w,c
  1384   01F8B4  A0D8               	btfss	status,0,c
  1385   01F8B6  EF5F  F0FC         	goto	u511
  1386   01F8BA  EF61  F0FC         	goto	u510
  1387   01F8BE                     u511:
  1388   01F8BE  EF16  F0FC         	goto	l1463
  1389   01F8C2                     u510:
  1390   01F8C2  0012               	return		;funcret
  1391   01F8C4                     __end_of_right_45:
  1392                           	callstack 0
  1393                           
  1394 ;; *************** function _reverse *****************
  1395 ;; Defined at:
  1396 ;;		line 146 in file "../dc_motor.c"
  1397 ;; Parameters:    Size  Location     Type
  1398 ;;  mL              2   25[COMRAM] PTR struct DC_motor
  1399 ;;		 -> motorL(9), 
  1400 ;;  mR              2   27[COMRAM] PTR struct DC_motor
  1401 ;;		 -> motorR(9), 
  1402 ;; Auto vars:     Size  Location     Type
  1403 ;;		None
  1404 ;; Return value:  Size  Location     Type
  1405 ;;                  1    wreg      void 
  1406 ;; Registers used:
  1407 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1408 ;; Tracked objects:
  1409 ;;		On entry : 0/0
  1410 ;;		On exit  : 0/0
  1411 ;;		Unchanged: 0/0
  1412 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1413 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1414 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1415 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1416 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1417 ;;Total ram usage:        5 bytes
  1418 ;; Hardware stack levels used: 1
  1419 ;; Hardware stack levels required when called: 3
  1420 ;; This function calls:
  1421 ;;		_setMotorPWM
  1422 ;;		_stop
  1423 ;; This function is called by:
  1424 ;;		_instructions
  1425 ;; This function uses a non-reentrant model
  1426 ;;
  1427                           
  1428                           	psect	text5
  1429   01F5D8                     __ptext5:
  1430                           	callstack 0
  1431   01F5D8                     _reverse:
  1432                           	callstack 26
  1433   01F5D8                     
  1434                           ;../dc_motor.c: 146: void reverse(DC_motor *mL, DC_motor *mR);../dc_motor.c: 147: {;../d
      +                          c_motor.c: 148:     stop(mL,mR);
  1435   01F5D8  C01A  F014         	movff	reverse@mL,stop@mL
  1436   01F5DC  C01B  F015         	movff	reverse@mL+1,stop@mL+1
  1437   01F5E0  C01C  F016         	movff	reverse@mR,stop@mR
  1438   01F5E4  C01D  F017         	movff	reverse@mR+1,stop@mR+1
  1439   01F5E8  EC94  F0FA         	call	_stop	;wreg free
  1440   01F5EC                     
  1441                           ;../dc_motor.c: 149:     mL-> direction = 0;
  1442   01F5EC  EE20 F001          	lfsr	2,1
  1443   01F5F0  501A               	movf	reverse@mL^0,w,c
  1444   01F5F2  26D9               	addwf	fsr2l,f,c
  1445   01F5F4  501B               	movf	(reverse@mL+1)^0,w,c
  1446   01F5F6  22DA               	addwfc	fsr2h,f,c
  1447   01F5F8  0E00               	movlw	0
  1448   01F5FA  6EDF               	movwf	indf2,c
  1449   01F5FC                     
  1450                           ;../dc_motor.c: 150:     mR-> direction = 0;
  1451   01F5FC  EE20 F001          	lfsr	2,1
  1452   01F600  501C               	movf	reverse@mR^0,w,c
  1453   01F602  26D9               	addwf	fsr2l,f,c
  1454   01F604  501D               	movf	(reverse@mR+1)^0,w,c
  1455   01F606  22DA               	addwfc	fsr2h,f,c
  1456   01F608  0E00               	movlw	0
  1457   01F60A  6EDF               	movwf	indf2,c
  1458   01F60C                     
  1459                           ;../dc_motor.c: 151:     LATHbits.LATH1 = 1;
  1460   01F60C  8280               	bsf	128,1,c	;volatile
  1461                           
  1462                           ;../dc_motor.c: 152:     setMotorPWM(mR);
  1463   01F60E  C01C  F00E         	movff	reverse@mR,setMotorPWM@m
  1464   01F612  C01D  F00F         	movff	reverse@mR+1,setMotorPWM@m+1
  1465   01F616  EC02  F0FD         	call	_setMotorPWM	;wreg free
  1466                           
  1467                           ;../dc_motor.c: 153:     setMotorPWM(mL);
  1468   01F61A  C01A  F00E         	movff	reverse@mL,setMotorPWM@m
  1469   01F61E  C01B  F00F         	movff	reverse@mL+1,setMotorPWM@m+1
  1470   01F622  EC02  F0FD         	call	_setMotorPWM	;wreg free
  1471                           
  1472                           ;../dc_motor.c: 154:     while ((mL->power <40) && (mR->power <40)){
  1473   01F626  EF31  F0FB         	goto	l1399
  1474   01F62A                     l1391:
  1475                           
  1476                           ;../dc_motor.c: 155:         mL->power += 10;
  1477   01F62A  C01A  FFD9         	movff	reverse@mL,fsr2l
  1478   01F62E  C01B  FFDA         	movff	reverse@mL+1,fsr2h
  1479   01F632  0E0A               	movlw	10
  1480   01F634  26DF               	addwf	indf2,f,c
  1481                           
  1482                           ;../dc_motor.c: 156:         mR->power += 10;
  1483   01F636  C01C  FFD9         	movff	reverse@mR,fsr2l
  1484   01F63A  C01D  FFDA         	movff	reverse@mR+1,fsr2h
  1485   01F63E  0E0A               	movlw	10
  1486   01F640  26DF               	addwf	indf2,f,c
  1487   01F642                     
  1488                           ;../dc_motor.c: 157:         setMotorPWM(mL);
  1489   01F642  C01A  F00E         	movff	reverse@mL,setMotorPWM@m
  1490   01F646  C01B  F00F         	movff	reverse@mL+1,setMotorPWM@m+1
  1491   01F64A  EC02  F0FD         	call	_setMotorPWM	;wreg free
  1492   01F64E                     
  1493                           ;../dc_motor.c: 158:         setMotorPWM(mR);
  1494   01F64E  C01C  F00E         	movff	reverse@mR,setMotorPWM@m
  1495   01F652  C01D  F00F         	movff	reverse@mR+1,setMotorPWM@m+1
  1496   01F656  EC02  F0FD         	call	_setMotorPWM	;wreg free
  1497   01F65A                     
  1498                           ;../dc_motor.c: 159:         _delay((unsigned long)((20)*(64000000/4000000.0)));
  1499   01F65A  0E6A               	movlw	106
  1500   01F65C                     u837:
  1501   01F65C  2EE8               	decfsz	wreg,f,c
  1502   01F65E  D7FE               	bra	u837
  1503   01F660  D000               	nop2	
  1504   01F662                     l1399:
  1505                           
  1506                           ;../dc_motor.c: 154:     while ((mL->power <40) && (mR->power <40)){
  1507   01F662  C01A  FFD9         	movff	reverse@mL,fsr2l
  1508   01F666  C01B  FFDA         	movff	reverse@mL+1,fsr2h
  1509   01F66A  0E28               	movlw	40
  1510   01F66C  60DF               	cpfslt	indf2,c
  1511   01F66E  EF3B  F0FB         	goto	u401
  1512   01F672  EF3D  F0FB         	goto	u400
  1513   01F676                     u401:
  1514   01F676  EF49  F0FB         	goto	l170
  1515   01F67A                     u400:
  1516   01F67A  C01C  FFD9         	movff	reverse@mR,fsr2l
  1517   01F67E  C01D  FFDA         	movff	reverse@mR+1,fsr2h
  1518   01F682  0E27               	movlw	39
  1519   01F684  64DF               	cpfsgt	indf2,c
  1520   01F686  EF47  F0FB         	goto	u411
  1521   01F68A  EF49  F0FB         	goto	u410
  1522   01F68E                     u411:
  1523   01F68E  EF15  F0FB         	goto	l1391
  1524   01F692                     u410:
  1525   01F692                     l170:
  1526                           
  1527                           ;../dc_motor.c: 161:     LATHbits.LATH1 = 0;
  1528   01F692  9280               	bcf	128,1,c	;volatile
  1529   01F694  0012               	return		;funcret
  1530   01F696                     __end_of_reverse:
  1531                           	callstack 0
  1532                           
  1533 ;; *************** function _left_45 *****************
  1534 ;; Defined at:
  1535 ;;		line 187 in file "../dc_motor.c"
  1536 ;; Parameters:    Size  Location     Type
  1537 ;;  mL              2   25[COMRAM] PTR struct DC_motor
  1538 ;;		 -> motorL(9), 
  1539 ;;  mR              2   27[COMRAM] PTR struct DC_motor
  1540 ;;		 -> motorR(9), 
  1541 ;;  count           2   29[COMRAM] int 
  1542 ;; Auto vars:     Size  Location     Type
  1543 ;;  i               2   33[COMRAM] int 
  1544 ;; Return value:  Size  Location     Type
  1545 ;;                  1    wreg      void 
  1546 ;; Registers used:
  1547 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1548 ;; Tracked objects:
  1549 ;;		On entry : 0/0
  1550 ;;		On exit  : 0/0
  1551 ;;		Unchanged: 0/0
  1552 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1553 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1554 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1555 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1556 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1557 ;;Total ram usage:       10 bytes
  1558 ;; Hardware stack levels used: 1
  1559 ;; Hardware stack levels required when called: 3
  1560 ;; This function calls:
  1561 ;;		_setMotorPWM
  1562 ;;		_stop
  1563 ;; This function is called by:
  1564 ;;		_instructions
  1565 ;; This function uses a non-reentrant model
  1566 ;;
  1567                           
  1568                           	psect	text6
  1569   01F8C4                     __ptext6:
  1570                           	callstack 0
  1571   01F8C4                     _left_45:
  1572                           	callstack 26
  1573   01F8C4                     
  1574                           ;../dc_motor.c: 187: void left_45(DC_motor *mL, DC_motor *mR, int count);../dc_motor.c: 
      +                          188: {;../dc_motor.c: 189:     stop(mL,mR);
  1575   01F8C4  C01A  F014         	movff	left_45@mL,stop@mL
  1576   01F8C8  C01B  F015         	movff	left_45@mL+1,stop@mL+1
  1577   01F8CC  C01C  F016         	movff	left_45@mR,stop@mR
  1578   01F8D0  C01D  F017         	movff	left_45@mR+1,stop@mR+1
  1579   01F8D4  EC94  F0FA         	call	_stop	;wreg free
  1580   01F8D8                     
  1581                           ;../dc_motor.c: 190:     mL-> direction = 0;
  1582   01F8D8  EE20 F001          	lfsr	2,1
  1583   01F8DC  501A               	movf	left_45@mL^0,w,c
  1584   01F8DE  26D9               	addwf	fsr2l,f,c
  1585   01F8E0  501B               	movf	(left_45@mL+1)^0,w,c
  1586   01F8E2  22DA               	addwfc	fsr2h,f,c
  1587   01F8E4  0E00               	movlw	0
  1588   01F8E6  6EDF               	movwf	indf2,c
  1589   01F8E8                     
  1590                           ;../dc_motor.c: 191:     mR-> direction = 1;
  1591   01F8E8  EE20 F001          	lfsr	2,1
  1592   01F8EC  501C               	movf	left_45@mR^0,w,c
  1593   01F8EE  26D9               	addwf	fsr2l,f,c
  1594   01F8F0  501D               	movf	(left_45@mR+1)^0,w,c
  1595   01F8F2  22DA               	addwfc	fsr2h,f,c
  1596   01F8F4  0E01               	movlw	1
  1597   01F8F6  6EDF               	movwf	indf2,c
  1598   01F8F8                     
  1599                           ;../dc_motor.c: 192:     LATFbits.LATF0 = 1;
  1600   01F8F8  807E               	bsf	126,0,c	;volatile
  1601   01F8FA                     
  1602                           ;../dc_motor.c: 193:     int i;;../dc_motor.c: 194:     for (i = 0;i<count;i++){
  1603   01F8FA  0E00               	movlw	0
  1604   01F8FC  6E23               	movwf	(left_45@i+1)^0,c
  1605   01F8FE  0E00               	movlw	0
  1606   01F900  6E22               	movwf	left_45@i^0,c
  1607   01F902  EFF2  F0FC         	goto	l1441
  1608   01F906                     l1413:
  1609                           
  1610                           ;../dc_motor.c: 196:         if (mL->power <= 30){mL->power += 10;}
  1611   01F906  C01A  FFD9         	movff	left_45@mL,fsr2l
  1612   01F90A  C01B  FFDA         	movff	left_45@mL+1,fsr2h
  1613   01F90E  0E1F               	movlw	31
  1614   01F910  60DF               	cpfslt	indf2,c
  1615   01F912  EF8D  F0FC         	goto	u421
  1616   01F916  EF8F  F0FC         	goto	u420
  1617   01F91A                     u421:
  1618   01F91A  EF95  F0FC         	goto	l1417
  1619   01F91E                     u420:
  1620   01F91E  C01A  FFD9         	movff	left_45@mL,fsr2l
  1621   01F922  C01B  FFDA         	movff	left_45@mL+1,fsr2h
  1622   01F926  0E0A               	movlw	10
  1623   01F928  26DF               	addwf	indf2,f,c
  1624   01F92A                     l1417:
  1625                           
  1626                           ;../dc_motor.c: 197:         if (mR->power <= 30){mR->power += 10;}
  1627   01F92A  C01C  FFD9         	movff	left_45@mR,fsr2l
  1628   01F92E  C01D  FFDA         	movff	left_45@mR+1,fsr2h
  1629   01F932  0E1F               	movlw	31
  1630   01F934  60DF               	cpfslt	indf2,c
  1631   01F936  EF9F  F0FC         	goto	u431
  1632   01F93A  EFA1  F0FC         	goto	u430
  1633   01F93E                     u431:
  1634   01F93E  EFA7  F0FC         	goto	l1421
  1635   01F942                     u430:
  1636   01F942  C01C  FFD9         	movff	left_45@mR,fsr2l
  1637   01F946  C01D  FFDA         	movff	left_45@mR+1,fsr2h
  1638   01F94A  0E0A               	movlw	10
  1639   01F94C  26DF               	addwf	indf2,f,c
  1640   01F94E                     l1421:
  1641                           
  1642                           ;../dc_motor.c: 198:         setMotorPWM(mL);
  1643   01F94E  C01A  F00E         	movff	left_45@mL,setMotorPWM@m
  1644   01F952  C01B  F00F         	movff	left_45@mL+1,setMotorPWM@m+1
  1645   01F956  EC02  F0FD         	call	_setMotorPWM	;wreg free
  1646   01F95A                     
  1647                           ;../dc_motor.c: 199:         setMotorPWM(mR);
  1648   01F95A  C01C  F00E         	movff	left_45@mR,setMotorPWM@m
  1649   01F95E  C01D  F00F         	movff	left_45@mR+1,setMotorPWM@m+1
  1650   01F962  EC02  F0FD         	call	_setMotorPWM	;wreg free
  1651   01F966                     
  1652                           ;../dc_motor.c: 200:         _delay((unsigned long)((20)*(64000000/4000000.0)));
  1653   01F966  0E6A               	movlw	106
  1654   01F968                     u847:
  1655   01F968  2EE8               	decfsz	wreg,f,c
  1656   01F96A  D7FE               	bra	u847
  1657   01F96C  D000               	nop2	
  1658   01F96E                     l1427:
  1659                           
  1660                           ;../dc_motor.c: 195:     while ((mL->power <= 30) || (mR->power <= 30)){
  1661   01F96E  C01A  FFD9         	movff	left_45@mL,fsr2l
  1662   01F972  C01B  FFDA         	movff	left_45@mL+1,fsr2h
  1663   01F976  0E1E               	movlw	30
  1664   01F978  64DF               	cpfsgt	indf2,c
  1665   01F97A  EFC1  F0FC         	goto	u441
  1666   01F97E  EFC3  F0FC         	goto	u440
  1667   01F982                     u441:
  1668   01F982  EF83  F0FC         	goto	l1413
  1669   01F986                     u440:
  1670   01F986  C01C  FFD9         	movff	left_45@mR,fsr2l
  1671   01F98A  C01D  FFDA         	movff	left_45@mR+1,fsr2h
  1672   01F98E  0E1E               	movlw	30
  1673   01F990  64DF               	cpfsgt	indf2,c
  1674   01F992  EFCD  F0FC         	goto	u451
  1675   01F996  EFCF  F0FC         	goto	u450
  1676   01F99A                     u451:
  1677   01F99A  EF83  F0FC         	goto	l1413
  1678   01F99E                     u450:
  1679   01F99E                     
  1680                           ;../dc_motor.c: 202:     _delay((unsigned long)((230)*(64000000/4000.0)));
  1681   01F99E  0E13               	movlw	19
  1682   01F9A0  6E21               	movwf	(??_left_45+1)^0,c
  1683   01F9A2  0EAC               	movlw	172
  1684   01F9A4  6E20               	movwf	??_left_45^0,c
  1685   01F9A6  0E2A               	movlw	42
  1686   01F9A8                     u857:
  1687   01F9A8  2EE8               	decfsz	wreg,f,c
  1688   01F9AA  D7FE               	bra	u857
  1689   01F9AC  2E20               	decfsz	??_left_45^0,f,c
  1690   01F9AE  D7FC               	bra	u857
  1691   01F9B0  2E21               	decfsz	(??_left_45+1)^0,f,c
  1692   01F9B2  D7FA               	bra	u857
  1693   01F9B4                     
  1694                           ;../dc_motor.c: 203:     stop(mL,mR);
  1695   01F9B4  C01A  F014         	movff	left_45@mL,stop@mL
  1696   01F9B8  C01B  F015         	movff	left_45@mL+1,stop@mL+1
  1697   01F9BC  C01C  F016         	movff	left_45@mR,stop@mR
  1698   01F9C0  C01D  F017         	movff	left_45@mR+1,stop@mR+1
  1699   01F9C4  EC94  F0FA         	call	_stop	;wreg free
  1700   01F9C8                     
  1701                           ;../dc_motor.c: 204:     _delay((unsigned long)((150)*(64000000/4000.0)));
  1702   01F9C8  0E0D               	movlw	13
  1703   01F9CA  6E21               	movwf	(??_left_45+1)^0,c
  1704   01F9CC  0E2D               	movlw	45
  1705   01F9CE  6E20               	movwf	??_left_45^0,c
  1706   01F9D0  0ED8               	movlw	216
  1707   01F9D2                     u867:
  1708   01F9D2  2EE8               	decfsz	wreg,f,c
  1709   01F9D4  D7FE               	bra	u867
  1710   01F9D6  2E20               	decfsz	??_left_45^0,f,c
  1711   01F9D8  D7FC               	bra	u867
  1712   01F9DA  2E21               	decfsz	(??_left_45+1)^0,f,c
  1713   01F9DC  D7FA               	bra	u867
  1714   01F9DE                     
  1715                           ;../dc_motor.c: 205:     LATFbits.LATF0 = 0;
  1716   01F9DE  907E               	bcf	126,0,c	;volatile
  1717   01F9E0                     
  1718                           ;../dc_motor.c: 206:     }
  1719   01F9E0  4A22               	infsnz	left_45@i^0,f,c
  1720   01F9E2  2A23               	incf	(left_45@i+1)^0,f,c
  1721   01F9E4                     l1441:
  1722   01F9E4  501E               	movf	left_45@count^0,w,c
  1723   01F9E6  5C22               	subwf	left_45@i^0,w,c
  1724   01F9E8  5023               	movf	(left_45@i+1)^0,w,c
  1725   01F9EA  0A80               	xorlw	128
  1726   01F9EC  6E20               	movwf	??_left_45^0,c
  1727   01F9EE  501F               	movf	(left_45@count+1)^0,w,c
  1728   01F9F0  0A80               	xorlw	128
  1729   01F9F2  5820               	subwfb	??_left_45^0,w,c
  1730   01F9F4  A0D8               	btfss	status,0,c
  1731   01F9F6  EFFF  F0FC         	goto	u461
  1732   01F9FA  EF01  F0FD         	goto	u460
  1733   01F9FE                     u461:
  1734   01F9FE  EFB7  F0FC         	goto	l1427
  1735   01FA02                     u460:
  1736   01FA02  0012               	return		;funcret
  1737   01FA04                     __end_of_left_45:
  1738                           	callstack 0
  1739                           
  1740 ;; *************** function _stop *****************
  1741 ;; Defined at:
  1742 ;;		line 165 in file "../dc_motor.c"
  1743 ;; Parameters:    Size  Location     Type
  1744 ;;  mL              2   19[COMRAM] PTR struct DC_motor
  1745 ;;		 -> motorL(9), 
  1746 ;;  mR              2   21[COMRAM] PTR struct DC_motor
  1747 ;;		 -> motorR(9), 
  1748 ;; Auto vars:     Size  Location     Type
  1749 ;;  i               2   23[COMRAM] int 
  1750 ;; Return value:  Size  Location     Type
  1751 ;;                  1    wreg      void 
  1752 ;; Registers used:
  1753 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1754 ;; Tracked objects:
  1755 ;;		On entry : 0/0
  1756 ;;		On exit  : 0/0
  1757 ;;		Unchanged: 0/0
  1758 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1759 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1760 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1761 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1762 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1763 ;;Total ram usage:        6 bytes
  1764 ;; Hardware stack levels used: 1
  1765 ;; Hardware stack levels required when called: 2
  1766 ;; This function calls:
  1767 ;;		_setMotorPWM
  1768 ;; This function is called by:
  1769 ;;		_reverse
  1770 ;;		_left_45
  1771 ;;		_right_45
  1772 ;;		_space
  1773 ;;		_instructions
  1774 ;;		_forward
  1775 ;; This function uses a non-reentrant model
  1776 ;;
  1777                           
  1778                           	psect	text7
  1779   01F528                     __ptext7:
  1780                           	callstack 0
  1781   01F528                     _stop:
  1782                           	callstack 27
  1783   01F528                     
  1784                           ;../dc_motor.c: 165: void stop(DC_motor *mL, DC_motor *mR);../dc_motor.c: 166: {;../dc_m
      +                          otor.c: 167:     mL->brakemode = 1;
  1785   01F528  EE20 F002          	lfsr	2,2
  1786   01F52C  5014               	movf	stop@mL^0,w,c
  1787   01F52E  26D9               	addwf	fsr2l,f,c
  1788   01F530  5015               	movf	(stop@mL+1)^0,w,c
  1789   01F532  22DA               	addwfc	fsr2h,f,c
  1790   01F534  0E01               	movlw	1
  1791   01F536  6EDF               	movwf	indf2,c
  1792                           
  1793                           ;../dc_motor.c: 168:     mR->brakemode = 1;
  1794   01F538  EE20 F002          	lfsr	2,2
  1795   01F53C  5016               	movf	stop@mR^0,w,c
  1796   01F53E  26D9               	addwf	fsr2l,f,c
  1797   01F540  5017               	movf	(stop@mR+1)^0,w,c
  1798   01F542  22DA               	addwfc	fsr2h,f,c
  1799   01F544  0E01               	movlw	1
  1800   01F546  6EDF               	movwf	indf2,c
  1801   01F548                     
  1802                           ;../dc_motor.c: 169:     LATDbits.LATD4 = 1;
  1803   01F548  887C               	bsf	124,4,c	;volatile
  1804   01F54A                     
  1805                           ;../dc_motor.c: 171:     for (int i = 70; i >= 0; i=i-10) {
  1806   01F54A  0E00               	movlw	0
  1807   01F54C  6E19               	movwf	(stop@i+1)^0,c
  1808   01F54E  0E46               	movlw	70
  1809   01F550  6E18               	movwf	stop@i^0,c
  1810   01F552                     l1363:
  1811                           
  1812                           ;../dc_motor.c: 172:         mL -> power = i;
  1813   01F552  C014  FFD9         	movff	stop@mL,fsr2l
  1814   01F556  C015  FFDA         	movff	stop@mL+1,fsr2h
  1815   01F55A  C018  FFDF         	movff	stop@i,indf2
  1816                           
  1817                           ;../dc_motor.c: 173:         mR -> power = i;
  1818   01F55E  C016  FFD9         	movff	stop@mR,fsr2l
  1819   01F562  C017  FFDA         	movff	stop@mR+1,fsr2h
  1820   01F566  C018  FFDF         	movff	stop@i,indf2
  1821   01F56A                     
  1822                           ;../dc_motor.c: 174:         setMotorPWM(mL);
  1823   01F56A  C014  F00E         	movff	stop@mL,setMotorPWM@m
  1824   01F56E  C015  F00F         	movff	stop@mL+1,setMotorPWM@m+1
  1825   01F572  EC02  F0FD         	call	_setMotorPWM	;wreg free
  1826   01F576                     
  1827                           ;../dc_motor.c: 175:         setMotorPWM(mR);
  1828   01F576  C016  F00E         	movff	stop@mR,setMotorPWM@m
  1829   01F57A  C017  F00F         	movff	stop@mR+1,setMotorPWM@m+1
  1830   01F57E  EC02  F0FD         	call	_setMotorPWM	;wreg free
  1831   01F582                     
  1832                           ;../dc_motor.c: 176:         _delay((unsigned long)((20)*(64000000/4000000.0)));
  1833   01F582  0E6A               	movlw	106
  1834   01F584                     u877:
  1835   01F584  2EE8               	decfsz	wreg,f,c
  1836   01F586  D7FE               	bra	u877
  1837   01F588  D000               	nop2	
  1838   01F58A                     
  1839                           ;../dc_motor.c: 177:     }
  1840   01F58A  0EF6               	movlw	246
  1841   01F58C  2418               	addwf	stop@i^0,w,c
  1842   01F58E  6E18               	movwf	stop@i^0,c
  1843   01F590  0EFF               	movlw	255
  1844   01F592  2019               	addwfc	(stop@i+1)^0,w,c
  1845   01F594  6E19               	movwf	(stop@i+1)^0,c
  1846   01F596  BE19               	btfsc	(stop@i+1)^0,7,c
  1847   01F598  EFD2  F0FA         	goto	u390
  1848   01F59C  EFD0  F0FA         	goto	u391
  1849   01F5A0                     u391:
  1850   01F5A0  EFA9  F0FA         	goto	l1363
  1851   01F5A4                     u390:
  1852   01F5A4                     
  1853                           ;../dc_motor.c: 179:     mL->power = 0;
  1854   01F5A4  C014  FFD9         	movff	stop@mL,fsr2l
  1855   01F5A8  C015  FFDA         	movff	stop@mL+1,fsr2h
  1856   01F5AC  0E00               	movlw	0
  1857   01F5AE  6EDF               	movwf	indf2,c
  1858                           
  1859                           ;../dc_motor.c: 180:     mR->power = 0;
  1860   01F5B0  C016  FFD9         	movff	stop@mR,fsr2l
  1861   01F5B4  C017  FFDA         	movff	stop@mR+1,fsr2h
  1862   01F5B8  0E00               	movlw	0
  1863   01F5BA  6EDF               	movwf	indf2,c
  1864   01F5BC                     
  1865                           ;../dc_motor.c: 181:     setMotorPWM(mL);
  1866   01F5BC  C014  F00E         	movff	stop@mL,setMotorPWM@m
  1867   01F5C0  C015  F00F         	movff	stop@mL+1,setMotorPWM@m+1
  1868   01F5C4  EC02  F0FD         	call	_setMotorPWM	;wreg free
  1869   01F5C8                     
  1870                           ;../dc_motor.c: 182:     setMotorPWM(mR);
  1871   01F5C8  C016  F00E         	movff	stop@mR,setMotorPWM@m
  1872   01F5CC  C017  F00F         	movff	stop@mR+1,setMotorPWM@m+1
  1873   01F5D0  EC02  F0FD         	call	_setMotorPWM	;wreg free
  1874   01F5D4                     
  1875                           ;../dc_motor.c: 183:     LATDbits.LATD4 = 0;
  1876   01F5D4  987C               	bcf	124,4,c	;volatile
  1877   01F5D6  0012               	return		;funcret
  1878   01F5D8                     __end_of_stop:
  1879                           	callstack 0
  1880                           
  1881 ;; *************** function _setMotorPWM *****************
  1882 ;; Defined at:
  1883 ;;		line 72 in file "../dc_motor.c"
  1884 ;; Parameters:    Size  Location     Type
  1885 ;;  m               2   13[COMRAM] PTR struct DC_motor
  1886 ;;		 -> motorR(9), motorL(9), 
  1887 ;; Auto vars:     Size  Location     Type
  1888 ;;  negDuty         1   18[COMRAM] unsigned char 
  1889 ;;  posDuty         1   17[COMRAM] unsigned char 
  1890 ;; Return value:  Size  Location     Type
  1891 ;;                  1    wreg      void 
  1892 ;; Registers used:
  1893 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1894 ;; Tracked objects:
  1895 ;;		On entry : 0/0
  1896 ;;		On exit  : 0/0
  1897 ;;		Unchanged: 0/0
  1898 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1899 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1900 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1901 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1902 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1903 ;;Total ram usage:        6 bytes
  1904 ;; Hardware stack levels used: 1
  1905 ;; Hardware stack levels required when called: 1
  1906 ;; This function calls:
  1907 ;;		___lwdiv
  1908 ;;		___wmul
  1909 ;; This function is called by:
  1910 ;;		_reverse
  1911 ;;		_stop
  1912 ;;		_left_45
  1913 ;;		_right_45
  1914 ;;		_space
  1915 ;;		_forward
  1916 ;; This function uses a non-reentrant model
  1917 ;;
  1918                           
  1919                           	psect	text8
  1920   01FA04                     __ptext8:
  1921                           	callstack 0
  1922   01FA04                     _setMotorPWM:
  1923                           	callstack 27
  1924   01FA04                     
  1925                           ;../dc_motor.c: 72: void setMotorPWM(DC_motor *m);../dc_motor.c: 73: {;../dc_motor.c: 74
      +                          :     unsigned char posDuty, negDuty;;../dc_motor.c: 76:     if(m->brakemode) {
  1926   01FA04  EE20 F002          	lfsr	2,2
  1927   01FA08  500E               	movf	setMotorPWM@m^0,w,c
  1928   01FA0A  26D9               	addwf	fsr2l,f,c
  1929   01FA0C  500F               	movf	(setMotorPWM@m+1)^0,w,c
  1930   01FA0E  22DA               	addwfc	fsr2h,f,c
  1931   01FA10  50DF               	movf	indf2,w,c
  1932   01FA12  B4D8               	btfsc	status,2,c
  1933   01FA14  EF0E  F0FD         	goto	u371
  1934   01FA18  EF10  F0FD         	goto	u370
  1935   01FA1C                     u371:
  1936   01FA1C  EF44  F0FD         	goto	l1343
  1937   01FA20                     u370:
  1938   01FA20                     
  1939                           ;../dc_motor.c: 77:         posDuty = m->PWMperiod - ((unsigned int)(m->power)*(m->PWMpe
      +                          riod))/100;
  1940   01FA20  C00E  FFD9         	movff	setMotorPWM@m,fsr2l
  1941   01FA24  C00F  FFDA         	movff	setMotorPWM@m+1,fsr2h
  1942   01FA28  50DF               	movf	indf2,w,c
  1943   01FA2A  6E10               	movwf	??_setMotorPWM^0,c
  1944   01FA2C  5010               	movf	??_setMotorPWM^0,w,c
  1945   01FA2E  6E01               	movwf	___wmul@multiplier^0,c
  1946   01FA30  6A02               	clrf	(___wmul@multiplier+1)^0,c
  1947   01FA32  EE20 F003          	lfsr	2,3
  1948   01FA36  500E               	movf	setMotorPWM@m^0,w,c
  1949   01FA38  26D9               	addwf	fsr2l,f,c
  1950   01FA3A  500F               	movf	(setMotorPWM@m+1)^0,w,c
  1951   01FA3C  22DA               	addwfc	fsr2h,f,c
  1952   01FA3E  CFDE F003          	movff	postinc2,___wmul@multiplicand
  1953   01FA42  CFDD F004          	movff	postdec2,___wmul@multiplicand+1
  1954   01FA46  ECDA  F0F9         	call	___wmul	;wreg free
  1955   01FA4A  C001  F007         	movff	?___wmul,___lwdiv@dividend
  1956   01FA4E  C002  F008         	movff	?___wmul+1,___lwdiv@dividend+1
  1957   01FA52  0E00               	movlw	0
  1958   01FA54  6E0A               	movwf	(___lwdiv@divisor+1)^0,c
  1959   01FA56  0E64               	movlw	100
  1960   01FA58  6E09               	movwf	___lwdiv@divisor^0,c
  1961   01FA5A  EC12  F0FA         	call	___lwdiv	;wreg free
  1962   01FA5E  EE20 F003          	lfsr	2,3
  1963   01FA62  500E               	movf	setMotorPWM@m^0,w,c
  1964   01FA64  26D9               	addwf	fsr2l,f,c
  1965   01FA66  500F               	movf	(setMotorPWM@m+1)^0,w,c
  1966   01FA68  22DA               	addwfc	fsr2h,f,c
  1967   01FA6A  50DF               	movf	indf2,w,c
  1968   01FA6C  6E11               	movwf	(??_setMotorPWM+1)^0,c
  1969   01FA6E  5007               	movf	?___lwdiv^0,w,c
  1970   01FA70  5C11               	subwf	(??_setMotorPWM+1)^0,w,c
  1971   01FA72  6E12               	movwf	setMotorPWM@posDuty^0,c
  1972   01FA74                     
  1973                           ;../dc_motor.c: 78:         negDuty = m->PWMperiod;
  1974   01FA74  EE20 F003          	lfsr	2,3
  1975   01FA78  500E               	movf	setMotorPWM@m^0,w,c
  1976   01FA7A  26D9               	addwf	fsr2l,f,c
  1977   01FA7C  500F               	movf	(setMotorPWM@m+1)^0,w,c
  1978   01FA7E  22DA               	addwfc	fsr2h,f,c
  1979   01FA80  50DF               	movf	indf2,w,c
  1980   01FA82  6E13               	movwf	setMotorPWM@negDuty^0,c
  1981                           
  1982                           ;../dc_motor.c: 79:     }
  1983   01FA84  EF67  F0FD         	goto	l1347
  1984   01FA88                     l1343:
  1985                           
  1986                           ;../dc_motor.c: 81:         posDuty=0;
  1987   01FA88  0E00               	movlw	0
  1988   01FA8A  6E12               	movwf	setMotorPWM@posDuty^0,c
  1989   01FA8C                     
  1990                           ;../dc_motor.c: 82:   negDuty=((unsigned int)(m->power)*(m->PWMperiod))/100;
  1991   01FA8C  C00E  FFD9         	movff	setMotorPWM@m,fsr2l
  1992   01FA90  C00F  FFDA         	movff	setMotorPWM@m+1,fsr2h
  1993   01FA94  50DF               	movf	indf2,w,c
  1994   01FA96  6E10               	movwf	??_setMotorPWM^0,c
  1995   01FA98  5010               	movf	??_setMotorPWM^0,w,c
  1996   01FA9A  6E01               	movwf	___wmul@multiplier^0,c
  1997   01FA9C  6A02               	clrf	(___wmul@multiplier+1)^0,c
  1998   01FA9E  EE20 F003          	lfsr	2,3
  1999   01FAA2  500E               	movf	setMotorPWM@m^0,w,c
  2000   01FAA4  26D9               	addwf	fsr2l,f,c
  2001   01FAA6  500F               	movf	(setMotorPWM@m+1)^0,w,c
  2002   01FAA8  22DA               	addwfc	fsr2h,f,c
  2003   01FAAA  CFDE F003          	movff	postinc2,___wmul@multiplicand
  2004   01FAAE  CFDD F004          	movff	postdec2,___wmul@multiplicand+1
  2005   01FAB2  ECDA  F0F9         	call	___wmul	;wreg free
  2006   01FAB6  C001  F007         	movff	?___wmul,___lwdiv@dividend
  2007   01FABA  C002  F008         	movff	?___wmul+1,___lwdiv@dividend+1
  2008   01FABE  0E00               	movlw	0
  2009   01FAC0  6E0A               	movwf	(___lwdiv@divisor+1)^0,c
  2010   01FAC2  0E64               	movlw	100
  2011   01FAC4  6E09               	movwf	___lwdiv@divisor^0,c
  2012   01FAC6  EC12  F0FA         	call	___lwdiv	;wreg free
  2013   01FACA  5007               	movf	?___lwdiv^0,w,c
  2014   01FACC  6E13               	movwf	setMotorPWM@negDuty^0,c
  2015   01FACE                     l1347:
  2016                           
  2017                           ;../dc_motor.c: 85:     if (m->direction) {
  2018   01FACE  EE20 F001          	lfsr	2,1
  2019   01FAD2  500E               	movf	setMotorPWM@m^0,w,c
  2020   01FAD4  26D9               	addwf	fsr2l,f,c
  2021   01FAD6  500F               	movf	(setMotorPWM@m+1)^0,w,c
  2022   01FAD8  22DA               	addwfc	fsr2h,f,c
  2023   01FADA  50DF               	movf	indf2,w,c
  2024   01FADC  B4D8               	btfsc	status,2,c
  2025   01FADE  EF73  F0FD         	goto	u381
  2026   01FAE2  EF75  F0FD         	goto	u380
  2027   01FAE6                     u381:
  2028   01FAE6  EF97  F0FD         	goto	l1351
  2029   01FAEA                     u380:
  2030   01FAEA                     
  2031                           ;../dc_motor.c: 86:         *(m->posDutyHighByte)= posDuty;
  2032   01FAEA  EE20 F005          	lfsr	2,5
  2033   01FAEE  500E               	movf	setMotorPWM@m^0,w,c
  2034   01FAF0  26D9               	addwf	fsr2l,f,c
  2035   01FAF2  500F               	movf	(setMotorPWM@m+1)^0,w,c
  2036   01FAF4  22DA               	addwfc	fsr2h,f,c
  2037   01FAF6  CFDE F010          	movff	postinc2,??_setMotorPWM
  2038   01FAFA  CFDD F011          	movff	postdec2,??_setMotorPWM+1
  2039   01FAFE  C010  FFD9         	movff	??_setMotorPWM,fsr2l
  2040   01FB02  C011  FFDA         	movff	??_setMotorPWM+1,fsr2h
  2041   01FB06  C012  FFDF         	movff	setMotorPWM@posDuty,indf2
  2042                           
  2043                           ;../dc_motor.c: 87:         *(m->negDutyHighByte)= negDuty;
  2044   01FB0A  EE20 F007          	lfsr	2,7
  2045   01FB0E  500E               	movf	setMotorPWM@m^0,w,c
  2046   01FB10  26D9               	addwf	fsr2l,f,c
  2047   01FB12  500F               	movf	(setMotorPWM@m+1)^0,w,c
  2048   01FB14  22DA               	addwfc	fsr2h,f,c
  2049   01FB16  CFDE F010          	movff	postinc2,??_setMotorPWM
  2050   01FB1A  CFDD F011          	movff	postdec2,??_setMotorPWM+1
  2051   01FB1E  C010  FFD9         	movff	??_setMotorPWM,fsr2l
  2052   01FB22  C011  FFDA         	movff	??_setMotorPWM+1,fsr2h
  2053   01FB26  C013  FFDF         	movff	setMotorPWM@negDuty,indf2
  2054                           
  2055                           ;../dc_motor.c: 88:     } else {
  2056   01FB2A  EFB7  F0FD         	goto	l149
  2057   01FB2E                     l1351:
  2058                           
  2059                           ;../dc_motor.c: 89:         *(m->posDutyHighByte)= negDuty;
  2060   01FB2E  EE20 F005          	lfsr	2,5
  2061   01FB32  500E               	movf	setMotorPWM@m^0,w,c
  2062   01FB34  26D9               	addwf	fsr2l,f,c
  2063   01FB36  500F               	movf	(setMotorPWM@m+1)^0,w,c
  2064   01FB38  22DA               	addwfc	fsr2h,f,c
  2065   01FB3A  CFDE F010          	movff	postinc2,??_setMotorPWM
  2066   01FB3E  CFDD F011          	movff	postdec2,??_setMotorPWM+1
  2067   01FB42  C010  FFD9         	movff	??_setMotorPWM,fsr2l
  2068   01FB46  C011  FFDA         	movff	??_setMotorPWM+1,fsr2h
  2069   01FB4A  C013  FFDF         	movff	setMotorPWM@negDuty,indf2
  2070                           
  2071                           ;../dc_motor.c: 90:         *(m->negDutyHighByte)= posDuty;
  2072   01FB4E  EE20 F007          	lfsr	2,7
  2073   01FB52  500E               	movf	setMotorPWM@m^0,w,c
  2074   01FB54  26D9               	addwf	fsr2l,f,c
  2075   01FB56  500F               	movf	(setMotorPWM@m+1)^0,w,c
  2076   01FB58  22DA               	addwfc	fsr2h,f,c
  2077   01FB5A  CFDE F010          	movff	postinc2,??_setMotorPWM
  2078   01FB5E  CFDD F011          	movff	postdec2,??_setMotorPWM+1
  2079   01FB62  C010  FFD9         	movff	??_setMotorPWM,fsr2l
  2080   01FB66  C011  FFDA         	movff	??_setMotorPWM+1,fsr2h
  2081   01FB6A  C012  FFDF         	movff	setMotorPWM@posDuty,indf2
  2082   01FB6E                     l149:
  2083   01FB6E  0012               	return		;funcret
  2084   01FB70                     __end_of_setMotorPWM:
  2085                           	callstack 0
  2086                           
  2087 ;; *************** function ___wmul *****************
  2088 ;; Defined at:
  2089 ;;		line 15 in file "D:\ECM\pic\sources\c99\common\Umul16.c"
  2090 ;; Parameters:    Size  Location     Type
  2091 ;;  multiplier      2    0[COMRAM] unsigned int 
  2092 ;;  multiplicand    2    2[COMRAM] unsigned int 
  2093 ;; Auto vars:     Size  Location     Type
  2094 ;;  product         2    4[COMRAM] unsigned int 
  2095 ;; Return value:  Size  Location     Type
  2096 ;;                  2    0[COMRAM] unsigned int 
  2097 ;; Registers used:
  2098 ;;		wreg, status,2, status,0, prodl, prodh
  2099 ;; Tracked objects:
  2100 ;;		On entry : 0/0
  2101 ;;		On exit  : 0/0
  2102 ;;		Unchanged: 0/0
  2103 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2104 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2105 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2106 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2107 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2108 ;;Total ram usage:        6 bytes
  2109 ;; Hardware stack levels used: 1
  2110 ;; This function calls:
  2111 ;;		Nothing
  2112 ;; This function is called by:
  2113 ;;		_setMotorPWM
  2114 ;; This function uses a non-reentrant model
  2115 ;;
  2116                           
  2117                           	psect	text9
  2118   01F3B4                     __ptext9:
  2119                           	callstack 0
  2120   01F3B4                     ___wmul:
  2121                           	callstack 27
  2122   01F3B4  5001               	movf	___wmul@multiplier^0,w,c
  2123   01F3B6  0203               	mulwf	___wmul@multiplicand^0,c
  2124   01F3B8  CFF3 F005          	movff	prodl,___wmul@product
  2125   01F3BC  CFF4 F006          	movff	prodh,___wmul@product+1
  2126   01F3C0  5001               	movf	___wmul@multiplier^0,w,c
  2127   01F3C2  0204               	mulwf	(___wmul@multiplicand+1)^0,c
  2128   01F3C4  50F3               	movf	243,w,c
  2129   01F3C6  2606               	addwf	(___wmul@product+1)^0,f,c
  2130   01F3C8  5002               	movf	(___wmul@multiplier+1)^0,w,c
  2131   01F3CA  0203               	mulwf	___wmul@multiplicand^0,c
  2132   01F3CC  50F3               	movf	243,w,c
  2133   01F3CE  2606               	addwf	(___wmul@product+1)^0,f,c
  2134   01F3D0  C005  F001         	movff	___wmul@product,?___wmul
  2135   01F3D4  C006  F002         	movff	___wmul@product+1,?___wmul+1
  2136   01F3D8  0012               	return		;funcret
  2137   01F3DA                     __end_of___wmul:
  2138                           	callstack 0
  2139                           
  2140 ;; *************** function ___lwdiv *****************
  2141 ;; Defined at:
  2142 ;;		line 7 in file "D:\ECM\pic\sources\c99\common\lwdiv.c"
  2143 ;; Parameters:    Size  Location     Type
  2144 ;;  dividend        2    6[COMRAM] unsigned int 
  2145 ;;  divisor         2    8[COMRAM] unsigned int 
  2146 ;; Auto vars:     Size  Location     Type
  2147 ;;  quotient        2   10[COMRAM] unsigned int 
  2148 ;;  counter         1   12[COMRAM] unsigned char 
  2149 ;; Return value:  Size  Location     Type
  2150 ;;                  2    6[COMRAM] unsigned int 
  2151 ;; Registers used:
  2152 ;;		wreg, status,2, status,0
  2153 ;; Tracked objects:
  2154 ;;		On entry : 0/0
  2155 ;;		On exit  : 0/0
  2156 ;;		Unchanged: 0/0
  2157 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2158 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2159 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2160 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2161 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2162 ;;Total ram usage:        7 bytes
  2163 ;; Hardware stack levels used: 1
  2164 ;; This function calls:
  2165 ;;		Nothing
  2166 ;; This function is called by:
  2167 ;;		_setMotorPWM
  2168 ;; This function uses a non-reentrant model
  2169 ;;
  2170                           
  2171                           	psect	text10
  2172   01F424                     __ptext10:
  2173                           	callstack 0
  2174   01F424                     ___lwdiv:
  2175                           	callstack 27
  2176   01F424  0E00               	movlw	0
  2177   01F426  6E0C               	movwf	(___lwdiv@quotient+1)^0,c
  2178   01F428  0E00               	movlw	0
  2179   01F42A  6E0B               	movwf	___lwdiv@quotient^0,c
  2180   01F42C  5009               	movf	___lwdiv@divisor^0,w,c
  2181   01F42E  100A               	iorwf	(___lwdiv@divisor+1)^0,w,c
  2182   01F430  B4D8               	btfsc	status,2,c
  2183   01F432  EF1D  F0FA         	goto	u341
  2184   01F436  EF1F  F0FA         	goto	u340
  2185   01F43A                     u341:
  2186   01F43A  EF47  F0FA         	goto	l729
  2187   01F43E                     u340:
  2188   01F43E  0E01               	movlw	1
  2189   01F440  6E0D               	movwf	___lwdiv@counter^0,c
  2190   01F442  EF27  F0FA         	goto	l1323
  2191   01F446                     l1321:
  2192   01F446  90D8               	bcf	status,0,c
  2193   01F448  3609               	rlcf	___lwdiv@divisor^0,f,c
  2194   01F44A  360A               	rlcf	(___lwdiv@divisor+1)^0,f,c
  2195   01F44C  2A0D               	incf	___lwdiv@counter^0,f,c
  2196   01F44E                     l1323:
  2197   01F44E  AE0A               	btfss	(___lwdiv@divisor+1)^0,7,c
  2198   01F450  EF2C  F0FA         	goto	u351
  2199   01F454  EF2E  F0FA         	goto	u350
  2200   01F458                     u351:
  2201   01F458  EF23  F0FA         	goto	l1321
  2202   01F45C                     u350:
  2203   01F45C                     l1325:
  2204   01F45C  90D8               	bcf	status,0,c
  2205   01F45E  360B               	rlcf	___lwdiv@quotient^0,f,c
  2206   01F460  360C               	rlcf	(___lwdiv@quotient+1)^0,f,c
  2207   01F462  5009               	movf	___lwdiv@divisor^0,w,c
  2208   01F464  5C07               	subwf	___lwdiv@dividend^0,w,c
  2209   01F466  500A               	movf	(___lwdiv@divisor+1)^0,w,c
  2210   01F468  5808               	subwfb	(___lwdiv@dividend+1)^0,w,c
  2211   01F46A  A0D8               	btfss	status,0,c
  2212   01F46C  EF3A  F0FA         	goto	u361
  2213   01F470  EF3C  F0FA         	goto	u360
  2214   01F474                     u361:
  2215   01F474  EF41  F0FA         	goto	l1333
  2216   01F478                     u360:
  2217   01F478  5009               	movf	___lwdiv@divisor^0,w,c
  2218   01F47A  5E07               	subwf	___lwdiv@dividend^0,f,c
  2219   01F47C  500A               	movf	(___lwdiv@divisor+1)^0,w,c
  2220   01F47E  5A08               	subwfb	(___lwdiv@dividend+1)^0,f,c
  2221   01F480  800B               	bsf	___lwdiv@quotient^0,0,c
  2222   01F482                     l1333:
  2223   01F482  90D8               	bcf	status,0,c
  2224   01F484  320A               	rrcf	(___lwdiv@divisor+1)^0,f,c
  2225   01F486  3209               	rrcf	___lwdiv@divisor^0,f,c
  2226   01F488  2E0D               	decfsz	___lwdiv@counter^0,f,c
  2227   01F48A  EF2E  F0FA         	goto	l1325
  2228   01F48E                     l729:
  2229   01F48E  C00B  F007         	movff	___lwdiv@quotient,?___lwdiv
  2230   01F492  C00C  F008         	movff	___lwdiv@quotient+1,?___lwdiv+1
  2231   01F496  0012               	return		;funcret
  2232   01F498                     __end_of___lwdiv:
  2233                           	callstack 0
  2234                           
  2235 ;; *************** function _initDCmotorsPWM *****************
  2236 ;; Defined at:
  2237 ;;		line 5 in file "../dc_motor.c"
  2238 ;; Parameters:    Size  Location     Type
  2239 ;;  PWMperiod       2    0[COMRAM] unsigned int 
  2240 ;; Auto vars:     Size  Location     Type
  2241 ;;		None
  2242 ;; Return value:  Size  Location     Type
  2243 ;;                  1    wreg      void 
  2244 ;; Registers used:
  2245 ;;		wreg, status,2
  2246 ;; Tracked objects:
  2247 ;;		On entry : 0/0
  2248 ;;		On exit  : 0/0
  2249 ;;		Unchanged: 0/0
  2250 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2251 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2252 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2253 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2254 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2255 ;;Total ram usage:        2 bytes
  2256 ;; Hardware stack levels used: 1
  2257 ;; This function calls:
  2258 ;;		Nothing
  2259 ;; This function is called by:
  2260 ;;		_main
  2261 ;; This function uses a non-reentrant model
  2262 ;;
  2263                           
  2264                           	psect	text11
  2265   01F498                     __ptext11:
  2266                           	callstack 0
  2267   01F498                     _initDCmotorsPWM:
  2268                           	callstack 30
  2269   01F498                     
  2270                           ;../dc_motor.c: 7:     TRISEbits.TRISE2 = 0;
  2271   01F498  9485               	bcf	133,2,c	;volatile
  2272                           
  2273                           ;../dc_motor.c: 8:     TRISEbits.TRISE4 = 0;
  2274   01F49A  9885               	bcf	133,4,c	;volatile
  2275                           
  2276                           ;../dc_motor.c: 9:     TRISCbits.TRISC7 = 0;
  2277   01F49C  9E83               	bcf	131,7,c	;volatile
  2278                           
  2279                           ;../dc_motor.c: 10:     TRISGbits.TRISG6 = 0;
  2280   01F49E  9C87               	bcf	135,6,c	;volatile
  2281                           
  2282                           ;../dc_motor.c: 12:     LATEbits.LATE2 = 0;
  2283   01F4A0  947D               	bcf	125,2,c	;volatile
  2284                           
  2285                           ;../dc_motor.c: 13:     LATEbits.LATE4 = 0;
  2286   01F4A2  987D               	bcf	125,4,c	;volatile
  2287                           
  2288                           ;../dc_motor.c: 14:     LATCbits.LATC7 = 0;
  2289   01F4A4  9E7B               	bcf	123,7,c	;volatile
  2290                           
  2291                           ;../dc_motor.c: 15:     LATGbits.LATG6 = 0;
  2292   01F4A6  9C7F               	bcf	127,6,c	;volatile
  2293   01F4A8                     
  2294                           ;../dc_motor.c: 18:     RE2PPS=0x05;
  2295   01F4A8  0E05               	movlw	5
  2296   01F4AA  010E               	movlb	14	; () banked
  2297   01F4AC  6F74               	movwf	116,b	;volatile
  2298                           
  2299                           ;../dc_motor.c: 19:     RE4PPS=0x06;
  2300   01F4AE  0E06               	movlw	6
  2301   01F4B0  6F76               	movwf	118,b	;volatile
  2302                           
  2303                           ;../dc_motor.c: 20:     RC7PPS=0x07;
  2304   01F4B2  0E07               	movlw	7
  2305   01F4B4  6F69               	movwf	105,b	;volatile
  2306                           
  2307                           ;../dc_motor.c: 21:     RG6PPS=0x08;
  2308   01F4B6  0E08               	movlw	8
  2309   01F4B8  6F88               	movwf	136,b	;volatile
  2310                           
  2311                           ;../dc_motor.c: 24:     T2CONbits.CKPS=0b100;
  2312   01F4BA  50BD               	movf	189,w,c	;volatile
  2313   01F4BC  0B8F               	andlw	-113
  2314   01F4BE  0940               	iorlw	64
  2315   01F4C0  6EBD               	movwf	189,c	;volatile
  2316                           
  2317                           ;../dc_motor.c: 25:     T2HLTbits.MODE=0b00000;
  2318   01F4C2  0EE0               	movlw	-32
  2319   01F4C4  16BE               	andwf	190,f,c	;volatile
  2320                           
  2321                           ;../dc_motor.c: 26:     T2CLKCONbits.CS=0b0001;
  2322   01F4C6  50BF               	movf	191,w,c	;volatile
  2323   01F4C8  0BF0               	andlw	-16
  2324   01F4CA  0901               	iorlw	1
  2325   01F4CC  6EBF               	movwf	191,c	;volatile
  2326   01F4CE                     
  2327                           ; BSR set to: 14
  2328                           ;../dc_motor.c: 30:     T2PR=PWMperiod;
  2329   01F4CE  C001  FFBC         	movff	initDCmotorsPWM@PWMperiod,4028	;volatile
  2330   01F4D2                     
  2331                           ; BSR set to: 14
  2332                           ;../dc_motor.c: 31:     T2CONbits.ON=1;
  2333   01F4D2  8EBD               	bsf	189,7,c	;volatile
  2334                           
  2335                           ;../dc_motor.c: 35:     CCPR1H=0;
  2336   01F4D4  0E00               	movlw	0
  2337   01F4D6  6EAA               	movwf	170,c	;volatile
  2338                           
  2339                           ;../dc_motor.c: 36:     CCPR2H=0;
  2340   01F4D8  0E00               	movlw	0
  2341   01F4DA  6EA6               	movwf	166,c	;volatile
  2342                           
  2343                           ;../dc_motor.c: 37:     CCPR3H=0;
  2344   01F4DC  0E00               	movlw	0
  2345   01F4DE  010F               	movlb	15	; () banked
  2346   01F4E0  6F25               	movwf	37,b	;volatile
  2347                           
  2348                           ;../dc_motor.c: 38:     CCPR4H=0;
  2349   01F4E2  0E00               	movlw	0
  2350   01F4E4  6F21               	movwf	33,b	;volatile
  2351                           
  2352                           ;../dc_motor.c: 41:     CCPTMRS0bits.C1TSEL=0;
  2353   01F4E6  0EFC               	movlw	-4
  2354   01F4E8  16AD               	andwf	173,f,c	;volatile
  2355                           
  2356                           ;../dc_motor.c: 42:     CCPTMRS0bits.C2TSEL=0;
  2357   01F4EA  0EF3               	movlw	-13
  2358   01F4EC  16AD               	andwf	173,f,c	;volatile
  2359                           
  2360                           ;../dc_motor.c: 43:     CCPTMRS0bits.C3TSEL=0;
  2361   01F4EE  0ECF               	movlw	-49
  2362   01F4F0  16AD               	andwf	173,f,c	;volatile
  2363                           
  2364                           ;../dc_motor.c: 44:     CCPTMRS0bits.C4TSEL=0;
  2365   01F4F2  0E3F               	movlw	-193
  2366   01F4F4  16AD               	andwf	173,f,c	;volatile
  2367   01F4F6                     
  2368                           ; BSR set to: 15
  2369                           ;../dc_motor.c: 47:     CCP1CONbits.FMT=1;
  2370   01F4F6  88AB               	bsf	171,4,c	;volatile
  2371                           
  2372                           ;../dc_motor.c: 48:     CCP1CONbits.CCP1MODE=0b1100;
  2373   01F4F8  50AB               	movf	171,w,c	;volatile
  2374   01F4FA  0BF0               	andlw	-16
  2375   01F4FC  090C               	iorlw	12
  2376   01F4FE  6EAB               	movwf	171,c	;volatile
  2377   01F500                     
  2378                           ; BSR set to: 15
  2379                           ;../dc_motor.c: 49:     CCP1CONbits.EN=1;
  2380   01F500  8EAB               	bsf	171,7,c	;volatile
  2381   01F502                     
  2382                           ; BSR set to: 15
  2383                           ;../dc_motor.c: 52:     CCP2CONbits.FMT=1;
  2384   01F502  88A7               	bsf	167,4,c	;volatile
  2385                           
  2386                           ;../dc_motor.c: 53:     CCP2CONbits.CCP2MODE=0b1100;
  2387   01F504  50A7               	movf	167,w,c	;volatile
  2388   01F506  0BF0               	andlw	-16
  2389   01F508  090C               	iorlw	12
  2390   01F50A  6EA7               	movwf	167,c	;volatile
  2391   01F50C                     
  2392                           ; BSR set to: 15
  2393                           ;../dc_motor.c: 54:     CCP2CONbits.EN=1;
  2394   01F50C  8EA7               	bsf	167,7,c	;volatile
  2395   01F50E                     
  2396                           ; BSR set to: 15
  2397                           ;../dc_motor.c: 58:     CCP3CONbits.FMT=1;
  2398   01F50E  8926               	bsf	38,4,b	;volatile
  2399                           
  2400                           ;../dc_motor.c: 59:     CCP3CONbits.CCP3MODE=0b1100;
  2401   01F510  5126               	movf	38,w,b	;volatile
  2402   01F512  0BF0               	andlw	-16
  2403   01F514  090C               	iorlw	12
  2404   01F516  6F26               	movwf	38,b	;volatile
  2405   01F518                     
  2406                           ; BSR set to: 15
  2407                           ;../dc_motor.c: 60:     CCP3CONbits.EN=1;
  2408   01F518  8F26               	bsf	38,7,b	;volatile
  2409   01F51A                     
  2410                           ; BSR set to: 15
  2411                           ;../dc_motor.c: 63:     CCP4CONbits.FMT=1;
  2412   01F51A  8922               	bsf	34,4,b	;volatile
  2413                           
  2414                           ;../dc_motor.c: 64:     CCP4CONbits.CCP4MODE=0b1100;
  2415   01F51C  5122               	movf	34,w,b	;volatile
  2416   01F51E  0BF0               	andlw	-16
  2417   01F520  090C               	iorlw	12
  2418   01F522  6F22               	movwf	34,b	;volatile
  2419   01F524                     
  2420                           ; BSR set to: 15
  2421                           ;../dc_motor.c: 65:     CCP4CONbits.EN=1;
  2422   01F524  8F22               	bsf	34,7,b	;volatile
  2423   01F526                     
  2424                           ; BSR set to: 15
  2425   01F526  0012               	return		;funcret
  2426   01F528                     __end_of_initDCmotorsPWM:
  2427                           	callstack 0
  2428                           
  2429 ;; *************** function _buggyLEDs_init *****************
  2430 ;; Defined at:
  2431 ;;		line 113 in file "../dc_motor.c"
  2432 ;; Parameters:    Size  Location     Type
  2433 ;;		None
  2434 ;; Auto vars:     Size  Location     Type
  2435 ;;		None
  2436 ;; Return value:  Size  Location     Type
  2437 ;;                  1    wreg      void 
  2438 ;; Registers used:
  2439 ;;		None
  2440 ;; Tracked objects:
  2441 ;;		On entry : 0/0
  2442 ;;		On exit  : 0/0
  2443 ;;		Unchanged: 0/0
  2444 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2445 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2446 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2447 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2448 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2449 ;;Total ram usage:        0 bytes
  2450 ;; Hardware stack levels used: 1
  2451 ;; This function calls:
  2452 ;;		Nothing
  2453 ;; This function is called by:
  2454 ;;		_main
  2455 ;; This function uses a non-reentrant model
  2456 ;;
  2457                           
  2458                           	psect	text12
  2459   01F39E                     __ptext12:
  2460                           	callstack 0
  2461   01F39E                     _buggyLEDs_init:
  2462                           	callstack 30
  2463   01F39E                     
  2464                           ;../dc_motor.c: 114:     LATHbits.LATH1 = 0;
  2465   01F39E  9280               	bcf	128,1,c	;volatile
  2466                           
  2467                           ;../dc_motor.c: 115:     LATDbits.LATD3 = 0;
  2468   01F3A0  967C               	bcf	124,3,c	;volatile
  2469                           
  2470                           ;../dc_motor.c: 116:     LATDbits.LATD4 = 0;
  2471   01F3A2  987C               	bcf	124,4,c	;volatile
  2472                           
  2473                           ;../dc_motor.c: 117:     LATFbits.LATF0 = 0;
  2474   01F3A4  907E               	bcf	126,0,c	;volatile
  2475                           
  2476                           ;../dc_motor.c: 118:     LATHbits.LATH0 = 0;
  2477   01F3A6  9080               	bcf	128,0,c	;volatile
  2478                           
  2479                           ;../dc_motor.c: 120:     TRISHbits.TRISH1 = 0;
  2480   01F3A8  9288               	bcf	136,1,c	;volatile
  2481                           
  2482                           ;../dc_motor.c: 121:     TRISDbits.TRISD3 = 0;
  2483   01F3AA  9684               	bcf	132,3,c	;volatile
  2484                           
  2485                           ;../dc_motor.c: 122:     TRISDbits.TRISD4 = 0;
  2486   01F3AC  9884               	bcf	132,4,c	;volatile
  2487                           
  2488                           ;../dc_motor.c: 123:     TRISFbits.TRISF0 = 0;
  2489   01F3AE  9086               	bcf	134,0,c	;volatile
  2490                           
  2491                           ;../dc_motor.c: 124:     TRISHbits.TRISH0 = 0;
  2492   01F3B0  9088               	bcf	136,0,c	;volatile
  2493   01F3B2  0012               	return		;funcret
  2494   01F3B4                     __end_of_buggyLEDs_init:
  2495                           	callstack 0
  2496   000000                     
  2497                           	psect	rparam
  2498   000000                     
  2499                           	psect	idloc
  2500                           
  2501                           ;Config register IDLOC0 @ 0x200000
  2502                           ;	unspecified, using default values
  2503   200000                     	org	2097152
  2504   200000  0FFF               	dw	4095
  2505                           
  2506                           ;Config register IDLOC1 @ 0x200002
  2507                           ;	unspecified, using default values
  2508   200002                     	org	2097154
  2509   200002  0FFF               	dw	4095
  2510                           
  2511                           ;Config register IDLOC2 @ 0x200004
  2512                           ;	unspecified, using default values
  2513   200004                     	org	2097156
  2514   200004  0FFF               	dw	4095
  2515                           
  2516                           ;Config register IDLOC3 @ 0x200006
  2517                           ;	unspecified, using default values
  2518   200006                     	org	2097158
  2519   200006  0FFF               	dw	4095
  2520                           
  2521                           ;Config register IDLOC4 @ 0x200008
  2522                           ;	unspecified, using default values
  2523   200008                     	org	2097160
  2524   200008  0FFF               	dw	4095
  2525                           
  2526                           ;Config register IDLOC5 @ 0x20000A
  2527                           ;	unspecified, using default values
  2528   20000A                     	org	2097162
  2529   20000A  0FFF               	dw	4095
  2530                           
  2531                           ;Config register IDLOC6 @ 0x20000C
  2532                           ;	unspecified, using default values
  2533   20000C                     	org	2097164
  2534   20000C  0FFF               	dw	4095
  2535                           
  2536                           ;Config register IDLOC7 @ 0x20000E
  2537                           ;	unspecified, using default values
  2538   20000E                     	org	2097166
  2539   20000E  0FFF               	dw	4095
  2540                           
  2541                           	psect	config
  2542                           
  2543                           ;Config register CONFIG1L @ 0x300000
  2544                           ;	External Oscillator mode Selection bits
  2545                           ;	FEXTOSC = HS, HS (crystal oscillator) above 8 MHz; PFM set to high power
  2546                           ;	Power-up default value for COSC bits
  2547                           ;	RSTOSC = EXTOSC_4PLL, EXTOSC with 4x PLL, with EXTOSC operating per FEXTOSC bits
  2548   300000                     	org	3145728
  2549   300000  AA                 	db	170
  2550                           
  2551                           ;Config register CONFIG1H @ 0x300001
  2552                           ;	unspecified, using default values
  2553                           ;	Clock Out Enable bit
  2554                           ;	CLKOUTEN = 0x1, unprogrammed default
  2555                           ;	Clock Switch Enable bit
  2556                           ;	CSWEN = 0x1, unprogrammed default
  2557                           ;	Fail-Safe Clock Monitor Enable bit
  2558                           ;	FCMEN = 0x1, unprogrammed default
  2559   300001                     	org	3145729
  2560   300001  FF                 	db	255
  2561                           
  2562                           ;Config register CONFIG2L @ 0x300002
  2563                           ;	unspecified, using default values
  2564                           ;	Master Clear Enable bit
  2565                           ;	MCLRE = 0x1, unprogrammed default
  2566                           ;	Power-up Timer Enable bit
  2567                           ;	PWRTE = 0x1, unprogrammed default
  2568                           ;	Low-power BOR enable bit
  2569                           ;	LPBOREN = 0x1, unprogrammed default
  2570                           ;	Brown-out Reset Enable bits
  2571                           ;	BOREN = 0x3, unprogrammed default
  2572   300002                     	org	3145730
  2573   300002  FF                 	db	255
  2574                           
  2575                           ;Config register CONFIG2H @ 0x300003
  2576                           ;	unspecified, using default values
  2577                           ;	Brown Out Reset Voltage selection bits
  2578                           ;	BORV = 0x3, unprogrammed default
  2579                           ;	ZCD Disable bit
  2580                           ;	ZCD = 0x1, unprogrammed default
  2581                           ;	PPSLOCK bit One-Way Set Enable bit
  2582                           ;	PPS1WAY = 0x1, unprogrammed default
  2583                           ;	Stack Full/Underflow Reset Enable bit
  2584                           ;	STVREN = 0x1, unprogrammed default
  2585                           ;	Debugger Enable bit
  2586                           ;	DEBUG = 0x1, unprogrammed default
  2587                           ;	Extended Instruction Set Enable bit
  2588                           ;	XINST = 0x1, unprogrammed default
  2589   300003                     	org	3145731
  2590   300003  FF                 	db	255
  2591                           
  2592                           ;Config register CONFIG3L @ 0x300004
  2593                           ;	WDT Period Select bits
  2594                           ;	WDTCPS = WDTCPS_31, Divider ratio 1:65536; software control of WDTPS
  2595                           ;	WDT operating mode
  2596                           ;	WDTE = OFF, WDT Disabled
  2597   300004                     	org	3145732
  2598   300004  9F                 	db	159
  2599                           
  2600                           ;Config register CONFIG3H @ 0x300005
  2601                           ;	unspecified, using default values
  2602                           ;	WDT Window Select bits
  2603                           ;	WDTCWS = 0x7, unprogrammed default
  2604                           ;	WDT input clock selector
  2605                           ;	WDTCCS = 0x7, unprogrammed default
  2606   300005                     	org	3145733
  2607   300005  FF                 	db	255
  2608                           
  2609                           ;Config register CONFIG4L @ 0x300006
  2610                           ;	unspecified, using default values
  2611                           ;	Write Protection Block 0
  2612                           ;	WRT0 = 0x1, unprogrammed default
  2613                           ;	Write Protection Block 1
  2614                           ;	WRT1 = 0x1, unprogrammed default
  2615                           ;	Write Protection Block 2
  2616                           ;	WRT2 = 0x1, unprogrammed default
  2617                           ;	Write Protection Block 3
  2618                           ;	WRT3 = 0x1, unprogrammed default
  2619                           ;	Write Protection Block 3
  2620                           ;	WRT4 = 0x1, unprogrammed default
  2621                           ;	Write Protection Block 3
  2622                           ;	WRT5 = 0x1, unprogrammed default
  2623                           ;	Write Protection Block 3
  2624                           ;	WRT6 = 0x1, unprogrammed default
  2625                           ;	Write Protection Block 3
  2626                           ;	WRT7 = 0x1, unprogrammed default
  2627   300006                     	org	3145734
  2628   300006  FF                 	db	255
  2629                           
  2630                           ;Config register CONFIG4H @ 0x300007
  2631                           ;	unspecified, using default values
  2632                           ;	Configuration Register Write Protection bit
  2633                           ;	WRTC = 0x1, unprogrammed default
  2634                           ;	Boot Block Write Protection bit
  2635                           ;	WRTB = 0x1, unprogrammed default
  2636                           ;	Data EEPROM Write Protection bit
  2637                           ;	WRTD = 0x1, unprogrammed default
  2638                           ;	Scanner Enable bit
  2639                           ;	SCANE = 0x1, unprogrammed default
  2640                           ;	Low Voltage Programming Enable bit
  2641                           ;	LVP = 0x1, unprogrammed default
  2642   300007                     	org	3145735
  2643   300007  FF                 	db	255
  2644                           
  2645                           ;Config register CONFIG5L @ 0x300008
  2646                           ;	unspecified, using default values
  2647                           ;	UserNVM Program Memory Code Protection bit
  2648                           ;	CP = 0x1, unprogrammed default
  2649                           ;	DataNVM Memory Code Protection bit
  2650                           ;	CPD = 0x1, unprogrammed default
  2651   300008                     	org	3145736
  2652   300008  FF                 	db	255
  2653                           
  2654                           ;Config register CONFIG5H @ 0x300009
  2655                           ;	unspecified, using default values
  2656   300009                     	org	3145737
  2657   300009  FF                 	db	255
  2658                           
  2659                           ;Config register CONFIG6L @ 0x30000A
  2660                           ;	unspecified, using default values
  2661                           ;	Table Read Protection Block 0
  2662                           ;	EBTR0 = 0x1, unprogrammed default
  2663                           ;	Table Read Protection Block 1
  2664                           ;	EBTR1 = 0x1, unprogrammed default
  2665                           ;	Table Read Protection Block 2
  2666                           ;	EBTR2 = 0x1, unprogrammed default
  2667                           ;	Table Read Protection Block 3
  2668                           ;	EBTR3 = 0x1, unprogrammed default
  2669                           ;	Table Read Protection Block 4
  2670                           ;	EBTR4 = 0x1, unprogrammed default
  2671                           ;	Table Read Protection Block 5
  2672                           ;	EBTR5 = 0x1, unprogrammed default
  2673                           ;	Table Read Protection Block 6
  2674                           ;	EBTR6 = 0x1, unprogrammed default
  2675                           ;	Table Read Protection Block 7
  2676                           ;	EBTR7 = 0x1, unprogrammed default
  2677   30000A                     	org	3145738
  2678   30000A  FF                 	db	255
  2679                           
  2680                           ;Config register CONFIG6H @ 0x30000B
  2681                           ;	unspecified, using default values
  2682                           ;	Boot Block Table Read Protection bit
  2683                           ;	EBTRB = 0x1, unprogrammed default
  2684   30000B                     	org	3145739
  2685   30000B  FF                 	db	255
  2686                           tosu	equ	0xFFF
  2687                           tosh	equ	0xFFE
  2688                           tosl	equ	0xFFD
  2689                           stkptr	equ	0xFFC
  2690                           pclatu	equ	0xFFB
  2691                           pclath	equ	0xFFA
  2692                           pcl	equ	0xFF9
  2693                           tblptru	equ	0xFF8
  2694                           tblptrh	equ	0xFF7
  2695                           tblptrl	equ	0xFF6
  2696                           tablat	equ	0xFF5
  2697                           prodh	equ	0xFF4
  2698                           prodl	equ	0xFF3
  2699                           indf0	equ	0xFEF
  2700                           postinc0	equ	0xFEE
  2701                           postdec0	equ	0xFED
  2702                           preinc0	equ	0xFEC
  2703                           plusw0	equ	0xFEB
  2704                           fsr0h	equ	0xFEA
  2705                           fsr0l	equ	0xFE9
  2706                           wreg	equ	0xFE8
  2707                           indf1	equ	0xFE7
  2708                           postinc1	equ	0xFE6
  2709                           postdec1	equ	0xFE5
  2710                           preinc1	equ	0xFE4
  2711                           plusw1	equ	0xFE3
  2712                           fsr1h	equ	0xFE2
  2713                           fsr1l	equ	0xFE1
  2714                           bsr	equ	0xFE0
  2715                           indf2	equ	0xFDF
  2716                           postinc2	equ	0xFDE
  2717                           postdec2	equ	0xFDD
  2718                           preinc2	equ	0xFDC
  2719                           plusw2	equ	0xFDB
  2720                           fsr2h	equ	0xFDA
  2721                           fsr2l	equ	0xFD9
  2722                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         18
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     45      63
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          234      0       0

Pointer List with Targets:

    motor_init@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> motorR(COMRAM[9]), 

    motor_init@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> motorL(COMRAM[9]), 

    instructions@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> motorR(COMRAM[9]), 

    instructions@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> motorL(COMRAM[9]), 

    space@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllll[1]), CCPR2H(BITBIGSFRhhhlll[1]), 

    space@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllll[1]), CCPR1H(BITBIGSFRhhhlll[1]), 

    space@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllll[1]), CCPR2H(BITBIGSFRhhhlll[1]), 

    space@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllll[1]), CCPR1H(BITBIGSFRhhhlll[1]), 

    space@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> motorR(COMRAM[9]), 

    space@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> motorL(COMRAM[9]), 

    right_45@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllll[1]), CCPR2H(BITBIGSFRhhhlll[1]), 

    right_45@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllll[1]), CCPR1H(BITBIGSFRhhhlll[1]), 

    right_45@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> motorR(COMRAM[9]), 

    right_45@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllll[1]), CCPR2H(BITBIGSFRhhhlll[1]), 

    right_45@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllll[1]), CCPR1H(BITBIGSFRhhhlll[1]), 

    right_45@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> motorL(COMRAM[9]), 

    left_45@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllll[1]), CCPR2H(BITBIGSFRhhhlll[1]), 

    left_45@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllll[1]), CCPR1H(BITBIGSFRhhhlll[1]), 

    left_45@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllll[1]), CCPR2H(BITBIGSFRhhhlll[1]), 

    left_45@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllll[1]), CCPR1H(BITBIGSFRhhhlll[1]), 

    left_45@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> motorR(COMRAM[9]), 

    left_45@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> motorL(COMRAM[9]), 

    stop@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllll[1]), CCPR2H(BITBIGSFRhhhlll[1]), 

    stop@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllll[1]), CCPR1H(BITBIGSFRhhhlll[1]), 

    stop@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> motorR(COMRAM[9]), 

    stop@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllll[1]), CCPR2H(BITBIGSFRhhhlll[1]), 

    stop@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllll[1]), CCPR1H(BITBIGSFRhhhlll[1]), 

    stop@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> motorL(COMRAM[9]), 

    reverse@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllll[1]), CCPR2H(BITBIGSFRhhhlll[1]), 

    reverse@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllll[1]), CCPR1H(BITBIGSFRhhhlll[1]), 

    reverse@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllll[1]), CCPR2H(BITBIGSFRhhhlll[1]), 

    reverse@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllll[1]), CCPR1H(BITBIGSFRhhhlll[1]), 

    reverse@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> motorR(COMRAM[9]), 

    reverse@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> motorL(COMRAM[9]), 

    forward@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllll[1]), CCPR2H(BITBIGSFRhhhlll[1]), 

    forward@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllll[1]), CCPR1H(BITBIGSFRhhhlll[1]), 

    forward@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllll[1]), CCPR2H(BITBIGSFRhhhlll[1]), 

    forward@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllll[1]), CCPR1H(BITBIGSFRhhhlll[1]), 

    setMotorPWM@m.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllll[1]), CCPR2H(BITBIGSFRhhhlll[1]), 

    setMotorPWM@m.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllll[1]), CCPR1H(BITBIGSFRhhhlll[1]), 

    setMotorPWM@m	PTR struct DC_motor size(2) Largest target is 11
		 -> motorR(COMRAM[9]), motorL(COMRAM[9]), 

    motorR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllll[1]), CCPR2H(BITBIGSFRhhhlll[1]), 

    motorR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllll[1]), CCPR1H(BITBIGSFRhhhlll[1]), 

    S280DC_motor$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllll[1]), CCPR2H(BITBIGSFRhhhlll[1]), 

    motorL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllll[1]), CCPR2H(BITBIGSFRhhhlll[1]), 

    S280DC_motor$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllll[1]), CCPR1H(BITBIGSFRhhhlll[1]), 

    motorL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllll[1]), CCPR1H(BITBIGSFRhhhlll[1]), 


Critical Paths under _main in COMRAM

    _main->_instructions
    _instructions->_left_45
    _instructions->_right_45
    _space->_stop
    _right_45->_stop
    _reverse->_stop
    _left_45->_stop
    _stop->_setMotorPWM
    _setMotorPWM->___lwdiv
    ___lwdiv->___wmul

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   44049
                                             43 COMRAM     2     2      0
                     _buggyLEDs_init
                    _initDCmotorsPWM
                       _instructions
                         _motor_init
 ---------------------------------------------------------------------------------
 (1) _motor_init                                           4     0      4     152
                                              0 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (1) _instructions                                         8     2      6   43799
                                             35 COMRAM     8     2      6
                            _left_45
                            _reverse
                           _right_45
                              _space
                               _stop
 ---------------------------------------------------------------------------------
 (2) _space                                                6     2      4    8554
                                             25 COMRAM     6     2      4
                        _setMotorPWM
                               _stop
 ---------------------------------------------------------------------------------
 (2) _right_45                                            10     4      6    9316
                                             25 COMRAM    10     4      6
                        _setMotorPWM
                               _stop
 ---------------------------------------------------------------------------------
 (2) _reverse                                              5     1      4    8662
                                             25 COMRAM     5     1      4
                        _setMotorPWM
                               _stop
 ---------------------------------------------------------------------------------
 (2) _left_45                                             10     4      6    9132
                                             25 COMRAM    10     4      6
                        _setMotorPWM
                               _stop
 ---------------------------------------------------------------------------------
 (2) _stop                                                 6     2      4    5505
                                             19 COMRAM     6     2      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (3) _setMotorPWM                                          6     4      2    2589
                                             13 COMRAM     6     4      2
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     355
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              7     3      4     358
                                              6 COMRAM     7     3      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _initDCmotorsPWM                                      2     0      2      98
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _buggyLEDs_init                                       0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _buggyLEDs_init
   _initDCmotorsPWM
   _instructions
     _left_45
       _setMotorPWM
         ___lwdiv
           ___wmul (ARG)
         ___wmul
       _stop
         _setMotorPWM
     _reverse
       _setMotorPWM
       _stop
     _right_45
       _setMotorPWM
       _stop
     _space
       _setMotorPWM
       _stop
     _stop
   _motor_init

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             DE9      0       0      51        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK13           EA      0       0      30        0.0%
BANK13              EA      0       0      31        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     2D      3F       1       66.3%
BITBIGSFRhlllh      54      0       0      38        0.0%
BITBIGSFRlllhll     4B      0       0      48        0.0%
BITBIGSFRhlllll     46      0       0      40        0.0%
BITBIGSFRhhhh       40      0       0      32        0.0%
BITBIGSFRllh        2D      0       0      42        0.0%
BITBIGSFRllll       2D      0       0      49        0.0%
BITBIGSFRlllhhh     1E      0       0      43        0.0%
BITBIGSFRhhhlll     1D      0       0      36        0.0%
BITBIGSFRlllhhh     11      0       0      44        0.0%
BITBIGSFRhhhlhh      E      0       0      33        0.0%
BITBIGSFRlllhlh      5      0       0      47        0.0%
BITBIGSFRlllhhl      3      0       0      46        0.0%
BITBIGSFRhllllh      2      0       0      39        0.0%
BITBIGSFRhhhllh      2      0       0      35        0.0%
BITBIGSFRhlhh        2      0       0      37        0.0%
BITBIGSFRhhhlhl      1      0       0      34        0.0%
BITBIGSFRlllhhh      1      0       0      45        0.0%
BITBIGSFRlh          1      0       0      41        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      3F      50        0.0%
DATA                 0      0      3F       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.40 build 20220703182018 
Symbol Table                                                                                   Thu Mar 09 19:07:58 2023

     ___wmul@multiplicand 0003                       l142 F526                       l206 F794  
                     l216 FFFE                       l152 F422                       l170 F692  
                     l155 F3B2                       l171 F694                       l235 FD18  
                     l149 FB6E                       l238 F3D8                       l176 F5D6  
                     l187 FA02                       l198 F8C2                       l736 F496  
                     l729 F48E                       u400 F67A                       u401 F676  
                     u410 F692                       u411 F68E                       u340 F43E  
                     u420 F91E                       u500 F85C                       u341 F43A  
                     u421 F91A                       u501 F858                       u350 F45C  
                     u430 F942                       u510 F8C2                       u351 F458  
                     u431 F93E                       u511 F8BE                       u360 F478  
                     u440 F986                       u520 F738                       u600 FFCE  
                     u361 F474                       u441 F982                       u521 F734  
                     u601 FFCA                       u370 FA20                       u450 F99E  
                     u530 F750                       u371 FA1C                       u451 F99A  
                     u531 F74C                       u380 FAEA                       u460 FA02  
                     u540 FD86                       u381 FAE6                       u461 F9FE  
                     u541 FD82                       u390 F5A4                       u470 F7DC  
                     u550 FDCA                       u391 F5A0                       u471 F7D8  
                     u551 FDC6                       u480 F800                       u560 FE0E  
                     u481 F7FC                       u561 FE0A                       u490 F844  
                     u570 FE52                       u491 F840                       u571 FE4E  
                     u707 FD0A                       u580 FEEE                       u581 FEEA  
                     u717 FD3A                       u637 FB9E                       u590 FF8A  
                     u807 F826                       u591 FF86                       u727 FD66  
                     u647 FBD2                       u817 F866                       u737 FE70  
                     u657 FC06                       u827 F892                       u747 FE9C  
                     u667 FC3A                       u837 F65C                       u757 FF0C  
                     u677 FC6E                       u847 F968                       u767 FF38  
                     u687 FCA2                       u857 F9A8                       u777 F71A  
                     u697 FCD6                       u867 F9D2                       u787 F75A  
                     u877 F584                       u797 F784                       wreg 000FE8  
                    l1311 F3D0                      l1321 F446                      l1401 F67A  
                    l1147 F39E                      l1331 F480                      l1323 F44E  
                    l1315 F424                      l1411 F8FA                      l1403 F8C4  
                    l1333 F482                      l1325 F45C                      l1317 F42C  
                    l1309 F3B4                      l1341 FA74                      l1421 F94E  
                    l1413 F906                      l1405 F8D8                      l1501 F766  
                    l1511 F4CE                      l1335 F488                      l1327 F462  
                    l1319 F43E                      l1351 FB2E                      l1343 FA88  
                    l1431 F99E                      l1423 F95A                      l1415 F91E  
                    l1407 F8E8                      l1503 F77A                      l1521 F50C  
                    l1513 F4D2                      l1329 F478                      l1345 FA8C  
                    l1337 FA04                      l1353 F528                      l1433 F9B4  
                    l1425 F966                      l1417 F92A                      l1441 F9E4  
                    l1409 F8F8                      l1505 F792                      l1523 F50E  
                    l1515 F4F6                      l1507 F498                      l1347 FACE  
                    l1339 FA20                      l1371 F58A                      l1363 F552  
                    l1355 F548                      l1435 F9C8                      l1427 F96E  
                    l1419 F942                      l1451 F7DC                      l1443 F796  
                    l1531 F3DA                      l1611 FBAC                      l1603 FB70  
                    l1525 F518                      l1517 F500                      l1509 F4A8  
                    l1349 FAEA                      l1381 F5D4                      l1373 F596  
                    l1365 F56A                      l1357 F54A                      l1437 F9DE  
                    l1429 F986                      l1461 F824                      l1453 F7E8  
                    l1445 F7B6                      l1541 FD1C                      l1533 F3E6  
                    l1621 FC30                      l1613 FBC8                      l1605 FB7C  
                    l1527 F51A                      l1519 F502                      l1375 F5A4  
                    l1367 F576                      l1439 F9E0                      l1391 F62A  
                    l1383 F5D8                      l1471 F888                      l1463 F82C  
                    l1455 F800                      l1447 F7B8                      l1551 FDB6  
                    l1543 FD30                      l1535 F3EE                      l1631 FCB0  
                    l1623 FC48                      l1615 FBE0                      l1607 FB80  
                    l1529 F524                      l1377 F5BC                      l1369 F582  
                    l1393 F642                      l1385 F5EC                      l1473 F89E  
                    l1465 F844                      l1457 F80C                      l1449 F7C4  
                    l1481 F6AA                      l1561 FE52                      l1553 FDCA  
                    l1545 FD48                      l1537 F40A                      l1633 FCCC  
                    l1625 FC64                      l1617 FBFC                      l1609 FB94  
                    l1379 F5C8                      l1395 F64E                      l1387 F5FC  
                    l1475 F8A0                      l1467 F85C                      l1459 F818  
                    l1491 F70C                      l1483 F6AC                      l1563 FE66  
                    l1571 FEDA                      l1555 FDFA                      l1547 FD74  
                    l1539 F412                      l1635 FCE4                      l1627 FC7C  
                    l1619 FC14                      l1397 F65A                      l1389 F60C  
                    l1469 F874                      l1477 F8A4                      l1493 F718  
                    l1485 F6BC                      l1581 FF62                      l1573 FEEE  
                    l1565 FE7E                      l1557 FE0E                      l1549 FD86  
                    l1637 FD00                      l1629 FC98                      l1399 F662  
                    l1487 F6E8                      l1495 F720                      l1479 F696  
                    l1575 FF02                      l1583 FF76                      l1567 FEAA  
                    l1559 FE3E                      l1497 F738                      l1489 F700  
                    l1585 FF8A                      l1577 FF1A                      l1569 FEC6  
                    l1499 F750                      l1587 FFBA                      l1579 FF46  
                    l1589 FFCE                      _T2PR 000FBC                      _main FB70  
                    fsr2h 000FDA                      indf2 000FDF                      fsr2l 000FD9  
                    _stop F528                      prodh 000FF4                      prodl 000FF3  
                    start 0000              ___param_bank 000000                     ?_main 0001  
                   ?_stop 0014           __end_of___lwdiv F498              left_45@count 001E  
         __end_of_left_45 FA04                     _space F696           __end_of_reverse F696  
                   stop@i 0018                     status 000FD8           __initialization F38C  
            __end_of_main FD1C              __end_of_stop F5D8                    ??_main 002C  
                  ??_stop 0018             __activetblptr 000000              ?_setMotorPWM 000E  
                  _CCPR1H 000FAA                    _CCPR2H 000FA6                    _CCPR3H 000F25  
                  _CCPR4H 000F21                    ?_space 001A                    _RE2PPS 000E74  
                  _RD5PPS 000E6F                    _RC7PPS 000E69                    _RE4PPS 000E76  
                  _RD6PPS 000E70                    _RG6PPS 000E88              _CCPTMRS0bits 000FAD  
                  ___wmul F3B4                 ??___lwdiv 000B          ??_buggyLEDs_init 0001  
                  clear_0 F392                    _motorL 0037                    _motorR 002E  
                  isa$std 000001                 ??_left_45 0020          __end_of_right_45 F8C4  
               ??_reverse 001E                    stop@mL 0014                    stop@mR 0016  
       ??_initDCmotorsPWM 0003                __accesstop 0060   __end_of__initialization F398  
           ___rparam_used 000001            __pcstackCOMRAM 0001             __end_of_space F796  
                 ??_space 001E             ?_instructions 0024              _T2CLKCONbits 000FBF  
                 ?___wmul 0001                   _SSP2ADD 000ED6                   _SSP2BUF 000ED5  
          ??_instructions 002A                 ?_right_45 001A                   __Hparam 0000  
                 __Lparam 0000                   ___lwdiv F424                   __pcinit F38C  
                 __ramtop 0E00                   __ptext0 FB70                   __ptext1 F3DA  
                 __ptext2 FD1C                   __ptext3 F696                   __ptext4 F796  
                 __ptext5 F5D8                   __ptext6 F8C4                   __ptext7 F528  
                 __ptext8 FA04                   __ptext9 F3B4                   _left_45 F8C4  
               _T2CONbits 000FBD                 _T2HLTbits 000FBE                   _reverse F5D8  
           right_45@count 001E      end_of_initialization F398                ??_right_45 0020  
                 space@mL 001A                   space@mR 001C                   postdec2 000FDD  
                 postinc0 000FEE                   postinc2 000FDE                _motor_init F3DA  
         _initDCmotorsPWM F498        setMotorPWM@negDuty 0013        setMotorPWM@posDuty 0012  
               _TRISCbits 000F83                 _TRISDbits 000F84                 _TRISEbits 000F85  
               _TRISFbits 000F86                 _TRISGbits 000F87                 _TRISHbits 000F88  
             _CCP1CONbits 000FAB               _CCP2CONbits 000FA7               _CCP3CONbits 000F26  
             _CCP4CONbits 000F22            __end_of___wmul F3DA      __end_of_instructions 0000  
     start_initialization F38C   __end_of_initDCmotorsPWM F528                  ??___wmul 0005  
             ?_motor_init 0001               __pbssCOMRAM 002E          ___lwdiv@dividend 0007  
                ?___lwdiv 0007                right_45@mL 001A                right_45@mR 001C  
                ?_left_45 001A                  ?_reverse 001A             ??_setMotorPWM 0010  
        ___lwdiv@quotient 000B  initDCmotorsPWM@PWMperiod 0001            ___wmul@product 0005  
                _LATCbits 000F7B                  _LATDbits 000F7C                  _LATEbits 000F7D  
                _LATFbits 000F7E                  _LATGbits 000F7F                  _LATHbits 000F80  
        ?_initDCmotorsPWM 0001                  _SSP2CON2 000EDA                  _SSP2STAT 000ED8  
       ___wmul@multiplier 0001              setMotorPWM@m 000E                 left_45@mL 001A  
               left_45@mR 001C       __end_of_setMotorPWM FB70              _instructions FD1C  
                __Hrparam 0000                  __Lrparam 0000                _ANSELDbits 000EA7  
          _buggyLEDs_init F39E           ___lwdiv@divisor 0009           ___lwdiv@counter 000D  
                __ptext10 F424                  __ptext11 F498                  __ptext12 F39E  
               right_45@i 0022              _SSP2CON1bits 000ED9              _SSP2CON2bits 000EDA  
          instructions@mL 0024            instructions@mR 0026                  _right_45 F796  
               reverse@mL 001A                 reverse@mR 001C         instructions@count 0028  
                isa$xinst 000000              ??_motor_init 0005                  left_45@i 0022  
  __end_of_buggyLEDs_init F3B4               _setMotorPWM FA04        __end_of_motor_init F424  
            motor_init@mL 0001              motor_init@mR 0003           ?_buggyLEDs_init 0001  
              _SSP2DATPPS 000E1D                _SSP2CLKPPS 000E1C  
