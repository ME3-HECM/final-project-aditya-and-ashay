

Microchip MPLAB XC8 Assembler V2.40 build 20220703182018 
                                                                                               Wed Mar 08 16:59:38 2023

Microchip MPLAB XC8 C Compiler v2.40 (Free license) build 20220703182018 Og1 
     1                           	processor	18F67K40
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     6                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     7                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	text0,global,reloc=2,class=CODE,delta=1
     9                           	psect	text1,global,reloc=2,class=CODE,delta=1
    10                           	psect	text2,global,reloc=2,class=CODE,delta=1
    11                           	psect	text3,global,reloc=2,class=CODE,delta=1
    12                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    13                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    14                           	psect	text6,global,reloc=2,class=CODE,delta=1
    15                           	psect	text7,global,reloc=2,class=CODE,delta=1
    16                           	psect	text8,global,reloc=2,class=CODE,delta=1
    17                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    18                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    19                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    20                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    21   000000                     
    22                           ; Generated 06/04/2022 GMT
    23                           ; 
    24                           ; Copyright Â© 2022, Microchip Technology Inc. and its subsidiaries ("Microchip")
    25                           ; All rights reserved.
    26                           ; 
    27                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    28                           ; 
    29                           ; Redistribution and use in source and binary forms, with or without modification, are
    30                           ; permitted provided that the following conditions are met:
    31                           ; 
    32                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    33                           ;        conditions and the following disclaimer.
    34                           ; 
    35                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    36                           ;        of conditions and the following disclaimer in the documentation and/or other
    37                           ;        materials provided with the distribution. Publication is not required when
    38                           ;        this file is used in an embedded application.
    39                           ; 
    40                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    41                           ;        software without specific prior written permission.
    42                           ; 
    43                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    44                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    45                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    46                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    47                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    48                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    49                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    50                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    51                           ; 
    52                           ; 
    53                           ; Code-generator required, PIC18F67K40 Definitions
    54                           ; 
    55                           ; SFR Addresses
    56   000000                     _TRISFbits	set	3974
    57   000000                     _LATFbits	set	3966
    58   000000                     _LATDbits	set	3964
    59   000000                     _LATGbits	set	3967
    60   000000                     _TRISGbits	set	3975
    61   000000                     _TRISEbits	set	3973
    62   000000                     _SSP2CON2bits	set	3802
    63   000000                     _SSP2CLKPPS	set	3612
    64   000000                     _SSP2DATPPS	set	3613
    65   000000                     _ANSELDbits	set	3751
    66   000000                     _SSP2ADD	set	3798
    67   000000                     _SSP2CON1bits	set	3801
    68   000000                     _LATCbits	set	3963
    69   000000                     _LATEbits	set	3965
    70   000000                     _TRISCbits	set	3971
    71   000000                     _SSP2CON2	set	3802
    72   000000                     _TRISDbits	set	3972
    73   000000                     _CCPR4H	set	3873
    74   000000                     _CCPR3H	set	3877
    75   000000                     _SSP2STAT	set	3800
    76   000000                     _SSP2BUF	set	3797
    77   000000                     _RC7PPS	set	3689
    78   000000                     _RD5PPS	set	3695
    79   000000                     _RE2PPS	set	3700
    80   000000                     _RD6PPS	set	3696
    81   000000                     _TRISHbits	set	3976
    82   000000                     _T2PR	set	4028
    83   000000                     _T2CONbits	set	4029
    84   000000                     _CCPR2H	set	4006
    85   000000                     _CCPR1H	set	4010
    86   000000                     _LATHbits	set	3968
    87   000000                     _RE4PPS	set	3702
    88   000000                     _RG6PPS	set	3720
    89   000000                     _T2CLKCONbits	set	4031
    90   000000                     _T2HLTbits	set	4030
    91   000000                     _CCP1CONbits	set	4011
    92   000000                     _CCPTMRS0bits	set	4013
    93   000000                     _CCP2CONbits	set	4007
    94   000000                     _CCP3CONbits	set	3878
    95   000000                     _CCP4CONbits	set	3874
    96                           
    97                           ; #config settings
    98                           
    99                           	psect	cinit
   100   01FAA0                     __pcinit:
   101                           	callstack 0
   102   01FAA0                     start_initialization:
   103                           	callstack 0
   104   01FAA0                     __initialization:
   105                           	callstack 0
   106                           
   107                           ; Clear objects allocated to COMRAM (18 bytes)
   108   01FAA0  EE00  F024         	lfsr	0,__pbssCOMRAM
   109   01FAA4  0E12               	movlw	18
   110   01FAA6                     clear_0:
   111   01FAA6  6AEE               	clrf	postinc0,c
   112   01FAA8  06E8               	decf	wreg,f,c
   113   01FAAA  E1FD               	bnz	clear_0
   114   01FAAC                     end_of_initialization:
   115                           	callstack 0
   116   01FAAC                     __end_of__initialization:
   117                           	callstack 0
   118   01FAAC  0100               	movlb	0
   119   01FAAE  EF1E  F0FE         	goto	_main	;jump to C main() function
   120                           
   121                           	psect	bssCOMRAM
   122   000024                     __pbssCOMRAM:
   123                           	callstack 0
   124   000024                     _motorR:
   125                           	callstack 0
   126   000024                     	ds	9
   127   00002D                     _motorL:
   128                           	callstack 0
   129   00002D                     	ds	9
   130                           
   131                           	psect	cstackCOMRAM
   132   000001                     __pcstackCOMRAM:
   133                           	callstack 0
   134   000001                     ?___wmul:
   135                           	callstack 0
   136   000001                     initDCmotorsPWM@PWMperiod:
   137                           	callstack 0
   138   000001                     motor_init@mL:
   139                           	callstack 0
   140   000001                     ___wmul@multiplier:
   141                           	callstack 0
   142                           
   143                           ; 2 bytes @ 0x0
   144   000001                     	ds	2
   145   000003                     motor_init@mR:
   146                           	callstack 0
   147   000003                     ___wmul@multiplicand:
   148                           	callstack 0
   149                           
   150                           ; 2 bytes @ 0x2
   151   000003                     	ds	2
   152   000005                     ___wmul@product:
   153                           	callstack 0
   154                           
   155                           ; 2 bytes @ 0x4
   156   000005                     	ds	2
   157   000007                     ?___lwdiv:
   158                           	callstack 0
   159   000007                     ___lwdiv@dividend:
   160                           	callstack 0
   161                           
   162                           ; 2 bytes @ 0x6
   163   000007                     	ds	2
   164   000009                     ___lwdiv@divisor:
   165                           	callstack 0
   166                           
   167                           ; 2 bytes @ 0x8
   168   000009                     	ds	2
   169   00000B                     ___lwdiv@quotient:
   170                           	callstack 0
   171                           
   172                           ; 2 bytes @ 0xA
   173   00000B                     	ds	2
   174   00000D                     ___lwdiv@counter:
   175                           	callstack 0
   176                           
   177                           ; 1 bytes @ 0xC
   178   00000D                     	ds	1
   179   00000E                     setMotorPWM@m:
   180                           	callstack 0
   181                           
   182                           ; 2 bytes @ 0xD
   183   00000E                     	ds	2
   184   000010                     ??_setMotorPWM:
   185                           
   186                           ; 1 bytes @ 0xF
   187   000010                     	ds	2
   188   000012                     setMotorPWM@posDuty:
   189                           	callstack 0
   190                           
   191                           ; 1 bytes @ 0x11
   192   000012                     	ds	1
   193   000013                     setMotorPWM@negDuty:
   194                           	callstack 0
   195                           
   196                           ; 1 bytes @ 0x12
   197   000013                     	ds	1
   198   000014                     stop@mL:
   199                           	callstack 0
   200                           
   201                           ; 2 bytes @ 0x13
   202   000014                     	ds	2
   203   000016                     stop@mR:
   204                           	callstack 0
   205                           
   206                           ; 2 bytes @ 0x15
   207   000016                     	ds	2
   208   000018                     stop@i:
   209                           	callstack 0
   210                           
   211                           ; 2 bytes @ 0x17
   212   000018                     	ds	2
   213   00001A                     right_45@mL:
   214                           	callstack 0
   215                           
   216                           ; 2 bytes @ 0x19
   217   00001A                     	ds	2
   218   00001C                     right_45@mR:
   219                           	callstack 0
   220                           
   221                           ; 2 bytes @ 0x1B
   222   00001C                     	ds	2
   223   00001E                     ??_right_45:
   224                           
   225                           ; 1 bytes @ 0x1D
   226   00001E                     	ds	2
   227   000020                     ??_main:
   228                           
   229                           ; 1 bytes @ 0x1F
   230   000020                     	ds	2
   231   000022                     main@i:
   232                           	callstack 0
   233                           
   234                           ; 2 bytes @ 0x21
   235   000022                     	ds	2
   236                           
   237 ;;
   238 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   239 ;;
   240 ;; *************** function _main *****************
   241 ;; Defined at:
   242 ;;		line 14 in file "../main.c"
   243 ;; Parameters:    Size  Location     Type
   244 ;;		None
   245 ;; Auto vars:     Size  Location     Type
   246 ;;  i               2   33[COMRAM] int 
   247 ;; Return value:  Size  Location     Type
   248 ;;                  1    wreg      void 
   249 ;; Registers used:
   250 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   251 ;; Tracked objects:
   252 ;;		On entry : 0/0
   253 ;;		On exit  : 0/0
   254 ;;		Unchanged: 0/0
   255 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   256 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   257 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   258 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   259 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   260 ;;Total ram usage:        4 bytes
   261 ;; Hardware stack levels required when called: 4
   262 ;; This function calls:
   263 ;;		_buggyLEDs_init
   264 ;;		_initDCmotorsPWM
   265 ;;		_motor_init
   266 ;;		_right_45
   267 ;;		_stop
   268 ;; This function is called by:
   269 ;;		Startup code after reset
   270 ;; This function uses a non-reentrant model
   271 ;;
   272                           
   273                           	psect	text0
   274   01FC3C                     __ptext0:
   275                           	callstack 0
   276   01FC3C                     _main:
   277                           	callstack 27
   278   01FC3C                     
   279                           ;../main.c: 16:     initDCmotorsPWM(99);
   280   01FC3C  0E00               	movlw	0
   281   01FC3E  6E02               	movwf	(initDCmotorsPWM@PWMperiod+1)^0,c
   282   01FC40  0E63               	movlw	99
   283   01FC42  6E01               	movwf	initDCmotorsPWM@PWMperiod^0,c
   284   01FC44  ECD6  F0FD         	call	_initDCmotorsPWM	;wreg free
   285   01FC48                     
   286                           ;../main.c: 17:     buggyLEDs_init();
   287   01FC48  EC59  F0FD         	call	_buggyLEDs_init	;wreg free
   288   01FC4C                     
   289                           ;../main.c: 18:     motor_init(&motorL,&motorR);
   290   01FC4C  0E2D               	movlw	low _motorL
   291   01FC4E  6E01               	movwf	motor_init@mL^0,c
   292   01FC50  0E00               	movlw	high _motorL
   293   01FC52  6E02               	movwf	(motor_init@mL+1)^0,c
   294   01FC54  0E24               	movlw	low _motorR
   295   01FC56  6E03               	movwf	motor_init@mR^0,c
   296   01FC58  0E00               	movlw	high _motorR
   297   01FC5A  6E04               	movwf	(motor_init@mR+1)^0,c
   298   01FC5C  EC77  F0FD         	call	_motor_init	;wreg free
   299   01FC60                     
   300                           ;../main.c: 34:     for (int i = 0; i<=3; i += 1){
   301   01FC60  0E00               	movlw	0
   302   01FC62  6E23               	movwf	(main@i+1)^0,c
   303   01FC64  0E00               	movlw	0
   304   01FC66  6E22               	movwf	main@i^0,c
   305   01FC68                     l1371:
   306                           
   307                           ;../main.c: 35:     _delay((unsigned long)((1000)*(64000000/4000.0)));
   308   01FC68  0E52               	movlw	82
   309   01FC6A  6E21               	movwf	(??_main+1)^0,c
   310   01FC6C  0E2B               	movlw	43
   311   01FC6E  6E20               	movwf	??_main^0,c
   312   01FC70  0E00               	movlw	0
   313   01FC72                     u397:
   314   01FC72  2EE8               	decfsz	wreg,f,c
   315   01FC74  D7FE               	bra	u397
   316   01FC76  2E20               	decfsz	??_main^0,f,c
   317   01FC78  D7FC               	bra	u397
   318   01FC7A  2E21               	decfsz	(??_main+1)^0,f,c
   319   01FC7C  D7FA               	bra	u397
   320   01FC7E  D000               	nop2	
   321   01FC80                     
   322                           ;../main.c: 36:     right_45(&motorL,&motorR);
   323   01FC80  0E2D               	movlw	low _motorL
   324   01FC82  6E1A               	movwf	right_45@mL^0,c
   325   01FC84  0E00               	movlw	high _motorL
   326   01FC86  6E1B               	movwf	(right_45@mL+1)^0,c
   327   01FC88  0E24               	movlw	low _motorR
   328   01FC8A  6E1C               	movwf	right_45@mR^0,c
   329   01FC8C  0E00               	movlw	high _motorR
   330   01FC8E  6E1D               	movwf	(right_45@mR+1)^0,c
   331   01FC90  ECCA  F0FE         	call	_right_45	;wreg free
   332   01FC94                     
   333                           ;../main.c: 37:     stop(&motorL,&motorR);
   334   01FC94  0E2D               	movlw	low _motorL
   335   01FC96  6E14               	movwf	stop@mL^0,c
   336   01FC98  0E00               	movlw	high _motorL
   337   01FC9A  6E15               	movwf	(stop@mL+1)^0,c
   338   01FC9C  0E24               	movlw	low _motorR
   339   01FC9E  6E16               	movwf	stop@mR^0,c
   340   01FCA0  0E00               	movlw	high _motorR
   341   01FCA2  6E17               	movwf	(stop@mR+1)^0,c
   342   01FCA4  EC72  F0FE         	call	_stop	;wreg free
   343                           
   344                           ;../main.c: 38:     _delay((unsigned long)((1000)*(64000000/4000.0)));
   345   01FCA8  0E52               	movlw	82
   346   01FCAA  6E21               	movwf	(??_main+1)^0,c
   347   01FCAC  0E2B               	movlw	43
   348   01FCAE  6E20               	movwf	??_main^0,c
   349   01FCB0  0E00               	movlw	0
   350   01FCB2                     u407:
   351   01FCB2  2EE8               	decfsz	wreg,f,c
   352   01FCB4  D7FE               	bra	u407
   353   01FCB6  2E20               	decfsz	??_main^0,f,c
   354   01FCB8  D7FC               	bra	u407
   355   01FCBA  2E21               	decfsz	(??_main+1)^0,f,c
   356   01FCBC  D7FA               	bra	u407
   357   01FCBE  D000               	nop2	
   358   01FCC0                     
   359                           ;../main.c: 39:     }
   360   01FCC0  4A22               	infsnz	main@i^0,f,c
   361   01FCC2  2A23               	incf	(main@i+1)^0,f,c
   362   01FCC4  BE23               	btfsc	(main@i+1)^0,7,c
   363   01FCC6  EF6E  F0FE         	goto	u381
   364   01FCCA  5023               	movf	(main@i+1)^0,w,c
   365   01FCCC  E109               	bnz	u380
   366   01FCCE  0E04               	movlw	4
   367   01FCD0  5C22               	subwf	main@i^0,w,c
   368   01FCD2  A0D8               	btfss	status,0,c
   369   01FCD4  EF6E  F0FE         	goto	u381
   370   01FCD8  EF70  F0FE         	goto	u380
   371   01FCDC                     u381:
   372   01FCDC  EF34  F0FE         	goto	l1371
   373   01FCE0                     u380:
   374   01FCE0  EF00  F000         	goto	start
   375   01FCE4                     __end_of_main:
   376                           	callstack 0
   377                           
   378 ;; *************** function _right_45 *****************
   379 ;; Defined at:
   380 ;;		line 210 in file "../dc_motor.c"
   381 ;; Parameters:    Size  Location     Type
   382 ;;  mL              2   25[COMRAM] PTR struct DC_motor
   383 ;;		 -> motorL(9), 
   384 ;;  mR              2   27[COMRAM] PTR struct DC_motor
   385 ;;		 -> motorR(9), 
   386 ;; Auto vars:     Size  Location     Type
   387 ;;		None
   388 ;; Return value:  Size  Location     Type
   389 ;;                  1    wreg      void 
   390 ;; Registers used:
   391 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   392 ;; Tracked objects:
   393 ;;		On entry : 0/0
   394 ;;		On exit  : 0/0
   395 ;;		Unchanged: 0/0
   396 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   397 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   398 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   399 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   400 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   401 ;;Total ram usage:        6 bytes
   402 ;; Hardware stack levels used: 1
   403 ;; Hardware stack levels required when called: 3
   404 ;; This function calls:
   405 ;;		_setMotorPWM
   406 ;;		_stop
   407 ;; This function is called by:
   408 ;;		_main
   409 ;; This function uses a non-reentrant model
   410 ;;
   411                           
   412                           	psect	text1
   413   01FD94                     __ptext1:
   414                           	callstack 0
   415   01FD94                     _right_45:
   416                           	callstack 27
   417   01FD94                     
   418                           ;../dc_motor.c: 210: void right_45(DC_motor *mL, DC_motor *mR);../dc_motor.c: 211: {;../
      +                          dc_motor.c: 212:     mL-> direction = 1;
   419   01FD94  EE20 F001          	lfsr	2,1
   420   01FD98  501A               	movf	right_45@mL^0,w,c
   421   01FD9A  26D9               	addwf	fsr2l,f,c
   422   01FD9C  501B               	movf	(right_45@mL+1)^0,w,c
   423   01FD9E  22DA               	addwfc	fsr2h,f,c
   424   01FDA0  0E01               	movlw	1
   425   01FDA2  6EDF               	movwf	indf2,c
   426                           
   427                           ;../dc_motor.c: 213:     mR-> direction = 0;
   428   01FDA4  EE20 F001          	lfsr	2,1
   429   01FDA8  501C               	movf	right_45@mR^0,w,c
   430   01FDAA  26D9               	addwf	fsr2l,f,c
   431   01FDAC  501D               	movf	(right_45@mR+1)^0,w,c
   432   01FDAE  22DA               	addwfc	fsr2h,f,c
   433   01FDB0  0E00               	movlw	0
   434   01FDB2  6EDF               	movwf	indf2,c
   435                           
   436                           ;../dc_motor.c: 214:     while ((mL->power <= 30) || (mR->power <= 30)){
   437   01FDB4  EF10  F0FF         	goto	l1293
   438   01FDB8                     l1279:
   439                           
   440                           ;../dc_motor.c: 215:         if (mL->power <= 30){mL->power += 10;}
   441   01FDB8  C01A  FFD9         	movff	right_45@mL,fsr2l
   442   01FDBC  C01B  FFDA         	movff	right_45@mL+1,fsr2h
   443   01FDC0  0E1F               	movlw	31
   444   01FDC2  60DF               	cpfslt	indf2,c
   445   01FDC4  EFE6  F0FE         	goto	u281
   446   01FDC8  EFE8  F0FE         	goto	u280
   447   01FDCC                     u281:
   448   01FDCC  EFEE  F0FE         	goto	l1283
   449   01FDD0                     u280:
   450   01FDD0  C01A  FFD9         	movff	right_45@mL,fsr2l
   451   01FDD4  C01B  FFDA         	movff	right_45@mL+1,fsr2h
   452   01FDD8  0E0A               	movlw	10
   453   01FDDA  26DF               	addwf	indf2,f,c
   454   01FDDC                     l1283:
   455                           
   456                           ;../dc_motor.c: 216:         if (mR->power <= 30){mR->power += 10;}
   457   01FDDC  C01C  FFD9         	movff	right_45@mR,fsr2l
   458   01FDE0  C01D  FFDA         	movff	right_45@mR+1,fsr2h
   459   01FDE4  0E1F               	movlw	31
   460   01FDE6  60DF               	cpfslt	indf2,c
   461   01FDE8  EFF8  F0FE         	goto	u291
   462   01FDEC  EFFA  F0FE         	goto	u290
   463   01FDF0                     u291:
   464   01FDF0  EF00  F0FF         	goto	l1287
   465   01FDF4                     u290:
   466   01FDF4  C01C  FFD9         	movff	right_45@mR,fsr2l
   467   01FDF8  C01D  FFDA         	movff	right_45@mR+1,fsr2h
   468   01FDFC  0E0A               	movlw	10
   469   01FDFE  26DF               	addwf	indf2,f,c
   470   01FE00                     l1287:
   471                           
   472                           ;../dc_motor.c: 217:         setMotorPWM(mL);
   473   01FE00  C01A  F00E         	movff	right_45@mL,setMotorPWM@m
   474   01FE04  C01B  F00F         	movff	right_45@mL+1,setMotorPWM@m+1
   475   01FE08  EC4A  F0FF         	call	_setMotorPWM	;wreg free
   476   01FE0C                     
   477                           ;../dc_motor.c: 218:         setMotorPWM(mR);
   478   01FE0C  C01C  F00E         	movff	right_45@mR,setMotorPWM@m
   479   01FE10  C01D  F00F         	movff	right_45@mR+1,setMotorPWM@m+1
   480   01FE14  EC4A  F0FF         	call	_setMotorPWM	;wreg free
   481   01FE18                     
   482                           ;../dc_motor.c: 219:         _delay((unsigned long)((50)*(64000000/4000000.0)));
   483   01FE18  0EA0               	movlw	160
   484   01FE1A                     u417:
   485   01FE1A  D000               	nop2	
   486   01FE1C  2EE8               	decfsz	wreg,f,c
   487   01FE1E  D7FD               	bra	u417
   488   01FE20                     l1293:
   489                           
   490                           ;../dc_motor.c: 214:     while ((mL->power <= 30) || (mR->power <= 30)){
   491   01FE20  C01A  FFD9         	movff	right_45@mL,fsr2l
   492   01FE24  C01B  FFDA         	movff	right_45@mL+1,fsr2h
   493   01FE28  0E1E               	movlw	30
   494   01FE2A  64DF               	cpfsgt	indf2,c
   495   01FE2C  EF1A  F0FF         	goto	u301
   496   01FE30  EF1C  F0FF         	goto	u300
   497   01FE34                     u301:
   498   01FE34  EFDC  F0FE         	goto	l1279
   499   01FE38                     u300:
   500   01FE38  C01C  FFD9         	movff	right_45@mR,fsr2l
   501   01FE3C  C01D  FFDA         	movff	right_45@mR+1,fsr2h
   502   01FE40  0E1E               	movlw	30
   503   01FE42  64DF               	cpfsgt	indf2,c
   504   01FE44  EF26  F0FF         	goto	u311
   505   01FE48  EF28  F0FF         	goto	u310
   506   01FE4C                     u311:
   507   01FE4C  EFDC  F0FE         	goto	l1279
   508   01FE50                     u310:
   509   01FE50                     
   510                           ;../dc_motor.c: 221:     _delay((unsigned long)((215)*(64000000/4000.0)));
   511   01FE50  0E12               	movlw	18
   512   01FE52  6E1F               	movwf	(??_right_45+1)^0,c
   513   01FE54  0E74               	movlw	116
   514   01FE56  6E1E               	movwf	??_right_45^0,c
   515   01FE58  0E7A               	movlw	122
   516   01FE5A                     u427:
   517   01FE5A  2EE8               	decfsz	wreg,f,c
   518   01FE5C  D7FE               	bra	u427
   519   01FE5E  2E1E               	decfsz	??_right_45^0,f,c
   520   01FE60  D7FC               	bra	u427
   521   01FE62  2E1F               	decfsz	(??_right_45+1)^0,f,c
   522   01FE64  D7FA               	bra	u427
   523   01FE66  D000               	nop2	
   524   01FE68                     
   525                           ;../dc_motor.c: 222:     stop(mL,mR);
   526   01FE68  C01A  F014         	movff	right_45@mL,stop@mL
   527   01FE6C  C01B  F015         	movff	right_45@mL+1,stop@mL+1
   528   01FE70  C01C  F016         	movff	right_45@mR,stop@mR
   529   01FE74  C01D  F017         	movff	right_45@mR+1,stop@mR+1
   530   01FE78  EC72  F0FE         	call	_stop	;wreg free
   531   01FE7C                     
   532                           ;../dc_motor.c: 223:     _delay((unsigned long)((150)*(64000000/4000.0)));
   533   01FE7C  0E0D               	movlw	13
   534   01FE7E  6E1F               	movwf	(??_right_45+1)^0,c
   535   01FE80  0E2D               	movlw	45
   536   01FE82  6E1E               	movwf	??_right_45^0,c
   537   01FE84  0ED8               	movlw	216
   538   01FE86                     u437:
   539   01FE86  2EE8               	decfsz	wreg,f,c
   540   01FE88  D7FE               	bra	u437
   541   01FE8A  2E1E               	decfsz	??_right_45^0,f,c
   542   01FE8C  D7FC               	bra	u437
   543   01FE8E  2E1F               	decfsz	(??_right_45+1)^0,f,c
   544   01FE90  D7FA               	bra	u437
   545   01FE92  0012               	return		;funcret
   546   01FE94                     __end_of_right_45:
   547                           	callstack 0
   548                           
   549 ;; *************** function _stop *****************
   550 ;; Defined at:
   551 ;;		line 167 in file "../dc_motor.c"
   552 ;; Parameters:    Size  Location     Type
   553 ;;  mL              2   19[COMRAM] PTR struct DC_motor
   554 ;;		 -> motorL(9), 
   555 ;;  mR              2   21[COMRAM] PTR struct DC_motor
   556 ;;		 -> motorR(9), 
   557 ;; Auto vars:     Size  Location     Type
   558 ;;  i               2   23[COMRAM] int 
   559 ;; Return value:  Size  Location     Type
   560 ;;                  1    wreg      void 
   561 ;; Registers used:
   562 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   563 ;; Tracked objects:
   564 ;;		On entry : 0/0
   565 ;;		On exit  : 0/0
   566 ;;		Unchanged: 0/0
   567 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   568 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   569 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   570 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   571 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   572 ;;Total ram usage:        6 bytes
   573 ;; Hardware stack levels used: 1
   574 ;; Hardware stack levels required when called: 2
   575 ;; This function calls:
   576 ;;		_setMotorPWM
   577 ;; This function is called by:
   578 ;;		_right_45
   579 ;;		_main
   580 ;;		_forward
   581 ;;		_reverse
   582 ;;		_left_45
   583 ;; This function uses a non-reentrant model
   584 ;;
   585                           
   586                           	psect	text2
   587   01FCE4                     __ptext2:
   588                           	callstack 0
   589   01FCE4                     _stop:
   590                           	callstack 28
   591   01FCE4                     
   592                           ;../dc_motor.c: 167: void stop(DC_motor *mL, DC_motor *mR);../dc_motor.c: 168: {;../dc_m
      +                          otor.c: 169:     mL->brakemode = 1;
   593   01FCE4  EE20 F002          	lfsr	2,2
   594   01FCE8  5014               	movf	stop@mL^0,w,c
   595   01FCEA  26D9               	addwf	fsr2l,f,c
   596   01FCEC  5015               	movf	(stop@mL+1)^0,w,c
   597   01FCEE  22DA               	addwfc	fsr2h,f,c
   598   01FCF0  0E01               	movlw	1
   599   01FCF2  6EDF               	movwf	indf2,c
   600                           
   601                           ;../dc_motor.c: 170:     mR->brakemode = 1;
   602   01FCF4  EE20 F002          	lfsr	2,2
   603   01FCF8  5016               	movf	stop@mR^0,w,c
   604   01FCFA  26D9               	addwf	fsr2l,f,c
   605   01FCFC  5017               	movf	(stop@mR+1)^0,w,c
   606   01FCFE  22DA               	addwfc	fsr2h,f,c
   607   01FD00  0E01               	movlw	1
   608   01FD02  6EDF               	movwf	indf2,c
   609   01FD04                     
   610                           ;../dc_motor.c: 171:     LATDbits.LATD4 = 1;
   611   01FD04  887C               	bsf	124,4,c	;volatile
   612   01FD06                     
   613                           ;../dc_motor.c: 173:     for (int i = 70; i >= 0; i=i-10) {
   614   01FD06  0E00               	movlw	0
   615   01FD08  6E19               	movwf	(stop@i+1)^0,c
   616   01FD0A  0E46               	movlw	70
   617   01FD0C  6E18               	movwf	stop@i^0,c
   618   01FD0E                     l1223:
   619                           
   620                           ;../dc_motor.c: 174:         mL -> power = i;
   621   01FD0E  C014  FFD9         	movff	stop@mL,fsr2l
   622   01FD12  C015  FFDA         	movff	stop@mL+1,fsr2h
   623   01FD16  C018  FFDF         	movff	stop@i,indf2
   624                           
   625                           ;../dc_motor.c: 175:         mR -> power = i;
   626   01FD1A  C016  FFD9         	movff	stop@mR,fsr2l
   627   01FD1E  C017  FFDA         	movff	stop@mR+1,fsr2h
   628   01FD22  C018  FFDF         	movff	stop@i,indf2
   629   01FD26                     
   630                           ;../dc_motor.c: 176:         setMotorPWM(mL);
   631   01FD26  C014  F00E         	movff	stop@mL,setMotorPWM@m
   632   01FD2A  C015  F00F         	movff	stop@mL+1,setMotorPWM@m+1
   633   01FD2E  EC4A  F0FF         	call	_setMotorPWM	;wreg free
   634   01FD32                     
   635                           ;../dc_motor.c: 177:         setMotorPWM(mR);
   636   01FD32  C016  F00E         	movff	stop@mR,setMotorPWM@m
   637   01FD36  C017  F00F         	movff	stop@mR+1,setMotorPWM@m+1
   638   01FD3A  EC4A  F0FF         	call	_setMotorPWM	;wreg free
   639   01FD3E                     
   640                           ;../dc_motor.c: 178:         _delay((unsigned long)((20)*(64000000/4000000.0)));
   641   01FD3E  0E6A               	movlw	106
   642   01FD40                     u447:
   643   01FD40  2EE8               	decfsz	wreg,f,c
   644   01FD42  D7FE               	bra	u447
   645   01FD44  D000               	nop2	
   646   01FD46                     
   647                           ;../dc_motor.c: 179:     }
   648   01FD46  0EF6               	movlw	246
   649   01FD48  2418               	addwf	stop@i^0,w,c
   650   01FD4A  6E18               	movwf	stop@i^0,c
   651   01FD4C  0EFF               	movlw	255
   652   01FD4E  2019               	addwfc	(stop@i+1)^0,w,c
   653   01FD50  6E19               	movwf	(stop@i+1)^0,c
   654   01FD52  BE19               	btfsc	(stop@i+1)^0,7,c
   655   01FD54  EFB0  F0FE         	goto	u270
   656   01FD58  EFAE  F0FE         	goto	u271
   657   01FD5C                     u271:
   658   01FD5C  EF87  F0FE         	goto	l1223
   659   01FD60                     u270:
   660   01FD60                     
   661                           ;../dc_motor.c: 181:     mL->power = 0;
   662   01FD60  C014  FFD9         	movff	stop@mL,fsr2l
   663   01FD64  C015  FFDA         	movff	stop@mL+1,fsr2h
   664   01FD68  0E00               	movlw	0
   665   01FD6A  6EDF               	movwf	indf2,c
   666                           
   667                           ;../dc_motor.c: 182:     mR->power = 0;
   668   01FD6C  C016  FFD9         	movff	stop@mR,fsr2l
   669   01FD70  C017  FFDA         	movff	stop@mR+1,fsr2h
   670   01FD74  0E00               	movlw	0
   671   01FD76  6EDF               	movwf	indf2,c
   672   01FD78                     
   673                           ;../dc_motor.c: 183:     setMotorPWM(mL);
   674   01FD78  C014  F00E         	movff	stop@mL,setMotorPWM@m
   675   01FD7C  C015  F00F         	movff	stop@mL+1,setMotorPWM@m+1
   676   01FD80  EC4A  F0FF         	call	_setMotorPWM	;wreg free
   677   01FD84                     
   678                           ;../dc_motor.c: 184:     setMotorPWM(mR);
   679   01FD84  C016  F00E         	movff	stop@mR,setMotorPWM@m
   680   01FD88  C017  F00F         	movff	stop@mR+1,setMotorPWM@m+1
   681   01FD8C  EC4A  F0FF         	call	_setMotorPWM	;wreg free
   682   01FD90                     
   683                           ;../dc_motor.c: 185:     LATDbits.LATD4 = 0;
   684   01FD90  987C               	bcf	124,4,c	;volatile
   685   01FD92  0012               	return		;funcret
   686   01FD94                     __end_of_stop:
   687                           	callstack 0
   688                           
   689 ;; *************** function _setMotorPWM *****************
   690 ;; Defined at:
   691 ;;		line 72 in file "../dc_motor.c"
   692 ;; Parameters:    Size  Location     Type
   693 ;;  m               2   13[COMRAM] PTR struct DC_motor
   694 ;;		 -> motorR(9), motorL(9), 
   695 ;; Auto vars:     Size  Location     Type
   696 ;;  negDuty         1   18[COMRAM] unsigned char 
   697 ;;  posDuty         1   17[COMRAM] unsigned char 
   698 ;; Return value:  Size  Location     Type
   699 ;;                  1    wreg      void 
   700 ;; Registers used:
   701 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   702 ;; Tracked objects:
   703 ;;		On entry : 0/0
   704 ;;		On exit  : 0/0
   705 ;;		Unchanged: 0/0
   706 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   707 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   708 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   709 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   710 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   711 ;;Total ram usage:        6 bytes
   712 ;; Hardware stack levels used: 1
   713 ;; Hardware stack levels required when called: 1
   714 ;; This function calls:
   715 ;;		___lwdiv
   716 ;;		___wmul
   717 ;; This function is called by:
   718 ;;		_stop
   719 ;;		_right_45
   720 ;;		_forward
   721 ;;		_reverse
   722 ;;		_left_45
   723 ;; This function uses a non-reentrant model
   724 ;;
   725                           
   726                           	psect	text3
   727   01FE94                     __ptext3:
   728                           	callstack 0
   729   01FE94                     _setMotorPWM:
   730                           	callstack 28
   731   01FE94                     
   732                           ;../dc_motor.c: 72: void setMotorPWM(DC_motor *m);../dc_motor.c: 73: {;../dc_motor.c: 74
      +                          :     unsigned char posDuty, negDuty;;../dc_motor.c: 76:     if(m->brakemode) {
   733   01FE94  EE20 F002          	lfsr	2,2
   734   01FE98  500E               	movf	setMotorPWM@m^0,w,c
   735   01FE9A  26D9               	addwf	fsr2l,f,c
   736   01FE9C  500F               	movf	(setMotorPWM@m+1)^0,w,c
   737   01FE9E  22DA               	addwfc	fsr2h,f,c
   738   01FEA0  50DF               	movf	indf2,w,c
   739   01FEA2  B4D8               	btfsc	status,2,c
   740   01FEA4  EF56  F0FF         	goto	u251
   741   01FEA8  EF58  F0FF         	goto	u250
   742   01FEAC                     u251:
   743   01FEAC  EF8C  F0FF         	goto	l1203
   744   01FEB0                     u250:
   745   01FEB0                     
   746                           ;../dc_motor.c: 77:         posDuty = m->PWMperiod - ((unsigned int)(m->power)*(m->PWMpe
      +                          riod))/100;
   747   01FEB0  C00E  FFD9         	movff	setMotorPWM@m,fsr2l
   748   01FEB4  C00F  FFDA         	movff	setMotorPWM@m+1,fsr2h
   749   01FEB8  50DF               	movf	indf2,w,c
   750   01FEBA  6E10               	movwf	??_setMotorPWM^0,c
   751   01FEBC  5010               	movf	??_setMotorPWM^0,w,c
   752   01FEBE  6E01               	movwf	___wmul@multiplier^0,c
   753   01FEC0  6A02               	clrf	(___wmul@multiplier+1)^0,c
   754   01FEC2  EE20 F003          	lfsr	2,3
   755   01FEC6  500E               	movf	setMotorPWM@m^0,w,c
   756   01FEC8  26D9               	addwf	fsr2l,f,c
   757   01FECA  500F               	movf	(setMotorPWM@m+1)^0,w,c
   758   01FECC  22DA               	addwfc	fsr2h,f,c
   759   01FECE  CFDE F003          	movff	postinc2,___wmul@multiplicand
   760   01FED2  CFDD F004          	movff	postdec2,___wmul@multiplicand+1
   761   01FED6  EC64  F0FD         	call	___wmul	;wreg free
   762   01FEDA  C001  F007         	movff	?___wmul,___lwdiv@dividend
   763   01FEDE  C002  F008         	movff	?___wmul+1,___lwdiv@dividend+1
   764   01FEE2  0E00               	movlw	0
   765   01FEE4  6E0A               	movwf	(___lwdiv@divisor+1)^0,c
   766   01FEE6  0E64               	movlw	100
   767   01FEE8  6E09               	movwf	___lwdiv@divisor^0,c
   768   01FEEA  EC9C  F0FD         	call	___lwdiv	;wreg free
   769   01FEEE  EE20 F003          	lfsr	2,3
   770   01FEF2  500E               	movf	setMotorPWM@m^0,w,c
   771   01FEF4  26D9               	addwf	fsr2l,f,c
   772   01FEF6  500F               	movf	(setMotorPWM@m+1)^0,w,c
   773   01FEF8  22DA               	addwfc	fsr2h,f,c
   774   01FEFA  50DF               	movf	indf2,w,c
   775   01FEFC  6E11               	movwf	(??_setMotorPWM+1)^0,c
   776   01FEFE  5007               	movf	?___lwdiv^0,w,c
   777   01FF00  5C11               	subwf	(??_setMotorPWM+1)^0,w,c
   778   01FF02  6E12               	movwf	setMotorPWM@posDuty^0,c
   779   01FF04                     
   780                           ;../dc_motor.c: 78:         negDuty = m->PWMperiod;
   781   01FF04  EE20 F003          	lfsr	2,3
   782   01FF08  500E               	movf	setMotorPWM@m^0,w,c
   783   01FF0A  26D9               	addwf	fsr2l,f,c
   784   01FF0C  500F               	movf	(setMotorPWM@m+1)^0,w,c
   785   01FF0E  22DA               	addwfc	fsr2h,f,c
   786   01FF10  50DF               	movf	indf2,w,c
   787   01FF12  6E13               	movwf	setMotorPWM@negDuty^0,c
   788                           
   789                           ;../dc_motor.c: 79:     }
   790   01FF14  EFAF  F0FF         	goto	l1207
   791   01FF18                     l1203:
   792                           
   793                           ;../dc_motor.c: 81:         posDuty=0;
   794   01FF18  0E00               	movlw	0
   795   01FF1A  6E12               	movwf	setMotorPWM@posDuty^0,c
   796   01FF1C                     
   797                           ;../dc_motor.c: 82:   negDuty=((unsigned int)(m->power)*(m->PWMperiod))/100;
   798   01FF1C  C00E  FFD9         	movff	setMotorPWM@m,fsr2l
   799   01FF20  C00F  FFDA         	movff	setMotorPWM@m+1,fsr2h
   800   01FF24  50DF               	movf	indf2,w,c
   801   01FF26  6E10               	movwf	??_setMotorPWM^0,c
   802   01FF28  5010               	movf	??_setMotorPWM^0,w,c
   803   01FF2A  6E01               	movwf	___wmul@multiplier^0,c
   804   01FF2C  6A02               	clrf	(___wmul@multiplier+1)^0,c
   805   01FF2E  EE20 F003          	lfsr	2,3
   806   01FF32  500E               	movf	setMotorPWM@m^0,w,c
   807   01FF34  26D9               	addwf	fsr2l,f,c
   808   01FF36  500F               	movf	(setMotorPWM@m+1)^0,w,c
   809   01FF38  22DA               	addwfc	fsr2h,f,c
   810   01FF3A  CFDE F003          	movff	postinc2,___wmul@multiplicand
   811   01FF3E  CFDD F004          	movff	postdec2,___wmul@multiplicand+1
   812   01FF42  EC64  F0FD         	call	___wmul	;wreg free
   813   01FF46  C001  F007         	movff	?___wmul,___lwdiv@dividend
   814   01FF4A  C002  F008         	movff	?___wmul+1,___lwdiv@dividend+1
   815   01FF4E  0E00               	movlw	0
   816   01FF50  6E0A               	movwf	(___lwdiv@divisor+1)^0,c
   817   01FF52  0E64               	movlw	100
   818   01FF54  6E09               	movwf	___lwdiv@divisor^0,c
   819   01FF56  EC9C  F0FD         	call	___lwdiv	;wreg free
   820   01FF5A  5007               	movf	?___lwdiv^0,w,c
   821   01FF5C  6E13               	movwf	setMotorPWM@negDuty^0,c
   822   01FF5E                     l1207:
   823                           
   824                           ;../dc_motor.c: 85:     if (m->direction) {
   825   01FF5E  EE20 F001          	lfsr	2,1
   826   01FF62  500E               	movf	setMotorPWM@m^0,w,c
   827   01FF64  26D9               	addwf	fsr2l,f,c
   828   01FF66  500F               	movf	(setMotorPWM@m+1)^0,w,c
   829   01FF68  22DA               	addwfc	fsr2h,f,c
   830   01FF6A  50DF               	movf	indf2,w,c
   831   01FF6C  B4D8               	btfsc	status,2,c
   832   01FF6E  EFBB  F0FF         	goto	u261
   833   01FF72  EFBD  F0FF         	goto	u260
   834   01FF76                     u261:
   835   01FF76  EFDF  F0FF         	goto	l1211
   836   01FF7A                     u260:
   837   01FF7A                     
   838                           ;../dc_motor.c: 86:         *(m->posDutyHighByte)= posDuty;
   839   01FF7A  EE20 F005          	lfsr	2,5
   840   01FF7E  500E               	movf	setMotorPWM@m^0,w,c
   841   01FF80  26D9               	addwf	fsr2l,f,c
   842   01FF82  500F               	movf	(setMotorPWM@m+1)^0,w,c
   843   01FF84  22DA               	addwfc	fsr2h,f,c
   844   01FF86  CFDE F010          	movff	postinc2,??_setMotorPWM
   845   01FF8A  CFDD F011          	movff	postdec2,??_setMotorPWM+1
   846   01FF8E  C010  FFD9         	movff	??_setMotorPWM,fsr2l
   847   01FF92  C011  FFDA         	movff	??_setMotorPWM+1,fsr2h
   848   01FF96  C012  FFDF         	movff	setMotorPWM@posDuty,indf2
   849                           
   850                           ;../dc_motor.c: 87:         *(m->negDutyHighByte)= negDuty;
   851   01FF9A  EE20 F007          	lfsr	2,7
   852   01FF9E  500E               	movf	setMotorPWM@m^0,w,c
   853   01FFA0  26D9               	addwf	fsr2l,f,c
   854   01FFA2  500F               	movf	(setMotorPWM@m+1)^0,w,c
   855   01FFA4  22DA               	addwfc	fsr2h,f,c
   856   01FFA6  CFDE F010          	movff	postinc2,??_setMotorPWM
   857   01FFAA  CFDD F011          	movff	postdec2,??_setMotorPWM+1
   858   01FFAE  C010  FFD9         	movff	??_setMotorPWM,fsr2l
   859   01FFB2  C011  FFDA         	movff	??_setMotorPWM+1,fsr2h
   860   01FFB6  C013  FFDF         	movff	setMotorPWM@negDuty,indf2
   861                           
   862                           ;../dc_motor.c: 88:     } else {
   863   01FFBA  EFFF  F0FF         	goto	l149
   864   01FFBE                     l1211:
   865                           
   866                           ;../dc_motor.c: 89:         *(m->posDutyHighByte)= negDuty;
   867   01FFBE  EE20 F005          	lfsr	2,5
   868   01FFC2  500E               	movf	setMotorPWM@m^0,w,c
   869   01FFC4  26D9               	addwf	fsr2l,f,c
   870   01FFC6  500F               	movf	(setMotorPWM@m+1)^0,w,c
   871   01FFC8  22DA               	addwfc	fsr2h,f,c
   872   01FFCA  CFDE F010          	movff	postinc2,??_setMotorPWM
   873   01FFCE  CFDD F011          	movff	postdec2,??_setMotorPWM+1
   874   01FFD2  C010  FFD9         	movff	??_setMotorPWM,fsr2l
   875   01FFD6  C011  FFDA         	movff	??_setMotorPWM+1,fsr2h
   876   01FFDA  C013  FFDF         	movff	setMotorPWM@negDuty,indf2
   877                           
   878                           ;../dc_motor.c: 90:         *(m->negDutyHighByte)= posDuty;
   879   01FFDE  EE20 F007          	lfsr	2,7
   880   01FFE2  500E               	movf	setMotorPWM@m^0,w,c
   881   01FFE4  26D9               	addwf	fsr2l,f,c
   882   01FFE6  500F               	movf	(setMotorPWM@m+1)^0,w,c
   883   01FFE8  22DA               	addwfc	fsr2h,f,c
   884   01FFEA  CFDE F010          	movff	postinc2,??_setMotorPWM
   885   01FFEE  CFDD F011          	movff	postdec2,??_setMotorPWM+1
   886   01FFF2  C010  FFD9         	movff	??_setMotorPWM,fsr2l
   887   01FFF6  C011  FFDA         	movff	??_setMotorPWM+1,fsr2h
   888   01FFFA  C012  FFDF         	movff	setMotorPWM@posDuty,indf2
   889   01FFFE                     l149:
   890   01FFFE  0012               	return		;funcret
   891   020000                     __end_of_setMotorPWM:
   892                           	callstack 0
   893                           
   894 ;; *************** function ___wmul *****************
   895 ;; Defined at:
   896 ;;		line 15 in file "D:\ECM\pic\sources\c99\common\Umul16.c"
   897 ;; Parameters:    Size  Location     Type
   898 ;;  multiplier      2    0[COMRAM] unsigned int 
   899 ;;  multiplicand    2    2[COMRAM] unsigned int 
   900 ;; Auto vars:     Size  Location     Type
   901 ;;  product         2    4[COMRAM] unsigned int 
   902 ;; Return value:  Size  Location     Type
   903 ;;                  2    0[COMRAM] unsigned int 
   904 ;; Registers used:
   905 ;;		wreg, status,2, status,0, prodl, prodh
   906 ;; Tracked objects:
   907 ;;		On entry : 0/0
   908 ;;		On exit  : 0/0
   909 ;;		Unchanged: 0/0
   910 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   911 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   912 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   913 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   914 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   915 ;;Total ram usage:        6 bytes
   916 ;; Hardware stack levels used: 1
   917 ;; This function calls:
   918 ;;		Nothing
   919 ;; This function is called by:
   920 ;;		_setMotorPWM
   921 ;; This function uses a non-reentrant model
   922 ;;
   923                           
   924                           	psect	text4
   925   01FAC8                     __ptext4:
   926                           	callstack 0
   927   01FAC8                     ___wmul:
   928                           	callstack 28
   929   01FAC8  5001               	movf	___wmul@multiplier^0,w,c
   930   01FACA  0203               	mulwf	___wmul@multiplicand^0,c
   931   01FACC  CFF3 F005          	movff	prodl,___wmul@product
   932   01FAD0  CFF4 F006          	movff	prodh,___wmul@product+1
   933   01FAD4  5001               	movf	___wmul@multiplier^0,w,c
   934   01FAD6  0204               	mulwf	(___wmul@multiplicand+1)^0,c
   935   01FAD8  50F3               	movf	243,w,c
   936   01FADA  2606               	addwf	(___wmul@product+1)^0,f,c
   937   01FADC  5002               	movf	(___wmul@multiplier+1)^0,w,c
   938   01FADE  0203               	mulwf	___wmul@multiplicand^0,c
   939   01FAE0  50F3               	movf	243,w,c
   940   01FAE2  2606               	addwf	(___wmul@product+1)^0,f,c
   941   01FAE4  C005  F001         	movff	___wmul@product,?___wmul
   942   01FAE8  C006  F002         	movff	___wmul@product+1,?___wmul+1
   943   01FAEC  0012               	return		;funcret
   944   01FAEE                     __end_of___wmul:
   945                           	callstack 0
   946                           
   947 ;; *************** function ___lwdiv *****************
   948 ;; Defined at:
   949 ;;		line 7 in file "D:\ECM\pic\sources\c99\common\lwdiv.c"
   950 ;; Parameters:    Size  Location     Type
   951 ;;  dividend        2    6[COMRAM] unsigned int 
   952 ;;  divisor         2    8[COMRAM] unsigned int 
   953 ;; Auto vars:     Size  Location     Type
   954 ;;  quotient        2   10[COMRAM] unsigned int 
   955 ;;  counter         1   12[COMRAM] unsigned char 
   956 ;; Return value:  Size  Location     Type
   957 ;;                  2    6[COMRAM] unsigned int 
   958 ;; Registers used:
   959 ;;		wreg, status,2, status,0
   960 ;; Tracked objects:
   961 ;;		On entry : 0/0
   962 ;;		On exit  : 0/0
   963 ;;		Unchanged: 0/0
   964 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   965 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   966 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   967 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   968 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   969 ;;Total ram usage:        7 bytes
   970 ;; Hardware stack levels used: 1
   971 ;; This function calls:
   972 ;;		Nothing
   973 ;; This function is called by:
   974 ;;		_setMotorPWM
   975 ;; This function uses a non-reentrant model
   976 ;;
   977                           
   978                           	psect	text5
   979   01FB38                     __ptext5:
   980                           	callstack 0
   981   01FB38                     ___lwdiv:
   982                           	callstack 28
   983   01FB38  0E00               	movlw	0
   984   01FB3A  6E0C               	movwf	(___lwdiv@quotient+1)^0,c
   985   01FB3C  0E00               	movlw	0
   986   01FB3E  6E0B               	movwf	___lwdiv@quotient^0,c
   987   01FB40  5009               	movf	___lwdiv@divisor^0,w,c
   988   01FB42  100A               	iorwf	(___lwdiv@divisor+1)^0,w,c
   989   01FB44  B4D8               	btfsc	status,2,c
   990   01FB46  EFA7  F0FD         	goto	u221
   991   01FB4A  EFA9  F0FD         	goto	u220
   992   01FB4E                     u221:
   993   01FB4E  EFD1  F0FD         	goto	l709
   994   01FB52                     u220:
   995   01FB52  0E01               	movlw	1
   996   01FB54  6E0D               	movwf	___lwdiv@counter^0,c
   997   01FB56  EFB1  F0FD         	goto	l1183
   998   01FB5A                     l1181:
   999   01FB5A  90D8               	bcf	status,0,c
  1000   01FB5C  3609               	rlcf	___lwdiv@divisor^0,f,c
  1001   01FB5E  360A               	rlcf	(___lwdiv@divisor+1)^0,f,c
  1002   01FB60  2A0D               	incf	___lwdiv@counter^0,f,c
  1003   01FB62                     l1183:
  1004   01FB62  AE0A               	btfss	(___lwdiv@divisor+1)^0,7,c
  1005   01FB64  EFB6  F0FD         	goto	u231
  1006   01FB68  EFB8  F0FD         	goto	u230
  1007   01FB6C                     u231:
  1008   01FB6C  EFAD  F0FD         	goto	l1181
  1009   01FB70                     u230:
  1010   01FB70                     l1185:
  1011   01FB70  90D8               	bcf	status,0,c
  1012   01FB72  360B               	rlcf	___lwdiv@quotient^0,f,c
  1013   01FB74  360C               	rlcf	(___lwdiv@quotient+1)^0,f,c
  1014   01FB76  5009               	movf	___lwdiv@divisor^0,w,c
  1015   01FB78  5C07               	subwf	___lwdiv@dividend^0,w,c
  1016   01FB7A  500A               	movf	(___lwdiv@divisor+1)^0,w,c
  1017   01FB7C  5808               	subwfb	(___lwdiv@dividend+1)^0,w,c
  1018   01FB7E  A0D8               	btfss	status,0,c
  1019   01FB80  EFC4  F0FD         	goto	u241
  1020   01FB84  EFC6  F0FD         	goto	u240
  1021   01FB88                     u241:
  1022   01FB88  EFCB  F0FD         	goto	l1193
  1023   01FB8C                     u240:
  1024   01FB8C  5009               	movf	___lwdiv@divisor^0,w,c
  1025   01FB8E  5E07               	subwf	___lwdiv@dividend^0,f,c
  1026   01FB90  500A               	movf	(___lwdiv@divisor+1)^0,w,c
  1027   01FB92  5A08               	subwfb	(___lwdiv@dividend+1)^0,f,c
  1028   01FB94  800B               	bsf	___lwdiv@quotient^0,0,c
  1029   01FB96                     l1193:
  1030   01FB96  90D8               	bcf	status,0,c
  1031   01FB98  320A               	rrcf	(___lwdiv@divisor+1)^0,f,c
  1032   01FB9A  3209               	rrcf	___lwdiv@divisor^0,f,c
  1033   01FB9C  2E0D               	decfsz	___lwdiv@counter^0,f,c
  1034   01FB9E  EFB8  F0FD         	goto	l1185
  1035   01FBA2                     l709:
  1036   01FBA2  C00B  F007         	movff	___lwdiv@quotient,?___lwdiv
  1037   01FBA6  C00C  F008         	movff	___lwdiv@quotient+1,?___lwdiv+1
  1038   01FBAA  0012               	return		;funcret
  1039   01FBAC                     __end_of___lwdiv:
  1040                           	callstack 0
  1041                           
  1042 ;; *************** function _motor_init *****************
  1043 ;; Defined at:
  1044 ;;		line 94 in file "../dc_motor.c"
  1045 ;; Parameters:    Size  Location     Type
  1046 ;;  mL              2    0[COMRAM] PTR struct DC_motor
  1047 ;;		 -> motorL(9), 
  1048 ;;  mR              2    2[COMRAM] PTR struct DC_motor
  1049 ;;		 -> motorR(9), 
  1050 ;; Auto vars:     Size  Location     Type
  1051 ;;		None
  1052 ;; Return value:  Size  Location     Type
  1053 ;;                  1    wreg      void 
  1054 ;; Registers used:
  1055 ;;		wreg, status,2, status,0
  1056 ;; Tracked objects:
  1057 ;;		On entry : 0/0
  1058 ;;		On exit  : 0/0
  1059 ;;		Unchanged: 0/0
  1060 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1061 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1062 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1063 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1064 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1065 ;;Total ram usage:        4 bytes
  1066 ;; Hardware stack levels used: 1
  1067 ;; This function calls:
  1068 ;;		Nothing
  1069 ;; This function is called by:
  1070 ;;		_main
  1071 ;; This function uses a non-reentrant model
  1072 ;;
  1073                           
  1074                           	psect	text6
  1075   01FAEE                     __ptext6:
  1076                           	callstack 0
  1077   01FAEE                     _motor_init:
  1078                           	callstack 30
  1079   01FAEE                     
  1080                           ;../dc_motor.c: 94: void motor_init(DC_motor *mL, DC_motor *mR);../dc_motor.c: 95: {;../
      +                          dc_motor.c: 96:     motorL.power=0;
  1081   01FAEE  0E00               	movlw	0
  1082   01FAF0  6E2D               	movwf	_motorL^0,c
  1083                           
  1084                           ;../dc_motor.c: 97:     motorL.direction=1;
  1085   01FAF2  0E01               	movlw	1
  1086   01FAF4  6E2E               	movwf	(_motorL+1)^0,c
  1087                           
  1088                           ;../dc_motor.c: 98:     motorL.brakemode=1;
  1089   01FAF6  0E01               	movlw	1
  1090   01FAF8  6E2F               	movwf	(_motorL+2)^0,c
  1091   01FAFA                     
  1092                           ;../dc_motor.c: 99:     motorL.posDutyHighByte=(unsigned char *)(&CCPR1H);
  1093   01FAFA  0EAA               	movlw	170
  1094   01FAFC  6E32               	movwf	(_motorL+5)^0,c
  1095   01FAFE  0E0F               	movlw	15
  1096   01FB00  6E33               	movwf	(_motorL+6)^0,c
  1097   01FB02                     
  1098                           ;../dc_motor.c: 100:     motorL.negDutyHighByte=(unsigned char *)(&CCPR2H);
  1099   01FB02  0EA6               	movlw	166
  1100   01FB04  6E34               	movwf	(_motorL+7)^0,c
  1101   01FB06  0E0F               	movlw	15
  1102   01FB08  6E35               	movwf	(_motorL+8)^0,c
  1103                           
  1104                           ;../dc_motor.c: 101:     motorL.PWMperiod=99;
  1105   01FB0A  0E00               	movlw	0
  1106   01FB0C  6E31               	movwf	(_motorL+4)^0,c
  1107   01FB0E  0E63               	movlw	99
  1108   01FB10  6E30               	movwf	(_motorL+3)^0,c
  1109                           
  1110                           ;../dc_motor.c: 103:     motorR.power=0;
  1111   01FB12  0E00               	movlw	0
  1112   01FB14  6E24               	movwf	_motorR^0,c
  1113                           
  1114                           ;../dc_motor.c: 104:     motorR.direction=1;
  1115   01FB16  0E01               	movlw	1
  1116   01FB18  6E25               	movwf	(_motorR+1)^0,c
  1117                           
  1118                           ;../dc_motor.c: 105:     motorR.brakemode=1;
  1119   01FB1A  0E01               	movlw	1
  1120   01FB1C  6E26               	movwf	(_motorR+2)^0,c
  1121   01FB1E                     
  1122                           ;../dc_motor.c: 106:     motorR.posDutyHighByte=(unsigned char *)(&CCPR3H);
  1123   01FB1E  0E25               	movlw	37
  1124   01FB20  6E29               	movwf	(_motorR+5)^0,c
  1125   01FB22  0E0F               	movlw	15
  1126   01FB24  6E2A               	movwf	(_motorR+6)^0,c
  1127   01FB26                     
  1128                           ;../dc_motor.c: 107:     motorR.negDutyHighByte=(unsigned char *)(&CCPR4H);
  1129   01FB26  0E21               	movlw	33
  1130   01FB28  6E2B               	movwf	(_motorR+7)^0,c
  1131   01FB2A  0E0F               	movlw	15
  1132   01FB2C  6E2C               	movwf	(_motorR+8)^0,c
  1133                           
  1134                           ;../dc_motor.c: 108:     motorR.PWMperiod=99;
  1135   01FB2E  0E00               	movlw	0
  1136   01FB30  6E28               	movwf	(_motorR+4)^0,c
  1137   01FB32  0E63               	movlw	99
  1138   01FB34  6E27               	movwf	(_motorR+3)^0,c
  1139   01FB36  0012               	return		;funcret
  1140   01FB38                     __end_of_motor_init:
  1141                           	callstack 0
  1142                           
  1143 ;; *************** function _initDCmotorsPWM *****************
  1144 ;; Defined at:
  1145 ;;		line 5 in file "../dc_motor.c"
  1146 ;; Parameters:    Size  Location     Type
  1147 ;;  PWMperiod       2    0[COMRAM] unsigned int 
  1148 ;; Auto vars:     Size  Location     Type
  1149 ;;		None
  1150 ;; Return value:  Size  Location     Type
  1151 ;;                  1    wreg      void 
  1152 ;; Registers used:
  1153 ;;		wreg, status,2
  1154 ;; Tracked objects:
  1155 ;;		On entry : 0/0
  1156 ;;		On exit  : 0/0
  1157 ;;		Unchanged: 0/0
  1158 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1159 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1160 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1161 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1162 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1163 ;;Total ram usage:        2 bytes
  1164 ;; Hardware stack levels used: 1
  1165 ;; This function calls:
  1166 ;;		Nothing
  1167 ;; This function is called by:
  1168 ;;		_main
  1169 ;; This function uses a non-reentrant model
  1170 ;;
  1171                           
  1172                           	psect	text7
  1173   01FBAC                     __ptext7:
  1174                           	callstack 0
  1175   01FBAC                     _initDCmotorsPWM:
  1176                           	callstack 30
  1177   01FBAC                     
  1178                           ;../dc_motor.c: 7:     TRISEbits.TRISE2 = 0;
  1179   01FBAC  9485               	bcf	133,2,c	;volatile
  1180                           
  1181                           ;../dc_motor.c: 8:     TRISEbits.TRISE4 = 0;
  1182   01FBAE  9885               	bcf	133,4,c	;volatile
  1183                           
  1184                           ;../dc_motor.c: 9:     TRISCbits.TRISC7 = 0;
  1185   01FBB0  9E83               	bcf	131,7,c	;volatile
  1186                           
  1187                           ;../dc_motor.c: 10:     TRISGbits.TRISG6 = 0;
  1188   01FBB2  9C87               	bcf	135,6,c	;volatile
  1189                           
  1190                           ;../dc_motor.c: 12:     LATEbits.LATE2 = 0;
  1191   01FBB4  947D               	bcf	125,2,c	;volatile
  1192                           
  1193                           ;../dc_motor.c: 13:     LATEbits.LATE4 = 0;
  1194   01FBB6  987D               	bcf	125,4,c	;volatile
  1195                           
  1196                           ;../dc_motor.c: 14:     LATCbits.LATC7 = 0;
  1197   01FBB8  9E7B               	bcf	123,7,c	;volatile
  1198                           
  1199                           ;../dc_motor.c: 15:     LATGbits.LATG6 = 0;
  1200   01FBBA  9C7F               	bcf	127,6,c	;volatile
  1201   01FBBC                     
  1202                           ;../dc_motor.c: 18:     RE2PPS=0x05;
  1203   01FBBC  0E05               	movlw	5
  1204   01FBBE  010E               	movlb	14	; () banked
  1205   01FBC0  6F74               	movwf	116,b	;volatile
  1206                           
  1207                           ;../dc_motor.c: 19:     RE4PPS=0x06;
  1208   01FBC2  0E06               	movlw	6
  1209   01FBC4  6F76               	movwf	118,b	;volatile
  1210                           
  1211                           ;../dc_motor.c: 20:     RC7PPS=0x07;
  1212   01FBC6  0E07               	movlw	7
  1213   01FBC8  6F69               	movwf	105,b	;volatile
  1214                           
  1215                           ;../dc_motor.c: 21:     RG6PPS=0x08;
  1216   01FBCA  0E08               	movlw	8
  1217   01FBCC  6F88               	movwf	136,b	;volatile
  1218                           
  1219                           ;../dc_motor.c: 24:     T2CONbits.CKPS=0b100;
  1220   01FBCE  50BD               	movf	189,w,c	;volatile
  1221   01FBD0  0B8F               	andlw	-113
  1222   01FBD2  0940               	iorlw	64
  1223   01FBD4  6EBD               	movwf	189,c	;volatile
  1224                           
  1225                           ;../dc_motor.c: 25:     T2HLTbits.MODE=0b00000;
  1226   01FBD6  0EE0               	movlw	-32
  1227   01FBD8  16BE               	andwf	190,f,c	;volatile
  1228                           
  1229                           ;../dc_motor.c: 26:     T2CLKCONbits.CS=0b0001;
  1230   01FBDA  50BF               	movf	191,w,c	;volatile
  1231   01FBDC  0BF0               	andlw	-16
  1232   01FBDE  0901               	iorlw	1
  1233   01FBE0  6EBF               	movwf	191,c	;volatile
  1234   01FBE2                     
  1235                           ; BSR set to: 14
  1236                           ;../dc_motor.c: 30:     T2PR=PWMperiod;
  1237   01FBE2  C001  FFBC         	movff	initDCmotorsPWM@PWMperiod,4028	;volatile
  1238   01FBE6                     
  1239                           ; BSR set to: 14
  1240                           ;../dc_motor.c: 31:     T2CONbits.ON=1;
  1241   01FBE6  8EBD               	bsf	189,7,c	;volatile
  1242                           
  1243                           ;../dc_motor.c: 35:     CCPR1H=0;
  1244   01FBE8  0E00               	movlw	0
  1245   01FBEA  6EAA               	movwf	170,c	;volatile
  1246                           
  1247                           ;../dc_motor.c: 36:     CCPR2H=0;
  1248   01FBEC  0E00               	movlw	0
  1249   01FBEE  6EA6               	movwf	166,c	;volatile
  1250                           
  1251                           ;../dc_motor.c: 37:     CCPR3H=0;
  1252   01FBF0  0E00               	movlw	0
  1253   01FBF2  010F               	movlb	15	; () banked
  1254   01FBF4  6F25               	movwf	37,b	;volatile
  1255                           
  1256                           ;../dc_motor.c: 38:     CCPR4H=0;
  1257   01FBF6  0E00               	movlw	0
  1258   01FBF8  6F21               	movwf	33,b	;volatile
  1259                           
  1260                           ;../dc_motor.c: 41:     CCPTMRS0bits.C1TSEL=0;
  1261   01FBFA  0EFC               	movlw	-4
  1262   01FBFC  16AD               	andwf	173,f,c	;volatile
  1263                           
  1264                           ;../dc_motor.c: 42:     CCPTMRS0bits.C2TSEL=0;
  1265   01FBFE  0EF3               	movlw	-13
  1266   01FC00  16AD               	andwf	173,f,c	;volatile
  1267                           
  1268                           ;../dc_motor.c: 43:     CCPTMRS0bits.C3TSEL=0;
  1269   01FC02  0ECF               	movlw	-49
  1270   01FC04  16AD               	andwf	173,f,c	;volatile
  1271                           
  1272                           ;../dc_motor.c: 44:     CCPTMRS0bits.C4TSEL=0;
  1273   01FC06  0E3F               	movlw	-193
  1274   01FC08  16AD               	andwf	173,f,c	;volatile
  1275   01FC0A                     
  1276                           ; BSR set to: 15
  1277                           ;../dc_motor.c: 47:     CCP1CONbits.FMT=1;
  1278   01FC0A  88AB               	bsf	171,4,c	;volatile
  1279                           
  1280                           ;../dc_motor.c: 48:     CCP1CONbits.CCP1MODE=0b1100;
  1281   01FC0C  50AB               	movf	171,w,c	;volatile
  1282   01FC0E  0BF0               	andlw	-16
  1283   01FC10  090C               	iorlw	12
  1284   01FC12  6EAB               	movwf	171,c	;volatile
  1285   01FC14                     
  1286                           ; BSR set to: 15
  1287                           ;../dc_motor.c: 49:     CCP1CONbits.EN=1;
  1288   01FC14  8EAB               	bsf	171,7,c	;volatile
  1289   01FC16                     
  1290                           ; BSR set to: 15
  1291                           ;../dc_motor.c: 52:     CCP2CONbits.FMT=1;
  1292   01FC16  88A7               	bsf	167,4,c	;volatile
  1293                           
  1294                           ;../dc_motor.c: 53:     CCP2CONbits.CCP2MODE=0b1100;
  1295   01FC18  50A7               	movf	167,w,c	;volatile
  1296   01FC1A  0BF0               	andlw	-16
  1297   01FC1C  090C               	iorlw	12
  1298   01FC1E  6EA7               	movwf	167,c	;volatile
  1299   01FC20                     
  1300                           ; BSR set to: 15
  1301                           ;../dc_motor.c: 54:     CCP2CONbits.EN=1;
  1302   01FC20  8EA7               	bsf	167,7,c	;volatile
  1303   01FC22                     
  1304                           ; BSR set to: 15
  1305                           ;../dc_motor.c: 58:     CCP3CONbits.FMT=1;
  1306   01FC22  8926               	bsf	38,4,b	;volatile
  1307                           
  1308                           ;../dc_motor.c: 59:     CCP3CONbits.CCP3MODE=0b1100;
  1309   01FC24  5126               	movf	38,w,b	;volatile
  1310   01FC26  0BF0               	andlw	-16
  1311   01FC28  090C               	iorlw	12
  1312   01FC2A  6F26               	movwf	38,b	;volatile
  1313   01FC2C                     
  1314                           ; BSR set to: 15
  1315                           ;../dc_motor.c: 60:     CCP3CONbits.EN=1;
  1316   01FC2C  8F26               	bsf	38,7,b	;volatile
  1317   01FC2E                     
  1318                           ; BSR set to: 15
  1319                           ;../dc_motor.c: 63:     CCP4CONbits.FMT=1;
  1320   01FC2E  8922               	bsf	34,4,b	;volatile
  1321                           
  1322                           ;../dc_motor.c: 64:     CCP4CONbits.CCP4MODE=0b1100;
  1323   01FC30  5122               	movf	34,w,b	;volatile
  1324   01FC32  0BF0               	andlw	-16
  1325   01FC34  090C               	iorlw	12
  1326   01FC36  6F22               	movwf	34,b	;volatile
  1327   01FC38                     
  1328                           ; BSR set to: 15
  1329                           ;../dc_motor.c: 65:     CCP4CONbits.EN=1;
  1330   01FC38  8F22               	bsf	34,7,b	;volatile
  1331   01FC3A                     
  1332                           ; BSR set to: 15
  1333   01FC3A  0012               	return		;funcret
  1334   01FC3C                     __end_of_initDCmotorsPWM:
  1335                           	callstack 0
  1336                           
  1337 ;; *************** function _buggyLEDs_init *****************
  1338 ;; Defined at:
  1339 ;;		line 113 in file "../dc_motor.c"
  1340 ;; Parameters:    Size  Location     Type
  1341 ;;		None
  1342 ;; Auto vars:     Size  Location     Type
  1343 ;;		None
  1344 ;; Return value:  Size  Location     Type
  1345 ;;                  1    wreg      void 
  1346 ;; Registers used:
  1347 ;;		None
  1348 ;; Tracked objects:
  1349 ;;		On entry : 0/0
  1350 ;;		On exit  : 0/0
  1351 ;;		Unchanged: 0/0
  1352 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1353 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1354 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1355 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1356 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1357 ;;Total ram usage:        0 bytes
  1358 ;; Hardware stack levels used: 1
  1359 ;; This function calls:
  1360 ;;		Nothing
  1361 ;; This function is called by:
  1362 ;;		_main
  1363 ;; This function uses a non-reentrant model
  1364 ;;
  1365                           
  1366                           	psect	text8
  1367   01FAB2                     __ptext8:
  1368                           	callstack 0
  1369   01FAB2                     _buggyLEDs_init:
  1370                           	callstack 30
  1371   01FAB2                     
  1372                           ;../dc_motor.c: 114:     LATHbits.LATH1 = 0;
  1373   01FAB2  9280               	bcf	128,1,c	;volatile
  1374                           
  1375                           ;../dc_motor.c: 115:     LATDbits.LATD3 = 0;
  1376   01FAB4  967C               	bcf	124,3,c	;volatile
  1377                           
  1378                           ;../dc_motor.c: 116:     LATDbits.LATD4 = 0;
  1379   01FAB6  987C               	bcf	124,4,c	;volatile
  1380                           
  1381                           ;../dc_motor.c: 117:     LATFbits.LATF0 = 0;
  1382   01FAB8  907E               	bcf	126,0,c	;volatile
  1383                           
  1384                           ;../dc_motor.c: 118:     LATHbits.LATH0 = 0;
  1385   01FABA  9080               	bcf	128,0,c	;volatile
  1386                           
  1387                           ;../dc_motor.c: 120:     TRISHbits.TRISH1 = 0;
  1388   01FABC  9288               	bcf	136,1,c	;volatile
  1389                           
  1390                           ;../dc_motor.c: 121:     TRISDbits.TRISD3 = 0;
  1391   01FABE  9684               	bcf	132,3,c	;volatile
  1392                           
  1393                           ;../dc_motor.c: 122:     TRISDbits.TRISD4 = 0;
  1394   01FAC0  9884               	bcf	132,4,c	;volatile
  1395                           
  1396                           ;../dc_motor.c: 123:     TRISFbits.TRISF0 = 0;
  1397   01FAC2  9086               	bcf	134,0,c	;volatile
  1398                           
  1399                           ;../dc_motor.c: 124:     TRISHbits.TRISH0 = 0;
  1400   01FAC4  9088               	bcf	136,0,c	;volatile
  1401   01FAC6  0012               	return		;funcret
  1402   01FAC8                     __end_of_buggyLEDs_init:
  1403                           	callstack 0
  1404   000000                     
  1405                           	psect	rparam
  1406   000000                     
  1407                           	psect	idloc
  1408                           
  1409                           ;Config register IDLOC0 @ 0x200000
  1410                           ;	unspecified, using default values
  1411   200000                     	org	2097152
  1412   200000  0FFF               	dw	4095
  1413                           
  1414                           ;Config register IDLOC1 @ 0x200002
  1415                           ;	unspecified, using default values
  1416   200002                     	org	2097154
  1417   200002  0FFF               	dw	4095
  1418                           
  1419                           ;Config register IDLOC2 @ 0x200004
  1420                           ;	unspecified, using default values
  1421   200004                     	org	2097156
  1422   200004  0FFF               	dw	4095
  1423                           
  1424                           ;Config register IDLOC3 @ 0x200006
  1425                           ;	unspecified, using default values
  1426   200006                     	org	2097158
  1427   200006  0FFF               	dw	4095
  1428                           
  1429                           ;Config register IDLOC4 @ 0x200008
  1430                           ;	unspecified, using default values
  1431   200008                     	org	2097160
  1432   200008  0FFF               	dw	4095
  1433                           
  1434                           ;Config register IDLOC5 @ 0x20000A
  1435                           ;	unspecified, using default values
  1436   20000A                     	org	2097162
  1437   20000A  0FFF               	dw	4095
  1438                           
  1439                           ;Config register IDLOC6 @ 0x20000C
  1440                           ;	unspecified, using default values
  1441   20000C                     	org	2097164
  1442   20000C  0FFF               	dw	4095
  1443                           
  1444                           ;Config register IDLOC7 @ 0x20000E
  1445                           ;	unspecified, using default values
  1446   20000E                     	org	2097166
  1447   20000E  0FFF               	dw	4095
  1448                           
  1449                           	psect	config
  1450                           
  1451                           ;Config register CONFIG1L @ 0x300000
  1452                           ;	External Oscillator mode Selection bits
  1453                           ;	FEXTOSC = HS, HS (crystal oscillator) above 8 MHz; PFM set to high power
  1454                           ;	Power-up default value for COSC bits
  1455                           ;	RSTOSC = EXTOSC_4PLL, EXTOSC with 4x PLL, with EXTOSC operating per FEXTOSC bits
  1456   300000                     	org	3145728
  1457   300000  AA                 	db	170
  1458                           
  1459                           ;Config register CONFIG1H @ 0x300001
  1460                           ;	unspecified, using default values
  1461                           ;	Clock Out Enable bit
  1462                           ;	CLKOUTEN = 0x1, unprogrammed default
  1463                           ;	Clock Switch Enable bit
  1464                           ;	CSWEN = 0x1, unprogrammed default
  1465                           ;	Fail-Safe Clock Monitor Enable bit
  1466                           ;	FCMEN = 0x1, unprogrammed default
  1467   300001                     	org	3145729
  1468   300001  FF                 	db	255
  1469                           
  1470                           ;Config register CONFIG2L @ 0x300002
  1471                           ;	unspecified, using default values
  1472                           ;	Master Clear Enable bit
  1473                           ;	MCLRE = 0x1, unprogrammed default
  1474                           ;	Power-up Timer Enable bit
  1475                           ;	PWRTE = 0x1, unprogrammed default
  1476                           ;	Low-power BOR enable bit
  1477                           ;	LPBOREN = 0x1, unprogrammed default
  1478                           ;	Brown-out Reset Enable bits
  1479                           ;	BOREN = 0x3, unprogrammed default
  1480   300002                     	org	3145730
  1481   300002  FF                 	db	255
  1482                           
  1483                           ;Config register CONFIG2H @ 0x300003
  1484                           ;	unspecified, using default values
  1485                           ;	Brown Out Reset Voltage selection bits
  1486                           ;	BORV = 0x3, unprogrammed default
  1487                           ;	ZCD Disable bit
  1488                           ;	ZCD = 0x1, unprogrammed default
  1489                           ;	PPSLOCK bit One-Way Set Enable bit
  1490                           ;	PPS1WAY = 0x1, unprogrammed default
  1491                           ;	Stack Full/Underflow Reset Enable bit
  1492                           ;	STVREN = 0x1, unprogrammed default
  1493                           ;	Debugger Enable bit
  1494                           ;	DEBUG = 0x1, unprogrammed default
  1495                           ;	Extended Instruction Set Enable bit
  1496                           ;	XINST = 0x1, unprogrammed default
  1497   300003                     	org	3145731
  1498   300003  FF                 	db	255
  1499                           
  1500                           ;Config register CONFIG3L @ 0x300004
  1501                           ;	WDT Period Select bits
  1502                           ;	WDTCPS = WDTCPS_31, Divider ratio 1:65536; software control of WDTPS
  1503                           ;	WDT operating mode
  1504                           ;	WDTE = OFF, WDT Disabled
  1505   300004                     	org	3145732
  1506   300004  9F                 	db	159
  1507                           
  1508                           ;Config register CONFIG3H @ 0x300005
  1509                           ;	unspecified, using default values
  1510                           ;	WDT Window Select bits
  1511                           ;	WDTCWS = 0x7, unprogrammed default
  1512                           ;	WDT input clock selector
  1513                           ;	WDTCCS = 0x7, unprogrammed default
  1514   300005                     	org	3145733
  1515   300005  FF                 	db	255
  1516                           
  1517                           ;Config register CONFIG4L @ 0x300006
  1518                           ;	unspecified, using default values
  1519                           ;	Write Protection Block 0
  1520                           ;	WRT0 = 0x1, unprogrammed default
  1521                           ;	Write Protection Block 1
  1522                           ;	WRT1 = 0x1, unprogrammed default
  1523                           ;	Write Protection Block 2
  1524                           ;	WRT2 = 0x1, unprogrammed default
  1525                           ;	Write Protection Block 3
  1526                           ;	WRT3 = 0x1, unprogrammed default
  1527                           ;	Write Protection Block 3
  1528                           ;	WRT4 = 0x1, unprogrammed default
  1529                           ;	Write Protection Block 3
  1530                           ;	WRT5 = 0x1, unprogrammed default
  1531                           ;	Write Protection Block 3
  1532                           ;	WRT6 = 0x1, unprogrammed default
  1533                           ;	Write Protection Block 3
  1534                           ;	WRT7 = 0x1, unprogrammed default
  1535   300006                     	org	3145734
  1536   300006  FF                 	db	255
  1537                           
  1538                           ;Config register CONFIG4H @ 0x300007
  1539                           ;	unspecified, using default values
  1540                           ;	Configuration Register Write Protection bit
  1541                           ;	WRTC = 0x1, unprogrammed default
  1542                           ;	Boot Block Write Protection bit
  1543                           ;	WRTB = 0x1, unprogrammed default
  1544                           ;	Data EEPROM Write Protection bit
  1545                           ;	WRTD = 0x1, unprogrammed default
  1546                           ;	Scanner Enable bit
  1547                           ;	SCANE = 0x1, unprogrammed default
  1548                           ;	Low Voltage Programming Enable bit
  1549                           ;	LVP = 0x1, unprogrammed default
  1550   300007                     	org	3145735
  1551   300007  FF                 	db	255
  1552                           
  1553                           ;Config register CONFIG5L @ 0x300008
  1554                           ;	unspecified, using default values
  1555                           ;	UserNVM Program Memory Code Protection bit
  1556                           ;	CP = 0x1, unprogrammed default
  1557                           ;	DataNVM Memory Code Protection bit
  1558                           ;	CPD = 0x1, unprogrammed default
  1559   300008                     	org	3145736
  1560   300008  FF                 	db	255
  1561                           
  1562                           ;Config register CONFIG5H @ 0x300009
  1563                           ;	unspecified, using default values
  1564   300009                     	org	3145737
  1565   300009  FF                 	db	255
  1566                           
  1567                           ;Config register CONFIG6L @ 0x30000A
  1568                           ;	unspecified, using default values
  1569                           ;	Table Read Protection Block 0
  1570                           ;	EBTR0 = 0x1, unprogrammed default
  1571                           ;	Table Read Protection Block 1
  1572                           ;	EBTR1 = 0x1, unprogrammed default
  1573                           ;	Table Read Protection Block 2
  1574                           ;	EBTR2 = 0x1, unprogrammed default
  1575                           ;	Table Read Protection Block 3
  1576                           ;	EBTR3 = 0x1, unprogrammed default
  1577                           ;	Table Read Protection Block 4
  1578                           ;	EBTR4 = 0x1, unprogrammed default
  1579                           ;	Table Read Protection Block 5
  1580                           ;	EBTR5 = 0x1, unprogrammed default
  1581                           ;	Table Read Protection Block 6
  1582                           ;	EBTR6 = 0x1, unprogrammed default
  1583                           ;	Table Read Protection Block 7
  1584                           ;	EBTR7 = 0x1, unprogrammed default
  1585   30000A                     	org	3145738
  1586   30000A  FF                 	db	255
  1587                           
  1588                           ;Config register CONFIG6H @ 0x30000B
  1589                           ;	unspecified, using default values
  1590                           ;	Boot Block Table Read Protection bit
  1591                           ;	EBTRB = 0x1, unprogrammed default
  1592   30000B                     	org	3145739
  1593   30000B  FF                 	db	255
  1594                           tosu	equ	0xFFF
  1595                           tosh	equ	0xFFE
  1596                           tosl	equ	0xFFD
  1597                           stkptr	equ	0xFFC
  1598                           pclatu	equ	0xFFB
  1599                           pclath	equ	0xFFA
  1600                           pcl	equ	0xFF9
  1601                           tblptru	equ	0xFF8
  1602                           tblptrh	equ	0xFF7
  1603                           tblptrl	equ	0xFF6
  1604                           tablat	equ	0xFF5
  1605                           prodh	equ	0xFF4
  1606                           prodl	equ	0xFF3
  1607                           indf0	equ	0xFEF
  1608                           postinc0	equ	0xFEE
  1609                           postdec0	equ	0xFED
  1610                           preinc0	equ	0xFEC
  1611                           plusw0	equ	0xFEB
  1612                           fsr0h	equ	0xFEA
  1613                           fsr0l	equ	0xFE9
  1614                           wreg	equ	0xFE8
  1615                           indf1	equ	0xFE7
  1616                           postinc1	equ	0xFE6
  1617                           postdec1	equ	0xFE5
  1618                           preinc1	equ	0xFE4
  1619                           plusw1	equ	0xFE3
  1620                           fsr1h	equ	0xFE2
  1621                           fsr1l	equ	0xFE1
  1622                           bsr	equ	0xFE0
  1623                           indf2	equ	0xFDF
  1624                           postinc2	equ	0xFDE
  1625                           postdec2	equ	0xFDD
  1626                           preinc2	equ	0xFDC
  1627                           plusw2	equ	0xFDB
  1628                           fsr2h	equ	0xFDA
  1629                           fsr2l	equ	0xFD9
  1630                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         18
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     35      53
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          234      0       0

Pointer List with Targets:

    motor_init@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> motorR(COMRAM[9]), 

    motor_init@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> motorL(COMRAM[9]), 

    right_45@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllll[1]), CCPR2H(BITBIGSFRhhhlll[1]), 

    right_45@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllll[1]), CCPR1H(BITBIGSFRhhhlll[1]), 

    right_45@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> motorR(COMRAM[9]), 

    right_45@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllll[1]), CCPR2H(BITBIGSFRhhhlll[1]), 

    right_45@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllll[1]), CCPR1H(BITBIGSFRhhhlll[1]), 

    right_45@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> motorL(COMRAM[9]), 

    left_45@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllll[1]), CCPR2H(BITBIGSFRhhhlll[1]), 

    left_45@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllll[1]), CCPR1H(BITBIGSFRhhhlll[1]), 

    left_45@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllll[1]), CCPR2H(BITBIGSFRhhhlll[1]), 

    left_45@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllll[1]), CCPR1H(BITBIGSFRhhhlll[1]), 

    stop@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllll[1]), CCPR2H(BITBIGSFRhhhlll[1]), 

    stop@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllll[1]), CCPR1H(BITBIGSFRhhhlll[1]), 

    stop@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> motorR(COMRAM[9]), 

    stop@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllll[1]), CCPR2H(BITBIGSFRhhhlll[1]), 

    stop@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllll[1]), CCPR1H(BITBIGSFRhhhlll[1]), 

    stop@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> motorL(COMRAM[9]), 

    reverse@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllll[1]), CCPR2H(BITBIGSFRhhhlll[1]), 

    reverse@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllll[1]), CCPR1H(BITBIGSFRhhhlll[1]), 

    reverse@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllll[1]), CCPR2H(BITBIGSFRhhhlll[1]), 

    reverse@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllll[1]), CCPR1H(BITBIGSFRhhhlll[1]), 

    forward@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllll[1]), CCPR2H(BITBIGSFRhhhlll[1]), 

    forward@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllll[1]), CCPR1H(BITBIGSFRhhhlll[1]), 

    forward@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllll[1]), CCPR2H(BITBIGSFRhhhlll[1]), 

    forward@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllll[1]), CCPR1H(BITBIGSFRhhhlll[1]), 

    setMotorPWM@m.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllll[1]), CCPR2H(BITBIGSFRhhhlll[1]), 

    setMotorPWM@m.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllll[1]), CCPR1H(BITBIGSFRhhhlll[1]), 

    setMotorPWM@m	PTR struct DC_motor size(2) Largest target is 11
		 -> motorR(COMRAM[9]), motorL(COMRAM[9]), 

    motorR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllll[1]), CCPR2H(BITBIGSFRhhhlll[1]), 

    motorR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllll[1]), CCPR1H(BITBIGSFRhhhlll[1]), 

    S280DC_motor$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllll[1]), CCPR2H(BITBIGSFRhhhlll[1]), 

    motorL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllll[1]), CCPR2H(BITBIGSFRhhhlll[1]), 

    S280DC_motor$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllll[1]), CCPR1H(BITBIGSFRhhhlll[1]), 

    motorL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllll[1]), CCPR1H(BITBIGSFRhhhlll[1]), 


Critical Paths under _main in COMRAM

    _main->_right_45
    _right_45->_stop
    _stop->_setMotorPWM
    _setMotorPWM->___lwdiv
    ___lwdiv->___wmul

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0   10055
                                             31 COMRAM     4     4      0
                     _buggyLEDs_init
                    _initDCmotorsPWM
                         _motor_init
                           _right_45
                               _stop
 ---------------------------------------------------------------------------------
 (1) _right_45                                             6     2      4    6230
                                             25 COMRAM     6     2      4
                        _setMotorPWM
                               _stop
 ---------------------------------------------------------------------------------
 (1) _stop                                                 6     2      4    3529
                                             19 COMRAM     6     2      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _setMotorPWM                                          6     4      2    2285
                                             13 COMRAM     6     4      2
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     355
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     358
                                              6 COMRAM     7     3      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _motor_init                                           4     0      4     152
                                              0 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (1) _initDCmotorsPWM                                      2     0      2      98
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _buggyLEDs_init                                       0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _buggyLEDs_init
   _initDCmotorsPWM
   _motor_init
   _right_45
     _setMotorPWM
       ___lwdiv
         ___wmul (ARG)
       ___wmul
     _stop
       _setMotorPWM
   _stop

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             DE9      0       0      51        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK13           EA      0       0      30        0.0%
BANK13              EA      0       0      31        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     23      35       1       55.8%
BITBIGSFRhlllh      54      0       0      38        0.0%
BITBIGSFRlllhll     4B      0       0      48        0.0%
BITBIGSFRhlllll     46      0       0      40        0.0%
BITBIGSFRhhhh       40      0       0      32        0.0%
BITBIGSFRllh        2D      0       0      42        0.0%
BITBIGSFRllll       2D      0       0      49        0.0%
BITBIGSFRlllhhh     1E      0       0      43        0.0%
BITBIGSFRhhhlll     1D      0       0      36        0.0%
BITBIGSFRlllhhh     11      0       0      44        0.0%
BITBIGSFRhhhlhh      E      0       0      33        0.0%
BITBIGSFRlllhlh      5      0       0      47        0.0%
BITBIGSFRlllhhl      3      0       0      46        0.0%
BITBIGSFRhllllh      2      0       0      39        0.0%
BITBIGSFRhhhllh      2      0       0      35        0.0%
BITBIGSFRhlhh        2      0       0      37        0.0%
BITBIGSFRhhhlhl      1      0       0      34        0.0%
BITBIGSFRlllhhh      1      0       0      45        0.0%
BITBIGSFRlh          1      0       0      41        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      35      50        0.0%
DATA                 0      0      35       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.40 build 20220703182018 
Symbol Table                                                                                   Wed Mar 08 16:59:38 2023

     ___wmul@multiplicand 0003                       l142 FC3A                       l215 FCE0  
                     l152 FB36                       l218 FAEC                       l155 FAC6  
                     l149 FFFE                       l176 FD92                       l192 FE92  
                     l716 FBAA                       l709 FBA2                       u220 FB52  
                     u300 FE38                       u221 FB4E                       u301 FE34  
                     u230 FB70                       u310 FE50                       u231 FB6C  
                     u311 FE4C                       u240 FB8C                       u241 FB88  
                     u250 FEB0                       u251 FEAC                       u260 FF7A  
                     u261 FF76                       u270 FD60                       u271 FD5C  
                     u407 FCB2                       u280 FDD0                       u417 FE1A  
                     u281 FDCC                       u290 FDF4                       u427 FE5A  
                     u291 FDF0                       u380 FCE0                       u437 FE86  
                     u381 FCDC                       u447 FD40                       u397 FC72  
                     wreg 000FE8                      l1003 FAB2                      l1201 FF04  
                    l1211 FFBE                      l1203 FF18                      l1205 FF1C  
                    l1213 FCE4                      l1301 FE7C                      l1207 FF5E  
                    l1231 FD46                      l1223 FD0E                      l1215 FD04  
                    l1209 FF7A                      l1241 FD90                      l1233 FD52  
                    l1225 FD26                      l1217 FD06                      l1251 FC0A  
                    l1243 FBAC                      l1171 FAE4                      l1235 FD60  
                    l1227 FD32                      l1261 FC2C                      l1253 FC14  
                    l1245 FBBC                      l1181 FB5A                      l1237 FD78  
                    l1229 FD3E                      l1263 FC2E                      l1255 FC16  
                    l1247 FBE2                      l1271 FB02                      l1191 FB94  
                    l1183 FB62                      l1175 FB38                      l1239 FD84  
                    l1265 FC38                      l1257 FC20                      l1249 FBE6  
                    l1273 FB1E                      l1193 FB96                      l1185 FB70  
                    l1177 FB40                      l1169 FAC8                      l1281 FDD0  
                    l1361 FC48                      l1259 FC22                      l1275 FB26  
                    l1267 FAEE                      l1195 FB9C                      l1187 FB76  
                    l1179 FB52                      l1291 FE18                      l1283 FDDC  
                    l1371 FC68                      l1363 FC4C                      l1269 FAFA  
                    l1189 FB8C                      l1197 FE94                      l1285 FDF4  
                    l1293 FE20                      l1277 FD94                      l1373 FC80  
                    l1365 FC60                      l1199 FEB0                      l1295 FE38  
                    l1287 FE00                      l1279 FDB8                      l1375 FC94  
                    l1359 FC3C                      l1297 FE50                      l1289 FE0C  
                    l1377 FCC0                      l1299 FE68                      _T2PR 000FBC  
                    _main FC3C                      fsr2h 000FDA                      indf2 000FDF  
                    fsr2l 000FD9                      _stop FCE4                      prodh 000FF4  
                    prodl 000FF3                      start 0000              ___param_bank 000000  
                   ?_main 0001                     ?_stop 0014           __end_of___lwdiv FBAC  
                   main@i 0022                     stop@i 0018                     status 000FD8  
         __initialization FAA0              __end_of_main FCE4              __end_of_stop FD94  
                  ??_main 0020                    ??_stop 0018             __activetblptr 000000  
            ?_setMotorPWM 000E                    _CCPR1H 000FAA                    _CCPR2H 000FA6  
                  _CCPR3H 000F25                    _CCPR4H 000F21                    _RE2PPS 000E74  
                  _RD5PPS 000E6F                    _RC7PPS 000E69                    _RE4PPS 000E76  
                  _RD6PPS 000E70                    _RG6PPS 000E88              _CCPTMRS0bits 000FAD  
                  ___wmul FAC8                 ??___lwdiv 000B          ??_buggyLEDs_init 0001  
                  clear_0 FAA6                    _motorL 002D                    _motorR 0024  
                  isa$std 000001          __end_of_right_45 FE94                    stop@mL 0014  
                  stop@mR 0016         ??_initDCmotorsPWM 0003                __accesstop 0060  
 __end_of__initialization FAAC             ___rparam_used 000001            __pcstackCOMRAM 0001  
            _T2CLKCONbits 000FBF                   ?___wmul 0001                   _SSP2ADD 000ED6  
                 _SSP2BUF 000ED5                 ?_right_45 001A                   __Hparam 0000  
                 __Lparam 0000                   ___lwdiv FB38                   __pcinit FAA0  
                 __ramtop 0E00                   __ptext0 FC3C                   __ptext1 FD94  
                 __ptext2 FCE4                   __ptext3 FE94                   __ptext4 FAC8  
                 __ptext5 FB38                   __ptext6 FAEE                   __ptext7 FBAC  
                 __ptext8 FAB2                 _T2CONbits 000FBD                 _T2HLTbits 000FBE  
    end_of_initialization FAAC                ??_right_45 001E                   postdec2 000FDD  
                 postinc0 000FEE                   postinc2 000FDE                _motor_init FAEE  
         _initDCmotorsPWM FBAC        setMotorPWM@negDuty 0013        setMotorPWM@posDuty 0012  
               _TRISCbits 000F83                 _TRISDbits 000F84                 _TRISEbits 000F85  
               _TRISFbits 000F86                 _TRISGbits 000F87                 _TRISHbits 000F88  
             _CCP1CONbits 000FAB               _CCP2CONbits 000FA7               _CCP3CONbits 000F26  
             _CCP4CONbits 000F22            __end_of___wmul FAEE       start_initialization FAA0  
 __end_of_initDCmotorsPWM FC3C                  ??___wmul 0005               ?_motor_init 0001  
             __pbssCOMRAM 0024          ___lwdiv@dividend 0007                  ?___lwdiv 0007  
              right_45@mL 001A                right_45@mR 001C             ??_setMotorPWM 0010  
        ___lwdiv@quotient 000B  initDCmotorsPWM@PWMperiod 0001            ___wmul@product 0005  
                _LATCbits 000F7B                  _LATDbits 000F7C                  _LATEbits 000F7D  
                _LATFbits 000F7E                  _LATGbits 000F7F                  _LATHbits 000F80  
        ?_initDCmotorsPWM 0001                  _SSP2CON2 000EDA                  _SSP2STAT 000ED8  
       ___wmul@multiplier 0001              setMotorPWM@m 000E       __end_of_setMotorPWM 0000  
                __Hrparam 0000                  __Lrparam 0000                _ANSELDbits 000EA7  
          _buggyLEDs_init FAB2           ___lwdiv@divisor 0009           ___lwdiv@counter 000D  
            _SSP2CON1bits 000ED9              _SSP2CON2bits 000EDA                  _right_45 FD94  
                isa$xinst 000000              ??_motor_init 0005    __end_of_buggyLEDs_init FAC8  
             _setMotorPWM FE94        __end_of_motor_init FB38              motor_init@mL 0001  
            motor_init@mR 0003           ?_buggyLEDs_init 0001                _SSP2DATPPS 000E1D  
              _SSP2CLKPPS 000E1C  
