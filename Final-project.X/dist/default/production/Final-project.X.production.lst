

Microchip MPLAB XC8 Assembler V2.40 build 20220703182018 
                                                                                               Fri Mar 10 04:12:18 2023

Microchip MPLAB XC8 C Compiler v2.40 (Free license) build 20220703182018 Og1 
     1                           	processor	18F67K40
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     6                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     8                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	text0,global,reloc=2,class=CODE,delta=1
    11                           	psect	text1,global,reloc=2,class=CODE,delta=1
    12                           	psect	text2,global,reloc=2,class=CODE,delta=1
    13                           	psect	text3,global,reloc=2,class=CODE,delta=1
    14                           	psect	text4,global,reloc=2,class=CODE,delta=1
    15                           	psect	text5,global,reloc=2,class=CODE,delta=1
    16                           	psect	text6,global,reloc=2,class=CODE,delta=1
    17                           	psect	text7,global,reloc=2,class=CODE,delta=1
    18                           	psect	text8,global,reloc=2,class=CODE,delta=1
    19                           	psect	text9,global,reloc=2,class=CODE,delta=1
    20                           	psect	text10,global,reloc=2,class=CODE,delta=1
    21                           	psect	text11,global,reloc=2,class=CODE,delta=1
    22                           	psect	text12,global,reloc=2,class=CODE,delta=1
    23                           	psect	text13,global,reloc=2,class=CODE,delta=1
    24                           	psect	text14,global,reloc=2,class=CODE,delta=1
    25                           	psect	text15,global,reloc=2,class=CODE,delta=1
    26                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=1
    27                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=1
    28                           	psect	text18,global,reloc=2,class=CODE,delta=1
    29                           	psect	text19,global,reloc=2,class=CODE,delta=1,group=1
    30                           	psect	text20,global,reloc=2,class=CODE,delta=1,group=1
    31                           	psect	text21,global,reloc=2,class=CODE,delta=1,group=1
    32                           	psect	text22,global,reloc=2,class=CODE,delta=1
    33                           	psect	text23,global,reloc=2,class=CODE,delta=1
    34                           	psect	text24,global,reloc=2,class=CODE,delta=1
    35                           	psect	text25,global,reloc=2,class=CODE,delta=1
    36                           	psect	text26,global,reloc=2,class=CODE,delta=1
    37                           	psect	text27,global,reloc=2,class=CODE,delta=1
    38                           	psect	text28,global,reloc=2,class=CODE,delta=1
    39                           	psect	text29,global,reloc=2,class=CODE,delta=1
    40                           	psect	text30,global,reloc=2,class=CODE,delta=1
    41                           	psect	text31,global,reloc=2,class=CODE,delta=1
    42                           	psect	text32,global,reloc=2,class=CODE,delta=1
    43                           	psect	text33,global,reloc=2,class=CODE,delta=1
    44                           	psect	text34,global,reloc=2,class=CODE,delta=1
    45                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    46                           	psect	text36,global,reloc=2,class=CODE,delta=1
    47                           	psect	text37,global,reloc=2,class=CODE,delta=1
    48                           	psect	text38,global,reloc=2,class=CODE,delta=1
    49                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    50                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    51                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    52                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    53                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    54   000000                     
    55                           ; Generated 06/04/2022 GMT
    56                           ; 
    57                           ; Copyright Â© 2022, Microchip Technology Inc. and its subsidiaries ("Microchip")
    58                           ; All rights reserved.
    59                           ; 
    60                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    61                           ; 
    62                           ; Redistribution and use in source and binary forms, with or without modification, are
    63                           ; permitted provided that the following conditions are met:
    64                           ; 
    65                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    66                           ;        conditions and the following disclaimer.
    67                           ; 
    68                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    69                           ;        of conditions and the following disclaimer in the documentation and/or other
    70                           ;        materials provided with the distribution. Publication is not required when
    71                           ;        this file is used in an embedded application.
    72                           ; 
    73                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    74                           ;        software without specific prior written permission.
    75                           ; 
    76                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    77                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    78                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    79                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    80                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    81                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    82                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    83                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    84                           ; 
    85                           ; 
    86                           ; Code-generator required, PIC18F67K40 Definitions
    87                           ; 
    88                           ; SFR Addresses
    89   000000                     _RC4STAbits	set	3815
    90   000000                     _SP4BRGH	set	3814
    91   000000                     _SP4BRGL	set	3813
    92   000000                     _TX4STAbits	set	3816
    93   000000                     _BAUD4CONbits	set	3817
    94   000000                     _TX4REG	set	3812
    95   000000                     _TRISFbits	set	3974
    96   000000                     _LATFbits	set	3966
    97   000000                     _LATDbits	set	3964
    98   000000                     _LATGbits	set	3967
    99   000000                     _TRISGbits	set	3975
   100   000000                     _TRISEbits	set	3973
   101   000000                     _SSP2CON2bits	set	3802
   102   000000                     _RX4PPS	set	3605
   103   000000                     _SSP2CLKPPS	set	3612
   104   000000                     _SSP2DATPPS	set	3613
   105   000000                     _ANSELDbits	set	3751
   106   000000                     _SSP2ADD	set	3798
   107   000000                     _SSP2CON1bits	set	3801
   108   000000                     _RC4REG	set	3811
   109   000000                     _LATCbits	set	3963
   110   000000                     _LATEbits	set	3965
   111   000000                     _TRISCbits	set	3971
   112   000000                     _SSP2CON2	set	3802
   113   000000                     _TRISDbits	set	3972
   114   000000                     _CCPR4H	set	3873
   115   000000                     _CCPR3H	set	3877
   116   000000                     _SSP2STAT	set	3800
   117   000000                     _ANSELFbits	set	3764
   118   000000                     _SSP2BUF	set	3797
   119   000000                     _PIE4bits	set	3629
   120   000000                     _RC7PPS	set	3689
   121   000000                     _RD5PPS	set	3695
   122   000000                     _RE2PPS	set	3700
   123   000000                     _RD6PPS	set	3696
   124   000000                     _TRISHbits	set	3976
   125   000000                     _T2PR	set	4028
   126   000000                     _T2CONbits	set	4029
   127   000000                     _CCPR2H	set	4006
   128   000000                     _CCPR1H	set	4010
   129   000000                     _TRISAbits	set	3969
   130   000000                     _LATHbits	set	3968
   131   000000                     _RE4PPS	set	3702
   132   000000                     _RG6PPS	set	3720
   133   000000                     _ANSELAbits	set	3730
   134   000000                     _INTCONbits	set	4082
   135   000000                     _T2CLKCONbits	set	4031
   136   000000                     _T2HLTbits	set	4030
   137   000000                     _CCP1CONbits	set	4011
   138   000000                     _CCPTMRS0bits	set	4013
   139   000000                     _CCP2CONbits	set	4007
   140   000000                     _ADREFbits	set	3928
   141   000000                     _LATAbits	set	3961
   142   000000                     _CCP3CONbits	set	3878
   143   000000                     _CCP4CONbits	set	3874
   144   000000                     _ADPCH	set	3935
   145   000000                     _ADRESH	set	3940
   146   000000                     _ADCON0bits	set	3936
   147   000000                     _PIR4bits	set	3639
   148   000000                     _RC0PPS	set	3682
   149                           
   150                           ; #config settings
   151                           
   152                           	psect	cinit
   153   001B94                     __pcinit:
   154                           	callstack 0
   155   001B94                     start_initialization:
   156                           	callstack 0
   157   001B94                     __initialization:
   158                           	callstack 0
   159                           
   160                           ; Clear objects allocated to BANK0 (89 bytes)
   161   001B94  EE00  F060         	lfsr	0,__pbssBANK0
   162   001B98  0E59               	movlw	89
   163   001B9A                     clear_0:
   164   001B9A  6AEE               	clrf	postinc0,c
   165   001B9C  06E8               	decf	wreg,f,c
   166   001B9E  E1FD               	bnz	clear_0
   167                           
   168                           ; Clear objects allocated to COMRAM (33 bytes)
   169   001BA0  EE00  F038         	lfsr	0,__pbssCOMRAM
   170   001BA4  0E21               	movlw	33
   171   001BA6                     clear_1:
   172   001BA6  6AEE               	clrf	postinc0,c
   173   001BA8  06E8               	decf	wreg,f,c
   174   001BAA  E1FD               	bnz	clear_1
   175   001BAC                     end_of_initialization:
   176                           	callstack 0
   177   001BAC                     __end_of__initialization:
   178                           	callstack 0
   179   001BAC  9059               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   180   001BAE  9259               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   181   001BB0  0100               	movlb	0
   182   001BB2  EF13  F00C         	goto	_main	;jump to C main() function
   183                           
   184                           	psect	bssCOMRAM
   185   000038                     __pbssCOMRAM:
   186                           	callstack 0
   187   000038                     _TxBufReadCnt:
   188                           	callstack 0
   189   000038                     	ds	1
   190   000039                     _TxBufWriteCnt:
   191                           	callstack 0
   192   000039                     	ds	1
   193   00003A                     _RxBufReadCnt:
   194                           	callstack 0
   195   00003A                     	ds	1
   196   00003B                     _RxBufWriteCnt:
   197                           	callstack 0
   198   00003B                     	ds	1
   199   00003C                     _color:
   200                           	callstack 0
   201   00003C                     	ds	20
   202   000050                     _motorL:
   203                           	callstack 0
   204   000050                     	ds	9
   205                           
   206                           	psect	bssBANK0
   207   000060                     __pbssBANK0:
   208                           	callstack 0
   209   000060                     _EUSART4TXbuf:
   210                           	callstack 0
   211   000060                     	ds	60
   212   00009C                     _EUSART4RXbuf:
   213                           	callstack 0
   214   00009C                     	ds	20
   215   0000B0                     _motorR:
   216                           	callstack 0
   217   0000B0                     	ds	9
   218                           
   219                           	psect	cstackBANK0
   220   0000B9                     __pcstackBANK0:
   221                           	callstack 0
   222   0000B9                     buggy_color_response@mL:
   223                           	callstack 0
   224                           
   225                           ; 2 bytes @ 0x0
   226   0000B9                     	ds	2
   227   0000BB                     buggy_color_response@mR:
   228                           	callstack 0
   229                           
   230                           ; 2 bytes @ 0x2
   231   0000BB                     	ds	2
   232   0000BD                     buggy_color_response@c:
   233                           	callstack 0
   234                           
   235                           ; 2 bytes @ 0x4
   236   0000BD                     	ds	2
   237                           
   238                           	psect	cstackCOMRAM
   239   000001                     __pcstackCOMRAM:
   240                           	callstack 0
   241   000001                     ??_getCharFromTxBuf:
   242   000001                     putCharToRxBuf@byte:
   243                           	callstack 0
   244                           
   245                           ; 1 bytes @ 0x0
   246   000001                     	ds	2
   247   000003                     ??_HighISR:
   248                           
   249                           ; 1 bytes @ 0x2
   250   000003                     	ds	2
   251   000005                     ??_I2C_2_Master_Idle:
   252   000005                     ?___wmul:
   253                           	callstack 0
   254   000005                     ?___xxtofl:
   255                           	callstack 0
   256   000005                     initDCmotorsPWM@PWMperiod:
   257                           	callstack 0
   258   000005                     motor_init@mL:
   259                           	callstack 0
   260   000005                     ___wmul@multiplier:
   261                           	callstack 0
   262   000005                     ___flge@ff1:
   263                           	callstack 0
   264   000005                     ___xxtofl@val:
   265                           	callstack 0
   266                           
   267                           ; 4 bytes @ 0x4
   268   000005                     	ds	1
   269   000006                     ??_I2C_2_Master_Read:
   270   000006                     I2C_2_Master_Write@data_byte:
   271                           	callstack 0
   272                           
   273                           ; 1 bytes @ 0x5
   274   000006                     	ds	1
   275   000007                     color_writetoaddr@value:
   276                           	callstack 0
   277   000007                     I2C_2_Master_Read@ack:
   278                           	callstack 0
   279   000007                     motor_init@mR:
   280                           	callstack 0
   281   000007                     ___wmul@multiplicand:
   282                           	callstack 0
   283                           
   284                           ; 2 bytes @ 0x6
   285   000007                     	ds	1
   286   000008                     color_writetoaddr@address:
   287                           	callstack 0
   288   000008                     I2C_2_Master_Read@tmp:
   289                           	callstack 0
   290                           
   291                           ; 1 bytes @ 0x7
   292   000008                     	ds	1
   293   000009                     ??_color_click_init:
   294   000009                     ??___xxtofl:
   295   000009                     ?_color_read_Red:
   296                           	callstack 0
   297   000009                     ?_color_read_Blue:
   298                           	callstack 0
   299   000009                     ?_color_read_Green:
   300                           	callstack 0
   301   000009                     ?_color_read_Clear:
   302                           	callstack 0
   303   000009                     ___wmul@product:
   304                           	callstack 0
   305   000009                     ___flge@ff2:
   306                           	callstack 0
   307                           
   308                           ; 4 bytes @ 0x8
   309   000009                     	ds	2
   310   00000B                     ??_color_read_Red:
   311   00000B                     ??_color_read_Blue:
   312   00000B                     ??_color_read_Green:
   313   00000B                     ??_color_read_Clear:
   314   00000B                     ?___lwdiv:
   315                           	callstack 0
   316   00000B                     ___lwdiv@dividend:
   317                           	callstack 0
   318                           
   319                           ; 2 bytes @ 0xA
   320   00000B                     	ds	2
   321   00000D                     ??___flge:
   322   00000D                     ___xxtofl@sign:
   323                           	callstack 0
   324   00000D                     ___lwdiv@divisor:
   325                           	callstack 0
   326                           
   327                           ; 2 bytes @ 0xC
   328   00000D                     	ds	1
   329   00000E                     ___xxtofl@exp:
   330                           	callstack 0
   331   00000E                     color_read_Red@tmp:
   332                           	callstack 0
   333   00000E                     color_read_Blue@tmp:
   334                           	callstack 0
   335   00000E                     color_read_Green@tmp:
   336                           	callstack 0
   337   00000E                     color_read_Clear@tmp:
   338                           	callstack 0
   339                           
   340                           ; 2 bytes @ 0xD
   341   00000E                     	ds	1
   342   00000F                     ___lwdiv@quotient:
   343                           	callstack 0
   344   00000F                     ___xxtofl@arg:
   345                           	callstack 0
   346                           
   347                           ; 4 bytes @ 0xE
   348   00000F                     	ds	1
   349   000010                     READcolor@c:
   350                           	callstack 0
   351                           
   352                           ; 2 bytes @ 0xF
   353   000010                     	ds	1
   354   000011                     ___lwdiv@counter:
   355                           	callstack 0
   356                           
   357                           ; 1 bytes @ 0x10
   358   000011                     	ds	1
   359   000012                     setMotorPWM@m:
   360                           	callstack 0
   361                           
   362                           ; 2 bytes @ 0x11
   363   000012                     	ds	1
   364   000013                     ?___fldiv:
   365                           	callstack 0
   366   000013                     ___fldiv@b:
   367                           	callstack 0
   368                           
   369                           ; 4 bytes @ 0x12
   370   000013                     	ds	1
   371   000014                     ??_setMotorPWM:
   372                           
   373                           ; 1 bytes @ 0x13
   374   000014                     	ds	2
   375   000016                     setMotorPWM@posDuty:
   376                           	callstack 0
   377                           
   378                           ; 1 bytes @ 0x15
   379   000016                     	ds	1
   380   000017                     setMotorPWM@negDuty:
   381                           	callstack 0
   382   000017                     ___fldiv@a:
   383                           	callstack 0
   384                           
   385                           ; 4 bytes @ 0x16
   386   000017                     	ds	1
   387   000018                     stop@mL:
   388                           	callstack 0
   389                           
   390                           ; 2 bytes @ 0x17
   391   000018                     	ds	2
   392   00001A                     stop@mR:
   393                           	callstack 0
   394                           
   395                           ; 2 bytes @ 0x19
   396   00001A                     	ds	1
   397   00001B                     ??___fldiv:
   398                           
   399                           ; 1 bytes @ 0x1A
   400   00001B                     	ds	1
   401   00001C                     stop@i:
   402                           	callstack 0
   403                           
   404                           ; 2 bytes @ 0x1B
   405   00001C                     	ds	2
   406   00001E                     forward@mL:
   407                           	callstack 0
   408   00001E                     reverse@mL:
   409                           	callstack 0
   410   00001E                     left_45@mL:
   411                           	callstack 0
   412   00001E                     right_45@mL:
   413                           	callstack 0
   414   00001E                     space@mL:
   415                           	callstack 0
   416                           
   417                           ; 2 bytes @ 0x1D
   418   00001E                     	ds	1
   419   00001F                     ___fldiv@rem:
   420                           	callstack 0
   421                           
   422                           ; 4 bytes @ 0x1E
   423   00001F                     	ds	1
   424   000020                     forward@mR:
   425                           	callstack 0
   426   000020                     reverse@mR:
   427                           	callstack 0
   428   000020                     left_45@mR:
   429                           	callstack 0
   430   000020                     right_45@mR:
   431                           	callstack 0
   432   000020                     space@mR:
   433                           	callstack 0
   434                           
   435                           ; 2 bytes @ 0x1F
   436   000020                     	ds	2
   437   000022                     ??_space:
   438   000022                     left_45@count:
   439                           	callstack 0
   440   000022                     right_45@count:
   441                           	callstack 0
   442                           
   443                           ; 2 bytes @ 0x21
   444   000022                     	ds	1
   445   000023                     ___fldiv@sign:
   446                           	callstack 0
   447                           
   448                           ; 1 bytes @ 0x22
   449   000023                     	ds	1
   450   000024                     ??_left_45:
   451   000024                     ??_right_45:
   452   000024                     ___fldiv@new_exp:
   453                           	callstack 0
   454                           
   455                           ; 2 bytes @ 0x23
   456   000024                     	ds	2
   457   000026                     left_45@i:
   458                           	callstack 0
   459   000026                     right_45@i:
   460                           	callstack 0
   461   000026                     ___fldiv@grs:
   462                           	callstack 0
   463                           
   464                           ; 4 bytes @ 0x25
   465   000026                     	ds	2
   466   000028                     instructions@mL:
   467                           	callstack 0
   468                           
   469                           ; 2 bytes @ 0x27
   470   000028                     	ds	2
   471   00002A                     ___fldiv@bexp:
   472                           	callstack 0
   473   00002A                     instructions@mR:
   474                           	callstack 0
   475                           
   476                           ; 2 bytes @ 0x29
   477   00002A                     	ds	1
   478   00002B                     ___fldiv@aexp:
   479                           	callstack 0
   480                           
   481                           ; 1 bytes @ 0x2A
   482   00002B                     	ds	1
   483   00002C                     colourcards_normaliseRGBC@c:
   484                           	callstack 0
   485   00002C                     instructions@count:
   486                           	callstack 0
   487                           
   488                           ; 2 bytes @ 0x2B
   489   00002C                     	ds	2
   490   00002E                     ??_instructions:
   491   00002E                     colourcards_normaliseRGBC@R:
   492                           	callstack 0
   493                           
   494                           ; 2 bytes @ 0x2D
   495   00002E                     	ds	2
   496   000030                     colourcards_normaliseRGBC@G:
   497                           	callstack 0
   498                           
   499                           ; 2 bytes @ 0x2F
   500   000030                     	ds	2
   501   000032                     colourcards_normaliseRGBC@B:
   502                           	callstack 0
   503                           
   504                           ; 2 bytes @ 0x31
   505   000032                     	ds	2
   506   000034                     colourcards_normaliseRGBC@C:
   507                           	callstack 0
   508                           
   509                           ; 2 bytes @ 0x33
   510   000034                     	ds	2
   511   000036                     ??_buggy_color_response:
   512                           
   513                           ; 1 bytes @ 0x35
   514   000036                     	ds	2
   515   000038                     
   516                           ; 1 bytes @ 0x37
   517 ;;
   518 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   519 ;;
   520 ;; *************** function _main *****************
   521 ;; Defined at:
   522 ;;		line 18 in file "../main.c"
   523 ;; Parameters:    Size  Location     Type
   524 ;;		None
   525 ;; Auto vars:     Size  Location     Type
   526 ;;		None
   527 ;; Return value:  Size  Location     Type
   528 ;;                  1    wreg      void 
   529 ;; Registers used:
   530 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   531 ;; Tracked objects:
   532 ;;		On entry : 0/0
   533 ;;		On exit  : 0/0
   534 ;;		Unchanged: 0/0
   535 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   536 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   537 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   538 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   539 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   540 ;;Total ram usage:        0 bytes
   541 ;; Hardware stack levels required when called: 8
   542 ;; This function calls:
   543 ;;		_I2C_2_Master_Init
   544 ;;		_Interrupts_init
   545 ;;		_buggyLEDs_init
   546 ;;		_buggy_color_response
   547 ;;		_color_click_init
   548 ;;		_initDCmotorsPWM
   549 ;;		_initUSART4
   550 ;;		_motor_init
   551 ;; This function is called by:
   552 ;;		Startup code after reset
   553 ;; This function uses a non-reentrant model
   554 ;;
   555                           
   556                           	psect	text0
   557   001826                     __ptext0:
   558                           	callstack 0
   559   001826                     _main:
   560                           	callstack 23
   561   001826                     
   562                           ;../main.c: 20:     initDCmotorsPWM(99);
   563   001826  0E00               	movlw	0
   564   001828  6E06               	movwf	(initDCmotorsPWM@PWMperiod+1)^0,c
   565   00182A  0E63               	movlw	99
   566   00182C  6E05               	movwf	initDCmotorsPWM@PWMperiod^0,c
   567   00182E  EC91  F00B         	call	_initDCmotorsPWM	;wreg free
   568   001832                     
   569                           ;../main.c: 21:     buggyLEDs_init();
   570   001832  EC07  F00E         	call	_buggyLEDs_init	;wreg free
   571   001836                     
   572                           ;../main.c: 22:     motor_init(&motorL,&motorR);
   573   001836  0E50               	movlw	low _motorL
   574   001838  6E05               	movwf	motor_init@mL^0,c
   575   00183A  0E00               	movlw	high _motorL
   576   00183C  6E06               	movwf	(motor_init@mL+1)^0,c
   577   00183E  0EB0               	movlw	low _motorR
   578   001840  6E07               	movwf	motor_init@mR^0,c
   579   001842  0E00               	movlw	high _motorR
   580   001844  6E08               	movwf	(motor_init@mR+1)^0,c
   581   001846  ECE9  F00C         	call	_motor_init	;wreg free
   582   00184A                     
   583                           ;../main.c: 23:     color_click_init();
   584   00184A  EC30  F00D         	call	_color_click_init	;wreg free
   585   00184E                     
   586                           ;../main.c: 24:     initUSART4();
   587   00184E  ECDB  F00D         	call	_initUSART4	;wreg free
   588                           
   589                           ;../main.c: 25:     Interrupts_init();
   590   001852  EC18  F00E         	call	_Interrupts_init	;wreg free
   591   001856                     
   592                           ;../main.c: 26:     I2C_2_Master_Init();
   593   001856  EC79  F00D         	call	_I2C_2_Master_Init	;wreg free
   594   00185A                     
   595                           ;../main.c: 28:     TRISGbits.TRISG1 = 0;
   596   00185A  9287               	bcf	135,1,c	;volatile
   597   00185C                     
   598                           ;../main.c: 29:     TRISAbits.TRISA4 = 0;
   599   00185C  9881               	bcf	129,4,c	;volatile
   600   00185E                     
   601                           ;../main.c: 30:     TRISFbits.TRISF7 = 0;
   602   00185E  9E86               	bcf	134,7,c	;volatile
   603   001860                     
   604                           ;../main.c: 32:     LATGbits.LATG1 = 1;
   605   001860  827F               	bsf	127,1,c	;volatile
   606   001862                     
   607                           ;../main.c: 33:     LATAbits.LATA4 = 1;
   608   001862  8879               	bsf	121,4,c	;volatile
   609   001864                     
   610                           ;../main.c: 34:     LATFbits.LATF7 = 1;
   611   001864  8E7E               	bsf	126,7,c	;volatile
   612   001866                     
   613                           ;../main.c: 36:     TRISFbits.TRISF2 = 1;
   614   001866  8486               	bsf	134,2,c	;volatile
   615   001868                     
   616                           ;../main.c: 37:     ANSELFbits.ANSELF2=0;
   617   001868  010E               	movlb	14	; () banked
   618   00186A  95B4               	bcf	180,2,b	;volatile
   619   00186C                     l2824:
   620                           
   621                           ;../main.c: 43:        buggy_color_response(&motorL,&motorR,&color);
   622   00186C  0E50               	movlw	low _motorL
   623   00186E  0100               	movlb	0	; () banked
   624   001870  6FB9               	movwf	buggy_color_response@mL& (0+255),b
   625   001872  0E00               	movlw	high _motorL
   626   001874  6FBA               	movwf	(buggy_color_response@mL+1)& (0+255),b
   627   001876  0EB0               	movlw	low _motorR
   628   001878  6FBB               	movwf	buggy_color_response@mR& (0+255),b
   629   00187A  0E00               	movlw	high _motorR
   630   00187C  6FBC               	movwf	(buggy_color_response@mR+1)& (0+255),b
   631   00187E  0E3C               	movlw	low _color
   632   001880  6FBD               	movwf	buggy_color_response@c& (0+255),b
   633   001882  0E00               	movlw	high _color
   634   001884  6FBE               	movwf	(buggy_color_response@c+1)& (0+255),b
   635   001886  EC3D  F000         	call	_buggy_color_response	;wreg free
   636   00188A  EF36  F00C         	goto	l2824
   637   00188E  EF3B  F000         	goto	start
   638   001892                     __end_of_main:
   639                           	callstack 0
   640                           
   641 ;; *************** function _motor_init *****************
   642 ;; Defined at:
   643 ;;		line 94 in file "../dc_motor.c"
   644 ;; Parameters:    Size  Location     Type
   645 ;;  mL              2    4[COMRAM] PTR struct DC_motor
   646 ;;		 -> motorL(9), 
   647 ;;  mR              2    6[COMRAM] PTR struct DC_motor
   648 ;;		 -> motorR(9), 
   649 ;; Auto vars:     Size  Location     Type
   650 ;;		None
   651 ;; Return value:  Size  Location     Type
   652 ;;                  1    wreg      void 
   653 ;; Registers used:
   654 ;;		wreg, status,2, status,0
   655 ;; Tracked objects:
   656 ;;		On entry : 0/0
   657 ;;		On exit  : 0/0
   658 ;;		Unchanged: 0/0
   659 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   660 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   661 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   662 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   663 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   664 ;;Total ram usage:        4 bytes
   665 ;; Hardware stack levels used: 1
   666 ;; Hardware stack levels required when called: 2
   667 ;; This function calls:
   668 ;;		Nothing
   669 ;; This function is called by:
   670 ;;		_main
   671 ;; This function uses a non-reentrant model
   672 ;;
   673                           
   674                           	psect	text1
   675   0019D2                     __ptext1:
   676                           	callstack 0
   677   0019D2                     _motor_init:
   678                           	callstack 28
   679   0019D2                     
   680                           ;../dc_motor.c: 94: void motor_init(DC_motor *mL, DC_motor *mR);../dc_motor.c: 95: {;../
      +                          dc_motor.c: 96:     motorL.power=0;
   681   0019D2  0E00               	movlw	0
   682   0019D4  6E50               	movwf	_motorL^0,c
   683                           
   684                           ;../dc_motor.c: 97:     motorL.direction=1;
   685   0019D6  0E01               	movlw	1
   686   0019D8  6E51               	movwf	(_motorL+1)^0,c
   687                           
   688                           ;../dc_motor.c: 98:     motorL.brakemode=1;
   689   0019DA  0E01               	movlw	1
   690   0019DC  6E52               	movwf	(_motorL+2)^0,c
   691   0019DE                     
   692                           ;../dc_motor.c: 99:     motorL.posDutyHighByte=(unsigned char *)(&CCPR1H);
   693   0019DE  0EAA               	movlw	170
   694   0019E0  6E55               	movwf	(_motorL+5)^0,c
   695   0019E2  0E0F               	movlw	15
   696   0019E4  6E56               	movwf	(_motorL+6)^0,c
   697   0019E6                     
   698                           ;../dc_motor.c: 100:     motorL.negDutyHighByte=(unsigned char *)(&CCPR2H);
   699   0019E6  0EA6               	movlw	166
   700   0019E8  6E57               	movwf	(_motorL+7)^0,c
   701   0019EA  0E0F               	movlw	15
   702   0019EC  6E58               	movwf	(_motorL+8)^0,c
   703                           
   704                           ;../dc_motor.c: 101:     motorL.PWMperiod=99;
   705   0019EE  0E00               	movlw	0
   706   0019F0  6E54               	movwf	(_motorL+4)^0,c
   707   0019F2  0E63               	movlw	99
   708   0019F4  6E53               	movwf	(_motorL+3)^0,c
   709                           
   710                           ;../dc_motor.c: 103:     motorR.power=0;
   711   0019F6  0E00               	movlw	0
   712   0019F8  0100               	movlb	0	; () banked
   713   0019FA  6FB0               	movwf	_motorR& (0+255),b
   714                           
   715                           ;../dc_motor.c: 104:     motorR.direction=1;
   716   0019FC  0E01               	movlw	1
   717   0019FE  6FB1               	movwf	(_motorR+1)& (0+255),b
   718                           
   719                           ;../dc_motor.c: 105:     motorR.brakemode=1;
   720   001A00  0E01               	movlw	1
   721   001A02  6FB2               	movwf	(_motorR+2)& (0+255),b
   722   001A04                     
   723                           ; BSR set to: 0
   724                           ;../dc_motor.c: 106:     motorR.posDutyHighByte=(unsigned char *)(&CCPR3H);
   725   001A04  0E25               	movlw	37
   726   001A06  6FB5               	movwf	(_motorR+5)& (0+255),b
   727   001A08  0E0F               	movlw	15
   728   001A0A  6FB6               	movwf	(_motorR+6)& (0+255),b
   729   001A0C                     
   730                           ; BSR set to: 0
   731                           ;../dc_motor.c: 107:     motorR.negDutyHighByte=(unsigned char *)(&CCPR4H);
   732   001A0C  0E21               	movlw	33
   733   001A0E  6FB7               	movwf	(_motorR+7)& (0+255),b
   734   001A10  0E0F               	movlw	15
   735   001A12  6FB8               	movwf	(_motorR+8)& (0+255),b
   736                           
   737                           ;../dc_motor.c: 108:     motorR.PWMperiod=99;
   738   001A14  0E00               	movlw	0
   739   001A16  6FB4               	movwf	(_motorR+4)& (0+255),b
   740   001A18  0E63               	movlw	99
   741   001A1A  6FB3               	movwf	(_motorR+3)& (0+255),b
   742   001A1C                     
   743                           ; BSR set to: 0
   744   001A1C  0012               	return		;funcret
   745   001A1E                     __end_of_motor_init:
   746                           	callstack 0
   747                           
   748 ;; *************** function _initUSART4 *****************
   749 ;; Defined at:
   750 ;;		line 5 in file "../serial.c"
   751 ;; Parameters:    Size  Location     Type
   752 ;;		None
   753 ;; Auto vars:     Size  Location     Type
   754 ;;		None
   755 ;; Return value:  Size  Location     Type
   756 ;;                  1    wreg      void 
   757 ;; Registers used:
   758 ;;		wreg, status,2
   759 ;; Tracked objects:
   760 ;;		On entry : 0/0
   761 ;;		On exit  : 0/0
   762 ;;		Unchanged: 0/0
   763 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   764 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   765 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   766 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   767 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   768 ;;Total ram usage:        0 bytes
   769 ;; Hardware stack levels used: 1
   770 ;; Hardware stack levels required when called: 2
   771 ;; This function calls:
   772 ;;		Nothing
   773 ;; This function is called by:
   774 ;;		_main
   775 ;; This function uses a non-reentrant model
   776 ;;
   777                           
   778                           	psect	text2
   779   001BB6                     __ptext2:
   780                           	callstack 0
   781   001BB6                     _initUSART4:
   782                           	callstack 28
   783   001BB6                     
   784                           ;../serial.c: 7:     RC0PPS = 0x12;
   785   001BB6  0E12               	movlw	18
   786   001BB8  010E               	movlb	14	; () banked
   787   001BBA  6F62               	movwf	98,b	;volatile
   788                           
   789                           ;../serial.c: 8:     RX4PPS = 0x11;
   790   001BBC  0E11               	movlw	17
   791   001BBE  6F15               	movwf	21,b	;volatile
   792   001BC0                     
   793                           ; BSR set to: 14
   794                           ;../serial.c: 9:     TRISCbits.TRISC1 = 1;
   795   001BC0  8283               	bsf	131,1,c	;volatile
   796   001BC2                     
   797                           ; BSR set to: 14
   798                           ;../serial.c: 12:     BAUD4CONbits.BRG16 = 0;
   799   001BC2  97E9               	bcf	233,3,b	;volatile
   800   001BC4                     
   801                           ; BSR set to: 14
   802                           ;../serial.c: 13:     TX4STAbits.BRGH = 0;
   803   001BC4  95E8               	bcf	232,2,b	;volatile
   804                           
   805                           ;../serial.c: 14:     SP4BRGL = 51;
   806   001BC6  0E33               	movlw	51
   807   001BC8  6FE5               	movwf	229,b	;volatile
   808                           
   809                           ;../serial.c: 15:     SP4BRGH = 0;
   810   001BCA  0E00               	movlw	0
   811   001BCC  6FE6               	movwf	230,b	;volatile
   812   001BCE                     
   813                           ; BSR set to: 14
   814                           ;../serial.c: 17:     RC4STAbits.CREN = 1;
   815   001BCE  89E7               	bsf	231,4,b	;volatile
   816   001BD0                     
   817                           ; BSR set to: 14
   818                           ;../serial.c: 18:     TX4STAbits.TXEN = 1;
   819   001BD0  8BE8               	bsf	232,5,b	;volatile
   820   001BD2                     
   821                           ; BSR set to: 14
   822                           ;../serial.c: 19:     RC4STAbits.SPEN = 1;
   823   001BD2  8FE7               	bsf	231,7,b	;volatile
   824   001BD4                     
   825                           ; BSR set to: 14
   826   001BD4  0012               	return		;funcret
   827   001BD6                     __end_of_initUSART4:
   828                           	callstack 0
   829                           
   830 ;; *************** function _initDCmotorsPWM *****************
   831 ;; Defined at:
   832 ;;		line 5 in file "../dc_motor.c"
   833 ;; Parameters:    Size  Location     Type
   834 ;;  PWMperiod       2    4[COMRAM] unsigned int 
   835 ;; Auto vars:     Size  Location     Type
   836 ;;		None
   837 ;; Return value:  Size  Location     Type
   838 ;;                  1    wreg      void 
   839 ;; Registers used:
   840 ;;		wreg, status,2
   841 ;; Tracked objects:
   842 ;;		On entry : 0/0
   843 ;;		On exit  : 0/0
   844 ;;		Unchanged: 0/0
   845 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   846 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   847 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   848 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   849 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   850 ;;Total ram usage:        2 bytes
   851 ;; Hardware stack levels used: 1
   852 ;; Hardware stack levels required when called: 2
   853 ;; This function calls:
   854 ;;		Nothing
   855 ;; This function is called by:
   856 ;;		_main
   857 ;; This function uses a non-reentrant model
   858 ;;
   859                           
   860                           	psect	text3
   861   001722                     __ptext3:
   862                           	callstack 0
   863   001722                     _initDCmotorsPWM:
   864                           	callstack 28
   865   001722                     
   866                           ;../dc_motor.c: 7:     TRISEbits.TRISE2 = 0;
   867   001722  9485               	bcf	133,2,c	;volatile
   868                           
   869                           ;../dc_motor.c: 8:     TRISEbits.TRISE4 = 0;
   870   001724  9885               	bcf	133,4,c	;volatile
   871                           
   872                           ;../dc_motor.c: 9:     TRISCbits.TRISC7 = 0;
   873   001726  9E83               	bcf	131,7,c	;volatile
   874                           
   875                           ;../dc_motor.c: 10:     TRISGbits.TRISG6 = 0;
   876   001728  9C87               	bcf	135,6,c	;volatile
   877                           
   878                           ;../dc_motor.c: 12:     LATEbits.LATE2 = 0;
   879   00172A  947D               	bcf	125,2,c	;volatile
   880                           
   881                           ;../dc_motor.c: 13:     LATEbits.LATE4 = 0;
   882   00172C  987D               	bcf	125,4,c	;volatile
   883                           
   884                           ;../dc_motor.c: 14:     LATCbits.LATC7 = 0;
   885   00172E  9E7B               	bcf	123,7,c	;volatile
   886                           
   887                           ;../dc_motor.c: 15:     LATGbits.LATG6 = 0;
   888   001730  9C7F               	bcf	127,6,c	;volatile
   889   001732                     
   890                           ;../dc_motor.c: 18:     RE2PPS=0x05;
   891   001732  0E05               	movlw	5
   892   001734  010E               	movlb	14	; () banked
   893   001736  6F74               	movwf	116,b	;volatile
   894                           
   895                           ;../dc_motor.c: 19:     RE4PPS=0x06;
   896   001738  0E06               	movlw	6
   897   00173A  6F76               	movwf	118,b	;volatile
   898                           
   899                           ;../dc_motor.c: 20:     RC7PPS=0x07;
   900   00173C  0E07               	movlw	7
   901   00173E  6F69               	movwf	105,b	;volatile
   902                           
   903                           ;../dc_motor.c: 21:     RG6PPS=0x08;
   904   001740  0E08               	movlw	8
   905   001742  6F88               	movwf	136,b	;volatile
   906                           
   907                           ;../dc_motor.c: 24:     T2CONbits.CKPS=0b100;
   908   001744  50BD               	movf	189,w,c	;volatile
   909   001746  0B8F               	andlw	-113
   910   001748  0940               	iorlw	64
   911   00174A  6EBD               	movwf	189,c	;volatile
   912                           
   913                           ;../dc_motor.c: 25:     T2HLTbits.MODE=0b00000;
   914   00174C  0EE0               	movlw	-32
   915   00174E  16BE               	andwf	190,f,c	;volatile
   916                           
   917                           ;../dc_motor.c: 26:     T2CLKCONbits.CS=0b0001;
   918   001750  50BF               	movf	191,w,c	;volatile
   919   001752  0BF0               	andlw	-16
   920   001754  0901               	iorlw	1
   921   001756  6EBF               	movwf	191,c	;volatile
   922   001758                     
   923                           ; BSR set to: 14
   924                           ;../dc_motor.c: 30:     T2PR=PWMperiod;
   925   001758  C005  FFBC         	movff	initDCmotorsPWM@PWMperiod,4028	;volatile
   926   00175C                     
   927                           ; BSR set to: 14
   928                           ;../dc_motor.c: 31:     T2CONbits.ON=1;
   929   00175C  8EBD               	bsf	189,7,c	;volatile
   930                           
   931                           ;../dc_motor.c: 35:     CCPR1H=0;
   932   00175E  0E00               	movlw	0
   933   001760  6EAA               	movwf	170,c	;volatile
   934                           
   935                           ;../dc_motor.c: 36:     CCPR2H=0;
   936   001762  0E00               	movlw	0
   937   001764  6EA6               	movwf	166,c	;volatile
   938                           
   939                           ;../dc_motor.c: 37:     CCPR3H=0;
   940   001766  0E00               	movlw	0
   941   001768  010F               	movlb	15	; () banked
   942   00176A  6F25               	movwf	37,b	;volatile
   943                           
   944                           ;../dc_motor.c: 38:     CCPR4H=0;
   945   00176C  0E00               	movlw	0
   946   00176E  6F21               	movwf	33,b	;volatile
   947                           
   948                           ;../dc_motor.c: 41:     CCPTMRS0bits.C1TSEL=0;
   949   001770  0EFC               	movlw	-4
   950   001772  16AD               	andwf	173,f,c	;volatile
   951                           
   952                           ;../dc_motor.c: 42:     CCPTMRS0bits.C2TSEL=0;
   953   001774  0EF3               	movlw	-13
   954   001776  16AD               	andwf	173,f,c	;volatile
   955                           
   956                           ;../dc_motor.c: 43:     CCPTMRS0bits.C3TSEL=0;
   957   001778  0ECF               	movlw	-49
   958   00177A  16AD               	andwf	173,f,c	;volatile
   959                           
   960                           ;../dc_motor.c: 44:     CCPTMRS0bits.C4TSEL=0;
   961   00177C  0E3F               	movlw	-193
   962   00177E  16AD               	andwf	173,f,c	;volatile
   963   001780                     
   964                           ; BSR set to: 15
   965                           ;../dc_motor.c: 47:     CCP1CONbits.FMT=1;
   966   001780  88AB               	bsf	171,4,c	;volatile
   967                           
   968                           ;../dc_motor.c: 48:     CCP1CONbits.CCP1MODE=0b1100;
   969   001782  50AB               	movf	171,w,c	;volatile
   970   001784  0BF0               	andlw	-16
   971   001786  090C               	iorlw	12
   972   001788  6EAB               	movwf	171,c	;volatile
   973   00178A                     
   974                           ; BSR set to: 15
   975                           ;../dc_motor.c: 49:     CCP1CONbits.EN=1;
   976   00178A  8EAB               	bsf	171,7,c	;volatile
   977   00178C                     
   978                           ; BSR set to: 15
   979                           ;../dc_motor.c: 52:     CCP2CONbits.FMT=1;
   980   00178C  88A7               	bsf	167,4,c	;volatile
   981                           
   982                           ;../dc_motor.c: 53:     CCP2CONbits.CCP2MODE=0b1100;
   983   00178E  50A7               	movf	167,w,c	;volatile
   984   001790  0BF0               	andlw	-16
   985   001792  090C               	iorlw	12
   986   001794  6EA7               	movwf	167,c	;volatile
   987   001796                     
   988                           ; BSR set to: 15
   989                           ;../dc_motor.c: 54:     CCP2CONbits.EN=1;
   990   001796  8EA7               	bsf	167,7,c	;volatile
   991   001798                     
   992                           ; BSR set to: 15
   993                           ;../dc_motor.c: 58:     CCP3CONbits.FMT=1;
   994   001798  8926               	bsf	38,4,b	;volatile
   995                           
   996                           ;../dc_motor.c: 59:     CCP3CONbits.CCP3MODE=0b1100;
   997   00179A  5126               	movf	38,w,b	;volatile
   998   00179C  0BF0               	andlw	-16
   999   00179E  090C               	iorlw	12
  1000   0017A0  6F26               	movwf	38,b	;volatile
  1001   0017A2                     
  1002                           ; BSR set to: 15
  1003                           ;../dc_motor.c: 60:     CCP3CONbits.EN=1;
  1004   0017A2  8F26               	bsf	38,7,b	;volatile
  1005   0017A4                     
  1006                           ; BSR set to: 15
  1007                           ;../dc_motor.c: 63:     CCP4CONbits.FMT=1;
  1008   0017A4  8922               	bsf	34,4,b	;volatile
  1009                           
  1010                           ;../dc_motor.c: 64:     CCP4CONbits.CCP4MODE=0b1100;
  1011   0017A6  5122               	movf	34,w,b	;volatile
  1012   0017A8  0BF0               	andlw	-16
  1013   0017AA  090C               	iorlw	12
  1014   0017AC  6F22               	movwf	34,b	;volatile
  1015   0017AE                     
  1016                           ; BSR set to: 15
  1017                           ;../dc_motor.c: 65:     CCP4CONbits.EN=1;
  1018   0017AE  8F22               	bsf	34,7,b	;volatile
  1019   0017B0                     
  1020                           ; BSR set to: 15
  1021   0017B0  0012               	return		;funcret
  1022   0017B2                     __end_of_initDCmotorsPWM:
  1023                           	callstack 0
  1024                           
  1025 ;; *************** function _color_click_init *****************
  1026 ;; Defined at:
  1027 ;;		line 7 in file "../color.c"
  1028 ;; Parameters:    Size  Location     Type
  1029 ;;		None
  1030 ;; Auto vars:     Size  Location     Type
  1031 ;;		None
  1032 ;; Return value:  Size  Location     Type
  1033 ;;                  1    wreg      void 
  1034 ;; Registers used:
  1035 ;;		wreg, status,2, status,0, cstack
  1036 ;; Tracked objects:
  1037 ;;		On entry : 0/0
  1038 ;;		On exit  : 0/0
  1039 ;;		Unchanged: 0/0
  1040 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1041 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1042 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1043 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1044 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1045 ;;Total ram usage:        1 bytes
  1046 ;; Hardware stack levels used: 1
  1047 ;; Hardware stack levels required when called: 5
  1048 ;; This function calls:
  1049 ;;		_I2C_2_Master_Init
  1050 ;;		_color_writetoaddr
  1051 ;; This function is called by:
  1052 ;;		_main
  1053 ;; This function uses a non-reentrant model
  1054 ;;
  1055                           
  1056                           	psect	text4
  1057   001A60                     __ptext4:
  1058                           	callstack 0
  1059   001A60                     _color_click_init:
  1060                           	callstack 25
  1061   001A60                     
  1062                           ;../color.c: 10:     I2C_2_Master_Init();
  1063   001A60  EC79  F00D         	call	_I2C_2_Master_Init	;wreg free
  1064   001A64                     
  1065                           ;../color.c: 12:   color_writetoaddr(0x00, 0x01);
  1066   001A64  0E01               	movlw	1
  1067   001A66  6E07               	movwf	color_writetoaddr@value^0,c
  1068   001A68  0E00               	movlw	0
  1069   001A6A  ECEB  F00D         	call	_color_writetoaddr
  1070   001A6E                     
  1071                           ;../color.c: 13:     _delay((unsigned long)((3)*(64000000/4000.0)));
  1072   001A6E  0E3F               	movlw	63
  1073   001A70  6E09               	movwf	??_color_click_init^0,c
  1074   001A72  0E55               	movlw	85
  1075   001A74                     u2287:
  1076   001A74  2EE8               	decfsz	wreg,f,c
  1077   001A76  D7FE               	bra	u2287
  1078   001A78  2E09               	decfsz	??_color_click_init^0,f,c
  1079   001A7A  D7FC               	bra	u2287
  1080   001A7C  F000               	nop	
  1081   001A7E                     
  1082                           ;../color.c: 15:  color_writetoaddr(0x00, 0x03);
  1083   001A7E  0E03               	movlw	3
  1084   001A80  6E07               	movwf	color_writetoaddr@value^0,c
  1085   001A82  0E00               	movlw	0
  1086   001A84  ECEB  F00D         	call	_color_writetoaddr
  1087   001A88                     
  1088                           ;../color.c: 17:  color_writetoaddr(0x01, 0xD5);
  1089   001A88  0ED5               	movlw	213
  1090   001A8A  6E07               	movwf	color_writetoaddr@value^0,c
  1091   001A8C  0E01               	movlw	1
  1092   001A8E  ECEB  F00D         	call	_color_writetoaddr
  1093   001A92  0012               	return		;funcret
  1094   001A94                     __end_of_color_click_init:
  1095                           	callstack 0
  1096                           
  1097 ;; *************** function _color_writetoaddr *****************
  1098 ;; Defined at:
  1099 ;;		line 20 in file "../color.c"
  1100 ;; Parameters:    Size  Location     Type
  1101 ;;  address         1    wreg     unsigned char 
  1102 ;;  value           1    6[COMRAM] unsigned char 
  1103 ;; Auto vars:     Size  Location     Type
  1104 ;;  address         1    7[COMRAM] unsigned char 
  1105 ;; Return value:  Size  Location     Type
  1106 ;;                  1    wreg      void 
  1107 ;; Registers used:
  1108 ;;		wreg, status,2, status,0, cstack
  1109 ;; Tracked objects:
  1110 ;;		On entry : 0/0
  1111 ;;		On exit  : 0/0
  1112 ;;		Unchanged: 0/0
  1113 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1114 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1115 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1116 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1117 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1118 ;;Total ram usage:        2 bytes
  1119 ;; Hardware stack levels used: 1
  1120 ;; Hardware stack levels required when called: 4
  1121 ;; This function calls:
  1122 ;;		_I2C_2_Master_Start
  1123 ;;		_I2C_2_Master_Stop
  1124 ;;		_I2C_2_Master_Write
  1125 ;; This function is called by:
  1126 ;;		_color_click_init
  1127 ;; This function uses a non-reentrant model
  1128 ;;
  1129                           
  1130                           	psect	text5
  1131   001BD6                     __ptext5:
  1132                           	callstack 0
  1133   001BD6                     _color_writetoaddr:
  1134                           	callstack 25
  1135                           
  1136                           ;incstack = 0
  1137                           ;color_writetoaddr@address stored from wreg
  1138   001BD6  6E08               	movwf	color_writetoaddr@address^0,c
  1139   001BD8                     
  1140                           ;../color.c: 21:     I2C_2_Master_Start();
  1141   001BD8  EC23  F00E         	call	_I2C_2_Master_Start	;wreg free
  1142                           
  1143                           ;../color.c: 22:     I2C_2_Master_Write(0x52 | 0x00);
  1144   001BDC  0E52               	movlw	82
  1145   001BDE  EC12  F00E         	call	_I2C_2_Master_Write
  1146                           
  1147                           ;../color.c: 23:     I2C_2_Master_Write(0x80 | address);
  1148   001BE2  5008               	movf	color_writetoaddr@address^0,w,c
  1149   001BE4  0980               	iorlw	128
  1150   001BE6  EC12  F00E         	call	_I2C_2_Master_Write
  1151                           
  1152                           ;../color.c: 24:     I2C_2_Master_Write(value);
  1153   001BEA  5007               	movf	color_writetoaddr@value^0,w,c
  1154   001BEC  EC12  F00E         	call	_I2C_2_Master_Write
  1155                           
  1156                           ;../color.c: 25:     I2C_2_Master_Stop();
  1157   001BF0  EC1E  F00E         	call	_I2C_2_Master_Stop	;wreg free
  1158   001BF4  0012               	return		;funcret
  1159   001BF6                     __end_of_color_writetoaddr:
  1160                           	callstack 0
  1161                           
  1162 ;; *************** function _I2C_2_Master_Init *****************
  1163 ;; Defined at:
  1164 ;;		line 4 in file "../i2c.c"
  1165 ;; Parameters:    Size  Location     Type
  1166 ;;		None
  1167 ;; Auto vars:     Size  Location     Type
  1168 ;;		None
  1169 ;; Return value:  Size  Location     Type
  1170 ;;                  1    wreg      void 
  1171 ;; Registers used:
  1172 ;;		wreg, status,2
  1173 ;; Tracked objects:
  1174 ;;		On entry : 0/0
  1175 ;;		On exit  : 0/0
  1176 ;;		Unchanged: 0/0
  1177 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1178 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1179 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1180 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1181 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1182 ;;Total ram usage:        0 bytes
  1183 ;; Hardware stack levels used: 1
  1184 ;; Hardware stack levels required when called: 2
  1185 ;; This function calls:
  1186 ;;		Nothing
  1187 ;; This function is called by:
  1188 ;;		_color_click_init
  1189 ;;		_main
  1190 ;; This function uses a non-reentrant model
  1191 ;;
  1192                           
  1193                           	psect	text6
  1194   001AF2                     __ptext6:
  1195                           	callstack 0
  1196   001AF2                     _I2C_2_Master_Init:
  1197                           	callstack 27
  1198   001AF2                     
  1199                           ;../i2c.c: 7:   SSP2CON1bits.SSPM= 0b1000;
  1200   001AF2  010E               	movlb	14	; () banked
  1201   001AF4  51D9               	movf	217,w,b	;volatile
  1202   001AF6  0BF0               	andlw	-16
  1203   001AF8  0908               	iorlw	8
  1204   001AFA  6FD9               	movwf	217,b	;volatile
  1205   001AFC                     
  1206                           ; BSR set to: 14
  1207                           ;../i2c.c: 8:   SSP2CON1bits.SSPEN = 1;
  1208   001AFC  8BD9               	bsf	217,5,b	;volatile
  1209                           
  1210                           ;../i2c.c: 9:   SSP2ADD = (64000000/(4*100000))-1;
  1211   001AFE  0E9F               	movlw	159
  1212   001B00  6FD6               	movwf	214,b	;volatile
  1213   001B02                     
  1214                           ; BSR set to: 14
  1215                           ;../i2c.c: 12:   TRISDbits.TRISD5 = 1;
  1216   001B02  8A84               	bsf	132,5,c	;volatile
  1217   001B04                     
  1218                           ; BSR set to: 14
  1219                           ;../i2c.c: 13:   TRISDbits.TRISD6 = 1;
  1220   001B04  8C84               	bsf	132,6,c	;volatile
  1221   001B06                     
  1222                           ; BSR set to: 14
  1223                           ;../i2c.c: 14:   ANSELDbits.ANSELD5=0;
  1224   001B06  9BA7               	bcf	167,5,b	;volatile
  1225   001B08                     
  1226                           ; BSR set to: 14
  1227                           ;../i2c.c: 15:   ANSELDbits.ANSELD6=0;
  1228   001B08  9DA7               	bcf	167,6,b	;volatile
  1229                           
  1230                           ;../i2c.c: 16:   SSP2DATPPS=0x1D;
  1231   001B0A  0E1D               	movlw	29
  1232   001B0C  6F1D               	movwf	29,b	;volatile
  1233                           
  1234                           ;../i2c.c: 17:   SSP2CLKPPS=0x1E;
  1235   001B0E  0E1E               	movlw	30
  1236   001B10  6F1C               	movwf	28,b	;volatile
  1237                           
  1238                           ;../i2c.c: 18:   RD5PPS=0x1C;
  1239   001B12  0E1C               	movlw	28
  1240   001B14  6F6F               	movwf	111,b	;volatile
  1241                           
  1242                           ;../i2c.c: 19:   RD6PPS=0x1B;
  1243   001B16  0E1B               	movlw	27
  1244   001B18  6F70               	movwf	112,b	;volatile
  1245   001B1A                     
  1246                           ; BSR set to: 14
  1247   001B1A  0012               	return		;funcret
  1248   001B1C                     __end_of_I2C_2_Master_Init:
  1249                           	callstack 0
  1250                           
  1251 ;; *************** function _buggy_color_response *****************
  1252 ;; Defined at:
  1253 ;;		line 100 in file "../color.c"
  1254 ;; Parameters:    Size  Location     Type
  1255 ;;  mL              2    0[BANK0 ] PTR struct DC_motor
  1256 ;;		 -> motorL(9), 
  1257 ;;  mR              2    2[BANK0 ] PTR struct DC_motor
  1258 ;;		 -> motorR(9), 
  1259 ;;  c               2    4[BANK0 ] PTR struct colors
  1260 ;;		 -> color(20), 
  1261 ;; Auto vars:     Size  Location     Type
  1262 ;;		None
  1263 ;; Return value:  Size  Location     Type
  1264 ;;                  1    wreg      void 
  1265 ;; Registers used:
  1266 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1267 ;; Tracked objects:
  1268 ;;		On entry : 0/0
  1269 ;;		On exit  : 0/0
  1270 ;;		Unchanged: 0/0
  1271 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1272 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1273 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1274 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1275 ;;      Totals:         2       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1276 ;;Total ram usage:        8 bytes
  1277 ;; Hardware stack levels used: 1
  1278 ;; Hardware stack levels required when called: 7
  1279 ;; This function calls:
  1280 ;;		_READcolor
  1281 ;;		___flge
  1282 ;;		_colourcards_normaliseRGBC
  1283 ;;		_forward
  1284 ;;		_instructions
  1285 ;;		_stop
  1286 ;; This function is called by:
  1287 ;;		_main
  1288 ;; This function uses a non-reentrant model
  1289 ;;
  1290                           
  1291                           	psect	text7
  1292   00007A                     __ptext7:
  1293                           	callstack 0
  1294   00007A                     _buggy_color_response:
  1295                           	callstack 23
  1296   00007A                     
  1297                           ;../color.c: 101:     READcolor(&color);
  1298   00007A  0E3C               	movlw	low _color
  1299   00007C  6E10               	movwf	READcolor@c^0,c
  1300   00007E  0E00               	movlw	high _color
  1301   000080  6E11               	movwf	(READcolor@c+1)^0,c
  1302   000082  EC4A  F00D         	call	_READcolor	;wreg free
  1303                           
  1304                           ;../color.c: 102:     colourcards_normaliseRGBC(&color);
  1305   000086  0E3C               	movlw	low _color
  1306   000088  6E2C               	movwf	colourcards_normaliseRGBC@c^0,c
  1307   00008A  0E00               	movlw	high _color
  1308   00008C  6E2D               	movwf	(colourcards_normaliseRGBC@c+1)^0,c
  1309   00008E  ECE4  F008         	call	_colourcards_normaliseRGBC	;wreg free
  1310   000092                     
  1311                           ;../color.c: 103:     if (color.C > 2500){stop(mL,mR);_delay((unsigned long)((500)*(6400
      +                          0000/4000.0)));READcolor(&color);colourcards_normaliseRGBC(&color);_delay((unsigned long
      +                          )((500)*(64000000/4000.0)));
  1312   000092  0EC5               	movlw	197
  1313   000094  5C42               	subwf	(_color+6)^0,w,c
  1314   000096  0E09               	movlw	9
  1315   000098  5843               	subwfb	(_color+7)^0,w,c
  1316   00009A  A0D8               	btfss	status,0,c
  1317   00009C  EF52  F000         	goto	u2081
  1318   0000A0  EF54  F000         	goto	u2080
  1319   0000A4                     u2081:
  1320   0000A4  EFD3  F002         	goto	l2794
  1321   0000A8                     u2080:
  1322   0000A8  C0B9  F018         	movff	buggy_color_response@mL,stop@mL
  1323   0000AC  C0BA  F019         	movff	buggy_color_response@mL+1,stop@mL+1
  1324   0000B0  C0BB  F01A         	movff	buggy_color_response@mR,stop@mR
  1325   0000B4  C0BC  F01B         	movff	buggy_color_response@mR+1,stop@mR+1
  1326   0000B8  EC39  F00B         	call	_stop	;wreg free
  1327   0000BC  0E29               	movlw	41
  1328   0000BE  6E37               	movwf	(??_buggy_color_response+1)^0,c
  1329   0000C0  0E96               	movlw	150
  1330   0000C2  6E36               	movwf	??_buggy_color_response^0,c
  1331   0000C4  0E7F               	movlw	127
  1332   0000C6                     u2297:
  1333   0000C6  2EE8               	decfsz	wreg,f,c
  1334   0000C8  D7FE               	bra	u2297
  1335   0000CA  2E36               	decfsz	??_buggy_color_response^0,f,c
  1336   0000CC  D7FC               	bra	u2297
  1337   0000CE  2E37               	decfsz	(??_buggy_color_response+1)^0,f,c
  1338   0000D0  D7FA               	bra	u2297
  1339   0000D2  F000               	nop	
  1340   0000D4  0E3C               	movlw	low _color
  1341   0000D6  6E10               	movwf	READcolor@c^0,c
  1342   0000D8  0E00               	movlw	high _color
  1343   0000DA  6E11               	movwf	(READcolor@c+1)^0,c
  1344   0000DC  EC4A  F00D         	call	_READcolor	;wreg free
  1345   0000E0  0E3C               	movlw	low _color
  1346   0000E2  6E2C               	movwf	colourcards_normaliseRGBC@c^0,c
  1347   0000E4  0E00               	movlw	high _color
  1348   0000E6  6E2D               	movwf	(colourcards_normaliseRGBC@c+1)^0,c
  1349   0000E8  ECE4  F008         	call	_colourcards_normaliseRGBC	;wreg free
  1350   0000EC  0E29               	movlw	41
  1351   0000EE  6E37               	movwf	(??_buggy_color_response+1)^0,c
  1352   0000F0  0E96               	movlw	150
  1353   0000F2  6E36               	movwf	??_buggy_color_response^0,c
  1354   0000F4  0E7F               	movlw	127
  1355   0000F6                     u2307:
  1356   0000F6  2EE8               	decfsz	wreg,f,c
  1357   0000F8  D7FE               	bra	u2307
  1358   0000FA  2E36               	decfsz	??_buggy_color_response^0,f,c
  1359   0000FC  D7FC               	bra	u2307
  1360   0000FE  2E37               	decfsz	(??_buggy_color_response+1)^0,f,c
  1361   000100  D7FA               	bra	u2307
  1362   000102  F000               	nop	
  1363   000104                     
  1364                           ;../color.c: 104:     if (color.R_norm > 0.77 && color.B_norm < 0.18 && color.G_norm < 0
      +                          .14){
  1365   000104  0EB8               	movlw	184
  1366   000106  6E05               	movwf	___flge@ff1^0,c
  1367   000108  0E1E               	movlw	30
  1368   00010A  6E06               	movwf	(___flge@ff1+1)^0,c
  1369   00010C  0E45               	movlw	69
  1370   00010E  6E07               	movwf	(___flge@ff1+2)^0,c
  1371   000110  0E3F               	movlw	63
  1372   000112  6E08               	movwf	(___flge@ff1+3)^0,c
  1373   000114  C044  F009         	movff	_color+8,___flge@ff2
  1374   000118  C045  F00A         	movff	_color+9,___flge@ff2+1
  1375   00011C  C046  F00B         	movff	_color+10,___flge@ff2+2
  1376   000120  C047  F00C         	movff	_color+11,___flge@ff2+3
  1377   000124  EC79  F009         	call	___flge	;wreg free
  1378   000128  B0D8               	btfsc	status,0,c
  1379   00012A  EF99  F000         	goto	u2091
  1380   00012E  EF9B  F000         	goto	u2090
  1381   000132                     u2091:
  1382   000132  EFDB  F000         	goto	l2746
  1383   000136                     u2090:
  1384   000136  C048  F005         	movff	_color+12,___flge@ff1
  1385   00013A  C049  F006         	movff	_color+13,___flge@ff1+1
  1386   00013E  C04A  F007         	movff	_color+14,___flge@ff1+2
  1387   000142  C04B  F008         	movff	_color+15,___flge@ff1+3
  1388   000146  0EEC               	movlw	236
  1389   000148  6E09               	movwf	___flge@ff2^0,c
  1390   00014A  0E51               	movlw	81
  1391   00014C  6E0A               	movwf	(___flge@ff2+1)^0,c
  1392   00014E  0E38               	movlw	56
  1393   000150  6E0B               	movwf	(___flge@ff2+2)^0,c
  1394   000152  0E3E               	movlw	62
  1395   000154  6E0C               	movwf	(___flge@ff2+3)^0,c
  1396   000156  EC79  F009         	call	___flge	;wreg free
  1397   00015A  B0D8               	btfsc	status,0,c
  1398   00015C  EFB2  F000         	goto	u2101
  1399   000160  EFB4  F000         	goto	u2100
  1400   000164                     u2101:
  1401   000164  EFDB  F000         	goto	l2746
  1402   000168                     u2100:
  1403   000168  C04C  F005         	movff	_color+16,___flge@ff1
  1404   00016C  C04D  F006         	movff	_color+17,___flge@ff1+1
  1405   000170  C04E  F007         	movff	_color+18,___flge@ff1+2
  1406   000174  C04F  F008         	movff	_color+19,___flge@ff1+3
  1407   000178  0E29               	movlw	41
  1408   00017A  6E09               	movwf	___flge@ff2^0,c
  1409   00017C  0E5C               	movlw	92
  1410   00017E  6E0A               	movwf	(___flge@ff2+1)^0,c
  1411   000180  0E0F               	movlw	15
  1412   000182  6E0B               	movwf	(___flge@ff2+2)^0,c
  1413   000184  0E3E               	movlw	62
  1414   000186  6E0C               	movwf	(___flge@ff2+3)^0,c
  1415   000188  EC79  F009         	call	___flge	;wreg free
  1416   00018C  B0D8               	btfsc	status,0,c
  1417   00018E  EFCB  F000         	goto	u2111
  1418   000192  EFCD  F000         	goto	u2110
  1419   000196                     u2111:
  1420   000196  EFDB  F000         	goto	l2746
  1421   00019A                     u2110:
  1422   00019A                     
  1423                           ;../color.c: 105:     instructions(mL,mR,1);
  1424   00019A  C0B9  F028         	movff	buggy_color_response@mL,instructions@mL
  1425   00019E  C0BA  F029         	movff	buggy_color_response@mL+1,instructions@mL+1
  1426   0001A2  C0BB  F02A         	movff	buggy_color_response@mR,instructions@mR
  1427   0001A6  C0BC  F02B         	movff	buggy_color_response@mR+1,instructions@mR+1
  1428   0001AA  0E00               	movlw	0
  1429   0001AC  6E2D               	movwf	(instructions@count+1)^0,c
  1430   0001AE  0E01               	movlw	1
  1431   0001B0  6E2C               	movwf	instructions@count^0,c
  1432   0001B2  ECAB  F004         	call	_instructions	;wreg free
  1433   0001B6                     l2746:
  1434                           
  1435                           ;../color.c: 107:     if (color.B_norm < 0.25 && color.G_norm > 0.40) {
  1436   0001B6  C048  F005         	movff	_color+12,___flge@ff1
  1437   0001BA  C049  F006         	movff	_color+13,___flge@ff1+1
  1438   0001BE  C04A  F007         	movff	_color+14,___flge@ff1+2
  1439   0001C2  C04B  F008         	movff	_color+15,___flge@ff1+3
  1440   0001C6  0E00               	movlw	0
  1441   0001C8  6E09               	movwf	___flge@ff2^0,c
  1442   0001CA  0E00               	movlw	0
  1443   0001CC  6E0A               	movwf	(___flge@ff2+1)^0,c
  1444   0001CE  0E80               	movlw	128
  1445   0001D0  6E0B               	movwf	(___flge@ff2+2)^0,c
  1446   0001D2  0E3E               	movlw	62
  1447   0001D4  6E0C               	movwf	(___flge@ff2+3)^0,c
  1448   0001D6  EC79  F009         	call	___flge	;wreg free
  1449   0001DA  B0D8               	btfsc	status,0,c
  1450   0001DC  EFF2  F000         	goto	u2121
  1451   0001E0  EFF4  F000         	goto	u2120
  1452   0001E4                     u2121:
  1453   0001E4  EF1B  F001         	goto	l2752
  1454   0001E8                     u2120:
  1455   0001E8  0ECD               	movlw	205
  1456   0001EA  6E05               	movwf	___flge@ff1^0,c
  1457   0001EC  0ECC               	movlw	204
  1458   0001EE  6E06               	movwf	(___flge@ff1+1)^0,c
  1459   0001F0  0ECC               	movlw	204
  1460   0001F2  6E07               	movwf	(___flge@ff1+2)^0,c
  1461   0001F4  0E3E               	movlw	62
  1462   0001F6  6E08               	movwf	(___flge@ff1+3)^0,c
  1463   0001F8  C04C  F009         	movff	_color+16,___flge@ff2
  1464   0001FC  C04D  F00A         	movff	_color+17,___flge@ff2+1
  1465   000200  C04E  F00B         	movff	_color+18,___flge@ff2+2
  1466   000204  C04F  F00C         	movff	_color+19,___flge@ff2+3
  1467   000208  EC79  F009         	call	___flge	;wreg free
  1468   00020C  B0D8               	btfsc	status,0,c
  1469   00020E  EF0B  F001         	goto	u2131
  1470   000212  EF0D  F001         	goto	u2130
  1471   000216                     u2131:
  1472   000216  EF1B  F001         	goto	l2752
  1473   00021A                     u2130:
  1474   00021A                     
  1475                           ;../color.c: 108:     instructions(mL,mR,2);
  1476   00021A  C0B9  F028         	movff	buggy_color_response@mL,instructions@mL
  1477   00021E  C0BA  F029         	movff	buggy_color_response@mL+1,instructions@mL+1
  1478   000222  C0BB  F02A         	movff	buggy_color_response@mR,instructions@mR
  1479   000226  C0BC  F02B         	movff	buggy_color_response@mR+1,instructions@mR+1
  1480   00022A  0E00               	movlw	0
  1481   00022C  6E2D               	movwf	(instructions@count+1)^0,c
  1482   00022E  0E02               	movlw	2
  1483   000230  6E2C               	movwf	instructions@count^0,c
  1484   000232  ECAB  F004         	call	_instructions	;wreg free
  1485   000236                     l2752:
  1486                           
  1487                           ;../color.c: 110:     if (color.R_norm < 0.38 && color.B_norm > 0.32 && color.G_norm > 0
      +                          .34){
  1488   000236  C044  F005         	movff	_color+8,___flge@ff1
  1489   00023A  C045  F006         	movff	_color+9,___flge@ff1+1
  1490   00023E  C046  F007         	movff	_color+10,___flge@ff1+2
  1491   000242  C047  F008         	movff	_color+11,___flge@ff1+3
  1492   000246  0E5C               	movlw	92
  1493   000248  6E09               	movwf	___flge@ff2^0,c
  1494   00024A  0E8F               	movlw	143
  1495   00024C  6E0A               	movwf	(___flge@ff2+1)^0,c
  1496   00024E  0EC2               	movlw	194
  1497   000250  6E0B               	movwf	(___flge@ff2+2)^0,c
  1498   000252  0E3E               	movlw	62
  1499   000254  6E0C               	movwf	(___flge@ff2+3)^0,c
  1500   000256  EC79  F009         	call	___flge	;wreg free
  1501   00025A  B0D8               	btfsc	status,0,c
  1502   00025C  EF32  F001         	goto	u2141
  1503   000260  EF34  F001         	goto	u2140
  1504   000264                     u2141:
  1505   000264  EF74  F001         	goto	l2760
  1506   000268                     u2140:
  1507   000268  0E0A               	movlw	10
  1508   00026A  6E05               	movwf	___flge@ff1^0,c
  1509   00026C  0ED7               	movlw	215
  1510   00026E  6E06               	movwf	(___flge@ff1+1)^0,c
  1511   000270  0EA3               	movlw	163
  1512   000272  6E07               	movwf	(___flge@ff1+2)^0,c
  1513   000274  0E3E               	movlw	62
  1514   000276  6E08               	movwf	(___flge@ff1+3)^0,c
  1515   000278  C048  F009         	movff	_color+12,___flge@ff2
  1516   00027C  C049  F00A         	movff	_color+13,___flge@ff2+1
  1517   000280  C04A  F00B         	movff	_color+14,___flge@ff2+2
  1518   000284  C04B  F00C         	movff	_color+15,___flge@ff2+3
  1519   000288  EC79  F009         	call	___flge	;wreg free
  1520   00028C  B0D8               	btfsc	status,0,c
  1521   00028E  EF4B  F001         	goto	u2151
  1522   000292  EF4D  F001         	goto	u2150
  1523   000296                     u2151:
  1524   000296  EF74  F001         	goto	l2760
  1525   00029A                     u2150:
  1526   00029A  0E7B               	movlw	123
  1527   00029C  6E05               	movwf	___flge@ff1^0,c
  1528   00029E  0E14               	movlw	20
  1529   0002A0  6E06               	movwf	(___flge@ff1+1)^0,c
  1530   0002A2  0EAE               	movlw	174
  1531   0002A4  6E07               	movwf	(___flge@ff1+2)^0,c
  1532   0002A6  0E3E               	movlw	62
  1533   0002A8  6E08               	movwf	(___flge@ff1+3)^0,c
  1534   0002AA  C04C  F009         	movff	_color+16,___flge@ff2
  1535   0002AE  C04D  F00A         	movff	_color+17,___flge@ff2+1
  1536   0002B2  C04E  F00B         	movff	_color+18,___flge@ff2+2
  1537   0002B6  C04F  F00C         	movff	_color+19,___flge@ff2+3
  1538   0002BA  EC79  F009         	call	___flge	;wreg free
  1539   0002BE  B0D8               	btfsc	status,0,c
  1540   0002C0  EF64  F001         	goto	u2161
  1541   0002C4  EF66  F001         	goto	u2160
  1542   0002C8                     u2161:
  1543   0002C8  EF74  F001         	goto	l2760
  1544   0002CC                     u2160:
  1545   0002CC                     
  1546                           ;../color.c: 111:     instructions(mL,mR,3);
  1547   0002CC  C0B9  F028         	movff	buggy_color_response@mL,instructions@mL
  1548   0002D0  C0BA  F029         	movff	buggy_color_response@mL+1,instructions@mL+1
  1549   0002D4  C0BB  F02A         	movff	buggy_color_response@mR,instructions@mR
  1550   0002D8  C0BC  F02B         	movff	buggy_color_response@mR+1,instructions@mR+1
  1551   0002DC  0E00               	movlw	0
  1552   0002DE  6E2D               	movwf	(instructions@count+1)^0,c
  1553   0002E0  0E03               	movlw	3
  1554   0002E2  6E2C               	movwf	instructions@count^0,c
  1555   0002E4  ECAB  F004         	call	_instructions	;wreg free
  1556   0002E8                     l2760:
  1557                           
  1558                           ;../color.c: 113:     if (color.R_norm > 0.52 && color.G_norm > 0.32){
  1559   0002E8  0EB8               	movlw	184
  1560   0002EA  6E05               	movwf	___flge@ff1^0,c
  1561   0002EC  0E1E               	movlw	30
  1562   0002EE  6E06               	movwf	(___flge@ff1+1)^0,c
  1563   0002F0  0E05               	movlw	5
  1564   0002F2  6E07               	movwf	(___flge@ff1+2)^0,c
  1565   0002F4  0E3F               	movlw	63
  1566   0002F6  6E08               	movwf	(___flge@ff1+3)^0,c
  1567   0002F8  C044  F009         	movff	_color+8,___flge@ff2
  1568   0002FC  C045  F00A         	movff	_color+9,___flge@ff2+1
  1569   000300  C046  F00B         	movff	_color+10,___flge@ff2+2
  1570   000304  C047  F00C         	movff	_color+11,___flge@ff2+3
  1571   000308  EC79  F009         	call	___flge	;wreg free
  1572   00030C  B0D8               	btfsc	status,0,c
  1573   00030E  EF8B  F001         	goto	u2171
  1574   000312  EF8D  F001         	goto	u2170
  1575   000316                     u2171:
  1576   000316  EFB4  F001         	goto	l2766
  1577   00031A                     u2170:
  1578   00031A  0E0A               	movlw	10
  1579   00031C  6E05               	movwf	___flge@ff1^0,c
  1580   00031E  0ED7               	movlw	215
  1581   000320  6E06               	movwf	(___flge@ff1+1)^0,c
  1582   000322  0EA3               	movlw	163
  1583   000324  6E07               	movwf	(___flge@ff1+2)^0,c
  1584   000326  0E3E               	movlw	62
  1585   000328  6E08               	movwf	(___flge@ff1+3)^0,c
  1586   00032A  C04C  F009         	movff	_color+16,___flge@ff2
  1587   00032E  C04D  F00A         	movff	_color+17,___flge@ff2+1
  1588   000332  C04E  F00B         	movff	_color+18,___flge@ff2+2
  1589   000336  C04F  F00C         	movff	_color+19,___flge@ff2+3
  1590   00033A  EC79  F009         	call	___flge	;wreg free
  1591   00033E  B0D8               	btfsc	status,0,c
  1592   000340  EFA4  F001         	goto	u2181
  1593   000344  EFA6  F001         	goto	u2180
  1594   000348                     u2181:
  1595   000348  EFB4  F001         	goto	l2766
  1596   00034C                     u2180:
  1597   00034C                     
  1598                           ;../color.c: 114:     instructions(mL,mR,4);
  1599   00034C  C0B9  F028         	movff	buggy_color_response@mL,instructions@mL
  1600   000350  C0BA  F029         	movff	buggy_color_response@mL+1,instructions@mL+1
  1601   000354  C0BB  F02A         	movff	buggy_color_response@mR,instructions@mR
  1602   000358  C0BC  F02B         	movff	buggy_color_response@mR+1,instructions@mR+1
  1603   00035C  0E00               	movlw	0
  1604   00035E  6E2D               	movwf	(instructions@count+1)^0,c
  1605   000360  0E04               	movlw	4
  1606   000362  6E2C               	movwf	instructions@count^0,c
  1607   000364  ECAB  F004         	call	_instructions	;wreg free
  1608   000368                     l2766:
  1609                           
  1610                           ;../color.c: 116:     if (color.R_norm > 0.50 && color.B_norm > 0.24 && color.G_norm < 0
      +                          .33){
  1611   000368  0E00               	movlw	0
  1612   00036A  6E05               	movwf	___flge@ff1^0,c
  1613   00036C  0E00               	movlw	0
  1614   00036E  6E06               	movwf	(___flge@ff1+1)^0,c
  1615   000370  0E00               	movlw	0
  1616   000372  6E07               	movwf	(___flge@ff1+2)^0,c
  1617   000374  0E3F               	movlw	63
  1618   000376  6E08               	movwf	(___flge@ff1+3)^0,c
  1619   000378  C044  F009         	movff	_color+8,___flge@ff2
  1620   00037C  C045  F00A         	movff	_color+9,___flge@ff2+1
  1621   000380  C046  F00B         	movff	_color+10,___flge@ff2+2
  1622   000384  C047  F00C         	movff	_color+11,___flge@ff2+3
  1623   000388  EC79  F009         	call	___flge	;wreg free
  1624   00038C  B0D8               	btfsc	status,0,c
  1625   00038E  EFCB  F001         	goto	u2191
  1626   000392  EFCD  F001         	goto	u2190
  1627   000396                     u2191:
  1628   000396  EF0D  F002         	goto	l2774
  1629   00039A                     u2190:
  1630   00039A  0E8F               	movlw	143
  1631   00039C  6E05               	movwf	___flge@ff1^0,c
  1632   00039E  0EC2               	movlw	194
  1633   0003A0  6E06               	movwf	(___flge@ff1+1)^0,c
  1634   0003A2  0E75               	movlw	117
  1635   0003A4  6E07               	movwf	(___flge@ff1+2)^0,c
  1636   0003A6  0E3E               	movlw	62
  1637   0003A8  6E08               	movwf	(___flge@ff1+3)^0,c
  1638   0003AA  C048  F009         	movff	_color+12,___flge@ff2
  1639   0003AE  C049  F00A         	movff	_color+13,___flge@ff2+1
  1640   0003B2  C04A  F00B         	movff	_color+14,___flge@ff2+2
  1641   0003B6  C04B  F00C         	movff	_color+15,___flge@ff2+3
  1642   0003BA  EC79  F009         	call	___flge	;wreg free
  1643   0003BE  B0D8               	btfsc	status,0,c
  1644   0003C0  EFE4  F001         	goto	u2201
  1645   0003C4  EFE6  F001         	goto	u2200
  1646   0003C8                     u2201:
  1647   0003C8  EF0D  F002         	goto	l2774
  1648   0003CC                     u2200:
  1649   0003CC  C04C  F005         	movff	_color+16,___flge@ff1
  1650   0003D0  C04D  F006         	movff	_color+17,___flge@ff1+1
  1651   0003D4  C04E  F007         	movff	_color+18,___flge@ff1+2
  1652   0003D8  C04F  F008         	movff	_color+19,___flge@ff1+3
  1653   0003DC  0EC3               	movlw	195
  1654   0003DE  6E09               	movwf	___flge@ff2^0,c
  1655   0003E0  0EF5               	movlw	245
  1656   0003E2  6E0A               	movwf	(___flge@ff2+1)^0,c
  1657   0003E4  0EA8               	movlw	168
  1658   0003E6  6E0B               	movwf	(___flge@ff2+2)^0,c
  1659   0003E8  0E3E               	movlw	62
  1660   0003EA  6E0C               	movwf	(___flge@ff2+3)^0,c
  1661   0003EC  EC79  F009         	call	___flge	;wreg free
  1662   0003F0  B0D8               	btfsc	status,0,c
  1663   0003F2  EFFD  F001         	goto	u2211
  1664   0003F6  EFFF  F001         	goto	u2210
  1665   0003FA                     u2211:
  1666   0003FA  EF0D  F002         	goto	l2774
  1667   0003FE                     u2210:
  1668   0003FE                     
  1669                           ;../color.c: 117:     instructions(mL,mR,5);
  1670   0003FE  C0B9  F028         	movff	buggy_color_response@mL,instructions@mL
  1671   000402  C0BA  F029         	movff	buggy_color_response@mL+1,instructions@mL+1
  1672   000406  C0BB  F02A         	movff	buggy_color_response@mR,instructions@mR
  1673   00040A  C0BC  F02B         	movff	buggy_color_response@mR+1,instructions@mR+1
  1674   00040E  0E00               	movlw	0
  1675   000410  6E2D               	movwf	(instructions@count+1)^0,c
  1676   000412  0E05               	movlw	5
  1677   000414  6E2C               	movwf	instructions@count^0,c
  1678   000416  ECAB  F004         	call	_instructions	;wreg free
  1679   00041A                     l2774:
  1680                           
  1681                           ;../color.c: 119:     if (color.R_norm > 0.60 && color.B_norm < 0.22 && color.G_norm > 0
      +                          .23){
  1682   00041A  0E9A               	movlw	154
  1683   00041C  6E05               	movwf	___flge@ff1^0,c
  1684   00041E  0E99               	movlw	153
  1685   000420  6E06               	movwf	(___flge@ff1+1)^0,c
  1686   000422  0E19               	movlw	25
  1687   000424  6E07               	movwf	(___flge@ff1+2)^0,c
  1688   000426  0E3F               	movlw	63
  1689   000428  6E08               	movwf	(___flge@ff1+3)^0,c
  1690   00042A  C044  F009         	movff	_color+8,___flge@ff2
  1691   00042E  C045  F00A         	movff	_color+9,___flge@ff2+1
  1692   000432  C046  F00B         	movff	_color+10,___flge@ff2+2
  1693   000436  C047  F00C         	movff	_color+11,___flge@ff2+3
  1694   00043A  EC79  F009         	call	___flge	;wreg free
  1695   00043E  B0D8               	btfsc	status,0,c
  1696   000440  EF24  F002         	goto	u2221
  1697   000444  EF26  F002         	goto	u2220
  1698   000448                     u2221:
  1699   000448  EF66  F002         	goto	l2782
  1700   00044C                     u2220:
  1701   00044C  C048  F005         	movff	_color+12,___flge@ff1
  1702   000450  C049  F006         	movff	_color+13,___flge@ff1+1
  1703   000454  C04A  F007         	movff	_color+14,___flge@ff1+2
  1704   000458  C04B  F008         	movff	_color+15,___flge@ff1+3
  1705   00045C  0EAE               	movlw	174
  1706   00045E  6E09               	movwf	___flge@ff2^0,c
  1707   000460  0E47               	movlw	71
  1708   000462  6E0A               	movwf	(___flge@ff2+1)^0,c
  1709   000464  0E61               	movlw	97
  1710   000466  6E0B               	movwf	(___flge@ff2+2)^0,c
  1711   000468  0E3E               	movlw	62
  1712   00046A  6E0C               	movwf	(___flge@ff2+3)^0,c
  1713   00046C  EC79  F009         	call	___flge	;wreg free
  1714   000470  B0D8               	btfsc	status,0,c
  1715   000472  EF3D  F002         	goto	u2231
  1716   000476  EF3F  F002         	goto	u2230
  1717   00047A                     u2231:
  1718   00047A  EF66  F002         	goto	l2782
  1719   00047E                     u2230:
  1720   00047E  0E1F               	movlw	31
  1721   000480  6E05               	movwf	___flge@ff1^0,c
  1722   000482  0E85               	movlw	133
  1723   000484  6E06               	movwf	(___flge@ff1+1)^0,c
  1724   000486  0E6B               	movlw	107
  1725   000488  6E07               	movwf	(___flge@ff1+2)^0,c
  1726   00048A  0E3E               	movlw	62
  1727   00048C  6E08               	movwf	(___flge@ff1+3)^0,c
  1728   00048E  C04C  F009         	movff	_color+16,___flge@ff2
  1729   000492  C04D  F00A         	movff	_color+17,___flge@ff2+1
  1730   000496  C04E  F00B         	movff	_color+18,___flge@ff2+2
  1731   00049A  C04F  F00C         	movff	_color+19,___flge@ff2+3
  1732   00049E  EC79  F009         	call	___flge	;wreg free
  1733   0004A2  B0D8               	btfsc	status,0,c
  1734   0004A4  EF56  F002         	goto	u2241
  1735   0004A8  EF58  F002         	goto	u2240
  1736   0004AC                     u2241:
  1737   0004AC  EF66  F002         	goto	l2782
  1738   0004B0                     u2240:
  1739   0004B0                     
  1740                           ;../color.c: 120:     instructions(mL,mR,6);
  1741   0004B0  C0B9  F028         	movff	buggy_color_response@mL,instructions@mL
  1742   0004B4  C0BA  F029         	movff	buggy_color_response@mL+1,instructions@mL+1
  1743   0004B8  C0BB  F02A         	movff	buggy_color_response@mR,instructions@mR
  1744   0004BC  C0BC  F02B         	movff	buggy_color_response@mR+1,instructions@mR+1
  1745   0004C0  0E00               	movlw	0
  1746   0004C2  6E2D               	movwf	(instructions@count+1)^0,c
  1747   0004C4  0E06               	movlw	6
  1748   0004C6  6E2C               	movwf	instructions@count^0,c
  1749   0004C8  ECAB  F004         	call	_instructions	;wreg free
  1750   0004CC                     l2782:
  1751                           
  1752                           ;../color.c: 122:     if (color.R_norm < 0.40 && color.B_norm > 0.30 && color.G_norm > 0
      +                          .4){
  1753   0004CC  C044  F005         	movff	_color+8,___flge@ff1
  1754   0004D0  C045  F006         	movff	_color+9,___flge@ff1+1
  1755   0004D4  C046  F007         	movff	_color+10,___flge@ff1+2
  1756   0004D8  C047  F008         	movff	_color+11,___flge@ff1+3
  1757   0004DC  0ECD               	movlw	205
  1758   0004DE  6E09               	movwf	___flge@ff2^0,c
  1759   0004E0  0ECC               	movlw	204
  1760   0004E2  6E0A               	movwf	(___flge@ff2+1)^0,c
  1761   0004E4  0ECC               	movlw	204
  1762   0004E6  6E0B               	movwf	(___flge@ff2+2)^0,c
  1763   0004E8  0E3E               	movlw	62
  1764   0004EA  6E0C               	movwf	(___flge@ff2+3)^0,c
  1765   0004EC  EC79  F009         	call	___flge	;wreg free
  1766   0004F0  B0D8               	btfsc	status,0,c
  1767   0004F2  EF7D  F002         	goto	u2251
  1768   0004F6  EF7F  F002         	goto	u2250
  1769   0004FA                     u2251:
  1770   0004FA  EFBF  F002         	goto	l2790
  1771   0004FE                     u2250:
  1772   0004FE  0E9A               	movlw	154
  1773   000500  6E05               	movwf	___flge@ff1^0,c
  1774   000502  0E99               	movlw	153
  1775   000504  6E06               	movwf	(___flge@ff1+1)^0,c
  1776   000506  0E99               	movlw	153
  1777   000508  6E07               	movwf	(___flge@ff1+2)^0,c
  1778   00050A  0E3E               	movlw	62
  1779   00050C  6E08               	movwf	(___flge@ff1+3)^0,c
  1780   00050E  C048  F009         	movff	_color+12,___flge@ff2
  1781   000512  C049  F00A         	movff	_color+13,___flge@ff2+1
  1782   000516  C04A  F00B         	movff	_color+14,___flge@ff2+2
  1783   00051A  C04B  F00C         	movff	_color+15,___flge@ff2+3
  1784   00051E  EC79  F009         	call	___flge	;wreg free
  1785   000522  B0D8               	btfsc	status,0,c
  1786   000524  EF96  F002         	goto	u2261
  1787   000528  EF98  F002         	goto	u2260
  1788   00052C                     u2261:
  1789   00052C  EFBF  F002         	goto	l2790
  1790   000530                     u2260:
  1791   000530  0ECD               	movlw	205
  1792   000532  6E05               	movwf	___flge@ff1^0,c
  1793   000534  0ECC               	movlw	204
  1794   000536  6E06               	movwf	(___flge@ff1+1)^0,c
  1795   000538  0ECC               	movlw	204
  1796   00053A  6E07               	movwf	(___flge@ff1+2)^0,c
  1797   00053C  0E3E               	movlw	62
  1798   00053E  6E08               	movwf	(___flge@ff1+3)^0,c
  1799   000540  C04C  F009         	movff	_color+16,___flge@ff2
  1800   000544  C04D  F00A         	movff	_color+17,___flge@ff2+1
  1801   000548  C04E  F00B         	movff	_color+18,___flge@ff2+2
  1802   00054C  C04F  F00C         	movff	_color+19,___flge@ff2+3
  1803   000550  EC79  F009         	call	___flge	;wreg free
  1804   000554  B0D8               	btfsc	status,0,c
  1805   000556  EFAF  F002         	goto	u2271
  1806   00055A  EFB1  F002         	goto	u2270
  1807   00055E                     u2271:
  1808   00055E  EFBF  F002         	goto	l2790
  1809   000562                     u2270:
  1810   000562                     
  1811                           ;../color.c: 123:     instructions(mL,mR,7);
  1812   000562  C0B9  F028         	movff	buggy_color_response@mL,instructions@mL
  1813   000566  C0BA  F029         	movff	buggy_color_response@mL+1,instructions@mL+1
  1814   00056A  C0BB  F02A         	movff	buggy_color_response@mR,instructions@mR
  1815   00056E  C0BC  F02B         	movff	buggy_color_response@mR+1,instructions@mR+1
  1816   000572  0E00               	movlw	0
  1817   000574  6E2D               	movwf	(instructions@count+1)^0,c
  1818   000576  0E07               	movlw	7
  1819   000578  6E2C               	movwf	instructions@count^0,c
  1820   00057A  ECAB  F004         	call	_instructions	;wreg free
  1821   00057E                     l2790:
  1822                           
  1823                           ;../color.c: 125:     if (color.R_norm < 0.5 && color.C > 16000){
  1824   00057E  C044  F005         	movff	_color+8,___flge@ff1
  1825   000582  C045  F006         	movff	_color+9,___flge@ff1+1
  1826   000586  C046  F007         	movff	_color+10,___flge@ff1+2
  1827   00058A  C047  F008         	movff	_color+11,___flge@ff1+3
  1828   00058E  0E00               	movlw	0
  1829   000590  6E09               	movwf	___flge@ff2^0,c
  1830   000592  0E00               	movlw	0
  1831   000594  6E0A               	movwf	(___flge@ff2+1)^0,c
  1832   000596  0E00               	movlw	0
  1833   000598  6E0B               	movwf	(___flge@ff2+2)^0,c
  1834   00059A  0E3F               	movlw	63
  1835   00059C  6E0C               	movwf	(___flge@ff2+3)^0,c
  1836   00059E  EC79  F009         	call	___flge	;wreg free
  1837   0005A2  EFDD  F002         	goto	l64
  1838   0005A6                     l2794:
  1839   0005A6  C0B9  F01E         	movff	buggy_color_response@mL,forward@mL
  1840   0005AA  C0BA  F01F         	movff	buggy_color_response@mL+1,forward@mL+1
  1841   0005AE  C0BB  F020         	movff	buggy_color_response@mR,forward@mR
  1842   0005B2  C0BC  F021         	movff	buggy_color_response@mR+1,forward@mR+1
  1843   0005B6  ECDA  F00A         	call	_forward	;wreg free
  1844   0005BA                     l64:
  1845   0005BA  0012               	return		;funcret
  1846   0005BC                     __end_of_buggy_color_response:
  1847                           	callstack 0
  1848                           
  1849 ;; *************** function _instructions *****************
  1850 ;; Defined at:
  1851 ;;		line 254 in file "../dc_motor.c"
  1852 ;; Parameters:    Size  Location     Type
  1853 ;;  mL              2   39[COMRAM] PTR struct DC_motor
  1854 ;;		 -> motorL(9), 
  1855 ;;  mR              2   41[COMRAM] PTR struct DC_motor
  1856 ;;		 -> motorR(9), 
  1857 ;;  count           2   43[COMRAM] int 
  1858 ;; Auto vars:     Size  Location     Type
  1859 ;;		None
  1860 ;; Return value:  Size  Location     Type
  1861 ;;                  1    wreg      void 
  1862 ;; Registers used:
  1863 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1864 ;; Tracked objects:
  1865 ;;		On entry : 0/0
  1866 ;;		On exit  : 0/0
  1867 ;;		Unchanged: 0/0
  1868 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1869 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1870 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1871 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1872 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1873 ;;Total ram usage:        8 bytes
  1874 ;; Hardware stack levels used: 1
  1875 ;; Hardware stack levels required when called: 6
  1876 ;; This function calls:
  1877 ;;		_left_45
  1878 ;;		_reverse
  1879 ;;		_right_45
  1880 ;;		_space
  1881 ;;		_stop
  1882 ;; This function is called by:
  1883 ;;		_buggy_color_response
  1884 ;; This function uses a non-reentrant model
  1885 ;;
  1886                           
  1887                           	psect	text8
  1888   000956                     __ptext8:
  1889                           	callstack 0
  1890   000956                     _instructions:
  1891                           	callstack 23
  1892   000956                     
  1893                           ;../dc_motor.c: 254: void instructions(DC_motor *mL, DC_motor *mR, int count);../dc_moto
      +                          r.c: 255: {;../dc_motor.c: 256:     space(mL,mR);
  1894   000956  C028  F01E         	movff	instructions@mL,space@mL
  1895   00095A  C029  F01F         	movff	instructions@mL+1,space@mL+1
  1896   00095E  C02A  F020         	movff	instructions@mR,space@mR
  1897   000962  C02B  F021         	movff	instructions@mR+1,space@mR+1
  1898   000966  ECFB  F009         	call	_space	;wreg free
  1899   00096A                     
  1900                           ;../dc_motor.c: 257:     _delay((unsigned long)((500)*(64000000/4000.0)));
  1901   00096A  0E29               	movlw	41
  1902   00096C  6E2F               	movwf	(??_instructions+1)^0,c
  1903   00096E  0E96               	movlw	150
  1904   000970  6E2E               	movwf	??_instructions^0,c
  1905   000972  0E7F               	movlw	127
  1906   000974                     u2317:
  1907   000974  2EE8               	decfsz	wreg,f,c
  1908   000976  D7FE               	bra	u2317
  1909   000978  2E2E               	decfsz	??_instructions^0,f,c
  1910   00097A  D7FC               	bra	u2317
  1911   00097C  2E2F               	decfsz	(??_instructions+1)^0,f,c
  1912   00097E  D7FA               	bra	u2317
  1913   000980  F000               	nop	
  1914   000982                     
  1915                           ;../dc_motor.c: 258:     stop(mL,mR);
  1916   000982  C028  F018         	movff	instructions@mL,stop@mL
  1917   000986  C029  F019         	movff	instructions@mL+1,stop@mL+1
  1918   00098A  C02A  F01A         	movff	instructions@mR,stop@mR
  1919   00098E  C02B  F01B         	movff	instructions@mR+1,stop@mR+1
  1920   000992  EC39  F00B         	call	_stop	;wreg free
  1921                           
  1922                           ;../dc_motor.c: 259:     _delay((unsigned long)((500)*(64000000/4000.0)));
  1923   000996  0E29               	movlw	41
  1924   000998  6E2F               	movwf	(??_instructions+1)^0,c
  1925   00099A  0E96               	movlw	150
  1926   00099C  6E2E               	movwf	??_instructions^0,c
  1927   00099E  0E7F               	movlw	127
  1928   0009A0                     u2327:
  1929   0009A0  2EE8               	decfsz	wreg,f,c
  1930   0009A2  D7FE               	bra	u2327
  1931   0009A4  2E2E               	decfsz	??_instructions^0,f,c
  1932   0009A6  D7FC               	bra	u2327
  1933   0009A8  2E2F               	decfsz	(??_instructions+1)^0,f,c
  1934   0009AA  D7FA               	bra	u2327
  1935   0009AC  F000               	nop	
  1936   0009AE                     
  1937                           ;../dc_motor.c: 260:     if (count == 1){right_45(mL,mR,2); stop(mL,mR);}
  1938   0009AE  042C               	decf	instructions@count^0,w,c
  1939   0009B0  102D               	iorwf	(instructions@count+1)^0,w,c
  1940   0009B2  A4D8               	btfss	status,2,c
  1941   0009B4  EFDE  F004         	goto	u1651
  1942   0009B8  EFE0  F004         	goto	u1650
  1943   0009BC                     u1651:
  1944   0009BC  EFF8  F004         	goto	l2424
  1945   0009C0                     u1650:
  1946   0009C0  C028  F01E         	movff	instructions@mL,right_45@mL
  1947   0009C4  C029  F01F         	movff	instructions@mL+1,right_45@mL+1
  1948   0009C8  C02A  F020         	movff	instructions@mR,right_45@mR
  1949   0009CC  C02B  F021         	movff	instructions@mR+1,right_45@mR+1
  1950   0009D0  0E00               	movlw	0
  1951   0009D2  6E23               	movwf	(right_45@count+1)^0,c
  1952   0009D4  0E02               	movlw	2
  1953   0009D6  6E22               	movwf	right_45@count^0,c
  1954   0009D8  EC4D  F008         	call	_right_45	;wreg free
  1955   0009DC  C028  F018         	movff	instructions@mL,stop@mL
  1956   0009E0  C029  F019         	movff	instructions@mL+1,stop@mL+1
  1957   0009E4  C02A  F01A         	movff	instructions@mR,stop@mR
  1958   0009E8  C02B  F01B         	movff	instructions@mR+1,stop@mR+1
  1959   0009EC  EC39  F00B         	call	_stop	;wreg free
  1960   0009F0                     l2424:
  1961                           
  1962                           ;../dc_motor.c: 261:     if (count == 2){left_45(mL,mR,2); stop(mL,mR);}
  1963   0009F0  0E02               	movlw	2
  1964   0009F2  182C               	xorwf	instructions@count^0,w,c
  1965   0009F4  102D               	iorwf	(instructions@count+1)^0,w,c
  1966   0009F6  A4D8               	btfss	status,2,c
  1967   0009F8  EF00  F005         	goto	u1661
  1968   0009FC  EF02  F005         	goto	u1660
  1969   000A00                     u1661:
  1970   000A00  EF1A  F005         	goto	l2428
  1971   000A04                     u1660:
  1972   000A04  C028  F01E         	movff	instructions@mL,left_45@mL
  1973   000A08  C029  F01F         	movff	instructions@mL+1,left_45@mL+1
  1974   000A0C  C02A  F020         	movff	instructions@mR,left_45@mR
  1975   000A10  C02B  F021         	movff	instructions@mR+1,left_45@mR+1
  1976   000A14  0E00               	movlw	0
  1977   000A16  6E23               	movwf	(left_45@count+1)^0,c
  1978   000A18  0E02               	movlw	2
  1979   000A1A  6E22               	movwf	left_45@count^0,c
  1980   000A1C  ECAD  F007         	call	_left_45	;wreg free
  1981   000A20  C028  F018         	movff	instructions@mL,stop@mL
  1982   000A24  C029  F019         	movff	instructions@mL+1,stop@mL+1
  1983   000A28  C02A  F01A         	movff	instructions@mR,stop@mR
  1984   000A2C  C02B  F01B         	movff	instructions@mR+1,stop@mR+1
  1985   000A30  EC39  F00B         	call	_stop	;wreg free
  1986   000A34                     l2428:
  1987                           
  1988                           ;../dc_motor.c: 262:     if (count == 3){right_45(mL,mR,4); stop(mL,mR);}
  1989   000A34  0E03               	movlw	3
  1990   000A36  182C               	xorwf	instructions@count^0,w,c
  1991   000A38  102D               	iorwf	(instructions@count+1)^0,w,c
  1992   000A3A  A4D8               	btfss	status,2,c
  1993   000A3C  EF22  F005         	goto	u1671
  1994   000A40  EF24  F005         	goto	u1670
  1995   000A44                     u1671:
  1996   000A44  EF3C  F005         	goto	l2432
  1997   000A48                     u1670:
  1998   000A48  C028  F01E         	movff	instructions@mL,right_45@mL
  1999   000A4C  C029  F01F         	movff	instructions@mL+1,right_45@mL+1
  2000   000A50  C02A  F020         	movff	instructions@mR,right_45@mR
  2001   000A54  C02B  F021         	movff	instructions@mR+1,right_45@mR+1
  2002   000A58  0E00               	movlw	0
  2003   000A5A  6E23               	movwf	(right_45@count+1)^0,c
  2004   000A5C  0E04               	movlw	4
  2005   000A5E  6E22               	movwf	right_45@count^0,c
  2006   000A60  EC4D  F008         	call	_right_45	;wreg free
  2007   000A64  C028  F018         	movff	instructions@mL,stop@mL
  2008   000A68  C029  F019         	movff	instructions@mL+1,stop@mL+1
  2009   000A6C  C02A  F01A         	movff	instructions@mR,stop@mR
  2010   000A70  C02B  F01B         	movff	instructions@mR+1,stop@mR+1
  2011   000A74  EC39  F00B         	call	_stop	;wreg free
  2012   000A78                     l2432:
  2013                           
  2014                           ;../dc_motor.c: 263:     if (count == 4){reverse(mL,mR); _delay((unsigned long)((400)*(6
      +                          4000000/4000.0)));stop(mL,mR);_delay((unsigned long)((500)*(64000000/4000.0)));right_45(
      +                          mL,mR,2); stop(mL,mR);}
  2015   000A78  0E04               	movlw	4
  2016   000A7A  182C               	xorwf	instructions@count^0,w,c
  2017   000A7C  102D               	iorwf	(instructions@count+1)^0,w,c
  2018   000A7E  A4D8               	btfss	status,2,c
  2019   000A80  EF44  F005         	goto	u1681
  2020   000A84  EF46  F005         	goto	u1680
  2021   000A88                     u1681:
  2022   000A88  EF8A  F005         	goto	l2444
  2023   000A8C                     u1680:
  2024   000A8C  C028  F01E         	movff	instructions@mL,reverse@mL
  2025   000A90  C029  F01F         	movff	instructions@mL+1,reverse@mL+1
  2026   000A94  C02A  F020         	movff	instructions@mR,reverse@mR
  2027   000A98  C02B  F021         	movff	instructions@mR+1,reverse@mR+1
  2028   000A9C  EC7B  F00A         	call	_reverse	;wreg free
  2029   000AA0  0E21               	movlw	33
  2030   000AA2  6E2F               	movwf	(??_instructions+1)^0,c
  2031   000AA4  0E78               	movlw	120
  2032   000AA6  6E2E               	movwf	??_instructions^0,c
  2033   000AA8  0E98               	movlw	152
  2034   000AAA                     u2337:
  2035   000AAA  2EE8               	decfsz	wreg,f,c
  2036   000AAC  D7FE               	bra	u2337
  2037   000AAE  2E2E               	decfsz	??_instructions^0,f,c
  2038   000AB0  D7FC               	bra	u2337
  2039   000AB2  2E2F               	decfsz	(??_instructions+1)^0,f,c
  2040   000AB4  D7FA               	bra	u2337
  2041   000AB6  D000               	nop2	
  2042   000AB8  C028  F018         	movff	instructions@mL,stop@mL
  2043   000ABC  C029  F019         	movff	instructions@mL+1,stop@mL+1
  2044   000AC0  C02A  F01A         	movff	instructions@mR,stop@mR
  2045   000AC4  C02B  F01B         	movff	instructions@mR+1,stop@mR+1
  2046   000AC8  EC39  F00B         	call	_stop	;wreg free
  2047   000ACC  0E29               	movlw	41
  2048   000ACE  6E2F               	movwf	(??_instructions+1)^0,c
  2049   000AD0  0E96               	movlw	150
  2050   000AD2  6E2E               	movwf	??_instructions^0,c
  2051   000AD4  0E7F               	movlw	127
  2052   000AD6                     u2347:
  2053   000AD6  2EE8               	decfsz	wreg,f,c
  2054   000AD8  D7FE               	bra	u2347
  2055   000ADA  2E2E               	decfsz	??_instructions^0,f,c
  2056   000ADC  D7FC               	bra	u2347
  2057   000ADE  2E2F               	decfsz	(??_instructions+1)^0,f,c
  2058   000AE0  D7FA               	bra	u2347
  2059   000AE2  F000               	nop	
  2060   000AE4  C028  F01E         	movff	instructions@mL,right_45@mL
  2061   000AE8  C029  F01F         	movff	instructions@mL+1,right_45@mL+1
  2062   000AEC  C02A  F020         	movff	instructions@mR,right_45@mR
  2063   000AF0  C02B  F021         	movff	instructions@mR+1,right_45@mR+1
  2064   000AF4  0E00               	movlw	0
  2065   000AF6  6E23               	movwf	(right_45@count+1)^0,c
  2066   000AF8  0E02               	movlw	2
  2067   000AFA  6E22               	movwf	right_45@count^0,c
  2068   000AFC  EC4D  F008         	call	_right_45	;wreg free
  2069   000B00  C028  F018         	movff	instructions@mL,stop@mL
  2070   000B04  C029  F019         	movff	instructions@mL+1,stop@mL+1
  2071   000B08  C02A  F01A         	movff	instructions@mR,stop@mR
  2072   000B0C  C02B  F01B         	movff	instructions@mR+1,stop@mR+1
  2073   000B10  EC39  F00B         	call	_stop	;wreg free
  2074   000B14                     l2444:
  2075                           
  2076                           ;../dc_motor.c: 264:     if (count == 5){reverse(mL,mR); _delay((unsigned long)((400)*(6
      +                          4000000/4000.0)));stop(mL,mR);_delay((unsigned long)((500)*(64000000/4000.0)));left_45(m
      +                          L,mR,2); stop(mL,mR);}
  2077   000B14  0E05               	movlw	5
  2078   000B16  182C               	xorwf	instructions@count^0,w,c
  2079   000B18  102D               	iorwf	(instructions@count+1)^0,w,c
  2080   000B1A  A4D8               	btfss	status,2,c
  2081   000B1C  EF92  F005         	goto	u1691
  2082   000B20  EF94  F005         	goto	u1690
  2083   000B24                     u1691:
  2084   000B24  EFD8  F005         	goto	l2456
  2085   000B28                     u1690:
  2086   000B28  C028  F01E         	movff	instructions@mL,reverse@mL
  2087   000B2C  C029  F01F         	movff	instructions@mL+1,reverse@mL+1
  2088   000B30  C02A  F020         	movff	instructions@mR,reverse@mR
  2089   000B34  C02B  F021         	movff	instructions@mR+1,reverse@mR+1
  2090   000B38  EC7B  F00A         	call	_reverse	;wreg free
  2091   000B3C  0E21               	movlw	33
  2092   000B3E  6E2F               	movwf	(??_instructions+1)^0,c
  2093   000B40  0E78               	movlw	120
  2094   000B42  6E2E               	movwf	??_instructions^0,c
  2095   000B44  0E98               	movlw	152
  2096   000B46                     u2357:
  2097   000B46  2EE8               	decfsz	wreg,f,c
  2098   000B48  D7FE               	bra	u2357
  2099   000B4A  2E2E               	decfsz	??_instructions^0,f,c
  2100   000B4C  D7FC               	bra	u2357
  2101   000B4E  2E2F               	decfsz	(??_instructions+1)^0,f,c
  2102   000B50  D7FA               	bra	u2357
  2103   000B52  D000               	nop2	
  2104   000B54  C028  F018         	movff	instructions@mL,stop@mL
  2105   000B58  C029  F019         	movff	instructions@mL+1,stop@mL+1
  2106   000B5C  C02A  F01A         	movff	instructions@mR,stop@mR
  2107   000B60  C02B  F01B         	movff	instructions@mR+1,stop@mR+1
  2108   000B64  EC39  F00B         	call	_stop	;wreg free
  2109   000B68  0E29               	movlw	41
  2110   000B6A  6E2F               	movwf	(??_instructions+1)^0,c
  2111   000B6C  0E96               	movlw	150
  2112   000B6E  6E2E               	movwf	??_instructions^0,c
  2113   000B70  0E7F               	movlw	127
  2114   000B72                     u2367:
  2115   000B72  2EE8               	decfsz	wreg,f,c
  2116   000B74  D7FE               	bra	u2367
  2117   000B76  2E2E               	decfsz	??_instructions^0,f,c
  2118   000B78  D7FC               	bra	u2367
  2119   000B7A  2E2F               	decfsz	(??_instructions+1)^0,f,c
  2120   000B7C  D7FA               	bra	u2367
  2121   000B7E  F000               	nop	
  2122   000B80  C028  F01E         	movff	instructions@mL,left_45@mL
  2123   000B84  C029  F01F         	movff	instructions@mL+1,left_45@mL+1
  2124   000B88  C02A  F020         	movff	instructions@mR,left_45@mR
  2125   000B8C  C02B  F021         	movff	instructions@mR+1,left_45@mR+1
  2126   000B90  0E00               	movlw	0
  2127   000B92  6E23               	movwf	(left_45@count+1)^0,c
  2128   000B94  0E02               	movlw	2
  2129   000B96  6E22               	movwf	left_45@count^0,c
  2130   000B98  ECAD  F007         	call	_left_45	;wreg free
  2131   000B9C  C028  F018         	movff	instructions@mL,stop@mL
  2132   000BA0  C029  F019         	movff	instructions@mL+1,stop@mL+1
  2133   000BA4  C02A  F01A         	movff	instructions@mR,stop@mR
  2134   000BA8  C02B  F01B         	movff	instructions@mR+1,stop@mR+1
  2135   000BAC  EC39  F00B         	call	_stop	;wreg free
  2136   000BB0                     l2456:
  2137                           
  2138                           ;../dc_motor.c: 265:     if (count == 6){right_45(mL,mR,3); stop(mL,mR);}
  2139   000BB0  0E06               	movlw	6
  2140   000BB2  182C               	xorwf	instructions@count^0,w,c
  2141   000BB4  102D               	iorwf	(instructions@count+1)^0,w,c
  2142   000BB6  A4D8               	btfss	status,2,c
  2143   000BB8  EFE0  F005         	goto	u1701
  2144   000BBC  EFE2  F005         	goto	u1700
  2145   000BC0                     u1701:
  2146   000BC0  EFFA  F005         	goto	l2460
  2147   000BC4                     u1700:
  2148   000BC4  C028  F01E         	movff	instructions@mL,right_45@mL
  2149   000BC8  C029  F01F         	movff	instructions@mL+1,right_45@mL+1
  2150   000BCC  C02A  F020         	movff	instructions@mR,right_45@mR
  2151   000BD0  C02B  F021         	movff	instructions@mR+1,right_45@mR+1
  2152   000BD4  0E00               	movlw	0
  2153   000BD6  6E23               	movwf	(right_45@count+1)^0,c
  2154   000BD8  0E03               	movlw	3
  2155   000BDA  6E22               	movwf	right_45@count^0,c
  2156   000BDC  EC4D  F008         	call	_right_45	;wreg free
  2157   000BE0  C028  F018         	movff	instructions@mL,stop@mL
  2158   000BE4  C029  F019         	movff	instructions@mL+1,stop@mL+1
  2159   000BE8  C02A  F01A         	movff	instructions@mR,stop@mR
  2160   000BEC  C02B  F01B         	movff	instructions@mR+1,stop@mR+1
  2161   000BF0  EC39  F00B         	call	_stop	;wreg free
  2162   000BF4                     l2460:
  2163                           
  2164                           ;../dc_motor.c: 266:     if (count == 7){left_45(mL,mR,3); stop(mL,mR);}
  2165   000BF4  0E07               	movlw	7
  2166   000BF6  182C               	xorwf	instructions@count^0,w,c
  2167   000BF8  102D               	iorwf	(instructions@count+1)^0,w,c
  2168   000BFA  A4D8               	btfss	status,2,c
  2169   000BFC  EF02  F006         	goto	u1711
  2170   000C00  EF04  F006         	goto	u1710
  2171   000C04                     u1711:
  2172   000C04  EF1C  F006         	goto	l258
  2173   000C08                     u1710:
  2174   000C08  C028  F01E         	movff	instructions@mL,left_45@mL
  2175   000C0C  C029  F01F         	movff	instructions@mL+1,left_45@mL+1
  2176   000C10  C02A  F020         	movff	instructions@mR,left_45@mR
  2177   000C14  C02B  F021         	movff	instructions@mR+1,left_45@mR+1
  2178   000C18  0E00               	movlw	0
  2179   000C1A  6E23               	movwf	(left_45@count+1)^0,c
  2180   000C1C  0E03               	movlw	3
  2181   000C1E  6E22               	movwf	left_45@count^0,c
  2182   000C20  ECAD  F007         	call	_left_45	;wreg free
  2183   000C24  C028  F018         	movff	instructions@mL,stop@mL
  2184   000C28  C029  F019         	movff	instructions@mL+1,stop@mL+1
  2185   000C2C  C02A  F01A         	movff	instructions@mR,stop@mR
  2186   000C30  C02B  F01B         	movff	instructions@mR+1,stop@mR+1
  2187   000C34  EC39  F00B         	call	_stop	;wreg free
  2188   000C38                     l258:
  2189   000C38  0012               	return		;funcret
  2190   000C3A                     __end_of_instructions:
  2191                           	callstack 0
  2192                           
  2193 ;; *************** function _space *****************
  2194 ;; Defined at:
  2195 ;;		line 231 in file "../dc_motor.c"
  2196 ;; Parameters:    Size  Location     Type
  2197 ;;  mL              2   29[COMRAM] PTR struct DC_motor
  2198 ;;		 -> motorL(9), 
  2199 ;;  mR              2   31[COMRAM] PTR struct DC_motor
  2200 ;;		 -> motorR(9), 
  2201 ;; Auto vars:     Size  Location     Type
  2202 ;;		None
  2203 ;; Return value:  Size  Location     Type
  2204 ;;                  1    wreg      void 
  2205 ;; Registers used:
  2206 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2207 ;; Tracked objects:
  2208 ;;		On entry : 0/0
  2209 ;;		On exit  : 0/0
  2210 ;;		Unchanged: 0/0
  2211 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2212 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2213 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2214 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2215 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2216 ;;Total ram usage:        6 bytes
  2217 ;; Hardware stack levels used: 1
  2218 ;; Hardware stack levels required when called: 5
  2219 ;; This function calls:
  2220 ;;		_setMotorPWM
  2221 ;;		_stop
  2222 ;; This function is called by:
  2223 ;;		_instructions
  2224 ;; This function uses a non-reentrant model
  2225 ;;
  2226                           
  2227                           	psect	text9
  2228   0013F6                     __ptext9:
  2229                           	callstack 0
  2230   0013F6                     _space:
  2231                           	callstack 23
  2232   0013F6                     
  2233                           ;../dc_motor.c: 231: void space(DC_motor *mL, DC_motor *mR);../dc_motor.c: 232: {;../dc_
      +                          motor.c: 233:     stop(mL,mR);
  2234   0013F6  C01E  F018         	movff	space@mL,stop@mL
  2235   0013FA  C01F  F019         	movff	space@mL+1,stop@mL+1
  2236   0013FE  C020  F01A         	movff	space@mR,stop@mR
  2237   001402  C021  F01B         	movff	space@mR+1,stop@mR+1
  2238   001406  EC39  F00B         	call	_stop	;wreg free
  2239   00140A                     
  2240                           ;../dc_motor.c: 234:     LATHbits.LATH1 = 1;
  2241   00140A  8280               	bsf	128,1,c	;volatile
  2242   00140C                     
  2243                           ;../dc_motor.c: 235:     mL-> direction = 0;
  2244   00140C  EE20 F001          	lfsr	2,1
  2245   001410  501E               	movf	space@mL^0,w,c
  2246   001412  26D9               	addwf	fsr2l,f,c
  2247   001414  501F               	movf	(space@mL+1)^0,w,c
  2248   001416  22DA               	addwfc	fsr2h,f,c
  2249   001418  0E00               	movlw	0
  2250   00141A  6EDF               	movwf	indf2,c
  2251   00141C                     
  2252                           ;../dc_motor.c: 236:     mR-> direction = 0;
  2253   00141C  EE20 F001          	lfsr	2,1
  2254   001420  5020               	movf	space@mR^0,w,c
  2255   001422  26D9               	addwf	fsr2l,f,c
  2256   001424  5021               	movf	(space@mR+1)^0,w,c
  2257   001426  22DA               	addwfc	fsr2h,f,c
  2258   001428  0E00               	movlw	0
  2259   00142A  6EDF               	movwf	indf2,c
  2260                           
  2261                           ;../dc_motor.c: 237:     setMotorPWM(mR);
  2262   00142C  C020  F012         	movff	space@mR,setMotorPWM@m
  2263   001430  C021  F013         	movff	space@mR+1,setMotorPWM@m+1
  2264   001434  ECF7  F006         	call	_setMotorPWM	;wreg free
  2265                           
  2266                           ;../dc_motor.c: 238:     setMotorPWM(mL);
  2267   001438  C01E  F012         	movff	space@mL,setMotorPWM@m
  2268   00143C  C01F  F013         	movff	space@mL+1,setMotorPWM@m+1
  2269   001440  ECF7  F006         	call	_setMotorPWM	;wreg free
  2270                           
  2271                           ;../dc_motor.c: 239:     while ((mL->power <40) && (mR->power <40)){
  2272   001444  EF40  F00A         	goto	l2198
  2273   001448                     l2190:
  2274                           
  2275                           ;../dc_motor.c: 240:         mL->power += 10;
  2276   001448  C01E  FFD9         	movff	space@mL,fsr2l
  2277   00144C  C01F  FFDA         	movff	space@mL+1,fsr2h
  2278   001450  0E0A               	movlw	10
  2279   001452  26DF               	addwf	indf2,f,c
  2280                           
  2281                           ;../dc_motor.c: 241:         mR->power += 10;
  2282   001454  C020  FFD9         	movff	space@mR,fsr2l
  2283   001458  C021  FFDA         	movff	space@mR+1,fsr2h
  2284   00145C  0E0A               	movlw	10
  2285   00145E  26DF               	addwf	indf2,f,c
  2286   001460                     
  2287                           ;../dc_motor.c: 242:         setMotorPWM(mL);
  2288   001460  C01E  F012         	movff	space@mL,setMotorPWM@m
  2289   001464  C01F  F013         	movff	space@mL+1,setMotorPWM@m+1
  2290   001468  ECF7  F006         	call	_setMotorPWM	;wreg free
  2291   00146C                     
  2292                           ;../dc_motor.c: 243:         setMotorPWM(mR);
  2293   00146C  C020  F012         	movff	space@mR,setMotorPWM@m
  2294   001470  C021  F013         	movff	space@mR+1,setMotorPWM@m+1
  2295   001474  ECF7  F006         	call	_setMotorPWM	;wreg free
  2296   001478                     
  2297                           ;../dc_motor.c: 244:         _delay((unsigned long)((20)*(64000000/4000000.0)));
  2298   001478  0E6A               	movlw	106
  2299   00147A                     u2377:
  2300   00147A  2EE8               	decfsz	wreg,f,c
  2301   00147C  D7FE               	bra	u2377
  2302   00147E  D000               	nop2	
  2303   001480                     l2198:
  2304                           
  2305                           ;../dc_motor.c: 239:     while ((mL->power <40) && (mR->power <40)){
  2306   001480  C01E  FFD9         	movff	space@mL,fsr2l
  2307   001484  C01F  FFDA         	movff	space@mL+1,fsr2h
  2308   001488  0E28               	movlw	40
  2309   00148A  60DF               	cpfslt	indf2,c
  2310   00148C  EF4A  F00A         	goto	u1301
  2311   001490  EF4C  F00A         	goto	u1300
  2312   001494                     u1301:
  2313   001494  EF58  F00A         	goto	l2202
  2314   001498                     u1300:
  2315   001498  C020  FFD9         	movff	space@mR,fsr2l
  2316   00149C  C021  FFDA         	movff	space@mR+1,fsr2h
  2317   0014A0  0E27               	movlw	39
  2318   0014A2  64DF               	cpfsgt	indf2,c
  2319   0014A4  EF56  F00A         	goto	u1311
  2320   0014A8  EF58  F00A         	goto	u1310
  2321   0014AC                     u1311:
  2322   0014AC  EF24  F00A         	goto	l2190
  2323   0014B0                     u1310:
  2324   0014B0                     l2202:
  2325                           
  2326                           ;../dc_motor.c: 246:     _delay((unsigned long)((300)*(64000000/4000.0)));
  2327   0014B0  0E19               	movlw	25
  2328   0014B2  6E23               	movwf	(??_space+1)^0,c
  2329   0014B4  0E5A               	movlw	90
  2330   0014B6  6E22               	movwf	??_space^0,c
  2331   0014B8  0EB2               	movlw	178
  2332   0014BA                     u2387:
  2333   0014BA  2EE8               	decfsz	wreg,f,c
  2334   0014BC  D7FE               	bra	u2387
  2335   0014BE  2E22               	decfsz	??_space^0,f,c
  2336   0014C0  D7FC               	bra	u2387
  2337   0014C2  2E23               	decfsz	(??_space+1)^0,f,c
  2338   0014C4  D7FA               	bra	u2387
  2339   0014C6                     
  2340                           ;../dc_motor.c: 247:     stop(mL,mR);
  2341   0014C6  C01E  F018         	movff	space@mL,stop@mL
  2342   0014CA  C01F  F019         	movff	space@mL+1,stop@mL+1
  2343   0014CE  C020  F01A         	movff	space@mR,stop@mR
  2344   0014D2  C021  F01B         	movff	space@mR+1,stop@mR+1
  2345   0014D6  EC39  F00B         	call	_stop	;wreg free
  2346   0014DA                     
  2347                           ;../dc_motor.c: 248:     _delay((unsigned long)((200)*(64000000/4000.0)));
  2348   0014DA  0E11               	movlw	17
  2349   0014DC  6E23               	movwf	(??_space+1)^0,c
  2350   0014DE  0E3C               	movlw	60
  2351   0014E0  6E22               	movwf	??_space^0,c
  2352   0014E2  0ECB               	movlw	203
  2353   0014E4                     u2397:
  2354   0014E4  2EE8               	decfsz	wreg,f,c
  2355   0014E6  D7FE               	bra	u2397
  2356   0014E8  2E22               	decfsz	??_space^0,f,c
  2357   0014EA  D7FC               	bra	u2397
  2358   0014EC  2E23               	decfsz	(??_space+1)^0,f,c
  2359   0014EE  D7FA               	bra	u2397
  2360   0014F0  F000               	nop	
  2361   0014F2                     
  2362                           ;../dc_motor.c: 249:     LATHbits.LATH1 = 0;
  2363   0014F2  9280               	bcf	128,1,c	;volatile
  2364   0014F4  0012               	return		;funcret
  2365   0014F6                     __end_of_space:
  2366                           	callstack 0
  2367                           
  2368 ;; *************** function _right_45 *****************
  2369 ;; Defined at:
  2370 ;;		line 210 in file "../dc_motor.c"
  2371 ;; Parameters:    Size  Location     Type
  2372 ;;  mL              2   29[COMRAM] PTR struct DC_motor
  2373 ;;		 -> motorL(9), 
  2374 ;;  mR              2   31[COMRAM] PTR struct DC_motor
  2375 ;;		 -> motorR(9), 
  2376 ;;  count           2   33[COMRAM] int 
  2377 ;; Auto vars:     Size  Location     Type
  2378 ;;  i               2   37[COMRAM] int 
  2379 ;; Return value:  Size  Location     Type
  2380 ;;                  1    wreg      void 
  2381 ;; Registers used:
  2382 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2383 ;; Tracked objects:
  2384 ;;		On entry : 0/0
  2385 ;;		On exit  : 0/0
  2386 ;;		Unchanged: 0/0
  2387 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2388 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2389 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2390 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2391 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2392 ;;Total ram usage:       10 bytes
  2393 ;; Hardware stack levels used: 1
  2394 ;; Hardware stack levels required when called: 5
  2395 ;; This function calls:
  2396 ;;		_setMotorPWM
  2397 ;;		_stop
  2398 ;; This function is called by:
  2399 ;;		_instructions
  2400 ;; This function uses a non-reentrant model
  2401 ;;
  2402                           
  2403                           	psect	text10
  2404   00109A                     __ptext10:
  2405                           	callstack 0
  2406   00109A                     _right_45:
  2407                           	callstack 23
  2408   00109A                     
  2409                           ;../dc_motor.c: 210: void right_45(DC_motor *mL, DC_motor *mR, int count);../dc_motor.c:
      +                           211: {;../dc_motor.c: 212:     mL-> direction = 1;
  2410   00109A  EE20 F001          	lfsr	2,1
  2411   00109E  501E               	movf	right_45@mL^0,w,c
  2412   0010A0  26D9               	addwf	fsr2l,f,c
  2413   0010A2  501F               	movf	(right_45@mL+1)^0,w,c
  2414   0010A4  22DA               	addwfc	fsr2h,f,c
  2415   0010A6  0E01               	movlw	1
  2416   0010A8  6EDF               	movwf	indf2,c
  2417                           
  2418                           ;../dc_motor.c: 213:     mR-> direction = 0;
  2419   0010AA  EE20 F001          	lfsr	2,1
  2420   0010AE  5020               	movf	right_45@mR^0,w,c
  2421   0010B0  26D9               	addwf	fsr2l,f,c
  2422   0010B2  5021               	movf	(right_45@mR+1)^0,w,c
  2423   0010B4  22DA               	addwfc	fsr2h,f,c
  2424   0010B6  0E00               	movlw	0
  2425   0010B8  6EDF               	movwf	indf2,c
  2426   0010BA                     
  2427                           ;../dc_motor.c: 214:     LATHbits.LATH0 = 1;
  2428   0010BA  8080               	bsf	128,0,c	;volatile
  2429   0010BC                     
  2430                           ;../dc_motor.c: 215:     int i;;../dc_motor.c: 216:     for (i = 0;i<count;i++){
  2431   0010BC  0E00               	movlw	0
  2432   0010BE  6E27               	movwf	(right_45@i+1)^0,c
  2433   0010C0  0E00               	movlw	0
  2434   0010C2  6E26               	movwf	right_45@i^0,c
  2435   0010C4  EFD4  F008         	goto	l2180
  2436   0010C8                     l2152:
  2437                           
  2438                           ;../dc_motor.c: 218:         if (mL->power <= 30){mL->power += 10;}
  2439   0010C8  C01E  FFD9         	movff	right_45@mL,fsr2l
  2440   0010CC  C01F  FFDA         	movff	right_45@mL+1,fsr2h
  2441   0010D0  0E1F               	movlw	31
  2442   0010D2  60DF               	cpfslt	indf2,c
  2443   0010D4  EF6E  F008         	goto	u1251
  2444   0010D8  EF70  F008         	goto	u1250
  2445   0010DC                     u1251:
  2446   0010DC  EF76  F008         	goto	l2156
  2447   0010E0                     u1250:
  2448   0010E0  C01E  FFD9         	movff	right_45@mL,fsr2l
  2449   0010E4  C01F  FFDA         	movff	right_45@mL+1,fsr2h
  2450   0010E8  0E0A               	movlw	10
  2451   0010EA  26DF               	addwf	indf2,f,c
  2452   0010EC                     l2156:
  2453                           
  2454                           ;../dc_motor.c: 219:         if (mR->power <= 30){mR->power += 10;}
  2455   0010EC  C020  FFD9         	movff	right_45@mR,fsr2l
  2456   0010F0  C021  FFDA         	movff	right_45@mR+1,fsr2h
  2457   0010F4  0E1F               	movlw	31
  2458   0010F6  60DF               	cpfslt	indf2,c
  2459   0010F8  EF80  F008         	goto	u1261
  2460   0010FC  EF82  F008         	goto	u1260
  2461   001100                     u1261:
  2462   001100  EF88  F008         	goto	l2160
  2463   001104                     u1260:
  2464   001104  C020  FFD9         	movff	right_45@mR,fsr2l
  2465   001108  C021  FFDA         	movff	right_45@mR+1,fsr2h
  2466   00110C  0E0A               	movlw	10
  2467   00110E  26DF               	addwf	indf2,f,c
  2468   001110                     l2160:
  2469                           
  2470                           ;../dc_motor.c: 220:         setMotorPWM(mL);
  2471   001110  C01E  F012         	movff	right_45@mL,setMotorPWM@m
  2472   001114  C01F  F013         	movff	right_45@mL+1,setMotorPWM@m+1
  2473   001118  ECF7  F006         	call	_setMotorPWM	;wreg free
  2474   00111C                     
  2475                           ;../dc_motor.c: 221:         setMotorPWM(mR);
  2476   00111C  C020  F012         	movff	right_45@mR,setMotorPWM@m
  2477   001120  C021  F013         	movff	right_45@mR+1,setMotorPWM@m+1
  2478   001124  ECF7  F006         	call	_setMotorPWM	;wreg free
  2479   001128                     
  2480                           ;../dc_motor.c: 222:         _delay((unsigned long)((50)*(64000000/4000000.0)));
  2481   001128  0EA0               	movlw	160
  2482   00112A                     u2407:
  2483   00112A  D000               	nop2	
  2484   00112C  2EE8               	decfsz	wreg,f,c
  2485   00112E  D7FD               	bra	u2407
  2486   001130                     l2166:
  2487                           
  2488                           ;../dc_motor.c: 217:     while ((mL->power <= 30) || (mR->power <= 30)){
  2489   001130  C01E  FFD9         	movff	right_45@mL,fsr2l
  2490   001134  C01F  FFDA         	movff	right_45@mL+1,fsr2h
  2491   001138  0E1E               	movlw	30
  2492   00113A  64DF               	cpfsgt	indf2,c
  2493   00113C  EFA2  F008         	goto	u1271
  2494   001140  EFA4  F008         	goto	u1270
  2495   001144                     u1271:
  2496   001144  EF64  F008         	goto	l2152
  2497   001148                     u1270:
  2498   001148  C020  FFD9         	movff	right_45@mR,fsr2l
  2499   00114C  C021  FFDA         	movff	right_45@mR+1,fsr2h
  2500   001150  0E1E               	movlw	30
  2501   001152  64DF               	cpfsgt	indf2,c
  2502   001154  EFAE  F008         	goto	u1281
  2503   001158  EFB0  F008         	goto	u1280
  2504   00115C                     u1281:
  2505   00115C  EF64  F008         	goto	l2152
  2506   001160                     u1280:
  2507   001160                     
  2508                           ;../dc_motor.c: 224:     _delay((unsigned long)((250)*(64000000/4000.0)));
  2509   001160  0E15               	movlw	21
  2510   001162  6E25               	movwf	(??_right_45+1)^0,c
  2511   001164  0E4B               	movlw	75
  2512   001166  6E24               	movwf	??_right_45^0,c
  2513   001168  0EBE               	movlw	190
  2514   00116A                     u2417:
  2515   00116A  2EE8               	decfsz	wreg,f,c
  2516   00116C  D7FE               	bra	u2417
  2517   00116E  2E24               	decfsz	??_right_45^0,f,c
  2518   001170  D7FC               	bra	u2417
  2519   001172  2E25               	decfsz	(??_right_45+1)^0,f,c
  2520   001174  D7FA               	bra	u2417
  2521   001176  D000               	nop2	
  2522   001178                     
  2523                           ;../dc_motor.c: 225:     stop(mL,mR);
  2524   001178  C01E  F018         	movff	right_45@mL,stop@mL
  2525   00117C  C01F  F019         	movff	right_45@mL+1,stop@mL+1
  2526   001180  C020  F01A         	movff	right_45@mR,stop@mR
  2527   001184  C021  F01B         	movff	right_45@mR+1,stop@mR+1
  2528   001188  EC39  F00B         	call	_stop	;wreg free
  2529   00118C                     
  2530                           ;../dc_motor.c: 226:     _delay((unsigned long)((150)*(64000000/4000.0)));
  2531   00118C  0E0D               	movlw	13
  2532   00118E  6E25               	movwf	(??_right_45+1)^0,c
  2533   001190  0E2D               	movlw	45
  2534   001192  6E24               	movwf	??_right_45^0,c
  2535   001194  0ED8               	movlw	216
  2536   001196                     u2427:
  2537   001196  2EE8               	decfsz	wreg,f,c
  2538   001198  D7FE               	bra	u2427
  2539   00119A  2E24               	decfsz	??_right_45^0,f,c
  2540   00119C  D7FC               	bra	u2427
  2541   00119E  2E25               	decfsz	(??_right_45+1)^0,f,c
  2542   0011A0  D7FA               	bra	u2427
  2543   0011A2                     
  2544                           ;../dc_motor.c: 227:     LATHbits.LATH0 = 0;
  2545   0011A2  9080               	bcf	128,0,c	;volatile
  2546   0011A4                     
  2547                           ;../dc_motor.c: 228: }
  2548   0011A4  4A26               	infsnz	right_45@i^0,f,c
  2549   0011A6  2A27               	incf	(right_45@i+1)^0,f,c
  2550   0011A8                     l2180:
  2551   0011A8  5022               	movf	right_45@count^0,w,c
  2552   0011AA  5C26               	subwf	right_45@i^0,w,c
  2553   0011AC  5027               	movf	(right_45@i+1)^0,w,c
  2554   0011AE  0A80               	xorlw	128
  2555   0011B0  6E24               	movwf	??_right_45^0,c
  2556   0011B2  5023               	movf	(right_45@count+1)^0,w,c
  2557   0011B4  0A80               	xorlw	128
  2558   0011B6  5824               	subwfb	??_right_45^0,w,c
  2559   0011B8  A0D8               	btfss	status,0,c
  2560   0011BA  EFE1  F008         	goto	u1291
  2561   0011BE  EFE3  F008         	goto	u1290
  2562   0011C2                     u1291:
  2563   0011C2  EF98  F008         	goto	l2166
  2564   0011C6                     u1290:
  2565   0011C6  0012               	return		;funcret
  2566   0011C8                     __end_of_right_45:
  2567                           	callstack 0
  2568                           
  2569 ;; *************** function _reverse *****************
  2570 ;; Defined at:
  2571 ;;		line 146 in file "../dc_motor.c"
  2572 ;; Parameters:    Size  Location     Type
  2573 ;;  mL              2   29[COMRAM] PTR struct DC_motor
  2574 ;;		 -> motorL(9), 
  2575 ;;  mR              2   31[COMRAM] PTR struct DC_motor
  2576 ;;		 -> motorR(9), 
  2577 ;; Auto vars:     Size  Location     Type
  2578 ;;		None
  2579 ;; Return value:  Size  Location     Type
  2580 ;;                  1    wreg      void 
  2581 ;; Registers used:
  2582 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2583 ;; Tracked objects:
  2584 ;;		On entry : 0/0
  2585 ;;		On exit  : 0/0
  2586 ;;		Unchanged: 0/0
  2587 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2588 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2589 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2590 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2591 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2592 ;;Total ram usage:        5 bytes
  2593 ;; Hardware stack levels used: 1
  2594 ;; Hardware stack levels required when called: 5
  2595 ;; This function calls:
  2596 ;;		_setMotorPWM
  2597 ;;		_stop
  2598 ;; This function is called by:
  2599 ;;		_instructions
  2600 ;; This function uses a non-reentrant model
  2601 ;;
  2602                           
  2603                           	psect	text11
  2604   0014F6                     __ptext11:
  2605                           	callstack 0
  2606   0014F6                     _reverse:
  2607                           	callstack 23
  2608   0014F6                     
  2609                           ;../dc_motor.c: 146: void reverse(DC_motor *mL, DC_motor *mR);../dc_motor.c: 147: {;../d
      +                          c_motor.c: 148:     stop(mL,mR);
  2610   0014F6  C01E  F018         	movff	reverse@mL,stop@mL
  2611   0014FA  C01F  F019         	movff	reverse@mL+1,stop@mL+1
  2612   0014FE  C020  F01A         	movff	reverse@mR,stop@mR
  2613   001502  C021  F01B         	movff	reverse@mR+1,stop@mR+1
  2614   001506  EC39  F00B         	call	_stop	;wreg free
  2615   00150A                     
  2616                           ;../dc_motor.c: 149:     mL-> direction = 0;
  2617   00150A  EE20 F001          	lfsr	2,1
  2618   00150E  501E               	movf	reverse@mL^0,w,c
  2619   001510  26D9               	addwf	fsr2l,f,c
  2620   001512  501F               	movf	(reverse@mL+1)^0,w,c
  2621   001514  22DA               	addwfc	fsr2h,f,c
  2622   001516  0E00               	movlw	0
  2623   001518  6EDF               	movwf	indf2,c
  2624   00151A                     
  2625                           ;../dc_motor.c: 150:     mR-> direction = 0;
  2626   00151A  EE20 F001          	lfsr	2,1
  2627   00151E  5020               	movf	reverse@mR^0,w,c
  2628   001520  26D9               	addwf	fsr2l,f,c
  2629   001522  5021               	movf	(reverse@mR+1)^0,w,c
  2630   001524  22DA               	addwfc	fsr2h,f,c
  2631   001526  0E00               	movlw	0
  2632   001528  6EDF               	movwf	indf2,c
  2633   00152A                     
  2634                           ;../dc_motor.c: 151:     LATHbits.LATH1 = 1;
  2635   00152A  8280               	bsf	128,1,c	;volatile
  2636                           
  2637                           ;../dc_motor.c: 152:     setMotorPWM(mR);
  2638   00152C  C020  F012         	movff	reverse@mR,setMotorPWM@m
  2639   001530  C021  F013         	movff	reverse@mR+1,setMotorPWM@m+1
  2640   001534  ECF7  F006         	call	_setMotorPWM	;wreg free
  2641                           
  2642                           ;../dc_motor.c: 153:     setMotorPWM(mL);
  2643   001538  C01E  F012         	movff	reverse@mL,setMotorPWM@m
  2644   00153C  C01F  F013         	movff	reverse@mL+1,setMotorPWM@m+1
  2645   001540  ECF7  F006         	call	_setMotorPWM	;wreg free
  2646                           
  2647                           ;../dc_motor.c: 154:     while ((mL->power <40) && (mR->power <40)){
  2648   001544  EFC0  F00A         	goto	l2102
  2649   001548                     l2094:
  2650                           
  2651                           ;../dc_motor.c: 155:         mL->power += 10;
  2652   001548  C01E  FFD9         	movff	reverse@mL,fsr2l
  2653   00154C  C01F  FFDA         	movff	reverse@mL+1,fsr2h
  2654   001550  0E0A               	movlw	10
  2655   001552  26DF               	addwf	indf2,f,c
  2656                           
  2657                           ;../dc_motor.c: 156:         mR->power += 10;
  2658   001554  C020  FFD9         	movff	reverse@mR,fsr2l
  2659   001558  C021  FFDA         	movff	reverse@mR+1,fsr2h
  2660   00155C  0E0A               	movlw	10
  2661   00155E  26DF               	addwf	indf2,f,c
  2662   001560                     
  2663                           ;../dc_motor.c: 157:         setMotorPWM(mL);
  2664   001560  C01E  F012         	movff	reverse@mL,setMotorPWM@m
  2665   001564  C01F  F013         	movff	reverse@mL+1,setMotorPWM@m+1
  2666   001568  ECF7  F006         	call	_setMotorPWM	;wreg free
  2667   00156C                     
  2668                           ;../dc_motor.c: 158:         setMotorPWM(mR);
  2669   00156C  C020  F012         	movff	reverse@mR,setMotorPWM@m
  2670   001570  C021  F013         	movff	reverse@mR+1,setMotorPWM@m+1
  2671   001574  ECF7  F006         	call	_setMotorPWM	;wreg free
  2672   001578                     
  2673                           ;../dc_motor.c: 159:         _delay((unsigned long)((20)*(64000000/4000000.0)));
  2674   001578  0E6A               	movlw	106
  2675   00157A                     u2437:
  2676   00157A  2EE8               	decfsz	wreg,f,c
  2677   00157C  D7FE               	bra	u2437
  2678   00157E  D000               	nop2	
  2679   001580                     l2102:
  2680                           
  2681                           ;../dc_motor.c: 154:     while ((mL->power <40) && (mR->power <40)){
  2682   001580  C01E  FFD9         	movff	reverse@mL,fsr2l
  2683   001584  C01F  FFDA         	movff	reverse@mL+1,fsr2h
  2684   001588  0E28               	movlw	40
  2685   00158A  60DF               	cpfslt	indf2,c
  2686   00158C  EFCA  F00A         	goto	u1181
  2687   001590  EFCC  F00A         	goto	u1180
  2688   001594                     u1181:
  2689   001594  EFD8  F00A         	goto	l212
  2690   001598                     u1180:
  2691   001598  C020  FFD9         	movff	reverse@mR,fsr2l
  2692   00159C  C021  FFDA         	movff	reverse@mR+1,fsr2h
  2693   0015A0  0E27               	movlw	39
  2694   0015A2  64DF               	cpfsgt	indf2,c
  2695   0015A4  EFD6  F00A         	goto	u1191
  2696   0015A8  EFD8  F00A         	goto	u1190
  2697   0015AC                     u1191:
  2698   0015AC  EFA4  F00A         	goto	l2094
  2699   0015B0                     u1190:
  2700   0015B0                     l212:
  2701                           
  2702                           ;../dc_motor.c: 161:     LATHbits.LATH1 = 0;
  2703   0015B0  9280               	bcf	128,1,c	;volatile
  2704   0015B2  0012               	return		;funcret
  2705   0015B4                     __end_of_reverse:
  2706                           	callstack 0
  2707                           
  2708 ;; *************** function _left_45 *****************
  2709 ;; Defined at:
  2710 ;;		line 187 in file "../dc_motor.c"
  2711 ;; Parameters:    Size  Location     Type
  2712 ;;  mL              2   29[COMRAM] PTR struct DC_motor
  2713 ;;		 -> motorL(9), 
  2714 ;;  mR              2   31[COMRAM] PTR struct DC_motor
  2715 ;;		 -> motorR(9), 
  2716 ;;  count           2   33[COMRAM] int 
  2717 ;; Auto vars:     Size  Location     Type
  2718 ;;  i               2   37[COMRAM] int 
  2719 ;; Return value:  Size  Location     Type
  2720 ;;                  1    wreg      void 
  2721 ;; Registers used:
  2722 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2723 ;; Tracked objects:
  2724 ;;		On entry : 0/0
  2725 ;;		On exit  : 0/0
  2726 ;;		Unchanged: 0/0
  2727 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2728 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2729 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2730 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2731 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2732 ;;Total ram usage:       10 bytes
  2733 ;; Hardware stack levels used: 1
  2734 ;; Hardware stack levels required when called: 5
  2735 ;; This function calls:
  2736 ;;		_setMotorPWM
  2737 ;;		_stop
  2738 ;; This function is called by:
  2739 ;;		_instructions
  2740 ;; This function uses a non-reentrant model
  2741 ;;
  2742                           
  2743                           	psect	text12
  2744   000F5A                     __ptext12:
  2745                           	callstack 0
  2746   000F5A                     _left_45:
  2747                           	callstack 23
  2748   000F5A                     
  2749                           ;../dc_motor.c: 187: void left_45(DC_motor *mL, DC_motor *mR, int count);../dc_motor.c: 
      +                          188: {;../dc_motor.c: 189:     stop(mL,mR);
  2750   000F5A  C01E  F018         	movff	left_45@mL,stop@mL
  2751   000F5E  C01F  F019         	movff	left_45@mL+1,stop@mL+1
  2752   000F62  C020  F01A         	movff	left_45@mR,stop@mR
  2753   000F66  C021  F01B         	movff	left_45@mR+1,stop@mR+1
  2754   000F6A  EC39  F00B         	call	_stop	;wreg free
  2755   000F6E                     
  2756                           ;../dc_motor.c: 190:     mL-> direction = 0;
  2757   000F6E  EE20 F001          	lfsr	2,1
  2758   000F72  501E               	movf	left_45@mL^0,w,c
  2759   000F74  26D9               	addwf	fsr2l,f,c
  2760   000F76  501F               	movf	(left_45@mL+1)^0,w,c
  2761   000F78  22DA               	addwfc	fsr2h,f,c
  2762   000F7A  0E00               	movlw	0
  2763   000F7C  6EDF               	movwf	indf2,c
  2764   000F7E                     
  2765                           ;../dc_motor.c: 191:     mR-> direction = 1;
  2766   000F7E  EE20 F001          	lfsr	2,1
  2767   000F82  5020               	movf	left_45@mR^0,w,c
  2768   000F84  26D9               	addwf	fsr2l,f,c
  2769   000F86  5021               	movf	(left_45@mR+1)^0,w,c
  2770   000F88  22DA               	addwfc	fsr2h,f,c
  2771   000F8A  0E01               	movlw	1
  2772   000F8C  6EDF               	movwf	indf2,c
  2773   000F8E                     
  2774                           ;../dc_motor.c: 192:     LATFbits.LATF0 = 1;
  2775   000F8E  807E               	bsf	126,0,c	;volatile
  2776   000F90                     
  2777                           ;../dc_motor.c: 193:     int i;;../dc_motor.c: 194:     for (i = 0;i<count;i++){
  2778   000F90  0E00               	movlw	0
  2779   000F92  6E27               	movwf	(left_45@i+1)^0,c
  2780   000F94  0E00               	movlw	0
  2781   000F96  6E26               	movwf	left_45@i^0,c
  2782   000F98  EF3D  F008         	goto	l2144
  2783   000F9C                     l2116:
  2784                           
  2785                           ;../dc_motor.c: 196:         if (mL->power <= 30){mL->power += 10;}
  2786   000F9C  C01E  FFD9         	movff	left_45@mL,fsr2l
  2787   000FA0  C01F  FFDA         	movff	left_45@mL+1,fsr2h
  2788   000FA4  0E1F               	movlw	31
  2789   000FA6  60DF               	cpfslt	indf2,c
  2790   000FA8  EFD8  F007         	goto	u1201
  2791   000FAC  EFDA  F007         	goto	u1200
  2792   000FB0                     u1201:
  2793   000FB0  EFE0  F007         	goto	l2120
  2794   000FB4                     u1200:
  2795   000FB4  C01E  FFD9         	movff	left_45@mL,fsr2l
  2796   000FB8  C01F  FFDA         	movff	left_45@mL+1,fsr2h
  2797   000FBC  0E0A               	movlw	10
  2798   000FBE  26DF               	addwf	indf2,f,c
  2799   000FC0                     l2120:
  2800                           
  2801                           ;../dc_motor.c: 197:         if (mR->power <= 30){mR->power += 10;}
  2802   000FC0  C020  FFD9         	movff	left_45@mR,fsr2l
  2803   000FC4  C021  FFDA         	movff	left_45@mR+1,fsr2h
  2804   000FC8  0E1F               	movlw	31
  2805   000FCA  60DF               	cpfslt	indf2,c
  2806   000FCC  EFEA  F007         	goto	u1211
  2807   000FD0  EFEC  F007         	goto	u1210
  2808   000FD4                     u1211:
  2809   000FD4  EFF2  F007         	goto	l2124
  2810   000FD8                     u1210:
  2811   000FD8  C020  FFD9         	movff	left_45@mR,fsr2l
  2812   000FDC  C021  FFDA         	movff	left_45@mR+1,fsr2h
  2813   000FE0  0E0A               	movlw	10
  2814   000FE2  26DF               	addwf	indf2,f,c
  2815   000FE4                     l2124:
  2816                           
  2817                           ;../dc_motor.c: 198:         setMotorPWM(mL);
  2818   000FE4  C01E  F012         	movff	left_45@mL,setMotorPWM@m
  2819   000FE8  C01F  F013         	movff	left_45@mL+1,setMotorPWM@m+1
  2820   000FEC  ECF7  F006         	call	_setMotorPWM	;wreg free
  2821   000FF0                     
  2822                           ;../dc_motor.c: 199:         setMotorPWM(mR);
  2823   000FF0  C020  F012         	movff	left_45@mR,setMotorPWM@m
  2824   000FF4  C021  F013         	movff	left_45@mR+1,setMotorPWM@m+1
  2825   000FF8  ECF7  F006         	call	_setMotorPWM	;wreg free
  2826   000FFC                     
  2827                           ;../dc_motor.c: 200:         _delay((unsigned long)((20)*(64000000/4000000.0)));
  2828   000FFC  0E6A               	movlw	106
  2829   000FFE                     u2447:
  2830   000FFE  2EE8               	decfsz	wreg,f,c
  2831   001000  D7FE               	bra	u2447
  2832   001002  D000               	nop2	
  2833   001004                     l2130:
  2834                           
  2835                           ;../dc_motor.c: 195:     while ((mL->power <= 30) || (mR->power <= 30)){
  2836   001004  C01E  FFD9         	movff	left_45@mL,fsr2l
  2837   001008  C01F  FFDA         	movff	left_45@mL+1,fsr2h
  2838   00100C  0E1E               	movlw	30
  2839   00100E  64DF               	cpfsgt	indf2,c
  2840   001010  EF0C  F008         	goto	u1221
  2841   001014  EF0E  F008         	goto	u1220
  2842   001018                     u1221:
  2843   001018  EFCE  F007         	goto	l2116
  2844   00101C                     u1220:
  2845   00101C  C020  FFD9         	movff	left_45@mR,fsr2l
  2846   001020  C021  FFDA         	movff	left_45@mR+1,fsr2h
  2847   001024  0E1E               	movlw	30
  2848   001026  64DF               	cpfsgt	indf2,c
  2849   001028  EF18  F008         	goto	u1231
  2850   00102C  EF1A  F008         	goto	u1230
  2851   001030                     u1231:
  2852   001030  EFCE  F007         	goto	l2116
  2853   001034                     u1230:
  2854   001034                     
  2855                           ;../dc_motor.c: 202:     _delay((unsigned long)((230)*(64000000/4000.0)));
  2856   001034  0E13               	movlw	19
  2857   001036  6E25               	movwf	(??_left_45+1)^0,c
  2858   001038  0EAC               	movlw	172
  2859   00103A  6E24               	movwf	??_left_45^0,c
  2860   00103C  0E2A               	movlw	42
  2861   00103E                     u2457:
  2862   00103E  2EE8               	decfsz	wreg,f,c
  2863   001040  D7FE               	bra	u2457
  2864   001042  2E24               	decfsz	??_left_45^0,f,c
  2865   001044  D7FC               	bra	u2457
  2866   001046  2E25               	decfsz	(??_left_45+1)^0,f,c
  2867   001048  D7FA               	bra	u2457
  2868   00104A                     
  2869                           ;../dc_motor.c: 203:     stop(mL,mR);
  2870   00104A  C01E  F018         	movff	left_45@mL,stop@mL
  2871   00104E  C01F  F019         	movff	left_45@mL+1,stop@mL+1
  2872   001052  C020  F01A         	movff	left_45@mR,stop@mR
  2873   001056  C021  F01B         	movff	left_45@mR+1,stop@mR+1
  2874   00105A  EC39  F00B         	call	_stop	;wreg free
  2875   00105E                     
  2876                           ;../dc_motor.c: 204:     _delay((unsigned long)((150)*(64000000/4000.0)));
  2877   00105E  0E0D               	movlw	13
  2878   001060  6E25               	movwf	(??_left_45+1)^0,c
  2879   001062  0E2D               	movlw	45
  2880   001064  6E24               	movwf	??_left_45^0,c
  2881   001066  0ED8               	movlw	216
  2882   001068                     u2467:
  2883   001068  2EE8               	decfsz	wreg,f,c
  2884   00106A  D7FE               	bra	u2467
  2885   00106C  2E24               	decfsz	??_left_45^0,f,c
  2886   00106E  D7FC               	bra	u2467
  2887   001070  2E25               	decfsz	(??_left_45+1)^0,f,c
  2888   001072  D7FA               	bra	u2467
  2889   001074                     
  2890                           ;../dc_motor.c: 205:     LATFbits.LATF0 = 0;
  2891   001074  907E               	bcf	126,0,c	;volatile
  2892   001076                     
  2893                           ;../dc_motor.c: 206:     }
  2894   001076  4A26               	infsnz	left_45@i^0,f,c
  2895   001078  2A27               	incf	(left_45@i+1)^0,f,c
  2896   00107A                     l2144:
  2897   00107A  5022               	movf	left_45@count^0,w,c
  2898   00107C  5C26               	subwf	left_45@i^0,w,c
  2899   00107E  5027               	movf	(left_45@i+1)^0,w,c
  2900   001080  0A80               	xorlw	128
  2901   001082  6E24               	movwf	??_left_45^0,c
  2902   001084  5023               	movf	(left_45@count+1)^0,w,c
  2903   001086  0A80               	xorlw	128
  2904   001088  5824               	subwfb	??_left_45^0,w,c
  2905   00108A  A0D8               	btfss	status,0,c
  2906   00108C  EF4A  F008         	goto	u1241
  2907   001090  EF4C  F008         	goto	u1240
  2908   001094                     u1241:
  2909   001094  EF02  F008         	goto	l2130
  2910   001098                     u1240:
  2911   001098  0012               	return		;funcret
  2912   00109A                     __end_of_left_45:
  2913                           	callstack 0
  2914                           
  2915 ;; *************** function _forward *****************
  2916 ;; Defined at:
  2917 ;;		line 128 in file "../dc_motor.c"
  2918 ;; Parameters:    Size  Location     Type
  2919 ;;  mL              2   29[COMRAM] PTR struct DC_motor
  2920 ;;		 -> motorL(9), 
  2921 ;;  mR              2   31[COMRAM] PTR struct DC_motor
  2922 ;;		 -> motorR(9), 
  2923 ;; Auto vars:     Size  Location     Type
  2924 ;;		None
  2925 ;; Return value:  Size  Location     Type
  2926 ;;                  1    wreg      void 
  2927 ;; Registers used:
  2928 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2929 ;; Tracked objects:
  2930 ;;		On entry : 0/0
  2931 ;;		On exit  : 0/0
  2932 ;;		Unchanged: 0/0
  2933 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2934 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2935 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2936 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2937 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2938 ;;Total ram usage:        5 bytes
  2939 ;; Hardware stack levels used: 1
  2940 ;; Hardware stack levels required when called: 5
  2941 ;; This function calls:
  2942 ;;		_setMotorPWM
  2943 ;;		_stop
  2944 ;; This function is called by:
  2945 ;;		_buggy_color_response
  2946 ;; This function uses a non-reentrant model
  2947 ;;
  2948                           
  2949                           	psect	text13
  2950   0015B4                     __ptext13:
  2951                           	callstack 0
  2952   0015B4                     _forward:
  2953                           	callstack 24
  2954   0015B4                     
  2955                           ;../dc_motor.c: 128: void forward(DC_motor *mL, DC_motor *mR);../dc_motor.c: 129: {;../d
      +                          c_motor.c: 130:     stop(mL,mR);
  2956   0015B4  C01E  F018         	movff	forward@mL,stop@mL
  2957   0015B8  C01F  F019         	movff	forward@mL+1,stop@mL+1
  2958   0015BC  C020  F01A         	movff	forward@mR,stop@mR
  2959   0015C0  C021  F01B         	movff	forward@mR+1,stop@mR+1
  2960   0015C4  EC39  F00B         	call	_stop	;wreg free
  2961   0015C8                     
  2962                           ;../dc_motor.c: 131:     mL-> direction = 1;
  2963   0015C8  EE20 F001          	lfsr	2,1
  2964   0015CC  501E               	movf	forward@mL^0,w,c
  2965   0015CE  26D9               	addwf	fsr2l,f,c
  2966   0015D0  501F               	movf	(forward@mL+1)^0,w,c
  2967   0015D2  22DA               	addwfc	fsr2h,f,c
  2968   0015D4  0E01               	movlw	1
  2969   0015D6  6EDF               	movwf	indf2,c
  2970   0015D8                     
  2971                           ;../dc_motor.c: 132:     mR-> direction = 1;
  2972   0015D8  EE20 F001          	lfsr	2,1
  2973   0015DC  5020               	movf	forward@mR^0,w,c
  2974   0015DE  26D9               	addwf	fsr2l,f,c
  2975   0015E0  5021               	movf	(forward@mR+1)^0,w,c
  2976   0015E2  22DA               	addwfc	fsr2h,f,c
  2977   0015E4  0E01               	movlw	1
  2978   0015E6  6EDF               	movwf	indf2,c
  2979   0015E8                     
  2980                           ;../dc_motor.c: 133:     LATDbits.LATD3 = 1;
  2981   0015E8  867C               	bsf	124,3,c	;volatile
  2982                           
  2983                           ;../dc_motor.c: 134:     setMotorPWM(mR);
  2984   0015EA  C020  F012         	movff	forward@mR,setMotorPWM@m
  2985   0015EE  C021  F013         	movff	forward@mR+1,setMotorPWM@m+1
  2986   0015F2  ECF7  F006         	call	_setMotorPWM	;wreg free
  2987                           
  2988                           ;../dc_motor.c: 135:     setMotorPWM(mL);
  2989   0015F6  C01E  F012         	movff	forward@mL,setMotorPWM@m
  2990   0015FA  C01F  F013         	movff	forward@mL+1,setMotorPWM@m+1
  2991   0015FE  ECF7  F006         	call	_setMotorPWM	;wreg free
  2992                           
  2993                           ;../dc_motor.c: 136:     while ((mL->power <40) && (mR->power <40)){
  2994   001602  EF1F  F00B         	goto	l2480
  2995   001606                     l2472:
  2996                           
  2997                           ;../dc_motor.c: 137:         mL->power += 10;
  2998   001606  C01E  FFD9         	movff	forward@mL,fsr2l
  2999   00160A  C01F  FFDA         	movff	forward@mL+1,fsr2h
  3000   00160E  0E0A               	movlw	10
  3001   001610  26DF               	addwf	indf2,f,c
  3002                           
  3003                           ;../dc_motor.c: 138:         mR->power += 10;
  3004   001612  C020  FFD9         	movff	forward@mR,fsr2l
  3005   001616  C021  FFDA         	movff	forward@mR+1,fsr2h
  3006   00161A  0E0A               	movlw	10
  3007   00161C  26DF               	addwf	indf2,f,c
  3008   00161E                     
  3009                           ;../dc_motor.c: 139:         setMotorPWM(mL);
  3010   00161E  C01E  F012         	movff	forward@mL,setMotorPWM@m
  3011   001622  C01F  F013         	movff	forward@mL+1,setMotorPWM@m+1
  3012   001626  ECF7  F006         	call	_setMotorPWM	;wreg free
  3013   00162A                     
  3014                           ;../dc_motor.c: 140:         setMotorPWM(mR);
  3015   00162A  C020  F012         	movff	forward@mR,setMotorPWM@m
  3016   00162E  C021  F013         	movff	forward@mR+1,setMotorPWM@m+1
  3017   001632  ECF7  F006         	call	_setMotorPWM	;wreg free
  3018   001636                     
  3019                           ;../dc_motor.c: 141:         _delay((unsigned long)((20)*(64000000/4000000.0)));
  3020   001636  0E6A               	movlw	106
  3021   001638                     u2477:
  3022   001638  2EE8               	decfsz	wreg,f,c
  3023   00163A  D7FE               	bra	u2477
  3024   00163C  D000               	nop2	
  3025   00163E                     l2480:
  3026                           
  3027                           ;../dc_motor.c: 136:     while ((mL->power <40) && (mR->power <40)){
  3028   00163E  C01E  FFD9         	movff	forward@mL,fsr2l
  3029   001642  C01F  FFDA         	movff	forward@mL+1,fsr2h
  3030   001646  0E28               	movlw	40
  3031   001648  60DF               	cpfslt	indf2,c
  3032   00164A  EF29  F00B         	goto	u1721
  3033   00164E  EF2B  F00B         	goto	u1720
  3034   001652                     u1721:
  3035   001652  EF37  F00B         	goto	l204
  3036   001656                     u1720:
  3037   001656  C020  FFD9         	movff	forward@mR,fsr2l
  3038   00165A  C021  FFDA         	movff	forward@mR+1,fsr2h
  3039   00165E  0E27               	movlw	39
  3040   001660  64DF               	cpfsgt	indf2,c
  3041   001662  EF35  F00B         	goto	u1731
  3042   001666  EF37  F00B         	goto	u1730
  3043   00166A                     u1731:
  3044   00166A  EF03  F00B         	goto	l2472
  3045   00166E                     u1730:
  3046   00166E                     l204:
  3047                           
  3048                           ;../dc_motor.c: 143:     LATDbits.LATD3 = 0;
  3049   00166E  967C               	bcf	124,3,c	;volatile
  3050   001670  0012               	return		;funcret
  3051   001672                     __end_of_forward:
  3052                           	callstack 0
  3053                           
  3054 ;; *************** function _stop *****************
  3055 ;; Defined at:
  3056 ;;		line 165 in file "../dc_motor.c"
  3057 ;; Parameters:    Size  Location     Type
  3058 ;;  mL              2   23[COMRAM] PTR struct DC_motor
  3059 ;;		 -> motorL(9), 
  3060 ;;  mR              2   25[COMRAM] PTR struct DC_motor
  3061 ;;		 -> motorR(9), 
  3062 ;; Auto vars:     Size  Location     Type
  3063 ;;  i               2   27[COMRAM] int 
  3064 ;; Return value:  Size  Location     Type
  3065 ;;                  1    wreg      void 
  3066 ;; Registers used:
  3067 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3068 ;; Tracked objects:
  3069 ;;		On entry : 0/0
  3070 ;;		On exit  : 0/0
  3071 ;;		Unchanged: 0/0
  3072 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3073 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3074 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3075 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3076 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3077 ;;Total ram usage:        6 bytes
  3078 ;; Hardware stack levels used: 1
  3079 ;; Hardware stack levels required when called: 4
  3080 ;; This function calls:
  3081 ;;		_setMotorPWM
  3082 ;; This function is called by:
  3083 ;;		_buggy_color_response
  3084 ;;		_forward
  3085 ;;		_reverse
  3086 ;;		_left_45
  3087 ;;		_right_45
  3088 ;;		_space
  3089 ;;		_instructions
  3090 ;; This function uses a non-reentrant model
  3091 ;;
  3092                           
  3093                           	psect	text14
  3094   001672                     __ptext14:
  3095                           	callstack 0
  3096   001672                     _stop:
  3097                           	callstack 25
  3098   001672                     
  3099                           ;../dc_motor.c: 165: void stop(DC_motor *mL, DC_motor *mR);../dc_motor.c: 166: {;../dc_m
      +                          otor.c: 167:     mL->brakemode = 1;
  3100   001672  EE20 F002          	lfsr	2,2
  3101   001676  5018               	movf	stop@mL^0,w,c
  3102   001678  26D9               	addwf	fsr2l,f,c
  3103   00167A  5019               	movf	(stop@mL+1)^0,w,c
  3104   00167C  22DA               	addwfc	fsr2h,f,c
  3105   00167E  0E01               	movlw	1
  3106   001680  6EDF               	movwf	indf2,c
  3107                           
  3108                           ;../dc_motor.c: 168:     mR->brakemode = 1;
  3109   001682  EE20 F002          	lfsr	2,2
  3110   001686  501A               	movf	stop@mR^0,w,c
  3111   001688  26D9               	addwf	fsr2l,f,c
  3112   00168A  501B               	movf	(stop@mR+1)^0,w,c
  3113   00168C  22DA               	addwfc	fsr2h,f,c
  3114   00168E  0E01               	movlw	1
  3115   001690  6EDF               	movwf	indf2,c
  3116   001692                     
  3117                           ;../dc_motor.c: 169:     LATDbits.LATD4 = 1;
  3118   001692  887C               	bsf	124,4,c	;volatile
  3119   001694                     
  3120                           ;../dc_motor.c: 171:     for (int i = 70; i >= 0; i=i-10) {
  3121   001694  0E00               	movlw	0
  3122   001696  6E1D               	movwf	(stop@i+1)^0,c
  3123   001698  0E46               	movlw	70
  3124   00169A  6E1C               	movwf	stop@i^0,c
  3125   00169C                     l2042:
  3126                           
  3127                           ;../dc_motor.c: 172:         mL -> power = i;
  3128   00169C  C018  FFD9         	movff	stop@mL,fsr2l
  3129   0016A0  C019  FFDA         	movff	stop@mL+1,fsr2h
  3130   0016A4  C01C  FFDF         	movff	stop@i,indf2
  3131                           
  3132                           ;../dc_motor.c: 173:         mR -> power = i;
  3133   0016A8  C01A  FFD9         	movff	stop@mR,fsr2l
  3134   0016AC  C01B  FFDA         	movff	stop@mR+1,fsr2h
  3135   0016B0  C01C  FFDF         	movff	stop@i,indf2
  3136   0016B4                     
  3137                           ;../dc_motor.c: 174:         setMotorPWM(mL);
  3138   0016B4  C018  F012         	movff	stop@mL,setMotorPWM@m
  3139   0016B8  C019  F013         	movff	stop@mL+1,setMotorPWM@m+1
  3140   0016BC  ECF7  F006         	call	_setMotorPWM	;wreg free
  3141   0016C0                     
  3142                           ;../dc_motor.c: 175:         setMotorPWM(mR);
  3143   0016C0  C01A  F012         	movff	stop@mR,setMotorPWM@m
  3144   0016C4  C01B  F013         	movff	stop@mR+1,setMotorPWM@m+1
  3145   0016C8  ECF7  F006         	call	_setMotorPWM	;wreg free
  3146   0016CC                     
  3147                           ;../dc_motor.c: 176:         _delay((unsigned long)((20)*(64000000/4000000.0)));
  3148   0016CC  0E6A               	movlw	106
  3149   0016CE                     u2487:
  3150   0016CE  2EE8               	decfsz	wreg,f,c
  3151   0016D0  D7FE               	bra	u2487
  3152   0016D2  D000               	nop2	
  3153   0016D4                     
  3154                           ;../dc_motor.c: 177:     }
  3155   0016D4  0EF6               	movlw	246
  3156   0016D6  241C               	addwf	stop@i^0,w,c
  3157   0016D8  6E1C               	movwf	stop@i^0,c
  3158   0016DA  0EFF               	movlw	255
  3159   0016DC  201D               	addwfc	(stop@i+1)^0,w,c
  3160   0016DE  6E1D               	movwf	(stop@i+1)^0,c
  3161   0016E0  BE1D               	btfsc	(stop@i+1)^0,7,c
  3162   0016E2  EF77  F00B         	goto	u1170
  3163   0016E6  EF75  F00B         	goto	u1171
  3164   0016EA                     u1171:
  3165   0016EA  EF4E  F00B         	goto	l2042
  3166   0016EE                     u1170:
  3167   0016EE                     
  3168                           ;../dc_motor.c: 179:     mL->power = 0;
  3169   0016EE  C018  FFD9         	movff	stop@mL,fsr2l
  3170   0016F2  C019  FFDA         	movff	stop@mL+1,fsr2h
  3171   0016F6  0E00               	movlw	0
  3172   0016F8  6EDF               	movwf	indf2,c
  3173                           
  3174                           ;../dc_motor.c: 180:     mR->power = 0;
  3175   0016FA  C01A  FFD9         	movff	stop@mR,fsr2l
  3176   0016FE  C01B  FFDA         	movff	stop@mR+1,fsr2h
  3177   001702  0E00               	movlw	0
  3178   001704  6EDF               	movwf	indf2,c
  3179   001706                     
  3180                           ;../dc_motor.c: 181:     setMotorPWM(mL);
  3181   001706  C018  F012         	movff	stop@mL,setMotorPWM@m
  3182   00170A  C019  F013         	movff	stop@mL+1,setMotorPWM@m+1
  3183   00170E  ECF7  F006         	call	_setMotorPWM	;wreg free
  3184   001712                     
  3185                           ;../dc_motor.c: 182:     setMotorPWM(mR);
  3186   001712  C01A  F012         	movff	stop@mR,setMotorPWM@m
  3187   001716  C01B  F013         	movff	stop@mR+1,setMotorPWM@m+1
  3188   00171A  ECF7  F006         	call	_setMotorPWM	;wreg free
  3189   00171E                     
  3190                           ;../dc_motor.c: 183:     LATDbits.LATD4 = 0;
  3191   00171E  987C               	bcf	124,4,c	;volatile
  3192   001720  0012               	return		;funcret
  3193   001722                     __end_of_stop:
  3194                           	callstack 0
  3195                           
  3196 ;; *************** function _setMotorPWM *****************
  3197 ;; Defined at:
  3198 ;;		line 72 in file "../dc_motor.c"
  3199 ;; Parameters:    Size  Location     Type
  3200 ;;  m               2   17[COMRAM] PTR struct DC_motor
  3201 ;;		 -> motorR(9), motorL(9), 
  3202 ;; Auto vars:     Size  Location     Type
  3203 ;;  negDuty         1   22[COMRAM] unsigned char 
  3204 ;;  posDuty         1   21[COMRAM] unsigned char 
  3205 ;; Return value:  Size  Location     Type
  3206 ;;                  1    wreg      void 
  3207 ;; Registers used:
  3208 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3209 ;; Tracked objects:
  3210 ;;		On entry : 0/0
  3211 ;;		On exit  : 0/0
  3212 ;;		Unchanged: 0/0
  3213 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3214 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3215 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3216 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3217 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3218 ;;Total ram usage:        6 bytes
  3219 ;; Hardware stack levels used: 1
  3220 ;; Hardware stack levels required when called: 3
  3221 ;; This function calls:
  3222 ;;		___lwdiv
  3223 ;;		___wmul
  3224 ;; This function is called by:
  3225 ;;		_forward
  3226 ;;		_reverse
  3227 ;;		_stop
  3228 ;;		_left_45
  3229 ;;		_right_45
  3230 ;;		_space
  3231 ;; This function uses a non-reentrant model
  3232 ;;
  3233                           
  3234                           	psect	text15
  3235   000DEE                     __ptext15:
  3236                           	callstack 0
  3237   000DEE                     _setMotorPWM:
  3238                           	callstack 25
  3239   000DEE                     
  3240                           ;../dc_motor.c: 72: void setMotorPWM(DC_motor *m);../dc_motor.c: 73: {;../dc_motor.c: 74
      +                          :     unsigned char posDuty, negDuty;;../dc_motor.c: 76:     if(m->brakemode) {
  3241   000DEE  EE20 F002          	lfsr	2,2
  3242   000DF2  5012               	movf	setMotorPWM@m^0,w,c
  3243   000DF4  26D9               	addwf	fsr2l,f,c
  3244   000DF6  5013               	movf	(setMotorPWM@m+1)^0,w,c
  3245   000DF8  22DA               	addwfc	fsr2h,f,c
  3246   000DFA  50DF               	movf	indf2,w,c
  3247   000DFC  B4D8               	btfsc	status,2,c
  3248   000DFE  EF03  F007         	goto	u1131
  3249   000E02  EF05  F007         	goto	u1130
  3250   000E06                     u1131:
  3251   000E06  EF39  F007         	goto	l1992
  3252   000E0A                     u1130:
  3253   000E0A                     
  3254                           ;../dc_motor.c: 77:         posDuty = m->PWMperiod - ((unsigned int)(m->power)*(m->PWMpe
      +                          riod))/100;
  3255   000E0A  C012  FFD9         	movff	setMotorPWM@m,fsr2l
  3256   000E0E  C013  FFDA         	movff	setMotorPWM@m+1,fsr2h
  3257   000E12  50DF               	movf	indf2,w,c
  3258   000E14  6E14               	movwf	??_setMotorPWM^0,c
  3259   000E16  5014               	movf	??_setMotorPWM^0,w,c
  3260   000E18  6E05               	movwf	___wmul@multiplier^0,c
  3261   000E1A  6A06               	clrf	(___wmul@multiplier+1)^0,c
  3262   000E1C  EE20 F003          	lfsr	2,3
  3263   000E20  5012               	movf	setMotorPWM@m^0,w,c
  3264   000E22  26D9               	addwf	fsr2l,f,c
  3265   000E24  5013               	movf	(setMotorPWM@m+1)^0,w,c
  3266   000E26  22DA               	addwfc	fsr2h,f,c
  3267   000E28  CFDE F007          	movff	postinc2,___wmul@multiplicand
  3268   000E2C  CFDD F008          	movff	postdec2,___wmul@multiplicand+1
  3269   000E30  ECB7  F00D         	call	___wmul	;wreg free
  3270   000E34  C005  F00B         	movff	?___wmul,___lwdiv@dividend
  3271   000E38  C006  F00C         	movff	?___wmul+1,___lwdiv@dividend+1
  3272   000E3C  0E00               	movlw	0
  3273   000E3E  6E0E               	movwf	(___lwdiv@divisor+1)^0,c
  3274   000E40  0E64               	movlw	100
  3275   000E42  6E0D               	movwf	___lwdiv@divisor^0,c
  3276   000E44  ECD9  F00B         	call	___lwdiv	;wreg free
  3277   000E48  EE20 F003          	lfsr	2,3
  3278   000E4C  5012               	movf	setMotorPWM@m^0,w,c
  3279   000E4E  26D9               	addwf	fsr2l,f,c
  3280   000E50  5013               	movf	(setMotorPWM@m+1)^0,w,c
  3281   000E52  22DA               	addwfc	fsr2h,f,c
  3282   000E54  50DF               	movf	indf2,w,c
  3283   000E56  6E15               	movwf	(??_setMotorPWM+1)^0,c
  3284   000E58  500B               	movf	?___lwdiv^0,w,c
  3285   000E5A  5C15               	subwf	(??_setMotorPWM+1)^0,w,c
  3286   000E5C  6E16               	movwf	setMotorPWM@posDuty^0,c
  3287   000E5E                     
  3288                           ;../dc_motor.c: 78:         negDuty = m->PWMperiod;
  3289   000E5E  EE20 F003          	lfsr	2,3
  3290   000E62  5012               	movf	setMotorPWM@m^0,w,c
  3291   000E64  26D9               	addwf	fsr2l,f,c
  3292   000E66  5013               	movf	(setMotorPWM@m+1)^0,w,c
  3293   000E68  22DA               	addwfc	fsr2h,f,c
  3294   000E6A  50DF               	movf	indf2,w,c
  3295   000E6C  6E17               	movwf	setMotorPWM@negDuty^0,c
  3296                           
  3297                           ;../dc_motor.c: 79:     }
  3298   000E6E  EF5C  F007         	goto	l1996
  3299   000E72                     l1992:
  3300                           
  3301                           ;../dc_motor.c: 81:         posDuty=0;
  3302   000E72  0E00               	movlw	0
  3303   000E74  6E16               	movwf	setMotorPWM@posDuty^0,c
  3304   000E76                     
  3305                           ;../dc_motor.c: 82:   negDuty=((unsigned int)(m->power)*(m->PWMperiod))/100;
  3306   000E76  C012  FFD9         	movff	setMotorPWM@m,fsr2l
  3307   000E7A  C013  FFDA         	movff	setMotorPWM@m+1,fsr2h
  3308   000E7E  50DF               	movf	indf2,w,c
  3309   000E80  6E14               	movwf	??_setMotorPWM^0,c
  3310   000E82  5014               	movf	??_setMotorPWM^0,w,c
  3311   000E84  6E05               	movwf	___wmul@multiplier^0,c
  3312   000E86  6A06               	clrf	(___wmul@multiplier+1)^0,c
  3313   000E88  EE20 F003          	lfsr	2,3
  3314   000E8C  5012               	movf	setMotorPWM@m^0,w,c
  3315   000E8E  26D9               	addwf	fsr2l,f,c
  3316   000E90  5013               	movf	(setMotorPWM@m+1)^0,w,c
  3317   000E92  22DA               	addwfc	fsr2h,f,c
  3318   000E94  CFDE F007          	movff	postinc2,___wmul@multiplicand
  3319   000E98  CFDD F008          	movff	postdec2,___wmul@multiplicand+1
  3320   000E9C  ECB7  F00D         	call	___wmul	;wreg free
  3321   000EA0  C005  F00B         	movff	?___wmul,___lwdiv@dividend
  3322   000EA4  C006  F00C         	movff	?___wmul+1,___lwdiv@dividend+1
  3323   000EA8  0E00               	movlw	0
  3324   000EAA  6E0E               	movwf	(___lwdiv@divisor+1)^0,c
  3325   000EAC  0E64               	movlw	100
  3326   000EAE  6E0D               	movwf	___lwdiv@divisor^0,c
  3327   000EB0  ECD9  F00B         	call	___lwdiv	;wreg free
  3328   000EB4  500B               	movf	?___lwdiv^0,w,c
  3329   000EB6  6E17               	movwf	setMotorPWM@negDuty^0,c
  3330   000EB8                     l1996:
  3331                           
  3332                           ;../dc_motor.c: 85:     if (m->direction) {
  3333   000EB8  EE20 F001          	lfsr	2,1
  3334   000EBC  5012               	movf	setMotorPWM@m^0,w,c
  3335   000EBE  26D9               	addwf	fsr2l,f,c
  3336   000EC0  5013               	movf	(setMotorPWM@m+1)^0,w,c
  3337   000EC2  22DA               	addwfc	fsr2h,f,c
  3338   000EC4  50DF               	movf	indf2,w,c
  3339   000EC6  B4D8               	btfsc	status,2,c
  3340   000EC8  EF68  F007         	goto	u1141
  3341   000ECC  EF6A  F007         	goto	u1140
  3342   000ED0                     u1141:
  3343   000ED0  EF8C  F007         	goto	l2000
  3344   000ED4                     u1140:
  3345   000ED4                     
  3346                           ;../dc_motor.c: 86:         *(m->posDutyHighByte)= posDuty;
  3347   000ED4  EE20 F005          	lfsr	2,5
  3348   000ED8  5012               	movf	setMotorPWM@m^0,w,c
  3349   000EDA  26D9               	addwf	fsr2l,f,c
  3350   000EDC  5013               	movf	(setMotorPWM@m+1)^0,w,c
  3351   000EDE  22DA               	addwfc	fsr2h,f,c
  3352   000EE0  CFDE F014          	movff	postinc2,??_setMotorPWM
  3353   000EE4  CFDD F015          	movff	postdec2,??_setMotorPWM+1
  3354   000EE8  C014  FFD9         	movff	??_setMotorPWM,fsr2l
  3355   000EEC  C015  FFDA         	movff	??_setMotorPWM+1,fsr2h
  3356   000EF0  C016  FFDF         	movff	setMotorPWM@posDuty,indf2
  3357                           
  3358                           ;../dc_motor.c: 87:         *(m->negDutyHighByte)= negDuty;
  3359   000EF4  EE20 F007          	lfsr	2,7
  3360   000EF8  5012               	movf	setMotorPWM@m^0,w,c
  3361   000EFA  26D9               	addwf	fsr2l,f,c
  3362   000EFC  5013               	movf	(setMotorPWM@m+1)^0,w,c
  3363   000EFE  22DA               	addwfc	fsr2h,f,c
  3364   000F00  CFDE F014          	movff	postinc2,??_setMotorPWM
  3365   000F04  CFDD F015          	movff	postdec2,??_setMotorPWM+1
  3366   000F08  C014  FFD9         	movff	??_setMotorPWM,fsr2l
  3367   000F0C  C015  FFDA         	movff	??_setMotorPWM+1,fsr2h
  3368   000F10  C017  FFDF         	movff	setMotorPWM@negDuty,indf2
  3369                           
  3370                           ;../dc_motor.c: 88:     } else {
  3371   000F14  EFAC  F007         	goto	l191
  3372   000F18                     l2000:
  3373                           
  3374                           ;../dc_motor.c: 89:         *(m->posDutyHighByte)= negDuty;
  3375   000F18  EE20 F005          	lfsr	2,5
  3376   000F1C  5012               	movf	setMotorPWM@m^0,w,c
  3377   000F1E  26D9               	addwf	fsr2l,f,c
  3378   000F20  5013               	movf	(setMotorPWM@m+1)^0,w,c
  3379   000F22  22DA               	addwfc	fsr2h,f,c
  3380   000F24  CFDE F014          	movff	postinc2,??_setMotorPWM
  3381   000F28  CFDD F015          	movff	postdec2,??_setMotorPWM+1
  3382   000F2C  C014  FFD9         	movff	??_setMotorPWM,fsr2l
  3383   000F30  C015  FFDA         	movff	??_setMotorPWM+1,fsr2h
  3384   000F34  C017  FFDF         	movff	setMotorPWM@negDuty,indf2
  3385                           
  3386                           ;../dc_motor.c: 90:         *(m->negDutyHighByte)= posDuty;
  3387   000F38  EE20 F007          	lfsr	2,7
  3388   000F3C  5012               	movf	setMotorPWM@m^0,w,c
  3389   000F3E  26D9               	addwf	fsr2l,f,c
  3390   000F40  5013               	movf	(setMotorPWM@m+1)^0,w,c
  3391   000F42  22DA               	addwfc	fsr2h,f,c
  3392   000F44  CFDE F014          	movff	postinc2,??_setMotorPWM
  3393   000F48  CFDD F015          	movff	postdec2,??_setMotorPWM+1
  3394   000F4C  C014  FFD9         	movff	??_setMotorPWM,fsr2l
  3395   000F50  C015  FFDA         	movff	??_setMotorPWM+1,fsr2h
  3396   000F54  C016  FFDF         	movff	setMotorPWM@posDuty,indf2
  3397   000F58                     l191:
  3398   000F58  0012               	return		;funcret
  3399   000F5A                     __end_of_setMotorPWM:
  3400                           	callstack 0
  3401                           
  3402 ;; *************** function ___wmul *****************
  3403 ;; Defined at:
  3404 ;;		line 15 in file "D:\ECM\pic\sources\c99\common\Umul16.c"
  3405 ;; Parameters:    Size  Location     Type
  3406 ;;  multiplier      2    4[COMRAM] unsigned int 
  3407 ;;  multiplicand    2    6[COMRAM] unsigned int 
  3408 ;; Auto vars:     Size  Location     Type
  3409 ;;  product         2    8[COMRAM] unsigned int 
  3410 ;; Return value:  Size  Location     Type
  3411 ;;                  2    4[COMRAM] unsigned int 
  3412 ;; Registers used:
  3413 ;;		wreg, status,2, status,0, prodl, prodh
  3414 ;; Tracked objects:
  3415 ;;		On entry : 0/0
  3416 ;;		On exit  : 0/0
  3417 ;;		Unchanged: 0/0
  3418 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3419 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3420 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3421 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3422 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3423 ;;Total ram usage:        6 bytes
  3424 ;; Hardware stack levels used: 1
  3425 ;; Hardware stack levels required when called: 2
  3426 ;; This function calls:
  3427 ;;		Nothing
  3428 ;; This function is called by:
  3429 ;;		_setMotorPWM
  3430 ;; This function uses a non-reentrant model
  3431 ;;
  3432                           
  3433                           	psect	text16
  3434   001B6E                     __ptext16:
  3435                           	callstack 0
  3436   001B6E                     ___wmul:
  3437                           	callstack 25
  3438   001B6E  5005               	movf	___wmul@multiplier^0,w,c
  3439   001B70  0207               	mulwf	___wmul@multiplicand^0,c
  3440   001B72  CFF3 F009          	movff	prodl,___wmul@product
  3441   001B76  CFF4 F00A          	movff	prodh,___wmul@product+1
  3442   001B7A  5005               	movf	___wmul@multiplier^0,w,c
  3443   001B7C  0208               	mulwf	(___wmul@multiplicand+1)^0,c
  3444   001B7E  50F3               	movf	243,w,c
  3445   001B80  260A               	addwf	(___wmul@product+1)^0,f,c
  3446   001B82  5006               	movf	(___wmul@multiplier+1)^0,w,c
  3447   001B84  0207               	mulwf	___wmul@multiplicand^0,c
  3448   001B86  50F3               	movf	243,w,c
  3449   001B88  260A               	addwf	(___wmul@product+1)^0,f,c
  3450   001B8A  C009  F005         	movff	___wmul@product,?___wmul
  3451   001B8E  C00A  F006         	movff	___wmul@product+1,?___wmul+1
  3452   001B92  0012               	return		;funcret
  3453   001B94                     __end_of___wmul:
  3454                           	callstack 0
  3455                           
  3456 ;; *************** function ___lwdiv *****************
  3457 ;; Defined at:
  3458 ;;		line 7 in file "D:\ECM\pic\sources\c99\common\lwdiv.c"
  3459 ;; Parameters:    Size  Location     Type
  3460 ;;  dividend        2   10[COMRAM] unsigned int 
  3461 ;;  divisor         2   12[COMRAM] unsigned int 
  3462 ;; Auto vars:     Size  Location     Type
  3463 ;;  quotient        2   14[COMRAM] unsigned int 
  3464 ;;  counter         1   16[COMRAM] unsigned char 
  3465 ;; Return value:  Size  Location     Type
  3466 ;;                  2   10[COMRAM] unsigned int 
  3467 ;; Registers used:
  3468 ;;		wreg, status,2, status,0
  3469 ;; Tracked objects:
  3470 ;;		On entry : 0/0
  3471 ;;		On exit  : 0/0
  3472 ;;		Unchanged: 0/0
  3473 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3474 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3475 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3476 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3477 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3478 ;;Total ram usage:        7 bytes
  3479 ;; Hardware stack levels used: 1
  3480 ;; Hardware stack levels required when called: 2
  3481 ;; This function calls:
  3482 ;;		Nothing
  3483 ;; This function is called by:
  3484 ;;		_setMotorPWM
  3485 ;; This function uses a non-reentrant model
  3486 ;;
  3487                           
  3488                           	psect	text17
  3489   0017B2                     __ptext17:
  3490                           	callstack 0
  3491   0017B2                     ___lwdiv:
  3492                           	callstack 25
  3493   0017B2  0E00               	movlw	0
  3494   0017B4  6E10               	movwf	(___lwdiv@quotient+1)^0,c
  3495   0017B6  0E00               	movlw	0
  3496   0017B8  6E0F               	movwf	___lwdiv@quotient^0,c
  3497   0017BA  500D               	movf	___lwdiv@divisor^0,w,c
  3498   0017BC  100E               	iorwf	(___lwdiv@divisor+1)^0,w,c
  3499   0017BE  B4D8               	btfsc	status,2,c
  3500   0017C0  EFE4  F00B         	goto	u1081
  3501   0017C4  EFE6  F00B         	goto	u1080
  3502   0017C8                     u1081:
  3503   0017C8  EF0E  F00C         	goto	l958
  3504   0017CC                     u1080:
  3505   0017CC  0E01               	movlw	1
  3506   0017CE  6E11               	movwf	___lwdiv@counter^0,c
  3507   0017D0  EFEE  F00B         	goto	l1968
  3508   0017D4                     l1966:
  3509   0017D4  90D8               	bcf	status,0,c
  3510   0017D6  360D               	rlcf	___lwdiv@divisor^0,f,c
  3511   0017D8  360E               	rlcf	(___lwdiv@divisor+1)^0,f,c
  3512   0017DA  2A11               	incf	___lwdiv@counter^0,f,c
  3513   0017DC                     l1968:
  3514   0017DC  AE0E               	btfss	(___lwdiv@divisor+1)^0,7,c
  3515   0017DE  EFF3  F00B         	goto	u1091
  3516   0017E2  EFF5  F00B         	goto	u1090
  3517   0017E6                     u1091:
  3518   0017E6  EFEA  F00B         	goto	l1966
  3519   0017EA                     u1090:
  3520   0017EA                     l1970:
  3521   0017EA  90D8               	bcf	status,0,c
  3522   0017EC  360F               	rlcf	___lwdiv@quotient^0,f,c
  3523   0017EE  3610               	rlcf	(___lwdiv@quotient+1)^0,f,c
  3524   0017F0  500D               	movf	___lwdiv@divisor^0,w,c
  3525   0017F2  5C0B               	subwf	___lwdiv@dividend^0,w,c
  3526   0017F4  500E               	movf	(___lwdiv@divisor+1)^0,w,c
  3527   0017F6  580C               	subwfb	(___lwdiv@dividend+1)^0,w,c
  3528   0017F8  A0D8               	btfss	status,0,c
  3529   0017FA  EF01  F00C         	goto	u1101
  3530   0017FE  EF03  F00C         	goto	u1100
  3531   001802                     u1101:
  3532   001802  EF08  F00C         	goto	l1978
  3533   001806                     u1100:
  3534   001806  500D               	movf	___lwdiv@divisor^0,w,c
  3535   001808  5E0B               	subwf	___lwdiv@dividend^0,f,c
  3536   00180A  500E               	movf	(___lwdiv@divisor+1)^0,w,c
  3537   00180C  5A0C               	subwfb	(___lwdiv@dividend+1)^0,f,c
  3538   00180E  800F               	bsf	___lwdiv@quotient^0,0,c
  3539   001810                     l1978:
  3540   001810  90D8               	bcf	status,0,c
  3541   001812  320E               	rrcf	(___lwdiv@divisor+1)^0,f,c
  3542   001814  320D               	rrcf	___lwdiv@divisor^0,f,c
  3543   001816  2E11               	decfsz	___lwdiv@counter^0,f,c
  3544   001818  EFF5  F00B         	goto	l1970
  3545   00181C                     l958:
  3546   00181C  C00F  F00B         	movff	___lwdiv@quotient,?___lwdiv
  3547   001820  C010  F00C         	movff	___lwdiv@quotient+1,?___lwdiv+1
  3548   001824  0012               	return		;funcret
  3549   001826                     __end_of___lwdiv:
  3550                           	callstack 0
  3551                           
  3552 ;; *************** function _colourcards_normaliseRGBC *****************
  3553 ;; Defined at:
  3554 ;;		line 133 in file "../color.c"
  3555 ;; Parameters:    Size  Location     Type
  3556 ;;  c               2   43[COMRAM] PTR struct colors
  3557 ;;		 -> color(20), 
  3558 ;; Auto vars:     Size  Location     Type
  3559 ;;  C               2   51[COMRAM] unsigned int 
  3560 ;;  B               2   49[COMRAM] unsigned int 
  3561 ;;  G               2   47[COMRAM] unsigned int 
  3562 ;;  R               2   45[COMRAM] unsigned int 
  3563 ;; Return value:  Size  Location     Type
  3564 ;;                  1    wreg      void 
  3565 ;; Registers used:
  3566 ;;		wreg, status,2, status,0, cstack
  3567 ;; Tracked objects:
  3568 ;;		On entry : 0/0
  3569 ;;		On exit  : 0/0
  3570 ;;		Unchanged: 0/0
  3571 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3572 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3573 ;;      Locals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3574 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3575 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3576 ;;Total ram usage:       10 bytes
  3577 ;; Hardware stack levels used: 1
  3578 ;; Hardware stack levels required when called: 3
  3579 ;; This function calls:
  3580 ;;		___fldiv
  3581 ;;		___xxtofl
  3582 ;; This function is called by:
  3583 ;;		_buggy_color_response
  3584 ;; This function uses a non-reentrant model
  3585 ;;
  3586                           
  3587                           	psect	text18
  3588   0011C8                     __ptext18:
  3589                           	callstack 0
  3590   0011C8                     _colourcards_normaliseRGBC:
  3591                           	callstack 26
  3592   0011C8                     
  3593                           ;../color.c: 133: void colourcards_normaliseRGBC(colors *c);../color.c: 134: {;../color.
      +                          c: 135:     unsigned int R = color.R;
  3594   0011C8  C03C  F02E         	movff	_color,colourcards_normaliseRGBC@R
  3595   0011CC  C03D  F02F         	movff	_color+1,colourcards_normaliseRGBC@R+1
  3596                           
  3597                           ;../color.c: 136:     unsigned int G = color.G;
  3598   0011D0  C040  F030         	movff	_color+4,colourcards_normaliseRGBC@G
  3599   0011D4  C041  F031         	movff	_color+5,colourcards_normaliseRGBC@G+1
  3600                           
  3601                           ;../color.c: 137:     unsigned int B = color.B;
  3602   0011D8  C03E  F032         	movff	_color+2,colourcards_normaliseRGBC@B
  3603   0011DC  C03F  F033         	movff	_color+3,colourcards_normaliseRGBC@B+1
  3604                           
  3605                           ;../color.c: 138:     unsigned int C = color.C;
  3606   0011E0  C042  F034         	movff	_color+6,colourcards_normaliseRGBC@C
  3607   0011E4  C043  F035         	movff	_color+7,colourcards_normaliseRGBC@C+1
  3608   0011E8                     
  3609                           ;../color.c: 140:     color.R_norm = (float)R/(float)C;
  3610   0011E8  C02E  F005         	movff	colourcards_normaliseRGBC@R,___xxtofl@val
  3611   0011EC  C02F  F006         	movff	colourcards_normaliseRGBC@R+1,___xxtofl@val+1
  3612   0011F0  6A07               	clrf	(___xxtofl@val+2)^0,c
  3613   0011F2  6A08               	clrf	(___xxtofl@val+3)^0,c
  3614   0011F4  0E00               	movlw	0
  3615   0011F6  EC1D  F006         	call	___xxtofl
  3616   0011FA  C005  F013         	movff	?___xxtofl,___fldiv@b
  3617   0011FE  C006  F014         	movff	?___xxtofl+1,___fldiv@b+1
  3618   001202  C007  F015         	movff	?___xxtofl+2,___fldiv@b+2
  3619   001206  C008  F016         	movff	?___xxtofl+3,___fldiv@b+3
  3620   00120A  C034  F005         	movff	colourcards_normaliseRGBC@C,___xxtofl@val
  3621   00120E  C035  F006         	movff	colourcards_normaliseRGBC@C+1,___xxtofl@val+1
  3622   001212  6A07               	clrf	(___xxtofl@val+2)^0,c
  3623   001214  6A08               	clrf	(___xxtofl@val+3)^0,c
  3624   001216  0E00               	movlw	0
  3625   001218  EC1D  F006         	call	___xxtofl
  3626   00121C  C005  F017         	movff	?___xxtofl,___fldiv@a
  3627   001220  C006  F018         	movff	?___xxtofl+1,___fldiv@a+1
  3628   001224  C007  F019         	movff	?___xxtofl+2,___fldiv@a+2
  3629   001228  C008  F01A         	movff	?___xxtofl+3,___fldiv@a+3
  3630   00122C  ECDE  F002         	call	___fldiv	;wreg free
  3631   001230  C013  F044         	movff	?___fldiv,_color+8
  3632   001234  C014  F045         	movff	?___fldiv+1,_color+9
  3633   001238  C015  F046         	movff	?___fldiv+2,_color+10
  3634   00123C  C016  F047         	movff	?___fldiv+3,_color+11
  3635                           
  3636                           ;../color.c: 141:     color.G_norm = (float)G/(float)C;
  3637   001240  C030  F005         	movff	colourcards_normaliseRGBC@G,___xxtofl@val
  3638   001244  C031  F006         	movff	colourcards_normaliseRGBC@G+1,___xxtofl@val+1
  3639   001248  6A07               	clrf	(___xxtofl@val+2)^0,c
  3640   00124A  6A08               	clrf	(___xxtofl@val+3)^0,c
  3641   00124C  0E00               	movlw	0
  3642   00124E  EC1D  F006         	call	___xxtofl
  3643   001252  C005  F013         	movff	?___xxtofl,___fldiv@b
  3644   001256  C006  F014         	movff	?___xxtofl+1,___fldiv@b+1
  3645   00125A  C007  F015         	movff	?___xxtofl+2,___fldiv@b+2
  3646   00125E  C008  F016         	movff	?___xxtofl+3,___fldiv@b+3
  3647   001262  C034  F005         	movff	colourcards_normaliseRGBC@C,___xxtofl@val
  3648   001266  C035  F006         	movff	colourcards_normaliseRGBC@C+1,___xxtofl@val+1
  3649   00126A  6A07               	clrf	(___xxtofl@val+2)^0,c
  3650   00126C  6A08               	clrf	(___xxtofl@val+3)^0,c
  3651   00126E  0E00               	movlw	0
  3652   001270  EC1D  F006         	call	___xxtofl
  3653   001274  C005  F017         	movff	?___xxtofl,___fldiv@a
  3654   001278  C006  F018         	movff	?___xxtofl+1,___fldiv@a+1
  3655   00127C  C007  F019         	movff	?___xxtofl+2,___fldiv@a+2
  3656   001280  C008  F01A         	movff	?___xxtofl+3,___fldiv@a+3
  3657   001284  ECDE  F002         	call	___fldiv	;wreg free
  3658   001288  C013  F04C         	movff	?___fldiv,_color+16
  3659   00128C  C014  F04D         	movff	?___fldiv+1,_color+17
  3660   001290  C015  F04E         	movff	?___fldiv+2,_color+18
  3661   001294  C016  F04F         	movff	?___fldiv+3,_color+19
  3662                           
  3663                           ;../color.c: 142:     color.B_norm = (float)B/(float)C;
  3664   001298  C032  F005         	movff	colourcards_normaliseRGBC@B,___xxtofl@val
  3665   00129C  C033  F006         	movff	colourcards_normaliseRGBC@B+1,___xxtofl@val+1
  3666   0012A0  6A07               	clrf	(___xxtofl@val+2)^0,c
  3667   0012A2  6A08               	clrf	(___xxtofl@val+3)^0,c
  3668   0012A4  0E00               	movlw	0
  3669   0012A6  EC1D  F006         	call	___xxtofl
  3670   0012AA  C005  F013         	movff	?___xxtofl,___fldiv@b
  3671   0012AE  C006  F014         	movff	?___xxtofl+1,___fldiv@b+1
  3672   0012B2  C007  F015         	movff	?___xxtofl+2,___fldiv@b+2
  3673   0012B6  C008  F016         	movff	?___xxtofl+3,___fldiv@b+3
  3674   0012BA  C034  F005         	movff	colourcards_normaliseRGBC@C,___xxtofl@val
  3675   0012BE  C035  F006         	movff	colourcards_normaliseRGBC@C+1,___xxtofl@val+1
  3676   0012C2  6A07               	clrf	(___xxtofl@val+2)^0,c
  3677   0012C4  6A08               	clrf	(___xxtofl@val+3)^0,c
  3678   0012C6  0E00               	movlw	0
  3679   0012C8  EC1D  F006         	call	___xxtofl
  3680   0012CC  C005  F017         	movff	?___xxtofl,___fldiv@a
  3681   0012D0  C006  F018         	movff	?___xxtofl+1,___fldiv@a+1
  3682   0012D4  C007  F019         	movff	?___xxtofl+2,___fldiv@a+2
  3683   0012D8  C008  F01A         	movff	?___xxtofl+3,___fldiv@a+3
  3684   0012DC  ECDE  F002         	call	___fldiv	;wreg free
  3685   0012E0  C013  F048         	movff	?___fldiv,_color+12
  3686   0012E4  C014  F049         	movff	?___fldiv+1,_color+13
  3687   0012E8  C015  F04A         	movff	?___fldiv+2,_color+14
  3688   0012EC  C016  F04B         	movff	?___fldiv+3,_color+15
  3689   0012F0  0012               	return		;funcret
  3690   0012F2                     __end_of_colourcards_normaliseRGBC:
  3691                           	callstack 0
  3692                           
  3693 ;; *************** function ___xxtofl *****************
  3694 ;; Defined at:
  3695 ;;		line 10 in file "D:\ECM\pic\sources\c99\common\xxtofl.c"
  3696 ;; Parameters:    Size  Location     Type
  3697 ;;  sign            1    wreg     unsigned char 
  3698 ;;  val             4    4[COMRAM] long 
  3699 ;; Auto vars:     Size  Location     Type
  3700 ;;  sign            1   12[COMRAM] unsigned char 
  3701 ;;  arg             4   14[COMRAM] unsigned long 
  3702 ;;  exp             1   13[COMRAM] unsigned char 
  3703 ;; Return value:  Size  Location     Type
  3704 ;;                  4    4[COMRAM] unsigned char 
  3705 ;; Registers used:
  3706 ;;		wreg, status,2, status,0
  3707 ;; Tracked objects:
  3708 ;;		On entry : 0/0
  3709 ;;		On exit  : 0/0
  3710 ;;		Unchanged: 0/0
  3711 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3712 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3713 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3714 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3715 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3716 ;;Total ram usage:       14 bytes
  3717 ;; Hardware stack levels used: 1
  3718 ;; Hardware stack levels required when called: 2
  3719 ;; This function calls:
  3720 ;;		Nothing
  3721 ;; This function is called by:
  3722 ;;		_colourcards_normaliseRGBC
  3723 ;; This function uses a non-reentrant model
  3724 ;;
  3725                           
  3726                           	psect	text19
  3727   000C3A                     __ptext19:
  3728                           	callstack 0
  3729   000C3A                     ___xxtofl:
  3730                           	callstack 26
  3731                           
  3732                           ;incstack = 0
  3733                           ;___xxtofl@sign stored from wreg
  3734   000C3A  6E0D               	movwf	___xxtofl@sign^0,c
  3735   000C3C  500D               	movf	___xxtofl@sign^0,w,c
  3736   000C3E  B4D8               	btfsc	status,2,c
  3737   000C40  EF24  F006         	goto	u1551
  3738   000C44  EF26  F006         	goto	u1550
  3739   000C48                     u1551:
  3740   000C48  EF48  F006         	goto	l1122
  3741   000C4C                     u1550:
  3742   000C4C  BE08               	btfsc	(___xxtofl@val+3)^0,7,c
  3743   000C4E  EF2D  F006         	goto	u1560
  3744   000C52  EF2B  F006         	goto	u1561
  3745   000C56                     u1561:
  3746   000C56  EF48  F006         	goto	l1122
  3747   000C5A                     u1560:
  3748   000C5A  C005  F009         	movff	___xxtofl@val,??___xxtofl
  3749   000C5E  C006  F00A         	movff	___xxtofl@val+1,??___xxtofl+1
  3750   000C62  C007  F00B         	movff	___xxtofl@val+2,??___xxtofl+2
  3751   000C66  C008  F00C         	movff	___xxtofl@val+3,??___xxtofl+3
  3752   000C6A  1E09               	comf	??___xxtofl^0,f,c
  3753   000C6C  1E0A               	comf	(??___xxtofl+1)^0,f,c
  3754   000C6E  1E0B               	comf	(??___xxtofl+2)^0,f,c
  3755   000C70  1E0C               	comf	(??___xxtofl+3)^0,f,c
  3756   000C72  2A09               	incf	??___xxtofl^0,f,c
  3757   000C74  0E00               	movlw	0
  3758   000C76  220A               	addwfc	(??___xxtofl+1)^0,f,c
  3759   000C78  220B               	addwfc	(??___xxtofl+2)^0,f,c
  3760   000C7A  220C               	addwfc	(??___xxtofl+3)^0,f,c
  3761   000C7C  C009  F00F         	movff	??___xxtofl,___xxtofl@arg
  3762   000C80  C00A  F010         	movff	??___xxtofl+1,___xxtofl@arg+1
  3763   000C84  C00B  F011         	movff	??___xxtofl+2,___xxtofl@arg+2
  3764   000C88  C00C  F012         	movff	??___xxtofl+3,___xxtofl@arg+3
  3765   000C8C  EF50  F006         	goto	l2354
  3766   000C90                     l1122:
  3767   000C90  C005  F00F         	movff	___xxtofl@val,___xxtofl@arg
  3768   000C94  C006  F010         	movff	___xxtofl@val+1,___xxtofl@arg+1
  3769   000C98  C007  F011         	movff	___xxtofl@val+2,___xxtofl@arg+2
  3770   000C9C  C008  F012         	movff	___xxtofl@val+3,___xxtofl@arg+3
  3771   000CA0                     l2354:
  3772   000CA0  5005               	movf	___xxtofl@val^0,w,c
  3773   000CA2  1006               	iorwf	(___xxtofl@val+1)^0,w,c
  3774   000CA4  1007               	iorwf	(___xxtofl@val+2)^0,w,c
  3775   000CA6  1008               	iorwf	(___xxtofl@val+3)^0,w,c
  3776   000CA8  A4D8               	btfss	status,2,c
  3777   000CAA  EF59  F006         	goto	u1571
  3778   000CAE  EF5B  F006         	goto	u1570
  3779   000CB2                     u1571:
  3780   000CB2  EF65  F006         	goto	l2360
  3781   000CB6                     u1570:
  3782   000CB6  0E00               	movlw	0
  3783   000CB8  6E05               	movwf	?___xxtofl^0,c
  3784   000CBA  0E00               	movlw	0
  3785   000CBC  6E06               	movwf	(?___xxtofl+1)^0,c
  3786   000CBE  0E00               	movlw	0
  3787   000CC0  6E07               	movwf	(?___xxtofl+2)^0,c
  3788   000CC2  0E00               	movlw	0
  3789   000CC4  6E08               	movwf	(?___xxtofl+3)^0,c
  3790   000CC6  EFF6  F006         	goto	l1125
  3791   000CCA                     l2360:
  3792   000CCA  0E96               	movlw	150
  3793   000CCC  6E0E               	movwf	___xxtofl@exp^0,c
  3794   000CCE  EF6F  F006         	goto	l2364
  3795   000CD2                     l2362:
  3796   000CD2  2A0E               	incf	___xxtofl@exp^0,f,c
  3797   000CD4  90D8               	bcf	status,0,c
  3798   000CD6  3212               	rrcf	(___xxtofl@arg+3)^0,f,c
  3799   000CD8  3211               	rrcf	(___xxtofl@arg+2)^0,f,c
  3800   000CDA  3210               	rrcf	(___xxtofl@arg+1)^0,f,c
  3801   000CDC  320F               	rrcf	___xxtofl@arg^0,f,c
  3802   000CDE                     l2364:
  3803   000CDE  0E00               	movlw	0
  3804   000CE0  140F               	andwf	___xxtofl@arg^0,w,c
  3805   000CE2  6E09               	movwf	??___xxtofl^0,c
  3806   000CE4  0E00               	movlw	0
  3807   000CE6  1410               	andwf	(___xxtofl@arg+1)^0,w,c
  3808   000CE8  6E0A               	movwf	(??___xxtofl+1)^0,c
  3809   000CEA  0E00               	movlw	0
  3810   000CEC  1411               	andwf	(___xxtofl@arg+2)^0,w,c
  3811   000CEE  6E0B               	movwf	(??___xxtofl+2)^0,c
  3812   000CF0  0EFE               	movlw	254
  3813   000CF2  1412               	andwf	(___xxtofl@arg+3)^0,w,c
  3814   000CF4  6E0C               	movwf	(??___xxtofl+3)^0,c
  3815   000CF6  5009               	movf	??___xxtofl^0,w,c
  3816   000CF8  100A               	iorwf	(??___xxtofl+1)^0,w,c
  3817   000CFA  100B               	iorwf	(??___xxtofl+2)^0,w,c
  3818   000CFC  100C               	iorwf	(??___xxtofl+3)^0,w,c
  3819   000CFE  A4D8               	btfss	status,2,c
  3820   000D00  EF84  F006         	goto	u1581
  3821   000D04  EF86  F006         	goto	u1580
  3822   000D08                     u1581:
  3823   000D08  EF69  F006         	goto	l2362
  3824   000D0C                     u1580:
  3825   000D0C  EF94  F006         	goto	l1129
  3826   000D10                     l2366:
  3827   000D10  2A0E               	incf	___xxtofl@exp^0,f,c
  3828   000D12  0E01               	movlw	1
  3829   000D14  260F               	addwf	___xxtofl@arg^0,f,c
  3830   000D16  0E00               	movlw	0
  3831   000D18  2210               	addwfc	(___xxtofl@arg+1)^0,f,c
  3832   000D1A  2211               	addwfc	(___xxtofl@arg+2)^0,f,c
  3833   000D1C  2212               	addwfc	(___xxtofl@arg+3)^0,f,c
  3834   000D1E  90D8               	bcf	status,0,c
  3835   000D20  3212               	rrcf	(___xxtofl@arg+3)^0,f,c
  3836   000D22  3211               	rrcf	(___xxtofl@arg+2)^0,f,c
  3837   000D24  3210               	rrcf	(___xxtofl@arg+1)^0,f,c
  3838   000D26  320F               	rrcf	___xxtofl@arg^0,f,c
  3839   000D28                     l1129:
  3840   000D28  0E00               	movlw	0
  3841   000D2A  140F               	andwf	___xxtofl@arg^0,w,c
  3842   000D2C  6E09               	movwf	??___xxtofl^0,c
  3843   000D2E  0E00               	movlw	0
  3844   000D30  1410               	andwf	(___xxtofl@arg+1)^0,w,c
  3845   000D32  6E0A               	movwf	(??___xxtofl+1)^0,c
  3846   000D34  0E00               	movlw	0
  3847   000D36  1411               	andwf	(___xxtofl@arg+2)^0,w,c
  3848   000D38  6E0B               	movwf	(??___xxtofl+2)^0,c
  3849   000D3A  0EFF               	movlw	255
  3850   000D3C  1412               	andwf	(___xxtofl@arg+3)^0,w,c
  3851   000D3E  6E0C               	movwf	(??___xxtofl+3)^0,c
  3852   000D40  5009               	movf	??___xxtofl^0,w,c
  3853   000D42  100A               	iorwf	(??___xxtofl+1)^0,w,c
  3854   000D44  100B               	iorwf	(??___xxtofl+2)^0,w,c
  3855   000D46  100C               	iorwf	(??___xxtofl+3)^0,w,c
  3856   000D48  A4D8               	btfss	status,2,c
  3857   000D4A  EFA9  F006         	goto	u1591
  3858   000D4E  EFAB  F006         	goto	u1590
  3859   000D52                     u1591:
  3860   000D52  EF88  F006         	goto	l2366
  3861   000D56                     u1590:
  3862   000D56  EFB3  F006         	goto	l2374
  3863   000D5A                     l2372:
  3864   000D5A  060E               	decf	___xxtofl@exp^0,f,c
  3865   000D5C  90D8               	bcf	status,0,c
  3866   000D5E  360F               	rlcf	___xxtofl@arg^0,f,c
  3867   000D60  3610               	rlcf	(___xxtofl@arg+1)^0,f,c
  3868   000D62  3611               	rlcf	(___xxtofl@arg+2)^0,f,c
  3869   000D64  3612               	rlcf	(___xxtofl@arg+3)^0,f,c
  3870   000D66                     l2374:
  3871   000D66  BE11               	btfsc	(___xxtofl@arg+2)^0,7,c
  3872   000D68  EFB8  F006         	goto	u1601
  3873   000D6C  EFBA  F006         	goto	u1600
  3874   000D70                     u1601:
  3875   000D70  EFC2  F006         	goto	l1136
  3876   000D74                     u1600:
  3877   000D74  0E02               	movlw	2
  3878   000D76  600E               	cpfslt	___xxtofl@exp^0,c
  3879   000D78  EFC0  F006         	goto	u1611
  3880   000D7C  EFC2  F006         	goto	u1610
  3881   000D80                     u1611:
  3882   000D80  EFAD  F006         	goto	l2372
  3883   000D84                     u1610:
  3884   000D84                     l1136:
  3885   000D84  B00E               	btfsc	___xxtofl@exp^0,0,c
  3886   000D86  EFC7  F006         	goto	u1621
  3887   000D8A  EFC9  F006         	goto	u1620
  3888   000D8E                     u1621:
  3889   000D8E  EFCA  F006         	goto	l2380
  3890   000D92                     u1620:
  3891   000D92  9E11               	bcf	(___xxtofl@arg+2)^0,7,c
  3892   000D94                     l2380:
  3893   000D94  90D8               	bcf	status,0,c
  3894   000D96  320E               	rrcf	___xxtofl@exp^0,f,c
  3895   000D98  C00E  F009         	movff	___xxtofl@exp,??___xxtofl
  3896   000D9C  6A0A               	clrf	(??___xxtofl+1)^0,c
  3897   000D9E  6A0B               	clrf	(??___xxtofl+2)^0,c
  3898   000DA0  6A0C               	clrf	(??___xxtofl+3)^0,c
  3899   000DA2  C009  F00C         	movff	??___xxtofl,??___xxtofl+3
  3900   000DA6  6A0B               	clrf	(??___xxtofl+2)^0,c
  3901   000DA8  6A0A               	clrf	(??___xxtofl+1)^0,c
  3902   000DAA  6A09               	clrf	??___xxtofl^0,c
  3903   000DAC  5009               	movf	??___xxtofl^0,w,c
  3904   000DAE  120F               	iorwf	___xxtofl@arg^0,f,c
  3905   000DB0  500A               	movf	(??___xxtofl+1)^0,w,c
  3906   000DB2  1210               	iorwf	(___xxtofl@arg+1)^0,f,c
  3907   000DB4  500B               	movf	(??___xxtofl+2)^0,w,c
  3908   000DB6  1211               	iorwf	(___xxtofl@arg+2)^0,f,c
  3909   000DB8  500C               	movf	(??___xxtofl+3)^0,w,c
  3910   000DBA  1212               	iorwf	(___xxtofl@arg+3)^0,f,c
  3911   000DBC  500D               	movf	___xxtofl@sign^0,w,c
  3912   000DBE  B4D8               	btfsc	status,2,c
  3913   000DC0  EFE4  F006         	goto	u1631
  3914   000DC4  EFE6  F006         	goto	u1630
  3915   000DC8                     u1631:
  3916   000DC8  EFEE  F006         	goto	l2390
  3917   000DCC                     u1630:
  3918   000DCC  BE08               	btfsc	(___xxtofl@val+3)^0,7,c
  3919   000DCE  EFED  F006         	goto	u1640
  3920   000DD2  EFEB  F006         	goto	u1641
  3921   000DD6                     u1641:
  3922   000DD6  EFEE  F006         	goto	l2390
  3923   000DDA                     u1640:
  3924   000DDA  8E12               	bsf	(___xxtofl@arg+3)^0,7,c
  3925   000DDC                     l2390:
  3926   000DDC  C00F  F005         	movff	___xxtofl@arg,?___xxtofl
  3927   000DE0  C010  F006         	movff	___xxtofl@arg+1,?___xxtofl+1
  3928   000DE4  C011  F007         	movff	___xxtofl@arg+2,?___xxtofl+2
  3929   000DE8  C012  F008         	movff	___xxtofl@arg+3,?___xxtofl+3
  3930   000DEC                     l1125:
  3931   000DEC  0012               	return		;funcret
  3932   000DEE                     __end_of___xxtofl:
  3933                           	callstack 0
  3934                           
  3935 ;; *************** function ___fldiv *****************
  3936 ;; Defined at:
  3937 ;;		line 11 in file "D:\ECM\pic\sources\c99\common\sprcdiv.c"
  3938 ;; Parameters:    Size  Location     Type
  3939 ;;  b               4   18[COMRAM] unsigned char 
  3940 ;;  a               4   22[COMRAM] unsigned char 
  3941 ;; Auto vars:     Size  Location     Type
  3942 ;;  grs             4   37[COMRAM] unsigned long 
  3943 ;;  rem             4   30[COMRAM] unsigned long 
  3944 ;;  new_exp         2   35[COMRAM] short 
  3945 ;;  aexp            1   42[COMRAM] unsigned char 
  3946 ;;  bexp            1   41[COMRAM] unsigned char 
  3947 ;;  sign            1   34[COMRAM] unsigned char 
  3948 ;; Return value:  Size  Location     Type
  3949 ;;                  4   18[COMRAM] unsigned char 
  3950 ;; Registers used:
  3951 ;;		wreg, status,2, status,0
  3952 ;; Tracked objects:
  3953 ;;		On entry : 0/0
  3954 ;;		On exit  : 0/0
  3955 ;;		Unchanged: 0/0
  3956 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3957 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3958 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3959 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3960 ;;      Totals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3961 ;;Total ram usage:       25 bytes
  3962 ;; Hardware stack levels used: 1
  3963 ;; Hardware stack levels required when called: 2
  3964 ;; This function calls:
  3965 ;;		Nothing
  3966 ;; This function is called by:
  3967 ;;		_colourcards_normaliseRGBC
  3968 ;; This function uses a non-reentrant model
  3969 ;;
  3970                           
  3971                           	psect	text20
  3972   0005BC                     __ptext20:
  3973                           	callstack 0
  3974   0005BC                     ___fldiv:
  3975                           	callstack 26
  3976   0005BC  5016               	movf	(___fldiv@b+3)^0,w,c
  3977   0005BE  0B80               	andlw	128
  3978   0005C0  6E23               	movwf	___fldiv@sign^0,c
  3979   0005C2  5016               	movf	(___fldiv@b+3)^0,w,c
  3980   0005C4  2416               	addwf	(___fldiv@b+3)^0,w,c
  3981   0005C6  6E2A               	movwf	___fldiv@bexp^0,c
  3982   0005C8  AE15               	btfss	(___fldiv@b+2)^0,7,c
  3983   0005CA  EFE9  F002         	goto	u1321
  3984   0005CE  EFEB  F002         	goto	u1320
  3985   0005D2                     u1321:
  3986   0005D2  EFEC  F002         	goto	l2216
  3987   0005D6                     u1320:
  3988   0005D6  802A               	bsf	___fldiv@bexp^0,0,c
  3989   0005D8                     l2216:
  3990   0005D8  502A               	movf	___fldiv@bexp^0,w,c
  3991   0005DA  B4D8               	btfsc	status,2,c
  3992   0005DC  EFF2  F002         	goto	u1331
  3993   0005E0  EFF4  F002         	goto	u1330
  3994   0005E4                     u1331:
  3995   0005E4  EF09  F003         	goto	l2226
  3996   0005E8                     u1330:
  3997   0005E8  282A               	incf	___fldiv@bexp^0,w,c
  3998   0005EA  A4D8               	btfss	status,2,c
  3999   0005EC  EFFA  F002         	goto	u1341
  4000   0005F0  EFFC  F002         	goto	u1340
  4001   0005F4                     u1341:
  4002   0005F4  EF04  F003         	goto	l2222
  4003   0005F8                     u1340:
  4004   0005F8  0E00               	movlw	0
  4005   0005FA  6E13               	movwf	___fldiv@b^0,c
  4006   0005FC  0E00               	movlw	0
  4007   0005FE  6E14               	movwf	(___fldiv@b+1)^0,c
  4008   000600  0E00               	movlw	0
  4009   000602  6E15               	movwf	(___fldiv@b+2)^0,c
  4010   000604  0E00               	movlw	0
  4011   000606  6E16               	movwf	(___fldiv@b+3)^0,c
  4012   000608                     l2222:
  4013   000608  8E15               	bsf	(___fldiv@b+2)^0,7,c
  4014   00060A  0E00               	movlw	0
  4015   00060C  6E16               	movwf	(___fldiv@b+3)^0,c
  4016   00060E  EF11  F003         	goto	l2228
  4017   000612                     l2226:
  4018   000612  0E00               	movlw	0
  4019   000614  6E13               	movwf	___fldiv@b^0,c
  4020   000616  0E00               	movlw	0
  4021   000618  6E14               	movwf	(___fldiv@b+1)^0,c
  4022   00061A  0E00               	movlw	0
  4023   00061C  6E15               	movwf	(___fldiv@b+2)^0,c
  4024   00061E  0E00               	movlw	0
  4025   000620  6E16               	movwf	(___fldiv@b+3)^0,c
  4026   000622                     l2228:
  4027   000622  501A               	movf	(___fldiv@a+3)^0,w,c
  4028   000624  0B80               	andlw	128
  4029   000626  1A23               	xorwf	___fldiv@sign^0,f,c
  4030   000628  501A               	movf	(___fldiv@a+3)^0,w,c
  4031   00062A  241A               	addwf	(___fldiv@a+3)^0,w,c
  4032   00062C  6E2B               	movwf	___fldiv@aexp^0,c
  4033   00062E  AE19               	btfss	(___fldiv@a+2)^0,7,c
  4034   000630  EF1C  F003         	goto	u1351
  4035   000634  EF1E  F003         	goto	u1350
  4036   000638                     u1351:
  4037   000638  EF1F  F003         	goto	l2236
  4038   00063C                     u1350:
  4039   00063C  802B               	bsf	___fldiv@aexp^0,0,c
  4040   00063E                     l2236:
  4041   00063E  502B               	movf	___fldiv@aexp^0,w,c
  4042   000640  B4D8               	btfsc	status,2,c
  4043   000642  EF25  F003         	goto	u1361
  4044   000646  EF27  F003         	goto	u1360
  4045   00064A                     u1361:
  4046   00064A  EF3C  F003         	goto	l2246
  4047   00064E                     u1360:
  4048   00064E  282B               	incf	___fldiv@aexp^0,w,c
  4049   000650  A4D8               	btfss	status,2,c
  4050   000652  EF2D  F003         	goto	u1371
  4051   000656  EF2F  F003         	goto	u1370
  4052   00065A                     u1371:
  4053   00065A  EF37  F003         	goto	l2242
  4054   00065E                     u1370:
  4055   00065E  0E00               	movlw	0
  4056   000660  6E17               	movwf	___fldiv@a^0,c
  4057   000662  0E00               	movlw	0
  4058   000664  6E18               	movwf	(___fldiv@a+1)^0,c
  4059   000666  0E00               	movlw	0
  4060   000668  6E19               	movwf	(___fldiv@a+2)^0,c
  4061   00066A  0E00               	movlw	0
  4062   00066C  6E1A               	movwf	(___fldiv@a+3)^0,c
  4063   00066E                     l2242:
  4064   00066E  8E19               	bsf	(___fldiv@a+2)^0,7,c
  4065   000670  0E00               	movlw	0
  4066   000672  6E1A               	movwf	(___fldiv@a+3)^0,c
  4067   000674  EF44  F003         	goto	l2248
  4068   000678                     l2246:
  4069   000678  0E00               	movlw	0
  4070   00067A  6E17               	movwf	___fldiv@a^0,c
  4071   00067C  0E00               	movlw	0
  4072   00067E  6E18               	movwf	(___fldiv@a+1)^0,c
  4073   000680  0E00               	movlw	0
  4074   000682  6E19               	movwf	(___fldiv@a+2)^0,c
  4075   000684  0E00               	movlw	0
  4076   000686  6E1A               	movwf	(___fldiv@a+3)^0,c
  4077   000688                     l2248:
  4078   000688  5017               	movf	___fldiv@a^0,w,c
  4079   00068A  1018               	iorwf	(___fldiv@a+1)^0,w,c
  4080   00068C  1019               	iorwf	(___fldiv@a+2)^0,w,c
  4081   00068E  101A               	iorwf	(___fldiv@a+3)^0,w,c
  4082   000690  A4D8               	btfss	status,2,c
  4083   000692  EF4D  F003         	goto	u1381
  4084   000696  EF4F  F003         	goto	u1380
  4085   00069A                     u1381:
  4086   00069A  EF67  F003         	goto	l2260
  4087   00069E                     u1380:
  4088   00069E  0E00               	movlw	0
  4089   0006A0  6E13               	movwf	___fldiv@b^0,c
  4090   0006A2  0E00               	movlw	0
  4091   0006A4  6E14               	movwf	(___fldiv@b+1)^0,c
  4092   0006A6  0E00               	movlw	0
  4093   0006A8  6E15               	movwf	(___fldiv@b+2)^0,c
  4094   0006AA  0E00               	movlw	0
  4095   0006AC  6E16               	movwf	(___fldiv@b+3)^0,c
  4096   0006AE  0E80               	movlw	128
  4097   0006B0  1215               	iorwf	(___fldiv@b+2)^0,f,c
  4098   0006B2  0E7F               	movlw	127
  4099   0006B4  1216               	iorwf	(___fldiv@b+3)^0,f,c
  4100   0006B6                     l2254:
  4101   0006B6  5023               	movf	___fldiv@sign^0,w,c
  4102   0006B8  1216               	iorwf	(___fldiv@b+3)^0,f,c
  4103   0006BA  C013  F013         	movff	___fldiv@b,?___fldiv
  4104   0006BE  C014  F014         	movff	___fldiv@b+1,?___fldiv+1
  4105   0006C2  C015  F015         	movff	___fldiv@b+2,?___fldiv+2
  4106   0006C6  C016  F016         	movff	___fldiv@b+3,?___fldiv+3
  4107   0006CA  EFAA  F004         	goto	l1049
  4108   0006CE                     l2260:
  4109   0006CE  502A               	movf	___fldiv@bexp^0,w,c
  4110   0006D0  A4D8               	btfss	status,2,c
  4111   0006D2  EF6D  F003         	goto	u1391
  4112   0006D6  EF6F  F003         	goto	u1390
  4113   0006DA                     u1391:
  4114   0006DA  EF79  F003         	goto	l2268
  4115   0006DE                     u1390:
  4116   0006DE  0E00               	movlw	0
  4117   0006E0  6E13               	movwf	?___fldiv^0,c
  4118   0006E2  0E00               	movlw	0
  4119   0006E4  6E14               	movwf	(?___fldiv+1)^0,c
  4120   0006E6  0E00               	movlw	0
  4121   0006E8  6E15               	movwf	(?___fldiv+2)^0,c
  4122   0006EA  0E00               	movlw	0
  4123   0006EC  6E16               	movwf	(?___fldiv+3)^0,c
  4124   0006EE  EFAA  F004         	goto	l1049
  4125   0006F2                     l2268:
  4126   0006F2  502B               	movf	___fldiv@aexp^0,w,c
  4127   0006F4  C02A  F01B         	movff	___fldiv@bexp,??___fldiv
  4128   0006F8  6A1C               	clrf	(??___fldiv+1)^0,c
  4129   0006FA  5E1B               	subwf	??___fldiv^0,f,c
  4130   0006FC  0E00               	movlw	0
  4131   0006FE  5A1C               	subwfb	(??___fldiv+1)^0,f,c
  4132   000700  0E7F               	movlw	127
  4133   000702  241B               	addwf	??___fldiv^0,w,c
  4134   000704  6E24               	movwf	___fldiv@new_exp^0,c
  4135   000706  0E00               	movlw	0
  4136   000708  201C               	addwfc	(??___fldiv+1)^0,w,c
  4137   00070A  6E25               	movwf	(___fldiv@new_exp+1)^0,c
  4138   00070C  C013  F01F         	movff	___fldiv@b,___fldiv@rem
  4139   000710  C014  F020         	movff	___fldiv@b+1,___fldiv@rem+1
  4140   000714  C015  F021         	movff	___fldiv@b+2,___fldiv@rem+2
  4141   000718  C016  F022         	movff	___fldiv@b+3,___fldiv@rem+3
  4142   00071C  0E00               	movlw	0
  4143   00071E  6E13               	movwf	___fldiv@b^0,c
  4144   000720  0E00               	movlw	0
  4145   000722  6E14               	movwf	(___fldiv@b+1)^0,c
  4146   000724  0E00               	movlw	0
  4147   000726  6E15               	movwf	(___fldiv@b+2)^0,c
  4148   000728  0E00               	movlw	0
  4149   00072A  6E16               	movwf	(___fldiv@b+3)^0,c
  4150   00072C  0E00               	movlw	0
  4151   00072E  6E26               	movwf	___fldiv@grs^0,c
  4152   000730  0E00               	movlw	0
  4153   000732  6E27               	movwf	(___fldiv@grs+1)^0,c
  4154   000734  0E00               	movlw	0
  4155   000736  6E28               	movwf	(___fldiv@grs+2)^0,c
  4156   000738  0E00               	movlw	0
  4157   00073A  6E29               	movwf	(___fldiv@grs+3)^0,c
  4158   00073C  0E00               	movlw	0
  4159   00073E  6E2B               	movwf	___fldiv@aexp^0,c
  4160   000740  EFDA  F003         	goto	l1051
  4161   000744                     l2278:
  4162   000744  502B               	movf	___fldiv@aexp^0,w,c
  4163   000746  B4D8               	btfsc	status,2,c
  4164   000748  EFA8  F003         	goto	u1401
  4165   00074C  EFAA  F003         	goto	u1400
  4166   000750                     u1401:
  4167   000750  EFC1  F003         	goto	l2286
  4168   000754                     u1400:
  4169   000754  90D8               	bcf	status,0,c
  4170   000756  361F               	rlcf	___fldiv@rem^0,f,c
  4171   000758  3620               	rlcf	(___fldiv@rem+1)^0,f,c
  4172   00075A  3621               	rlcf	(___fldiv@rem+2)^0,f,c
  4173   00075C  3622               	rlcf	(___fldiv@rem+3)^0,f,c
  4174   00075E  90D8               	bcf	status,0,c
  4175   000760  3613               	rlcf	___fldiv@b^0,f,c
  4176   000762  3614               	rlcf	(___fldiv@b+1)^0,f,c
  4177   000764  3615               	rlcf	(___fldiv@b+2)^0,f,c
  4178   000766  3616               	rlcf	(___fldiv@b+3)^0,f,c
  4179   000768  AE29               	btfss	(___fldiv@grs+3)^0,7,c
  4180   00076A  EFB9  F003         	goto	u1411
  4181   00076E  EFBB  F003         	goto	u1410
  4182   000772                     u1411:
  4183   000772  EFBC  F003         	goto	l1054
  4184   000776                     u1410:
  4185   000776  8013               	bsf	___fldiv@b^0,0,c
  4186   000778                     l1054:
  4187   000778  90D8               	bcf	status,0,c
  4188   00077A  3626               	rlcf	___fldiv@grs^0,f,c
  4189   00077C  3627               	rlcf	(___fldiv@grs+1)^0,f,c
  4190   00077E  3628               	rlcf	(___fldiv@grs+2)^0,f,c
  4191   000780  3629               	rlcf	(___fldiv@grs+3)^0,f,c
  4192   000782                     l2286:
  4193   000782  5017               	movf	___fldiv@a^0,w,c
  4194   000784  5C1F               	subwf	___fldiv@rem^0,w,c
  4195   000786  5018               	movf	(___fldiv@a+1)^0,w,c
  4196   000788  5820               	subwfb	(___fldiv@rem+1)^0,w,c
  4197   00078A  5019               	movf	(___fldiv@a+2)^0,w,c
  4198   00078C  5821               	subwfb	(___fldiv@rem+2)^0,w,c
  4199   00078E  501A               	movf	(___fldiv@a+3)^0,w,c
  4200   000790  5822               	subwfb	(___fldiv@rem+3)^0,w,c
  4201   000792  A0D8               	btfss	status,0,c
  4202   000794  EFCE  F003         	goto	u1421
  4203   000798  EFD0  F003         	goto	u1420
  4204   00079C                     u1421:
  4205   00079C  EFD9  F003         	goto	l2292
  4206   0007A0                     u1420:
  4207   0007A0  8C29               	bsf	(___fldiv@grs+3)^0,6,c
  4208   0007A2  5017               	movf	___fldiv@a^0,w,c
  4209   0007A4  5E1F               	subwf	___fldiv@rem^0,f,c
  4210   0007A6  5018               	movf	(___fldiv@a+1)^0,w,c
  4211   0007A8  5A20               	subwfb	(___fldiv@rem+1)^0,f,c
  4212   0007AA  5019               	movf	(___fldiv@a+2)^0,w,c
  4213   0007AC  5A21               	subwfb	(___fldiv@rem+2)^0,f,c
  4214   0007AE  501A               	movf	(___fldiv@a+3)^0,w,c
  4215   0007B0  5A22               	subwfb	(___fldiv@rem+3)^0,f,c
  4216   0007B2                     l2292:
  4217   0007B2  2A2B               	incf	___fldiv@aexp^0,f,c
  4218   0007B4                     l1051:
  4219   0007B4  0E19               	movlw	25
  4220   0007B6  642B               	cpfsgt	___fldiv@aexp^0,c
  4221   0007B8  EFE0  F003         	goto	u1431
  4222   0007BC  EFE2  F003         	goto	u1430
  4223   0007C0                     u1431:
  4224   0007C0  EFA2  F003         	goto	l2278
  4225   0007C4                     u1430:
  4226   0007C4  501F               	movf	___fldiv@rem^0,w,c
  4227   0007C6  1020               	iorwf	(___fldiv@rem+1)^0,w,c
  4228   0007C8  1021               	iorwf	(___fldiv@rem+2)^0,w,c
  4229   0007CA  1022               	iorwf	(___fldiv@rem+3)^0,w,c
  4230   0007CC  B4D8               	btfsc	status,2,c
  4231   0007CE  EFEB  F003         	goto	u1441
  4232   0007D2  EFED  F003         	goto	u1440
  4233   0007D6                     u1441:
  4234   0007D6  EF05  F004         	goto	l2304
  4235   0007DA                     u1440:
  4236   0007DA  8026               	bsf	___fldiv@grs^0,0,c
  4237   0007DC  EF05  F004         	goto	l2304
  4238   0007E0                     l2298:
  4239   0007E0  90D8               	bcf	status,0,c
  4240   0007E2  3613               	rlcf	___fldiv@b^0,f,c
  4241   0007E4  3614               	rlcf	(___fldiv@b+1)^0,f,c
  4242   0007E6  3615               	rlcf	(___fldiv@b+2)^0,f,c
  4243   0007E8  3616               	rlcf	(___fldiv@b+3)^0,f,c
  4244   0007EA  AE29               	btfss	(___fldiv@grs+3)^0,7,c
  4245   0007EC  EFFA  F003         	goto	u1451
  4246   0007F0  EFFC  F003         	goto	u1450
  4247   0007F4                     u1451:
  4248   0007F4  EFFD  F003         	goto	l1060
  4249   0007F8                     u1450:
  4250   0007F8  8013               	bsf	___fldiv@b^0,0,c
  4251   0007FA                     l1060:
  4252   0007FA  90D8               	bcf	status,0,c
  4253   0007FC  3626               	rlcf	___fldiv@grs^0,f,c
  4254   0007FE  3627               	rlcf	(___fldiv@grs+1)^0,f,c
  4255   000800  3628               	rlcf	(___fldiv@grs+2)^0,f,c
  4256   000802  3629               	rlcf	(___fldiv@grs+3)^0,f,c
  4257   000804  0624               	decf	___fldiv@new_exp^0,f,c
  4258   000806  A0D8               	btfss	status,0,c
  4259   000808  0625               	decf	(___fldiv@new_exp+1)^0,f,c
  4260   00080A                     l2304:
  4261   00080A  AE15               	btfss	(___fldiv@b+2)^0,7,c
  4262   00080C  EF0A  F004         	goto	u1461
  4263   000810  EF0C  F004         	goto	u1460
  4264   000814                     u1461:
  4265   000814  EFF0  F003         	goto	l2298
  4266   000818                     u1460:
  4267   000818  0E00               	movlw	0
  4268   00081A  6E2B               	movwf	___fldiv@aexp^0,c
  4269   00081C  AE29               	btfss	(___fldiv@grs+3)^0,7,c
  4270   00081E  EF13  F004         	goto	u1471
  4271   000822  EF15  F004         	goto	u1470
  4272   000826                     u1471:
  4273   000826  EF39  F004         	goto	l1062
  4274   00082A                     u1470:
  4275   00082A  0EFF               	movlw	255
  4276   00082C  1426               	andwf	___fldiv@grs^0,w,c
  4277   00082E  6E1B               	movwf	??___fldiv^0,c
  4278   000830  0EFF               	movlw	255
  4279   000832  1427               	andwf	(___fldiv@grs+1)^0,w,c
  4280   000834  6E1C               	movwf	(??___fldiv+1)^0,c
  4281   000836  0EFF               	movlw	255
  4282   000838  1428               	andwf	(___fldiv@grs+2)^0,w,c
  4283   00083A  6E1D               	movwf	(??___fldiv+2)^0,c
  4284   00083C  0E7F               	movlw	127
  4285   00083E  1429               	andwf	(___fldiv@grs+3)^0,w,c
  4286   000840  6E1E               	movwf	(??___fldiv+3)^0,c
  4287   000842  501B               	movf	??___fldiv^0,w,c
  4288   000844  101C               	iorwf	(??___fldiv+1)^0,w,c
  4289   000846  101D               	iorwf	(??___fldiv+2)^0,w,c
  4290   000848  101E               	iorwf	(??___fldiv+3)^0,w,c
  4291   00084A  B4D8               	btfsc	status,2,c
  4292   00084C  EF2A  F004         	goto	u1481
  4293   000850  EF2C  F004         	goto	u1480
  4294   000854                     u1481:
  4295   000854  EF30  F004         	goto	l1063
  4296   000858                     u1480:
  4297   000858                     l2312:
  4298   000858  0E01               	movlw	1
  4299   00085A  6E2B               	movwf	___fldiv@aexp^0,c
  4300   00085C  EF39  F004         	goto	l1062
  4301   000860                     l1063:
  4302   000860  A013               	btfss	___fldiv@b^0,0,c
  4303   000862  EF35  F004         	goto	u1491
  4304   000866  EF37  F004         	goto	u1490
  4305   00086A                     u1491:
  4306   00086A  EF39  F004         	goto	l1062
  4307   00086E                     u1490:
  4308   00086E  EF2C  F004         	goto	l2312
  4309   000872                     l1062:
  4310   000872  502B               	movf	___fldiv@aexp^0,w,c
  4311   000874  B4D8               	btfsc	status,2,c
  4312   000876  EF3F  F004         	goto	u1501
  4313   00087A  EF41  F004         	goto	u1500
  4314   00087E                     u1501:
  4315   00087E  EF65  F004         	goto	l2324
  4316   000882                     u1500:
  4317   000882  0E01               	movlw	1
  4318   000884  2613               	addwf	___fldiv@b^0,f,c
  4319   000886  0E00               	movlw	0
  4320   000888  2214               	addwfc	(___fldiv@b+1)^0,f,c
  4321   00088A  2215               	addwfc	(___fldiv@b+2)^0,f,c
  4322   00088C  2216               	addwfc	(___fldiv@b+3)^0,f,c
  4323   00088E  A016               	btfss	(___fldiv@b+3)^0,0,c
  4324   000890  EF4C  F004         	goto	u1511
  4325   000894  EF4E  F004         	goto	u1510
  4326   000898                     u1511:
  4327   000898  EF65  F004         	goto	l2324
  4328   00089C                     u1510:
  4329   00089C  C013  F01B         	movff	___fldiv@b,??___fldiv
  4330   0008A0  C014  F01C         	movff	___fldiv@b+1,??___fldiv+1
  4331   0008A4  C015  F01D         	movff	___fldiv@b+2,??___fldiv+2
  4332   0008A8  C016  F01E         	movff	___fldiv@b+3,??___fldiv+3
  4333   0008AC  341E               	rlcf	(??___fldiv+3)^0,w,c
  4334   0008AE  321E               	rrcf	(??___fldiv+3)^0,f,c
  4335   0008B0  321D               	rrcf	(??___fldiv+2)^0,f,c
  4336   0008B2  321C               	rrcf	(??___fldiv+1)^0,f,c
  4337   0008B4  321B               	rrcf	??___fldiv^0,f,c
  4338   0008B6  C01B  F013         	movff	??___fldiv,___fldiv@b
  4339   0008BA  C01C  F014         	movff	??___fldiv+1,___fldiv@b+1
  4340   0008BE  C01D  F015         	movff	??___fldiv+2,___fldiv@b+2
  4341   0008C2  C01E  F016         	movff	??___fldiv+3,___fldiv@b+3
  4342   0008C6  4A24               	infsnz	___fldiv@new_exp^0,f,c
  4343   0008C8  2A25               	incf	(___fldiv@new_exp+1)^0,f,c
  4344   0008CA                     l2324:
  4345   0008CA  BE25               	btfsc	(___fldiv@new_exp+1)^0,7,c
  4346   0008CC  EF70  F004         	goto	u1521
  4347   0008D0  5025               	movf	(___fldiv@new_exp+1)^0,w,c
  4348   0008D2  E108               	bnz	u1520
  4349   0008D4  2824               	incf	___fldiv@new_exp^0,w,c
  4350   0008D6  A0D8               	btfss	status,0,c
  4351   0008D8  EF70  F004         	goto	u1521
  4352   0008DC  EF72  F004         	goto	u1520
  4353   0008E0                     u1521:
  4354   0008E0  EF7D  F004         	goto	l2328
  4355   0008E4                     u1520:
  4356   0008E4  0E00               	movlw	0
  4357   0008E6  6E25               	movwf	(___fldiv@new_exp+1)^0,c
  4358   0008E8  6824               	setf	___fldiv@new_exp^0,c
  4359   0008EA  0E00               	movlw	0
  4360   0008EC  6E13               	movwf	___fldiv@b^0,c
  4361   0008EE  0E00               	movlw	0
  4362   0008F0  6E14               	movwf	(___fldiv@b+1)^0,c
  4363   0008F2  0E00               	movlw	0
  4364   0008F4  6E15               	movwf	(___fldiv@b+2)^0,c
  4365   0008F6  0E00               	movlw	0
  4366   0008F8  6E16               	movwf	(___fldiv@b+3)^0,c
  4367   0008FA                     l2328:
  4368   0008FA  BE25               	btfsc	(___fldiv@new_exp+1)^0,7,c
  4369   0008FC  EF8A  F004         	goto	u1530
  4370   000900  5025               	movf	(___fldiv@new_exp+1)^0,w,c
  4371   000902  E106               	bnz	u1531
  4372   000904  0424               	decf	___fldiv@new_exp^0,w,c
  4373   000906  B0D8               	btfsc	status,0,c
  4374   000908  EF88  F004         	goto	u1531
  4375   00090C  EF8A  F004         	goto	u1530
  4376   000910                     u1531:
  4377   000910  EF98  F004         	goto	l2332
  4378   000914                     u1530:
  4379   000914  0E00               	movlw	0
  4380   000916  6E25               	movwf	(___fldiv@new_exp+1)^0,c
  4381   000918  0E00               	movlw	0
  4382   00091A  6E24               	movwf	___fldiv@new_exp^0,c
  4383   00091C  0E00               	movlw	0
  4384   00091E  6E13               	movwf	___fldiv@b^0,c
  4385   000920  0E00               	movlw	0
  4386   000922  6E14               	movwf	(___fldiv@b+1)^0,c
  4387   000924  0E00               	movlw	0
  4388   000926  6E15               	movwf	(___fldiv@b+2)^0,c
  4389   000928  0E00               	movlw	0
  4390   00092A  6E16               	movwf	(___fldiv@b+3)^0,c
  4391   00092C  0E00               	movlw	0
  4392   00092E  6E23               	movwf	___fldiv@sign^0,c
  4393   000930                     l2332:
  4394   000930  C024  F02A         	movff	___fldiv@new_exp,___fldiv@bexp
  4395   000934  A02A               	btfss	___fldiv@bexp^0,0,c
  4396   000936  EF9F  F004         	goto	u1541
  4397   00093A  EFA1  F004         	goto	u1540
  4398   00093E                     u1541:
  4399   00093E  EFA4  F004         	goto	l2338
  4400   000942                     u1540:
  4401   000942  8E15               	bsf	(___fldiv@b+2)^0,7,c
  4402   000944  EFA5  F004         	goto	l2340
  4403   000948                     l2338:
  4404   000948  9E15               	bcf	(___fldiv@b+2)^0,7,c
  4405   00094A                     l2340:
  4406   00094A  90D8               	bcf	status,0,c
  4407   00094C  302A               	rrcf	___fldiv@bexp^0,w,c
  4408   00094E  6E16               	movwf	(___fldiv@b+3)^0,c
  4409   000950  EF5B  F003         	goto	l2254
  4410   000954                     l1049:
  4411   000954  0012               	return		;funcret
  4412   000956                     __end_of___fldiv:
  4413                           	callstack 0
  4414                           
  4415 ;; *************** function ___flge *****************
  4416 ;; Defined at:
  4417 ;;		line 4 in file "D:\ECM\pic\sources\c99\common\flge.c"
  4418 ;; Parameters:    Size  Location     Type
  4419 ;;  ff1             4    4[COMRAM] unsigned char 
  4420 ;;  ff2             4    8[COMRAM] unsigned char 
  4421 ;; Auto vars:     Size  Location     Type
  4422 ;;		None
  4423 ;; Return value:  Size  Location     Type
  4424 ;;		None               void
  4425 ;; Registers used:
  4426 ;;		wreg, status,2, status,0
  4427 ;; Tracked objects:
  4428 ;;		On entry : 0/0
  4429 ;;		On exit  : 0/0
  4430 ;;		Unchanged: 0/0
  4431 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4432 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4433 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4434 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4435 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4436 ;;Total ram usage:       12 bytes
  4437 ;; Hardware stack levels used: 1
  4438 ;; Hardware stack levels required when called: 2
  4439 ;; This function calls:
  4440 ;;		Nothing
  4441 ;; This function is called by:
  4442 ;;		_buggy_color_response
  4443 ;; This function uses a non-reentrant model
  4444 ;;
  4445                           
  4446                           	psect	text21
  4447   0012F2                     __ptext21:
  4448                           	callstack 0
  4449   0012F2                     ___flge:
  4450                           	callstack 27
  4451   0012F2  0E00               	movlw	0
  4452   0012F4  1405               	andwf	___flge@ff1^0,w,c
  4453   0012F6  6E0D               	movwf	??___flge^0,c
  4454   0012F8  0E00               	movlw	0
  4455   0012FA  1406               	andwf	(___flge@ff1+1)^0,w,c
  4456   0012FC  6E0E               	movwf	(??___flge+1)^0,c
  4457   0012FE  0E80               	movlw	128
  4458   001300  1407               	andwf	(___flge@ff1+2)^0,w,c
  4459   001302  6E0F               	movwf	(??___flge+2)^0,c
  4460   001304  0E7F               	movlw	127
  4461   001306  1408               	andwf	(___flge@ff1+3)^0,w,c
  4462   001308  6E10               	movwf	(??___flge+3)^0,c
  4463   00130A  500D               	movf	??___flge^0,w,c
  4464   00130C  100E               	iorwf	(??___flge+1)^0,w,c
  4465   00130E  100F               	iorwf	(??___flge+2)^0,w,c
  4466   001310  1010               	iorwf	(??___flge+3)^0,w,c
  4467   001312  A4D8               	btfss	status,2,c
  4468   001314  EF8E  F009         	goto	u1741
  4469   001318  EF90  F009         	goto	u1740
  4470   00131C                     u1741:
  4471   00131C  EF98  F009         	goto	l2488
  4472   001320                     u1740:
  4473   001320  0E00               	movlw	0
  4474   001322  6E05               	movwf	___flge@ff1^0,c
  4475   001324  0E00               	movlw	0
  4476   001326  6E06               	movwf	(___flge@ff1+1)^0,c
  4477   001328  0E00               	movlw	0
  4478   00132A  6E07               	movwf	(___flge@ff1+2)^0,c
  4479   00132C  0E00               	movlw	0
  4480   00132E  6E08               	movwf	(___flge@ff1+3)^0,c
  4481   001330                     l2488:
  4482   001330  0E00               	movlw	0
  4483   001332  1409               	andwf	___flge@ff2^0,w,c
  4484   001334  6E0D               	movwf	??___flge^0,c
  4485   001336  0E00               	movlw	0
  4486   001338  140A               	andwf	(___flge@ff2+1)^0,w,c
  4487   00133A  6E0E               	movwf	(??___flge+1)^0,c
  4488   00133C  0E80               	movlw	128
  4489   00133E  140B               	andwf	(___flge@ff2+2)^0,w,c
  4490   001340  6E0F               	movwf	(??___flge+2)^0,c
  4491   001342  0E7F               	movlw	127
  4492   001344  140C               	andwf	(___flge@ff2+3)^0,w,c
  4493   001346  6E10               	movwf	(??___flge+3)^0,c
  4494   001348  500D               	movf	??___flge^0,w,c
  4495   00134A  100E               	iorwf	(??___flge+1)^0,w,c
  4496   00134C  100F               	iorwf	(??___flge+2)^0,w,c
  4497   00134E  1010               	iorwf	(??___flge+3)^0,w,c
  4498   001350  A4D8               	btfss	status,2,c
  4499   001352  EFAD  F009         	goto	u1751
  4500   001356  EFAF  F009         	goto	u1750
  4501   00135A                     u1751:
  4502   00135A  EFB7  F009         	goto	l2492
  4503   00135E                     u1750:
  4504   00135E  0E00               	movlw	0
  4505   001360  6E09               	movwf	___flge@ff2^0,c
  4506   001362  0E00               	movlw	0
  4507   001364  6E0A               	movwf	(___flge@ff2+1)^0,c
  4508   001366  0E00               	movlw	0
  4509   001368  6E0B               	movwf	(___flge@ff2+2)^0,c
  4510   00136A  0E00               	movlw	0
  4511   00136C  6E0C               	movwf	(___flge@ff2+3)^0,c
  4512   00136E                     l2492:
  4513   00136E  AE08               	btfss	(___flge@ff1+3)^0,7,c
  4514   001370  EFBC  F009         	goto	u1761
  4515   001374  EFBE  F009         	goto	u1760
  4516   001378                     u1761:
  4517   001378  EFC7  F009         	goto	l2496
  4518   00137C                     u1760:
  4519   00137C  6C05               	negf	___flge@ff1^0,c
  4520   00137E  1E06               	comf	(___flge@ff1+1)^0,f,c
  4521   001380  B0D8               	btfsc	status,0,c
  4522   001382  2A06               	incf	(___flge@ff1+1)^0,f,c
  4523   001384  1E07               	comf	(___flge@ff1+2)^0,f,c
  4524   001386  B0D8               	btfsc	status,0,c
  4525   001388  2A07               	incf	(___flge@ff1+2)^0,f,c
  4526   00138A  0E80               	movlw	128
  4527   00138C  5608               	subfwb	(___flge@ff1+3)^0,f,c
  4528   00138E                     l2496:
  4529   00138E  AE0C               	btfss	(___flge@ff2+3)^0,7,c
  4530   001390  EFCC  F009         	goto	u1771
  4531   001394  EFCE  F009         	goto	u1770
  4532   001398                     u1771:
  4533   001398  EFD7  F009         	goto	l732
  4534   00139C                     u1770:
  4535   00139C  6C09               	negf	___flge@ff2^0,c
  4536   00139E  1E0A               	comf	(___flge@ff2+1)^0,f,c
  4537   0013A0  B0D8               	btfsc	status,0,c
  4538   0013A2  2A0A               	incf	(___flge@ff2+1)^0,f,c
  4539   0013A4  1E0B               	comf	(___flge@ff2+2)^0,f,c
  4540   0013A6  B0D8               	btfsc	status,0,c
  4541   0013A8  2A0B               	incf	(___flge@ff2+2)^0,f,c
  4542   0013AA  0E80               	movlw	128
  4543   0013AC  560C               	subfwb	(___flge@ff2+3)^0,f,c
  4544   0013AE                     l732:
  4545   0013AE  0E00               	movlw	0
  4546   0013B0  1A05               	xorwf	___flge@ff1^0,f,c
  4547   0013B2  0E00               	movlw	0
  4548   0013B4  1A06               	xorwf	(___flge@ff1+1)^0,f,c
  4549   0013B6  0E00               	movlw	0
  4550   0013B8  1A07               	xorwf	(___flge@ff1+2)^0,f,c
  4551   0013BA  0E80               	movlw	128
  4552   0013BC  1A08               	xorwf	(___flge@ff1+3)^0,f,c
  4553   0013BE  0E00               	movlw	0
  4554   0013C0  1A09               	xorwf	___flge@ff2^0,f,c
  4555   0013C2  0E00               	movlw	0
  4556   0013C4  1A0A               	xorwf	(___flge@ff2+1)^0,f,c
  4557   0013C6  0E00               	movlw	0
  4558   0013C8  1A0B               	xorwf	(___flge@ff2+2)^0,f,c
  4559   0013CA  0E80               	movlw	128
  4560   0013CC  1A0C               	xorwf	(___flge@ff2+3)^0,f,c
  4561   0013CE  5009               	movf	___flge@ff2^0,w,c
  4562   0013D0  5C05               	subwf	___flge@ff1^0,w,c
  4563   0013D2  500A               	movf	(___flge@ff2+1)^0,w,c
  4564   0013D4  5806               	subwfb	(___flge@ff1+1)^0,w,c
  4565   0013D6  500B               	movf	(___flge@ff2+2)^0,w,c
  4566   0013D8  5807               	subwfb	(___flge@ff1+2)^0,w,c
  4567   0013DA  500C               	movf	(___flge@ff2+3)^0,w,c
  4568   0013DC  5808               	subwfb	(___flge@ff1+3)^0,w,c
  4569   0013DE  B0D8               	btfsc	status,0,c
  4570   0013E0  EFF4  F009         	goto	u1781
  4571   0013E4  EFF6  F009         	goto	u1780
  4572   0013E8                     u1781:
  4573   0013E8  EFF9  F009         	goto	l2502
  4574   0013EC                     u1780:
  4575   0013EC  90D8               	bcf	status,0,c
  4576   0013EE  EFFA  F009         	goto	l737
  4577   0013F2                     l2502:
  4578   0013F2  80D8               	bsf	status,0,c
  4579   0013F4                     l737:
  4580   0013F4  0012               	return		;funcret
  4581   0013F6                     __end_of___flge:
  4582                           	callstack 0
  4583                           
  4584 ;; *************** function _READcolor *****************
  4585 ;; Defined at:
  4586 ;;		line 88 in file "../color.c"
  4587 ;; Parameters:    Size  Location     Type
  4588 ;;  c               2   15[COMRAM] PTR struct colors
  4589 ;;		 -> color(20), 
  4590 ;; Auto vars:     Size  Location     Type
  4591 ;;		None
  4592 ;; Return value:  Size  Location     Type
  4593 ;;                  1    wreg      void 
  4594 ;; Registers used:
  4595 ;;		wreg, status,2, status,0, cstack
  4596 ;; Tracked objects:
  4597 ;;		On entry : 0/0
  4598 ;;		On exit  : 0/0
  4599 ;;		Unchanged: 0/0
  4600 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4601 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4602 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4603 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4604 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4605 ;;Total ram usage:        2 bytes
  4606 ;; Hardware stack levels used: 1
  4607 ;; Hardware stack levels required when called: 5
  4608 ;; This function calls:
  4609 ;;		_color_read_Blue
  4610 ;;		_color_read_Clear
  4611 ;;		_color_read_Green
  4612 ;;		_color_read_Red
  4613 ;; This function is called by:
  4614 ;;		_buggy_color_response
  4615 ;; This function uses a non-reentrant model
  4616 ;;
  4617                           
  4618                           	psect	text22
  4619   001A94                     __ptext22:
  4620                           	callstack 0
  4621   001A94                     _READcolor:
  4622                           	callstack 24
  4623   001A94                     
  4624                           ;../color.c: 90:     color.R = color_read_Red();
  4625   001A94  EC49  F00C         	call	_color_read_Red	;wreg free
  4626   001A98  C009  F03C         	movff	?_color_read_Red,_color
  4627   001A9C  C00A  F03D         	movff	?_color_read_Red+1,_color+1
  4628                           
  4629                           ;../color.c: 91:     color.B = color_read_Blue();
  4630   001AA0  ECC1  F00C         	call	_color_read_Blue	;wreg free
  4631   001AA4  C009  F03E         	movff	?_color_read_Blue,_color+2
  4632   001AA8  C00A  F03F         	movff	?_color_read_Blue+1,_color+3
  4633                           
  4634                           ;../color.c: 92:     color.G = color_read_Green();
  4635   001AAC  EC71  F00C         	call	_color_read_Green	;wreg free
  4636   001AB0  C009  F040         	movff	?_color_read_Green,_color+4
  4637   001AB4  C00A  F041         	movff	?_color_read_Green+1,_color+5
  4638                           
  4639                           ;../color.c: 93:     color.C = color_read_Clear();
  4640   001AB8  EC99  F00C         	call	_color_read_Clear	;wreg free
  4641   001ABC  C009  F042         	movff	?_color_read_Clear,_color+6
  4642   001AC0  C00A  F043         	movff	?_color_read_Clear+1,_color+7
  4643   001AC4  0012               	return		;funcret
  4644   001AC6                     __end_of_READcolor:
  4645                           	callstack 0
  4646                           
  4647 ;; *************** function _color_read_Red *****************
  4648 ;; Defined at:
  4649 ;;		line 28 in file "../color.c"
  4650 ;; Parameters:    Size  Location     Type
  4651 ;;		None
  4652 ;; Auto vars:     Size  Location     Type
  4653 ;;  tmp             2   13[COMRAM] unsigned int 
  4654 ;; Return value:  Size  Location     Type
  4655 ;;                  2    8[COMRAM] unsigned int 
  4656 ;; Registers used:
  4657 ;;		wreg, status,2, status,0, cstack
  4658 ;; Tracked objects:
  4659 ;;		On entry : 0/0
  4660 ;;		On exit  : 0/0
  4661 ;;		Unchanged: 0/0
  4662 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4663 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4664 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4665 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4666 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4667 ;;Total ram usage:        7 bytes
  4668 ;; Hardware stack levels used: 1
  4669 ;; Hardware stack levels required when called: 4
  4670 ;; This function calls:
  4671 ;;		_I2C_2_Master_Read
  4672 ;;		_I2C_2_Master_RepStart
  4673 ;;		_I2C_2_Master_Start
  4674 ;;		_I2C_2_Master_Stop
  4675 ;;		_I2C_2_Master_Write
  4676 ;; This function is called by:
  4677 ;;		_READcolor
  4678 ;; This function uses a non-reentrant model
  4679 ;;
  4680                           
  4681                           	psect	text23
  4682   001892                     __ptext23:
  4683                           	callstack 0
  4684   001892                     _color_read_Red:
  4685                           	callstack 24
  4686   001892                     
  4687                           ;../color.c: 30:  unsigned int tmp;;../color.c: 31:  I2C_2_Master_Start();
  4688   001892  EC23  F00E         	call	_I2C_2_Master_Start	;wreg free
  4689                           
  4690                           ;../color.c: 32:  I2C_2_Master_Write(0x52 | 0x00);
  4691   001896  0E52               	movlw	82
  4692   001898  EC12  F00E         	call	_I2C_2_Master_Write
  4693                           
  4694                           ;../color.c: 34:  I2C_2_Master_Write(0xA0 | 0x16);
  4695   00189C  0EB6               	movlw	182
  4696   00189E  EC12  F00E         	call	_I2C_2_Master_Write
  4697                           
  4698                           ;../color.c: 35:  I2C_2_Master_RepStart();
  4699   0018A2  EC28  F00E         	call	_I2C_2_Master_RepStart	;wreg free
  4700                           
  4701                           ;../color.c: 36:  I2C_2_Master_Write(0x52 | 0x01);
  4702   0018A6  0E53               	movlw	83
  4703   0018A8  EC12  F00E         	call	_I2C_2_Master_Write
  4704                           
  4705                           ;../color.c: 37:  tmp=I2C_2_Master_Read(1);
  4706   0018AC  0E01               	movlw	1
  4707   0018AE  EC0F  F00D         	call	_I2C_2_Master_Read
  4708   0018B2  6E0B               	movwf	??_color_read_Red^0,c
  4709   0018B4  500B               	movf	??_color_read_Red^0,w,c
  4710   0018B6  6E0E               	movwf	color_read_Red@tmp^0,c
  4711   0018B8  6A0F               	clrf	(color_read_Red@tmp+1)^0,c
  4712                           
  4713                           ;../color.c: 38:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  4714   0018BA  0E00               	movlw	0
  4715   0018BC  EC0F  F00D         	call	_I2C_2_Master_Read
  4716   0018C0  6E0B               	movwf	??_color_read_Red^0,c
  4717   0018C2  500B               	movf	??_color_read_Red^0,w,c
  4718   0018C4  6E0D               	movwf	(??_color_read_Red+2)^0,c
  4719   0018C6  6A0C               	clrf	(??_color_read_Red+1)^0,c
  4720   0018C8  500E               	movf	color_read_Red@tmp^0,w,c
  4721   0018CA  100C               	iorwf	(??_color_read_Red+1)^0,w,c
  4722   0018CC  6E0E               	movwf	color_read_Red@tmp^0,c
  4723   0018CE  500F               	movf	(color_read_Red@tmp+1)^0,w,c
  4724   0018D0  100D               	iorwf	(??_color_read_Red+2)^0,w,c
  4725   0018D2  6E0F               	movwf	(color_read_Red@tmp+1)^0,c
  4726                           
  4727                           ;../color.c: 39:  I2C_2_Master_Stop();
  4728   0018D4  EC1E  F00E         	call	_I2C_2_Master_Stop	;wreg free
  4729   0018D8                     
  4730                           ;../color.c: 40:  return tmp;
  4731   0018D8  C00E  F009         	movff	color_read_Red@tmp,?_color_read_Red
  4732   0018DC  C00F  F00A         	movff	color_read_Red@tmp+1,?_color_read_Red+1
  4733   0018E0  0012               	return		;funcret
  4734   0018E2                     __end_of_color_read_Red:
  4735                           	callstack 0
  4736                           
  4737 ;; *************** function _color_read_Green *****************
  4738 ;; Defined at:
  4739 ;;		line 58 in file "../color.c"
  4740 ;; Parameters:    Size  Location     Type
  4741 ;;		None
  4742 ;; Auto vars:     Size  Location     Type
  4743 ;;  tmp             2   13[COMRAM] unsigned int 
  4744 ;; Return value:  Size  Location     Type
  4745 ;;                  2    8[COMRAM] unsigned int 
  4746 ;; Registers used:
  4747 ;;		wreg, status,2, status,0, cstack
  4748 ;; Tracked objects:
  4749 ;;		On entry : 0/0
  4750 ;;		On exit  : 0/0
  4751 ;;		Unchanged: 0/0
  4752 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4753 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4754 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4755 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4756 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4757 ;;Total ram usage:        7 bytes
  4758 ;; Hardware stack levels used: 1
  4759 ;; Hardware stack levels required when called: 4
  4760 ;; This function calls:
  4761 ;;		_I2C_2_Master_Read
  4762 ;;		_I2C_2_Master_RepStart
  4763 ;;		_I2C_2_Master_Start
  4764 ;;		_I2C_2_Master_Stop
  4765 ;;		_I2C_2_Master_Write
  4766 ;; This function is called by:
  4767 ;;		_READcolor
  4768 ;; This function uses a non-reentrant model
  4769 ;;
  4770                           
  4771                           	psect	text24
  4772   0018E2                     __ptext24:
  4773                           	callstack 0
  4774   0018E2                     _color_read_Green:
  4775                           	callstack 24
  4776   0018E2                     
  4777                           ;../color.c: 60:  unsigned int tmp;;../color.c: 61:  I2C_2_Master_Start();
  4778   0018E2  EC23  F00E         	call	_I2C_2_Master_Start	;wreg free
  4779                           
  4780                           ;../color.c: 62:  I2C_2_Master_Write(0x52 | 0x00);
  4781   0018E6  0E52               	movlw	82
  4782   0018E8  EC12  F00E         	call	_I2C_2_Master_Write
  4783                           
  4784                           ;../color.c: 64:  I2C_2_Master_Write(0xA0 | 0x18);
  4785   0018EC  0EB8               	movlw	184
  4786   0018EE  EC12  F00E         	call	_I2C_2_Master_Write
  4787                           
  4788                           ;../color.c: 65:  I2C_2_Master_RepStart();
  4789   0018F2  EC28  F00E         	call	_I2C_2_Master_RepStart	;wreg free
  4790                           
  4791                           ;../color.c: 66:  I2C_2_Master_Write(0x52 | 0x01);
  4792   0018F6  0E53               	movlw	83
  4793   0018F8  EC12  F00E         	call	_I2C_2_Master_Write
  4794                           
  4795                           ;../color.c: 67:  tmp=I2C_2_Master_Read(1);
  4796   0018FC  0E01               	movlw	1
  4797   0018FE  EC0F  F00D         	call	_I2C_2_Master_Read
  4798   001902  6E0B               	movwf	??_color_read_Green^0,c
  4799   001904  500B               	movf	??_color_read_Green^0,w,c
  4800   001906  6E0E               	movwf	color_read_Green@tmp^0,c
  4801   001908  6A0F               	clrf	(color_read_Green@tmp+1)^0,c
  4802                           
  4803                           ;../color.c: 68:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  4804   00190A  0E00               	movlw	0
  4805   00190C  EC0F  F00D         	call	_I2C_2_Master_Read
  4806   001910  6E0B               	movwf	??_color_read_Green^0,c
  4807   001912  500B               	movf	??_color_read_Green^0,w,c
  4808   001914  6E0D               	movwf	(??_color_read_Green+2)^0,c
  4809   001916  6A0C               	clrf	(??_color_read_Green+1)^0,c
  4810   001918  500E               	movf	color_read_Green@tmp^0,w,c
  4811   00191A  100C               	iorwf	(??_color_read_Green+1)^0,w,c
  4812   00191C  6E0E               	movwf	color_read_Green@tmp^0,c
  4813   00191E  500F               	movf	(color_read_Green@tmp+1)^0,w,c
  4814   001920  100D               	iorwf	(??_color_read_Green+2)^0,w,c
  4815   001922  6E0F               	movwf	(color_read_Green@tmp+1)^0,c
  4816                           
  4817                           ;../color.c: 69:  I2C_2_Master_Stop();
  4818   001924  EC1E  F00E         	call	_I2C_2_Master_Stop	;wreg free
  4819   001928                     
  4820                           ;../color.c: 70:  return tmp;
  4821   001928  C00E  F009         	movff	color_read_Green@tmp,?_color_read_Green
  4822   00192C  C00F  F00A         	movff	color_read_Green@tmp+1,?_color_read_Green+1
  4823   001930  0012               	return		;funcret
  4824   001932                     __end_of_color_read_Green:
  4825                           	callstack 0
  4826                           
  4827 ;; *************** function _color_read_Clear *****************
  4828 ;; Defined at:
  4829 ;;		line 73 in file "../color.c"
  4830 ;; Parameters:    Size  Location     Type
  4831 ;;		None
  4832 ;; Auto vars:     Size  Location     Type
  4833 ;;  tmp             2   13[COMRAM] unsigned int 
  4834 ;; Return value:  Size  Location     Type
  4835 ;;                  2    8[COMRAM] unsigned int 
  4836 ;; Registers used:
  4837 ;;		wreg, status,2, status,0, cstack
  4838 ;; Tracked objects:
  4839 ;;		On entry : 0/0
  4840 ;;		On exit  : 0/0
  4841 ;;		Unchanged: 0/0
  4842 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4843 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4844 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4845 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4846 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4847 ;;Total ram usage:        7 bytes
  4848 ;; Hardware stack levels used: 1
  4849 ;; Hardware stack levels required when called: 4
  4850 ;; This function calls:
  4851 ;;		_I2C_2_Master_Read
  4852 ;;		_I2C_2_Master_RepStart
  4853 ;;		_I2C_2_Master_Start
  4854 ;;		_I2C_2_Master_Stop
  4855 ;;		_I2C_2_Master_Write
  4856 ;; This function is called by:
  4857 ;;		_READcolor
  4858 ;; This function uses a non-reentrant model
  4859 ;;
  4860                           
  4861                           	psect	text25
  4862   001932                     __ptext25:
  4863                           	callstack 0
  4864   001932                     _color_read_Clear:
  4865                           	callstack 24
  4866   001932                     
  4867                           ;../color.c: 75:  unsigned int tmp;;../color.c: 76:  I2C_2_Master_Start();
  4868   001932  EC23  F00E         	call	_I2C_2_Master_Start	;wreg free
  4869                           
  4870                           ;../color.c: 77:  I2C_2_Master_Write(0x52 | 0x00);
  4871   001936  0E52               	movlw	82
  4872   001938  EC12  F00E         	call	_I2C_2_Master_Write
  4873                           
  4874                           ;../color.c: 79:  I2C_2_Master_Write(0xA0 | 0x14);
  4875   00193C  0EB4               	movlw	180
  4876   00193E  EC12  F00E         	call	_I2C_2_Master_Write
  4877                           
  4878                           ;../color.c: 80:  I2C_2_Master_RepStart();
  4879   001942  EC28  F00E         	call	_I2C_2_Master_RepStart	;wreg free
  4880                           
  4881                           ;../color.c: 81:  I2C_2_Master_Write(0x52 | 0x01);
  4882   001946  0E53               	movlw	83
  4883   001948  EC12  F00E         	call	_I2C_2_Master_Write
  4884                           
  4885                           ;../color.c: 82:  tmp=I2C_2_Master_Read(1);
  4886   00194C  0E01               	movlw	1
  4887   00194E  EC0F  F00D         	call	_I2C_2_Master_Read
  4888   001952  6E0B               	movwf	??_color_read_Clear^0,c
  4889   001954  500B               	movf	??_color_read_Clear^0,w,c
  4890   001956  6E0E               	movwf	color_read_Clear@tmp^0,c
  4891   001958  6A0F               	clrf	(color_read_Clear@tmp+1)^0,c
  4892                           
  4893                           ;../color.c: 83:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  4894   00195A  0E00               	movlw	0
  4895   00195C  EC0F  F00D         	call	_I2C_2_Master_Read
  4896   001960  6E0B               	movwf	??_color_read_Clear^0,c
  4897   001962  500B               	movf	??_color_read_Clear^0,w,c
  4898   001964  6E0D               	movwf	(??_color_read_Clear+2)^0,c
  4899   001966  6A0C               	clrf	(??_color_read_Clear+1)^0,c
  4900   001968  500E               	movf	color_read_Clear@tmp^0,w,c
  4901   00196A  100C               	iorwf	(??_color_read_Clear+1)^0,w,c
  4902   00196C  6E0E               	movwf	color_read_Clear@tmp^0,c
  4903   00196E  500F               	movf	(color_read_Clear@tmp+1)^0,w,c
  4904   001970  100D               	iorwf	(??_color_read_Clear+2)^0,w,c
  4905   001972  6E0F               	movwf	(color_read_Clear@tmp+1)^0,c
  4906                           
  4907                           ;../color.c: 84:  I2C_2_Master_Stop();
  4908   001974  EC1E  F00E         	call	_I2C_2_Master_Stop	;wreg free
  4909   001978                     
  4910                           ;../color.c: 85:  return tmp;
  4911   001978  C00E  F009         	movff	color_read_Clear@tmp,?_color_read_Clear
  4912   00197C  C00F  F00A         	movff	color_read_Clear@tmp+1,?_color_read_Clear+1
  4913   001980  0012               	return		;funcret
  4914   001982                     __end_of_color_read_Clear:
  4915                           	callstack 0
  4916                           
  4917 ;; *************** function _color_read_Blue *****************
  4918 ;; Defined at:
  4919 ;;		line 43 in file "../color.c"
  4920 ;; Parameters:    Size  Location     Type
  4921 ;;		None
  4922 ;; Auto vars:     Size  Location     Type
  4923 ;;  tmp             2   13[COMRAM] unsigned int 
  4924 ;; Return value:  Size  Location     Type
  4925 ;;                  2    8[COMRAM] unsigned int 
  4926 ;; Registers used:
  4927 ;;		wreg, status,2, status,0, cstack
  4928 ;; Tracked objects:
  4929 ;;		On entry : 0/0
  4930 ;;		On exit  : 0/0
  4931 ;;		Unchanged: 0/0
  4932 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4933 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4934 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4935 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4936 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4937 ;;Total ram usage:        7 bytes
  4938 ;; Hardware stack levels used: 1
  4939 ;; Hardware stack levels required when called: 4
  4940 ;; This function calls:
  4941 ;;		_I2C_2_Master_Read
  4942 ;;		_I2C_2_Master_RepStart
  4943 ;;		_I2C_2_Master_Start
  4944 ;;		_I2C_2_Master_Stop
  4945 ;;		_I2C_2_Master_Write
  4946 ;; This function is called by:
  4947 ;;		_READcolor
  4948 ;; This function uses a non-reentrant model
  4949 ;;
  4950                           
  4951                           	psect	text26
  4952   001982                     __ptext26:
  4953                           	callstack 0
  4954   001982                     _color_read_Blue:
  4955                           	callstack 24
  4956   001982                     
  4957                           ;../color.c: 45:  unsigned int tmp;;../color.c: 46:  I2C_2_Master_Start();
  4958   001982  EC23  F00E         	call	_I2C_2_Master_Start	;wreg free
  4959                           
  4960                           ;../color.c: 47:  I2C_2_Master_Write(0x52 | 0x00);
  4961   001986  0E52               	movlw	82
  4962   001988  EC12  F00E         	call	_I2C_2_Master_Write
  4963                           
  4964                           ;../color.c: 49:  I2C_2_Master_Write(0xA0 | 0x1A);
  4965   00198C  0EBA               	movlw	186
  4966   00198E  EC12  F00E         	call	_I2C_2_Master_Write
  4967                           
  4968                           ;../color.c: 50:  I2C_2_Master_RepStart();
  4969   001992  EC28  F00E         	call	_I2C_2_Master_RepStart	;wreg free
  4970                           
  4971                           ;../color.c: 51:  I2C_2_Master_Write(0x52 | 0x01);
  4972   001996  0E53               	movlw	83
  4973   001998  EC12  F00E         	call	_I2C_2_Master_Write
  4974                           
  4975                           ;../color.c: 52:  tmp=I2C_2_Master_Read(1);
  4976   00199C  0E01               	movlw	1
  4977   00199E  EC0F  F00D         	call	_I2C_2_Master_Read
  4978   0019A2  6E0B               	movwf	??_color_read_Blue^0,c
  4979   0019A4  500B               	movf	??_color_read_Blue^0,w,c
  4980   0019A6  6E0E               	movwf	color_read_Blue@tmp^0,c
  4981   0019A8  6A0F               	clrf	(color_read_Blue@tmp+1)^0,c
  4982                           
  4983                           ;../color.c: 53:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  4984   0019AA  0E00               	movlw	0
  4985   0019AC  EC0F  F00D         	call	_I2C_2_Master_Read
  4986   0019B0  6E0B               	movwf	??_color_read_Blue^0,c
  4987   0019B2  500B               	movf	??_color_read_Blue^0,w,c
  4988   0019B4  6E0D               	movwf	(??_color_read_Blue+2)^0,c
  4989   0019B6  6A0C               	clrf	(??_color_read_Blue+1)^0,c
  4990   0019B8  500E               	movf	color_read_Blue@tmp^0,w,c
  4991   0019BA  100C               	iorwf	(??_color_read_Blue+1)^0,w,c
  4992   0019BC  6E0E               	movwf	color_read_Blue@tmp^0,c
  4993   0019BE  500F               	movf	(color_read_Blue@tmp+1)^0,w,c
  4994   0019C0  100D               	iorwf	(??_color_read_Blue+2)^0,w,c
  4995   0019C2  6E0F               	movwf	(color_read_Blue@tmp+1)^0,c
  4996                           
  4997                           ;../color.c: 54:  I2C_2_Master_Stop();
  4998   0019C4  EC1E  F00E         	call	_I2C_2_Master_Stop	;wreg free
  4999   0019C8                     
  5000                           ;../color.c: 55:  return tmp;
  5001   0019C8  C00E  F009         	movff	color_read_Blue@tmp,?_color_read_Blue
  5002   0019CC  C00F  F00A         	movff	color_read_Blue@tmp+1,?_color_read_Blue+1
  5003   0019D0  0012               	return		;funcret
  5004   0019D2                     __end_of_color_read_Blue:
  5005                           	callstack 0
  5006                           
  5007 ;; *************** function _I2C_2_Master_Write *****************
  5008 ;; Defined at:
  5009 ;;		line 45 in file "../i2c.c"
  5010 ;; Parameters:    Size  Location     Type
  5011 ;;  data_byte       1    wreg     unsigned char 
  5012 ;; Auto vars:     Size  Location     Type
  5013 ;;  data_byte       1    5[COMRAM] unsigned char 
  5014 ;; Return value:  Size  Location     Type
  5015 ;;                  1    wreg      void 
  5016 ;; Registers used:
  5017 ;;		wreg, status,2, status,0, cstack
  5018 ;; Tracked objects:
  5019 ;;		On entry : 0/0
  5020 ;;		On exit  : 0/0
  5021 ;;		Unchanged: 0/0
  5022 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5023 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5024 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5025 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5026 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5027 ;;Total ram usage:        1 bytes
  5028 ;; Hardware stack levels used: 1
  5029 ;; Hardware stack levels required when called: 3
  5030 ;; This function calls:
  5031 ;;		_I2C_2_Master_Idle
  5032 ;; This function is called by:
  5033 ;;		_color_writetoaddr
  5034 ;;		_color_read_Red
  5035 ;;		_color_read_Blue
  5036 ;;		_color_read_Green
  5037 ;;		_color_read_Clear
  5038 ;; This function uses a non-reentrant model
  5039 ;;
  5040                           
  5041                           	psect	text27
  5042   001C24                     __ptext27:
  5043                           	callstack 0
  5044   001C24                     _I2C_2_Master_Write:
  5045                           	callstack 25
  5046                           
  5047                           ;incstack = 0
  5048                           ;I2C_2_Master_Write@data_byte stored from wreg
  5049   001C24  6E06               	movwf	I2C_2_Master_Write@data_byte^0,c
  5050   001C26                     
  5051                           ;../i2c.c: 45: void I2C_2_Master_Write(unsigned char data_byte);../i2c.c: 46: {;../i2c.c
      +                          : 47:   I2C_2_Master_Idle();
  5052   001C26  ECA3  F00D         	call	_I2C_2_Master_Idle	;wreg free
  5053   001C2A                     
  5054                           ;../i2c.c: 48:   SSP2BUF = data_byte;
  5055   001C2A  C006  FED5         	movff	I2C_2_Master_Write@data_byte,3797	;volatile
  5056   001C2E  0012               	return		;funcret
  5057   001C30                     __end_of_I2C_2_Master_Write:
  5058                           	callstack 0
  5059                           
  5060 ;; *************** function _I2C_2_Master_Stop *****************
  5061 ;; Defined at:
  5062 ;;		line 39 in file "../i2c.c"
  5063 ;; Parameters:    Size  Location     Type
  5064 ;;		None
  5065 ;; Auto vars:     Size  Location     Type
  5066 ;;		None
  5067 ;; Return value:  Size  Location     Type
  5068 ;;                  1    wreg      void 
  5069 ;; Registers used:
  5070 ;;		wreg, status,2, status,0, cstack
  5071 ;; Tracked objects:
  5072 ;;		On entry : 0/0
  5073 ;;		On exit  : 0/0
  5074 ;;		Unchanged: 0/0
  5075 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5076 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5077 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5078 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5079 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5080 ;;Total ram usage:        0 bytes
  5081 ;; Hardware stack levels used: 1
  5082 ;; Hardware stack levels required when called: 3
  5083 ;; This function calls:
  5084 ;;		_I2C_2_Master_Idle
  5085 ;; This function is called by:
  5086 ;;		_color_writetoaddr
  5087 ;;		_color_read_Red
  5088 ;;		_color_read_Blue
  5089 ;;		_color_read_Green
  5090 ;;		_color_read_Clear
  5091 ;; This function uses a non-reentrant model
  5092 ;;
  5093                           
  5094                           	psect	text28
  5095   001C3C                     __ptext28:
  5096                           	callstack 0
  5097   001C3C                     _I2C_2_Master_Stop:
  5098                           	callstack 25
  5099   001C3C                     
  5100                           ;../i2c.c: 41:   I2C_2_Master_Idle();
  5101   001C3C  ECA3  F00D         	call	_I2C_2_Master_Idle	;wreg free
  5102   001C40                     
  5103                           ;../i2c.c: 42:   SSP2CON2bits.PEN = 1;
  5104   001C40  010E               	movlb	14	; () banked
  5105   001C42  85DA               	bsf	218,2,b	;volatile
  5106   001C44                     
  5107                           ; BSR set to: 14
  5108   001C44  0012               	return		;funcret
  5109   001C46                     __end_of_I2C_2_Master_Stop:
  5110                           	callstack 0
  5111                           
  5112 ;; *************** function _I2C_2_Master_Start *****************
  5113 ;; Defined at:
  5114 ;;		line 27 in file "../i2c.c"
  5115 ;; Parameters:    Size  Location     Type
  5116 ;;		None
  5117 ;; Auto vars:     Size  Location     Type
  5118 ;;		None
  5119 ;; Return value:  Size  Location     Type
  5120 ;;                  1    wreg      void 
  5121 ;; Registers used:
  5122 ;;		wreg, status,2, status,0, cstack
  5123 ;; Tracked objects:
  5124 ;;		On entry : 0/0
  5125 ;;		On exit  : 0/0
  5126 ;;		Unchanged: 0/0
  5127 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5128 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5129 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5130 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5131 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5132 ;;Total ram usage:        0 bytes
  5133 ;; Hardware stack levels used: 1
  5134 ;; Hardware stack levels required when called: 3
  5135 ;; This function calls:
  5136 ;;		_I2C_2_Master_Idle
  5137 ;; This function is called by:
  5138 ;;		_color_writetoaddr
  5139 ;;		_color_read_Red
  5140 ;;		_color_read_Blue
  5141 ;;		_color_read_Green
  5142 ;;		_color_read_Clear
  5143 ;; This function uses a non-reentrant model
  5144 ;;
  5145                           
  5146                           	psect	text29
  5147   001C46                     __ptext29:
  5148                           	callstack 0
  5149   001C46                     _I2C_2_Master_Start:
  5150                           	callstack 25
  5151   001C46                     
  5152                           ;../i2c.c: 29:   I2C_2_Master_Idle();
  5153   001C46  ECA3  F00D         	call	_I2C_2_Master_Idle	;wreg free
  5154   001C4A                     
  5155                           ;../i2c.c: 30:   SSP2CON2bits.SEN = 1;
  5156   001C4A  010E               	movlb	14	; () banked
  5157   001C4C  81DA               	bsf	218,0,b	;volatile
  5158   001C4E                     
  5159                           ; BSR set to: 14
  5160   001C4E  0012               	return		;funcret
  5161   001C50                     __end_of_I2C_2_Master_Start:
  5162                           	callstack 0
  5163                           
  5164 ;; *************** function _I2C_2_Master_RepStart *****************
  5165 ;; Defined at:
  5166 ;;		line 33 in file "../i2c.c"
  5167 ;; Parameters:    Size  Location     Type
  5168 ;;		None
  5169 ;; Auto vars:     Size  Location     Type
  5170 ;;		None
  5171 ;; Return value:  Size  Location     Type
  5172 ;;                  1    wreg      void 
  5173 ;; Registers used:
  5174 ;;		wreg, status,2, status,0, cstack
  5175 ;; Tracked objects:
  5176 ;;		On entry : 0/0
  5177 ;;		On exit  : 0/0
  5178 ;;		Unchanged: 0/0
  5179 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5180 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5181 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5182 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5183 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5184 ;;Total ram usage:        0 bytes
  5185 ;; Hardware stack levels used: 1
  5186 ;; Hardware stack levels required when called: 3
  5187 ;; This function calls:
  5188 ;;		_I2C_2_Master_Idle
  5189 ;; This function is called by:
  5190 ;;		_color_read_Red
  5191 ;;		_color_read_Blue
  5192 ;;		_color_read_Green
  5193 ;;		_color_read_Clear
  5194 ;; This function uses a non-reentrant model
  5195 ;;
  5196                           
  5197                           	psect	text30
  5198   001C50                     __ptext30:
  5199                           	callstack 0
  5200   001C50                     _I2C_2_Master_RepStart:
  5201                           	callstack 24
  5202   001C50                     
  5203                           ;../i2c.c: 35:   I2C_2_Master_Idle();
  5204   001C50  ECA3  F00D         	call	_I2C_2_Master_Idle	;wreg free
  5205   001C54                     
  5206                           ;../i2c.c: 36:   SSP2CON2bits.RSEN = 1;
  5207   001C54  010E               	movlb	14	; () banked
  5208   001C56  83DA               	bsf	218,1,b	;volatile
  5209   001C58                     
  5210                           ; BSR set to: 14
  5211   001C58  0012               	return		;funcret
  5212   001C5A                     __end_of_I2C_2_Master_RepStart:
  5213                           	callstack 0
  5214                           
  5215 ;; *************** function _I2C_2_Master_Read *****************
  5216 ;; Defined at:
  5217 ;;		line 51 in file "../i2c.c"
  5218 ;; Parameters:    Size  Location     Type
  5219 ;;  ack             1    wreg     unsigned char 
  5220 ;; Auto vars:     Size  Location     Type
  5221 ;;  ack             1    6[COMRAM] unsigned char 
  5222 ;;  tmp             1    7[COMRAM] unsigned char 
  5223 ;; Return value:  Size  Location     Type
  5224 ;;                  1    wreg      unsigned char 
  5225 ;; Registers used:
  5226 ;;		wreg, status,2, status,0, cstack
  5227 ;; Tracked objects:
  5228 ;;		On entry : 0/0
  5229 ;;		On exit  : 0/0
  5230 ;;		Unchanged: 0/0
  5231 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5232 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5233 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5234 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5235 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5236 ;;Total ram usage:        3 bytes
  5237 ;; Hardware stack levels used: 1
  5238 ;; Hardware stack levels required when called: 3
  5239 ;; This function calls:
  5240 ;;		_I2C_2_Master_Idle
  5241 ;; This function is called by:
  5242 ;;		_color_read_Red
  5243 ;;		_color_read_Blue
  5244 ;;		_color_read_Green
  5245 ;;		_color_read_Clear
  5246 ;; This function uses a non-reentrant model
  5247 ;;
  5248                           
  5249                           	psect	text31
  5250   001A1E                     __ptext31:
  5251                           	callstack 0
  5252   001A1E                     _I2C_2_Master_Read:
  5253                           	callstack 24
  5254                           
  5255                           ; BSR set to: 14
  5256                           ;incstack = 0
  5257                           ;I2C_2_Master_Read@ack stored from wreg
  5258   001A1E  6E07               	movwf	I2C_2_Master_Read@ack^0,c
  5259   001A20                     
  5260                           ;../i2c.c: 51: unsigned char I2C_2_Master_Read(unsigned char ack);../i2c.c: 52: {;../i2c
      +                          .c: 53:   unsigned char tmp;;../i2c.c: 54:   I2C_2_Master_Idle();
  5261   001A20  ECA3  F00D         	call	_I2C_2_Master_Idle	;wreg free
  5262   001A24                     
  5263                           ;../i2c.c: 55:   SSP2CON2bits.RCEN = 1;
  5264   001A24  010E               	movlb	14	; () banked
  5265   001A26  87DA               	bsf	218,3,b	;volatile
  5266                           
  5267                           ;../i2c.c: 56:   I2C_2_Master_Idle();
  5268   001A28  ECA3  F00D         	call	_I2C_2_Master_Idle	;wreg free
  5269   001A2C                     
  5270                           ;../i2c.c: 57:   tmp = SSP2BUF;
  5271   001A2C  CED5 F008          	movff	3797,I2C_2_Master_Read@tmp	;volatile
  5272                           
  5273                           ;../i2c.c: 58:   I2C_2_Master_Idle();
  5274   001A30  ECA3  F00D         	call	_I2C_2_Master_Idle	;wreg free
  5275   001A34                     
  5276                           ;../i2c.c: 59:   SSP2CON2bits.ACKDT = !ack;
  5277   001A34  5007               	movf	I2C_2_Master_Read@ack^0,w,c
  5278   001A36  B4D8               	btfsc	status,2,c
  5279   001A38  EF20  F00D         	goto	u1151
  5280   001A3C  EF24  F00D         	goto	u1150
  5281   001A40                     u1151:
  5282   001A40  6A06               	clrf	??_I2C_2_Master_Read^0,c
  5283   001A42  2A06               	incf	??_I2C_2_Master_Read^0,f,c
  5284   001A44  EF25  F00D         	goto	u1168
  5285   001A48                     u1150:
  5286   001A48  6A06               	clrf	??_I2C_2_Master_Read^0,c
  5287   001A4A                     u1168:
  5288   001A4A  3A06               	swapf	??_I2C_2_Master_Read^0,f,c
  5289   001A4C  4606               	rlncf	??_I2C_2_Master_Read^0,f,c
  5290   001A4E  010E               	movlb	14	; () banked
  5291   001A50  51DA               	movf	218,w,b	;volatile
  5292   001A52  1806               	xorwf	??_I2C_2_Master_Read^0,w,c
  5293   001A54  0BDF               	andlw	-33
  5294   001A56  1806               	xorwf	??_I2C_2_Master_Read^0,w,c
  5295   001A58  6FDA               	movwf	218,b	;volatile
  5296   001A5A                     
  5297                           ; BSR set to: 14
  5298                           ;../i2c.c: 60:   SSP2CON2bits.ACKEN = 1;
  5299   001A5A  89DA               	bsf	218,4,b	;volatile
  5300   001A5C                     
  5301                           ; BSR set to: 14
  5302                           ;../i2c.c: 61:   return tmp;
  5303   001A5C  5008               	movf	I2C_2_Master_Read@tmp^0,w,c
  5304   001A5E                     
  5305                           ; BSR set to: 14
  5306   001A5E  0012               	return		;funcret
  5307   001A60                     __end_of_I2C_2_Master_Read:
  5308                           	callstack 0
  5309                           
  5310 ;; *************** function _I2C_2_Master_Idle *****************
  5311 ;; Defined at:
  5312 ;;		line 22 in file "../i2c.c"
  5313 ;; Parameters:    Size  Location     Type
  5314 ;;		None
  5315 ;; Auto vars:     Size  Location     Type
  5316 ;;		None
  5317 ;; Return value:  Size  Location     Type
  5318 ;;                  1    wreg      void 
  5319 ;; Registers used:
  5320 ;;		wreg, status,2, status,0
  5321 ;; Tracked objects:
  5322 ;;		On entry : 0/0
  5323 ;;		On exit  : 0/0
  5324 ;;		Unchanged: 0/0
  5325 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5326 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5327 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5328 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5329 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5330 ;;Total ram usage:        1 bytes
  5331 ;; Hardware stack levels used: 1
  5332 ;; Hardware stack levels required when called: 2
  5333 ;; This function calls:
  5334 ;;		Nothing
  5335 ;; This function is called by:
  5336 ;;		_I2C_2_Master_Start
  5337 ;;		_I2C_2_Master_RepStart
  5338 ;;		_I2C_2_Master_Stop
  5339 ;;		_I2C_2_Master_Write
  5340 ;;		_I2C_2_Master_Read
  5341 ;; This function uses a non-reentrant model
  5342 ;;
  5343                           
  5344                           	psect	text32
  5345   001B46                     __ptext32:
  5346                           	callstack 0
  5347   001B46                     _I2C_2_Master_Idle:
  5348                           	callstack 25
  5349   001B46                     l97:
  5350   001B46  010E               	movlb	14	; () banked
  5351   001B48  B5D8               	btfsc	216,2,b	;volatile
  5352   001B4A  EFA9  F00D         	goto	u1111
  5353   001B4E  EFAB  F00D         	goto	u1110
  5354   001B52                     u1111:
  5355   001B52  EFA3  F00D         	goto	l97
  5356   001B56                     u1110:
  5357   001B56                     
  5358                           ; BSR set to: 14
  5359   001B56  CEDA F005          	movff	3802,??_I2C_2_Master_Idle	;volatile
  5360   001B5A  0E1F               	movlw	31
  5361   001B5C  1605               	andwf	??_I2C_2_Master_Idle^0,f,c
  5362   001B5E  A4D8               	btfss	status,2,c
  5363   001B60  EFB4  F00D         	goto	u1121
  5364   001B64  EFB6  F00D         	goto	u1120
  5365   001B68                     u1121:
  5366   001B68  EFA3  F00D         	goto	l97
  5367   001B6C                     u1120:
  5368   001B6C                     
  5369                           ; BSR set to: 14
  5370   001B6C  0012               	return		;funcret
  5371   001B6E                     __end_of_I2C_2_Master_Idle:
  5372                           	callstack 0
  5373                           
  5374 ;; *************** function _buggyLEDs_init *****************
  5375 ;; Defined at:
  5376 ;;		line 113 in file "../dc_motor.c"
  5377 ;; Parameters:    Size  Location     Type
  5378 ;;		None
  5379 ;; Auto vars:     Size  Location     Type
  5380 ;;		None
  5381 ;; Return value:  Size  Location     Type
  5382 ;;                  1    wreg      void 
  5383 ;; Registers used:
  5384 ;;		None
  5385 ;; Tracked objects:
  5386 ;;		On entry : 0/0
  5387 ;;		On exit  : 0/0
  5388 ;;		Unchanged: 0/0
  5389 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5390 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5391 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5392 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5393 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5394 ;;Total ram usage:        0 bytes
  5395 ;; Hardware stack levels used: 1
  5396 ;; Hardware stack levels required when called: 2
  5397 ;; This function calls:
  5398 ;;		Nothing
  5399 ;; This function is called by:
  5400 ;;		_main
  5401 ;; This function uses a non-reentrant model
  5402 ;;
  5403                           
  5404                           	psect	text33
  5405   001C0E                     __ptext33:
  5406                           	callstack 0
  5407   001C0E                     _buggyLEDs_init:
  5408                           	callstack 28
  5409   001C0E                     
  5410                           ;../dc_motor.c: 114:     LATHbits.LATH1 = 0;
  5411   001C0E  9280               	bcf	128,1,c	;volatile
  5412                           
  5413                           ;../dc_motor.c: 115:     LATDbits.LATD3 = 0;
  5414   001C10  967C               	bcf	124,3,c	;volatile
  5415                           
  5416                           ;../dc_motor.c: 116:     LATDbits.LATD4 = 0;
  5417   001C12  987C               	bcf	124,4,c	;volatile
  5418                           
  5419                           ;../dc_motor.c: 117:     LATFbits.LATF0 = 0;
  5420   001C14  907E               	bcf	126,0,c	;volatile
  5421                           
  5422                           ;../dc_motor.c: 118:     LATHbits.LATH0 = 0;
  5423   001C16  9080               	bcf	128,0,c	;volatile
  5424                           
  5425                           ;../dc_motor.c: 120:     TRISHbits.TRISH1 = 0;
  5426   001C18  9288               	bcf	136,1,c	;volatile
  5427                           
  5428                           ;../dc_motor.c: 121:     TRISDbits.TRISD3 = 0;
  5429   001C1A  9684               	bcf	132,3,c	;volatile
  5430                           
  5431                           ;../dc_motor.c: 122:     TRISDbits.TRISD4 = 0;
  5432   001C1C  9884               	bcf	132,4,c	;volatile
  5433                           
  5434                           ;../dc_motor.c: 123:     TRISFbits.TRISF0 = 0;
  5435   001C1E  9086               	bcf	134,0,c	;volatile
  5436                           
  5437                           ;../dc_motor.c: 124:     TRISHbits.TRISH0 = 0;
  5438   001C20  9088               	bcf	136,0,c	;volatile
  5439   001C22  0012               	return		;funcret
  5440   001C24                     __end_of_buggyLEDs_init:
  5441                           	callstack 0
  5442                           
  5443 ;; *************** function _Interrupts_init *****************
  5444 ;; Defined at:
  5445 ;;		line 9 in file "../interrupts.c"
  5446 ;; Parameters:    Size  Location     Type
  5447 ;;		None
  5448 ;; Auto vars:     Size  Location     Type
  5449 ;;		None
  5450 ;; Return value:  Size  Location     Type
  5451 ;;                  1    wreg      void 
  5452 ;; Registers used:
  5453 ;;		None
  5454 ;; Tracked objects:
  5455 ;;		On entry : 0/0
  5456 ;;		On exit  : 0/0
  5457 ;;		Unchanged: 0/0
  5458 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5459 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5460 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5461 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5462 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5463 ;;Total ram usage:        0 bytes
  5464 ;; Hardware stack levels used: 1
  5465 ;; Hardware stack levels required when called: 2
  5466 ;; This function calls:
  5467 ;;		Nothing
  5468 ;; This function is called by:
  5469 ;;		_main
  5470 ;; This function uses a non-reentrant model
  5471 ;;
  5472                           
  5473                           	psect	text34
  5474   001C30                     __ptext34:
  5475                           	callstack 0
  5476   001C30                     _Interrupts_init:
  5477                           	callstack 28
  5478   001C30                     
  5479                           ;../interrupts.c: 15:     INTCONbits.PEIE=1;
  5480   001C30  8CF2               	bsf	242,6,c	;volatile
  5481                           
  5482                           ;../interrupts.c: 16:     PIE4bits.RC4IE=1;
  5483   001C32  010E               	movlb	14	; () banked
  5484   001C34  872D               	bsf	45,3,b	;volatile
  5485                           
  5486                           ;../interrupts.c: 17:     PIE4bits.TX4IE=0;
  5487   001C36  952D               	bcf	45,2,b	;volatile
  5488                           
  5489                           ;../interrupts.c: 18:     INTCONbits.GIE=1;
  5490   001C38  8EF2               	bsf	242,7,c	;volatile
  5491   001C3A                     
  5492                           ; BSR set to: 14
  5493   001C3A  0012               	return		;funcret
  5494   001C3C                     __end_of_Interrupts_init:
  5495                           	callstack 0
  5496                           
  5497 ;; *************** function _HighISR *****************
  5498 ;; Defined at:
  5499 ;;		line 37 in file "../interrupts.c"
  5500 ;; Parameters:    Size  Location     Type
  5501 ;;		None
  5502 ;; Auto vars:     Size  Location     Type
  5503 ;;		None
  5504 ;; Return value:  Size  Location     Type
  5505 ;;                  1    wreg      void 
  5506 ;; Registers used:
  5507 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5508 ;; Tracked objects:
  5509 ;;		On entry : 0/0
  5510 ;;		On exit  : 0/0
  5511 ;;		Unchanged: 0/0
  5512 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5513 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5514 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5515 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5516 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5517 ;;Total ram usage:        2 bytes
  5518 ;; Hardware stack levels used: 1
  5519 ;; Hardware stack levels required when called: 1
  5520 ;; This function calls:
  5521 ;;		_getCharFromTxBuf
  5522 ;;		_isDataInTxBuf
  5523 ;;		_putCharToRxBuf
  5524 ;; This function is called by:
  5525 ;;		Interrupt level 2
  5526 ;; This function uses a non-reentrant model
  5527 ;;
  5528                           
  5529                           	psect	intcode
  5530   000008                     __pintcode:
  5531                           	callstack 0
  5532   000008                     _HighISR:
  5533                           	callstack 23
  5534                           
  5535                           ; BSR set to: 14
  5536                           ;incstack = 0
  5537   000008  8259               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  5538   00000A  CFD9 F003          	movff	fsr2l,??_HighISR
  5539   00000E  CFDA F004          	movff	fsr2h,??_HighISR+1
  5540   000012                     
  5541                           ;../interrupts.c: 39:     if (PIR4bits.RC4IF == 1){
  5542   000012  010E               	movlb	14	; () banked
  5543   000014  A737               	btfss	55,3,b	;volatile
  5544   000016  EF0F  F000         	goto	i2u202_41
  5545   00001A  EF11  F000         	goto	i2u202_40
  5546   00001E                     i2u202_41:
  5547   00001E  EF14  F000         	goto	i2l2698
  5548   000022                     i2u202_40:
  5549   000022                     
  5550                           ; BSR set to: 14
  5551                           ;../interrupts.c: 40:         putCharToRxBuf(RC4REG);
  5552   000022  51E3               	movf	227,w,b	;volatile
  5553   000024  EC8E  F00D         	call	_putCharToRxBuf
  5554   000028                     i2l2698:
  5555                           
  5556                           ;../interrupts.c: 42:     if (PIR4bits.TX4IF == 1 && PIE4bits.TX4IE==1){
  5557   000028  010E               	movlb	14	; () banked
  5558   00002A  A537               	btfss	55,2,b	;volatile
  5559   00002C  EF1A  F000         	goto	i2u203_41
  5560   000030  EF1C  F000         	goto	i2u203_40
  5561   000034                     i2u203_41:
  5562   000034  EF35  F000         	goto	i2l375
  5563   000038                     i2u203_40:
  5564   000038                     
  5565                           ; BSR set to: 14
  5566   000038  A52D               	btfss	45,2,b	;volatile
  5567   00003A  EF21  F000         	goto	i2u204_41
  5568   00003E  EF23  F000         	goto	i2u204_40
  5569   000042                     i2u204_41:
  5570   000042  EF35  F000         	goto	i2l375
  5571   000046                     i2u204_40:
  5572   000046                     
  5573                           ; BSR set to: 14
  5574                           ;../interrupts.c: 43:         if (isDataInTxBuf()==1 ) {TX4REG = getCharFromTxBuf();}
  5575   000046  ECFB  F00D         	call	_isDataInTxBuf	;wreg free
  5576   00004A  06E8               	decf	wreg,f,c
  5577   00004C  A4D8               	btfss	status,2,c
  5578   00004E  EF2B  F000         	goto	i2u205_41
  5579   000052  EF2D  F000         	goto	i2u205_40
  5580   000056                     i2u205_41:
  5581   000056  EF33  F000         	goto	i2l373
  5582   00005A                     i2u205_40:
  5583   00005A  EC63  F00D         	call	_getCharFromTxBuf	;wreg free
  5584   00005E  010E               	movlb	14	; () banked
  5585   000060  6FE4               	movwf	228,b	;volatile
  5586   000062  EF35  F000         	goto	i2l375
  5587   000066                     i2l373:
  5588   000066  010E               	movlb	14	; () banked
  5589   000068  952D               	bcf	45,2,b	;volatile
  5590   00006A                     i2l375:
  5591                           
  5592                           ; BSR set to: 14
  5593   00006A  C004  FFDA         	movff	??_HighISR+1,fsr2h
  5594   00006E  C003  FFD9         	movff	??_HighISR,fsr2l
  5595   000072  9259               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  5596   000074  0011               	retfie		f
  5597   000076                     __end_of_HighISR:
  5598                           	callstack 0
  5599                           
  5600 ;; *************** function _putCharToRxBuf *****************
  5601 ;; Defined at:
  5602 ;;		line 57 in file "../serial.c"
  5603 ;; Parameters:    Size  Location     Type
  5604 ;;  byte            1    wreg     unsigned char 
  5605 ;; Auto vars:     Size  Location     Type
  5606 ;;  byte            1    0[COMRAM] unsigned char 
  5607 ;; Return value:  Size  Location     Type
  5608 ;;                  1    wreg      void 
  5609 ;; Registers used:
  5610 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5611 ;; Tracked objects:
  5612 ;;		On entry : 0/0
  5613 ;;		On exit  : 0/0
  5614 ;;		Unchanged: 0/0
  5615 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5616 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5617 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5618 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5619 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5620 ;;Total ram usage:        1 bytes
  5621 ;; Hardware stack levels used: 1
  5622 ;; This function calls:
  5623 ;;		Nothing
  5624 ;; This function is called by:
  5625 ;;		_HighISR
  5626 ;; This function uses a non-reentrant model
  5627 ;;
  5628                           
  5629                           	psect	text36
  5630   001B1C                     __ptext36:
  5631                           	callstack 0
  5632   001B1C                     _putCharToRxBuf:
  5633                           	callstack 23
  5634                           
  5635                           ; BSR set to: 14
  5636                           ;incstack = 0
  5637                           ;putCharToRxBuf@byte stored from wreg
  5638   001B1C  6E01               	movwf	putCharToRxBuf@byte^0,c
  5639   001B1E                     
  5640                           ;../serial.c: 58:     if (RxBufWriteCnt>=20) {RxBufWriteCnt=0;}
  5641   001B1E  0E13               	movlw	19
  5642   001B20  643B               	cpfsgt	_RxBufWriteCnt^0,c	;volatile
  5643   001B22  EF95  F00D         	goto	i2u199_41
  5644   001B26  EF97  F00D         	goto	i2u199_40
  5645   001B2A                     i2u199_41:
  5646   001B2A  EF99  F00D         	goto	i2l2644
  5647   001B2E                     i2u199_40:
  5648   001B2E  0E00               	movlw	0
  5649   001B30  6E3B               	movwf	_RxBufWriteCnt^0,c	;volatile
  5650   001B32                     i2l2644:
  5651                           
  5652                           ;../serial.c: 59:     EUSART4RXbuf[RxBufWriteCnt++]=byte;
  5653   001B32  0E9C               	movlw	low _EUSART4RXbuf
  5654   001B34  243B               	addwf	_RxBufWriteCnt^0,w,c	;volatile
  5655   001B36  6ED9               	movwf	fsr2l,c
  5656   001B38  6ADA               	clrf	fsr2h,c
  5657   001B3A  0E00               	movlw	high _EUSART4RXbuf
  5658   001B3C  22DA               	addwfc	fsr2h,f,c
  5659   001B3E  C001  FFDF         	movff	putCharToRxBuf@byte,indf2
  5660   001B42  2A3B               	incf	_RxBufWriteCnt^0,f,c	;volatile
  5661   001B44  0012               	return		;funcret
  5662   001B46                     __end_of_putCharToRxBuf:
  5663                           	callstack 0
  5664                           
  5665 ;; *************** function _isDataInTxBuf *****************
  5666 ;; Defined at:
  5667 ;;		line 85 in file "../serial.c"
  5668 ;; Parameters:    Size  Location     Type
  5669 ;;		None
  5670 ;; Auto vars:     Size  Location     Type
  5671 ;;		None
  5672 ;; Return value:  Size  Location     Type
  5673 ;;                  1    wreg      unsigned char 
  5674 ;; Registers used:
  5675 ;;		wreg, status,2, status,0
  5676 ;; Tracked objects:
  5677 ;;		On entry : 0/0
  5678 ;;		On exit  : 0/0
  5679 ;;		Unchanged: 0/0
  5680 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5681 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5682 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5683 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5684 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5685 ;;Total ram usage:        0 bytes
  5686 ;; Hardware stack levels used: 1
  5687 ;; This function calls:
  5688 ;;		Nothing
  5689 ;; This function is called by:
  5690 ;;		_HighISR
  5691 ;;		_sendTxBuf
  5692 ;; This function uses a non-reentrant model
  5693 ;;
  5694                           
  5695                           	psect	text37
  5696   001BF6                     __ptext37:
  5697                           	callstack 0
  5698   001BF6                     _isDataInTxBuf:
  5699                           	callstack 23
  5700   001BF6                     
  5701                           ;../serial.c: 86:     return (TxBufWriteCnt!=TxBufReadCnt);
  5702   001BF6  5038               	movf	_TxBufReadCnt^0,w,c	;volatile
  5703   001BF8  1839               	xorwf	_TxBufWriteCnt^0,w,c	;volatile
  5704   001BFA  A4D8               	btfss	status,2,c
  5705   001BFC  EF02  F00E         	goto	i2u93_41
  5706   001C00  EF05  F00E         	goto	i2u93_40
  5707   001C04                     i2u93_41:
  5708   001C04  0E01               	movlw	1
  5709   001C06  EF06  F00E         	goto	i2u94_40
  5710   001C0A                     i2u93_40:
  5711   001C0A  0E00               	movlw	0
  5712   001C0C                     i2u94_40:
  5713   001C0C  0012               	return		;funcret
  5714   001C0E                     __end_of_isDataInTxBuf:
  5715                           	callstack 0
  5716                           
  5717 ;; *************** function _getCharFromTxBuf *****************
  5718 ;; Defined at:
  5719 ;;		line 71 in file "../serial.c"
  5720 ;; Parameters:    Size  Location     Type
  5721 ;;		None
  5722 ;; Auto vars:     Size  Location     Type
  5723 ;;		None
  5724 ;; Return value:  Size  Location     Type
  5725 ;;                  1    wreg      unsigned char 
  5726 ;; Registers used:
  5727 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5728 ;; Tracked objects:
  5729 ;;		On entry : 0/0
  5730 ;;		On exit  : 0/0
  5731 ;;		Unchanged: 0/0
  5732 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5733 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5734 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5735 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5736 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5737 ;;Total ram usage:        2 bytes
  5738 ;; Hardware stack levels used: 1
  5739 ;; This function calls:
  5740 ;;		Nothing
  5741 ;; This function is called by:
  5742 ;;		_HighISR
  5743 ;; This function uses a non-reentrant model
  5744 ;;
  5745                           
  5746                           	psect	text38
  5747   001AC6                     __ptext38:
  5748                           	callstack 0
  5749   001AC6                     _getCharFromTxBuf:
  5750                           	callstack 23
  5751   001AC6                     
  5752                           ;../serial.c: 72:     if (TxBufReadCnt>=60) {TxBufReadCnt=0;}
  5753   001AC6  0E3B               	movlw	59
  5754   001AC8  6438               	cpfsgt	_TxBufReadCnt^0,c	;volatile
  5755   001ACA  EF69  F00D         	goto	i2u200_41
  5756   001ACE  EF6B  F00D         	goto	i2u200_40
  5757   001AD2                     i2u200_41:
  5758   001AD2  EF6D  F00D         	goto	i2l2652
  5759   001AD6                     i2u200_40:
  5760   001AD6  0E00               	movlw	0
  5761   001AD8  6E38               	movwf	_TxBufReadCnt^0,c	;volatile
  5762   001ADA                     i2l2652:
  5763                           
  5764                           ;../serial.c: 73:     return EUSART4TXbuf[TxBufReadCnt++];
  5765   001ADA  2A38               	incf	_TxBufReadCnt^0,f,c	;volatile
  5766   001ADC  0438               	decf	_TxBufReadCnt^0,w,c	;volatile
  5767   001ADE  6E01               	movwf	??_getCharFromTxBuf^0,c
  5768   001AE0  6A02               	clrf	(??_getCharFromTxBuf+1)^0,c
  5769   001AE2  0E60               	movlw	low _EUSART4TXbuf
  5770   001AE4  2401               	addwf	??_getCharFromTxBuf^0,w,c
  5771   001AE6  6ED9               	movwf	fsr2l,c
  5772   001AE8  0E00               	movlw	high _EUSART4TXbuf
  5773   001AEA  2002               	addwfc	(??_getCharFromTxBuf+1)^0,w,c
  5774   001AEC  6EDA               	movwf	fsr2h,c
  5775   001AEE  50DF               	movf	indf2,w,c
  5776   001AF0  0012               	return		;funcret
  5777   001AF2                     __end_of_getCharFromTxBuf:
  5778                           	callstack 0
  5779   000000                     
  5780                           	psect	rparam
  5781   000000                     
  5782                           	psect	temp
  5783   000059                     btemp:
  5784                           	callstack 0
  5785   000059                     	ds	1
  5786   000000                     int$flags	set	btemp
  5787   000000                     wtemp8	set	btemp+1
  5788   000000                     ttemp5	set	btemp+1
  5789   000000                     ttemp6	set	btemp+4
  5790   000000                     ttemp7	set	btemp+8
  5791                           
  5792                           	psect	idloc
  5793                           
  5794                           ;Config register IDLOC0 @ 0x200000
  5795                           ;	unspecified, using default values
  5796   200000                     	org	2097152
  5797   200000  0FFF               	dw	4095
  5798                           
  5799                           ;Config register IDLOC1 @ 0x200002
  5800                           ;	unspecified, using default values
  5801   200002                     	org	2097154
  5802   200002  0FFF               	dw	4095
  5803                           
  5804                           ;Config register IDLOC2 @ 0x200004
  5805                           ;	unspecified, using default values
  5806   200004                     	org	2097156
  5807   200004  0FFF               	dw	4095
  5808                           
  5809                           ;Config register IDLOC3 @ 0x200006
  5810                           ;	unspecified, using default values
  5811   200006                     	org	2097158
  5812   200006  0FFF               	dw	4095
  5813                           
  5814                           ;Config register IDLOC4 @ 0x200008
  5815                           ;	unspecified, using default values
  5816   200008                     	org	2097160
  5817   200008  0FFF               	dw	4095
  5818                           
  5819                           ;Config register IDLOC5 @ 0x20000A
  5820                           ;	unspecified, using default values
  5821   20000A                     	org	2097162
  5822   20000A  0FFF               	dw	4095
  5823                           
  5824                           ;Config register IDLOC6 @ 0x20000C
  5825                           ;	unspecified, using default values
  5826   20000C                     	org	2097164
  5827   20000C  0FFF               	dw	4095
  5828                           
  5829                           ;Config register IDLOC7 @ 0x20000E
  5830                           ;	unspecified, using default values
  5831   20000E                     	org	2097166
  5832   20000E  0FFF               	dw	4095
  5833                           
  5834                           	psect	config
  5835                           
  5836                           ;Config register CONFIG1L @ 0x300000
  5837                           ;	External Oscillator mode Selection bits
  5838                           ;	FEXTOSC = HS, HS (crystal oscillator) above 8 MHz; PFM set to high power
  5839                           ;	Power-up default value for COSC bits
  5840                           ;	RSTOSC = EXTOSC_4PLL, EXTOSC with 4x PLL, with EXTOSC operating per FEXTOSC bits
  5841   300000                     	org	3145728
  5842   300000  AA                 	db	170
  5843                           
  5844                           ;Config register CONFIG1H @ 0x300001
  5845                           ;	unspecified, using default values
  5846                           ;	Clock Out Enable bit
  5847                           ;	CLKOUTEN = 0x1, unprogrammed default
  5848                           ;	Clock Switch Enable bit
  5849                           ;	CSWEN = 0x1, unprogrammed default
  5850                           ;	Fail-Safe Clock Monitor Enable bit
  5851                           ;	FCMEN = 0x1, unprogrammed default
  5852   300001                     	org	3145729
  5853   300001  FF                 	db	255
  5854                           
  5855                           ;Config register CONFIG2L @ 0x300002
  5856                           ;	unspecified, using default values
  5857                           ;	Master Clear Enable bit
  5858                           ;	MCLRE = 0x1, unprogrammed default
  5859                           ;	Power-up Timer Enable bit
  5860                           ;	PWRTE = 0x1, unprogrammed default
  5861                           ;	Low-power BOR enable bit
  5862                           ;	LPBOREN = 0x1, unprogrammed default
  5863                           ;	Brown-out Reset Enable bits
  5864                           ;	BOREN = 0x3, unprogrammed default
  5865   300002                     	org	3145730
  5866   300002  FF                 	db	255
  5867                           
  5868                           ;Config register CONFIG2H @ 0x300003
  5869                           ;	unspecified, using default values
  5870                           ;	Brown Out Reset Voltage selection bits
  5871                           ;	BORV = 0x3, unprogrammed default
  5872                           ;	ZCD Disable bit
  5873                           ;	ZCD = 0x1, unprogrammed default
  5874                           ;	PPSLOCK bit One-Way Set Enable bit
  5875                           ;	PPS1WAY = 0x1, unprogrammed default
  5876                           ;	Stack Full/Underflow Reset Enable bit
  5877                           ;	STVREN = 0x1, unprogrammed default
  5878                           ;	Debugger Enable bit
  5879                           ;	DEBUG = 0x1, unprogrammed default
  5880                           ;	Extended Instruction Set Enable bit
  5881                           ;	XINST = 0x1, unprogrammed default
  5882   300003                     	org	3145731
  5883   300003  FF                 	db	255
  5884                           
  5885                           ;Config register CONFIG3L @ 0x300004
  5886                           ;	WDT Period Select bits
  5887                           ;	WDTCPS = WDTCPS_31, Divider ratio 1:65536; software control of WDTPS
  5888                           ;	WDT operating mode
  5889                           ;	WDTE = OFF, WDT Disabled
  5890   300004                     	org	3145732
  5891   300004  9F                 	db	159
  5892                           
  5893                           ;Config register CONFIG3H @ 0x300005
  5894                           ;	unspecified, using default values
  5895                           ;	WDT Window Select bits
  5896                           ;	WDTCWS = 0x7, unprogrammed default
  5897                           ;	WDT input clock selector
  5898                           ;	WDTCCS = 0x7, unprogrammed default
  5899   300005                     	org	3145733
  5900   300005  FF                 	db	255
  5901                           
  5902                           ;Config register CONFIG4L @ 0x300006
  5903                           ;	unspecified, using default values
  5904                           ;	Write Protection Block 0
  5905                           ;	WRT0 = 0x1, unprogrammed default
  5906                           ;	Write Protection Block 1
  5907                           ;	WRT1 = 0x1, unprogrammed default
  5908                           ;	Write Protection Block 2
  5909                           ;	WRT2 = 0x1, unprogrammed default
  5910                           ;	Write Protection Block 3
  5911                           ;	WRT3 = 0x1, unprogrammed default
  5912                           ;	Write Protection Block 3
  5913                           ;	WRT4 = 0x1, unprogrammed default
  5914                           ;	Write Protection Block 3
  5915                           ;	WRT5 = 0x1, unprogrammed default
  5916                           ;	Write Protection Block 3
  5917                           ;	WRT6 = 0x1, unprogrammed default
  5918                           ;	Write Protection Block 3
  5919                           ;	WRT7 = 0x1, unprogrammed default
  5920   300006                     	org	3145734
  5921   300006  FF                 	db	255
  5922                           
  5923                           ;Config register CONFIG4H @ 0x300007
  5924                           ;	unspecified, using default values
  5925                           ;	Configuration Register Write Protection bit
  5926                           ;	WRTC = 0x1, unprogrammed default
  5927                           ;	Boot Block Write Protection bit
  5928                           ;	WRTB = 0x1, unprogrammed default
  5929                           ;	Data EEPROM Write Protection bit
  5930                           ;	WRTD = 0x1, unprogrammed default
  5931                           ;	Scanner Enable bit
  5932                           ;	SCANE = 0x1, unprogrammed default
  5933                           ;	Low Voltage Programming Enable bit
  5934                           ;	LVP = 0x1, unprogrammed default
  5935   300007                     	org	3145735
  5936   300007  FF                 	db	255
  5937                           
  5938                           ;Config register CONFIG5L @ 0x300008
  5939                           ;	unspecified, using default values
  5940                           ;	UserNVM Program Memory Code Protection bit
  5941                           ;	CP = 0x1, unprogrammed default
  5942                           ;	DataNVM Memory Code Protection bit
  5943                           ;	CPD = 0x1, unprogrammed default
  5944   300008                     	org	3145736
  5945   300008  FF                 	db	255
  5946                           
  5947                           ;Config register CONFIG5H @ 0x300009
  5948                           ;	unspecified, using default values
  5949   300009                     	org	3145737
  5950   300009  FF                 	db	255
  5951                           
  5952                           ;Config register CONFIG6L @ 0x30000A
  5953                           ;	unspecified, using default values
  5954                           ;	Table Read Protection Block 0
  5955                           ;	EBTR0 = 0x1, unprogrammed default
  5956                           ;	Table Read Protection Block 1
  5957                           ;	EBTR1 = 0x1, unprogrammed default
  5958                           ;	Table Read Protection Block 2
  5959                           ;	EBTR2 = 0x1, unprogrammed default
  5960                           ;	Table Read Protection Block 3
  5961                           ;	EBTR3 = 0x1, unprogrammed default
  5962                           ;	Table Read Protection Block 4
  5963                           ;	EBTR4 = 0x1, unprogrammed default
  5964                           ;	Table Read Protection Block 5
  5965                           ;	EBTR5 = 0x1, unprogrammed default
  5966                           ;	Table Read Protection Block 6
  5967                           ;	EBTR6 = 0x1, unprogrammed default
  5968                           ;	Table Read Protection Block 7
  5969                           ;	EBTR7 = 0x1, unprogrammed default
  5970   30000A                     	org	3145738
  5971   30000A  FF                 	db	255
  5972                           
  5973                           ;Config register CONFIG6H @ 0x30000B
  5974                           ;	unspecified, using default values
  5975                           ;	Boot Block Table Read Protection bit
  5976                           ;	EBTRB = 0x1, unprogrammed default
  5977   30000B                     	org	3145739
  5978   30000B  FF                 	db	255
  5979                           tosu	equ	0xFFF
  5980                           tosh	equ	0xFFE
  5981                           tosl	equ	0xFFD
  5982                           stkptr	equ	0xFFC
  5983                           pclatu	equ	0xFFB
  5984                           pclath	equ	0xFFA
  5985                           pcl	equ	0xFF9
  5986                           tblptru	equ	0xFF8
  5987                           tblptrh	equ	0xFF7
  5988                           tblptrl	equ	0xFF6
  5989                           tablat	equ	0xFF5
  5990                           prodh	equ	0xFF4
  5991                           prodl	equ	0xFF3
  5992                           indf0	equ	0xFEF
  5993                           postinc0	equ	0xFEE
  5994                           postdec0	equ	0xFED
  5995                           preinc0	equ	0xFEC
  5996                           plusw0	equ	0xFEB
  5997                           fsr0h	equ	0xFEA
  5998                           fsr0l	equ	0xFE9
  5999                           wreg	equ	0xFE8
  6000                           indf1	equ	0xFE7
  6001                           postinc1	equ	0xFE6
  6002                           postdec1	equ	0xFE5
  6003                           preinc1	equ	0xFE4
  6004                           plusw1	equ	0xFE3
  6005                           fsr1h	equ	0xFE2
  6006                           fsr1l	equ	0xFE1
  6007                           bsr	equ	0xFE0
  6008                           indf2	equ	0xFDF
  6009                           postinc2	equ	0xFDE
  6010                           postdec2	equ	0xFDD
  6011                           preinc2	equ	0xFDC
  6012                           plusw2	equ	0xFDB
  6013                           fsr2h	equ	0xFDA
  6014                           fsr2l	equ	0xFD9
  6015                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         122
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     55      88
    BANK0           160      6      95
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          234      0       0

Pointer List with Targets:

    buggy_color_response@c	PTR struct colors size(2) Largest target is 20
		 -> color(COMRAM[20]), 

    motor_init@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> motorR(BANK0[9]), 

    motor_init@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> motorL(COMRAM[9]), 

    colourcards_normaliseRGBC@c	PTR struct colors size(2) Largest target is 20
		 -> color(COMRAM[20]), 

    READcolor@c	PTR struct colors size(2) Largest target is 20
		 -> color(COMRAM[20]), 

    instructions@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> motorR(BANK0[9]), 

    instructions@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> motorL(COMRAM[9]), 

    space@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhllllll[1]), CCPR2H(BITBIGSFRhhhlll[1]), 

    space@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhllllll[1]), CCPR1H(BITBIGSFRhhhlll[1]), 

    space@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhllllll[1]), CCPR2H(BITBIGSFRhhhlll[1]), 

    space@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhllllll[1]), CCPR1H(BITBIGSFRhhhlll[1]), 

    space@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> motorR(BANK0[9]), 

    space@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> motorL(COMRAM[9]), 

    right_45@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhllllll[1]), CCPR2H(BITBIGSFRhhhlll[1]), 

    right_45@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhllllll[1]), CCPR1H(BITBIGSFRhhhlll[1]), 

    right_45@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> motorR(BANK0[9]), 

    right_45@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhllllll[1]), CCPR2H(BITBIGSFRhhhlll[1]), 

    right_45@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhllllll[1]), CCPR1H(BITBIGSFRhhhlll[1]), 

    right_45@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> motorL(COMRAM[9]), 

    left_45@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhllllll[1]), CCPR2H(BITBIGSFRhhhlll[1]), 

    left_45@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhllllll[1]), CCPR1H(BITBIGSFRhhhlll[1]), 

    left_45@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhllllll[1]), CCPR2H(BITBIGSFRhhhlll[1]), 

    left_45@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhllllll[1]), CCPR1H(BITBIGSFRhhhlll[1]), 

    left_45@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> motorR(BANK0[9]), 

    left_45@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> motorL(COMRAM[9]), 

    stop@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhllllll[1]), CCPR2H(BITBIGSFRhhhlll[1]), 

    stop@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhllllll[1]), CCPR1H(BITBIGSFRhhhlll[1]), 

    stop@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> motorR(BANK0[9]), 

    stop@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhllllll[1]), CCPR2H(BITBIGSFRhhhlll[1]), 

    stop@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhllllll[1]), CCPR1H(BITBIGSFRhhhlll[1]), 

    stop@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> motorL(COMRAM[9]), 

    reverse@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhllllll[1]), CCPR2H(BITBIGSFRhhhlll[1]), 

    reverse@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhllllll[1]), CCPR1H(BITBIGSFRhhhlll[1]), 

    reverse@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhllllll[1]), CCPR2H(BITBIGSFRhhhlll[1]), 

    reverse@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhllllll[1]), CCPR1H(BITBIGSFRhhhlll[1]), 

    reverse@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> motorR(BANK0[9]), 

    reverse@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> motorL(COMRAM[9]), 

    forward@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhllllll[1]), CCPR2H(BITBIGSFRhhhlll[1]), 

    forward@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhllllll[1]), CCPR1H(BITBIGSFRhhhlll[1]), 

    forward@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhllllll[1]), CCPR2H(BITBIGSFRhhhlll[1]), 

    forward@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhllllll[1]), CCPR1H(BITBIGSFRhhhlll[1]), 

    forward@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> motorR(BANK0[9]), 

    forward@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> motorL(COMRAM[9]), 

    setMotorPWM@m.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhllllll[1]), CCPR2H(BITBIGSFRhhhlll[1]), 

    setMotorPWM@m.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhllllll[1]), CCPR1H(BITBIGSFRhhhlll[1]), 

    setMotorPWM@m	PTR struct DC_motor size(2) Largest target is 11
		 -> motorR(BANK0[9]), motorL(COMRAM[9]), 

    buggy_color_response@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> motorR(BANK0[9]), 

    buggy_color_response@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> motorL(COMRAM[9]), 

    motorR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhllllll[1]), CCPR2H(BITBIGSFRhhhlll[1]), 

    motorR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhllllll[1]), CCPR1H(BITBIGSFRhhhlll[1]), 

    S24DC_motor$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhllllll[1]), CCPR2H(BITBIGSFRhhhlll[1]), 

    motorL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhllllll[1]), CCPR2H(BITBIGSFRhhhlll[1]), 

    S24DC_motor$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhllllll[1]), CCPR1H(BITBIGSFRhhhlll[1]), 

    motorL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhllllll[1]), CCPR1H(BITBIGSFRhhhlll[1]), 


Critical Paths under _main in COMRAM

    _main->_buggy_color_response
    _color_click_init->_color_writetoaddr
    _color_writetoaddr->_I2C_2_Master_Write
    _buggy_color_response->_colourcards_normaliseRGBC
    _instructions->_left_45
    _instructions->_right_45
    _space->_stop
    _right_45->_stop
    _reverse->_stop
    _left_45->_stop
    _forward->_stop
    _stop->_setMotorPWM
    _setMotorPWM->___lwdiv
    ___lwdiv->___wmul
    _colourcards_normaliseRGBC->___fldiv
    ___fldiv->___xxtofl
    _READcolor->_color_read_Blue
    _READcolor->_color_read_Clear
    _READcolor->_color_read_Green
    _READcolor->_color_read_Red
    _color_read_Red->_I2C_2_Master_Read
    _color_read_Green->_I2C_2_Master_Read
    _color_read_Clear->_I2C_2_Master_Read
    _color_read_Blue->_I2C_2_Master_Read
    _I2C_2_Master_Write->_I2C_2_Master_Idle
    _I2C_2_Master_Stop->_I2C_2_Master_Idle
    _I2C_2_Master_Start->_I2C_2_Master_Idle
    _I2C_2_Master_RepStart->_I2C_2_Master_Idle
    _I2C_2_Master_Read->_I2C_2_Master_Idle

Critical Paths under _HighISR in COMRAM

    _HighISR->_getCharFromTxBuf

Critical Paths under _main in BANK0

    _main->_buggy_color_response

Critical Paths under _HighISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _HighISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _HighISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _HighISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _HighISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _HighISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _HighISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _HighISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _HighISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _HighISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _HighISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _HighISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _HighISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _HighISR in BANK13

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   66845
                  _I2C_2_Master_Init
                    _Interrupts_init
                     _buggyLEDs_init
               _buggy_color_response
                   _color_click_init
                    _initDCmotorsPWM
                         _initUSART4
                         _motor_init
 ---------------------------------------------------------------------------------
 (1) _motor_init                                           4     0      4     152
                                              4 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (1) _initUSART4                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initDCmotorsPWM                                      2     0      2      98
                                              4 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _color_click_init                                     1     1      0     294
                                              8 COMRAM     1     1      0
                  _I2C_2_Master_Init
                  _color_writetoaddr
 ---------------------------------------------------------------------------------
 (2) _color_writetoaddr                                    2     1      1     294
                                              6 COMRAM     2     1      1
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Init                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _buggy_color_response                                 8     2      6   66301
                                             53 COMRAM     2     2      0
                                              0 BANK0      6     0      6
                          _READcolor
                             ___flge
          _colourcards_normaliseRGBC
                            _forward
                       _instructions
                               _stop
 ---------------------------------------------------------------------------------
 (2) _instructions                                         8     2      6   44559
                                             39 COMRAM     8     2      6
                            _left_45
                            _reverse
                           _right_45
                              _space
                               _stop
 ---------------------------------------------------------------------------------
 (3) _space                                                6     2      4    8706
                                             29 COMRAM     6     2      4
                        _setMotorPWM
                               _stop
 ---------------------------------------------------------------------------------
 (3) _right_45                                            10     4      6    9468
                                             29 COMRAM    10     4      6
                        _setMotorPWM
                               _stop
 ---------------------------------------------------------------------------------
 (3) _reverse                                              5     1      4    8814
                                             29 COMRAM     5     1      4
                        _setMotorPWM
                               _stop
 ---------------------------------------------------------------------------------
 (3) _left_45                                             10     4      6    9284
                                             29 COMRAM    10     4      6
                        _setMotorPWM
                               _stop
 ---------------------------------------------------------------------------------
 (2) _forward                                              5     1      4    8662
                                             29 COMRAM     5     1      4
                        _setMotorPWM
                               _stop
 ---------------------------------------------------------------------------------
 (2) _stop                                                 6     2      4    5657
                                             23 COMRAM     6     2      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (3) _setMotorPWM                                          6     4      2    2589
                                             17 COMRAM     6     4      2
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     355
                                              4 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              7     3      4     358
                                             10 COMRAM     7     3      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) _colourcards_normaliseRGBC                           10     8      2    2769
                                             43 COMRAM    10     8      2
                            ___fldiv
                           ___xxtofl
 ---------------------------------------------------------------------------------
 (3) ___xxtofl                                            14    10      4     778
                                              4 COMRAM    14    10      4
 ---------------------------------------------------------------------------------
 (3) ___fldiv                                             25    17      8    1703
                                             18 COMRAM    25    17      8
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (2) ___flge                                              12     4      8    3222
                                              4 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (2) _READcolor                                            2     0      2     604
                                             15 COMRAM     2     0      2
                    _color_read_Blue
                   _color_read_Clear
                   _color_read_Green
                     _color_read_Red
 ---------------------------------------------------------------------------------
 (3) _color_read_Red                                       7     5      2     113
                                              8 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (3) _color_read_Green                                     7     5      2     113
                                              8 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (3) _color_read_Clear                                     7     5      2     113
                                              8 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (3) _color_read_Blue                                      7     5      2     113
                                              8 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Write                                   1     1      0      22
                                              5 COMRAM     1     1      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Stop                                    0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Start                                   0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (4) _I2C_2_Master_RepStart                                0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (4) _I2C_2_Master_Read                                    3     3      0      45
                                              5 COMRAM     3     3      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (4) _I2C_2_Master_Idle                                    1     1      0       0
                                              4 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _buggyLEDs_init                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Interrupts_init                                      0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _HighISR                                              2     2      0      22
                                              2 COMRAM     2     2      0
                   _getCharFromTxBuf
                      _isDataInTxBuf
                     _putCharToRxBuf
 ---------------------------------------------------------------------------------
 (8) _putCharToRxBuf                                       1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (8) _isDataInTxBuf                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _getCharFromTxBuf                                     2     2      0       0
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_2_Master_Init
   _Interrupts_init
   _buggyLEDs_init
   _buggy_color_response
     _READcolor
       _color_read_Blue
         _I2C_2_Master_Read
           _I2C_2_Master_Idle
         _I2C_2_Master_RepStart
           _I2C_2_Master_Idle
         _I2C_2_Master_Start
           _I2C_2_Master_Idle
         _I2C_2_Master_Stop
           _I2C_2_Master_Idle
         _I2C_2_Master_Write
           _I2C_2_Master_Idle
       _color_read_Clear
         _I2C_2_Master_Read
         _I2C_2_Master_RepStart
         _I2C_2_Master_Start
         _I2C_2_Master_Stop
         _I2C_2_Master_Write
       _color_read_Green
         _I2C_2_Master_Read
         _I2C_2_Master_RepStart
         _I2C_2_Master_Start
         _I2C_2_Master_Stop
         _I2C_2_Master_Write
       _color_read_Red
         _I2C_2_Master_Read
         _I2C_2_Master_RepStart
         _I2C_2_Master_Start
         _I2C_2_Master_Stop
         _I2C_2_Master_Write
     ___flge
     _colourcards_normaliseRGBC
       ___fldiv
         ___xxtofl (ARG)
       ___xxtofl
     _forward
       _setMotorPWM
         ___lwdiv
           ___wmul (ARG)
         ___wmul
       _stop
         _setMotorPWM
     _instructions
       _left_45
         _setMotorPWM
         _stop
       _reverse
         _setMotorPWM
         _stop
       _right_45
         _setMotorPWM
         _stop
       _space
         _setMotorPWM
         _stop
       _stop
     _stop
   _color_click_init
     _I2C_2_Master_Init
     _color_writetoaddr
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
   _initDCmotorsPWM
   _initUSART4
   _motor_init

 _HighISR (ROOT)
   _getCharFromTxBuf
   _isDataInTxBuf
   _putCharToRxBuf

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             DE9      0       0      63        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK13           EA      0       0      30        0.0%
BANK13              EA      0       0      31        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      6      5F       5       59.4%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     37      58       1       93.6%
BITBIGSFRhlllll     37      0       0      45        0.0%
BITBIGSFRhhhhl      32      0       0      33        0.0%
BITBIGSFRhlllhl     31      0       0      43        0.0%
BITBIGSFRlllhll     2A      0       0      57        0.0%
BITBIGSFRlllll      26      0       0      61        0.0%
BITBIGSFRllhh       20      0       0      48        0.0%
BITBIGSFRhhhlll     1D      0       0      37        0.0%
BITBIGSFRhlllhl     14      0       0      40        0.0%
BITBIGSFRlllhhh     14      0       0      50        0.0%
BITBIGSFRlllhhh     11      0       0      52        0.0%
BITBIGSFRlllhll      F      0       0      59        0.0%
BITBIGSFRhhhlhh      E      0       0      34        0.0%
BITBIGSFRhhhhh       D      0       0      32        0.0%
BITBIGSFRllhl        C      0       0      49        0.0%
BITBIGSFRlllhll      9      0       0      58        0.0%
BITBIGSFRlllhhh      9      0       0      51        0.0%
BITBIGSFRhlllll      8      0       0      46        0.0%
BITBIGSFRllllh       6      0       0      60        0.0%
BITBIGSFRlllhll      6      0       0      56        0.0%
BITBIGSFRhlllhl      6      0       0      42        0.0%
BITBIGSFRlllhlh      5      0       0      55        0.0%
BITBIGSFRhlllhl      3      0       0      41        0.0%
BITBIGSFRlllhhl      3      0       0      54        0.0%
BITBIGSFRhllllh      2      0       0      44        0.0%
BITBIGSFRhhhllh      2      0       0      36        0.0%
BITBIGSFRhlllhh      1      0       0      39        0.0%
BITBIGSFRhhhlhl      1      0       0      35        0.0%
BITBIGSFRlllhhh      1      0       0      53        0.0%
BITBIGSFRhlhh        1      0       0      38        0.0%
BITBIGSFRlh          1      0       0      47        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      B7      62        0.0%
DATA                 0      0      B7       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.40 build 20220703182018 
Symbol Table                                                                                   Fri Mar 10 04:12:18 2023

                   _color_read_Red 1892                       ___fldiv@aexp 002B  
                     ___fldiv@bexp 002A                       ___fldiv@sign 0023  
                  _color_read_Blue 1982                                 l33 1A92  
                               l42 19D0                                 l51 1AC4  
                               l36 1BF4                                 l45 1930  
                               l39 18E0                                 l48 1980  
                               l64 05BA                                 l67 12F0  
                               l94 1B1A                                 l97 1B46  
              ___wmul@multiplicand 0007                   _color_read_Clear 1932  
                 _color_read_Green 18E2                  ??_Interrupts_init 0005  
                              l100 1B6C                                l103 1C4E  
                              l112 1C2E                                l106 1C58  
                              l115 1A5E                                l204 166E  
                              l212 15B0                                l109 1C44  
                              l205 1670                                l213 15B2  
                              l240 11C6                                l218 1720  
                              l229 1098                                l414 1BD4  
                              l191 0F58                                l248 14F4  
                              l184 17B0                                l258 0C38  
                              l194 1A1C                                l197 1C22  
                              l366 1C3A                                l467 1B92  
                              l732 13AE                                l737 13F4  
                              l965 1824                                l958 181C  
                              wreg 000FE8                               l2000 0F18  
                             l2002 1C46                               l2010 1C3C  
                             l1122 0C90                               l1051 07B4  
                             l2020 1A24                               l2004 1C4A  
                             l2012 1C40                               l1060 07FA  
                             l2100 1578                               l1125 0DEC  
                             l2022 1A2C                               l2014 1C50  
                             l2006 1C26                               l1062 0872  
                             l1054 0778                               l2110 0F7E  
                             l2102 1580                               l1063 0860  
                             l2024 1A34                               l2016 1C54  
                             l2008 1C2A                               l1136 0D84  
                             l2032 1672                               l2120 0FC0  
                             l2112 0F8E                               l2104 1598  
                             l2200 1498                               l1049 0954  
                             l1129 0D28                               l2026 1A5A  
                             l2018 1A20                               l2210 05BC  
                             l2050 16D4                               l2042 169C  
                             l2034 1692                               l2130 1004  
                             l2122 0FD8                               l2114 0F90  
                             l2106 0F5A                               l2202 14B0  
                             l2028 1A5C                               l2300 07EA  
                             l2220 05F8                               l2212 05C8  
                             l2060 171E                               l2052 16E0  
                             l2044 16B4                               l2036 1694  
                             l2140 1074                               l2132 101C  
                             l2124 0FE4                               l2116 0F9C  
                             l2108 0F6E                               l2204 14C6  
                             l2070 19C8                               l2062 1892  
                             l2310 082A                               l2302 07F8  
                             l2230 0628                               l2222 0608  
                             l2214 05D6                               l2054 16EE  
                             l2046 16C0                               l2142 1076  
                             l2134 1034                               l2126 0FF0  
                             l2118 0FB4                               l2150 10BC  
                             l2206 14DA                               l2080 1932  
                             l2064 18D8                               l2320 089C  
                             l2312 0858                               l2304 080A  
                             l2240 065E                               l2232 062E  
                             l2224 060A                               l2216 05D8  
                             l2056 1706                               l2048 16CC  
                             l2136 104A                               l2128 0FFC  
                             l2144 107A                               l2160 1110  
                             l2152 10C8                               l2208 14F2  
                             l2400 1B04                               l2082 1978  
                             l2074 18E2                               l2330 0914  
                             l2322 08C6                               l2306 0818  
                             l2250 069E                               l2242 066E  
                             l2234 063C                               l2218 05E8  
                             l2226 0612                               l2410 11C8  
                             l2058 1712                               l2138 105E  
                             l2090 151A                               l2170 1160  
                             l2162 111C                               l2154 10E0  
                             l2146 109A                               l2402 1B06  
                             l2068 1982                               l2076 1928  
                             l2500 13EC                               l2340 094A  
                             l2332 0930                               l2316 0882  
                             l2324 08CA                               l2308 081C  
                             l2252 06AE                               l2260 06CE  
                             l2244 0670                               l2236 063E  
                             l2228 0622                               l2412 11E8  
                             l2092 152A                               l2172 1178  
                             l2164 1128                               l2156 10EC  
                             l2180 11A8                               l2148 10BA  
                             l2420 09AE                               l2404 1B08  
                             l2502 13F2                               l2334 0934  
                             l2326 08E4                               l2318 088E  
                             l2270 070C                               l2262 06DE  
                             l2254 06B6                               l2238 064E  
                             l2246 0678                               l2350 0C4C  
                             l2094 1548                               l2086 14F6  
                             l2174 118C                               l2166 1130  
                             l2158 1104                               l2190 1448  
                             l2182 13F6                               l2430 0A48  
                             l2422 09C0                               l2414 0956  
                             l2406 1BD8                               l2510 1A6E  
                             l2408 1A94                               l2336 0942  
                             l2328 08FA                               l2280 0754  
                             l2272 071C                               l2264 06DE  
                             l2256 06BA                               l2248 0688  
                             l2360 0CCA                               l2352 0C5A  
                             l2096 1560                               l2088 150A  
                             l2176 11A2                               l2168 1148  
                             l2192 1460                               l2184 140A  
                             l2440 0AE4                               l2432 0A78  
                             l2424 09F0                               l2416 096A  
                             l2512 1A7E                               l2600 178C  
                             l2338 0948                               l2290 07A2  
                             l2282 0768                               l2274 072C  
                             l2370 0D1E                               l2362 0CD2  
                             l2354 0CA0                               l2098 156C  
                             l2178 11A4                               l2194 146C  
                             l2186 140C                               l2450 0B54  
                             l2442 0B00                               l2434 0A8C  
                             l2426 0A04                               l2418 0982  
                             l2514 1A88                               l2506 1A60  
                             l2610 17AE                               l2602 1796  
                             l2292 07B2                               l2284 0776  
                             l2276 073C                               l2268 06F2  
                             l2380 0D94                               l2372 0D5A  
                             l2364 0CDE                               l2356 0CB6  
                             l2348 0C3C                               l2196 1478  
                             l2188 141C                               l2460 0BF4  
                             l2452 0B80                               l2436 0AA0  
                             l2444 0B14                               l2428 0A34  
                             l2508 1A64                               l2604 1798  
                             l2620 1A0C                               l2612 19D2  
                             l2622 1C0E                               l2294 07C4  
                             l2286 0782                               l2278 0744  
                             l2390 0DDC                               l2382 0D98  
                             l2374 0D66                               l2366 0D10  
                             l2470 15E8                               l2198 1480  
                             l2462 0C08                               l2454 0B9C  
                             l2446 0B28                               l2438 0AB8  
                             l2606 17A2                               l2630 1BC4  
                             l2614 19DE                               l2296 07DA  
                             l2288 07A0                               l2384 0DBC  
                             l2376 0D74                               l2368 0D12  
                             l2472 1606                               l2480 163E  
                             l2464 15B4                               l2448 0B3C  
                             l2456 0BB0                               l2608 17A4  
                             l2632 1BCE                               l2624 1BB6  
                             l2616 19E6                               l2800 1836  
                             l2490 135E                               l2298 07E0  
                             l2386 0DCC                               l2378 0D92  
                             l2482 1656                               l2474 161E  
                             l2466 15C8                               l2458 0BC4  
                             l2730 00BC                               l2394 1AF2  
                             l2634 1BD0                               l2626 1BC0  
                             l2618 1A04                               l2810 185C  
                             l2802 184A                               l2492 136E  
                             l2484 12F2                               l2388 0DDA  
                             l2476 162A                               l2468 15D8  
                             l2740 0136                               l2732 00D4  
                             l2724 007A                               l2396 1AFC  
                             l2636 1BD2                               l2628 1BC2  
                             l2820 1866                               l2812 185E  
                             l2804 184E                               l2638 1C30  
                             l2494 137C                               l2486 1320  
                             l2478 1636                               l2750 021A  
                             l2742 0168                               l2734 00E0  
                             l2726 0092                               l2398 1B02  
                             l2590 1732                               l2822 1868  
                             l2814 1860                               l2806 1856  
                             l2496 138E                               l2488 1330  
                             l1960 17B2                               l2760 02E8  
                             l2752 0236                               l2744 019A  
                             l2736 00EC                               l2728 00A8  
                             l2592 1758                               l2824 186C  
                             l2816 1862                               l2808 185A  
                             l2498 139C                               l1970 17EA  
                             l1962 17BA                               l1954 1B6E  
                             l2770 03CC                               l2762 031A  
                             l2754 0268                               l2746 01B6  
                             l2738 0104                               l2594 175C  
                             l2818 1864                               l1980 1816  
                             l1972 17F0                               l1964 17CC  
                             l1956 1B8A                               l2780 04B0  
                             l2772 03FE                               l2764 034C  
                             l2756 029A                               l2748 01E8  
                             l2596 1780                               l2588 1722  
                             l1982 1B46                               l1974 1806  
                             l1966 17D4                               l1990 0E5E  
                             l2790 057E                               l2782 04CC  
                             l2774 041A                               l2766 0368  
                             l2758 02CC                               l2598 178A  
                             l1984 1B56                               l1976 180E  
                             l1968 17DC                               l1992 0E72  
                             l2784 04FE                               l2776 044C  
                             l2768 039A                               l1978 1810  
                             l1994 0E76                               l1986 0DEE  
                             l2786 0530                               l2778 047E  
                             l2794 05A6                               l1996 0EB8  
                             l1988 0E0A                               l2788 0562  
                             l2796 1826                               l1998 0ED4  
                             l2798 1832                               u1100 1806  
                             u1101 1802                               u1110 1B56  
                             u1111 1B52                               u1120 1B6C  
                             u1200 0FB4                               u1121 1B68  
                             u1201 0FB0                               u1130 0E0A  
                             u1210 0FD8                               u1131 0E06  
                             u1211 0FD4                               u1140 0ED4  
                             u1220 101C                               u1300 1498  
                             u2100 0168                               u1141 0ED0  
                             u1221 1018                               u1301 1494  
                             u2101 0164                               u1150 1A48  
                             u1230 1034                               u1310 14B0  
                             u2110 019A                               u1151 1A40  
                             u1231 1030                               u1311 14AC  
                             u2111 0196                               u1400 0754  
                             u1320 05D6                               u1080 17CC  
                             u1240 1098                               u2200 03CC  
                             u2120 01E8                               u1401 0750  
                             u1321 05D2                               u1081 17C8  
                             u1241 1094                               u2201 03C8  
                             u2121 01E4                               u1410 0776  
                             u1330 05E8                               u1090 17EA  
                             u1170 16EE                               u1250 10E0  
                             u2210 03FE                               u2130 021A  
                             u1411 0772                               u1331 05E4  
                             u1091 17E6                               u1171 16EA  
                             u1251 10DC                               u2211 03FA  
                             u2131 0216                               u1500 0882  
                             u1420 07A0                               u1340 05F8  
                             u1180 1598                               u1260 1104  
                             u2220 044C                               u2140 0268  
                             u1501 087E                               u1421 079C  
                             u1341 05F4                               u1181 1594  
                             u1261 1100                               u2221 0448  
                             u2141 0264                               u1510 089C  
                             u1430 07C4                               u1350 063C  
                             u1190 15B0                               u1270 1148  
                             u2230 047E                               u2150 029A  
                             u1511 0898                               u1431 07C0  
                             u1351 0638                               u1191 15AC  
                             u1271 1144                               u2231 047A  
                             u2151 0296                               u1168 1A4A  
                             u1520 08E4                               u1440 07DA  
                             u1360 064E                               u1600 0D74  
                             u1280 1160                               u2240 04B0  
                             u2160 02CC                               u2080 00A8  
                     _BAUD4CONbits 000EE9                               u1521 08E0  
                             u1441 07D6                               u1361 064A  
                             u1601 0D70                               u1281 115C  
                             u2241 04AC                               u2161 02C8  
                             u2081 00A4                               u1530 0914  
                             u1450 07F8                               u1370 065E  
                             u1610 0D84                               u1290 11C6  
                             u2250 04FE                               u2170 031A  
                             u2090 0136                               u1531 0910  
                             u1451 07F4                               u1371 065A  
                             u1611 0D80                               u1291 11C2  
                             u2251 04FA                               u2171 0316  
                             u2091 0132                               u2307 00F6  
                             u1540 0942                               u1460 0818  
                             u1380 069E                               u1620 0D92  
                             u1700 0BC4                               u2260 0530  
                             u2180 034C                               u1541 093E  
                             u1461 0814                               u1381 069A  
                             u1621 0D8E                               u1701 0BC0  
                             u2317 0974                               u2261 052C  
                             u2181 0348                               u1470 082A  
                             u1390 06DE                               u1630 0DCC  
                             u1550 0C4C                               u1710 0C08  
                             u2270 0562                               u2190 039A  
                             u1471 0826                               u1391 06DA  
                             u1631 0DC8                               u1551 0C48  
                             u2407 112A                               u1711 0C04  
                             u2327 09A0                               u2271 055E  
                             u2191 0396                               u1480 0858  
                             u1640 0DDA                               u1560 0C5A  
                             u1720 1656                               u1481 0854  
                             u1641 0DD6                               u1561 0C56  
                             u1721 1652                               u2417 116A  
                             u2337 0AAA                               u1490 086E  
                             u1570 0CB6                               u1730 166E  
                             u1650 09C0                               _T2PR 000FBC  
                             u1491 086A                               u1571 0CB2  
                             u1731 166A                               u2427 1196  
                             u2347 0AD6                               u1651 09BC  
                             u1740 1320                               u1580 0D0C  
                             u1660 0A04                               u1741 131C  
                             u1581 0D08                               u2437 157A  
                             u2357 0B46                               u1661 0A00  
                             u1750 135E                               u1590 0D56  
                             u1670 0A48                               u1751 135A  
                             u1591 0D52                               u2447 0FFE  
                             u2367 0B72                               u1671 0A44  
                             u2287 1A74                               u1760 137C  
                             u1680 0A8C                               u1761 1378  
                             u2457 103E                               u2377 147A  
                             u1681 0A88                               u2297 00C6  
                             u1770 139C                               u1690 0B28  
                             u1771 1398                               u2467 1068  
                             u2387 14BA                               u1691 0B24  
                             u1780 13EC                               u1781 13E8  
                             u2477 1638                               u2397 14E4  
                             u2487 16CE                               _main 1826  
                             fsr2h 000FDA                               indf2 000FDF  
                             fsr2l 000FD9                               btemp 0059  
                             _stop 1672                               prodh 000FF4  
                             prodl 000FF3                               start 0076  
                  ___fldiv@new_exp 0024             __end_of_color_read_Red 18E2  
                  __end_of_HighISR 0076                       ___param_bank 000000  
                            ?_main 0001                              _ADPCH 000F5F  
                  __end_of___fldiv 0956                              ?_stop 0018  
                  __end_of___lwdiv 1826                              i2l440 1B44  
                            i2l373 0066                              i2l454 1C0C  
                            i2l447 1AF0                              i2l375 006A  
                     left_45@count 0022         __end_of_I2C_2_Master_Start 1C50  
       __end_of_I2C_2_Master_Write 1C30                    __end_of_left_45 109A  
                            _color 003C                    __end_of_forward 1672  
                            _space 13F6                    __end_of_reverse 15B4  
                            ttemp5 005A                              ttemp6 005D  
                            ttemp7 0061                              stop@i 001C  
                            status 000FD8                              wtemp8 005A  
          __end_of_color_read_Blue 19D2              _I2C_2_Master_RepStart 1C50  
               putCharToRxBuf@byte 0001                    ?_color_read_Red 0009  
                  __initialization 1B94                       __end_of_main 1892  
                     __end_of_stop 1722                             ??_main 0038  
                           ??_stop 001C                      __activetblptr 000000  
                     ?_setMotorPWM 0012                             _ADRESH 000F64  
                           _CCPR1H 000FAA                             _CCPR2H 000FA6  
                           _CCPR3H 000F25                             _CCPR4H 000F21  
                           ?_space 001E                  __end_of_READcolor 1AC6  
                           _RC0PPS 000E62                             _RC4REG 000EE3  
                           _RE2PPS 000E74                             _RD5PPS 000E6F  
                           _RC7PPS 000E69                             _RE4PPS 000E76  
                           _RD6PPS 000E70                             i2l2700 0038  
                           i2l2702 0046                             i2l2640 1B1E  
                           i2l2704 005A                             i2l2650 1AD6  
                           i2l1834 1BF6                             i2l2642 1B2E  
                           i2l2652 1ADA                             i2l2644 1B32  
                           i2l2646 1B42                             i2l2648 1AC6  
                           i2l2694 0012                             i2l2696 0022  
                           i2l2698 0028                             _RG6PPS 000E88  
                        ??_HighISR 0003           __end_of_color_click_init 1A94  
                           _RX4PPS 000E15                             _TX4REG 000EE4  
                 __end_of___xxtofl 0DEE                       _CCPTMRS0bits 000FAD  
                           ___flge 12F2                   _getCharFromTxBuf 1AC6  
                           ___wmul 1B6E                          ??___fldiv 001B  
                        ??___lwdiv 000F                   ??_buggyLEDs_init 0005  
                           clear_0 1B9A                             clear_1 1BA6  
                           _motorL 0050                             _motorR 00B0  
                           isa$std 000001  __end_of_colourcards_normaliseRGBC 12F2  
                        ??_left_45 0024                   __end_of_right_45 11C8  
                        ??_forward 0022                          ??_reverse 0022  
                           stop@mL 0018                             stop@mR 001A  
                ??_initDCmotorsPWM 0007       __end_of_buggy_color_response 05BC  
                       ___flge@ff1 0005                         ___flge@ff2 0009  
                     ___xxtofl@arg 000F                       ___xxtofl@exp 000E  
                     ___xxtofl@val 0005              __end_of_isDataInTxBuf 1C0E  
                       __accesstop 0060            __end_of__initialization 1BAC  
         __end_of_color_read_Clear 1982           __end_of_color_read_Green 1932  
           ?_I2C_2_Master_RepStart 0001                      ___rparam_used 000001  
                 ?_color_read_Blue 0009                    _Interrupts_init 1C30  
                   __pcstackCOMRAM 0001                      __end_of_space 14F6  
                          ??_space 0022                         __pbssBANK0 0060  
                    ?_instructions 0028                  _color_writetoaddr 1BD6  
                     _T2CLKCONbits 000FBF                            ?___flge 0005  
               ?_color_writetoaddr 0007                            ?___wmul 0005  
              ??_color_writetoaddr 0008                          ?___xxtofl 0005  
                          _SP4BRGH 000EE6                            _SP4BRGL 000EE5  
                          i2u93_40 1C0A                            i2u93_41 1C04  
                          i2u94_40 1C0C                            _SSP2ADD 000ED6  
                          _SSP2BUF 000ED5            __end_of_Interrupts_init 1C3C  
           color_writetoaddr@value 0007                   ??_color_read_Red 000B  
                          _HighISR 0008                     ??_instructions 002E  
        __end_of_color_writetoaddr 1BF6                          _ADREFbits 000F58  
               _I2C_2_Master_Start 1C46                         _initUSART4 1BB6  
               _I2C_2_Master_Write 1C24                          ?_right_45 001E  
                          __Hparam 0000                            __Lparam 0000  
                color_read_Red@tmp 000E                            ___fldiv 05BC  
              ?_I2C_2_Master_Start 0001                            ___lwdiv 17B2  
              ?_I2C_2_Master_Write 0001               _buggy_color_response 007A  
                          __pcinit 1B94                            __ramtop 0E00  
                          __ptext0 1826                            __ptext1 19D2  
                          __ptext2 1BB6                            __ptext3 1722  
                          __ptext4 1A60                            __ptext5 1BD6  
                          __ptext6 1AF2                            __ptext7 007A  
                          __ptext8 0956                            __ptext9 13F6  
                          _left_45 0F5A                          _T2CONbits 000FBD  
                          _forward 15B4                         ??___xxtofl 0009  
                        _T2HLTbits 000FBE                            _reverse 14F6  
                    right_45@count 0022                      _RxBufWriteCnt 003B  
         __end_of_getCharFromTxBuf 1AF2               ??_I2C_2_Master_Start 0006  
             ??_I2C_2_Master_Write 0006               end_of_initialization 1BAC  
                ?_color_click_init 0001                          _READcolor 1A94  
                       ??_right_45 0024                 ??_color_click_init 0009  
                          space@mL 001E                            space@mR 0020  
                          postdec2 000FDD                            postinc0 000FEE  
                          postinc2 000FDE                         _motor_init 19D2  
            ?_buggy_color_response 00B9                    _initDCmotorsPWM 1722  
               setMotorPWM@negDuty 0017                      ___xxtofl@sign 000D  
                        _TRISAbits 000F81                 setMotorPWM@posDuty 0016  
                        _TRISCbits 000F83                          _TRISDbits 000F84  
                        _TRISEbits 000F85                          _TRISFbits 000F86  
                        _TRISGbits 000F87                          _TRISHbits 000F88  
                      ___fldiv@grs 0026                        ___fldiv@rem 001F  
         color_writetoaddr@address 0008            ??_I2C_2_Master_RepStart 0006  
                 ?_Interrupts_init 0001                        _CCP1CONbits 000FAB  
                ?_color_read_Clear 0009                       _EUSART4RXbuf 009C  
                     _EUSART4TXbuf 0060                        _CCP2CONbits 000FA7  
                ?_color_read_Green 0009                         ?_READcolor 0010  
                      _CCP3CONbits 000F26                        ?_initUSART4 0001  
                      _CCP4CONbits 000F22                 ??_color_read_Clear 000B  
               ??_color_read_Green 000B                     __end_of___flge 13F6  
                   __end_of___wmul 1B94               __end_of_instructions 0C3A  
       ?_colourcards_normaliseRGBC 002C                color_read_Clear@tmp 000E  
              start_initialization 1B94                      _TxBufWriteCnt 0039  
           buggy_color_response@mL 00B9             buggy_color_response@mR 00BB  
              color_read_Green@tmp 000E            __end_of_initDCmotorsPWM 17B2  
       colourcards_normaliseRGBC@B 0032         colourcards_normaliseRGBC@C 0034  
       colourcards_normaliseRGBC@G 0030         colourcards_normaliseRGBC@R 002E  
       colourcards_normaliseRGBC@c 002C                           ??___flge 000D  
           ??_buggy_color_response 0036                           ??___wmul 0009  
                   _putCharToRxBuf 1B1C                        ?_motor_init 0005  
                       READcolor@c 0010                          ___fldiv@a 0017  
                        ___fldiv@b 0013                        __pbssCOMRAM 0038  
                    __pcstackBANK0 00B9                           ?_HighISR 0001  
                      ??_READcolor 0012                   ___lwdiv@dividend 000B  
           __end_of_putCharToRxBuf 1B46                          __pintcode 0008  
                         ?___fldiv 0013                           ?___lwdiv 000B  
                       right_45@mL 001E                         right_45@mR 0020  
             I2C_2_Master_Read@ack 0007               I2C_2_Master_Read@tmp 0008  
                         ?_left_45 001E                           ?_forward 001E  
                _I2C_2_Master_Idle 1B46                  _I2C_2_Master_Init 1AF2  
                _I2C_2_Master_Read 1A1E                  _I2C_2_Master_Stop 1C3C  
                     _RxBufReadCnt 003A                           ?_reverse 001E  
               ?_I2C_2_Master_Idle 0001                 ?_I2C_2_Master_Init 0001  
               ?_I2C_2_Master_Read 0001                      ??_setMotorPWM 0014  
               ?_I2C_2_Master_Stop 0001                   ___lwdiv@quotient 000F  
         initDCmotorsPWM@PWMperiod 0005                  ?_getCharFromTxBuf 0001  
               ??_getCharFromTxBuf 0001                ??_I2C_2_Master_Idle 0005  
              ??_I2C_2_Master_Init 0005                ??_I2C_2_Master_Read 0006  
                   ___wmul@product 0009                           _LATAbits 000F79  
              ??_I2C_2_Master_Stop 0006                           _LATCbits 000F7B  
                    _isDataInTxBuf 1BF6                           _LATDbits 000F7C  
                         _LATEbits 000F7D                           _LATFbits 000F7E  
                         _LATGbits 000F7F                           _LATHbits 000F80  
                         _PIE4bits 000E2D                           i2u200_40 1AD6  
                         i2u200_41 1AD2                           i2u202_40 0022  
                         i2u202_41 001E                           i2u203_40 0038  
                         i2u203_41 0034                           i2u204_40 0046  
                         i2u204_41 0042                           i2u205_40 005A  
                         i2u205_41 0056                           i2u199_40 1B2E  
                         i2u199_41 1B2A                           _PIR4bits 000E37  
                  ?_putCharToRxBuf 0001                   ?_initDCmotorsPWM 0005  
                         _SSP2CON2 000EDA                           _SSP2STAT 000ED8  
                       _ADCON0bits 000F60          __end_of_I2C_2_Master_Idle 1B6E  
        __end_of_I2C_2_Master_Init 1B1C          __end_of_I2C_2_Master_Read 1A60  
                ___wmul@multiplier 0005          __end_of_I2C_2_Master_Stop 1C46  
                     setMotorPWM@m 0012        I2C_2_Master_Write@data_byte 0006  
                        left_45@mL 001E                          left_45@mR 0020  
                ??_color_read_Blue 000B                       _TxBufReadCnt 0038  
                   ?_isDataInTxBuf 0001      __end_of_I2C_2_Master_RepStart 1C5A  
               color_read_Blue@tmp 000E                __end_of_setMotorPWM 0F5A  
                     _instructions 0956                       ??_initUSART4 0005  
            buggy_color_response@c 00BD                           __Hrparam 0000  
                         __Lrparam 0000                          forward@mL 001E  
                        forward@mR 0020                         _ANSELAbits 000E92  
                       _ANSELDbits 000EA7                         _ANSELFbits 000EB4  
      ??_colourcards_normaliseRGBC 002E                           ___xxtofl 0C3A  
                   _buggyLEDs_init 1C0E                    ___lwdiv@divisor 000D  
               __end_of_initUSART4 1BD6                    ___lwdiv@counter 0011  
                         __ptext10 109A                           __ptext11 14F6  
                         __ptext20 05BC                           __ptext12 0F5A  
                         __ptext21 12F2                           __ptext13 15B4  
                         __ptext30 1C50                           __ptext22 1A94  
                         __ptext14 1672                           __ptext31 1A1E  
                         __ptext23 1892                           __ptext15 0DEE  
                         __ptext32 1B46                           __ptext24 18E2  
                         __ptext16 1B6E                           __ptext33 1C0E  
                         __ptext25 1932                           __ptext17 17B2  
                         __ptext34 1C30                           __ptext26 1982  
                         __ptext18 11C8                           __ptext27 1C24  
                         __ptext19 0C3A                           __ptext36 1B1C  
                         __ptext28 1C3C                           __ptext37 1BF6  
                         __ptext29 1C46                           __ptext38 1AC6  
                        right_45@i 0026                       _SSP2CON1bits 000ED9  
                     _SSP2CON2bits 000EDA                     instructions@mL 0028  
                   instructions@mR 002A                           _right_45 109A  
                        reverse@mL 001E                          reverse@mR 0020  
                instructions@count 002C                           isa$xinst 000000  
                       _RC4STAbits 000EE7                           int$flags 0059  
                     ??_motor_init 0009                           left_45@i 0026  
           __end_of_buggyLEDs_init 1C24                         _INTCONbits 000FF2  
                      _setMotorPWM 0DEE                    ??_isDataInTxBuf 0001  
                         intlevel2 0000                 __end_of_motor_init 1A1E  
        _colourcards_normaliseRGBC 11C8                       motor_init@mL 0005  
                     motor_init@mR 0007                   _color_click_init 1A60  
                  ?_buggyLEDs_init 0001                         _SSP2DATPPS 000E1D  
                       _SSP2CLKPPS 000E1C                         _TX4STAbits 000EE8  
                 ??_putCharToRxBuf 0001  
