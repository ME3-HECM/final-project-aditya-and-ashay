

Microchip MPLAB XC8 Assembler V2.40 build 20220703182018 
                                                                                               Thu Mar 09 17:03:15 2023

Microchip MPLAB XC8 C Compiler v2.40 (Free license) build 20220703182018 Og1 
     1                           	processor	18F67K40
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     6                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     7                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	text0,global,reloc=2,class=CODE,delta=1
     9                           	psect	text1,global,reloc=2,class=CODE,delta=1
    10                           	psect	text2,global,reloc=2,class=CODE,delta=1
    11                           	psect	text3,global,reloc=2,class=CODE,delta=1
    12                           	psect	text4,global,reloc=2,class=CODE,delta=1
    13                           	psect	text5,global,reloc=2,class=CODE,delta=1
    14                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    15                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    16                           	psect	text8,global,reloc=2,class=CODE,delta=1
    17                           	psect	text9,global,reloc=2,class=CODE,delta=1
    18                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    19                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    20                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    21                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    22   000000                     
    23                           ; Generated 06/04/2022 GMT
    24                           ; 
    25                           ; Copyright Â© 2022, Microchip Technology Inc. and its subsidiaries ("Microchip")
    26                           ; All rights reserved.
    27                           ; 
    28                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    29                           ; 
    30                           ; Redistribution and use in source and binary forms, with or without modification, are
    31                           ; permitted provided that the following conditions are met:
    32                           ; 
    33                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    34                           ;        conditions and the following disclaimer.
    35                           ; 
    36                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    37                           ;        of conditions and the following disclaimer in the documentation and/or other
    38                           ;        materials provided with the distribution. Publication is not required when
    39                           ;        this file is used in an embedded application.
    40                           ; 
    41                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    42                           ;        software without specific prior written permission.
    43                           ; 
    44                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    45                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    46                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    47                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    48                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    49                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    50                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    51                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    52                           ; 
    53                           ; 
    54                           ; Code-generator required, PIC18F67K40 Definitions
    55                           ; 
    56                           ; SFR Addresses
    57   000000                     _TRISFbits	set	3974
    58   000000                     _LATFbits	set	3966
    59   000000                     _LATDbits	set	3964
    60   000000                     _LATGbits	set	3967
    61   000000                     _TRISGbits	set	3975
    62   000000                     _TRISEbits	set	3973
    63   000000                     _SSP2CON2bits	set	3802
    64   000000                     _SSP2CLKPPS	set	3612
    65   000000                     _SSP2DATPPS	set	3613
    66   000000                     _ANSELDbits	set	3751
    67   000000                     _SSP2ADD	set	3798
    68   000000                     _SSP2CON1bits	set	3801
    69   000000                     _LATCbits	set	3963
    70   000000                     _LATEbits	set	3965
    71   000000                     _TRISCbits	set	3971
    72   000000                     _SSP2CON2	set	3802
    73   000000                     _TRISDbits	set	3972
    74   000000                     _CCPR4H	set	3873
    75   000000                     _CCPR3H	set	3877
    76   000000                     _SSP2STAT	set	3800
    77   000000                     _SSP2BUF	set	3797
    78   000000                     _RC7PPS	set	3689
    79   000000                     _RD5PPS	set	3695
    80   000000                     _RE2PPS	set	3700
    81   000000                     _RD6PPS	set	3696
    82   000000                     _TRISHbits	set	3976
    83   000000                     _T2PR	set	4028
    84   000000                     _T2CONbits	set	4029
    85   000000                     _CCPR2H	set	4006
    86   000000                     _CCPR1H	set	4010
    87   000000                     _LATHbits	set	3968
    88   000000                     _RE4PPS	set	3702
    89   000000                     _RG6PPS	set	3720
    90   000000                     _T2CLKCONbits	set	4031
    91   000000                     _T2HLTbits	set	4030
    92   000000                     _CCP1CONbits	set	4011
    93   000000                     _CCPTMRS0bits	set	4013
    94   000000                     _CCP2CONbits	set	4007
    95   000000                     _CCP3CONbits	set	3878
    96   000000                     _CCP4CONbits	set	3874
    97                           
    98                           ; #config settings
    99                           
   100                           	psect	cinit
   101   01F8F8                     __pcinit:
   102                           	callstack 0
   103   01F8F8                     start_initialization:
   104                           	callstack 0
   105   01F8F8                     __initialization:
   106                           	callstack 0
   107                           
   108                           ; Clear objects allocated to COMRAM (18 bytes)
   109   01F8F8  EE00  F028         	lfsr	0,__pbssCOMRAM
   110   01F8FC  0E12               	movlw	18
   111   01F8FE                     clear_0:
   112   01F8FE  6AEE               	clrf	postinc0,c
   113   01F900  06E8               	decf	wreg,f,c
   114   01F902  E1FD               	bnz	clear_0
   115   01F904                     end_of_initialization:
   116                           	callstack 0
   117   01F904                     __end_of__initialization:
   118                           	callstack 0
   119   01F904  0100               	movlb	0
   120   01F906  EFA2  F0FD         	goto	_main	;jump to C main() function
   121                           
   122                           	psect	bssCOMRAM
   123   000028                     __pbssCOMRAM:
   124                           	callstack 0
   125   000028                     _motorR:
   126                           	callstack 0
   127   000028                     	ds	9
   128   000031                     _motorL:
   129                           	callstack 0
   130   000031                     	ds	9
   131                           
   132                           	psect	cstackCOMRAM
   133   000001                     __pcstackCOMRAM:
   134                           	callstack 0
   135   000001                     ?___wmul:
   136                           	callstack 0
   137   000001                     initDCmotorsPWM@PWMperiod:
   138                           	callstack 0
   139   000001                     motor_init@mL:
   140                           	callstack 0
   141   000001                     ___wmul@multiplier:
   142                           	callstack 0
   143                           
   144                           ; 2 bytes @ 0x0
   145   000001                     	ds	2
   146   000003                     motor_init@mR:
   147                           	callstack 0
   148   000003                     ___wmul@multiplicand:
   149                           	callstack 0
   150                           
   151                           ; 2 bytes @ 0x2
   152   000003                     	ds	2
   153   000005                     ___wmul@product:
   154                           	callstack 0
   155                           
   156                           ; 2 bytes @ 0x4
   157   000005                     	ds	2
   158   000007                     ?___lwdiv:
   159                           	callstack 0
   160   000007                     ___lwdiv@dividend:
   161                           	callstack 0
   162                           
   163                           ; 2 bytes @ 0x6
   164   000007                     	ds	2
   165   000009                     ___lwdiv@divisor:
   166                           	callstack 0
   167                           
   168                           ; 2 bytes @ 0x8
   169   000009                     	ds	2
   170   00000B                     ___lwdiv@quotient:
   171                           	callstack 0
   172                           
   173                           ; 2 bytes @ 0xA
   174   00000B                     	ds	2
   175   00000D                     ___lwdiv@counter:
   176                           	callstack 0
   177                           
   178                           ; 1 bytes @ 0xC
   179   00000D                     	ds	1
   180   00000E                     setMotorPWM@m:
   181                           	callstack 0
   182                           
   183                           ; 2 bytes @ 0xD
   184   00000E                     	ds	2
   185   000010                     ??_setMotorPWM:
   186                           
   187                           ; 1 bytes @ 0xF
   188   000010                     	ds	2
   189   000012                     setMotorPWM@posDuty:
   190                           	callstack 0
   191                           
   192                           ; 1 bytes @ 0x11
   193   000012                     	ds	1
   194   000013                     setMotorPWM@negDuty:
   195                           	callstack 0
   196                           
   197                           ; 1 bytes @ 0x12
   198   000013                     	ds	1
   199   000014                     stop@mL:
   200                           	callstack 0
   201                           
   202                           ; 2 bytes @ 0x13
   203   000014                     	ds	2
   204   000016                     stop@mR:
   205                           	callstack 0
   206                           
   207                           ; 2 bytes @ 0x15
   208   000016                     	ds	2
   209   000018                     stop@i:
   210                           	callstack 0
   211                           
   212                           ; 2 bytes @ 0x17
   213   000018                     	ds	2
   214   00001A                     left_45@mL:
   215                           	callstack 0
   216   00001A                     right_45@mL:
   217                           	callstack 0
   218                           
   219                           ; 2 bytes @ 0x19
   220   00001A                     	ds	2
   221   00001C                     left_45@mR:
   222                           	callstack 0
   223   00001C                     right_45@mR:
   224                           	callstack 0
   225                           
   226                           ; 2 bytes @ 0x1B
   227   00001C                     	ds	2
   228   00001E                     left_45@count:
   229                           	callstack 0
   230   00001E                     right_45@count:
   231                           	callstack 0
   232                           
   233                           ; 2 bytes @ 0x1D
   234   00001E                     	ds	2
   235   000020                     ??_left_45:
   236   000020                     ??_right_45:
   237                           
   238                           ; 1 bytes @ 0x1F
   239   000020                     	ds	2
   240   000022                     left_45@i:
   241                           	callstack 0
   242   000022                     right_45@i:
   243                           	callstack 0
   244                           
   245                           ; 2 bytes @ 0x21
   246   000022                     	ds	2
   247   000024                     ??_main:
   248                           
   249                           ; 1 bytes @ 0x23
   250   000024                     	ds	2
   251   000026                     main@i:
   252                           	callstack 0
   253                           
   254                           ; 2 bytes @ 0x25
   255   000026                     	ds	2
   256                           
   257 ;;
   258 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   259 ;;
   260 ;; *************** function _main *****************
   261 ;; Defined at:
   262 ;;		line 14 in file "../main.c"
   263 ;; Parameters:    Size  Location     Type
   264 ;;		None
   265 ;; Auto vars:     Size  Location     Type
   266 ;;  i               2   37[COMRAM] int 
   267 ;; Return value:  Size  Location     Type
   268 ;;                  1    wreg      void 
   269 ;; Registers used:
   270 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   271 ;; Tracked objects:
   272 ;;		On entry : 0/0
   273 ;;		On exit  : 0/0
   274 ;;		Unchanged: 0/0
   275 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   276 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   277 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   278 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   279 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   280 ;;Total ram usage:        4 bytes
   281 ;; Hardware stack levels required when called: 4
   282 ;; This function calls:
   283 ;;		_buggyLEDs_init
   284 ;;		_initDCmotorsPWM
   285 ;;		_left_45
   286 ;;		_motor_init
   287 ;;		_right_45
   288 ;;		_stop
   289 ;; This function is called by:
   290 ;;		Startup code after reset
   291 ;; This function uses a non-reentrant model
   292 ;;
   293                           
   294                           	psect	text0
   295   01FB44                     __ptext0:
   296                           	callstack 0
   297   01FB44                     _main:
   298                           	callstack 27
   299   01FB44                     
   300                           ;../main.c: 16:     initDCmotorsPWM(99);
   301   01FB44  0E00               	movlw	0
   302   01FB46  6E02               	movwf	(initDCmotorsPWM@PWMperiod+1)^0,c
   303   01FB48  0E63               	movlw	99
   304   01FB4A  6E01               	movwf	initDCmotorsPWM@PWMperiod^0,c
   305   01FB4C  EC02  F0FD         	call	_initDCmotorsPWM	;wreg free
   306   01FB50                     
   307                           ;../main.c: 17:     buggyLEDs_init();
   308   01FB50  EC85  F0FC         	call	_buggyLEDs_init	;wreg free
   309   01FB54                     
   310                           ;../main.c: 18:     motor_init(&motorL,&motorR);
   311   01FB54  0E31               	movlw	low _motorL
   312   01FB56  6E01               	movwf	motor_init@mL^0,c
   313   01FB58  0E00               	movlw	high _motorL
   314   01FB5A  6E02               	movwf	(motor_init@mL+1)^0,c
   315   01FB5C  0E28               	movlw	low _motorR
   316   01FB5E  6E03               	movwf	motor_init@mR^0,c
   317   01FB60  0E00               	movlw	high _motorR
   318   01FB62  6E04               	movwf	(motor_init@mR+1)^0,c
   319   01FB64  ECA3  F0FC         	call	_motor_init	;wreg free
   320   01FB68                     
   321                           ;../main.c: 21:     for (int i = 0; i<=3; i += 1){
   322   01FB68  0E00               	movlw	0
   323   01FB6A  6E27               	movwf	(main@i+1)^0,c
   324   01FB6C  0E00               	movlw	0
   325   01FB6E  6E26               	movwf	main@i^0,c
   326   01FB70                     l1409:
   327                           
   328                           ;../main.c: 22:     _delay((unsigned long)((1000)*(64000000/4000.0)));
   329   01FB70  0E52               	movlw	82
   330   01FB72  6E25               	movwf	(??_main+1)^0,c
   331   01FB74  0E2B               	movlw	43
   332   01FB76  6E24               	movwf	??_main^0,c
   333   01FB78  0E00               	movlw	0
   334   01FB7A                     u477:
   335   01FB7A  2EE8               	decfsz	wreg,f,c
   336   01FB7C  D7FE               	bra	u477
   337   01FB7E  2E24               	decfsz	??_main^0,f,c
   338   01FB80  D7FC               	bra	u477
   339   01FB82  2E25               	decfsz	(??_main+1)^0,f,c
   340   01FB84  D7FA               	bra	u477
   341   01FB86  D000               	nop2	
   342   01FB88                     
   343                           ;../main.c: 23:     right_45(&motorL,&motorR, 2);
   344   01FB88  0E31               	movlw	low _motorL
   345   01FB8A  6E1A               	movwf	right_45@mL^0,c
   346   01FB8C  0E00               	movlw	high _motorL
   347   01FB8E  6E1B               	movwf	(right_45@mL+1)^0,c
   348   01FB90  0E28               	movlw	low _motorR
   349   01FB92  6E1C               	movwf	right_45@mR^0,c
   350   01FB94  0E00               	movlw	high _motorR
   351   01FB96  6E1D               	movwf	(right_45@mR+1)^0,c
   352   01FB98  0E00               	movlw	0
   353   01FB9A  6E1F               	movwf	(right_45@count+1)^0,c
   354   01FB9C  0E02               	movlw	2
   355   01FB9E  6E1E               	movwf	right_45@count^0,c
   356   01FBA0  EC14  F0FE         	call	_right_45	;wreg free
   357   01FBA4                     
   358                           ;../main.c: 24:     stop(&motorL,&motorR);
   359   01FBA4  0E31               	movlw	low _motorL
   360   01FBA6  6E14               	movwf	stop@mL^0,c
   361   01FBA8  0E00               	movlw	high _motorL
   362   01FBAA  6E15               	movwf	(stop@mL+1)^0,c
   363   01FBAC  0E28               	movlw	low _motorR
   364   01FBAE  6E16               	movwf	stop@mR^0,c
   365   01FBB0  0E00               	movlw	high _motorR
   366   01FBB2  6E17               	movwf	(stop@mR+1)^0,c
   367   01FBB4  EC4A  F0FD         	call	_stop	;wreg free
   368                           
   369                           ;../main.c: 25:     _delay((unsigned long)((1000)*(64000000/4000.0)));
   370   01FBB8  0E52               	movlw	82
   371   01FBBA  6E25               	movwf	(??_main+1)^0,c
   372   01FBBC  0E2B               	movlw	43
   373   01FBBE  6E24               	movwf	??_main^0,c
   374   01FBC0  0E00               	movlw	0
   375   01FBC2                     u487:
   376   01FBC2  2EE8               	decfsz	wreg,f,c
   377   01FBC4  D7FE               	bra	u487
   378   01FBC6  2E24               	decfsz	??_main^0,f,c
   379   01FBC8  D7FC               	bra	u487
   380   01FBCA  2E25               	decfsz	(??_main+1)^0,f,c
   381   01FBCC  D7FA               	bra	u487
   382   01FBCE  D000               	nop2	
   383   01FBD0                     
   384                           ;../main.c: 26:     left_45(&motorL,&motorR,2);
   385   01FBD0  0E31               	movlw	low _motorL
   386   01FBD2  6E1A               	movwf	left_45@mL^0,c
   387   01FBD4  0E00               	movlw	high _motorL
   388   01FBD6  6E1B               	movwf	(left_45@mL+1)^0,c
   389   01FBD8  0E28               	movlw	low _motorR
   390   01FBDA  6E1C               	movwf	left_45@mR^0,c
   391   01FBDC  0E00               	movlw	high _motorR
   392   01FBDE  6E1D               	movwf	(left_45@mR+1)^0,c
   393   01FBE0  0E00               	movlw	0
   394   01FBE2  6E1F               	movwf	(left_45@count+1)^0,c
   395   01FBE4  0E02               	movlw	2
   396   01FBE6  6E1E               	movwf	left_45@count^0,c
   397   01FBE8  ECA9  F0FE         	call	_left_45	;wreg free
   398   01FBEC                     
   399                           ;../main.c: 27:      _delay((unsigned long)((1000)*(64000000/4000.0)));
   400   01FBEC  0E52               	movlw	82
   401   01FBEE  6E25               	movwf	(??_main+1)^0,c
   402   01FBF0  0E2B               	movlw	43
   403   01FBF2  6E24               	movwf	??_main^0,c
   404   01FBF4  0E00               	movlw	0
   405   01FBF6                     u497:
   406   01FBF6  2EE8               	decfsz	wreg,f,c
   407   01FBF8  D7FE               	bra	u497
   408   01FBFA  2E24               	decfsz	??_main^0,f,c
   409   01FBFC  D7FC               	bra	u497
   410   01FBFE  2E25               	decfsz	(??_main+1)^0,f,c
   411   01FC00  D7FA               	bra	u497
   412   01FC02  D000               	nop2	
   413   01FC04                     
   414                           ;../main.c: 28:     }
   415   01FC04  4A26               	infsnz	main@i^0,f,c
   416   01FC06  2A27               	incf	(main@i+1)^0,f,c
   417   01FC08  BE27               	btfsc	(main@i+1)^0,7,c
   418   01FC0A  EF10  F0FE         	goto	u461
   419   01FC0E  5027               	movf	(main@i+1)^0,w,c
   420   01FC10  E109               	bnz	u460
   421   01FC12  0E04               	movlw	4
   422   01FC14  5C26               	subwf	main@i^0,w,c
   423   01FC16  A0D8               	btfss	status,0,c
   424   01FC18  EF10  F0FE         	goto	u461
   425   01FC1C  EF12  F0FE         	goto	u460
   426   01FC20                     u461:
   427   01FC20  EFB8  F0FD         	goto	l1409
   428   01FC24                     u460:
   429   01FC24  EF00  F000         	goto	start
   430   01FC28                     __end_of_main:
   431                           	callstack 0
   432                           
   433 ;; *************** function _right_45 *****************
   434 ;; Defined at:
   435 ;;		line 207 in file "../dc_motor.c"
   436 ;; Parameters:    Size  Location     Type
   437 ;;  mL              2   25[COMRAM] PTR struct DC_motor
   438 ;;		 -> motorL(9), 
   439 ;;  mR              2   27[COMRAM] PTR struct DC_motor
   440 ;;		 -> motorR(9), 
   441 ;;  count           2   29[COMRAM] int 
   442 ;; Auto vars:     Size  Location     Type
   443 ;;  i               2   33[COMRAM] int 
   444 ;; Return value:  Size  Location     Type
   445 ;;                  1    wreg      void 
   446 ;; Registers used:
   447 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   448 ;; Tracked objects:
   449 ;;		On entry : 0/0
   450 ;;		On exit  : 0/0
   451 ;;		Unchanged: 0/0
   452 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   453 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   454 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   455 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   456 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   457 ;;Total ram usage:       10 bytes
   458 ;; Hardware stack levels used: 1
   459 ;; Hardware stack levels required when called: 3
   460 ;; This function calls:
   461 ;;		_setMotorPWM
   462 ;;		_stop
   463 ;; This function is called by:
   464 ;;		_main
   465 ;; This function uses a non-reentrant model
   466 ;;
   467                           
   468                           	psect	text1
   469   01FC28                     __ptext1:
   470                           	callstack 0
   471   01FC28                     _right_45:
   472                           	callstack 27
   473   01FC28                     
   474                           ;../dc_motor.c: 207: void right_45(DC_motor *mL, DC_motor *mR, int count );../dc_motor.c
      +                          : 208: {;../dc_motor.c: 209:     mL-> direction = 1;
   475   01FC28  EE20 F001          	lfsr	2,1
   476   01FC2C  501A               	movf	right_45@mL^0,w,c
   477   01FC2E  26D9               	addwf	fsr2l,f,c
   478   01FC30  501B               	movf	(right_45@mL+1)^0,w,c
   479   01FC32  22DA               	addwfc	fsr2h,f,c
   480   01FC34  0E01               	movlw	1
   481   01FC36  6EDF               	movwf	indf2,c
   482                           
   483                           ;../dc_motor.c: 210:     mR-> direction = 0;
   484   01FC38  EE20 F001          	lfsr	2,1
   485   01FC3C  501C               	movf	right_45@mR^0,w,c
   486   01FC3E  26D9               	addwf	fsr2l,f,c
   487   01FC40  501D               	movf	(right_45@mR+1)^0,w,c
   488   01FC42  22DA               	addwfc	fsr2h,f,c
   489   01FC44  0E00               	movlw	0
   490   01FC46  6EDF               	movwf	indf2,c
   491   01FC48                     
   492                           ;../dc_motor.c: 211:     int i;;../dc_motor.c: 212:     for (i = 0;i<count;i++){
   493   01FC48  0E00               	movlw	0
   494   01FC4A  6E23               	movwf	(right_45@i+1)^0,c
   495   01FC4C  0E00               	movlw	0
   496   01FC4E  6E22               	movwf	right_45@i^0,c
   497   01FC50  EF99  F0FE         	goto	l1373
   498   01FC54                     l1347:
   499                           
   500                           ;../dc_motor.c: 214:         if (mL->power <= 30){mL->power += 10;}
   501   01FC54  C01A  FFD9         	movff	right_45@mL,fsr2l
   502   01FC58  C01B  FFDA         	movff	right_45@mL+1,fsr2h
   503   01FC5C  0E1F               	movlw	31
   504   01FC5E  60DF               	cpfslt	indf2,c
   505   01FC60  EF34  F0FE         	goto	u371
   506   01FC64  EF36  F0FE         	goto	u370
   507   01FC68                     u371:
   508   01FC68  EF3C  F0FE         	goto	l1351
   509   01FC6C                     u370:
   510   01FC6C  C01A  FFD9         	movff	right_45@mL,fsr2l
   511   01FC70  C01B  FFDA         	movff	right_45@mL+1,fsr2h
   512   01FC74  0E0A               	movlw	10
   513   01FC76  26DF               	addwf	indf2,f,c
   514   01FC78                     l1351:
   515                           
   516                           ;../dc_motor.c: 215:         if (mR->power <= 30){mR->power += 10;}
   517   01FC78  C01C  FFD9         	movff	right_45@mR,fsr2l
   518   01FC7C  C01D  FFDA         	movff	right_45@mR+1,fsr2h
   519   01FC80  0E1F               	movlw	31
   520   01FC82  60DF               	cpfslt	indf2,c
   521   01FC84  EF46  F0FE         	goto	u381
   522   01FC88  EF48  F0FE         	goto	u380
   523   01FC8C                     u381:
   524   01FC8C  EF4E  F0FE         	goto	l1355
   525   01FC90                     u380:
   526   01FC90  C01C  FFD9         	movff	right_45@mR,fsr2l
   527   01FC94  C01D  FFDA         	movff	right_45@mR+1,fsr2h
   528   01FC98  0E0A               	movlw	10
   529   01FC9A  26DF               	addwf	indf2,f,c
   530   01FC9C                     l1355:
   531                           
   532                           ;../dc_motor.c: 216:         setMotorPWM(mL);
   533   01FC9C  C01A  F00E         	movff	right_45@mL,setMotorPWM@m
   534   01FCA0  C01B  F00F         	movff	right_45@mL+1,setMotorPWM@m+1
   535   01FCA4  EC4A  F0FF         	call	_setMotorPWM	;wreg free
   536   01FCA8                     
   537                           ;../dc_motor.c: 217:         setMotorPWM(mR);
   538   01FCA8  C01C  F00E         	movff	right_45@mR,setMotorPWM@m
   539   01FCAC  C01D  F00F         	movff	right_45@mR+1,setMotorPWM@m+1
   540   01FCB0  EC4A  F0FF         	call	_setMotorPWM	;wreg free
   541   01FCB4                     
   542                           ;../dc_motor.c: 218:         _delay((unsigned long)((50)*(64000000/4000000.0)));
   543   01FCB4  0EA0               	movlw	160
   544   01FCB6                     u507:
   545   01FCB6  D000               	nop2	
   546   01FCB8  2EE8               	decfsz	wreg,f,c
   547   01FCBA  D7FD               	bra	u507
   548   01FCBC                     l1361:
   549                           
   550                           ;../dc_motor.c: 213:     while ((mL->power <= 30) || (mR->power <= 30)){
   551   01FCBC  C01A  FFD9         	movff	right_45@mL,fsr2l
   552   01FCC0  C01B  FFDA         	movff	right_45@mL+1,fsr2h
   553   01FCC4  0E1E               	movlw	30
   554   01FCC6  64DF               	cpfsgt	indf2,c
   555   01FCC8  EF68  F0FE         	goto	u391
   556   01FCCC  EF6A  F0FE         	goto	u390
   557   01FCD0                     u391:
   558   01FCD0  EF2A  F0FE         	goto	l1347
   559   01FCD4                     u390:
   560   01FCD4  C01C  FFD9         	movff	right_45@mR,fsr2l
   561   01FCD8  C01D  FFDA         	movff	right_45@mR+1,fsr2h
   562   01FCDC  0E1E               	movlw	30
   563   01FCDE  64DF               	cpfsgt	indf2,c
   564   01FCE0  EF74  F0FE         	goto	u401
   565   01FCE4  EF76  F0FE         	goto	u400
   566   01FCE8                     u401:
   567   01FCE8  EF2A  F0FE         	goto	l1347
   568   01FCEC                     u400:
   569   01FCEC                     
   570                           ;../dc_motor.c: 220:     _delay((unsigned long)((215)*(64000000/4000.0)));
   571   01FCEC  0E12               	movlw	18
   572   01FCEE  6E21               	movwf	(??_right_45+1)^0,c
   573   01FCF0  0E74               	movlw	116
   574   01FCF2  6E20               	movwf	??_right_45^0,c
   575   01FCF4  0E7A               	movlw	122
   576   01FCF6                     u517:
   577   01FCF6  2EE8               	decfsz	wreg,f,c
   578   01FCF8  D7FE               	bra	u517
   579   01FCFA  2E20               	decfsz	??_right_45^0,f,c
   580   01FCFC  D7FC               	bra	u517
   581   01FCFE  2E21               	decfsz	(??_right_45+1)^0,f,c
   582   01FD00  D7FA               	bra	u517
   583   01FD02  D000               	nop2	
   584   01FD04                     
   585                           ;../dc_motor.c: 221:     stop(mL,mR);
   586   01FD04  C01A  F014         	movff	right_45@mL,stop@mL
   587   01FD08  C01B  F015         	movff	right_45@mL+1,stop@mL+1
   588   01FD0C  C01C  F016         	movff	right_45@mR,stop@mR
   589   01FD10  C01D  F017         	movff	right_45@mR+1,stop@mR+1
   590   01FD14  EC4A  F0FD         	call	_stop	;wreg free
   591   01FD18                     
   592                           ;../dc_motor.c: 222:     _delay((unsigned long)((150)*(64000000/4000.0)));
   593   01FD18  0E0D               	movlw	13
   594   01FD1A  6E21               	movwf	(??_right_45+1)^0,c
   595   01FD1C  0E2D               	movlw	45
   596   01FD1E  6E20               	movwf	??_right_45^0,c
   597   01FD20  0ED8               	movlw	216
   598   01FD22                     u527:
   599   01FD22  2EE8               	decfsz	wreg,f,c
   600   01FD24  D7FE               	bra	u527
   601   01FD26  2E20               	decfsz	??_right_45^0,f,c
   602   01FD28  D7FC               	bra	u527
   603   01FD2A  2E21               	decfsz	(??_right_45+1)^0,f,c
   604   01FD2C  D7FA               	bra	u527
   605   01FD2E                     
   606                           ;../dc_motor.c: 223: }
   607   01FD2E  4A22               	infsnz	right_45@i^0,f,c
   608   01FD30  2A23               	incf	(right_45@i+1)^0,f,c
   609   01FD32                     l1373:
   610   01FD32  501E               	movf	right_45@count^0,w,c
   611   01FD34  5C22               	subwf	right_45@i^0,w,c
   612   01FD36  5023               	movf	(right_45@i+1)^0,w,c
   613   01FD38  0A80               	xorlw	128
   614   01FD3A  6E20               	movwf	??_right_45^0,c
   615   01FD3C  501F               	movf	(right_45@count+1)^0,w,c
   616   01FD3E  0A80               	xorlw	128
   617   01FD40  5820               	subwfb	??_right_45^0,w,c
   618   01FD42  A0D8               	btfss	status,0,c
   619   01FD44  EFA6  F0FE         	goto	u411
   620   01FD48  EFA8  F0FE         	goto	u410
   621   01FD4C                     u411:
   622   01FD4C  EF5E  F0FE         	goto	l1361
   623   01FD50                     u410:
   624   01FD50  0012               	return		;funcret
   625   01FD52                     __end_of_right_45:
   626                           	callstack 0
   627                           
   628 ;; *************** function _motor_init *****************
   629 ;; Defined at:
   630 ;;		line 94 in file "../dc_motor.c"
   631 ;; Parameters:    Size  Location     Type
   632 ;;  mL              2    0[COMRAM] PTR struct DC_motor
   633 ;;		 -> motorL(9), 
   634 ;;  mR              2    2[COMRAM] PTR struct DC_motor
   635 ;;		 -> motorR(9), 
   636 ;; Auto vars:     Size  Location     Type
   637 ;;		None
   638 ;; Return value:  Size  Location     Type
   639 ;;                  1    wreg      void 
   640 ;; Registers used:
   641 ;;		wreg, status,2, status,0
   642 ;; Tracked objects:
   643 ;;		On entry : 0/0
   644 ;;		On exit  : 0/0
   645 ;;		Unchanged: 0/0
   646 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   647 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   648 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   649 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   650 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   651 ;;Total ram usage:        4 bytes
   652 ;; Hardware stack levels used: 1
   653 ;; This function calls:
   654 ;;		Nothing
   655 ;; This function is called by:
   656 ;;		_main
   657 ;; This function uses a non-reentrant model
   658 ;;
   659                           
   660                           	psect	text2
   661   01F946                     __ptext2:
   662                           	callstack 0
   663   01F946                     _motor_init:
   664                           	callstack 30
   665   01F946                     
   666                           ;../dc_motor.c: 94: void motor_init(DC_motor *mL, DC_motor *mR);../dc_motor.c: 95: {;../
      +                          dc_motor.c: 96:     motorL.power=0;
   667   01F946  0E00               	movlw	0
   668   01F948  6E31               	movwf	_motorL^0,c
   669                           
   670                           ;../dc_motor.c: 97:     motorL.direction=1;
   671   01F94A  0E01               	movlw	1
   672   01F94C  6E32               	movwf	(_motorL+1)^0,c
   673                           
   674                           ;../dc_motor.c: 98:     motorL.brakemode=1;
   675   01F94E  0E01               	movlw	1
   676   01F950  6E33               	movwf	(_motorL+2)^0,c
   677   01F952                     
   678                           ;../dc_motor.c: 99:     motorL.posDutyHighByte=(unsigned char *)(&CCPR1H);
   679   01F952  0EAA               	movlw	170
   680   01F954  6E36               	movwf	(_motorL+5)^0,c
   681   01F956  0E0F               	movlw	15
   682   01F958  6E37               	movwf	(_motorL+6)^0,c
   683   01F95A                     
   684                           ;../dc_motor.c: 100:     motorL.negDutyHighByte=(unsigned char *)(&CCPR2H);
   685   01F95A  0EA6               	movlw	166
   686   01F95C  6E38               	movwf	(_motorL+7)^0,c
   687   01F95E  0E0F               	movlw	15
   688   01F960  6E39               	movwf	(_motorL+8)^0,c
   689                           
   690                           ;../dc_motor.c: 101:     motorL.PWMperiod=99;
   691   01F962  0E00               	movlw	0
   692   01F964  6E35               	movwf	(_motorL+4)^0,c
   693   01F966  0E63               	movlw	99
   694   01F968  6E34               	movwf	(_motorL+3)^0,c
   695                           
   696                           ;../dc_motor.c: 103:     motorR.power=0;
   697   01F96A  0E00               	movlw	0
   698   01F96C  6E28               	movwf	_motorR^0,c
   699                           
   700                           ;../dc_motor.c: 104:     motorR.direction=1;
   701   01F96E  0E01               	movlw	1
   702   01F970  6E29               	movwf	(_motorR+1)^0,c
   703                           
   704                           ;../dc_motor.c: 105:     motorR.brakemode=1;
   705   01F972  0E01               	movlw	1
   706   01F974  6E2A               	movwf	(_motorR+2)^0,c
   707   01F976                     
   708                           ;../dc_motor.c: 106:     motorR.posDutyHighByte=(unsigned char *)(&CCPR3H);
   709   01F976  0E25               	movlw	37
   710   01F978  6E2D               	movwf	(_motorR+5)^0,c
   711   01F97A  0E0F               	movlw	15
   712   01F97C  6E2E               	movwf	(_motorR+6)^0,c
   713   01F97E                     
   714                           ;../dc_motor.c: 107:     motorR.negDutyHighByte=(unsigned char *)(&CCPR4H);
   715   01F97E  0E21               	movlw	33
   716   01F980  6E2F               	movwf	(_motorR+7)^0,c
   717   01F982  0E0F               	movlw	15
   718   01F984  6E30               	movwf	(_motorR+8)^0,c
   719                           
   720                           ;../dc_motor.c: 108:     motorR.PWMperiod=99;
   721   01F986  0E00               	movlw	0
   722   01F988  6E2C               	movwf	(_motorR+4)^0,c
   723   01F98A  0E63               	movlw	99
   724   01F98C  6E2B               	movwf	(_motorR+3)^0,c
   725   01F98E  0012               	return		;funcret
   726   01F990                     __end_of_motor_init:
   727                           	callstack 0
   728                           
   729 ;; *************** function _left_45 *****************
   730 ;; Defined at:
   731 ;;		line 184 in file "../dc_motor.c"
   732 ;; Parameters:    Size  Location     Type
   733 ;;  mL              2   25[COMRAM] PTR struct DC_motor
   734 ;;		 -> motorL(9), 
   735 ;;  mR              2   27[COMRAM] PTR struct DC_motor
   736 ;;		 -> motorR(9), 
   737 ;;  count           2   29[COMRAM] int 
   738 ;; Auto vars:     Size  Location     Type
   739 ;;  i               2   33[COMRAM] int 
   740 ;; Return value:  Size  Location     Type
   741 ;;                  1    wreg      void 
   742 ;; Registers used:
   743 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   744 ;; Tracked objects:
   745 ;;		On entry : 0/0
   746 ;;		On exit  : 0/0
   747 ;;		Unchanged: 0/0
   748 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   749 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   750 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   751 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   752 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   753 ;;Total ram usage:       10 bytes
   754 ;; Hardware stack levels used: 1
   755 ;; Hardware stack levels required when called: 3
   756 ;; This function calls:
   757 ;;		_setMotorPWM
   758 ;;		_stop
   759 ;; This function is called by:
   760 ;;		_main
   761 ;; This function uses a non-reentrant model
   762 ;;
   763                           
   764                           	psect	text3
   765   01FD52                     __ptext3:
   766                           	callstack 0
   767   01FD52                     _left_45:
   768                           	callstack 27
   769   01FD52                     
   770                           ;../dc_motor.c: 184: void left_45(DC_motor *mL, DC_motor *mR, int count);../dc_motor.c: 
      +                          185: {;../dc_motor.c: 186:     stop(mL,mR);
   771   01FD52  C01A  F014         	movff	left_45@mL,stop@mL
   772   01FD56  C01B  F015         	movff	left_45@mL+1,stop@mL+1
   773   01FD5A  C01C  F016         	movff	left_45@mR,stop@mR
   774   01FD5E  C01D  F017         	movff	left_45@mR+1,stop@mR+1
   775   01FD62  EC4A  F0FD         	call	_stop	;wreg free
   776   01FD66                     
   777                           ;../dc_motor.c: 187:     mL-> direction = 0;
   778   01FD66  EE20 F001          	lfsr	2,1
   779   01FD6A  501A               	movf	left_45@mL^0,w,c
   780   01FD6C  26D9               	addwf	fsr2l,f,c
   781   01FD6E  501B               	movf	(left_45@mL+1)^0,w,c
   782   01FD70  22DA               	addwfc	fsr2h,f,c
   783   01FD72  0E00               	movlw	0
   784   01FD74  6EDF               	movwf	indf2,c
   785   01FD76                     
   786                           ;../dc_motor.c: 188:     mR-> direction = 1;
   787   01FD76  EE20 F001          	lfsr	2,1
   788   01FD7A  501C               	movf	left_45@mR^0,w,c
   789   01FD7C  26D9               	addwf	fsr2l,f,c
   790   01FD7E  501D               	movf	(left_45@mR+1)^0,w,c
   791   01FD80  22DA               	addwfc	fsr2h,f,c
   792   01FD82  0E01               	movlw	1
   793   01FD84  6EDF               	movwf	indf2,c
   794   01FD86                     
   795                           ;../dc_motor.c: 189:     LATFbits.LATF0 = 1;
   796   01FD86  807E               	bsf	126,0,c	;volatile
   797   01FD88                     
   798                           ;../dc_motor.c: 190:     int i;;../dc_motor.c: 191:     for (i = 0;i<count;i++){
   799   01FD88  0E00               	movlw	0
   800   01FD8A  6E23               	movwf	(left_45@i+1)^0,c
   801   01FD8C  0E00               	movlw	0
   802   01FD8E  6E22               	movwf	left_45@i^0,c
   803   01FD90  EF3A  F0FF         	goto	l1341
   804   01FD94                     l1313:
   805                           
   806                           ;../dc_motor.c: 193:         if (mL->power <= 30){mL->power += 10;}
   807   01FD94  C01A  FFD9         	movff	left_45@mL,fsr2l
   808   01FD98  C01B  FFDA         	movff	left_45@mL+1,fsr2h
   809   01FD9C  0E1F               	movlw	31
   810   01FD9E  60DF               	cpfslt	indf2,c
   811   01FDA0  EFD4  F0FE         	goto	u321
   812   01FDA4  EFD6  F0FE         	goto	u320
   813   01FDA8                     u321:
   814   01FDA8  EFDC  F0FE         	goto	l1317
   815   01FDAC                     u320:
   816   01FDAC  C01A  FFD9         	movff	left_45@mL,fsr2l
   817   01FDB0  C01B  FFDA         	movff	left_45@mL+1,fsr2h
   818   01FDB4  0E0A               	movlw	10
   819   01FDB6  26DF               	addwf	indf2,f,c
   820   01FDB8                     l1317:
   821                           
   822                           ;../dc_motor.c: 194:         if (mR->power <= 30){mR->power += 10;}
   823   01FDB8  C01C  FFD9         	movff	left_45@mR,fsr2l
   824   01FDBC  C01D  FFDA         	movff	left_45@mR+1,fsr2h
   825   01FDC0  0E1F               	movlw	31
   826   01FDC2  60DF               	cpfslt	indf2,c
   827   01FDC4  EFE6  F0FE         	goto	u331
   828   01FDC8  EFE8  F0FE         	goto	u330
   829   01FDCC                     u331:
   830   01FDCC  EFEE  F0FE         	goto	l1321
   831   01FDD0                     u330:
   832   01FDD0  C01C  FFD9         	movff	left_45@mR,fsr2l
   833   01FDD4  C01D  FFDA         	movff	left_45@mR+1,fsr2h
   834   01FDD8  0E0A               	movlw	10
   835   01FDDA  26DF               	addwf	indf2,f,c
   836   01FDDC                     l1321:
   837                           
   838                           ;../dc_motor.c: 195:         setMotorPWM(mL);
   839   01FDDC  C01A  F00E         	movff	left_45@mL,setMotorPWM@m
   840   01FDE0  C01B  F00F         	movff	left_45@mL+1,setMotorPWM@m+1
   841   01FDE4  EC4A  F0FF         	call	_setMotorPWM	;wreg free
   842   01FDE8                     
   843                           ;../dc_motor.c: 196:         setMotorPWM(mR);
   844   01FDE8  C01C  F00E         	movff	left_45@mR,setMotorPWM@m
   845   01FDEC  C01D  F00F         	movff	left_45@mR+1,setMotorPWM@m+1
   846   01FDF0  EC4A  F0FF         	call	_setMotorPWM	;wreg free
   847   01FDF4                     
   848                           ;../dc_motor.c: 197:         _delay((unsigned long)((20)*(64000000/4000000.0)));
   849   01FDF4  0E6A               	movlw	106
   850   01FDF6                     u537:
   851   01FDF6  2EE8               	decfsz	wreg,f,c
   852   01FDF8  D7FE               	bra	u537
   853   01FDFA  D000               	nop2	
   854   01FDFC                     l1327:
   855                           
   856                           ;../dc_motor.c: 192:     while ((mL->power <= 30) || (mR->power <= 30)){
   857   01FDFC  C01A  FFD9         	movff	left_45@mL,fsr2l
   858   01FE00  C01B  FFDA         	movff	left_45@mL+1,fsr2h
   859   01FE04  0E1E               	movlw	30
   860   01FE06  64DF               	cpfsgt	indf2,c
   861   01FE08  EF08  F0FF         	goto	u341
   862   01FE0C  EF0A  F0FF         	goto	u340
   863   01FE10                     u341:
   864   01FE10  EFCA  F0FE         	goto	l1313
   865   01FE14                     u340:
   866   01FE14  C01C  FFD9         	movff	left_45@mR,fsr2l
   867   01FE18  C01D  FFDA         	movff	left_45@mR+1,fsr2h
   868   01FE1C  0E1E               	movlw	30
   869   01FE1E  64DF               	cpfsgt	indf2,c
   870   01FE20  EF14  F0FF         	goto	u351
   871   01FE24  EF16  F0FF         	goto	u350
   872   01FE28                     u351:
   873   01FE28  EFCA  F0FE         	goto	l1313
   874   01FE2C                     u350:
   875   01FE2C                     
   876                           ;../dc_motor.c: 199:     _delay((unsigned long)((210)*(64000000/4000.0)));
   877   01FE2C  0E12               	movlw	18
   878   01FE2E  6E21               	movwf	(??_left_45+1)^0,c
   879   01FE30  0E0C               	movlw	12
   880   01FE32  6E20               	movwf	??_left_45^0,c
   881   01FE34  0E95               	movlw	149
   882   01FE36                     u547:
   883   01FE36  2EE8               	decfsz	wreg,f,c
   884   01FE38  D7FE               	bra	u547
   885   01FE3A  2E20               	decfsz	??_left_45^0,f,c
   886   01FE3C  D7FC               	bra	u547
   887   01FE3E  2E21               	decfsz	(??_left_45+1)^0,f,c
   888   01FE40  D7FA               	bra	u547
   889   01FE42  F000               	nop	
   890   01FE44                     
   891                           ;../dc_motor.c: 200:     stop(mL,mR);
   892   01FE44  C01A  F014         	movff	left_45@mL,stop@mL
   893   01FE48  C01B  F015         	movff	left_45@mL+1,stop@mL+1
   894   01FE4C  C01C  F016         	movff	left_45@mR,stop@mR
   895   01FE50  C01D  F017         	movff	left_45@mR+1,stop@mR+1
   896   01FE54  EC4A  F0FD         	call	_stop	;wreg free
   897   01FE58                     
   898                           ;../dc_motor.c: 201:     _delay((unsigned long)((150)*(64000000/4000.0)));
   899   01FE58  0E0D               	movlw	13
   900   01FE5A  6E21               	movwf	(??_left_45+1)^0,c
   901   01FE5C  0E2D               	movlw	45
   902   01FE5E  6E20               	movwf	??_left_45^0,c
   903   01FE60  0ED8               	movlw	216
   904   01FE62                     u557:
   905   01FE62  2EE8               	decfsz	wreg,f,c
   906   01FE64  D7FE               	bra	u557
   907   01FE66  2E20               	decfsz	??_left_45^0,f,c
   908   01FE68  D7FC               	bra	u557
   909   01FE6A  2E21               	decfsz	(??_left_45+1)^0,f,c
   910   01FE6C  D7FA               	bra	u557
   911   01FE6E                     
   912                           ;../dc_motor.c: 202:     LATFbits.LATF0 = 0;
   913   01FE6E  907E               	bcf	126,0,c	;volatile
   914   01FE70                     
   915                           ;../dc_motor.c: 203:     }
   916   01FE70  4A22               	infsnz	left_45@i^0,f,c
   917   01FE72  2A23               	incf	(left_45@i+1)^0,f,c
   918   01FE74                     l1341:
   919   01FE74  501E               	movf	left_45@count^0,w,c
   920   01FE76  5C22               	subwf	left_45@i^0,w,c
   921   01FE78  5023               	movf	(left_45@i+1)^0,w,c
   922   01FE7A  0A80               	xorlw	128
   923   01FE7C  6E20               	movwf	??_left_45^0,c
   924   01FE7E  501F               	movf	(left_45@count+1)^0,w,c
   925   01FE80  0A80               	xorlw	128
   926   01FE82  5820               	subwfb	??_left_45^0,w,c
   927   01FE84  A0D8               	btfss	status,0,c
   928   01FE86  EF47  F0FF         	goto	u361
   929   01FE8A  EF49  F0FF         	goto	u360
   930   01FE8E                     u361:
   931   01FE8E  EFFE  F0FE         	goto	l1327
   932   01FE92                     u360:
   933   01FE92  0012               	return		;funcret
   934   01FE94                     __end_of_left_45:
   935                           	callstack 0
   936                           
   937 ;; *************** function _stop *****************
   938 ;; Defined at:
   939 ;;		line 162 in file "../dc_motor.c"
   940 ;; Parameters:    Size  Location     Type
   941 ;;  mL              2   19[COMRAM] PTR struct DC_motor
   942 ;;		 -> motorL(9), 
   943 ;;  mR              2   21[COMRAM] PTR struct DC_motor
   944 ;;		 -> motorR(9), 
   945 ;; Auto vars:     Size  Location     Type
   946 ;;  i               2   23[COMRAM] int 
   947 ;; Return value:  Size  Location     Type
   948 ;;                  1    wreg      void 
   949 ;; Registers used:
   950 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   951 ;; Tracked objects:
   952 ;;		On entry : 0/0
   953 ;;		On exit  : 0/0
   954 ;;		Unchanged: 0/0
   955 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   956 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   957 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   958 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   959 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   960 ;;Total ram usage:        6 bytes
   961 ;; Hardware stack levels used: 1
   962 ;; Hardware stack levels required when called: 2
   963 ;; This function calls:
   964 ;;		_setMotorPWM
   965 ;; This function is called by:
   966 ;;		_left_45
   967 ;;		_right_45
   968 ;;		_main
   969 ;;		_forward
   970 ;;		_reverse
   971 ;; This function uses a non-reentrant model
   972 ;;
   973                           
   974                           	psect	text4
   975   01FA94                     __ptext4:
   976                           	callstack 0
   977   01FA94                     _stop:
   978                           	callstack 28
   979   01FA94                     
   980                           ;../dc_motor.c: 162: void stop(DC_motor *mL, DC_motor *mR);../dc_motor.c: 163: {;../dc_m
      +                          otor.c: 164:     mL->brakemode = 1;
   981   01FA94  EE20 F002          	lfsr	2,2
   982   01FA98  5014               	movf	stop@mL^0,w,c
   983   01FA9A  26D9               	addwf	fsr2l,f,c
   984   01FA9C  5015               	movf	(stop@mL+1)^0,w,c
   985   01FA9E  22DA               	addwfc	fsr2h,f,c
   986   01FAA0  0E01               	movlw	1
   987   01FAA2  6EDF               	movwf	indf2,c
   988                           
   989                           ;../dc_motor.c: 165:     mR->brakemode = 1;
   990   01FAA4  EE20 F002          	lfsr	2,2
   991   01FAA8  5016               	movf	stop@mR^0,w,c
   992   01FAAA  26D9               	addwf	fsr2l,f,c
   993   01FAAC  5017               	movf	(stop@mR+1)^0,w,c
   994   01FAAE  22DA               	addwfc	fsr2h,f,c
   995   01FAB0  0E01               	movlw	1
   996   01FAB2  6EDF               	movwf	indf2,c
   997   01FAB4                     
   998                           ;../dc_motor.c: 166:     LATDbits.LATD4 = 1;
   999   01FAB4  887C               	bsf	124,4,c	;volatile
  1000   01FAB6                     
  1001                           ;../dc_motor.c: 168:     for (int i = 70; i >= 0; i=i-10) {
  1002   01FAB6  0E00               	movlw	0
  1003   01FAB8  6E19               	movwf	(stop@i+1)^0,c
  1004   01FABA  0E46               	movlw	70
  1005   01FABC  6E18               	movwf	stop@i^0,c
  1006   01FABE                     l1249:
  1007                           
  1008                           ;../dc_motor.c: 169:         mL -> power = i;
  1009   01FABE  C014  FFD9         	movff	stop@mL,fsr2l
  1010   01FAC2  C015  FFDA         	movff	stop@mL+1,fsr2h
  1011   01FAC6  C018  FFDF         	movff	stop@i,indf2
  1012                           
  1013                           ;../dc_motor.c: 170:         mR -> power = i;
  1014   01FACA  C016  FFD9         	movff	stop@mR,fsr2l
  1015   01FACE  C017  FFDA         	movff	stop@mR+1,fsr2h
  1016   01FAD2  C018  FFDF         	movff	stop@i,indf2
  1017   01FAD6                     
  1018                           ;../dc_motor.c: 171:         setMotorPWM(mL);
  1019   01FAD6  C014  F00E         	movff	stop@mL,setMotorPWM@m
  1020   01FADA  C015  F00F         	movff	stop@mL+1,setMotorPWM@m+1
  1021   01FADE  EC4A  F0FF         	call	_setMotorPWM	;wreg free
  1022   01FAE2                     
  1023                           ;../dc_motor.c: 172:         setMotorPWM(mR);
  1024   01FAE2  C016  F00E         	movff	stop@mR,setMotorPWM@m
  1025   01FAE6  C017  F00F         	movff	stop@mR+1,setMotorPWM@m+1
  1026   01FAEA  EC4A  F0FF         	call	_setMotorPWM	;wreg free
  1027   01FAEE                     
  1028                           ;../dc_motor.c: 173:         _delay((unsigned long)((20)*(64000000/4000000.0)));
  1029   01FAEE  0E6A               	movlw	106
  1030   01FAF0                     u567:
  1031   01FAF0  2EE8               	decfsz	wreg,f,c
  1032   01FAF2  D7FE               	bra	u567
  1033   01FAF4  D000               	nop2	
  1034   01FAF6                     
  1035                           ;../dc_motor.c: 174:     }
  1036   01FAF6  0EF6               	movlw	246
  1037   01FAF8  2418               	addwf	stop@i^0,w,c
  1038   01FAFA  6E18               	movwf	stop@i^0,c
  1039   01FAFC  0EFF               	movlw	255
  1040   01FAFE  2019               	addwfc	(stop@i+1)^0,w,c
  1041   01FB00  6E19               	movwf	(stop@i+1)^0,c
  1042   01FB02  BE19               	btfsc	(stop@i+1)^0,7,c
  1043   01FB04  EF88  F0FD         	goto	u310
  1044   01FB08  EF86  F0FD         	goto	u311
  1045   01FB0C                     u311:
  1046   01FB0C  EF5F  F0FD         	goto	l1249
  1047   01FB10                     u310:
  1048   01FB10                     
  1049                           ;../dc_motor.c: 176:     mL->power = 0;
  1050   01FB10  C014  FFD9         	movff	stop@mL,fsr2l
  1051   01FB14  C015  FFDA         	movff	stop@mL+1,fsr2h
  1052   01FB18  0E00               	movlw	0
  1053   01FB1A  6EDF               	movwf	indf2,c
  1054                           
  1055                           ;../dc_motor.c: 177:     mR->power = 0;
  1056   01FB1C  C016  FFD9         	movff	stop@mR,fsr2l
  1057   01FB20  C017  FFDA         	movff	stop@mR+1,fsr2h
  1058   01FB24  0E00               	movlw	0
  1059   01FB26  6EDF               	movwf	indf2,c
  1060   01FB28                     
  1061                           ;../dc_motor.c: 178:     setMotorPWM(mL);
  1062   01FB28  C014  F00E         	movff	stop@mL,setMotorPWM@m
  1063   01FB2C  C015  F00F         	movff	stop@mL+1,setMotorPWM@m+1
  1064   01FB30  EC4A  F0FF         	call	_setMotorPWM	;wreg free
  1065   01FB34                     
  1066                           ;../dc_motor.c: 179:     setMotorPWM(mR);
  1067   01FB34  C016  F00E         	movff	stop@mR,setMotorPWM@m
  1068   01FB38  C017  F00F         	movff	stop@mR+1,setMotorPWM@m+1
  1069   01FB3C  EC4A  F0FF         	call	_setMotorPWM	;wreg free
  1070   01FB40                     
  1071                           ;../dc_motor.c: 180:     LATDbits.LATD4 = 0;
  1072   01FB40  987C               	bcf	124,4,c	;volatile
  1073   01FB42  0012               	return		;funcret
  1074   01FB44                     __end_of_stop:
  1075                           	callstack 0
  1076                           
  1077 ;; *************** function _setMotorPWM *****************
  1078 ;; Defined at:
  1079 ;;		line 72 in file "../dc_motor.c"
  1080 ;; Parameters:    Size  Location     Type
  1081 ;;  m               2   13[COMRAM] PTR struct DC_motor
  1082 ;;		 -> motorR(9), motorL(9), 
  1083 ;; Auto vars:     Size  Location     Type
  1084 ;;  negDuty         1   18[COMRAM] unsigned char 
  1085 ;;  posDuty         1   17[COMRAM] unsigned char 
  1086 ;; Return value:  Size  Location     Type
  1087 ;;                  1    wreg      void 
  1088 ;; Registers used:
  1089 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1090 ;; Tracked objects:
  1091 ;;		On entry : 0/0
  1092 ;;		On exit  : 0/0
  1093 ;;		Unchanged: 0/0
  1094 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1095 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1096 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1097 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1098 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1099 ;;Total ram usage:        6 bytes
  1100 ;; Hardware stack levels used: 1
  1101 ;; Hardware stack levels required when called: 1
  1102 ;; This function calls:
  1103 ;;		___lwdiv
  1104 ;;		___wmul
  1105 ;; This function is called by:
  1106 ;;		_stop
  1107 ;;		_left_45
  1108 ;;		_right_45
  1109 ;;		_forward
  1110 ;;		_reverse
  1111 ;; This function uses a non-reentrant model
  1112 ;;
  1113                           
  1114                           	psect	text5
  1115   01FE94                     __ptext5:
  1116                           	callstack 0
  1117   01FE94                     _setMotorPWM:
  1118                           	callstack 28
  1119   01FE94                     
  1120                           ;../dc_motor.c: 72: void setMotorPWM(DC_motor *m);../dc_motor.c: 73: {;../dc_motor.c: 74
      +                          :     unsigned char posDuty, negDuty;;../dc_motor.c: 76:     if(m->brakemode) {
  1121   01FE94  EE20 F002          	lfsr	2,2
  1122   01FE98  500E               	movf	setMotorPWM@m^0,w,c
  1123   01FE9A  26D9               	addwf	fsr2l,f,c
  1124   01FE9C  500F               	movf	(setMotorPWM@m+1)^0,w,c
  1125   01FE9E  22DA               	addwfc	fsr2h,f,c
  1126   01FEA0  50DF               	movf	indf2,w,c
  1127   01FEA2  B4D8               	btfsc	status,2,c
  1128   01FEA4  EF56  F0FF         	goto	u291
  1129   01FEA8  EF58  F0FF         	goto	u290
  1130   01FEAC                     u291:
  1131   01FEAC  EF8C  F0FF         	goto	l1229
  1132   01FEB0                     u290:
  1133   01FEB0                     
  1134                           ;../dc_motor.c: 77:         posDuty = m->PWMperiod - ((unsigned int)(m->power)*(m->PWMpe
      +                          riod))/100;
  1135   01FEB0  C00E  FFD9         	movff	setMotorPWM@m,fsr2l
  1136   01FEB4  C00F  FFDA         	movff	setMotorPWM@m+1,fsr2h
  1137   01FEB8  50DF               	movf	indf2,w,c
  1138   01FEBA  6E10               	movwf	??_setMotorPWM^0,c
  1139   01FEBC  5010               	movf	??_setMotorPWM^0,w,c
  1140   01FEBE  6E01               	movwf	___wmul@multiplier^0,c
  1141   01FEC0  6A02               	clrf	(___wmul@multiplier+1)^0,c
  1142   01FEC2  EE20 F003          	lfsr	2,3
  1143   01FEC6  500E               	movf	setMotorPWM@m^0,w,c
  1144   01FEC8  26D9               	addwf	fsr2l,f,c
  1145   01FECA  500F               	movf	(setMotorPWM@m+1)^0,w,c
  1146   01FECC  22DA               	addwfc	fsr2h,f,c
  1147   01FECE  CFDE F003          	movff	postinc2,___wmul@multiplicand
  1148   01FED2  CFDD F004          	movff	postdec2,___wmul@multiplicand+1
  1149   01FED6  EC90  F0FC         	call	___wmul	;wreg free
  1150   01FEDA  C001  F007         	movff	?___wmul,___lwdiv@dividend
  1151   01FEDE  C002  F008         	movff	?___wmul+1,___lwdiv@dividend+1
  1152   01FEE2  0E00               	movlw	0
  1153   01FEE4  6E0A               	movwf	(___lwdiv@divisor+1)^0,c
  1154   01FEE6  0E64               	movlw	100
  1155   01FEE8  6E09               	movwf	___lwdiv@divisor^0,c
  1156   01FEEA  ECC8  F0FC         	call	___lwdiv	;wreg free
  1157   01FEEE  EE20 F003          	lfsr	2,3
  1158   01FEF2  500E               	movf	setMotorPWM@m^0,w,c
  1159   01FEF4  26D9               	addwf	fsr2l,f,c
  1160   01FEF6  500F               	movf	(setMotorPWM@m+1)^0,w,c
  1161   01FEF8  22DA               	addwfc	fsr2h,f,c
  1162   01FEFA  50DF               	movf	indf2,w,c
  1163   01FEFC  6E11               	movwf	(??_setMotorPWM+1)^0,c
  1164   01FEFE  5007               	movf	?___lwdiv^0,w,c
  1165   01FF00  5C11               	subwf	(??_setMotorPWM+1)^0,w,c
  1166   01FF02  6E12               	movwf	setMotorPWM@posDuty^0,c
  1167   01FF04                     
  1168                           ;../dc_motor.c: 78:         negDuty = m->PWMperiod;
  1169   01FF04  EE20 F003          	lfsr	2,3
  1170   01FF08  500E               	movf	setMotorPWM@m^0,w,c
  1171   01FF0A  26D9               	addwf	fsr2l,f,c
  1172   01FF0C  500F               	movf	(setMotorPWM@m+1)^0,w,c
  1173   01FF0E  22DA               	addwfc	fsr2h,f,c
  1174   01FF10  50DF               	movf	indf2,w,c
  1175   01FF12  6E13               	movwf	setMotorPWM@negDuty^0,c
  1176                           
  1177                           ;../dc_motor.c: 79:     }
  1178   01FF14  EFAF  F0FF         	goto	l1233
  1179   01FF18                     l1229:
  1180                           
  1181                           ;../dc_motor.c: 81:         posDuty=0;
  1182   01FF18  0E00               	movlw	0
  1183   01FF1A  6E12               	movwf	setMotorPWM@posDuty^0,c
  1184   01FF1C                     
  1185                           ;../dc_motor.c: 82:   negDuty=((unsigned int)(m->power)*(m->PWMperiod))/100;
  1186   01FF1C  C00E  FFD9         	movff	setMotorPWM@m,fsr2l
  1187   01FF20  C00F  FFDA         	movff	setMotorPWM@m+1,fsr2h
  1188   01FF24  50DF               	movf	indf2,w,c
  1189   01FF26  6E10               	movwf	??_setMotorPWM^0,c
  1190   01FF28  5010               	movf	??_setMotorPWM^0,w,c
  1191   01FF2A  6E01               	movwf	___wmul@multiplier^0,c
  1192   01FF2C  6A02               	clrf	(___wmul@multiplier+1)^0,c
  1193   01FF2E  EE20 F003          	lfsr	2,3
  1194   01FF32  500E               	movf	setMotorPWM@m^0,w,c
  1195   01FF34  26D9               	addwf	fsr2l,f,c
  1196   01FF36  500F               	movf	(setMotorPWM@m+1)^0,w,c
  1197   01FF38  22DA               	addwfc	fsr2h,f,c
  1198   01FF3A  CFDE F003          	movff	postinc2,___wmul@multiplicand
  1199   01FF3E  CFDD F004          	movff	postdec2,___wmul@multiplicand+1
  1200   01FF42  EC90  F0FC         	call	___wmul	;wreg free
  1201   01FF46  C001  F007         	movff	?___wmul,___lwdiv@dividend
  1202   01FF4A  C002  F008         	movff	?___wmul+1,___lwdiv@dividend+1
  1203   01FF4E  0E00               	movlw	0
  1204   01FF50  6E0A               	movwf	(___lwdiv@divisor+1)^0,c
  1205   01FF52  0E64               	movlw	100
  1206   01FF54  6E09               	movwf	___lwdiv@divisor^0,c
  1207   01FF56  ECC8  F0FC         	call	___lwdiv	;wreg free
  1208   01FF5A  5007               	movf	?___lwdiv^0,w,c
  1209   01FF5C  6E13               	movwf	setMotorPWM@negDuty^0,c
  1210   01FF5E                     l1233:
  1211                           
  1212                           ;../dc_motor.c: 85:     if (m->direction) {
  1213   01FF5E  EE20 F001          	lfsr	2,1
  1214   01FF62  500E               	movf	setMotorPWM@m^0,w,c
  1215   01FF64  26D9               	addwf	fsr2l,f,c
  1216   01FF66  500F               	movf	(setMotorPWM@m+1)^0,w,c
  1217   01FF68  22DA               	addwfc	fsr2h,f,c
  1218   01FF6A  50DF               	movf	indf2,w,c
  1219   01FF6C  B4D8               	btfsc	status,2,c
  1220   01FF6E  EFBB  F0FF         	goto	u301
  1221   01FF72  EFBD  F0FF         	goto	u300
  1222   01FF76                     u301:
  1223   01FF76  EFDF  F0FF         	goto	l1237
  1224   01FF7A                     u300:
  1225   01FF7A                     
  1226                           ;../dc_motor.c: 86:         *(m->posDutyHighByte)= posDuty;
  1227   01FF7A  EE20 F005          	lfsr	2,5
  1228   01FF7E  500E               	movf	setMotorPWM@m^0,w,c
  1229   01FF80  26D9               	addwf	fsr2l,f,c
  1230   01FF82  500F               	movf	(setMotorPWM@m+1)^0,w,c
  1231   01FF84  22DA               	addwfc	fsr2h,f,c
  1232   01FF86  CFDE F010          	movff	postinc2,??_setMotorPWM
  1233   01FF8A  CFDD F011          	movff	postdec2,??_setMotorPWM+1
  1234   01FF8E  C010  FFD9         	movff	??_setMotorPWM,fsr2l
  1235   01FF92  C011  FFDA         	movff	??_setMotorPWM+1,fsr2h
  1236   01FF96  C012  FFDF         	movff	setMotorPWM@posDuty,indf2
  1237                           
  1238                           ;../dc_motor.c: 87:         *(m->negDutyHighByte)= negDuty;
  1239   01FF9A  EE20 F007          	lfsr	2,7
  1240   01FF9E  500E               	movf	setMotorPWM@m^0,w,c
  1241   01FFA0  26D9               	addwf	fsr2l,f,c
  1242   01FFA2  500F               	movf	(setMotorPWM@m+1)^0,w,c
  1243   01FFA4  22DA               	addwfc	fsr2h,f,c
  1244   01FFA6  CFDE F010          	movff	postinc2,??_setMotorPWM
  1245   01FFAA  CFDD F011          	movff	postdec2,??_setMotorPWM+1
  1246   01FFAE  C010  FFD9         	movff	??_setMotorPWM,fsr2l
  1247   01FFB2  C011  FFDA         	movff	??_setMotorPWM+1,fsr2h
  1248   01FFB6  C013  FFDF         	movff	setMotorPWM@negDuty,indf2
  1249                           
  1250                           ;../dc_motor.c: 88:     } else {
  1251   01FFBA  EFFF  F0FF         	goto	l149
  1252   01FFBE                     l1237:
  1253                           
  1254                           ;../dc_motor.c: 89:         *(m->posDutyHighByte)= negDuty;
  1255   01FFBE  EE20 F005          	lfsr	2,5
  1256   01FFC2  500E               	movf	setMotorPWM@m^0,w,c
  1257   01FFC4  26D9               	addwf	fsr2l,f,c
  1258   01FFC6  500F               	movf	(setMotorPWM@m+1)^0,w,c
  1259   01FFC8  22DA               	addwfc	fsr2h,f,c
  1260   01FFCA  CFDE F010          	movff	postinc2,??_setMotorPWM
  1261   01FFCE  CFDD F011          	movff	postdec2,??_setMotorPWM+1
  1262   01FFD2  C010  FFD9         	movff	??_setMotorPWM,fsr2l
  1263   01FFD6  C011  FFDA         	movff	??_setMotorPWM+1,fsr2h
  1264   01FFDA  C013  FFDF         	movff	setMotorPWM@negDuty,indf2
  1265                           
  1266                           ;../dc_motor.c: 90:         *(m->negDutyHighByte)= posDuty;
  1267   01FFDE  EE20 F007          	lfsr	2,7
  1268   01FFE2  500E               	movf	setMotorPWM@m^0,w,c
  1269   01FFE4  26D9               	addwf	fsr2l,f,c
  1270   01FFE6  500F               	movf	(setMotorPWM@m+1)^0,w,c
  1271   01FFE8  22DA               	addwfc	fsr2h,f,c
  1272   01FFEA  CFDE F010          	movff	postinc2,??_setMotorPWM
  1273   01FFEE  CFDD F011          	movff	postdec2,??_setMotorPWM+1
  1274   01FFF2  C010  FFD9         	movff	??_setMotorPWM,fsr2l
  1275   01FFF6  C011  FFDA         	movff	??_setMotorPWM+1,fsr2h
  1276   01FFFA  C012  FFDF         	movff	setMotorPWM@posDuty,indf2
  1277   01FFFE                     l149:
  1278   01FFFE  0012               	return		;funcret
  1279   020000                     __end_of_setMotorPWM:
  1280                           	callstack 0
  1281                           
  1282 ;; *************** function ___wmul *****************
  1283 ;; Defined at:
  1284 ;;		line 15 in file "D:\ECM\pic\sources\c99\common\Umul16.c"
  1285 ;; Parameters:    Size  Location     Type
  1286 ;;  multiplier      2    0[COMRAM] unsigned int 
  1287 ;;  multiplicand    2    2[COMRAM] unsigned int 
  1288 ;; Auto vars:     Size  Location     Type
  1289 ;;  product         2    4[COMRAM] unsigned int 
  1290 ;; Return value:  Size  Location     Type
  1291 ;;                  2    0[COMRAM] unsigned int 
  1292 ;; Registers used:
  1293 ;;		wreg, status,2, status,0, prodl, prodh
  1294 ;; Tracked objects:
  1295 ;;		On entry : 0/0
  1296 ;;		On exit  : 0/0
  1297 ;;		Unchanged: 0/0
  1298 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1299 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1300 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1301 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1302 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1303 ;;Total ram usage:        6 bytes
  1304 ;; Hardware stack levels used: 1
  1305 ;; This function calls:
  1306 ;;		Nothing
  1307 ;; This function is called by:
  1308 ;;		_setMotorPWM
  1309 ;; This function uses a non-reentrant model
  1310 ;;
  1311                           
  1312                           	psect	text6
  1313   01F920                     __ptext6:
  1314                           	callstack 0
  1315   01F920                     ___wmul:
  1316                           	callstack 28
  1317   01F920  5001               	movf	___wmul@multiplier^0,w,c
  1318   01F922  0203               	mulwf	___wmul@multiplicand^0,c
  1319   01F924  CFF3 F005          	movff	prodl,___wmul@product
  1320   01F928  CFF4 F006          	movff	prodh,___wmul@product+1
  1321   01F92C  5001               	movf	___wmul@multiplier^0,w,c
  1322   01F92E  0204               	mulwf	(___wmul@multiplicand+1)^0,c
  1323   01F930  50F3               	movf	243,w,c
  1324   01F932  2606               	addwf	(___wmul@product+1)^0,f,c
  1325   01F934  5002               	movf	(___wmul@multiplier+1)^0,w,c
  1326   01F936  0203               	mulwf	___wmul@multiplicand^0,c
  1327   01F938  50F3               	movf	243,w,c
  1328   01F93A  2606               	addwf	(___wmul@product+1)^0,f,c
  1329   01F93C  C005  F001         	movff	___wmul@product,?___wmul
  1330   01F940  C006  F002         	movff	___wmul@product+1,?___wmul+1
  1331   01F944  0012               	return		;funcret
  1332   01F946                     __end_of___wmul:
  1333                           	callstack 0
  1334                           
  1335 ;; *************** function ___lwdiv *****************
  1336 ;; Defined at:
  1337 ;;		line 7 in file "D:\ECM\pic\sources\c99\common\lwdiv.c"
  1338 ;; Parameters:    Size  Location     Type
  1339 ;;  dividend        2    6[COMRAM] unsigned int 
  1340 ;;  divisor         2    8[COMRAM] unsigned int 
  1341 ;; Auto vars:     Size  Location     Type
  1342 ;;  quotient        2   10[COMRAM] unsigned int 
  1343 ;;  counter         1   12[COMRAM] unsigned char 
  1344 ;; Return value:  Size  Location     Type
  1345 ;;                  2    6[COMRAM] unsigned int 
  1346 ;; Registers used:
  1347 ;;		wreg, status,2, status,0
  1348 ;; Tracked objects:
  1349 ;;		On entry : 0/0
  1350 ;;		On exit  : 0/0
  1351 ;;		Unchanged: 0/0
  1352 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1353 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1354 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1355 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1356 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1357 ;;Total ram usage:        7 bytes
  1358 ;; Hardware stack levels used: 1
  1359 ;; This function calls:
  1360 ;;		Nothing
  1361 ;; This function is called by:
  1362 ;;		_setMotorPWM
  1363 ;; This function uses a non-reentrant model
  1364 ;;
  1365                           
  1366                           	psect	text7
  1367   01F990                     __ptext7:
  1368                           	callstack 0
  1369   01F990                     ___lwdiv:
  1370                           	callstack 28
  1371   01F990  0E00               	movlw	0
  1372   01F992  6E0C               	movwf	(___lwdiv@quotient+1)^0,c
  1373   01F994  0E00               	movlw	0
  1374   01F996  6E0B               	movwf	___lwdiv@quotient^0,c
  1375   01F998  5009               	movf	___lwdiv@divisor^0,w,c
  1376   01F99A  100A               	iorwf	(___lwdiv@divisor+1)^0,w,c
  1377   01F99C  B4D8               	btfsc	status,2,c
  1378   01F99E  EFD3  F0FC         	goto	u261
  1379   01F9A2  EFD5  F0FC         	goto	u260
  1380   01F9A6                     u261:
  1381   01F9A6  EFFD  F0FC         	goto	l717
  1382   01F9AA                     u260:
  1383   01F9AA  0E01               	movlw	1
  1384   01F9AC  6E0D               	movwf	___lwdiv@counter^0,c
  1385   01F9AE  EFDD  F0FC         	goto	l1209
  1386   01F9B2                     l1207:
  1387   01F9B2  90D8               	bcf	status,0,c
  1388   01F9B4  3609               	rlcf	___lwdiv@divisor^0,f,c
  1389   01F9B6  360A               	rlcf	(___lwdiv@divisor+1)^0,f,c
  1390   01F9B8  2A0D               	incf	___lwdiv@counter^0,f,c
  1391   01F9BA                     l1209:
  1392   01F9BA  AE0A               	btfss	(___lwdiv@divisor+1)^0,7,c
  1393   01F9BC  EFE2  F0FC         	goto	u271
  1394   01F9C0  EFE4  F0FC         	goto	u270
  1395   01F9C4                     u271:
  1396   01F9C4  EFD9  F0FC         	goto	l1207
  1397   01F9C8                     u270:
  1398   01F9C8                     l1211:
  1399   01F9C8  90D8               	bcf	status,0,c
  1400   01F9CA  360B               	rlcf	___lwdiv@quotient^0,f,c
  1401   01F9CC  360C               	rlcf	(___lwdiv@quotient+1)^0,f,c
  1402   01F9CE  5009               	movf	___lwdiv@divisor^0,w,c
  1403   01F9D0  5C07               	subwf	___lwdiv@dividend^0,w,c
  1404   01F9D2  500A               	movf	(___lwdiv@divisor+1)^0,w,c
  1405   01F9D4  5808               	subwfb	(___lwdiv@dividend+1)^0,w,c
  1406   01F9D6  A0D8               	btfss	status,0,c
  1407   01F9D8  EFF0  F0FC         	goto	u281
  1408   01F9DC  EFF2  F0FC         	goto	u280
  1409   01F9E0                     u281:
  1410   01F9E0  EFF7  F0FC         	goto	l1219
  1411   01F9E4                     u280:
  1412   01F9E4  5009               	movf	___lwdiv@divisor^0,w,c
  1413   01F9E6  5E07               	subwf	___lwdiv@dividend^0,f,c
  1414   01F9E8  500A               	movf	(___lwdiv@divisor+1)^0,w,c
  1415   01F9EA  5A08               	subwfb	(___lwdiv@dividend+1)^0,f,c
  1416   01F9EC  800B               	bsf	___lwdiv@quotient^0,0,c
  1417   01F9EE                     l1219:
  1418   01F9EE  90D8               	bcf	status,0,c
  1419   01F9F0  320A               	rrcf	(___lwdiv@divisor+1)^0,f,c
  1420   01F9F2  3209               	rrcf	___lwdiv@divisor^0,f,c
  1421   01F9F4  2E0D               	decfsz	___lwdiv@counter^0,f,c
  1422   01F9F6  EFE4  F0FC         	goto	l1211
  1423   01F9FA                     l717:
  1424   01F9FA  C00B  F007         	movff	___lwdiv@quotient,?___lwdiv
  1425   01F9FE  C00C  F008         	movff	___lwdiv@quotient+1,?___lwdiv+1
  1426   01FA02  0012               	return		;funcret
  1427   01FA04                     __end_of___lwdiv:
  1428                           	callstack 0
  1429                           
  1430 ;; *************** function _initDCmotorsPWM *****************
  1431 ;; Defined at:
  1432 ;;		line 5 in file "../dc_motor.c"
  1433 ;; Parameters:    Size  Location     Type
  1434 ;;  PWMperiod       2    0[COMRAM] unsigned int 
  1435 ;; Auto vars:     Size  Location     Type
  1436 ;;		None
  1437 ;; Return value:  Size  Location     Type
  1438 ;;                  1    wreg      void 
  1439 ;; Registers used:
  1440 ;;		wreg, status,2
  1441 ;; Tracked objects:
  1442 ;;		On entry : 0/0
  1443 ;;		On exit  : 0/0
  1444 ;;		Unchanged: 0/0
  1445 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1446 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1447 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1448 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1449 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1450 ;;Total ram usage:        2 bytes
  1451 ;; Hardware stack levels used: 1
  1452 ;; This function calls:
  1453 ;;		Nothing
  1454 ;; This function is called by:
  1455 ;;		_main
  1456 ;; This function uses a non-reentrant model
  1457 ;;
  1458                           
  1459                           	psect	text8
  1460   01FA04                     __ptext8:
  1461                           	callstack 0
  1462   01FA04                     _initDCmotorsPWM:
  1463                           	callstack 30
  1464   01FA04                     
  1465                           ;../dc_motor.c: 7:     TRISEbits.TRISE2 = 0;
  1466   01FA04  9485               	bcf	133,2,c	;volatile
  1467                           
  1468                           ;../dc_motor.c: 8:     TRISEbits.TRISE4 = 0;
  1469   01FA06  9885               	bcf	133,4,c	;volatile
  1470                           
  1471                           ;../dc_motor.c: 9:     TRISCbits.TRISC7 = 0;
  1472   01FA08  9E83               	bcf	131,7,c	;volatile
  1473                           
  1474                           ;../dc_motor.c: 10:     TRISGbits.TRISG6 = 0;
  1475   01FA0A  9C87               	bcf	135,6,c	;volatile
  1476                           
  1477                           ;../dc_motor.c: 12:     LATEbits.LATE2 = 0;
  1478   01FA0C  947D               	bcf	125,2,c	;volatile
  1479                           
  1480                           ;../dc_motor.c: 13:     LATEbits.LATE4 = 0;
  1481   01FA0E  987D               	bcf	125,4,c	;volatile
  1482                           
  1483                           ;../dc_motor.c: 14:     LATCbits.LATC7 = 0;
  1484   01FA10  9E7B               	bcf	123,7,c	;volatile
  1485                           
  1486                           ;../dc_motor.c: 15:     LATGbits.LATG6 = 0;
  1487   01FA12  9C7F               	bcf	127,6,c	;volatile
  1488   01FA14                     
  1489                           ;../dc_motor.c: 18:     RE2PPS=0x05;
  1490   01FA14  0E05               	movlw	5
  1491   01FA16  010E               	movlb	14	; () banked
  1492   01FA18  6F74               	movwf	116,b	;volatile
  1493                           
  1494                           ;../dc_motor.c: 19:     RE4PPS=0x06;
  1495   01FA1A  0E06               	movlw	6
  1496   01FA1C  6F76               	movwf	118,b	;volatile
  1497                           
  1498                           ;../dc_motor.c: 20:     RC7PPS=0x07;
  1499   01FA1E  0E07               	movlw	7
  1500   01FA20  6F69               	movwf	105,b	;volatile
  1501                           
  1502                           ;../dc_motor.c: 21:     RG6PPS=0x08;
  1503   01FA22  0E08               	movlw	8
  1504   01FA24  6F88               	movwf	136,b	;volatile
  1505                           
  1506                           ;../dc_motor.c: 24:     T2CONbits.CKPS=0b100;
  1507   01FA26  50BD               	movf	189,w,c	;volatile
  1508   01FA28  0B8F               	andlw	-113
  1509   01FA2A  0940               	iorlw	64
  1510   01FA2C  6EBD               	movwf	189,c	;volatile
  1511                           
  1512                           ;../dc_motor.c: 25:     T2HLTbits.MODE=0b00000;
  1513   01FA2E  0EE0               	movlw	-32
  1514   01FA30  16BE               	andwf	190,f,c	;volatile
  1515                           
  1516                           ;../dc_motor.c: 26:     T2CLKCONbits.CS=0b0001;
  1517   01FA32  50BF               	movf	191,w,c	;volatile
  1518   01FA34  0BF0               	andlw	-16
  1519   01FA36  0901               	iorlw	1
  1520   01FA38  6EBF               	movwf	191,c	;volatile
  1521   01FA3A                     
  1522                           ; BSR set to: 14
  1523                           ;../dc_motor.c: 30:     T2PR=PWMperiod;
  1524   01FA3A  C001  FFBC         	movff	initDCmotorsPWM@PWMperiod,4028	;volatile
  1525   01FA3E                     
  1526                           ; BSR set to: 14
  1527                           ;../dc_motor.c: 31:     T2CONbits.ON=1;
  1528   01FA3E  8EBD               	bsf	189,7,c	;volatile
  1529                           
  1530                           ;../dc_motor.c: 35:     CCPR1H=0;
  1531   01FA40  0E00               	movlw	0
  1532   01FA42  6EAA               	movwf	170,c	;volatile
  1533                           
  1534                           ;../dc_motor.c: 36:     CCPR2H=0;
  1535   01FA44  0E00               	movlw	0
  1536   01FA46  6EA6               	movwf	166,c	;volatile
  1537                           
  1538                           ;../dc_motor.c: 37:     CCPR3H=0;
  1539   01FA48  0E00               	movlw	0
  1540   01FA4A  010F               	movlb	15	; () banked
  1541   01FA4C  6F25               	movwf	37,b	;volatile
  1542                           
  1543                           ;../dc_motor.c: 38:     CCPR4H=0;
  1544   01FA4E  0E00               	movlw	0
  1545   01FA50  6F21               	movwf	33,b	;volatile
  1546                           
  1547                           ;../dc_motor.c: 41:     CCPTMRS0bits.C1TSEL=0;
  1548   01FA52  0EFC               	movlw	-4
  1549   01FA54  16AD               	andwf	173,f,c	;volatile
  1550                           
  1551                           ;../dc_motor.c: 42:     CCPTMRS0bits.C2TSEL=0;
  1552   01FA56  0EF3               	movlw	-13
  1553   01FA58  16AD               	andwf	173,f,c	;volatile
  1554                           
  1555                           ;../dc_motor.c: 43:     CCPTMRS0bits.C3TSEL=0;
  1556   01FA5A  0ECF               	movlw	-49
  1557   01FA5C  16AD               	andwf	173,f,c	;volatile
  1558                           
  1559                           ;../dc_motor.c: 44:     CCPTMRS0bits.C4TSEL=0;
  1560   01FA5E  0E3F               	movlw	-193
  1561   01FA60  16AD               	andwf	173,f,c	;volatile
  1562   01FA62                     
  1563                           ; BSR set to: 15
  1564                           ;../dc_motor.c: 47:     CCP1CONbits.FMT=1;
  1565   01FA62  88AB               	bsf	171,4,c	;volatile
  1566                           
  1567                           ;../dc_motor.c: 48:     CCP1CONbits.CCP1MODE=0b1100;
  1568   01FA64  50AB               	movf	171,w,c	;volatile
  1569   01FA66  0BF0               	andlw	-16
  1570   01FA68  090C               	iorlw	12
  1571   01FA6A  6EAB               	movwf	171,c	;volatile
  1572   01FA6C                     
  1573                           ; BSR set to: 15
  1574                           ;../dc_motor.c: 49:     CCP1CONbits.EN=1;
  1575   01FA6C  8EAB               	bsf	171,7,c	;volatile
  1576   01FA6E                     
  1577                           ; BSR set to: 15
  1578                           ;../dc_motor.c: 52:     CCP2CONbits.FMT=1;
  1579   01FA6E  88A7               	bsf	167,4,c	;volatile
  1580                           
  1581                           ;../dc_motor.c: 53:     CCP2CONbits.CCP2MODE=0b1100;
  1582   01FA70  50A7               	movf	167,w,c	;volatile
  1583   01FA72  0BF0               	andlw	-16
  1584   01FA74  090C               	iorlw	12
  1585   01FA76  6EA7               	movwf	167,c	;volatile
  1586   01FA78                     
  1587                           ; BSR set to: 15
  1588                           ;../dc_motor.c: 54:     CCP2CONbits.EN=1;
  1589   01FA78  8EA7               	bsf	167,7,c	;volatile
  1590   01FA7A                     
  1591                           ; BSR set to: 15
  1592                           ;../dc_motor.c: 58:     CCP3CONbits.FMT=1;
  1593   01FA7A  8926               	bsf	38,4,b	;volatile
  1594                           
  1595                           ;../dc_motor.c: 59:     CCP3CONbits.CCP3MODE=0b1100;
  1596   01FA7C  5126               	movf	38,w,b	;volatile
  1597   01FA7E  0BF0               	andlw	-16
  1598   01FA80  090C               	iorlw	12
  1599   01FA82  6F26               	movwf	38,b	;volatile
  1600   01FA84                     
  1601                           ; BSR set to: 15
  1602                           ;../dc_motor.c: 60:     CCP3CONbits.EN=1;
  1603   01FA84  8F26               	bsf	38,7,b	;volatile
  1604   01FA86                     
  1605                           ; BSR set to: 15
  1606                           ;../dc_motor.c: 63:     CCP4CONbits.FMT=1;
  1607   01FA86  8922               	bsf	34,4,b	;volatile
  1608                           
  1609                           ;../dc_motor.c: 64:     CCP4CONbits.CCP4MODE=0b1100;
  1610   01FA88  5122               	movf	34,w,b	;volatile
  1611   01FA8A  0BF0               	andlw	-16
  1612   01FA8C  090C               	iorlw	12
  1613   01FA8E  6F22               	movwf	34,b	;volatile
  1614   01FA90                     
  1615                           ; BSR set to: 15
  1616                           ;../dc_motor.c: 65:     CCP4CONbits.EN=1;
  1617   01FA90  8F22               	bsf	34,7,b	;volatile
  1618   01FA92                     
  1619                           ; BSR set to: 15
  1620   01FA92  0012               	return		;funcret
  1621   01FA94                     __end_of_initDCmotorsPWM:
  1622                           	callstack 0
  1623                           
  1624 ;; *************** function _buggyLEDs_init *****************
  1625 ;; Defined at:
  1626 ;;		line 113 in file "../dc_motor.c"
  1627 ;; Parameters:    Size  Location     Type
  1628 ;;		None
  1629 ;; Auto vars:     Size  Location     Type
  1630 ;;		None
  1631 ;; Return value:  Size  Location     Type
  1632 ;;                  1    wreg      void 
  1633 ;; Registers used:
  1634 ;;		None
  1635 ;; Tracked objects:
  1636 ;;		On entry : 0/0
  1637 ;;		On exit  : 0/0
  1638 ;;		Unchanged: 0/0
  1639 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1640 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1641 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1642 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1643 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1644 ;;Total ram usage:        0 bytes
  1645 ;; Hardware stack levels used: 1
  1646 ;; This function calls:
  1647 ;;		Nothing
  1648 ;; This function is called by:
  1649 ;;		_main
  1650 ;; This function uses a non-reentrant model
  1651 ;;
  1652                           
  1653                           	psect	text9
  1654   01F90A                     __ptext9:
  1655                           	callstack 0
  1656   01F90A                     _buggyLEDs_init:
  1657                           	callstack 30
  1658   01F90A                     
  1659                           ;../dc_motor.c: 114:     LATHbits.LATH1 = 0;
  1660   01F90A  9280               	bcf	128,1,c	;volatile
  1661                           
  1662                           ;../dc_motor.c: 115:     LATDbits.LATD3 = 0;
  1663   01F90C  967C               	bcf	124,3,c	;volatile
  1664                           
  1665                           ;../dc_motor.c: 116:     LATDbits.LATD4 = 0;
  1666   01F90E  987C               	bcf	124,4,c	;volatile
  1667                           
  1668                           ;../dc_motor.c: 117:     LATFbits.LATF0 = 0;
  1669   01F910  907E               	bcf	126,0,c	;volatile
  1670                           
  1671                           ;../dc_motor.c: 118:     LATHbits.LATH0 = 0;
  1672   01F912  9080               	bcf	128,0,c	;volatile
  1673                           
  1674                           ;../dc_motor.c: 120:     TRISHbits.TRISH1 = 0;
  1675   01F914  9288               	bcf	136,1,c	;volatile
  1676                           
  1677                           ;../dc_motor.c: 121:     TRISDbits.TRISD3 = 0;
  1678   01F916  9684               	bcf	132,3,c	;volatile
  1679                           
  1680                           ;../dc_motor.c: 122:     TRISDbits.TRISD4 = 0;
  1681   01F918  9884               	bcf	132,4,c	;volatile
  1682                           
  1683                           ;../dc_motor.c: 123:     TRISFbits.TRISF0 = 0;
  1684   01F91A  9086               	bcf	134,0,c	;volatile
  1685                           
  1686                           ;../dc_motor.c: 124:     TRISHbits.TRISH0 = 0;
  1687   01F91C  9088               	bcf	136,0,c	;volatile
  1688   01F91E  0012               	return		;funcret
  1689   01F920                     __end_of_buggyLEDs_init:
  1690                           	callstack 0
  1691   000000                     
  1692                           	psect	rparam
  1693   000000                     
  1694                           	psect	idloc
  1695                           
  1696                           ;Config register IDLOC0 @ 0x200000
  1697                           ;	unspecified, using default values
  1698   200000                     	org	2097152
  1699   200000  0FFF               	dw	4095
  1700                           
  1701                           ;Config register IDLOC1 @ 0x200002
  1702                           ;	unspecified, using default values
  1703   200002                     	org	2097154
  1704   200002  0FFF               	dw	4095
  1705                           
  1706                           ;Config register IDLOC2 @ 0x200004
  1707                           ;	unspecified, using default values
  1708   200004                     	org	2097156
  1709   200004  0FFF               	dw	4095
  1710                           
  1711                           ;Config register IDLOC3 @ 0x200006
  1712                           ;	unspecified, using default values
  1713   200006                     	org	2097158
  1714   200006  0FFF               	dw	4095
  1715                           
  1716                           ;Config register IDLOC4 @ 0x200008
  1717                           ;	unspecified, using default values
  1718   200008                     	org	2097160
  1719   200008  0FFF               	dw	4095
  1720                           
  1721                           ;Config register IDLOC5 @ 0x20000A
  1722                           ;	unspecified, using default values
  1723   20000A                     	org	2097162
  1724   20000A  0FFF               	dw	4095
  1725                           
  1726                           ;Config register IDLOC6 @ 0x20000C
  1727                           ;	unspecified, using default values
  1728   20000C                     	org	2097164
  1729   20000C  0FFF               	dw	4095
  1730                           
  1731                           ;Config register IDLOC7 @ 0x20000E
  1732                           ;	unspecified, using default values
  1733   20000E                     	org	2097166
  1734   20000E  0FFF               	dw	4095
  1735                           
  1736                           	psect	config
  1737                           
  1738                           ;Config register CONFIG1L @ 0x300000
  1739                           ;	External Oscillator mode Selection bits
  1740                           ;	FEXTOSC = HS, HS (crystal oscillator) above 8 MHz; PFM set to high power
  1741                           ;	Power-up default value for COSC bits
  1742                           ;	RSTOSC = EXTOSC_4PLL, EXTOSC with 4x PLL, with EXTOSC operating per FEXTOSC bits
  1743   300000                     	org	3145728
  1744   300000  AA                 	db	170
  1745                           
  1746                           ;Config register CONFIG1H @ 0x300001
  1747                           ;	unspecified, using default values
  1748                           ;	Clock Out Enable bit
  1749                           ;	CLKOUTEN = 0x1, unprogrammed default
  1750                           ;	Clock Switch Enable bit
  1751                           ;	CSWEN = 0x1, unprogrammed default
  1752                           ;	Fail-Safe Clock Monitor Enable bit
  1753                           ;	FCMEN = 0x1, unprogrammed default
  1754   300001                     	org	3145729
  1755   300001  FF                 	db	255
  1756                           
  1757                           ;Config register CONFIG2L @ 0x300002
  1758                           ;	unspecified, using default values
  1759                           ;	Master Clear Enable bit
  1760                           ;	MCLRE = 0x1, unprogrammed default
  1761                           ;	Power-up Timer Enable bit
  1762                           ;	PWRTE = 0x1, unprogrammed default
  1763                           ;	Low-power BOR enable bit
  1764                           ;	LPBOREN = 0x1, unprogrammed default
  1765                           ;	Brown-out Reset Enable bits
  1766                           ;	BOREN = 0x3, unprogrammed default
  1767   300002                     	org	3145730
  1768   300002  FF                 	db	255
  1769                           
  1770                           ;Config register CONFIG2H @ 0x300003
  1771                           ;	unspecified, using default values
  1772                           ;	Brown Out Reset Voltage selection bits
  1773                           ;	BORV = 0x3, unprogrammed default
  1774                           ;	ZCD Disable bit
  1775                           ;	ZCD = 0x1, unprogrammed default
  1776                           ;	PPSLOCK bit One-Way Set Enable bit
  1777                           ;	PPS1WAY = 0x1, unprogrammed default
  1778                           ;	Stack Full/Underflow Reset Enable bit
  1779                           ;	STVREN = 0x1, unprogrammed default
  1780                           ;	Debugger Enable bit
  1781                           ;	DEBUG = 0x1, unprogrammed default
  1782                           ;	Extended Instruction Set Enable bit
  1783                           ;	XINST = 0x1, unprogrammed default
  1784   300003                     	org	3145731
  1785   300003  FF                 	db	255
  1786                           
  1787                           ;Config register CONFIG3L @ 0x300004
  1788                           ;	WDT Period Select bits
  1789                           ;	WDTCPS = WDTCPS_31, Divider ratio 1:65536; software control of WDTPS
  1790                           ;	WDT operating mode
  1791                           ;	WDTE = OFF, WDT Disabled
  1792   300004                     	org	3145732
  1793   300004  9F                 	db	159
  1794                           
  1795                           ;Config register CONFIG3H @ 0x300005
  1796                           ;	unspecified, using default values
  1797                           ;	WDT Window Select bits
  1798                           ;	WDTCWS = 0x7, unprogrammed default
  1799                           ;	WDT input clock selector
  1800                           ;	WDTCCS = 0x7, unprogrammed default
  1801   300005                     	org	3145733
  1802   300005  FF                 	db	255
  1803                           
  1804                           ;Config register CONFIG4L @ 0x300006
  1805                           ;	unspecified, using default values
  1806                           ;	Write Protection Block 0
  1807                           ;	WRT0 = 0x1, unprogrammed default
  1808                           ;	Write Protection Block 1
  1809                           ;	WRT1 = 0x1, unprogrammed default
  1810                           ;	Write Protection Block 2
  1811                           ;	WRT2 = 0x1, unprogrammed default
  1812                           ;	Write Protection Block 3
  1813                           ;	WRT3 = 0x1, unprogrammed default
  1814                           ;	Write Protection Block 3
  1815                           ;	WRT4 = 0x1, unprogrammed default
  1816                           ;	Write Protection Block 3
  1817                           ;	WRT5 = 0x1, unprogrammed default
  1818                           ;	Write Protection Block 3
  1819                           ;	WRT6 = 0x1, unprogrammed default
  1820                           ;	Write Protection Block 3
  1821                           ;	WRT7 = 0x1, unprogrammed default
  1822   300006                     	org	3145734
  1823   300006  FF                 	db	255
  1824                           
  1825                           ;Config register CONFIG4H @ 0x300007
  1826                           ;	unspecified, using default values
  1827                           ;	Configuration Register Write Protection bit
  1828                           ;	WRTC = 0x1, unprogrammed default
  1829                           ;	Boot Block Write Protection bit
  1830                           ;	WRTB = 0x1, unprogrammed default
  1831                           ;	Data EEPROM Write Protection bit
  1832                           ;	WRTD = 0x1, unprogrammed default
  1833                           ;	Scanner Enable bit
  1834                           ;	SCANE = 0x1, unprogrammed default
  1835                           ;	Low Voltage Programming Enable bit
  1836                           ;	LVP = 0x1, unprogrammed default
  1837   300007                     	org	3145735
  1838   300007  FF                 	db	255
  1839                           
  1840                           ;Config register CONFIG5L @ 0x300008
  1841                           ;	unspecified, using default values
  1842                           ;	UserNVM Program Memory Code Protection bit
  1843                           ;	CP = 0x1, unprogrammed default
  1844                           ;	DataNVM Memory Code Protection bit
  1845                           ;	CPD = 0x1, unprogrammed default
  1846   300008                     	org	3145736
  1847   300008  FF                 	db	255
  1848                           
  1849                           ;Config register CONFIG5H @ 0x300009
  1850                           ;	unspecified, using default values
  1851   300009                     	org	3145737
  1852   300009  FF                 	db	255
  1853                           
  1854                           ;Config register CONFIG6L @ 0x30000A
  1855                           ;	unspecified, using default values
  1856                           ;	Table Read Protection Block 0
  1857                           ;	EBTR0 = 0x1, unprogrammed default
  1858                           ;	Table Read Protection Block 1
  1859                           ;	EBTR1 = 0x1, unprogrammed default
  1860                           ;	Table Read Protection Block 2
  1861                           ;	EBTR2 = 0x1, unprogrammed default
  1862                           ;	Table Read Protection Block 3
  1863                           ;	EBTR3 = 0x1, unprogrammed default
  1864                           ;	Table Read Protection Block 4
  1865                           ;	EBTR4 = 0x1, unprogrammed default
  1866                           ;	Table Read Protection Block 5
  1867                           ;	EBTR5 = 0x1, unprogrammed default
  1868                           ;	Table Read Protection Block 6
  1869                           ;	EBTR6 = 0x1, unprogrammed default
  1870                           ;	Table Read Protection Block 7
  1871                           ;	EBTR7 = 0x1, unprogrammed default
  1872   30000A                     	org	3145738
  1873   30000A  FF                 	db	255
  1874                           
  1875                           ;Config register CONFIG6H @ 0x30000B
  1876                           ;	unspecified, using default values
  1877                           ;	Boot Block Table Read Protection bit
  1878                           ;	EBTRB = 0x1, unprogrammed default
  1879   30000B                     	org	3145739
  1880   30000B  FF                 	db	255
  1881                           tosu	equ	0xFFF
  1882                           tosh	equ	0xFFE
  1883                           tosl	equ	0xFFD
  1884                           stkptr	equ	0xFFC
  1885                           pclatu	equ	0xFFB
  1886                           pclath	equ	0xFFA
  1887                           pcl	equ	0xFF9
  1888                           tblptru	equ	0xFF8
  1889                           tblptrh	equ	0xFF7
  1890                           tblptrl	equ	0xFF6
  1891                           tablat	equ	0xFF5
  1892                           prodh	equ	0xFF4
  1893                           prodl	equ	0xFF3
  1894                           indf0	equ	0xFEF
  1895                           postinc0	equ	0xFEE
  1896                           postdec0	equ	0xFED
  1897                           preinc0	equ	0xFEC
  1898                           plusw0	equ	0xFEB
  1899                           fsr0h	equ	0xFEA
  1900                           fsr0l	equ	0xFE9
  1901                           wreg	equ	0xFE8
  1902                           indf1	equ	0xFE7
  1903                           postinc1	equ	0xFE6
  1904                           postdec1	equ	0xFE5
  1905                           preinc1	equ	0xFE4
  1906                           plusw1	equ	0xFE3
  1907                           fsr1h	equ	0xFE2
  1908                           fsr1l	equ	0xFE1
  1909                           bsr	equ	0xFE0
  1910                           indf2	equ	0xFDF
  1911                           postinc2	equ	0xFDE
  1912                           postdec2	equ	0xFDD
  1913                           preinc2	equ	0xFDC
  1914                           plusw2	equ	0xFDB
  1915                           fsr2h	equ	0xFDA
  1916                           fsr2l	equ	0xFD9
  1917                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         18
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     39      57
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          234      0       0

Pointer List with Targets:

    motor_init@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> motorR(COMRAM[9]), 

    motor_init@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> motorL(COMRAM[9]), 

    right_45@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllll[1]), CCPR2H(BITBIGSFRhhhlll[1]), 

    right_45@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllll[1]), CCPR1H(BITBIGSFRhhhlll[1]), 

    right_45@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> motorR(COMRAM[9]), 

    right_45@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllll[1]), CCPR2H(BITBIGSFRhhhlll[1]), 

    right_45@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllll[1]), CCPR1H(BITBIGSFRhhhlll[1]), 

    right_45@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> motorL(COMRAM[9]), 

    left_45@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllll[1]), CCPR2H(BITBIGSFRhhhlll[1]), 

    left_45@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllll[1]), CCPR1H(BITBIGSFRhhhlll[1]), 

    left_45@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllll[1]), CCPR2H(BITBIGSFRhhhlll[1]), 

    left_45@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllll[1]), CCPR1H(BITBIGSFRhhhlll[1]), 

    left_45@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> motorR(COMRAM[9]), 

    left_45@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> motorL(COMRAM[9]), 

    stop@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllll[1]), CCPR2H(BITBIGSFRhhhlll[1]), 

    stop@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllll[1]), CCPR1H(BITBIGSFRhhhlll[1]), 

    stop@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> motorR(COMRAM[9]), 

    stop@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllll[1]), CCPR2H(BITBIGSFRhhhlll[1]), 

    stop@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllll[1]), CCPR1H(BITBIGSFRhhhlll[1]), 

    stop@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> motorL(COMRAM[9]), 

    reverse@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllll[1]), CCPR2H(BITBIGSFRhhhlll[1]), 

    reverse@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllll[1]), CCPR1H(BITBIGSFRhhhlll[1]), 

    reverse@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllll[1]), CCPR2H(BITBIGSFRhhhlll[1]), 

    reverse@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllll[1]), CCPR1H(BITBIGSFRhhhlll[1]), 

    forward@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllll[1]), CCPR2H(BITBIGSFRhhhlll[1]), 

    forward@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllll[1]), CCPR1H(BITBIGSFRhhhlll[1]), 

    forward@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllll[1]), CCPR2H(BITBIGSFRhhhlll[1]), 

    forward@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllll[1]), CCPR1H(BITBIGSFRhhhlll[1]), 

    setMotorPWM@m.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllll[1]), CCPR2H(BITBIGSFRhhhlll[1]), 

    setMotorPWM@m.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllll[1]), CCPR1H(BITBIGSFRhhhlll[1]), 

    setMotorPWM@m	PTR struct DC_motor size(2) Largest target is 11
		 -> motorR(COMRAM[9]), motorL(COMRAM[9]), 

    motorR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllll[1]), CCPR2H(BITBIGSFRhhhlll[1]), 

    motorR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllll[1]), CCPR1H(BITBIGSFRhhhlll[1]), 

    S280DC_motor$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllll[1]), CCPR2H(BITBIGSFRhhhlll[1]), 

    motorL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllll[1]), CCPR2H(BITBIGSFRhhhlll[1]), 

    S280DC_motor$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllll[1]), CCPR1H(BITBIGSFRhhhlll[1]), 

    motorL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllll[1]), CCPR1H(BITBIGSFRhhhlll[1]), 


Critical Paths under _main in COMRAM

    _main->_left_45
    _main->_right_45
    _right_45->_stop
    _left_45->_stop
    _stop->_setMotorPWM
    _setMotorPWM->___lwdiv
    ___lwdiv->___wmul

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0   16573
                                             35 COMRAM     4     4      0
                     _buggyLEDs_init
                    _initDCmotorsPWM
                            _left_45
                         _motor_init
                           _right_45
                               _stop
 ---------------------------------------------------------------------------------
 (1) _right_45                                            10     4      6    6352
                                             25 COMRAM    10     4      6
                        _setMotorPWM
                               _stop
 ---------------------------------------------------------------------------------
 (1) _motor_init                                           4     0      4     152
                                              0 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (1) _left_45                                             10     4      6    6396
                                             25 COMRAM    10     4      6
                        _setMotorPWM
                               _stop
 ---------------------------------------------------------------------------------
 (1) _stop                                                 6     2      4    3529
                                             19 COMRAM     6     2      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _setMotorPWM                                          6     4      2    2285
                                             13 COMRAM     6     4      2
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     355
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     358
                                              6 COMRAM     7     3      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _initDCmotorsPWM                                      2     0      2      98
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _buggyLEDs_init                                       0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _buggyLEDs_init
   _initDCmotorsPWM
   _left_45
     _setMotorPWM
       ___lwdiv
         ___wmul (ARG)
       ___wmul
     _stop
       _setMotorPWM
   _motor_init
   _right_45
     _setMotorPWM
     _stop
   _stop

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             DE9      0       0      51        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK13           EA      0       0      30        0.0%
BANK13              EA      0       0      31        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     27      39       1       60.0%
BITBIGSFRhlllh      54      0       0      38        0.0%
BITBIGSFRlllhll     4B      0       0      48        0.0%
BITBIGSFRhlllll     46      0       0      40        0.0%
BITBIGSFRhhhh       40      0       0      32        0.0%
BITBIGSFRllh        2D      0       0      42        0.0%
BITBIGSFRllll       2D      0       0      49        0.0%
BITBIGSFRlllhhh     1E      0       0      43        0.0%
BITBIGSFRhhhlll     1D      0       0      36        0.0%
BITBIGSFRlllhhh     11      0       0      44        0.0%
BITBIGSFRhhhlhh      E      0       0      33        0.0%
BITBIGSFRlllhlh      5      0       0      47        0.0%
BITBIGSFRlllhhl      3      0       0      46        0.0%
BITBIGSFRhllllh      2      0       0      39        0.0%
BITBIGSFRhhhllh      2      0       0      35        0.0%
BITBIGSFRhlhh        2      0       0      37        0.0%
BITBIGSFRhhhlhl      1      0       0      34        0.0%
BITBIGSFRlllhhh      1      0       0      45        0.0%
BITBIGSFRlh          1      0       0      41        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      39      50        0.0%
DATA                 0      0      39       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.40 build 20220703182018 
Symbol Table                                                                                   Thu Mar 09 17:03:15 2023

     ___wmul@multiplicand 0003                       l142 FA92                       l223 FC24  
                     l152 F98E                       l226 F944                       l155 F91E  
                     l149 FFFE                       l176 FB42                       l187 FE92  
                     l198 FD50                       l724 FA02                       l717 F9FA  
                     u300 FF7A                       u301 FF76                       u310 FB10  
                     u311 FB0C                       u320 FDAC                       u400 FCEC  
                     u321 FDA8                       u401 FCE8                       u330 FDD0  
                     u410 FD50                       u331 FDCC                       u411 FD4C  
                     u260 F9AA                       u340 FE14                       u261 F9A6  
                     u341 FE10                       u270 F9C8                       u350 FE2C  
                     u271 F9C4                       u351 FE28                       u280 F9E4  
                     u360 FE92                       u281 F9E0                       u361 FE8E  
                     u290 FEB0                       u370 FC6C                       u291 FEAC  
                     u507 FCB6                       u371 FC68                       u380 FC90  
                     u460 FC24                       u517 FCF6                       u381 FC8C  
                     u461 FC20                       u390 FCD4                       u527 FD22  
                     u391 FCD0                       u537 FDF6                       u547 FE36  
                     u557 FE62                       u477 FB7A                       u567 FAF0  
                     u487 FBC2                       u497 FBF6                       wreg 000FE8  
                    l1011 F90A                      l1201 F990                      l1211 F9C8  
                    l1203 F998                      l1221 F9F4                      l1213 F9CE  
                    l1205 F9AA                      l1301 F97E                      l1215 F9E4  
                    l1207 F9B2                      l1231 FF1C                      l1223 FE94  
                    l1311 FD88                      l1303 FD52                      l1217 F9EC  
                    l1209 F9BA                      l1233 FF5E                      l1225 FEB0  
                    l1241 FAB4                      l1321 FDDC                      l1313 FD94  
                    l1305 FD66                      l1401 FB54                      l1219 F9EE  
                    l1235 FF7A                      l1227 FF04                      l1251 FAD6  
                    l1243 FAB6                      l1331 FE2C                      l1323 FDE8  
                    l1315 FDAC                      l1307 FD76                      l1411 FB88  
                    l1403 FB68                      l1237 FFBE                      l1229 FF18  
                    l1261 FB10                      l1253 FAE2                      l1333 FE44  
                    l1325 FDF4                      l1317 FDB8                      l1341 FE74  
                    l1309 FD86                      l1421 FC08                      l1413 FBA4  
                    l1271 FA14                      l1263 FB28                      l1255 FAEE  
                    l1239 FA94                      l1335 FE58                      l1327 FDFC  
                    l1319 FDD0                      l1351 FC78                      l1343 FC28  
                    l1415 FBD0                      l1281 FA6E                      l1273 FA3A  
                    l1265 FB34                      l1257 FAF6                      l1249 FABE  
                    l1337 FE6E                      l1329 FE14                      l1361 FCBC  
                    l1353 FC90                      l1345 FC48                      l1417 FBEC  
                    l1409 FB70                      l1291 FA90                      l1283 FA78  
                    l1275 FA3E                      l1195 F920                      l1267 FB40  
                    l1259 FB02                      l1339 FE70                      l1371 FD2E  
                    l1363 FCD4                      l1355 FC9C                      l1347 FC54  
                    l1419 FC04                      l1285 FA7A                      l1277 FA62  
                    l1269 FA04                      l1197 F93C                      l1293 F946  
                    l1365 FCEC                      l1357 FCA8                      l1349 FC6C  
                    l1373 FD32                      l1287 FA84                      l1279 FA6C  
                    l1295 F952                      l1367 FD04                      l1359 FCB4  
                    l1289 FA86                      l1297 F95A                      l1369 FD18  
                    l1299 F976                      l1397 FB44                      l1399 FB50  
                    _T2PR 000FBC                      _main FB44                      fsr2h 000FDA  
                    indf2 000FDF                      fsr2l 000FD9                      _stop FA94  
                    prodh 000FF4                      prodl 000FF3                      start 0000  
            ___param_bank 000000                     ?_main 0001                     ?_stop 0014  
         __end_of___lwdiv FA04              left_45@count 001E           __end_of_left_45 FE94  
                   main@i 0026                     stop@i 0018                     status 000FD8  
         __initialization F8F8              __end_of_main FC28              __end_of_stop FB44  
                  ??_main 0024                    ??_stop 0018             __activetblptr 000000  
            ?_setMotorPWM 000E                    _CCPR1H 000FAA                    _CCPR2H 000FA6  
                  _CCPR3H 000F25                    _CCPR4H 000F21                    _RE2PPS 000E74  
                  _RD5PPS 000E6F                    _RC7PPS 000E69                    _RE4PPS 000E76  
                  _RD6PPS 000E70                    _RG6PPS 000E88              _CCPTMRS0bits 000FAD  
                  ___wmul F920                 ??___lwdiv 000B          ??_buggyLEDs_init 0001  
                  clear_0 F8FE                    _motorL 0031                    _motorR 0028  
                  isa$std 000001                 ??_left_45 0020          __end_of_right_45 FD52  
                  stop@mL 0014                    stop@mR 0016         ??_initDCmotorsPWM 0003  
              __accesstop 0060   __end_of__initialization F904             ___rparam_used 000001  
          __pcstackCOMRAM 0001              _T2CLKCONbits 000FBF                   ?___wmul 0001  
                 _SSP2ADD 000ED6                   _SSP2BUF 000ED5                 ?_right_45 001A  
                 __Hparam 0000                   __Lparam 0000                   ___lwdiv F990  
                 __pcinit F8F8                   __ramtop 0E00                   __ptext0 FB44  
                 __ptext1 FC28                   __ptext2 F946                   __ptext3 FD52  
                 __ptext4 FA94                   __ptext5 FE94                   __ptext6 F920  
                 __ptext7 F990                   __ptext8 FA04                   __ptext9 F90A  
                 _left_45 FD52                 _T2CONbits 000FBD                 _T2HLTbits 000FBE  
           right_45@count 001E      end_of_initialization F904                ??_right_45 0020  
                 postdec2 000FDD                   postinc0 000FEE                   postinc2 000FDE  
              _motor_init F946           _initDCmotorsPWM FA04        setMotorPWM@negDuty 0013  
      setMotorPWM@posDuty 0012                 _TRISCbits 000F83                 _TRISDbits 000F84  
               _TRISEbits 000F85                 _TRISFbits 000F86                 _TRISGbits 000F87  
               _TRISHbits 000F88               _CCP1CONbits 000FAB               _CCP2CONbits 000FA7  
             _CCP3CONbits 000F26               _CCP4CONbits 000F22            __end_of___wmul F946  
     start_initialization F8F8   __end_of_initDCmotorsPWM FA94                  ??___wmul 0005  
             ?_motor_init 0001               __pbssCOMRAM 0028          ___lwdiv@dividend 0007  
                ?___lwdiv 0007                right_45@mL 001A                right_45@mR 001C  
                ?_left_45 001A             ??_setMotorPWM 0010          ___lwdiv@quotient 000B  
initDCmotorsPWM@PWMperiod 0001            ___wmul@product 0005                  _LATCbits 000F7B  
                _LATDbits 000F7C                  _LATEbits 000F7D                  _LATFbits 000F7E  
                _LATGbits 000F7F                  _LATHbits 000F80          ?_initDCmotorsPWM 0001  
                _SSP2CON2 000EDA                  _SSP2STAT 000ED8         ___wmul@multiplier 0001  
            setMotorPWM@m 000E                 left_45@mL 001A                 left_45@mR 001C  
     __end_of_setMotorPWM 0000                  __Hrparam 0000                  __Lrparam 0000  
              _ANSELDbits 000EA7            _buggyLEDs_init F90A           ___lwdiv@divisor 0009  
         ___lwdiv@counter 000D                 right_45@i 0022              _SSP2CON1bits 000ED9  
            _SSP2CON2bits 000EDA                  _right_45 FC28                  isa$xinst 000000  
            ??_motor_init 0005                  left_45@i 0022    __end_of_buggyLEDs_init F920  
             _setMotorPWM FE94        __end_of_motor_init F990              motor_init@mL 0001  
            motor_init@mR 0003           ?_buggyLEDs_init 0001                _SSP2DATPPS 000E1D  
              _SSP2CLKPPS 000E1C  
