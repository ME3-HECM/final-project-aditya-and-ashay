

Microchip MPLAB XC8 Assembler V2.40 build 20220703182018 
                                                                                               Thu Mar 16 10:32:13 2023

Microchip MPLAB XC8 C Compiler v2.40 (Free license) build 20220703182018 Og1 
     1                           	processor	18F67K40
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1,group=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1,group=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1,group=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1
    47                           	psect	text33,global,reloc=2,class=CODE,delta=1
    48                           	psect	text34,global,reloc=2,class=CODE,delta=1
    49                           	psect	text35,global,reloc=2,class=CODE,delta=1
    50                           	psect	text36,global,reloc=2,class=CODE,delta=1
    51                           	psect	text37,global,reloc=2,class=CODE,delta=1
    52                           	psect	text38,global,reloc=2,class=CODE,delta=1
    53                           	psect	text39,global,reloc=2,class=CODE,delta=1
    54                           	psect	text40,global,reloc=2,class=CODE,delta=1
    55                           	psect	text41,global,reloc=2,class=CODE,delta=1
    56                           	psect	text42,global,reloc=2,class=CODE,delta=1
    57                           	psect	text43,global,reloc=2,class=CODE,delta=1,group=1
    58                           	psect	text44,global,reloc=2,class=CODE,delta=1,group=1
    59                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    60                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    61                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    62                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    63                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    64                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    65   000000                     
    66                           ; Generated 06/04/2022 GMT
    67                           ; 
    68                           ; Copyright Â© 2022, Microchip Technology Inc. and its subsidiaries ("Microchip")
    69                           ; All rights reserved.
    70                           ; 
    71                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    72                           ; 
    73                           ; Redistribution and use in source and binary forms, with or without modification, are
    74                           ; permitted provided that the following conditions are met:
    75                           ; 
    76                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    77                           ;        conditions and the following disclaimer.
    78                           ; 
    79                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    80                           ;        of conditions and the following disclaimer in the documentation and/or other
    81                           ;        materials provided with the distribution. Publication is not required when
    82                           ;        this file is used in an embedded application.
    83                           ; 
    84                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    85                           ;        software without specific prior written permission.
    86                           ; 
    87                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    88                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    89                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    90                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    91                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    92                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    93                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    94                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    95                           ; 
    96                           ; 
    97                           ; Code-generator required, PIC18F67K40 Definitions
    98                           ; 
    99                           ; SFR Addresses
   100   000000                     
   101                           	psect	idataCOMRAM
   102   0022D8                     __pidataCOMRAM:
   103                           	callstack 0
   104                           
   105                           ;initializer for _square_timer
   106   0022D8  0384               	dw	900
   107                           
   108                           ;initializer for _right_timer
   109   0022DA  0060               	dw	96
   110                           
   111                           ;initializer for _left_timer
   112   0022DC  0062               	dw	98
   113                           
   114                           	psect	idataBANK0
   115   0022DE                     __pidataBANK0:
   116                           	callstack 0
   117                           
   118                           ;initializer for _color_upperbound
   119   0022DE  09C4               	dw	2500
   120   000000                     _TRISFbits	set	3974
   121   000000                     _LATDbits	set	3964
   122   000000                     _TRISGbits	set	3975
   123   000000                     _TRISEbits	set	3973
   124   000000                     _TX4REG	set	3812
   125   000000                     _RC4STAbits	set	3815
   126   000000                     _SP4BRGH	set	3814
   127   000000                     _SSP2CON2bits	set	3802
   128   000000                     _RX4PPS	set	3605
   129   000000                     _SSP2CLKPPS	set	3612
   130   000000                     _SSP2DATPPS	set	3613
   131   000000                     _ANSELDbits	set	3751
   132   000000                     _SSP2ADD	set	3798
   133   000000                     _SSP2CON1bits	set	3801
   134   000000                     _RC4REG	set	3811
   135   000000                     _SP4BRGL	set	3813
   136   000000                     _TX4STAbits	set	3816
   137   000000                     _BAUD4CONbits	set	3817
   138   000000                     _LATAbits	set	3961
   139   000000                     _LATGbits	set	3967
   140   000000                     _SSP2CON2	set	3802
   141   000000                     _TRISDbits	set	3972
   142   000000                     _SSP2STAT	set	3800
   143   000000                     _ANSELFbits	set	3764
   144   000000                     _SSP2BUF	set	3797
   145   000000                     _IPR0bits	set	3615
   146   000000                     _PIE0bits	set	3625
   147   000000                     _PIR4bits	set	3639
   148   000000                     _RC0PPS	set	3682
   149   000000                     _RD5PPS	set	3695
   150   000000                     _RE2PPS	set	3700
   151   000000                     _RD6PPS	set	3696
   152   000000                     _TRISAbits	set	3969
   153   000000                     _LATHbits	set	3968
   154   000000                     _TRISCbits	set	3971
   155   000000                     _LATCbits	set	3963
   156   000000                     _LATEbits	set	3965
   157   000000                     _LATFbits	set	3966
   158   000000                     _RC7PPS	set	3689
   159   000000                     _CCPR4H	set	3873
   160   000000                     _CCPR3H	set	3877
   161   000000                     _TRISHbits	set	3976
   162   000000                     _PORTFbits	set	3982
   163   000000                     _T2PR	set	4028
   164   000000                     _T2CONbits	set	4029
   165   000000                     _CCPR2H	set	4006
   166   000000                     _CCPR1H	set	4010
   167   000000                     _RE4PPS	set	3702
   168   000000                     _RG6PPS	set	3720
   169   000000                     _TMR0L	set	4051
   170   000000                     _TMR0H	set	4052
   171   000000                     _T0CON0bits	set	4053
   172   000000                     _T0CON1bits	set	4054
   173   000000                     _INTCONbits	set	4082
   174   000000                     _T2CLKCONbits	set	4031
   175   000000                     _T2HLTbits	set	4030
   176   000000                     _CCP1CONbits	set	4011
   177   000000                     _CCPTMRS0bits	set	4013
   178   000000                     _CCP2CONbits	set	4007
   179   000000                     _ADREFbits	set	3928
   180   000000                     _CCP3CONbits	set	3878
   181   000000                     _CCP4CONbits	set	3874
   182   000000                     _PIR0bits	set	3635
   183   000000                     _ADPCH	set	3935
   184   000000                     _ADRESH	set	3940
   185   000000                     _ADCON0bits	set	3936
   186                           
   187                           ; #config settings
   188                           
   189                           	psect	cinit
   190   001E46                     __pcinit:
   191                           	callstack 0
   192   001E46                     start_initialization:
   193                           	callstack 0
   194   001E46                     __initialization:
   195                           	callstack 0
   196                           
   197                           ; Initialize objects allocated to BANK0 (2 bytes)
   198                           ; load TBLPTR registers with __pidataBANK0
   199   001E46  0EDE               	movlw	low __pidataBANK0
   200   001E48  6EF6               	movwf	tblptrl,c
   201   001E4A  0E22               	movlw	high __pidataBANK0
   202   001E4C  6EF7               	movwf	tblptrh,c
   203   001E4E  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   204   001E50  6EF8               	movwf	tblptru,c
   205   001E52  0009               	tblrd		*+	;fetch initializer
   206   001E54  CFF5 F0C2          	movff	tablat,__pdataBANK0
   207   001E58  0009               	tblrd		*+	;fetch initializer
   208   001E5A  CFF5 F0C3          	movff	tablat,__pdataBANK0+1
   209                           
   210                           ; Initialize objects allocated to COMRAM (6 bytes)
   211                           ; load TBLPTR registers with __pidataCOMRAM
   212   001E5E  0ED8               	movlw	low __pidataCOMRAM
   213   001E60  6EF6               	movwf	tblptrl,c
   214   001E62  0E22               	movlw	high __pidataCOMRAM
   215   001E64  6EF7               	movwf	tblptrh,c
   216   001E66  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   217   001E68  6EF8               	movwf	tblptru,c
   218   001E6A  EE00  F057         	lfsr	0,__pdataCOMRAM
   219   001E6E  EE10 F006          	lfsr	1,6
   220   001E72                     copy_data0:
   221   001E72  0009               	tblrd		*+
   222   001E74  CFF5 FFEE          	movff	tablat,postinc0
   223   001E78  50E5               	movf	postdec1,w,c
   224   001E7A  50E1               	movf	fsr1l,w,c
   225   001E7C  E1FA               	bnz	copy_data0
   226                           
   227                           ; Clear objects allocated to BANK0 (98 bytes)
   228   001E7E  EE00  F060         	lfsr	0,__pbssBANK0
   229   001E82  0E62               	movlw	98
   230   001E84                     clear_0:
   231   001E84  6AEE               	clrf	postinc0,c
   232   001E86  06E8               	decf	wreg,f,c
   233   001E88  E1FD               	bnz	clear_0
   234                           
   235                           ; Clear objects allocated to COMRAM (24 bytes)
   236   001E8A  EE00  F03F         	lfsr	0,__pbssCOMRAM
   237   001E8E  0E18               	movlw	24
   238   001E90                     clear_1:
   239   001E90  6AEE               	clrf	postinc0,c
   240   001E92  06E8               	decf	wreg,f,c
   241   001E94  E1FD               	bnz	clear_1
   242   001E96                     end_of_initialization:
   243                           	callstack 0
   244   001E96                     __end_of__initialization:
   245                           	callstack 0
   246   001E96  905D               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   247   001E98  925D               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   248   001E9A  0100               	movlb	0
   249   001E9C  EFEC  F00E         	goto	_main	;jump to C main() function
   250                           
   251                           	psect	bssCOMRAM
   252   00003F                     __pbssCOMRAM:
   253                           	callstack 0
   254   00003F                     _timer_val:
   255                           	callstack 0
   256   00003F                     	ds	2
   257   000041                     _timer_index:
   258                           	callstack 0
   259   000041                     	ds	1
   260   000042                     _card_count:
   261                           	callstack 0
   262   000042                     	ds	1
   263   000043                     _color:
   264                           	callstack 0
   265   000043                     	ds	20
   266                           
   267                           	psect	dataCOMRAM
   268   000057                     __pdataCOMRAM:
   269                           	callstack 0
   270   000057                     _square_timer:
   271                           	callstack 0
   272   000057                     	ds	2
   273   000059                     _right_timer:
   274                           	callstack 0
   275   000059                     	ds	2
   276   00005B                     _left_timer:
   277                           	callstack 0
   278   00005B                     	ds	2
   279                           
   280                           	psect	bssBANK0
   281   000060                     __pbssBANK0:
   282                           	callstack 0
   283   000060                     _timer_memory:
   284                           	callstack 0
   285   000060                     	ds	40
   286   000088                     _card_memory:
   287                           	callstack 0
   288   000088                     	ds	40
   289   0000B0                     _motorR:
   290                           	callstack 0
   291   0000B0                     	ds	9
   292   0000B9                     _motorL:
   293                           	callstack 0
   294   0000B9                     	ds	9
   295                           
   296                           	psect	dataBANK0
   297   0000C2                     __pdataBANK0:
   298                           	callstack 0
   299   0000C2                     _color_upperbound:
   300                           	callstack 0
   301   0000C2                     	ds	2
   302                           
   303                           	psect	cstackBANK0
   304   0000C4                     __pcstackBANK0:
   305                           	callstack 0
   306   0000C4                     ??_main:
   307                           
   308                           ; 1 bytes @ 0x0
   309   0000C4                     	ds	2
   310                           
   311                           	psect	cstackCOMRAM
   312   000001                     __pcstackCOMRAM:
   313                           	callstack 0
   314   000001                     ??_LowISR:
   315   000001                     
   316                           ; 1 bytes @ 0x0
   317   000001                     	ds	2
   318   000003                     ??_I2C_2_Master_Idle:
   319   000003                     ?___wmul:
   320                           	callstack 0
   321   000003                     ?___xxtofl:
   322                           	callstack 0
   323   000003                     delay_ms_func@time:
   324                           	callstack 0
   325   000003                     initDCmotorsPWM@PWMperiod:
   326                           	callstack 0
   327   000003                     motor_init@mL:
   328                           	callstack 0
   329   000003                     custom_delay@temp:
   330                           	callstack 0
   331   000003                     ___wmul@multiplier:
   332                           	callstack 0
   333   000003                     ___flge@ff1:
   334                           	callstack 0
   335   000003                     ___xxtofl@val:
   336                           	callstack 0
   337                           
   338                           ; 4 bytes @ 0x2
   339   000003                     	ds	1
   340   000004                     ??_I2C_2_Master_Read:
   341   000004                     I2C_2_Master_Write@data_byte:
   342                           	callstack 0
   343                           
   344                           ; 1 bytes @ 0x3
   345   000004                     	ds	1
   346   000005                     ??_delay_ms_func:
   347   000005                     ??_custom_delay:
   348   000005                     I2C_2_Master_Read@ack:
   349                           	callstack 0
   350   000005                     color_writetoaddr@value:
   351                           	callstack 0
   352   000005                     motor_init@mR:
   353                           	callstack 0
   354   000005                     ___wmul@multiplicand:
   355                           	callstack 0
   356                           
   357                           ; 2 bytes @ 0x4
   358   000005                     	ds	1
   359   000006                     I2C_2_Master_Read@tmp:
   360                           	callstack 0
   361   000006                     color_writetoaddr@address:
   362                           	callstack 0
   363   000006                     custom_delay@i:
   364                           	callstack 0
   365                           
   366                           ; 2 bytes @ 0x5
   367   000006                     	ds	1
   368   000007                     ??_color_click_init:
   369   000007                     ??___xxtofl:
   370   000007                     ?_color_read_Red:
   371                           	callstack 0
   372   000007                     ?_color_read_Blue:
   373                           	callstack 0
   374   000007                     ?_color_read_Green:
   375                           	callstack 0
   376   000007                     ?_color_read_Clear:
   377                           	callstack 0
   378   000007                     delay_ms_func@i:
   379                           	callstack 0
   380   000007                     ___wmul@product:
   381                           	callstack 0
   382   000007                     ___flge@ff2:
   383                           	callstack 0
   384                           
   385                           ; 4 bytes @ 0x6
   386   000007                     	ds	1
   387   000008                     
   388                           ; 1 bytes @ 0x7
   389   000008                     	ds	1
   390   000009                     ??_color_read_Red:
   391   000009                     ??_color_read_Blue:
   392   000009                     ??_color_read_Green:
   393   000009                     ??_color_read_Clear:
   394   000009                     ?___lwdiv:
   395                           	callstack 0
   396   000009                     ___lwdiv@dividend:
   397                           	callstack 0
   398                           
   399                           ; 2 bytes @ 0x8
   400   000009                     	ds	2
   401   00000B                     ??___flge:
   402   00000B                     ___xxtofl@sign:
   403                           	callstack 0
   404   00000B                     ___lwdiv@divisor:
   405                           	callstack 0
   406                           
   407                           ; 2 bytes @ 0xA
   408   00000B                     	ds	1
   409   00000C                     ___xxtofl@exp:
   410                           	callstack 0
   411   00000C                     color_read_Red@tmp:
   412                           	callstack 0
   413   00000C                     color_read_Blue@tmp:
   414                           	callstack 0
   415   00000C                     color_read_Green@tmp:
   416                           	callstack 0
   417   00000C                     color_read_Clear@tmp:
   418                           	callstack 0
   419                           
   420                           ; 2 bytes @ 0xB
   421   00000C                     	ds	1
   422   00000D                     ___lwdiv@quotient:
   423                           	callstack 0
   424   00000D                     ___xxtofl@arg:
   425                           	callstack 0
   426                           
   427                           ; 4 bytes @ 0xC
   428   00000D                     	ds	2
   429   00000F                     ___lwdiv@counter:
   430                           	callstack 0
   431                           
   432                           ; 1 bytes @ 0xE
   433   00000F                     	ds	1
   434   000010                     setMotorPWM@m:
   435                           	callstack 0
   436                           
   437                           ; 2 bytes @ 0xF
   438   000010                     	ds	1
   439   000011                     ?___fldiv:
   440                           	callstack 0
   441   000011                     ___fldiv@b:
   442                           	callstack 0
   443                           
   444                           ; 4 bytes @ 0x10
   445   000011                     	ds	1
   446   000012                     ??_setMotorPWM:
   447                           
   448                           ; 1 bytes @ 0x11
   449   000012                     	ds	2
   450   000014                     setMotorPWM@posDuty:
   451                           	callstack 0
   452                           
   453                           ; 1 bytes @ 0x13
   454   000014                     	ds	1
   455   000015                     setMotorPWM@negDuty:
   456                           	callstack 0
   457   000015                     ___fldiv@a:
   458                           	callstack 0
   459                           
   460                           ; 4 bytes @ 0x14
   461   000015                     	ds	1
   462   000016                     stop@mL:
   463                           	callstack 0
   464                           
   465                           ; 2 bytes @ 0x15
   466   000016                     	ds	2
   467   000018                     stop@mR:
   468                           	callstack 0
   469                           
   470                           ; 2 bytes @ 0x17
   471   000018                     	ds	1
   472   000019                     ??___fldiv:
   473                           
   474                           ; 1 bytes @ 0x18
   475   000019                     	ds	1
   476   00001A                     stop@i:
   477                           	callstack 0
   478                           
   479                           ; 2 bytes @ 0x19
   480   00001A                     	ds	2
   481   00001C                     forward@mL:
   482                           	callstack 0
   483   00001C                     reverse@mL:
   484                           	callstack 0
   485   00001C                     left_45@mL:
   486                           	callstack 0
   487   00001C                     right_45@mL:
   488                           	callstack 0
   489   00001C                     space@mL:
   490                           	callstack 0
   491                           
   492                           ; 2 bytes @ 0x1B
   493   00001C                     	ds	1
   494   00001D                     ___fldiv@rem:
   495                           	callstack 0
   496                           
   497                           ; 4 bytes @ 0x1C
   498   00001D                     	ds	1
   499   00001E                     forward@mR:
   500                           	callstack 0
   501   00001E                     reverse@mR:
   502                           	callstack 0
   503   00001E                     left_45@mR:
   504                           	callstack 0
   505   00001E                     right_45@mR:
   506                           	callstack 0
   507   00001E                     space@mR:
   508                           	callstack 0
   509                           
   510                           ; 2 bytes @ 0x1D
   511   00001E                     	ds	2
   512   000020                     ??_space:
   513   000020                     left_45@count:
   514                           	callstack 0
   515   000020                     right_45@count:
   516                           	callstack 0
   517                           
   518                           ; 1 bytes @ 0x1F
   519   000020                     	ds	1
   520   000021                     ___fldiv@sign:
   521                           	callstack 0
   522   000021                     left_45@left_timer:
   523                           	callstack 0
   524   000021                     right_45@right_timer:
   525                           	callstack 0
   526                           
   527                           ; 2 bytes @ 0x20
   528   000021                     	ds	1
   529   000022                     ___fldiv@new_exp:
   530                           	callstack 0
   531                           
   532                           ; 2 bytes @ 0x21
   533   000022                     	ds	1
   534   000023                     ??_left_45:
   535   000023                     ??_right_45:
   536                           
   537                           ; 1 bytes @ 0x22
   538   000023                     	ds	1
   539   000024                     ___fldiv@grs:
   540                           	callstack 0
   541                           
   542                           ; 4 bytes @ 0x23
   543   000024                     	ds	1
   544   000025                     left_45@i:
   545                           	callstack 0
   546   000025                     right_45@i:
   547                           	callstack 0
   548                           
   549                           ; 1 bytes @ 0x24
   550   000025                     	ds	1
   551   000026                     reverse_yellow@mL:
   552                           	callstack 0
   553   000026                     reverse_pink@mL:
   554                           	callstack 0
   555   000026                     movement@mL:
   556                           	callstack 0
   557                           
   558                           ; 2 bytes @ 0x25
   559   000026                     	ds	2
   560   000028                     ___fldiv@bexp:
   561                           	callstack 0
   562   000028                     reverse_yellow@mR:
   563                           	callstack 0
   564   000028                     reverse_pink@mR:
   565                           	callstack 0
   566   000028                     movement@mR:
   567                           	callstack 0
   568                           
   569                           ; 2 bytes @ 0x27
   570   000028                     	ds	1
   571   000029                     ___fldiv@aexp:
   572                           	callstack 0
   573                           
   574                           ; 1 bytes @ 0x28
   575   000029                     	ds	1
   576   00002A                     ??_reverse_yellow:
   577   00002A                     ??_reverse_pink:
   578   00002A                     movement@count:
   579                           	callstack 0
   580   00002A                     READcolor@c:
   581                           	callstack 0
   582                           
   583                           ; 2 bytes @ 0x29
   584   00002A                     	ds	1
   585   00002B                     ??_movement:
   586                           
   587                           ; 1 bytes @ 0x2A
   588   00002B                     	ds	1
   589   00002C                     movement_return@mL:
   590                           	callstack 0
   591                           
   592                           ; 2 bytes @ 0x2B
   593   00002C                     	ds	2
   594   00002E                     movement_return@mR:
   595                           	callstack 0
   596                           
   597                           ; 2 bytes @ 0x2D
   598   00002E                     	ds	2
   599   000030                     movement_return@count:
   600                           	callstack 0
   601                           
   602                           ; 1 bytes @ 0x2F
   603   000030                     	ds	1
   604   000031                     return_home@mL:
   605                           	callstack 0
   606                           
   607                           ; 2 bytes @ 0x30
   608   000031                     	ds	2
   609   000033                     return_home@mR:
   610                           	callstack 0
   611                           
   612                           ; 2 bytes @ 0x32
   613   000033                     	ds	2
   614   000035                     ??_return_home:
   615                           
   616                           ; 1 bytes @ 0x34
   617   000035                     	ds	2
   618   000037                     buggy_color_response@mL:
   619                           	callstack 0
   620                           
   621                           ; 2 bytes @ 0x36
   622   000037                     	ds	2
   623   000039                     buggy_color_response@mR:
   624                           	callstack 0
   625                           
   626                           ; 2 bytes @ 0x38
   627   000039                     	ds	2
   628   00003B                     buggy_color_response@c:
   629                           	callstack 0
   630                           
   631                           ; 2 bytes @ 0x3A
   632   00003B                     	ds	2
   633   00003D                     ??_buggy_color_response:
   634                           
   635                           ; 1 bytes @ 0x3C
   636   00003D                     	ds	2
   637                           
   638 ;;
   639 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   640 ;;
   641 ;; *************** function _main *****************
   642 ;; Defined at:
   643 ;;		line 19 in file "main.c"
   644 ;; Parameters:    Size  Location     Type
   645 ;;		None
   646 ;; Auto vars:     Size  Location     Type
   647 ;;		None
   648 ;; Return value:  Size  Location     Type
   649 ;;                  1    wreg      void 
   650 ;; Registers used:
   651 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   652 ;; Tracked objects:
   653 ;;		On entry : 0/0
   654 ;;		On exit  : 0/0
   655 ;;		Unchanged: 0/0
   656 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   657 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   658 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   659 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   660 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   661 ;;Total ram usage:        2 bytes
   662 ;; Hardware stack levels required when called: 9
   663 ;; This function calls:
   664 ;;		_buggy_color_response
   665 ;;		_complete_initialisation
   666 ;;		_timer_reset
   667 ;; This function is called by:
   668 ;;		Startup code after reset
   669 ;; This function uses a non-reentrant model
   670 ;;
   671                           
   672                           	psect	text0
   673   001DD8                     __ptext0:
   674                           	callstack 0
   675   001DD8                     _main:
   676                           	callstack 22
   677   001DD8                     
   678                           ;main.c: 21:     complete_initialisation();
   679   001DD8  EC16  F010         	call	_complete_initialisation	;wreg free
   680   001DDC                     l400:
   681   001DDC  A48E               	btfss	142,2,c	;volatile
   682   001DDE  EFF3  F00E         	goto	u2491
   683   001DE2  EFF5  F00E         	goto	u2490
   684   001DE6                     u2491:
   685   001DE6  EFFC  F00E         	goto	l404
   686   001DEA                     u2490:
   687   001DEA  B68E               	btfsc	142,3,c	;volatile
   688   001DEC  EFFA  F00E         	goto	u2501
   689   001DF0  EFFC  F00E         	goto	u2500
   690   001DF4                     u2501:
   691   001DF4  EFEE  F00E         	goto	l400
   692   001DF8                     u2500:
   693   001DF8                     l404:
   694                           
   695                           ;main.c: 27:     if (!PORTFbits.RF3){_delay((unsigned long)((500)*(64000000/4000.0)));ti
      +                          mer_reset();
   696   001DF8  B68E               	btfsc	142,3,c	;volatile
   697   001DFA  EF01  F00F         	goto	u2511
   698   001DFE  EF03  F00F         	goto	u2510
   699   001E02                     u2511:
   700   001E02  EF21  F00F         	goto	l409
   701   001E06                     u2510:
   702   001E06  0E29               	movlw	41
   703   001E08  0100               	movlb	0	; () banked
   704   001E0A  6FC5               	movwf	(??_main+1)& (0+255),b
   705   001E0C  0E96               	movlw	150
   706   001E0E  6FC4               	movwf	??_main& (0+255),b
   707   001E10  0E7F               	movlw	127
   708   001E12                     u2527:
   709   001E12  2EE8               	decfsz	wreg,f,c
   710   001E14  D7FE               	bra	u2527
   711   001E16  2FC4               	decfsz	??_main& (0+255),f,b
   712   001E18  D7FC               	bra	u2527
   713   001E1A  2FC5               	decfsz	(??_main+1)& (0+255),f,b
   714   001E1C  D7FA               	bra	u2527
   715   001E1E  EC46  F011         	call	_timer_reset	;wreg free
   716   001E22                     l3243:
   717                           
   718                           ;main.c: 29:         buggy_color_response(&motorL,&motorR,&color);
   719   001E22  0EB9               	movlw	low _motorL
   720   001E24  6E37               	movwf	buggy_color_response@mL^0,c
   721   001E26  0E00               	movlw	high _motorL
   722   001E28  6E38               	movwf	(buggy_color_response@mL+1)^0,c
   723   001E2A  0EB0               	movlw	low _motorR
   724   001E2C  6E39               	movwf	buggy_color_response@mR^0,c
   725   001E2E  0E00               	movlw	high _motorR
   726   001E30  6E3A               	movwf	(buggy_color_response@mR+1)^0,c
   727   001E32  0E43               	movlw	low _color
   728   001E34  6E3B               	movwf	buggy_color_response@c^0,c
   729   001E36  0E00               	movlw	high _color
   730   001E38  6E3C               	movwf	(buggy_color_response@c+1)^0,c
   731   001E3A  EC24  F000         	call	_buggy_color_response	;wreg free
   732   001E3E  EF11  F00F         	goto	l3243
   733   001E42                     l409:
   734   001E42  EF22  F000         	goto	start
   735   001E46                     __end_of_main:
   736                           	callstack 0
   737                           
   738 ;; *************** function _complete_initialisation *****************
   739 ;; Defined at:
   740 ;;		line 16 in file "initialisation.c"
   741 ;; Parameters:    Size  Location     Type
   742 ;;		None
   743 ;; Auto vars:     Size  Location     Type
   744 ;;		None
   745 ;; Return value:  Size  Location     Type
   746 ;;                  1    wreg      void 
   747 ;; Registers used:
   748 ;;		wreg, status,2, status,0, cstack
   749 ;; Tracked objects:
   750 ;;		On entry : 0/0
   751 ;;		On exit  : 0/0
   752 ;;		Unchanged: 0/0
   753 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   754 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   755 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   756 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   757 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   758 ;;Total ram usage:        0 bytes
   759 ;; Hardware stack levels used: 1
   760 ;; Hardware stack levels required when called: 5
   761 ;; This function calls:
   762 ;;		_ADC_init
   763 ;;		_I2C_2_Master_Init
   764 ;;		_Timer0_init
   765 ;;		_buggyLEDs_init
   766 ;;		_color_click_init
   767 ;;		_initDCmotorsPWM
   768 ;;		_initUSART4
   769 ;;		_interrupts_init
   770 ;;		_motor_init
   771 ;;		_ports_init
   772 ;; This function is called by:
   773 ;;		_main
   774 ;; This function uses a non-reentrant model
   775 ;;
   776                           
   777                           	psect	text1
   778   00202C                     __ptext1:
   779                           	callstack 0
   780   00202C                     _complete_initialisation:
   781                           	callstack 25
   782   00202C                     
   783                           ;initialisation.c: 18:     initDCmotorsPWM(99);
   784   00202C  0E00               	movlw	0
   785   00202E  6E04               	movwf	(initDCmotorsPWM@PWMperiod+1)^0,c
   786   002030  0E63               	movlw	99
   787   002032  6E03               	movwf	initDCmotorsPWM@PWMperiod^0,c
   788   002034  ECE8  F00D         	call	_initDCmotorsPWM	;wreg free
   789   002038                     
   790                           ;initialisation.c: 19:     buggyLEDs_init();
   791   002038  EC3B  F011         	call	_buggyLEDs_init	;wreg free
   792   00203C                     
   793                           ;initialisation.c: 20:     ports_init();
   794   00203C  ECEE  F010         	call	_ports_init	;wreg free
   795   002040                     
   796                           ;initialisation.c: 21:     motor_init(&motorL,&motorR);
   797   002040  0EB9               	movlw	low _motorL
   798   002042  6E03               	movwf	motor_init@mL^0,c
   799   002044  0E00               	movlw	high _motorL
   800   002046  6E04               	movwf	(motor_init@mL+1)^0,c
   801   002048  0EB0               	movlw	low _motorR
   802   00204A  6E05               	movwf	motor_init@mR^0,c
   803   00204C  0E00               	movlw	high _motorR
   804   00204E  6E06               	movwf	(motor_init@mR+1)^0,c
   805   002050  ECF0  F00F         	call	_motor_init	;wreg free
   806   002054                     
   807                           ;initialisation.c: 22:     I2C_2_Master_Init();
   808   002054  ECB2  F010         	call	_I2C_2_Master_Init	;wreg free
   809                           
   810                           ;initialisation.c: 23:     color_click_init();
   811   002058  EC98  F010         	call	_color_click_init	;wreg free
   812   00205C                     
   813                           ;initialisation.c: 24:     Timer0_init();
   814   00205C  EC1E  F011         	call	_Timer0_init	;wreg free
   815   002060                     
   816                           ;initialisation.c: 25:     interrupts_init();
   817   002060  EC4F  F011         	call	_interrupts_init	;wreg free
   818   002064                     
   819                           ;initialisation.c: 26:     initUSART4();
   820   002064  ECFE  F010         	call	_initUSART4	;wreg free
   821   002068                     
   822                           ;initialisation.c: 27:     ADC_init();
   823   002068  EC2E  F011         	call	_ADC_init	;wreg free
   824   00206C  0012               	return		;funcret
   825   00206E                     __end_of_complete_initialisation:
   826                           	callstack 0
   827                           
   828 ;; *************** function _ports_init *****************
   829 ;; Defined at:
   830 ;;		line 8 in file "lights_buttons.c"
   831 ;; Parameters:    Size  Location     Type
   832 ;;		None
   833 ;; Auto vars:     Size  Location     Type
   834 ;;		None
   835 ;; Return value:  Size  Location     Type
   836 ;;                  1    wreg      void 
   837 ;; Registers used:
   838 ;;		None
   839 ;; Tracked objects:
   840 ;;		On entry : 0/0
   841 ;;		On exit  : 0/0
   842 ;;		Unchanged: 0/0
   843 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   844 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   845 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   846 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   847 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   848 ;;Total ram usage:        0 bytes
   849 ;; Hardware stack levels used: 1
   850 ;; Hardware stack levels required when called: 1
   851 ;; This function calls:
   852 ;;		Nothing
   853 ;; This function is called by:
   854 ;;		_complete_initialisation
   855 ;; This function uses a non-reentrant model
   856 ;;
   857                           
   858                           	psect	text2
   859   0021DC                     __ptext2:
   860                           	callstack 0
   861   0021DC                     _ports_init:
   862                           	callstack 28
   863   0021DC                     
   864                           ;lights_buttons.c: 10:     TRISGbits.TRISG1 = 0;
   865   0021DC  9287               	bcf	135,1,c	;volatile
   866                           
   867                           ;lights_buttons.c: 11:     TRISAbits.TRISA4 = 0;
   868   0021DE  9881               	bcf	129,4,c	;volatile
   869                           
   870                           ;lights_buttons.c: 12:     TRISFbits.TRISF7 = 0;
   871   0021E0  9E86               	bcf	134,7,c	;volatile
   872                           
   873                           ;lights_buttons.c: 14:     LATGbits.LATG1 = 1;
   874   0021E2  827F               	bsf	127,1,c	;volatile
   875                           
   876                           ;lights_buttons.c: 15:     LATAbits.LATA4 = 1;
   877   0021E4  8879               	bsf	121,4,c	;volatile
   878                           
   879                           ;lights_buttons.c: 16:     LATFbits.LATF7 = 1;
   880   0021E6  8E7E               	bsf	126,7,c	;volatile
   881                           
   882                           ;lights_buttons.c: 18:     TRISFbits.TRISF2=1;
   883   0021E8  8486               	bsf	134,2,c	;volatile
   884                           
   885                           ;lights_buttons.c: 19:     ANSELFbits.ANSELF2=0;
   886   0021EA  010E               	movlb	14	; () banked
   887   0021EC  95B4               	bcf	180,2,b	;volatile
   888                           
   889                           ;lights_buttons.c: 21:     TRISFbits.TRISF3= 1;
   890   0021EE  8686               	bsf	134,3,c	;volatile
   891                           
   892                           ;lights_buttons.c: 22:     ANSELFbits.ANSELF3 = 0;
   893   0021F0  97B4               	bcf	180,3,b	;volatile
   894                           
   895                           ;lights_buttons.c: 24:     TRISDbits.TRISD7 = 0;
   896   0021F2  9E84               	bcf	132,7,c	;volatile
   897                           
   898                           ;lights_buttons.c: 25:     LATDbits.LATD7 = 0;
   899   0021F4  9E7C               	bcf	124,7,c	;volatile
   900                           
   901                           ;lights_buttons.c: 27:     TRISHbits.TRISH3 = 0;
   902   0021F6  9688               	bcf	136,3,c	;volatile
   903                           
   904                           ;lights_buttons.c: 28:     LATHbits.LATH3 = 0;
   905   0021F8  9680               	bcf	128,3,c	;volatile
   906   0021FA                     
   907                           ; BSR set to: 14
   908   0021FA  0012               	return		;funcret
   909   0021FC                     __end_of_ports_init:
   910                           	callstack 0
   911                           
   912 ;; *************** function _motor_init *****************
   913 ;; Defined at:
   914 ;;		line 104 in file "dc_motor.c"
   915 ;; Parameters:    Size  Location     Type
   916 ;;  mL              2    2[COMRAM] PTR struct DC_motor
   917 ;;		 -> motorL(9), 
   918 ;;  mR              2    4[COMRAM] PTR struct DC_motor
   919 ;;		 -> motorR(9), 
   920 ;; Auto vars:     Size  Location     Type
   921 ;;		None
   922 ;; Return value:  Size  Location     Type
   923 ;;                  1    wreg      void 
   924 ;; Registers used:
   925 ;;		wreg, status,2, status,0
   926 ;; Tracked objects:
   927 ;;		On entry : 0/0
   928 ;;		On exit  : 0/0
   929 ;;		Unchanged: 0/0
   930 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   931 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   932 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   933 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   934 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   935 ;;Total ram usage:        4 bytes
   936 ;; Hardware stack levels used: 1
   937 ;; Hardware stack levels required when called: 1
   938 ;; This function calls:
   939 ;;		Nothing
   940 ;; This function is called by:
   941 ;;		_complete_initialisation
   942 ;; This function uses a non-reentrant model
   943 ;;
   944                           
   945                           	psect	text3
   946   001FE0                     __ptext3:
   947                           	callstack 0
   948   001FE0                     _motor_init:
   949                           	callstack 28
   950   001FE0                     
   951                           ;dc_motor.c: 104: void motor_init(DC_motor *mL, DC_motor *mR);dc_motor.c: 105: {;dc_moto
      +                          r.c: 106:     motorL.power=0;
   952   001FE0  0E00               	movlw	0
   953   001FE2  0100               	movlb	0	; () banked
   954   001FE4  6FB9               	movwf	_motorL& (0+255),b
   955                           
   956                           ;dc_motor.c: 107:     motorL.direction=1;
   957   001FE6  0E01               	movlw	1
   958   001FE8  6FBA               	movwf	(_motorL+1)& (0+255),b
   959                           
   960                           ;dc_motor.c: 108:     motorL.brakemode=1;
   961   001FEA  0E01               	movlw	1
   962   001FEC  6FBB               	movwf	(_motorL+2)& (0+255),b
   963   001FEE                     
   964                           ; BSR set to: 0
   965                           ;dc_motor.c: 109:     motorL.posDutyHighByte=(unsigned char *)(&CCPR1H);
   966   001FEE  0EAA               	movlw	170
   967   001FF0  6FBE               	movwf	(_motorL+5)& (0+255),b
   968   001FF2  0E0F               	movlw	15
   969   001FF4  6FBF               	movwf	(_motorL+6)& (0+255),b
   970   001FF6                     
   971                           ; BSR set to: 0
   972                           ;dc_motor.c: 110:     motorL.negDutyHighByte=(unsigned char *)(&CCPR2H);
   973   001FF6  0EA6               	movlw	166
   974   001FF8  6FC0               	movwf	(_motorL+7)& (0+255),b
   975   001FFA  0E0F               	movlw	15
   976   001FFC  6FC1               	movwf	(_motorL+8)& (0+255),b
   977                           
   978                           ;dc_motor.c: 111:     motorL.PWMperiod=99;
   979   001FFE  0E00               	movlw	0
   980   002000  6FBD               	movwf	(_motorL+4)& (0+255),b
   981   002002  0E63               	movlw	99
   982   002004  6FBC               	movwf	(_motorL+3)& (0+255),b
   983                           
   984                           ;dc_motor.c: 113:     motorR.power=0;
   985   002006  0E00               	movlw	0
   986   002008  6FB0               	movwf	_motorR& (0+255),b
   987                           
   988                           ;dc_motor.c: 114:     motorR.direction=1;
   989   00200A  0E01               	movlw	1
   990   00200C  6FB1               	movwf	(_motorR+1)& (0+255),b
   991                           
   992                           ;dc_motor.c: 115:     motorR.brakemode=1;
   993   00200E  0E01               	movlw	1
   994   002010  6FB2               	movwf	(_motorR+2)& (0+255),b
   995   002012                     
   996                           ; BSR set to: 0
   997                           ;dc_motor.c: 116:     motorR.posDutyHighByte=(unsigned char *)(&CCPR3H);
   998   002012  0E25               	movlw	37
   999   002014  6FB5               	movwf	(_motorR+5)& (0+255),b
  1000   002016  0E0F               	movlw	15
  1001   002018  6FB6               	movwf	(_motorR+6)& (0+255),b
  1002   00201A                     
  1003                           ; BSR set to: 0
  1004                           ;dc_motor.c: 117:     motorR.negDutyHighByte=(unsigned char *)(&CCPR4H);
  1005   00201A  0E21               	movlw	33
  1006   00201C  6FB7               	movwf	(_motorR+7)& (0+255),b
  1007   00201E  0E0F               	movlw	15
  1008   002020  6FB8               	movwf	(_motorR+8)& (0+255),b
  1009                           
  1010                           ;dc_motor.c: 118:     motorR.PWMperiod=99;
  1011   002022  0E00               	movlw	0
  1012   002024  6FB4               	movwf	(_motorR+4)& (0+255),b
  1013   002026  0E63               	movlw	99
  1014   002028  6FB3               	movwf	(_motorR+3)& (0+255),b
  1015   00202A                     
  1016                           ; BSR set to: 0
  1017   00202A  0012               	return		;funcret
  1018   00202C                     __end_of_motor_init:
  1019                           	callstack 0
  1020                           
  1021 ;; *************** function _interrupts_init *****************
  1022 ;; Defined at:
  1023 ;;		line 9 in file "interrupts.c"
  1024 ;; Parameters:    Size  Location     Type
  1025 ;;		None
  1026 ;; Auto vars:     Size  Location     Type
  1027 ;;		None
  1028 ;; Return value:  Size  Location     Type
  1029 ;;                  1    wreg      void 
  1030 ;; Registers used:
  1031 ;;		None
  1032 ;; Tracked objects:
  1033 ;;		On entry : 0/0
  1034 ;;		On exit  : 0/0
  1035 ;;		Unchanged: 0/0
  1036 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1037 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1038 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1039 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1040 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1041 ;;Total ram usage:        0 bytes
  1042 ;; Hardware stack levels used: 1
  1043 ;; Hardware stack levels required when called: 1
  1044 ;; This function calls:
  1045 ;;		Nothing
  1046 ;; This function is called by:
  1047 ;;		_complete_initialisation
  1048 ;; This function uses a non-reentrant model
  1049 ;;
  1050                           
  1051                           	psect	text4
  1052   00229E                     __ptext4:
  1053                           	callstack 0
  1054   00229E                     _interrupts_init:
  1055                           	callstack 28
  1056   00229E                     
  1057                           ;interrupts.c: 11:     PIE0bits.TMR0IE = 1;
  1058   00229E  010E               	movlb	14	; () banked
  1059   0022A0  8B29               	bsf	41,5,b	;volatile
  1060                           
  1061                           ;interrupts.c: 12:     PIR0bits.TMR0IF = 0;
  1062   0022A2  9B33               	bcf	51,5,b	;volatile
  1063                           
  1064                           ;interrupts.c: 13:     IPR0bits.TMR0IP = 0;
  1065   0022A4  9B1F               	bcf	31,5,b	;volatile
  1066                           
  1067                           ;interrupts.c: 15:     INTCONbits.IPEN = 1;
  1068   0022A6  8AF2               	bsf	242,5,c	;volatile
  1069                           
  1070                           ;interrupts.c: 16:     INTCONbits.PEIE = 1;
  1071   0022A8  8CF2               	bsf	242,6,c	;volatile
  1072                           
  1073                           ;interrupts.c: 17:     INTCONbits.GIE = 1;
  1074   0022AA  8EF2               	bsf	242,7,c	;volatile
  1075   0022AC                     
  1076                           ; BSR set to: 14
  1077   0022AC  0012               	return		;funcret
  1078   0022AE                     __end_of_interrupts_init:
  1079                           	callstack 0
  1080                           
  1081 ;; *************** function _initUSART4 *****************
  1082 ;; Defined at:
  1083 ;;		line 7 in file "serial.c"
  1084 ;; Parameters:    Size  Location     Type
  1085 ;;		None
  1086 ;; Auto vars:     Size  Location     Type
  1087 ;;		None
  1088 ;; Return value:  Size  Location     Type
  1089 ;;                  1    wreg      void 
  1090 ;; Registers used:
  1091 ;;		wreg, status,2
  1092 ;; Tracked objects:
  1093 ;;		On entry : 0/0
  1094 ;;		On exit  : 0/0
  1095 ;;		Unchanged: 0/0
  1096 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1097 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1098 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1099 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1100 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1101 ;;Total ram usage:        0 bytes
  1102 ;; Hardware stack levels used: 1
  1103 ;; Hardware stack levels required when called: 1
  1104 ;; This function calls:
  1105 ;;		Nothing
  1106 ;; This function is called by:
  1107 ;;		_complete_initialisation
  1108 ;; This function uses a non-reentrant model
  1109 ;;
  1110                           
  1111                           	psect	text5
  1112   0021FC                     __ptext5:
  1113                           	callstack 0
  1114   0021FC                     _initUSART4:
  1115                           	callstack 28
  1116   0021FC                     
  1117                           ;serial.c: 9:     RC0PPS = 0x12;
  1118   0021FC  0E12               	movlw	18
  1119   0021FE  010E               	movlb	14	; () banked
  1120   002200  6F62               	movwf	98,b	;volatile
  1121                           
  1122                           ;serial.c: 10:     RX4PPS = 0x11;
  1123   002202  0E11               	movlw	17
  1124   002204  6F15               	movwf	21,b	;volatile
  1125   002206                     
  1126                           ; BSR set to: 14
  1127                           ;serial.c: 11:     TRISCbits.TRISC1 = 1;
  1128   002206  8283               	bsf	131,1,c	;volatile
  1129   002208                     
  1130                           ; BSR set to: 14
  1131                           ;serial.c: 14:     BAUD4CONbits.BRG16 = 0;
  1132   002208  97E9               	bcf	233,3,b	;volatile
  1133   00220A                     
  1134                           ; BSR set to: 14
  1135                           ;serial.c: 15:     TX4STAbits.BRGH = 0;
  1136   00220A  95E8               	bcf	232,2,b	;volatile
  1137                           
  1138                           ;serial.c: 16:     SP4BRGL = 51;
  1139   00220C  0E33               	movlw	51
  1140   00220E  6FE5               	movwf	229,b	;volatile
  1141                           
  1142                           ;serial.c: 17:     SP4BRGH = 0;
  1143   002210  0E00               	movlw	0
  1144   002212  6FE6               	movwf	230,b	;volatile
  1145   002214                     
  1146                           ; BSR set to: 14
  1147                           ;serial.c: 19:     RC4STAbits.CREN = 1;
  1148   002214  89E7               	bsf	231,4,b	;volatile
  1149   002216                     
  1150                           ; BSR set to: 14
  1151                           ;serial.c: 20:     TX4STAbits.TXEN = 1;
  1152   002216  8BE8               	bsf	232,5,b	;volatile
  1153   002218                     
  1154                           ; BSR set to: 14
  1155                           ;serial.c: 21:     RC4STAbits.SPEN = 1;
  1156   002218  8FE7               	bsf	231,7,b	;volatile
  1157   00221A                     
  1158                           ; BSR set to: 14
  1159   00221A  0012               	return		;funcret
  1160   00221C                     __end_of_initUSART4:
  1161                           	callstack 0
  1162                           
  1163 ;; *************** function _initDCmotorsPWM *****************
  1164 ;; Defined at:
  1165 ;;		line 11 in file "dc_motor.c"
  1166 ;; Parameters:    Size  Location     Type
  1167 ;;  PWMperiod       2    2[COMRAM] unsigned int 
  1168 ;; Auto vars:     Size  Location     Type
  1169 ;;		None
  1170 ;; Return value:  Size  Location     Type
  1171 ;;                  1    wreg      void 
  1172 ;; Registers used:
  1173 ;;		wreg, status,2
  1174 ;; Tracked objects:
  1175 ;;		On entry : 0/0
  1176 ;;		On exit  : 0/0
  1177 ;;		Unchanged: 0/0
  1178 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1179 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1180 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1181 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1182 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1183 ;;Total ram usage:        2 bytes
  1184 ;; Hardware stack levels used: 1
  1185 ;; Hardware stack levels required when called: 1
  1186 ;; This function calls:
  1187 ;;		Nothing
  1188 ;; This function is called by:
  1189 ;;		_complete_initialisation
  1190 ;; This function uses a non-reentrant model
  1191 ;;
  1192                           
  1193                           	psect	text6
  1194   001BD0                     __ptext6:
  1195                           	callstack 0
  1196   001BD0                     _initDCmotorsPWM:
  1197                           	callstack 28
  1198   001BD0                     
  1199                           ;dc_motor.c: 13:     TRISEbits.TRISE2 = 0;
  1200   001BD0  9485               	bcf	133,2,c	;volatile
  1201                           
  1202                           ;dc_motor.c: 14:     TRISEbits.TRISE4 = 0;
  1203   001BD2  9885               	bcf	133,4,c	;volatile
  1204                           
  1205                           ;dc_motor.c: 15:     TRISCbits.TRISC7 = 0;
  1206   001BD4  9E83               	bcf	131,7,c	;volatile
  1207                           
  1208                           ;dc_motor.c: 16:     TRISGbits.TRISG6 = 0;
  1209   001BD6  9C87               	bcf	135,6,c	;volatile
  1210                           
  1211                           ;dc_motor.c: 18:     LATEbits.LATE2 = 0;
  1212   001BD8  947D               	bcf	125,2,c	;volatile
  1213                           
  1214                           ;dc_motor.c: 19:     LATEbits.LATE4 = 0;
  1215   001BDA  987D               	bcf	125,4,c	;volatile
  1216                           
  1217                           ;dc_motor.c: 20:     LATCbits.LATC7 = 0;
  1218   001BDC  9E7B               	bcf	123,7,c	;volatile
  1219                           
  1220                           ;dc_motor.c: 21:     LATGbits.LATG6 = 0;
  1221   001BDE  9C7F               	bcf	127,6,c	;volatile
  1222   001BE0                     
  1223                           ;dc_motor.c: 24:     RE2PPS=0x05;
  1224   001BE0  0E05               	movlw	5
  1225   001BE2  010E               	movlb	14	; () banked
  1226   001BE4  6F74               	movwf	116,b	;volatile
  1227                           
  1228                           ;dc_motor.c: 25:     RE4PPS=0x06;
  1229   001BE6  0E06               	movlw	6
  1230   001BE8  6F76               	movwf	118,b	;volatile
  1231                           
  1232                           ;dc_motor.c: 26:     RC7PPS=0x07;
  1233   001BEA  0E07               	movlw	7
  1234   001BEC  6F69               	movwf	105,b	;volatile
  1235                           
  1236                           ;dc_motor.c: 27:     RG6PPS=0x08;
  1237   001BEE  0E08               	movlw	8
  1238   001BF0  6F88               	movwf	136,b	;volatile
  1239                           
  1240                           ;dc_motor.c: 30:     T2CONbits.CKPS=0b100;
  1241   001BF2  50BD               	movf	189,w,c	;volatile
  1242   001BF4  0B8F               	andlw	-113
  1243   001BF6  0940               	iorlw	64
  1244   001BF8  6EBD               	movwf	189,c	;volatile
  1245                           
  1246                           ;dc_motor.c: 31:     T2HLTbits.MODE=0b00000;
  1247   001BFA  0EE0               	movlw	-32
  1248   001BFC  16BE               	andwf	190,f,c	;volatile
  1249                           
  1250                           ;dc_motor.c: 32:     T2CLKCONbits.CS=0b0001;
  1251   001BFE  50BF               	movf	191,w,c	;volatile
  1252   001C00  0BF0               	andlw	-16
  1253   001C02  0901               	iorlw	1
  1254   001C04  6EBF               	movwf	191,c	;volatile
  1255   001C06                     
  1256                           ; BSR set to: 14
  1257                           ;dc_motor.c: 36:     T2PR=PWMperiod;
  1258   001C06  C003  FFBC         	movff	initDCmotorsPWM@PWMperiod,4028	;volatile
  1259   001C0A                     
  1260                           ; BSR set to: 14
  1261                           ;dc_motor.c: 37:     T2CONbits.ON=1;
  1262   001C0A  8EBD               	bsf	189,7,c	;volatile
  1263                           
  1264                           ;dc_motor.c: 41:     CCPR1H=0;
  1265   001C0C  0E00               	movlw	0
  1266   001C0E  6EAA               	movwf	170,c	;volatile
  1267                           
  1268                           ;dc_motor.c: 42:     CCPR2H=0;
  1269   001C10  0E00               	movlw	0
  1270   001C12  6EA6               	movwf	166,c	;volatile
  1271                           
  1272                           ;dc_motor.c: 43:     CCPR3H=0;
  1273   001C14  0E00               	movlw	0
  1274   001C16  010F               	movlb	15	; () banked
  1275   001C18  6F25               	movwf	37,b	;volatile
  1276                           
  1277                           ;dc_motor.c: 44:     CCPR4H=0;
  1278   001C1A  0E00               	movlw	0
  1279   001C1C  6F21               	movwf	33,b	;volatile
  1280                           
  1281                           ;dc_motor.c: 47:     CCPTMRS0bits.C1TSEL=0;
  1282   001C1E  0EFC               	movlw	-4
  1283   001C20  16AD               	andwf	173,f,c	;volatile
  1284                           
  1285                           ;dc_motor.c: 48:     CCPTMRS0bits.C2TSEL=0;
  1286   001C22  0EF3               	movlw	-13
  1287   001C24  16AD               	andwf	173,f,c	;volatile
  1288                           
  1289                           ;dc_motor.c: 49:     CCPTMRS0bits.C3TSEL=0;
  1290   001C26  0ECF               	movlw	-49
  1291   001C28  16AD               	andwf	173,f,c	;volatile
  1292                           
  1293                           ;dc_motor.c: 50:     CCPTMRS0bits.C4TSEL=0;
  1294   001C2A  0E3F               	movlw	-193
  1295   001C2C  16AD               	andwf	173,f,c	;volatile
  1296   001C2E                     
  1297                           ; BSR set to: 15
  1298                           ;dc_motor.c: 53:     CCP1CONbits.FMT=1;
  1299   001C2E  88AB               	bsf	171,4,c	;volatile
  1300                           
  1301                           ;dc_motor.c: 54:     CCP1CONbits.CCP1MODE=0b1100;
  1302   001C30  50AB               	movf	171,w,c	;volatile
  1303   001C32  0BF0               	andlw	-16
  1304   001C34  090C               	iorlw	12
  1305   001C36  6EAB               	movwf	171,c	;volatile
  1306   001C38                     
  1307                           ; BSR set to: 15
  1308                           ;dc_motor.c: 55:     CCP1CONbits.EN=1;
  1309   001C38  8EAB               	bsf	171,7,c	;volatile
  1310   001C3A                     
  1311                           ; BSR set to: 15
  1312                           ;dc_motor.c: 58:     CCP2CONbits.FMT=1;
  1313   001C3A  88A7               	bsf	167,4,c	;volatile
  1314                           
  1315                           ;dc_motor.c: 59:     CCP2CONbits.CCP2MODE=0b1100;
  1316   001C3C  50A7               	movf	167,w,c	;volatile
  1317   001C3E  0BF0               	andlw	-16
  1318   001C40  090C               	iorlw	12
  1319   001C42  6EA7               	movwf	167,c	;volatile
  1320   001C44                     
  1321                           ; BSR set to: 15
  1322                           ;dc_motor.c: 60:     CCP2CONbits.EN=1;
  1323   001C44  8EA7               	bsf	167,7,c	;volatile
  1324   001C46                     
  1325                           ; BSR set to: 15
  1326                           ;dc_motor.c: 64:     CCP3CONbits.FMT=1;
  1327   001C46  8926               	bsf	38,4,b	;volatile
  1328                           
  1329                           ;dc_motor.c: 65:     CCP3CONbits.CCP3MODE=0b1100;
  1330   001C48  5126               	movf	38,w,b	;volatile
  1331   001C4A  0BF0               	andlw	-16
  1332   001C4C  090C               	iorlw	12
  1333   001C4E  6F26               	movwf	38,b	;volatile
  1334   001C50                     
  1335                           ; BSR set to: 15
  1336                           ;dc_motor.c: 66:     CCP3CONbits.EN=1;
  1337   001C50  8F26               	bsf	38,7,b	;volatile
  1338   001C52                     
  1339                           ; BSR set to: 15
  1340                           ;dc_motor.c: 69:     CCP4CONbits.FMT=1;
  1341   001C52  8922               	bsf	34,4,b	;volatile
  1342                           
  1343                           ;dc_motor.c: 70:     CCP4CONbits.CCP4MODE=0b1100;
  1344   001C54  5122               	movf	34,w,b	;volatile
  1345   001C56  0BF0               	andlw	-16
  1346   001C58  090C               	iorlw	12
  1347   001C5A  6F22               	movwf	34,b	;volatile
  1348   001C5C                     
  1349                           ; BSR set to: 15
  1350                           ;dc_motor.c: 71:     CCP4CONbits.EN=1;
  1351   001C5C  8F22               	bsf	34,7,b	;volatile
  1352   001C5E                     
  1353                           ; BSR set to: 15
  1354   001C5E  0012               	return		;funcret
  1355   001C60                     __end_of_initDCmotorsPWM:
  1356                           	callstack 0
  1357                           
  1358 ;; *************** function _color_click_init *****************
  1359 ;; Defined at:
  1360 ;;		line 13 in file "color.c"
  1361 ;; Parameters:    Size  Location     Type
  1362 ;;		None
  1363 ;; Auto vars:     Size  Location     Type
  1364 ;;		None
  1365 ;; Return value:  Size  Location     Type
  1366 ;;                  1    wreg      void 
  1367 ;; Registers used:
  1368 ;;		wreg, status,2, status,0, cstack
  1369 ;; Tracked objects:
  1370 ;;		On entry : 0/0
  1371 ;;		On exit  : 0/0
  1372 ;;		Unchanged: 0/0
  1373 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1374 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1375 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1376 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1377 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1378 ;;Total ram usage:        1 bytes
  1379 ;; Hardware stack levels used: 1
  1380 ;; Hardware stack levels required when called: 4
  1381 ;; This function calls:
  1382 ;;		_I2C_2_Master_Init
  1383 ;;		_color_writetoaddr
  1384 ;; This function is called by:
  1385 ;;		_complete_initialisation
  1386 ;; This function uses a non-reentrant model
  1387 ;;
  1388                           
  1389                           	psect	text7
  1390   002130                     __ptext7:
  1391                           	callstack 0
  1392   002130                     _color_click_init:
  1393                           	callstack 25
  1394   002130                     
  1395                           ;color.c: 16:     I2C_2_Master_Init();
  1396   002130  ECB2  F010         	call	_I2C_2_Master_Init	;wreg free
  1397   002134                     
  1398                           ;color.c: 18:   color_writetoaddr(0x00, 0x01);
  1399   002134  0E01               	movlw	1
  1400   002136  6E05               	movwf	color_writetoaddr@value^0,c
  1401   002138  0E00               	movlw	0
  1402   00213A  EC0E  F011         	call	_color_writetoaddr
  1403   00213E                     
  1404                           ;color.c: 19:     _delay((unsigned long)((3)*(64000000/4000.0)));
  1405   00213E  0E3F               	movlw	63
  1406   002140  6E07               	movwf	??_color_click_init^0,c
  1407   002142  0E55               	movlw	85
  1408   002144                     u2537:
  1409   002144  2EE8               	decfsz	wreg,f,c
  1410   002146  D7FE               	bra	u2537
  1411   002148  2E07               	decfsz	??_color_click_init^0,f,c
  1412   00214A  D7FC               	bra	u2537
  1413   00214C  F000               	nop	
  1414   00214E                     
  1415                           ;color.c: 21:  color_writetoaddr(0x00, 0x03);
  1416   00214E  0E03               	movlw	3
  1417   002150  6E05               	movwf	color_writetoaddr@value^0,c
  1418   002152  0E00               	movlw	0
  1419   002154  EC0E  F011         	call	_color_writetoaddr
  1420   002158                     
  1421                           ;color.c: 23:  color_writetoaddr(0x01, 0xD5);
  1422   002158  0ED5               	movlw	213
  1423   00215A  6E05               	movwf	color_writetoaddr@value^0,c
  1424   00215C  0E01               	movlw	1
  1425   00215E  EC0E  F011         	call	_color_writetoaddr
  1426   002162  0012               	return		;funcret
  1427   002164                     __end_of_color_click_init:
  1428                           	callstack 0
  1429                           
  1430 ;; *************** function _color_writetoaddr *****************
  1431 ;; Defined at:
  1432 ;;		line 28 in file "color.c"
  1433 ;; Parameters:    Size  Location     Type
  1434 ;;  address         1    wreg     unsigned char 
  1435 ;;  value           1    4[COMRAM] unsigned char 
  1436 ;; Auto vars:     Size  Location     Type
  1437 ;;  address         1    5[COMRAM] unsigned char 
  1438 ;; Return value:  Size  Location     Type
  1439 ;;                  1    wreg      void 
  1440 ;; Registers used:
  1441 ;;		wreg, status,2, status,0, cstack
  1442 ;; Tracked objects:
  1443 ;;		On entry : 0/0
  1444 ;;		On exit  : 0/0
  1445 ;;		Unchanged: 0/0
  1446 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1447 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1448 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1449 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1450 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1451 ;;Total ram usage:        2 bytes
  1452 ;; Hardware stack levels used: 1
  1453 ;; Hardware stack levels required when called: 3
  1454 ;; This function calls:
  1455 ;;		_I2C_2_Master_Start
  1456 ;;		_I2C_2_Master_Stop
  1457 ;;		_I2C_2_Master_Write
  1458 ;; This function is called by:
  1459 ;;		_color_click_init
  1460 ;; This function uses a non-reentrant model
  1461 ;;
  1462                           
  1463                           	psect	text8
  1464   00221C                     __ptext8:
  1465                           	callstack 0
  1466   00221C                     _color_writetoaddr:
  1467                           	callstack 25
  1468                           
  1469                           ;incstack = 0
  1470                           ;color_writetoaddr@address stored from wreg
  1471   00221C  6E06               	movwf	color_writetoaddr@address^0,c
  1472   00221E                     
  1473                           ;color.c: 29:     I2C_2_Master_Start();
  1474   00221E  EC62  F011         	call	_I2C_2_Master_Start	;wreg free
  1475                           
  1476                           ;color.c: 30:     I2C_2_Master_Write(0x52 | 0x00);
  1477   002222  0E52               	movlw	82
  1478   002224  EC57  F011         	call	_I2C_2_Master_Write
  1479                           
  1480                           ;color.c: 31:     I2C_2_Master_Write(0x80 | address);
  1481   002228  5006               	movf	color_writetoaddr@address^0,w,c
  1482   00222A  0980               	iorlw	128
  1483   00222C  EC57  F011         	call	_I2C_2_Master_Write
  1484                           
  1485                           ;color.c: 32:     I2C_2_Master_Write(value);
  1486   002230  5005               	movf	color_writetoaddr@value^0,w,c
  1487   002232  EC57  F011         	call	_I2C_2_Master_Write
  1488                           
  1489                           ;color.c: 33:     I2C_2_Master_Stop();
  1490   002236  EC5D  F011         	call	_I2C_2_Master_Stop	;wreg free
  1491   00223A  0012               	return		;funcret
  1492   00223C                     __end_of_color_writetoaddr:
  1493                           	callstack 0
  1494                           
  1495 ;; *************** function _I2C_2_Master_Init *****************
  1496 ;; Defined at:
  1497 ;;		line 7 in file "i2c.c"
  1498 ;; Parameters:    Size  Location     Type
  1499 ;;		None
  1500 ;; Auto vars:     Size  Location     Type
  1501 ;;		None
  1502 ;; Return value:  Size  Location     Type
  1503 ;;                  1    wreg      void 
  1504 ;; Registers used:
  1505 ;;		wreg, status,2
  1506 ;; Tracked objects:
  1507 ;;		On entry : 0/0
  1508 ;;		On exit  : 0/0
  1509 ;;		Unchanged: 0/0
  1510 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1511 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1512 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1513 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1514 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1515 ;;Total ram usage:        0 bytes
  1516 ;; Hardware stack levels used: 1
  1517 ;; Hardware stack levels required when called: 1
  1518 ;; This function calls:
  1519 ;;		Nothing
  1520 ;; This function is called by:
  1521 ;;		_color_click_init
  1522 ;;		_complete_initialisation
  1523 ;; This function uses a non-reentrant model
  1524 ;;
  1525                           
  1526                           	psect	text9
  1527   002164                     __ptext9:
  1528                           	callstack 0
  1529   002164                     _I2C_2_Master_Init:
  1530                           	callstack 27
  1531   002164                     
  1532                           ;i2c.c: 10:   SSP2CON1bits.SSPM= 0b1000;
  1533   002164  010E               	movlb	14	; () banked
  1534   002166  51D9               	movf	217,w,b	;volatile
  1535   002168  0BF0               	andlw	-16
  1536   00216A  0908               	iorlw	8
  1537   00216C  6FD9               	movwf	217,b	;volatile
  1538   00216E                     
  1539                           ; BSR set to: 14
  1540                           ;i2c.c: 11:   SSP2CON1bits.SSPEN = 1;
  1541   00216E  8BD9               	bsf	217,5,b	;volatile
  1542                           
  1543                           ;i2c.c: 12:   SSP2ADD = (64000000/(4*100000))-1;
  1544   002170  0E9F               	movlw	159
  1545   002172  6FD6               	movwf	214,b	;volatile
  1546   002174                     
  1547                           ; BSR set to: 14
  1548                           ;i2c.c: 15:   TRISDbits.TRISD5 = 1;
  1549   002174  8A84               	bsf	132,5,c	;volatile
  1550   002176                     
  1551                           ; BSR set to: 14
  1552                           ;i2c.c: 16:   TRISDbits.TRISD6 = 1;
  1553   002176  8C84               	bsf	132,6,c	;volatile
  1554   002178                     
  1555                           ; BSR set to: 14
  1556                           ;i2c.c: 17:   ANSELDbits.ANSELD5=0;
  1557   002178  9BA7               	bcf	167,5,b	;volatile
  1558   00217A                     
  1559                           ; BSR set to: 14
  1560                           ;i2c.c: 18:   ANSELDbits.ANSELD6=0;
  1561   00217A  9DA7               	bcf	167,6,b	;volatile
  1562                           
  1563                           ;i2c.c: 19:   SSP2DATPPS=0x1D;
  1564   00217C  0E1D               	movlw	29
  1565   00217E  6F1D               	movwf	29,b	;volatile
  1566                           
  1567                           ;i2c.c: 20:   SSP2CLKPPS=0x1E;
  1568   002180  0E1E               	movlw	30
  1569   002182  6F1C               	movwf	28,b	;volatile
  1570                           
  1571                           ;i2c.c: 21:   RD5PPS=0x1C;
  1572   002184  0E1C               	movlw	28
  1573   002186  6F6F               	movwf	111,b	;volatile
  1574                           
  1575                           ;i2c.c: 22:   RD6PPS=0x1B;
  1576   002188  0E1B               	movlw	27
  1577   00218A  6F70               	movwf	112,b	;volatile
  1578   00218C                     
  1579                           ; BSR set to: 14
  1580   00218C  0012               	return		;funcret
  1581   00218E                     __end_of_I2C_2_Master_Init:
  1582                           	callstack 0
  1583                           
  1584 ;; *************** function _buggyLEDs_init *****************
  1585 ;; Defined at:
  1586 ;;		line 34 in file "lights_buttons.c"
  1587 ;; Parameters:    Size  Location     Type
  1588 ;;		None
  1589 ;; Auto vars:     Size  Location     Type
  1590 ;;		None
  1591 ;; Return value:  Size  Location     Type
  1592 ;;                  1    wreg      void 
  1593 ;; Registers used:
  1594 ;;		None
  1595 ;; Tracked objects:
  1596 ;;		On entry : 0/0
  1597 ;;		On exit  : 0/0
  1598 ;;		Unchanged: 0/0
  1599 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1600 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1601 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1602 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1603 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1604 ;;Total ram usage:        0 bytes
  1605 ;; Hardware stack levels used: 1
  1606 ;; Hardware stack levels required when called: 1
  1607 ;; This function calls:
  1608 ;;		Nothing
  1609 ;; This function is called by:
  1610 ;;		_complete_initialisation
  1611 ;; This function uses a non-reentrant model
  1612 ;;
  1613                           
  1614                           	psect	text10
  1615   002276                     __ptext10:
  1616                           	callstack 0
  1617   002276                     _buggyLEDs_init:
  1618                           	callstack 28
  1619   002276                     
  1620                           ;lights_buttons.c: 35:     LATHbits.LATH1 = 0;
  1621   002276  9280               	bcf	128,1,c	;volatile
  1622                           
  1623                           ;lights_buttons.c: 36:     LATDbits.LATD3 = 0;
  1624   002278  967C               	bcf	124,3,c	;volatile
  1625                           
  1626                           ;lights_buttons.c: 37:     LATDbits.LATD4 = 0;
  1627   00227A  987C               	bcf	124,4,c	;volatile
  1628                           
  1629                           ;lights_buttons.c: 38:     LATFbits.LATF0 = 0;
  1630   00227C  907E               	bcf	126,0,c	;volatile
  1631                           
  1632                           ;lights_buttons.c: 39:     LATHbits.LATH0 = 0;
  1633   00227E  9080               	bcf	128,0,c	;volatile
  1634                           
  1635                           ;lights_buttons.c: 41:     TRISHbits.TRISH1 = 0;
  1636   002280  9288               	bcf	136,1,c	;volatile
  1637                           
  1638                           ;lights_buttons.c: 42:     TRISDbits.TRISD3 = 0;
  1639   002282  9684               	bcf	132,3,c	;volatile
  1640                           
  1641                           ;lights_buttons.c: 43:     TRISDbits.TRISD4 = 0;
  1642   002284  9884               	bcf	132,4,c	;volatile
  1643                           
  1644                           ;lights_buttons.c: 44:     TRISFbits.TRISF0 = 0;
  1645   002286  9086               	bcf	134,0,c	;volatile
  1646                           
  1647                           ;lights_buttons.c: 45:     TRISHbits.TRISH0 = 0;
  1648   002288  9088               	bcf	136,0,c	;volatile
  1649   00228A  0012               	return		;funcret
  1650   00228C                     __end_of_buggyLEDs_init:
  1651                           	callstack 0
  1652                           
  1653 ;; *************** function _Timer0_init *****************
  1654 ;; Defined at:
  1655 ;;		line 8 in file "timers.c"
  1656 ;; Parameters:    Size  Location     Type
  1657 ;;		None
  1658 ;; Auto vars:     Size  Location     Type
  1659 ;;		None
  1660 ;; Return value:  Size  Location     Type
  1661 ;;                  1    wreg      void 
  1662 ;; Registers used:
  1663 ;;		wreg, status,2
  1664 ;; Tracked objects:
  1665 ;;		On entry : 0/0
  1666 ;;		On exit  : 0/0
  1667 ;;		Unchanged: 0/0
  1668 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1669 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1670 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1671 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1672 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1673 ;;Total ram usage:        0 bytes
  1674 ;; Hardware stack levels used: 1
  1675 ;; Hardware stack levels required when called: 1
  1676 ;; This function calls:
  1677 ;;		Nothing
  1678 ;; This function is called by:
  1679 ;;		_complete_initialisation
  1680 ;; This function uses a non-reentrant model
  1681 ;;
  1682                           
  1683                           	psect	text11
  1684   00223C                     __ptext11:
  1685                           	callstack 0
  1686   00223C                     _Timer0_init:
  1687                           	callstack 28
  1688   00223C                     
  1689                           ;timers.c: 10:     T0CON1bits.T0CS=0b010;
  1690   00223C  50D6               	movf	214,w,c	;volatile
  1691   00223E  0B1F               	andlw	-225
  1692   002240  0940               	iorlw	64
  1693   002242  6ED6               	movwf	214,c	;volatile
  1694   002244                     
  1695                           ;timers.c: 11:     T0CON1bits.T0ASYNC=1;
  1696   002244  88D6               	bsf	214,4,c	;volatile
  1697                           
  1698                           ;timers.c: 12:     T0CON1bits.T0CKPS=0b0101;
  1699   002246  50D6               	movf	214,w,c	;volatile
  1700   002248  0BF0               	andlw	-16
  1701   00224A  0905               	iorlw	5
  1702   00224C  6ED6               	movwf	214,c	;volatile
  1703   00224E                     
  1704                           ;timers.c: 13:     T0CON0bits.T016BIT=1;
  1705   00224E  88D5               	bsf	213,4,c	;volatile
  1706                           
  1707                           ;timers.c: 16:     TMR0H=0;
  1708   002250  0E00               	movlw	0
  1709   002252  6ED4               	movwf	212,c	;volatile
  1710                           
  1711                           ;timers.c: 17:     TMR0L=0b00100011;
  1712   002254  0E23               	movlw	35
  1713   002256  6ED3               	movwf	211,c	;volatile
  1714   002258                     
  1715                           ;timers.c: 18:     T0CON0bits.T0EN=1;
  1716   002258  8ED5               	bsf	213,7,c	;volatile
  1717   00225A  0012               	return		;funcret
  1718   00225C                     __end_of_Timer0_init:
  1719                           	callstack 0
  1720                           
  1721 ;; *************** function _ADC_init *****************
  1722 ;; Defined at:
  1723 ;;		line 8 in file "ADC.c"
  1724 ;; Parameters:    Size  Location     Type
  1725 ;;		None
  1726 ;; Auto vars:     Size  Location     Type
  1727 ;;		None
  1728 ;; Return value:  Size  Location     Type
  1729 ;;                  1    wreg      void 
  1730 ;; Registers used:
  1731 ;;		wreg, status,2
  1732 ;; Tracked objects:
  1733 ;;		On entry : 0/0
  1734 ;;		On exit  : 0/0
  1735 ;;		Unchanged: 0/0
  1736 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1737 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1738 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1739 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1740 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1741 ;;Total ram usage:        0 bytes
  1742 ;; Hardware stack levels used: 1
  1743 ;; Hardware stack levels required when called: 1
  1744 ;; This function calls:
  1745 ;;		Nothing
  1746 ;; This function is called by:
  1747 ;;		_complete_initialisation
  1748 ;; This function uses a non-reentrant model
  1749 ;;
  1750                           
  1751                           	psect	text12
  1752   00225C                     __ptext12:
  1753                           	callstack 0
  1754   00225C                     _ADC_init:
  1755                           	callstack 28
  1756   00225C                     
  1757                           ;ADC.c: 10:     TRISFbits.TRISF6=1;
  1758   00225C  8C86               	bsf	134,6,c	;volatile
  1759                           
  1760                           ;ADC.c: 11:     ANSELFbits.ANSELF6=1;
  1761   00225E  010E               	movlb	14	; () banked
  1762   002260  8DB4               	bsf	180,6,b	;volatile
  1763                           
  1764                           ;ADC.c: 13:     ADREFbits.ADNREF = 0;
  1765   002262  010F               	movlb	15	; () banked
  1766   002264  9958               	bcf	88,4,b	;volatile
  1767   002266                     
  1768                           ; BSR set to: 15
  1769                           ;ADC.c: 14:     ADREFbits.ADPREF = 0b00;
  1770   002266  0EFC               	movlw	-4
  1771   002268  1758               	andwf	88,f,b	;volatile
  1772                           
  1773                           ;ADC.c: 15:     ADPCH=0b101110;
  1774   00226A  0E2E               	movlw	46
  1775   00226C  6F5F               	movwf	95,b	;volatile
  1776   00226E                     
  1777                           ; BSR set to: 15
  1778                           ;ADC.c: 16:     ADCON0bits.ADFM = 0;
  1779   00226E  9460               	bcf	96,2,c	;volatile
  1780   002270                     
  1781                           ; BSR set to: 15
  1782                           ;ADC.c: 17:     ADCON0bits.ADCS = 1;
  1783   002270  8860               	bsf	96,4,c	;volatile
  1784   002272                     
  1785                           ; BSR set to: 15
  1786                           ;ADC.c: 18:     ADCON0bits.ADON = 1;
  1787   002272  8E60               	bsf	96,7,c	;volatile
  1788   002274                     
  1789                           ; BSR set to: 15
  1790   002274  0012               	return		;funcret
  1791   002276                     __end_of_ADC_init:
  1792                           	callstack 0
  1793                           
  1794 ;; *************** function _buggy_color_response *****************
  1795 ;; Defined at:
  1796 ;;		line 128 in file "color.c"
  1797 ;; Parameters:    Size  Location     Type
  1798 ;;  mL              2   54[COMRAM] PTR struct DC_motor
  1799 ;;		 -> motorL(9), 
  1800 ;;  mR              2   56[COMRAM] PTR struct DC_motor
  1801 ;;		 -> motorR(9), 
  1802 ;;  c               2   58[COMRAM] PTR struct colors
  1803 ;;		 -> color(20), 
  1804 ;; Auto vars:     Size  Location     Type
  1805 ;;		None
  1806 ;; Return value:  Size  Location     Type
  1807 ;;                  1    wreg      void 
  1808 ;; Registers used:
  1809 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1810 ;; Tracked objects:
  1811 ;;		On entry : 0/0
  1812 ;;		On exit  : 0/0
  1813 ;;		Unchanged: 0/0
  1814 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1815 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1816 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1817 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1818 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1819 ;;Total ram usage:        8 bytes
  1820 ;; Hardware stack levels used: 1
  1821 ;; Hardware stack levels required when called: 8
  1822 ;; This function calls:
  1823 ;;		_READcolor
  1824 ;;		___flge
  1825 ;;		_forward
  1826 ;;		_movement
  1827 ;;		_movement_return
  1828 ;;		_return_home
  1829 ;;		_space
  1830 ;;		_stop
  1831 ;;		_timer_reset
  1832 ;; This function is called by:
  1833 ;;		_main
  1834 ;; This function uses a non-reentrant model
  1835 ;;
  1836                           
  1837                           	psect	text13
  1838   000048                     __ptext13:
  1839                           	callstack 0
  1840   000048                     _buggy_color_response:
  1841                           	callstack 22
  1842   000048                     
  1843                           ;color.c: 130:     READcolor(&color);
  1844   000048  0E43               	movlw	low _color
  1845   00004A  6E2A               	movwf	READcolor@c^0,c
  1846   00004C  0E00               	movlw	high _color
  1847   00004E  6E2B               	movwf	(READcolor@c+1)^0,c
  1848   000050  ECDC  F009         	call	_READcolor	;wreg free
  1849   000054  0EC5               	movlw	197
  1850   000056  5C49               	subwf	(_color+6)^0,w,c
  1851   000058  0E09               	movlw	9
  1852   00005A  584A               	subwfb	(_color+7)^0,w,c
  1853   00005C  A0D8               	btfss	status,0,c
  1854   00005E  EF33  F000         	goto	u2161
  1855   000062  EF35  F000         	goto	u2160
  1856   000066                     u2161:
  1857   000066  EF77  F003         	goto	l3145
  1858   00006A                     u2160:
  1859   00006A                     
  1860                           ;color.c: 133:         timer_memory[timer_index] = timer_val;
  1861   00006A  0E60               	movlw	low _timer_memory
  1862   00006C  2441               	addwf	_timer_index^0,w,c
  1863   00006E  6ED9               	movwf	fsr2l,c
  1864   000070  6ADA               	clrf	fsr2h,c
  1865   000072  0E00               	movlw	high _timer_memory
  1866   000074  22DA               	addwfc	fsr2h,f,c
  1867   000076  C03F  FFDF         	movff	_timer_val,indf2
  1868   00007A                     
  1869                           ;color.c: 134:         timer_index ++;
  1870   00007A  2A41               	incf	_timer_index^0,f,c
  1871   00007C                     
  1872                           ;color.c: 135:         forward(mL,mR);
  1873   00007C  C037  F01C         	movff	buggy_color_response@mL,forward@mL
  1874   000080  C038  F01D         	movff	buggy_color_response@mL+1,forward@mL+1
  1875   000084  C039  F01E         	movff	buggy_color_response@mR,forward@mR
  1876   000088  C03A  F01F         	movff	buggy_color_response@mR+1,forward@mR+1
  1877   00008C  ECA6  F00C         	call	_forward	;wreg free
  1878   000090                     
  1879                           ;color.c: 136:         _delay((unsigned long)((50)*(64000000/4000.0)));
  1880   000090  0E05               	movlw	5
  1881   000092  6E3E               	movwf	(??_buggy_color_response+1)^0,c
  1882   000094  0E0F               	movlw	15
  1883   000096  6E3D               	movwf	??_buggy_color_response^0,c
  1884   000098  0EF1               	movlw	241
  1885   00009A                     u2547:
  1886   00009A  2EE8               	decfsz	wreg,f,c
  1887   00009C  D7FE               	bra	u2547
  1888   00009E  2E3D               	decfsz	??_buggy_color_response^0,f,c
  1889   0000A0  D7FC               	bra	u2547
  1890   0000A2  2E3E               	decfsz	(??_buggy_color_response+1)^0,f,c
  1891   0000A4  D7FA               	bra	u2547
  1892   0000A6  F000               	nop	
  1893   0000A8                     
  1894                           ;color.c: 137:         stop(mL,mR); _delay((unsigned long)((500)*(64000000/4000.0)));
  1895   0000A8  C037  F016         	movff	buggy_color_response@mL,stop@mL
  1896   0000AC  C038  F017         	movff	buggy_color_response@mL+1,stop@mL+1
  1897   0000B0  C039  F018         	movff	buggy_color_response@mR,stop@mR
  1898   0000B4  C03A  F019         	movff	buggy_color_response@mR+1,stop@mR+1
  1899   0000B8  EC90  F00D         	call	_stop	;wreg free
  1900   0000BC  0E29               	movlw	41
  1901   0000BE  6E3E               	movwf	(??_buggy_color_response+1)^0,c
  1902   0000C0  0E96               	movlw	150
  1903   0000C2  6E3D               	movwf	??_buggy_color_response^0,c
  1904   0000C4  0E7F               	movlw	127
  1905   0000C6                     u2557:
  1906   0000C6  2EE8               	decfsz	wreg,f,c
  1907   0000C8  D7FE               	bra	u2557
  1908   0000CA  2E3D               	decfsz	??_buggy_color_response^0,f,c
  1909   0000CC  D7FC               	bra	u2557
  1910   0000CE  2E3E               	decfsz	(??_buggy_color_response+1)^0,f,c
  1911   0000D0  D7FA               	bra	u2557
  1912   0000D2  F000               	nop	
  1913   0000D4                     
  1914                           ;color.c: 138:         READcolor(&color); _delay((unsigned long)((500)*(64000000/4000.0)
      +                          ));
  1915   0000D4  0E43               	movlw	low _color
  1916   0000D6  6E2A               	movwf	READcolor@c^0,c
  1917   0000D8  0E00               	movlw	high _color
  1918   0000DA  6E2B               	movwf	(READcolor@c+1)^0,c
  1919   0000DC  ECDC  F009         	call	_READcolor	;wreg free
  1920   0000E0  0E29               	movlw	41
  1921   0000E2  6E3E               	movwf	(??_buggy_color_response+1)^0,c
  1922   0000E4  0E96               	movlw	150
  1923   0000E6  6E3D               	movwf	??_buggy_color_response^0,c
  1924   0000E8  0E7F               	movlw	127
  1925   0000EA                     u2567:
  1926   0000EA  2EE8               	decfsz	wreg,f,c
  1927   0000EC  D7FE               	bra	u2567
  1928   0000EE  2E3D               	decfsz	??_buggy_color_response^0,f,c
  1929   0000F0  D7FC               	bra	u2567
  1930   0000F2  2E3E               	decfsz	(??_buggy_color_response+1)^0,f,c
  1931   0000F4  D7FA               	bra	u2567
  1932   0000F6  F000               	nop	
  1933   0000F8                     
  1934                           ;color.c: 140:         if (color.R_norm > 0.77 && color.B_norm < 0.18 && color.G_norm < 
      +                          0.14){
  1935   0000F8  0EB8               	movlw	184
  1936   0000FA  6E03               	movwf	___flge@ff1^0,c
  1937   0000FC  0E1E               	movlw	30
  1938   0000FE  6E04               	movwf	(___flge@ff1+1)^0,c
  1939   000100  0E45               	movlw	69
  1940   000102  6E05               	movwf	(___flge@ff1+2)^0,c
  1941   000104  0E3F               	movlw	63
  1942   000106  6E06               	movwf	(___flge@ff1+3)^0,c
  1943   000108  C04B  F007         	movff	_color+8,___flge@ff2
  1944   00010C  C04C  F008         	movff	_color+9,___flge@ff2+1
  1945   000110  C04D  F009         	movff	_color+10,___flge@ff2+2
  1946   000114  C04E  F00A         	movff	_color+11,___flge@ff2+3
  1947   000118  ECA3  F00B         	call	___flge	;wreg free
  1948   00011C  B0D8               	btfsc	status,0,c
  1949   00011E  EF93  F000         	goto	u2171
  1950   000122  EF95  F000         	goto	u2170
  1951   000126                     u2171:
  1952   000126  EFDC  F000         	goto	l3045
  1953   00012A                     u2170:
  1954   00012A  C04F  F003         	movff	_color+12,___flge@ff1
  1955   00012E  C050  F004         	movff	_color+13,___flge@ff1+1
  1956   000132  C051  F005         	movff	_color+14,___flge@ff1+2
  1957   000136  C052  F006         	movff	_color+15,___flge@ff1+3
  1958   00013A  0EEC               	movlw	236
  1959   00013C  6E07               	movwf	___flge@ff2^0,c
  1960   00013E  0E51               	movlw	81
  1961   000140  6E08               	movwf	(___flge@ff2+1)^0,c
  1962   000142  0E38               	movlw	56
  1963   000144  6E09               	movwf	(___flge@ff2+2)^0,c
  1964   000146  0E3E               	movlw	62
  1965   000148  6E0A               	movwf	(___flge@ff2+3)^0,c
  1966   00014A  ECA3  F00B         	call	___flge	;wreg free
  1967   00014E  B0D8               	btfsc	status,0,c
  1968   000150  EFAC  F000         	goto	u2181
  1969   000154  EFAE  F000         	goto	u2180
  1970   000158                     u2181:
  1971   000158  EFDC  F000         	goto	l3045
  1972   00015C                     u2180:
  1973   00015C  C053  F003         	movff	_color+16,___flge@ff1
  1974   000160  C054  F004         	movff	_color+17,___flge@ff1+1
  1975   000164  C055  F005         	movff	_color+18,___flge@ff1+2
  1976   000168  C056  F006         	movff	_color+19,___flge@ff1+3
  1977   00016C  0E29               	movlw	41
  1978   00016E  6E07               	movwf	___flge@ff2^0,c
  1979   000170  0E5C               	movlw	92
  1980   000172  6E08               	movwf	(___flge@ff2+1)^0,c
  1981   000174  0E0F               	movlw	15
  1982   000176  6E09               	movwf	(___flge@ff2+2)^0,c
  1983   000178  0E3E               	movlw	62
  1984   00017A  6E0A               	movwf	(___flge@ff2+3)^0,c
  1985   00017C  ECA3  F00B         	call	___flge	;wreg free
  1986   000180  B0D8               	btfsc	status,0,c
  1987   000182  EFC5  F000         	goto	u2191
  1988   000186  EFC7  F000         	goto	u2190
  1989   00018A                     u2191:
  1990   00018A  EFDC  F000         	goto	l3045
  1991   00018E                     u2190:
  1992   00018E                     
  1993                           ;color.c: 141:             card_memory[card_count] = 2;
  1994   00018E  0E88               	movlw	low _card_memory
  1995   000190  2442               	addwf	_card_count^0,w,c
  1996   000192  6ED9               	movwf	fsr2l,c
  1997   000194  6ADA               	clrf	fsr2h,c
  1998   000196  0E00               	movlw	high _card_memory
  1999   000198  22DA               	addwfc	fsr2h,f,c
  2000   00019A  0E02               	movlw	2
  2001   00019C  6EDF               	movwf	indf2,c
  2002   00019E                     
  2003                           ;color.c: 142:             card_count ++;
  2004   00019E  2A42               	incf	_card_count^0,f,c
  2005   0001A0                     
  2006                           ;color.c: 143:             movement(mL,mR,1);
  2007   0001A0  C037  F026         	movff	buggy_color_response@mL,movement@mL
  2008   0001A4  C038  F027         	movff	buggy_color_response@mL+1,movement@mL+1
  2009   0001A8  C039  F028         	movff	buggy_color_response@mR,movement@mR
  2010   0001AC  C03A  F029         	movff	buggy_color_response@mR+1,movement@mR+1
  2011   0001B0  0E01               	movlw	1
  2012   0001B2  6E2A               	movwf	movement@count^0,c
  2013   0001B4  EC4F  F005         	call	_movement	;wreg free
  2014   0001B8                     l3045:
  2015                           
  2016                           ;color.c: 147:         if (color.B_norm < 0.25 && color.G_norm > 0.40) {
  2017   0001B8  C04F  F003         	movff	_color+12,___flge@ff1
  2018   0001BC  C050  F004         	movff	_color+13,___flge@ff1+1
  2019   0001C0  C051  F005         	movff	_color+14,___flge@ff1+2
  2020   0001C4  C052  F006         	movff	_color+15,___flge@ff1+3
  2021   0001C8  0E00               	movlw	0
  2022   0001CA  6E07               	movwf	___flge@ff2^0,c
  2023   0001CC  0E00               	movlw	0
  2024   0001CE  6E08               	movwf	(___flge@ff2+1)^0,c
  2025   0001D0  0E80               	movlw	128
  2026   0001D2  6E09               	movwf	(___flge@ff2+2)^0,c
  2027   0001D4  0E3E               	movlw	62
  2028   0001D6  6E0A               	movwf	(___flge@ff2+3)^0,c
  2029   0001D8  ECA3  F00B         	call	___flge	;wreg free
  2030   0001DC  B0D8               	btfsc	status,0,c
  2031   0001DE  EFF3  F000         	goto	u2201
  2032   0001E2  EFF5  F000         	goto	u2200
  2033   0001E6                     u2201:
  2034   0001E6  EF23  F001         	goto	l3055
  2035   0001EA                     u2200:
  2036   0001EA  0ECD               	movlw	205
  2037   0001EC  6E03               	movwf	___flge@ff1^0,c
  2038   0001EE  0ECC               	movlw	204
  2039   0001F0  6E04               	movwf	(___flge@ff1+1)^0,c
  2040   0001F2  0ECC               	movlw	204
  2041   0001F4  6E05               	movwf	(___flge@ff1+2)^0,c
  2042   0001F6  0E3E               	movlw	62
  2043   0001F8  6E06               	movwf	(___flge@ff1+3)^0,c
  2044   0001FA  C053  F007         	movff	_color+16,___flge@ff2
  2045   0001FE  C054  F008         	movff	_color+17,___flge@ff2+1
  2046   000202  C055  F009         	movff	_color+18,___flge@ff2+2
  2047   000206  C056  F00A         	movff	_color+19,___flge@ff2+3
  2048   00020A  ECA3  F00B         	call	___flge	;wreg free
  2049   00020E  B0D8               	btfsc	status,0,c
  2050   000210  EF0C  F001         	goto	u2211
  2051   000214  EF0E  F001         	goto	u2210
  2052   000218                     u2211:
  2053   000218  EF23  F001         	goto	l3055
  2054   00021C                     u2210:
  2055   00021C                     
  2056                           ;color.c: 148:             card_memory[card_count] = 1;
  2057   00021C  0E88               	movlw	low _card_memory
  2058   00021E  2442               	addwf	_card_count^0,w,c
  2059   000220  6ED9               	movwf	fsr2l,c
  2060   000222  6ADA               	clrf	fsr2h,c
  2061   000224  0E00               	movlw	high _card_memory
  2062   000226  22DA               	addwfc	fsr2h,f,c
  2063   000228  0E01               	movlw	1
  2064   00022A  6EDF               	movwf	indf2,c
  2065   00022C                     
  2066                           ;color.c: 149:             card_count ++;
  2067   00022C  2A42               	incf	_card_count^0,f,c
  2068   00022E                     
  2069                           ;color.c: 150:             movement(mL,mR,2);
  2070   00022E  C037  F026         	movff	buggy_color_response@mL,movement@mL
  2071   000232  C038  F027         	movff	buggy_color_response@mL+1,movement@mL+1
  2072   000236  C039  F028         	movff	buggy_color_response@mR,movement@mR
  2073   00023A  C03A  F029         	movff	buggy_color_response@mR+1,movement@mR+1
  2074   00023E  0E02               	movlw	2
  2075   000240  6E2A               	movwf	movement@count^0,c
  2076   000242  EC4F  F005         	call	_movement	;wreg free
  2077   000246                     l3055:
  2078                           
  2079                           ;color.c: 154:         if (color.R_norm < 0.38 && color.B_norm > 0.32 && color.G_norm > 
      +                          0.34){
  2080   000246  C04B  F003         	movff	_color+8,___flge@ff1
  2081   00024A  C04C  F004         	movff	_color+9,___flge@ff1+1
  2082   00024E  C04D  F005         	movff	_color+10,___flge@ff1+2
  2083   000252  C04E  F006         	movff	_color+11,___flge@ff1+3
  2084   000256  0E5C               	movlw	92
  2085   000258  6E07               	movwf	___flge@ff2^0,c
  2086   00025A  0E8F               	movlw	143
  2087   00025C  6E08               	movwf	(___flge@ff2+1)^0,c
  2088   00025E  0EC2               	movlw	194
  2089   000260  6E09               	movwf	(___flge@ff2+2)^0,c
  2090   000262  0E3E               	movlw	62
  2091   000264  6E0A               	movwf	(___flge@ff2+3)^0,c
  2092   000266  ECA3  F00B         	call	___flge	;wreg free
  2093   00026A  B0D8               	btfsc	status,0,c
  2094   00026C  EF3A  F001         	goto	u2221
  2095   000270  EF3C  F001         	goto	u2220
  2096   000274                     u2221:
  2097   000274  EF83  F001         	goto	l3067
  2098   000278                     u2220:
  2099   000278  0E0A               	movlw	10
  2100   00027A  6E03               	movwf	___flge@ff1^0,c
  2101   00027C  0ED7               	movlw	215
  2102   00027E  6E04               	movwf	(___flge@ff1+1)^0,c
  2103   000280  0EA3               	movlw	163
  2104   000282  6E05               	movwf	(___flge@ff1+2)^0,c
  2105   000284  0E3E               	movlw	62
  2106   000286  6E06               	movwf	(___flge@ff1+3)^0,c
  2107   000288  C04F  F007         	movff	_color+12,___flge@ff2
  2108   00028C  C050  F008         	movff	_color+13,___flge@ff2+1
  2109   000290  C051  F009         	movff	_color+14,___flge@ff2+2
  2110   000294  C052  F00A         	movff	_color+15,___flge@ff2+3
  2111   000298  ECA3  F00B         	call	___flge	;wreg free
  2112   00029C  B0D8               	btfsc	status,0,c
  2113   00029E  EF53  F001         	goto	u2231
  2114   0002A2  EF55  F001         	goto	u2230
  2115   0002A6                     u2231:
  2116   0002A6  EF83  F001         	goto	l3067
  2117   0002AA                     u2230:
  2118   0002AA  0E7B               	movlw	123
  2119   0002AC  6E03               	movwf	___flge@ff1^0,c
  2120   0002AE  0E14               	movlw	20
  2121   0002B0  6E04               	movwf	(___flge@ff1+1)^0,c
  2122   0002B2  0EAE               	movlw	174
  2123   0002B4  6E05               	movwf	(___flge@ff1+2)^0,c
  2124   0002B6  0E3E               	movlw	62
  2125   0002B8  6E06               	movwf	(___flge@ff1+3)^0,c
  2126   0002BA  C053  F007         	movff	_color+16,___flge@ff2
  2127   0002BE  C054  F008         	movff	_color+17,___flge@ff2+1
  2128   0002C2  C055  F009         	movff	_color+18,___flge@ff2+2
  2129   0002C6  C056  F00A         	movff	_color+19,___flge@ff2+3
  2130   0002CA  ECA3  F00B         	call	___flge	;wreg free
  2131   0002CE  B0D8               	btfsc	status,0,c
  2132   0002D0  EF6C  F001         	goto	u2241
  2133   0002D4  EF6E  F001         	goto	u2240
  2134   0002D8                     u2241:
  2135   0002D8  EF83  F001         	goto	l3067
  2136   0002DC                     u2240:
  2137   0002DC                     
  2138                           ;color.c: 155:             card_memory[card_count] = 3;
  2139   0002DC  0E88               	movlw	low _card_memory
  2140   0002DE  2442               	addwf	_card_count^0,w,c
  2141   0002E0  6ED9               	movwf	fsr2l,c
  2142   0002E2  6ADA               	clrf	fsr2h,c
  2143   0002E4  0E00               	movlw	high _card_memory
  2144   0002E6  22DA               	addwfc	fsr2h,f,c
  2145   0002E8  0E03               	movlw	3
  2146   0002EA  6EDF               	movwf	indf2,c
  2147   0002EC                     
  2148                           ;color.c: 156:             card_count ++;
  2149   0002EC  2A42               	incf	_card_count^0,f,c
  2150   0002EE                     
  2151                           ;color.c: 157:             movement(mL,mR,3);
  2152   0002EE  C037  F026         	movff	buggy_color_response@mL,movement@mL
  2153   0002F2  C038  F027         	movff	buggy_color_response@mL+1,movement@mL+1
  2154   0002F6  C039  F028         	movff	buggy_color_response@mR,movement@mR
  2155   0002FA  C03A  F029         	movff	buggy_color_response@mR+1,movement@mR+1
  2156   0002FE  0E03               	movlw	3
  2157   000300  6E2A               	movwf	movement@count^0,c
  2158   000302  EC4F  F005         	call	_movement	;wreg free
  2159   000306                     l3067:
  2160                           
  2161                           ;color.c: 161:         if (color.R_norm > 0.52 && color.G_norm > 0.32){
  2162   000306  0EB8               	movlw	184
  2163   000308  6E03               	movwf	___flge@ff1^0,c
  2164   00030A  0E1E               	movlw	30
  2165   00030C  6E04               	movwf	(___flge@ff1+1)^0,c
  2166   00030E  0E05               	movlw	5
  2167   000310  6E05               	movwf	(___flge@ff1+2)^0,c
  2168   000312  0E3F               	movlw	63
  2169   000314  6E06               	movwf	(___flge@ff1+3)^0,c
  2170   000316  C04B  F007         	movff	_color+8,___flge@ff2
  2171   00031A  C04C  F008         	movff	_color+9,___flge@ff2+1
  2172   00031E  C04D  F009         	movff	_color+10,___flge@ff2+2
  2173   000322  C04E  F00A         	movff	_color+11,___flge@ff2+3
  2174   000326  ECA3  F00B         	call	___flge	;wreg free
  2175   00032A  B0D8               	btfsc	status,0,c
  2176   00032C  EF9A  F001         	goto	u2251
  2177   000330  EF9C  F001         	goto	u2250
  2178   000334                     u2251:
  2179   000334  EFCA  F001         	goto	l3077
  2180   000338                     u2250:
  2181   000338  0E0A               	movlw	10
  2182   00033A  6E03               	movwf	___flge@ff1^0,c
  2183   00033C  0ED7               	movlw	215
  2184   00033E  6E04               	movwf	(___flge@ff1+1)^0,c
  2185   000340  0EA3               	movlw	163
  2186   000342  6E05               	movwf	(___flge@ff1+2)^0,c
  2187   000344  0E3E               	movlw	62
  2188   000346  6E06               	movwf	(___flge@ff1+3)^0,c
  2189   000348  C053  F007         	movff	_color+16,___flge@ff2
  2190   00034C  C054  F008         	movff	_color+17,___flge@ff2+1
  2191   000350  C055  F009         	movff	_color+18,___flge@ff2+2
  2192   000354  C056  F00A         	movff	_color+19,___flge@ff2+3
  2193   000358  ECA3  F00B         	call	___flge	;wreg free
  2194   00035C  B0D8               	btfsc	status,0,c
  2195   00035E  EFB3  F001         	goto	u2261
  2196   000362  EFB5  F001         	goto	u2260
  2197   000366                     u2261:
  2198   000366  EFCA  F001         	goto	l3077
  2199   00036A                     u2260:
  2200   00036A                     
  2201                           ;color.c: 162:             card_memory[card_count] = 9;
  2202   00036A  0E88               	movlw	low _card_memory
  2203   00036C  2442               	addwf	_card_count^0,w,c
  2204   00036E  6ED9               	movwf	fsr2l,c
  2205   000370  6ADA               	clrf	fsr2h,c
  2206   000372  0E00               	movlw	high _card_memory
  2207   000374  22DA               	addwfc	fsr2h,f,c
  2208   000376  0E09               	movlw	9
  2209   000378  6EDF               	movwf	indf2,c
  2210   00037A                     
  2211                           ;color.c: 163:             card_count ++;
  2212   00037A  2A42               	incf	_card_count^0,f,c
  2213   00037C                     
  2214                           ;color.c: 164:             movement(mL,mR,4);
  2215   00037C  C037  F026         	movff	buggy_color_response@mL,movement@mL
  2216   000380  C038  F027         	movff	buggy_color_response@mL+1,movement@mL+1
  2217   000384  C039  F028         	movff	buggy_color_response@mR,movement@mR
  2218   000388  C03A  F029         	movff	buggy_color_response@mR+1,movement@mR+1
  2219   00038C  0E04               	movlw	4
  2220   00038E  6E2A               	movwf	movement@count^0,c
  2221   000390  EC4F  F005         	call	_movement	;wreg free
  2222   000394                     l3077:
  2223                           
  2224                           ;color.c: 168:         if (color.R_norm > 0.50 && color.B_norm > 0.24 && color.G_norm < 
      +                          0.33){
  2225   000394  0E00               	movlw	0
  2226   000396  6E03               	movwf	___flge@ff1^0,c
  2227   000398  0E00               	movlw	0
  2228   00039A  6E04               	movwf	(___flge@ff1+1)^0,c
  2229   00039C  0E00               	movlw	0
  2230   00039E  6E05               	movwf	(___flge@ff1+2)^0,c
  2231   0003A0  0E3F               	movlw	63
  2232   0003A2  6E06               	movwf	(___flge@ff1+3)^0,c
  2233   0003A4  C04B  F007         	movff	_color+8,___flge@ff2
  2234   0003A8  C04C  F008         	movff	_color+9,___flge@ff2+1
  2235   0003AC  C04D  F009         	movff	_color+10,___flge@ff2+2
  2236   0003B0  C04E  F00A         	movff	_color+11,___flge@ff2+3
  2237   0003B4  ECA3  F00B         	call	___flge	;wreg free
  2238   0003B8  B0D8               	btfsc	status,0,c
  2239   0003BA  EFE1  F001         	goto	u2271
  2240   0003BE  EFE3  F001         	goto	u2270
  2241   0003C2                     u2271:
  2242   0003C2  EF2A  F002         	goto	l3089
  2243   0003C6                     u2270:
  2244   0003C6  0E8F               	movlw	143
  2245   0003C8  6E03               	movwf	___flge@ff1^0,c
  2246   0003CA  0EC2               	movlw	194
  2247   0003CC  6E04               	movwf	(___flge@ff1+1)^0,c
  2248   0003CE  0E75               	movlw	117
  2249   0003D0  6E05               	movwf	(___flge@ff1+2)^0,c
  2250   0003D2  0E3E               	movlw	62
  2251   0003D4  6E06               	movwf	(___flge@ff1+3)^0,c
  2252   0003D6  C04F  F007         	movff	_color+12,___flge@ff2
  2253   0003DA  C050  F008         	movff	_color+13,___flge@ff2+1
  2254   0003DE  C051  F009         	movff	_color+14,___flge@ff2+2
  2255   0003E2  C052  F00A         	movff	_color+15,___flge@ff2+3
  2256   0003E6  ECA3  F00B         	call	___flge	;wreg free
  2257   0003EA  B0D8               	btfsc	status,0,c
  2258   0003EC  EFFA  F001         	goto	u2281
  2259   0003F0  EFFC  F001         	goto	u2280
  2260   0003F4                     u2281:
  2261   0003F4  EF2A  F002         	goto	l3089
  2262   0003F8                     u2280:
  2263   0003F8  C053  F003         	movff	_color+16,___flge@ff1
  2264   0003FC  C054  F004         	movff	_color+17,___flge@ff1+1
  2265   000400  C055  F005         	movff	_color+18,___flge@ff1+2
  2266   000404  C056  F006         	movff	_color+19,___flge@ff1+3
  2267   000408  0EC3               	movlw	195
  2268   00040A  6E07               	movwf	___flge@ff2^0,c
  2269   00040C  0EF5               	movlw	245
  2270   00040E  6E08               	movwf	(___flge@ff2+1)^0,c
  2271   000410  0EA8               	movlw	168
  2272   000412  6E09               	movwf	(___flge@ff2+2)^0,c
  2273   000414  0E3E               	movlw	62
  2274   000416  6E0A               	movwf	(___flge@ff2+3)^0,c
  2275   000418  ECA3  F00B         	call	___flge	;wreg free
  2276   00041C  B0D8               	btfsc	status,0,c
  2277   00041E  EF13  F002         	goto	u2291
  2278   000422  EF15  F002         	goto	u2290
  2279   000426                     u2291:
  2280   000426  EF2A  F002         	goto	l3089
  2281   00042A                     u2290:
  2282   00042A                     
  2283                           ;color.c: 169:             card_memory[card_count] = 10;
  2284   00042A  0E88               	movlw	low _card_memory
  2285   00042C  2442               	addwf	_card_count^0,w,c
  2286   00042E  6ED9               	movwf	fsr2l,c
  2287   000430  6ADA               	clrf	fsr2h,c
  2288   000432  0E00               	movlw	high _card_memory
  2289   000434  22DA               	addwfc	fsr2h,f,c
  2290   000436  0E0A               	movlw	10
  2291   000438  6EDF               	movwf	indf2,c
  2292   00043A                     
  2293                           ;color.c: 170:             card_count ++;
  2294   00043A  2A42               	incf	_card_count^0,f,c
  2295   00043C                     
  2296                           ;color.c: 171:             movement(mL,mR,5);
  2297   00043C  C037  F026         	movff	buggy_color_response@mL,movement@mL
  2298   000440  C038  F027         	movff	buggy_color_response@mL+1,movement@mL+1
  2299   000444  C039  F028         	movff	buggy_color_response@mR,movement@mR
  2300   000448  C03A  F029         	movff	buggy_color_response@mR+1,movement@mR+1
  2301   00044C  0E05               	movlw	5
  2302   00044E  6E2A               	movwf	movement@count^0,c
  2303   000450  EC4F  F005         	call	_movement	;wreg free
  2304   000454                     l3089:
  2305                           
  2306                           ;color.c: 175:         if (color.R_norm > 0.60 && color.B_norm < 0.22 && color.G_norm > 
      +                          0.23){
  2307   000454  0E9A               	movlw	154
  2308   000456  6E03               	movwf	___flge@ff1^0,c
  2309   000458  0E99               	movlw	153
  2310   00045A  6E04               	movwf	(___flge@ff1+1)^0,c
  2311   00045C  0E19               	movlw	25
  2312   00045E  6E05               	movwf	(___flge@ff1+2)^0,c
  2313   000460  0E3F               	movlw	63
  2314   000462  6E06               	movwf	(___flge@ff1+3)^0,c
  2315   000464  C04B  F007         	movff	_color+8,___flge@ff2
  2316   000468  C04C  F008         	movff	_color+9,___flge@ff2+1
  2317   00046C  C04D  F009         	movff	_color+10,___flge@ff2+2
  2318   000470  C04E  F00A         	movff	_color+11,___flge@ff2+3
  2319   000474  ECA3  F00B         	call	___flge	;wreg free
  2320   000478  B0D8               	btfsc	status,0,c
  2321   00047A  EF41  F002         	goto	u2301
  2322   00047E  EF43  F002         	goto	u2300
  2323   000482                     u2301:
  2324   000482  EF8A  F002         	goto	l3101
  2325   000486                     u2300:
  2326   000486  C04F  F003         	movff	_color+12,___flge@ff1
  2327   00048A  C050  F004         	movff	_color+13,___flge@ff1+1
  2328   00048E  C051  F005         	movff	_color+14,___flge@ff1+2
  2329   000492  C052  F006         	movff	_color+15,___flge@ff1+3
  2330   000496  0EAE               	movlw	174
  2331   000498  6E07               	movwf	___flge@ff2^0,c
  2332   00049A  0E47               	movlw	71
  2333   00049C  6E08               	movwf	(___flge@ff2+1)^0,c
  2334   00049E  0E61               	movlw	97
  2335   0004A0  6E09               	movwf	(___flge@ff2+2)^0,c
  2336   0004A2  0E3E               	movlw	62
  2337   0004A4  6E0A               	movwf	(___flge@ff2+3)^0,c
  2338   0004A6  ECA3  F00B         	call	___flge	;wreg free
  2339   0004AA  B0D8               	btfsc	status,0,c
  2340   0004AC  EF5A  F002         	goto	u2311
  2341   0004B0  EF5C  F002         	goto	u2310
  2342   0004B4                     u2311:
  2343   0004B4  EF8A  F002         	goto	l3101
  2344   0004B8                     u2310:
  2345   0004B8  0E1F               	movlw	31
  2346   0004BA  6E03               	movwf	___flge@ff1^0,c
  2347   0004BC  0E85               	movlw	133
  2348   0004BE  6E04               	movwf	(___flge@ff1+1)^0,c
  2349   0004C0  0E6B               	movlw	107
  2350   0004C2  6E05               	movwf	(___flge@ff1+2)^0,c
  2351   0004C4  0E3E               	movlw	62
  2352   0004C6  6E06               	movwf	(___flge@ff1+3)^0,c
  2353   0004C8  C053  F007         	movff	_color+16,___flge@ff2
  2354   0004CC  C054  F008         	movff	_color+17,___flge@ff2+1
  2355   0004D0  C055  F009         	movff	_color+18,___flge@ff2+2
  2356   0004D4  C056  F00A         	movff	_color+19,___flge@ff2+3
  2357   0004D8  ECA3  F00B         	call	___flge	;wreg free
  2358   0004DC  B0D8               	btfsc	status,0,c
  2359   0004DE  EF73  F002         	goto	u2321
  2360   0004E2  EF75  F002         	goto	u2320
  2361   0004E6                     u2321:
  2362   0004E6  EF8A  F002         	goto	l3101
  2363   0004EA                     u2320:
  2364   0004EA                     
  2365                           ;color.c: 176:             card_memory[card_count] = 7;
  2366   0004EA  0E88               	movlw	low _card_memory
  2367   0004EC  2442               	addwf	_card_count^0,w,c
  2368   0004EE  6ED9               	movwf	fsr2l,c
  2369   0004F0  6ADA               	clrf	fsr2h,c
  2370   0004F2  0E00               	movlw	high _card_memory
  2371   0004F4  22DA               	addwfc	fsr2h,f,c
  2372   0004F6  0E07               	movlw	7
  2373   0004F8  6EDF               	movwf	indf2,c
  2374   0004FA                     
  2375                           ;color.c: 177:             card_count ++;
  2376   0004FA  2A42               	incf	_card_count^0,f,c
  2377   0004FC                     
  2378                           ;color.c: 178:             movement(mL,mR,6);
  2379   0004FC  C037  F026         	movff	buggy_color_response@mL,movement@mL
  2380   000500  C038  F027         	movff	buggy_color_response@mL+1,movement@mL+1
  2381   000504  C039  F028         	movff	buggy_color_response@mR,movement@mR
  2382   000508  C03A  F029         	movff	buggy_color_response@mR+1,movement@mR+1
  2383   00050C  0E06               	movlw	6
  2384   00050E  6E2A               	movwf	movement@count^0,c
  2385   000510  EC4F  F005         	call	_movement	;wreg free
  2386   000514                     l3101:
  2387                           
  2388                           ;color.c: 182:         if (color.R_norm < 0.40 && color.B_norm > 0.30 && color.G_norm > 
      +                          0.4){
  2389   000514  C04B  F003         	movff	_color+8,___flge@ff1
  2390   000518  C04C  F004         	movff	_color+9,___flge@ff1+1
  2391   00051C  C04D  F005         	movff	_color+10,___flge@ff1+2
  2392   000520  C04E  F006         	movff	_color+11,___flge@ff1+3
  2393   000524  0ECD               	movlw	205
  2394   000526  6E07               	movwf	___flge@ff2^0,c
  2395   000528  0ECC               	movlw	204
  2396   00052A  6E08               	movwf	(___flge@ff2+1)^0,c
  2397   00052C  0ECC               	movlw	204
  2398   00052E  6E09               	movwf	(___flge@ff2+2)^0,c
  2399   000530  0E3E               	movlw	62
  2400   000532  6E0A               	movwf	(___flge@ff2+3)^0,c
  2401   000534  ECA3  F00B         	call	___flge	;wreg free
  2402   000538  B0D8               	btfsc	status,0,c
  2403   00053A  EFA1  F002         	goto	u2331
  2404   00053E  EFA3  F002         	goto	u2330
  2405   000542                     u2331:
  2406   000542  EFEA  F002         	goto	l3113
  2407   000546                     u2330:
  2408   000546  0E9A               	movlw	154
  2409   000548  6E03               	movwf	___flge@ff1^0,c
  2410   00054A  0E99               	movlw	153
  2411   00054C  6E04               	movwf	(___flge@ff1+1)^0,c
  2412   00054E  0E99               	movlw	153
  2413   000550  6E05               	movwf	(___flge@ff1+2)^0,c
  2414   000552  0E3E               	movlw	62
  2415   000554  6E06               	movwf	(___flge@ff1+3)^0,c
  2416   000556  C04F  F007         	movff	_color+12,___flge@ff2
  2417   00055A  C050  F008         	movff	_color+13,___flge@ff2+1
  2418   00055E  C051  F009         	movff	_color+14,___flge@ff2+2
  2419   000562  C052  F00A         	movff	_color+15,___flge@ff2+3
  2420   000566  ECA3  F00B         	call	___flge	;wreg free
  2421   00056A  B0D8               	btfsc	status,0,c
  2422   00056C  EFBA  F002         	goto	u2341
  2423   000570  EFBC  F002         	goto	u2340
  2424   000574                     u2341:
  2425   000574  EFEA  F002         	goto	l3113
  2426   000578                     u2340:
  2427   000578  0ECD               	movlw	205
  2428   00057A  6E03               	movwf	___flge@ff1^0,c
  2429   00057C  0ECC               	movlw	204
  2430   00057E  6E04               	movwf	(___flge@ff1+1)^0,c
  2431   000580  0ECC               	movlw	204
  2432   000582  6E05               	movwf	(___flge@ff1+2)^0,c
  2433   000584  0E3E               	movlw	62
  2434   000586  6E06               	movwf	(___flge@ff1+3)^0,c
  2435   000588  C053  F007         	movff	_color+16,___flge@ff2
  2436   00058C  C054  F008         	movff	_color+17,___flge@ff2+1
  2437   000590  C055  F009         	movff	_color+18,___flge@ff2+2
  2438   000594  C056  F00A         	movff	_color+19,___flge@ff2+3
  2439   000598  ECA3  F00B         	call	___flge	;wreg free
  2440   00059C  B0D8               	btfsc	status,0,c
  2441   00059E  EFD3  F002         	goto	u2351
  2442   0005A2  EFD5  F002         	goto	u2350
  2443   0005A6                     u2351:
  2444   0005A6  EFEA  F002         	goto	l3113
  2445   0005AA                     u2350:
  2446   0005AA                     
  2447                           ;color.c: 183:             card_memory[card_count] = 6;
  2448   0005AA  0E88               	movlw	low _card_memory
  2449   0005AC  2442               	addwf	_card_count^0,w,c
  2450   0005AE  6ED9               	movwf	fsr2l,c
  2451   0005B0  6ADA               	clrf	fsr2h,c
  2452   0005B2  0E00               	movlw	high _card_memory
  2453   0005B4  22DA               	addwfc	fsr2h,f,c
  2454   0005B6  0E06               	movlw	6
  2455   0005B8  6EDF               	movwf	indf2,c
  2456   0005BA                     
  2457                           ;color.c: 184:             card_count ++;
  2458   0005BA  2A42               	incf	_card_count^0,f,c
  2459   0005BC                     
  2460                           ;color.c: 185:             movement(mL,mR,7);
  2461   0005BC  C037  F026         	movff	buggy_color_response@mL,movement@mL
  2462   0005C0  C038  F027         	movff	buggy_color_response@mL+1,movement@mL+1
  2463   0005C4  C039  F028         	movff	buggy_color_response@mR,movement@mR
  2464   0005C8  C03A  F029         	movff	buggy_color_response@mR+1,movement@mR+1
  2465   0005CC  0E07               	movlw	7
  2466   0005CE  6E2A               	movwf	movement@count^0,c
  2467   0005D0  EC4F  F005         	call	_movement	;wreg free
  2468   0005D4                     l3113:
  2469                           
  2470                           ;color.c: 189:         if (color.R_norm < 0.5 && color.C > 16000 ){
  2471   0005D4  C04B  F003         	movff	_color+8,___flge@ff1
  2472   0005D8  C04C  F004         	movff	_color+9,___flge@ff1+1
  2473   0005DC  C04D  F005         	movff	_color+10,___flge@ff1+2
  2474   0005E0  C04E  F006         	movff	_color+11,___flge@ff1+3
  2475   0005E4  0E00               	movlw	0
  2476   0005E6  6E07               	movwf	___flge@ff2^0,c
  2477   0005E8  0E00               	movlw	0
  2478   0005EA  6E08               	movwf	(___flge@ff2+1)^0,c
  2479   0005EC  0E00               	movlw	0
  2480   0005EE  6E09               	movwf	(___flge@ff2+2)^0,c
  2481   0005F0  0E3F               	movlw	63
  2482   0005F2  6E0A               	movwf	(___flge@ff2+3)^0,c
  2483   0005F4  ECA3  F00B         	call	___flge	;wreg free
  2484   0005F8  B0D8               	btfsc	status,0,c
  2485   0005FA  EF01  F003         	goto	u2361
  2486   0005FE  EF03  F003         	goto	u2360
  2487   000602                     u2361:
  2488   000602  EF73  F003         	goto	l3143
  2489   000606                     u2360:
  2490   000606  0E81               	movlw	129
  2491   000608  5C49               	subwf	(_color+6)^0,w,c
  2492   00060A  0E3E               	movlw	62
  2493   00060C  584A               	subwfb	(_color+7)^0,w,c
  2494   00060E  A0D8               	btfss	status,0,c
  2495   000610  EF0C  F003         	goto	u2371
  2496   000614  EF0E  F003         	goto	u2370
  2497   000618                     u2371:
  2498   000618  EF73  F003         	goto	l3143
  2499   00061C                     u2370:
  2500   00061C                     
  2501                           ;color.c: 192:             card_memory[card_count] = 3;
  2502   00061C  0E88               	movlw	low _card_memory
  2503   00061E  2442               	addwf	_card_count^0,w,c
  2504   000620  6ED9               	movwf	fsr2l,c
  2505   000622  6ADA               	clrf	fsr2h,c
  2506   000624  0E00               	movlw	high _card_memory
  2507   000626  22DA               	addwfc	fsr2h,f,c
  2508   000628  0E03               	movlw	3
  2509   00062A  6EDF               	movwf	indf2,c
  2510   00062C                     
  2511                           ;color.c: 193:             card_count ++;
  2512   00062C  2A42               	incf	_card_count^0,f,c
  2513   00062E                     
  2514                           ;color.c: 195:             LATGbits.LATG1 = 0;
  2515   00062E  927F               	bcf	127,1,c	;volatile
  2516   000630                     
  2517                           ;color.c: 196:             LATAbits.LATA4 = 0;
  2518   000630  9879               	bcf	121,4,c	;volatile
  2519   000632                     
  2520                           ;color.c: 197:             LATFbits.LATF7 = 0;
  2521   000632  9E7E               	bcf	126,7,c	;volatile
  2522   000634                     
  2523                           ;color.c: 199:             space(mL,mR);
  2524   000634  C037  F01C         	movff	buggy_color_response@mL,space@mL
  2525   000638  C038  F01D         	movff	buggy_color_response@mL+1,space@mL+1
  2526   00063C  C039  F01E         	movff	buggy_color_response@mR,space@mR
  2527   000640  C03A  F01F         	movff	buggy_color_response@mR+1,space@mR+1
  2528   000644  EC25  F00C         	call	_space	;wreg free
  2529   000648                     
  2530                           ;color.c: 200:             _delay((unsigned long)((500)*(64000000/4000.0)));
  2531   000648  0E29               	movlw	41
  2532   00064A  6E3E               	movwf	(??_buggy_color_response+1)^0,c
  2533   00064C  0E96               	movlw	150
  2534   00064E  6E3D               	movwf	??_buggy_color_response^0,c
  2535   000650  0E7F               	movlw	127
  2536   000652                     u2577:
  2537   000652  2EE8               	decfsz	wreg,f,c
  2538   000654  D7FE               	bra	u2577
  2539   000656  2E3D               	decfsz	??_buggy_color_response^0,f,c
  2540   000658  D7FC               	bra	u2577
  2541   00065A  2E3E               	decfsz	(??_buggy_color_response+1)^0,f,c
  2542   00065C  D7FA               	bra	u2577
  2543   00065E  F000               	nop	
  2544   000660                     
  2545                           ;color.c: 201:             stop(mL,mR);
  2546   000660  C037  F016         	movff	buggy_color_response@mL,stop@mL
  2547   000664  C038  F017         	movff	buggy_color_response@mL+1,stop@mL+1
  2548   000668  C039  F018         	movff	buggy_color_response@mR,stop@mR
  2549   00066C  C03A  F019         	movff	buggy_color_response@mR+1,stop@mR+1
  2550   000670  EC90  F00D         	call	_stop	;wreg free
  2551   000674                     
  2552                           ;color.c: 202:             _delay((unsigned long)((500)*(64000000/4000.0)));
  2553   000674  0E29               	movlw	41
  2554   000676  6E3E               	movwf	(??_buggy_color_response+1)^0,c
  2555   000678  0E96               	movlw	150
  2556   00067A  6E3D               	movwf	??_buggy_color_response^0,c
  2557   00067C  0E7F               	movlw	127
  2558   00067E                     u2587:
  2559   00067E  2EE8               	decfsz	wreg,f,c
  2560   000680  D7FE               	bra	u2587
  2561   000682  2E3D               	decfsz	??_buggy_color_response^0,f,c
  2562   000684  D7FC               	bra	u2587
  2563   000686  2E3E               	decfsz	(??_buggy_color_response+1)^0,f,c
  2564   000688  D7FA               	bra	u2587
  2565   00068A  F000               	nop	
  2566   00068C                     
  2567                           ;color.c: 204:             return_home(mL,mR);
  2568   00068C  C037  F031         	movff	buggy_color_response@mL,return_home@mL
  2569   000690  C038  F032         	movff	buggy_color_response@mL+1,return_home@mL+1
  2570   000694  C039  F033         	movff	buggy_color_response@mR,return_home@mR
  2571   000698  C03A  F034         	movff	buggy_color_response@mR+1,return_home@mR+1
  2572   00069C  EC6B  F008         	call	_return_home	;wreg free
  2573   0006A0                     
  2574                           ;color.c: 206:             stop(mL,mR);
  2575   0006A0  C037  F016         	movff	buggy_color_response@mL,stop@mL
  2576   0006A4  C038  F017         	movff	buggy_color_response@mL+1,stop@mL+1
  2577   0006A8  C039  F018         	movff	buggy_color_response@mR,stop@mR
  2578   0006AC  C03A  F019         	movff	buggy_color_response@mR+1,stop@mR+1
  2579   0006B0  EC90  F00D         	call	_stop	;wreg free
  2580   0006B4                     
  2581                           ;color.c: 207:             _delay((unsigned long)((500)*(64000000/4000.0)));
  2582   0006B4  0E29               	movlw	41
  2583   0006B6  6E3E               	movwf	(??_buggy_color_response+1)^0,c
  2584   0006B8  0E96               	movlw	150
  2585   0006BA  6E3D               	movwf	??_buggy_color_response^0,c
  2586   0006BC  0E7F               	movlw	127
  2587   0006BE                     u2597:
  2588   0006BE  2EE8               	decfsz	wreg,f,c
  2589   0006C0  D7FE               	bra	u2597
  2590   0006C2  2E3D               	decfsz	??_buggy_color_response^0,f,c
  2591   0006C4  D7FC               	bra	u2597
  2592   0006C6  2E3E               	decfsz	(??_buggy_color_response+1)^0,f,c
  2593   0006C8  D7FA               	bra	u2597
  2594   0006CA  F000               	nop	
  2595   0006CC                     
  2596                           ;color.c: 209:             movement_return(mL,mR,3);
  2597   0006CC  C037  F02C         	movff	buggy_color_response@mL,movement_return@mL
  2598   0006D0  C038  F02D         	movff	buggy_color_response@mL+1,movement_return@mL+1
  2599   0006D4  C039  F02E         	movff	buggy_color_response@mR,movement_return@mR
  2600   0006D8  C03A  F02F         	movff	buggy_color_response@mR+1,movement_return@mR+1
  2601   0006DC  0E03               	movlw	3
  2602   0006DE  6E30               	movwf	movement_return@count^0,c
  2603   0006E0  EC96  F007         	call	_movement_return	;wreg free
  2604   0006E4  0003               	sleep		;# 
  2605   0006E6                     l3143:
  2606                           
  2607                           ;color.c: 213:         timer_reset();
  2608   0006E6  EC46  F011         	call	_timer_reset	;wreg free
  2609                           
  2610                           ;color.c: 214:     }
  2611   0006EA  EF81  F003         	goto	l146
  2612   0006EE                     l3145:
  2613   0006EE  C037  F01C         	movff	buggy_color_response@mL,forward@mL
  2614   0006F2  C038  F01D         	movff	buggy_color_response@mL+1,forward@mL+1
  2615   0006F6  C039  F01E         	movff	buggy_color_response@mR,forward@mR
  2616   0006FA  C03A  F01F         	movff	buggy_color_response@mR+1,forward@mR+1
  2617   0006FE  ECA6  F00C         	call	_forward	;wreg free
  2618   000702                     l146:
  2619   000702  0012               	return		;funcret
  2620   000704                     __end_of_buggy_color_response:
  2621                           	callstack 0
  2622                           
  2623 ;; *************** function _timer_reset *****************
  2624 ;; Defined at:
  2625 ;;		line 25 in file "timers.c"
  2626 ;; Parameters:    Size  Location     Type
  2627 ;;		None
  2628 ;; Auto vars:     Size  Location     Type
  2629 ;;		None
  2630 ;; Return value:  Size  Location     Type
  2631 ;;                  1    wreg      void 
  2632 ;; Registers used:
  2633 ;;		wreg, status,2
  2634 ;; Tracked objects:
  2635 ;;		On entry : 0/0
  2636 ;;		On exit  : 0/0
  2637 ;;		Unchanged: 0/0
  2638 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2639 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2640 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2641 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2642 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2643 ;;Total ram usage:        0 bytes
  2644 ;; Hardware stack levels used: 1
  2645 ;; Hardware stack levels required when called: 1
  2646 ;; This function calls:
  2647 ;;		Nothing
  2648 ;; This function is called by:
  2649 ;;		_buggy_color_response
  2650 ;;		_main
  2651 ;; This function uses a non-reentrant model
  2652 ;;
  2653                           
  2654                           	psect	text14
  2655   00228C                     __ptext14:
  2656                           	callstack 0
  2657   00228C                     _timer_reset:
  2658                           	callstack 29
  2659   00228C                     
  2660                           ;timers.c: 26:     timer_val = 0;
  2661   00228C  0E00               	movlw	0
  2662   00228E  6E40               	movwf	(_timer_val+1)^0,c
  2663   002290  0E00               	movlw	0
  2664   002292  6E3F               	movwf	_timer_val^0,c
  2665                           
  2666                           ;timers.c: 27:     TMR0H=0;
  2667   002294  0E00               	movlw	0
  2668   002296  6ED4               	movwf	212,c	;volatile
  2669                           
  2670                           ;timers.c: 28:     TMR0L=0b00100011;
  2671   002298  0E23               	movlw	35
  2672   00229A  6ED3               	movwf	211,c	;volatile
  2673   00229C  0012               	return		;funcret
  2674   00229E                     __end_of_timer_reset:
  2675                           	callstack 0
  2676                           
  2677 ;; *************** function _return_home *****************
  2678 ;; Defined at:
  2679 ;;		line 248 in file "color.c"
  2680 ;; Parameters:    Size  Location     Type
  2681 ;;  mL              2   48[COMRAM] PTR struct DC_motor
  2682 ;;		 -> motorL(9), 
  2683 ;;  mR              2   50[COMRAM] PTR struct DC_motor
  2684 ;;		 -> motorR(9), 
  2685 ;; Auto vars:     Size  Location     Type
  2686 ;;		None
  2687 ;; Return value:  Size  Location     Type
  2688 ;;                  1    wreg      void 
  2689 ;; Registers used:
  2690 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2691 ;; Tracked objects:
  2692 ;;		On entry : 0/0
  2693 ;;		On exit  : 0/0
  2694 ;;		Unchanged: 0/0
  2695 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2696 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2697 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2698 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2699 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2700 ;;Total ram usage:        6 bytes
  2701 ;; Hardware stack levels used: 1
  2702 ;; Hardware stack levels required when called: 7
  2703 ;; This function calls:
  2704 ;;		_delay_ms_func
  2705 ;;		_forward
  2706 ;;		_movement_return
  2707 ;;		_reverse
  2708 ;;		_stop
  2709 ;; This function is called by:
  2710 ;;		_buggy_color_response
  2711 ;; This function uses a non-reentrant model
  2712 ;;
  2713                           
  2714                           	psect	text15
  2715   0010D6                     __ptext15:
  2716                           	callstack 0
  2717   0010D6                     _return_home:
  2718                           	callstack 22
  2719   0010D6                     
  2720                           ;color.c: 249:     while(timer_index > 0 && card_count > 0 ) {
  2721   0010D6  EF15  F009         	goto	l2913
  2722   0010DA                     l2881:
  2723                           
  2724                           ;color.c: 251:         movement_return(mL,mR,card_memory[card_count-1]);
  2725   0010DA  C031  F02C         	movff	return_home@mL,movement_return@mL
  2726   0010DE  C032  F02D         	movff	return_home@mL+1,movement_return@mL+1
  2727   0010E2  C033  F02E         	movff	return_home@mR,movement_return@mR
  2728   0010E6  C034  F02F         	movff	return_home@mR+1,movement_return@mR+1
  2729   0010EA  0E87               	movlw	low (_card_memory+65535)
  2730   0010EC  2442               	addwf	_card_count^0,w,c
  2731   0010EE  6ED9               	movwf	fsr2l,c
  2732   0010F0  6ADA               	clrf	fsr2h,c
  2733   0010F2  0E00               	movlw	high (_card_memory+65535)
  2734   0010F4  22DA               	addwfc	fsr2h,f,c
  2735   0010F6  50DF               	movf	indf2,w,c
  2736   0010F8  6E30               	movwf	movement_return@count^0,c
  2737   0010FA  EC96  F007         	call	_movement_return	;wreg free
  2738   0010FE                     
  2739                           ;color.c: 252:         card_count--;
  2740   0010FE  0642               	decf	_card_count^0,f,c
  2741   001100                     
  2742                           ;color.c: 253:         _delay((unsigned long)((250)*(64000000/4000.0)));
  2743   001100  0E15               	movlw	21
  2744   001102  6E36               	movwf	(??_return_home+1)^0,c
  2745   001104  0E4B               	movlw	75
  2746   001106  6E35               	movwf	??_return_home^0,c
  2747   001108  0EBE               	movlw	190
  2748   00110A                     u2607:
  2749   00110A  2EE8               	decfsz	wreg,f,c
  2750   00110C  D7FE               	bra	u2607
  2751   00110E  2E35               	decfsz	??_return_home^0,f,c
  2752   001110  D7FC               	bra	u2607
  2753   001112  2E36               	decfsz	(??_return_home+1)^0,f,c
  2754   001114  D7FA               	bra	u2607
  2755   001116  D000               	nop2	
  2756   001118                     
  2757                           ;color.c: 254:         reverse(mL,mR);
  2758   001118  C031  F01C         	movff	return_home@mL,reverse@mL
  2759   00111C  C032  F01D         	movff	return_home@mL+1,reverse@mL+1
  2760   001120  C033  F01E         	movff	return_home@mR,reverse@mR
  2761   001124  C034  F01F         	movff	return_home@mR+1,reverse@mR+1
  2762   001128  EC1B  F00D         	call	_reverse	;wreg free
  2763   00112C                     
  2764                           ;color.c: 255:         _delay((unsigned long)((500)*(64000000/4000.0)));
  2765   00112C  0E29               	movlw	41
  2766   00112E  6E36               	movwf	(??_return_home+1)^0,c
  2767   001130  0E96               	movlw	150
  2768   001132  6E35               	movwf	??_return_home^0,c
  2769   001134  0E7F               	movlw	127
  2770   001136                     u2617:
  2771   001136  2EE8               	decfsz	wreg,f,c
  2772   001138  D7FE               	bra	u2617
  2773   00113A  2E35               	decfsz	??_return_home^0,f,c
  2774   00113C  D7FC               	bra	u2617
  2775   00113E  2E36               	decfsz	(??_return_home+1)^0,f,c
  2776   001140  D7FA               	bra	u2617
  2777   001142  F000               	nop	
  2778   001144                     
  2779                           ;color.c: 256:         stop(mL,mR);
  2780   001144  C031  F016         	movff	return_home@mL,stop@mL
  2781   001148  C032  F017         	movff	return_home@mL+1,stop@mL+1
  2782   00114C  C033  F018         	movff	return_home@mR,stop@mR
  2783   001150  C034  F019         	movff	return_home@mR+1,stop@mR+1
  2784   001154  EC90  F00D         	call	_stop	;wreg free
  2785   001158                     
  2786                           ;color.c: 257:         _delay((unsigned long)((500)*(64000000/4000.0)));
  2787   001158  0E29               	movlw	41
  2788   00115A  6E36               	movwf	(??_return_home+1)^0,c
  2789   00115C  0E96               	movlw	150
  2790   00115E  6E35               	movwf	??_return_home^0,c
  2791   001160  0E7F               	movlw	127
  2792   001162                     u2627:
  2793   001162  2EE8               	decfsz	wreg,f,c
  2794   001164  D7FE               	bra	u2627
  2795   001166  2E35               	decfsz	??_return_home^0,f,c
  2796   001168  D7FC               	bra	u2627
  2797   00116A  2E36               	decfsz	(??_return_home+1)^0,f,c
  2798   00116C  D7FA               	bra	u2627
  2799   00116E  F000               	nop	
  2800   001170                     
  2801                           ;color.c: 258:         forward(mL,mR);
  2802   001170  C031  F01C         	movff	return_home@mL,forward@mL
  2803   001174  C032  F01D         	movff	return_home@mL+1,forward@mL+1
  2804   001178  C033  F01E         	movff	return_home@mR,forward@mR
  2805   00117C  C034  F01F         	movff	return_home@mR+1,forward@mR+1
  2806   001180  ECA6  F00C         	call	_forward	;wreg free
  2807   001184                     
  2808                           ;color.c: 259:         delay_ms_func(timer_memory[timer_index-1]-2);
  2809   001184  0E5F               	movlw	low (_timer_memory+65535)
  2810   001186  2441               	addwf	_timer_index^0,w,c
  2811   001188  6ED9               	movwf	fsr2l,c
  2812   00118A  6ADA               	clrf	fsr2h,c
  2813   00118C  0E00               	movlw	high (_timer_memory+65535)
  2814   00118E  22DA               	addwfc	fsr2h,f,c
  2815   001190  50DF               	movf	indf2,w,c
  2816   001192  6E35               	movwf	??_return_home^0,c
  2817   001194  0EFE               	movlw	254
  2818   001196  2435               	addwf	??_return_home^0,w,c
  2819   001198  6E03               	movwf	delay_ms_func@time^0,c
  2820   00119A  6A04               	clrf	(delay_ms_func@time+1)^0,c
  2821   00119C  0EFF               	movlw	255
  2822   00119E  2204               	addwfc	(delay_ms_func@time+1)^0,f,c
  2823   0011A0  EC58  F010         	call	_delay_ms_func	;wreg free
  2824   0011A4                     
  2825                           ;color.c: 260:         timer_index--;
  2826   0011A4  0641               	decf	_timer_index^0,f,c
  2827   0011A6                     
  2828                           ;color.c: 261:         stop(mL,mR);
  2829   0011A6  C031  F016         	movff	return_home@mL,stop@mL
  2830   0011AA  C032  F017         	movff	return_home@mL+1,stop@mL+1
  2831   0011AE  C033  F018         	movff	return_home@mR,stop@mR
  2832   0011B2  C034  F019         	movff	return_home@mR+1,stop@mR+1
  2833   0011B6  EC90  F00D         	call	_stop	;wreg free
  2834   0011BA                     
  2835                           ;color.c: 262:         _delay((unsigned long)((200)*(64000000/4000.0)));
  2836   0011BA  0E11               	movlw	17
  2837   0011BC  6E36               	movwf	(??_return_home+1)^0,c
  2838   0011BE  0E3C               	movlw	60
  2839   0011C0  6E35               	movwf	??_return_home^0,c
  2840   0011C2  0ECB               	movlw	203
  2841   0011C4                     u2637:
  2842   0011C4  2EE8               	decfsz	wreg,f,c
  2843   0011C6  D7FE               	bra	u2637
  2844   0011C8  2E35               	decfsz	??_return_home^0,f,c
  2845   0011CA  D7FC               	bra	u2637
  2846   0011CC  2E36               	decfsz	(??_return_home+1)^0,f,c
  2847   0011CE  D7FA               	bra	u2637
  2848   0011D0  F000               	nop	
  2849   0011D2                     
  2850                           ;color.c: 263:          reverse(mL,mR);
  2851   0011D2  C031  F01C         	movff	return_home@mL,reverse@mL
  2852   0011D6  C032  F01D         	movff	return_home@mL+1,reverse@mL+1
  2853   0011DA  C033  F01E         	movff	return_home@mR,reverse@mR
  2854   0011DE  C034  F01F         	movff	return_home@mR+1,reverse@mR+1
  2855   0011E2  EC1B  F00D         	call	_reverse	;wreg free
  2856   0011E6                     
  2857                           ;color.c: 264:         _delay((unsigned long)((100)*(64000000/4000.0)));
  2858   0011E6  0E09               	movlw	9
  2859   0011E8  6E36               	movwf	(??_return_home+1)^0,c
  2860   0011EA  0E1E               	movlw	30
  2861   0011EC  6E35               	movwf	??_return_home^0,c
  2862   0011EE  0EE4               	movlw	228
  2863   0011F0                     u2647:
  2864   0011F0  2EE8               	decfsz	wreg,f,c
  2865   0011F2  D7FE               	bra	u2647
  2866   0011F4  2E35               	decfsz	??_return_home^0,f,c
  2867   0011F6  D7FC               	bra	u2647
  2868   0011F8  2E36               	decfsz	(??_return_home+1)^0,f,c
  2869   0011FA  D7FA               	bra	u2647
  2870   0011FC  D000               	nop2	
  2871   0011FE                     
  2872                           ;color.c: 265:         stop(mL,mR);
  2873   0011FE  C031  F016         	movff	return_home@mL,stop@mL
  2874   001202  C032  F017         	movff	return_home@mL+1,stop@mL+1
  2875   001206  C033  F018         	movff	return_home@mR,stop@mR
  2876   00120A  C034  F019         	movff	return_home@mR+1,stop@mR+1
  2877   00120E  EC90  F00D         	call	_stop	;wreg free
  2878   001212                     
  2879                           ;color.c: 266:         _delay((unsigned long)((250)*(64000000/4000.0)));
  2880   001212  0E15               	movlw	21
  2881   001214  6E36               	movwf	(??_return_home+1)^0,c
  2882   001216  0E4B               	movlw	75
  2883   001218  6E35               	movwf	??_return_home^0,c
  2884   00121A  0EBE               	movlw	190
  2885   00121C                     u2657:
  2886   00121C  2EE8               	decfsz	wreg,f,c
  2887   00121E  D7FE               	bra	u2657
  2888   001220  2E35               	decfsz	??_return_home^0,f,c
  2889   001222  D7FC               	bra	u2657
  2890   001224  2E36               	decfsz	(??_return_home+1)^0,f,c
  2891   001226  D7FA               	bra	u2657
  2892   001228  D000               	nop2	
  2893   00122A                     l2913:
  2894                           
  2895                           ;color.c: 249:     while(timer_index > 0 && card_count > 0 ) {
  2896   00122A  5041               	movf	_timer_index^0,w,c
  2897   00122C  B4D8               	btfsc	status,2,c
  2898   00122E  EF1B  F009         	goto	u2091
  2899   001232  EF1D  F009         	goto	u2090
  2900   001236                     u2091:
  2901   001236  EF25  F009         	goto	l154
  2902   00123A                     u2090:
  2903   00123A  5042               	movf	_card_count^0,w,c
  2904   00123C  A4D8               	btfss	status,2,c
  2905   00123E  EF23  F009         	goto	u2101
  2906   001242  EF25  F009         	goto	u2100
  2907   001246                     u2101:
  2908   001246  EF6D  F008         	goto	l2881
  2909   00124A                     u2100:
  2910   00124A                     l154:
  2911   00124A  0012               	return		;funcret
  2912   00124C                     __end_of_return_home:
  2913                           	callstack 0
  2914                           
  2915 ;; *************** function _movement_return *****************
  2916 ;; Defined at:
  2917 ;;		line 324 in file "dc_motor.c"
  2918 ;; Parameters:    Size  Location     Type
  2919 ;;  mL              2   43[COMRAM] PTR struct DC_motor
  2920 ;;		 -> motorL(9), 
  2921 ;;  mR              2   45[COMRAM] PTR struct DC_motor
  2922 ;;		 -> motorR(9), 
  2923 ;;  count           1   47[COMRAM] unsigned char 
  2924 ;; Auto vars:     Size  Location     Type
  2925 ;;		None
  2926 ;; Return value:  Size  Location     Type
  2927 ;;                  1    wreg      void 
  2928 ;; Registers used:
  2929 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2930 ;; Tracked objects:
  2931 ;;		On entry : 0/0
  2932 ;;		On exit  : 0/0
  2933 ;;		Unchanged: 0/0
  2934 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2935 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2936 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2937 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2938 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2939 ;;Total ram usage:        5 bytes
  2940 ;; Hardware stack levels used: 1
  2941 ;; Hardware stack levels required when called: 6
  2942 ;; This function calls:
  2943 ;;		_left_45
  2944 ;;		_reverse_pink
  2945 ;;		_reverse_yellow
  2946 ;;		_right_45
  2947 ;;		_stop
  2948 ;; This function is called by:
  2949 ;;		_buggy_color_response
  2950 ;;		_return_home
  2951 ;; This function uses a non-reentrant model
  2952 ;;
  2953                           
  2954                           	psect	text16
  2955   000F2C                     __ptext16:
  2956                           	callstack 0
  2957   000F2C                     _movement_return:
  2958                           	callstack 22
  2959   000F2C                     
  2960                           ;dc_motor.c: 324: void movement_return(DC_motor *mL, DC_motor *mR, char count);dc_motor.
      +                          c: 325: {;dc_motor.c: 327:     if (count == 1){right_45(mL,mR,2,right_timer); stop(mL,mR
      +                          );}
  2961   000F2C  0430               	decf	movement_return@count^0,w,c
  2962   000F2E  A4D8               	btfss	status,2,c
  2963   000F30  EF9C  F007         	goto	u1611
  2964   000F34  EF9E  F007         	goto	u1610
  2965   000F38                     u1611:
  2966   000F38  EFB8  F007         	goto	l2599
  2967   000F3C                     u1610:
  2968   000F3C  C02C  F01C         	movff	movement_return@mL,right_45@mL
  2969   000F40  C02D  F01D         	movff	movement_return@mL+1,right_45@mL+1
  2970   000F44  C02E  F01E         	movff	movement_return@mR,right_45@mR
  2971   000F48  C02F  F01F         	movff	movement_return@mR+1,right_45@mR+1
  2972   000F4C  0E02               	movlw	2
  2973   000F4E  6E20               	movwf	right_45@count^0,c
  2974   000F50  C059  F021         	movff	_right_timer,right_45@right_timer
  2975   000F54  C05A  F022         	movff	_right_timer+1,right_45@right_timer+1
  2976   000F58  EC79  F00A         	call	_right_45	;wreg free
  2977   000F5C  C02C  F016         	movff	movement_return@mL,stop@mL
  2978   000F60  C02D  F017         	movff	movement_return@mL+1,stop@mL+1
  2979   000F64  C02E  F018         	movff	movement_return@mR,stop@mR
  2980   000F68  C02F  F019         	movff	movement_return@mR+1,stop@mR+1
  2981   000F6C  EC90  F00D         	call	_stop	;wreg free
  2982   000F70                     l2599:
  2983                           
  2984                           ;dc_motor.c: 328:     if (count == 2){left_45(mL,mR,2,left_timer); stop(mL,mR);}
  2985   000F70  0E02               	movlw	2
  2986   000F72  1830               	xorwf	movement_return@count^0,w,c
  2987   000F74  A4D8               	btfss	status,2,c
  2988   000F76  EFBF  F007         	goto	u1621
  2989   000F7A  EFC1  F007         	goto	u1620
  2990   000F7E                     u1621:
  2991   000F7E  EFDB  F007         	goto	l2603
  2992   000F82                     u1620:
  2993   000F82  C02C  F01C         	movff	movement_return@mL,left_45@mL
  2994   000F86  C02D  F01D         	movff	movement_return@mL+1,left_45@mL+1
  2995   000F8A  C02E  F01E         	movff	movement_return@mR,left_45@mR
  2996   000F8E  C02F  F01F         	movff	movement_return@mR+1,left_45@mR+1
  2997   000F92  0E02               	movlw	2
  2998   000F94  6E20               	movwf	left_45@count^0,c
  2999   000F96  C05B  F021         	movff	_left_timer,left_45@left_timer
  3000   000F9A  C05C  F022         	movff	_left_timer+1,left_45@left_timer+1
  3001   000F9E  EC0E  F00B         	call	_left_45	;wreg free
  3002   000FA2  C02C  F016         	movff	movement_return@mL,stop@mL
  3003   000FA6  C02D  F017         	movff	movement_return@mL+1,stop@mL+1
  3004   000FAA  C02E  F018         	movff	movement_return@mR,stop@mR
  3005   000FAE  C02F  F019         	movff	movement_return@mR+1,stop@mR+1
  3006   000FB2  EC90  F00D         	call	_stop	;wreg free
  3007   000FB6                     l2603:
  3008                           
  3009                           ;dc_motor.c: 329:     if (count == 3){right_45(mL,mR,4,right_timer); stop(mL,mR);}
  3010   000FB6  0E03               	movlw	3
  3011   000FB8  1830               	xorwf	movement_return@count^0,w,c
  3012   000FBA  A4D8               	btfss	status,2,c
  3013   000FBC  EFE2  F007         	goto	u1631
  3014   000FC0  EFE4  F007         	goto	u1630
  3015   000FC4                     u1631:
  3016   000FC4  EFFE  F007         	goto	l2607
  3017   000FC8                     u1630:
  3018   000FC8  C02C  F01C         	movff	movement_return@mL,right_45@mL
  3019   000FCC  C02D  F01D         	movff	movement_return@mL+1,right_45@mL+1
  3020   000FD0  C02E  F01E         	movff	movement_return@mR,right_45@mR
  3021   000FD4  C02F  F01F         	movff	movement_return@mR+1,right_45@mR+1
  3022   000FD8  0E04               	movlw	4
  3023   000FDA  6E20               	movwf	right_45@count^0,c
  3024   000FDC  C059  F021         	movff	_right_timer,right_45@right_timer
  3025   000FE0  C05A  F022         	movff	_right_timer+1,right_45@right_timer+1
  3026   000FE4  EC79  F00A         	call	_right_45	;wreg free
  3027   000FE8  C02C  F016         	movff	movement_return@mL,stop@mL
  3028   000FEC  C02D  F017         	movff	movement_return@mL+1,stop@mL+1
  3029   000FF0  C02E  F018         	movff	movement_return@mR,stop@mR
  3030   000FF4  C02F  F019         	movff	movement_return@mR+1,stop@mR+1
  3031   000FF8  EC90  F00D         	call	_stop	;wreg free
  3032   000FFC                     l2607:
  3033                           
  3034                           ;dc_motor.c: 330:     if (count == 6){right_45(mL,mR,3,right_timer); stop(mL,mR);}
  3035   000FFC  0E06               	movlw	6
  3036   000FFE  1830               	xorwf	movement_return@count^0,w,c
  3037   001000  A4D8               	btfss	status,2,c
  3038   001002  EF05  F008         	goto	u1641
  3039   001006  EF07  F008         	goto	u1640
  3040   00100A                     u1641:
  3041   00100A  EF21  F008         	goto	l2611
  3042   00100E                     u1640:
  3043   00100E  C02C  F01C         	movff	movement_return@mL,right_45@mL
  3044   001012  C02D  F01D         	movff	movement_return@mL+1,right_45@mL+1
  3045   001016  C02E  F01E         	movff	movement_return@mR,right_45@mR
  3046   00101A  C02F  F01F         	movff	movement_return@mR+1,right_45@mR+1
  3047   00101E  0E03               	movlw	3
  3048   001020  6E20               	movwf	right_45@count^0,c
  3049   001022  C059  F021         	movff	_right_timer,right_45@right_timer
  3050   001026  C05A  F022         	movff	_right_timer+1,right_45@right_timer+1
  3051   00102A  EC79  F00A         	call	_right_45	;wreg free
  3052   00102E  C02C  F016         	movff	movement_return@mL,stop@mL
  3053   001032  C02D  F017         	movff	movement_return@mL+1,stop@mL+1
  3054   001036  C02E  F018         	movff	movement_return@mR,stop@mR
  3055   00103A  C02F  F019         	movff	movement_return@mR+1,stop@mR+1
  3056   00103E  EC90  F00D         	call	_stop	;wreg free
  3057   001042                     l2611:
  3058                           
  3059                           ;dc_motor.c: 331:     if (count == 7){left_45(mL,mR,3,right_timer); stop(mL,mR);}
  3060   001042  0E07               	movlw	7
  3061   001044  1830               	xorwf	movement_return@count^0,w,c
  3062   001046  A4D8               	btfss	status,2,c
  3063   001048  EF28  F008         	goto	u1651
  3064   00104C  EF2A  F008         	goto	u1650
  3065   001050                     u1651:
  3066   001050  EF44  F008         	goto	l2615
  3067   001054                     u1650:
  3068   001054  C02C  F01C         	movff	movement_return@mL,left_45@mL
  3069   001058  C02D  F01D         	movff	movement_return@mL+1,left_45@mL+1
  3070   00105C  C02E  F01E         	movff	movement_return@mR,left_45@mR
  3071   001060  C02F  F01F         	movff	movement_return@mR+1,left_45@mR+1
  3072   001064  0E03               	movlw	3
  3073   001066  6E20               	movwf	left_45@count^0,c
  3074   001068  C059  F021         	movff	_right_timer,left_45@left_timer
  3075   00106C  C05A  F022         	movff	_right_timer+1,left_45@left_timer+1
  3076   001070  EC0E  F00B         	call	_left_45	;wreg free
  3077   001074  C02C  F016         	movff	movement_return@mL,stop@mL
  3078   001078  C02D  F017         	movff	movement_return@mL+1,stop@mL+1
  3079   00107C  C02E  F018         	movff	movement_return@mR,stop@mR
  3080   001080  C02F  F019         	movff	movement_return@mR+1,stop@mR+1
  3081   001084  EC90  F00D         	call	_stop	;wreg free
  3082   001088                     l2615:
  3083                           
  3084                           ;dc_motor.c: 333:     if (count == 9){reverse_yellow(mL,mR);}
  3085   001088  0E09               	movlw	9
  3086   00108A  1830               	xorwf	movement_return@count^0,w,c
  3087   00108C  A4D8               	btfss	status,2,c
  3088   00108E  EF4B  F008         	goto	u1661
  3089   001092  EF4D  F008         	goto	u1660
  3090   001096                     u1661:
  3091   001096  EF57  F008         	goto	l2619
  3092   00109A                     u1660:
  3093   00109A  C02C  F026         	movff	movement_return@mL,reverse_yellow@mL
  3094   00109E  C02D  F027         	movff	movement_return@mL+1,reverse_yellow@mL+1
  3095   0010A2  C02E  F028         	movff	movement_return@mR,reverse_yellow@mR
  3096   0010A6  C02F  F029         	movff	movement_return@mR+1,reverse_yellow@mR+1
  3097   0010AA  EC30  F00E         	call	_reverse_yellow	;wreg free
  3098   0010AE                     l2619:
  3099                           
  3100                           ;dc_motor.c: 334:     if (count == 10) {reverse_pink(mL,mR);}
  3101   0010AE  0E0A               	movlw	10
  3102   0010B0  1830               	xorwf	movement_return@count^0,w,c
  3103   0010B2  A4D8               	btfss	status,2,c
  3104   0010B4  EF5E  F008         	goto	u1671
  3105   0010B8  EF60  F008         	goto	u1670
  3106   0010BC                     u1671:
  3107   0010BC  EF6A  F008         	goto	l361
  3108   0010C0                     u1670:
  3109   0010C0  C02C  F026         	movff	movement_return@mL,reverse_pink@mL
  3110   0010C4  C02D  F027         	movff	movement_return@mL+1,reverse_pink@mL+1
  3111   0010C8  C02E  F028         	movff	movement_return@mR,reverse_pink@mR
  3112   0010CC  C02F  F029         	movff	movement_return@mR+1,reverse_pink@mR+1
  3113   0010D0  EC71  F00E         	call	_reverse_pink	;wreg free
  3114   0010D4                     l361:
  3115   0010D4  0012               	return		;funcret
  3116   0010D6                     __end_of_movement_return:
  3117                           	callstack 0
  3118                           
  3119 ;; *************** function _reverse_yellow *****************
  3120 ;; Defined at:
  3121 ;;		line 272 in file "dc_motor.c"
  3122 ;; Parameters:    Size  Location     Type
  3123 ;;  mL              2   37[COMRAM] PTR struct DC_motor
  3124 ;;		 -> motorL(9), 
  3125 ;;  mR              2   39[COMRAM] PTR struct DC_motor
  3126 ;;		 -> motorR(9), 
  3127 ;; Auto vars:     Size  Location     Type
  3128 ;;		None
  3129 ;; Return value:  Size  Location     Type
  3130 ;;                  1    wreg      void 
  3131 ;; Registers used:
  3132 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3133 ;; Tracked objects:
  3134 ;;		On entry : 0/0
  3135 ;;		On exit  : 0/0
  3136 ;;		Unchanged: 0/0
  3137 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3138 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3139 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3140 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3141 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3142 ;;Total ram usage:        6 bytes
  3143 ;; Hardware stack levels used: 1
  3144 ;; Hardware stack levels required when called: 5
  3145 ;; This function calls:
  3146 ;;		_custom_delay
  3147 ;;		_left_45
  3148 ;;		_reverse
  3149 ;;		_stop
  3150 ;; This function is called by:
  3151 ;;		_movement_return
  3152 ;; This function uses a non-reentrant model
  3153 ;;
  3154                           
  3155                           	psect	text17
  3156   001C60                     __ptext17:
  3157                           	callstack 0
  3158   001C60                     _reverse_yellow:
  3159                           	callstack 22
  3160   001C60                     
  3161                           ;dc_motor.c: 274:     left_45(mL,mR,2,left_timer);
  3162   001C60  C026  F01C         	movff	reverse_yellow@mL,left_45@mL
  3163   001C64  C027  F01D         	movff	reverse_yellow@mL+1,left_45@mL+1
  3164   001C68  C028  F01E         	movff	reverse_yellow@mR,left_45@mR
  3165   001C6C  C029  F01F         	movff	reverse_yellow@mR+1,left_45@mR+1
  3166   001C70  0E02               	movlw	2
  3167   001C72  6E20               	movwf	left_45@count^0,c
  3168   001C74  C05B  F021         	movff	_left_timer,left_45@left_timer
  3169   001C78  C05C  F022         	movff	_left_timer+1,left_45@left_timer+1
  3170   001C7C  EC0E  F00B         	call	_left_45	;wreg free
  3171                           
  3172                           ;dc_motor.c: 275:     stop(mL,mR);
  3173   001C80  C026  F016         	movff	reverse_yellow@mL,stop@mL
  3174   001C84  C027  F017         	movff	reverse_yellow@mL+1,stop@mL+1
  3175   001C88  C028  F018         	movff	reverse_yellow@mR,stop@mR
  3176   001C8C  C029  F019         	movff	reverse_yellow@mR+1,stop@mR+1
  3177   001C90  EC90  F00D         	call	_stop	;wreg free
  3178   001C94                     
  3179                           ;dc_motor.c: 276:     _delay((unsigned long)((200)*(64000000/4000.0)));
  3180   001C94  0E11               	movlw	17
  3181   001C96  6E2B               	movwf	(??_reverse_yellow+1)^0,c
  3182   001C98  0E3C               	movlw	60
  3183   001C9A  6E2A               	movwf	??_reverse_yellow^0,c
  3184   001C9C  0ECB               	movlw	203
  3185   001C9E                     u2667:
  3186   001C9E  2EE8               	decfsz	wreg,f,c
  3187   001CA0  D7FE               	bra	u2667
  3188   001CA2  2E2A               	decfsz	??_reverse_yellow^0,f,c
  3189   001CA4  D7FC               	bra	u2667
  3190   001CA6  2E2B               	decfsz	(??_reverse_yellow+1)^0,f,c
  3191   001CA8  D7FA               	bra	u2667
  3192   001CAA  F000               	nop	
  3193   001CAC                     
  3194                           ;dc_motor.c: 278:      reverse(mL,mR);
  3195   001CAC  C026  F01C         	movff	reverse_yellow@mL,reverse@mL
  3196   001CB0  C027  F01D         	movff	reverse_yellow@mL+1,reverse@mL+1
  3197   001CB4  C028  F01E         	movff	reverse_yellow@mR,reverse@mR
  3198   001CB8  C029  F01F         	movff	reverse_yellow@mR+1,reverse@mR+1
  3199   001CBC  EC1B  F00D         	call	_reverse	;wreg free
  3200   001CC0  0E03               	movlw	3
  3201   001CC2  6E04               	movwf	(custom_delay@temp+1)^0,c
  3202   001CC4  0E84               	movlw	132
  3203   001CC6  6E03               	movwf	custom_delay@temp^0,c
  3204   001CC8  EC78  F010         	call	_custom_delay	;wreg free
  3205   001CCC                     
  3206                           ;dc_motor.c: 280:     stop(mL,mR);
  3207   001CCC  C026  F016         	movff	reverse_yellow@mL,stop@mL
  3208   001CD0  C027  F017         	movff	reverse_yellow@mL+1,stop@mL+1
  3209   001CD4  C028  F018         	movff	reverse_yellow@mR,stop@mR
  3210   001CD8  C029  F019         	movff	reverse_yellow@mR+1,stop@mR+1
  3211   001CDC  EC90  F00D         	call	_stop	;wreg free
  3212   001CE0  0012               	return		;funcret
  3213   001CE2                     __end_of_reverse_yellow:
  3214                           	callstack 0
  3215                           
  3216 ;; *************** function _reverse_pink *****************
  3217 ;; Defined at:
  3218 ;;		line 286 in file "dc_motor.c"
  3219 ;; Parameters:    Size  Location     Type
  3220 ;;  mL              2   37[COMRAM] PTR struct DC_motor
  3221 ;;		 -> motorL(9), 
  3222 ;;  mR              2   39[COMRAM] PTR struct DC_motor
  3223 ;;		 -> motorR(9), 
  3224 ;; Auto vars:     Size  Location     Type
  3225 ;;		None
  3226 ;; Return value:  Size  Location     Type
  3227 ;;                  1    wreg      void 
  3228 ;; Registers used:
  3229 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3230 ;; Tracked objects:
  3231 ;;		On entry : 0/0
  3232 ;;		On exit  : 0/0
  3233 ;;		Unchanged: 0/0
  3234 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3235 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3236 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3237 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3238 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3239 ;;Total ram usage:        6 bytes
  3240 ;; Hardware stack levels used: 1
  3241 ;; Hardware stack levels required when called: 5
  3242 ;; This function calls:
  3243 ;;		_custom_delay
  3244 ;;		_reverse
  3245 ;;		_right_45
  3246 ;;		_stop
  3247 ;; This function is called by:
  3248 ;;		_movement_return
  3249 ;; This function uses a non-reentrant model
  3250 ;;
  3251                           
  3252                           	psect	text18
  3253   001CE2                     __ptext18:
  3254                           	callstack 0
  3255   001CE2                     _reverse_pink:
  3256                           	callstack 22
  3257   001CE2                     
  3258                           ;dc_motor.c: 288:     right_45(mL,mR,2,right_timer);
  3259   001CE2  C026  F01C         	movff	reverse_pink@mL,right_45@mL
  3260   001CE6  C027  F01D         	movff	reverse_pink@mL+1,right_45@mL+1
  3261   001CEA  C028  F01E         	movff	reverse_pink@mR,right_45@mR
  3262   001CEE  C029  F01F         	movff	reverse_pink@mR+1,right_45@mR+1
  3263   001CF2  0E02               	movlw	2
  3264   001CF4  6E20               	movwf	right_45@count^0,c
  3265   001CF6  C059  F021         	movff	_right_timer,right_45@right_timer
  3266   001CFA  C05A  F022         	movff	_right_timer+1,right_45@right_timer+1
  3267   001CFE  EC79  F00A         	call	_right_45	;wreg free
  3268                           
  3269                           ;dc_motor.c: 289:     stop(mL,mR);
  3270   001D02  C026  F016         	movff	reverse_pink@mL,stop@mL
  3271   001D06  C027  F017         	movff	reverse_pink@mL+1,stop@mL+1
  3272   001D0A  C028  F018         	movff	reverse_pink@mR,stop@mR
  3273   001D0E  C029  F019         	movff	reverse_pink@mR+1,stop@mR+1
  3274   001D12  EC90  F00D         	call	_stop	;wreg free
  3275   001D16                     
  3276                           ;dc_motor.c: 290:     _delay((unsigned long)((200)*(64000000/4000.0)));
  3277   001D16  0E11               	movlw	17
  3278   001D18  6E2B               	movwf	(??_reverse_pink+1)^0,c
  3279   001D1A  0E3C               	movlw	60
  3280   001D1C  6E2A               	movwf	??_reverse_pink^0,c
  3281   001D1E  0ECB               	movlw	203
  3282   001D20                     u2677:
  3283   001D20  2EE8               	decfsz	wreg,f,c
  3284   001D22  D7FE               	bra	u2677
  3285   001D24  2E2A               	decfsz	??_reverse_pink^0,f,c
  3286   001D26  D7FC               	bra	u2677
  3287   001D28  2E2B               	decfsz	(??_reverse_pink+1)^0,f,c
  3288   001D2A  D7FA               	bra	u2677
  3289   001D2C  F000               	nop	
  3290   001D2E                     
  3291                           ;dc_motor.c: 292:     reverse(mL,mR);
  3292   001D2E  C026  F01C         	movff	reverse_pink@mL,reverse@mL
  3293   001D32  C027  F01D         	movff	reverse_pink@mL+1,reverse@mL+1
  3294   001D36  C028  F01E         	movff	reverse_pink@mR,reverse@mR
  3295   001D3A  C029  F01F         	movff	reverse_pink@mR+1,reverse@mR+1
  3296   001D3E  EC1B  F00D         	call	_reverse	;wreg free
  3297   001D42  0E03               	movlw	3
  3298   001D44  6E04               	movwf	(custom_delay@temp+1)^0,c
  3299   001D46  0E84               	movlw	132
  3300   001D48  6E03               	movwf	custom_delay@temp^0,c
  3301   001D4A  EC78  F010         	call	_custom_delay	;wreg free
  3302   001D4E                     
  3303                           ;dc_motor.c: 294:     stop(mL,mR);
  3304   001D4E  C026  F016         	movff	reverse_pink@mL,stop@mL
  3305   001D52  C027  F017         	movff	reverse_pink@mL+1,stop@mL+1
  3306   001D56  C028  F018         	movff	reverse_pink@mR,stop@mR
  3307   001D5A  C029  F019         	movff	reverse_pink@mR+1,stop@mR+1
  3308   001D5E  EC90  F00D         	call	_stop	;wreg free
  3309   001D62  0012               	return		;funcret
  3310   001D64                     __end_of_reverse_pink:
  3311                           	callstack 0
  3312                           
  3313 ;; *************** function _forward *****************
  3314 ;; Defined at:
  3315 ;;		line 127 in file "dc_motor.c"
  3316 ;; Parameters:    Size  Location     Type
  3317 ;;  mL              2   27[COMRAM] PTR struct DC_motor
  3318 ;;		 -> motorL(9), 
  3319 ;;  mR              2   29[COMRAM] PTR struct DC_motor
  3320 ;;		 -> motorR(9), 
  3321 ;; Auto vars:     Size  Location     Type
  3322 ;;		None
  3323 ;; Return value:  Size  Location     Type
  3324 ;;                  1    wreg      void 
  3325 ;; Registers used:
  3326 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3327 ;; Tracked objects:
  3328 ;;		On entry : 0/0
  3329 ;;		On exit  : 0/0
  3330 ;;		Unchanged: 0/0
  3331 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3332 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3333 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3334 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3335 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3336 ;;Total ram usage:        5 bytes
  3337 ;; Hardware stack levels used: 1
  3338 ;; Hardware stack levels required when called: 4
  3339 ;; This function calls:
  3340 ;;		_setMotorPWM
  3341 ;;		_stop
  3342 ;; This function is called by:
  3343 ;;		_buggy_color_response
  3344 ;;		_return_home
  3345 ;; This function uses a non-reentrant model
  3346 ;;
  3347                           
  3348                           	psect	text19
  3349   00194C                     __ptext19:
  3350                           	callstack 0
  3351   00194C                     _forward:
  3352                           	callstack 24
  3353   00194C                     
  3354                           ;dc_motor.c: 127: void forward(DC_motor *mL, DC_motor *mR);dc_motor.c: 128: {;dc_motor.c
      +                          : 129:     stop(mL,mR);
  3355   00194C  C01C  F016         	movff	forward@mL,stop@mL
  3356   001950  C01D  F017         	movff	forward@mL+1,stop@mL+1
  3357   001954  C01E  F018         	movff	forward@mR,stop@mR
  3358   001958  C01F  F019         	movff	forward@mR+1,stop@mR+1
  3359   00195C  EC90  F00D         	call	_stop	;wreg free
  3360   001960                     
  3361                           ;dc_motor.c: 130:     mL-> direction = 1;
  3362   001960  EE20 F001          	lfsr	2,1
  3363   001964  501C               	movf	forward@mL^0,w,c
  3364   001966  26D9               	addwf	fsr2l,f,c
  3365   001968  501D               	movf	(forward@mL+1)^0,w,c
  3366   00196A  22DA               	addwfc	fsr2h,f,c
  3367   00196C  0E01               	movlw	1
  3368   00196E  6EDF               	movwf	indf2,c
  3369   001970                     
  3370                           ;dc_motor.c: 131:     mR-> direction = 1;
  3371   001970  EE20 F001          	lfsr	2,1
  3372   001974  501E               	movf	forward@mR^0,w,c
  3373   001976  26D9               	addwf	fsr2l,f,c
  3374   001978  501F               	movf	(forward@mR+1)^0,w,c
  3375   00197A  22DA               	addwfc	fsr2h,f,c
  3376   00197C  0E01               	movlw	1
  3377   00197E  6EDF               	movwf	indf2,c
  3378   001980                     
  3379                           ;dc_motor.c: 132:     LATDbits.LATD3 = 1;
  3380   001980  867C               	bsf	124,3,c	;volatile
  3381                           
  3382                           ;dc_motor.c: 133:     setMotorPWM(mR);
  3383   001982  C01E  F010         	movff	forward@mR,setMotorPWM@m
  3384   001986  C01F  F011         	movff	forward@mR+1,setMotorPWM@m+1
  3385   00198A  EC26  F009         	call	_setMotorPWM	;wreg free
  3386                           
  3387                           ;dc_motor.c: 134:     setMotorPWM(mL);
  3388   00198E  C01C  F010         	movff	forward@mL,setMotorPWM@m
  3389   001992  C01D  F011         	movff	forward@mL+1,setMotorPWM@m+1
  3390   001996  EC26  F009         	call	_setMotorPWM	;wreg free
  3391                           
  3392                           ;dc_motor.c: 135:     while ((mL->power <= 50) || (mR->power <= 55)){
  3393   00199A  EF01  F00D         	goto	l287
  3394   00199E                     l2551:
  3395                           
  3396                           ;dc_motor.c: 136:         if (mL->power <= 50){mL->power += 1;}
  3397   00199E  C01C  FFD9         	movff	forward@mL,fsr2l
  3398   0019A2  C01D  FFDA         	movff	forward@mL+1,fsr2h
  3399   0019A6  0E33               	movlw	51
  3400   0019A8  60DF               	cpfslt	indf2,c
  3401   0019AA  EFD9  F00C         	goto	u1551
  3402   0019AE  EFDB  F00C         	goto	u1550
  3403   0019B2                     u1551:
  3404   0019B2  EFE0  F00C         	goto	l2555
  3405   0019B6                     u1550:
  3406   0019B6  C01C  FFD9         	movff	forward@mL,fsr2l
  3407   0019BA  C01D  FFDA         	movff	forward@mL+1,fsr2h
  3408   0019BE  2ADF               	incf	indf2,f,c
  3409   0019C0                     l2555:
  3410                           
  3411                           ;dc_motor.c: 137:         if (mR->power <= 55){mR->power += 1;}
  3412   0019C0  C01E  FFD9         	movff	forward@mR,fsr2l
  3413   0019C4  C01F  FFDA         	movff	forward@mR+1,fsr2h
  3414   0019C8  0E38               	movlw	56
  3415   0019CA  60DF               	cpfslt	indf2,c
  3416   0019CC  EFEA  F00C         	goto	u1561
  3417   0019D0  EFEC  F00C         	goto	u1560
  3418   0019D4                     u1561:
  3419   0019D4  EFF1  F00C         	goto	l2559
  3420   0019D8                     u1560:
  3421   0019D8  C01E  FFD9         	movff	forward@mR,fsr2l
  3422   0019DC  C01F  FFDA         	movff	forward@mR+1,fsr2h
  3423   0019E0  2ADF               	incf	indf2,f,c
  3424   0019E2                     l2559:
  3425                           
  3426                           ;dc_motor.c: 138:         setMotorPWM(mL);
  3427   0019E2  C01C  F010         	movff	forward@mL,setMotorPWM@m
  3428   0019E6  C01D  F011         	movff	forward@mL+1,setMotorPWM@m+1
  3429   0019EA  EC26  F009         	call	_setMotorPWM	;wreg free
  3430   0019EE                     
  3431                           ;dc_motor.c: 139:         setMotorPWM(mR);
  3432   0019EE  C01E  F010         	movff	forward@mR,setMotorPWM@m
  3433   0019F2  C01F  F011         	movff	forward@mR+1,setMotorPWM@m+1
  3434   0019F6  EC26  F009         	call	_setMotorPWM	;wreg free
  3435   0019FA                     
  3436                           ;dc_motor.c: 140:         _delay((unsigned long)((5)*(64000000/4000000.0)));
  3437   0019FA  0E1A               	movlw	26
  3438   0019FC                     u2687:
  3439   0019FC  2EE8               	decfsz	wreg,f,c
  3440   0019FE  D7FE               	bra	u2687
  3441   001A00  D000               	nop2	
  3442   001A02                     l287:
  3443                           
  3444                           ;dc_motor.c: 135:     while ((mL->power <= 50) || (mR->power <= 55)){
  3445   001A02  C01C  FFD9         	movff	forward@mL,fsr2l
  3446   001A06  C01D  FFDA         	movff	forward@mL+1,fsr2h
  3447   001A0A  0E32               	movlw	50
  3448   001A0C  64DF               	cpfsgt	indf2,c
  3449   001A0E  EF0B  F00D         	goto	u1571
  3450   001A12  EF0D  F00D         	goto	u1570
  3451   001A16                     u1571:
  3452   001A16  EFCF  F00C         	goto	l2551
  3453   001A1A                     u1570:
  3454   001A1A  C01E  FFD9         	movff	forward@mR,fsr2l
  3455   001A1E  C01F  FFDA         	movff	forward@mR+1,fsr2h
  3456   001A22  0E37               	movlw	55
  3457   001A24  64DF               	cpfsgt	indf2,c
  3458   001A26  EF17  F00D         	goto	u1581
  3459   001A2A  EF19  F00D         	goto	u1580
  3460   001A2E                     u1581:
  3461   001A2E  EFCF  F00C         	goto	l2551
  3462   001A32                     u1580:
  3463   001A32                     
  3464                           ;dc_motor.c: 142:     LATDbits.LATD3 = 0;
  3465   001A32  967C               	bcf	124,3,c	;volatile
  3466   001A34  0012               	return		;funcret
  3467   001A36                     __end_of_forward:
  3468                           	callstack 0
  3469                           
  3470 ;; *************** function _delay_ms_func *****************
  3471 ;; Defined at:
  3472 ;;		line 275 in file "color.c"
  3473 ;; Parameters:    Size  Location     Type
  3474 ;;  time            2    2[COMRAM] unsigned int 
  3475 ;; Auto vars:     Size  Location     Type
  3476 ;;  i               2    6[COMRAM] unsigned int 
  3477 ;; Return value:  Size  Location     Type
  3478 ;;                  1    wreg      void 
  3479 ;; Registers used:
  3480 ;;		wreg, status,2, status,0
  3481 ;; Tracked objects:
  3482 ;;		On entry : 0/0
  3483 ;;		On exit  : 0/0
  3484 ;;		Unchanged: 0/0
  3485 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3486 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3487 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3488 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3489 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3490 ;;Total ram usage:        6 bytes
  3491 ;; Hardware stack levels used: 1
  3492 ;; Hardware stack levels required when called: 1
  3493 ;; This function calls:
  3494 ;;		Nothing
  3495 ;; This function is called by:
  3496 ;;		_return_home
  3497 ;; This function uses a non-reentrant model
  3498 ;;
  3499                           
  3500                           	psect	text20
  3501   0020B0                     __ptext20:
  3502                           	callstack 0
  3503   0020B0                     _delay_ms_func:
  3504                           	callstack 27
  3505   0020B0                     
  3506                           ;color.c: 276:     unsigned int i;;color.c: 277:     for (i=0; i < time; i++) {_delay((u
      +                          nsigned long)((131)*(64000000/4000.0)));}
  3507   0020B0  0E00               	movlw	0
  3508   0020B2  6E08               	movwf	(delay_ms_func@i+1)^0,c
  3509   0020B4  0E00               	movlw	0
  3510   0020B6  6E07               	movwf	delay_ms_func@i^0,c
  3511   0020B8  EF6C  F010         	goto	l157
  3512   0020BC                     l2625:
  3513   0020BC  0E0B               	movlw	11
  3514   0020BE  6E06               	movwf	(??_delay_ms_func+1)^0,c
  3515   0020C0  0EA3               	movlw	163
  3516   0020C2  6E05               	movwf	??_delay_ms_func^0,c
  3517   0020C4  0E0A               	movlw	10
  3518   0020C6                     u2697:
  3519   0020C6  2EE8               	decfsz	wreg,f,c
  3520   0020C8  D7FE               	bra	u2697
  3521   0020CA  2E05               	decfsz	??_delay_ms_func^0,f,c
  3522   0020CC  D7FC               	bra	u2697
  3523   0020CE  2E06               	decfsz	(??_delay_ms_func+1)^0,f,c
  3524   0020D0  D7FA               	bra	u2697
  3525   0020D2  D000               	nop2	
  3526   0020D4  4A07               	infsnz	delay_ms_func@i^0,f,c
  3527   0020D6  2A08               	incf	(delay_ms_func@i+1)^0,f,c
  3528   0020D8                     l157:
  3529   0020D8  5003               	movf	delay_ms_func@time^0,w,c
  3530   0020DA  5C07               	subwf	delay_ms_func@i^0,w,c
  3531   0020DC  5004               	movf	(delay_ms_func@time+1)^0,w,c
  3532   0020DE  5808               	subwfb	(delay_ms_func@i+1)^0,w,c
  3533   0020E0  A0D8               	btfss	status,0,c
  3534   0020E2  EF75  F010         	goto	u1681
  3535   0020E6  EF77  F010         	goto	u1680
  3536   0020EA                     u1681:
  3537   0020EA  EF5E  F010         	goto	l2625
  3538   0020EE                     u1680:
  3539   0020EE  0012               	return		;funcret
  3540   0020F0                     __end_of_delay_ms_func:
  3541                           	callstack 0
  3542                           
  3543 ;; *************** function _movement *****************
  3544 ;; Defined at:
  3545 ;;		line 302 in file "dc_motor.c"
  3546 ;; Parameters:    Size  Location     Type
  3547 ;;  mL              2   37[COMRAM] PTR struct DC_motor
  3548 ;;		 -> motorL(9), 
  3549 ;;  mR              2   39[COMRAM] PTR struct DC_motor
  3550 ;;		 -> motorR(9), 
  3551 ;;  count           1   41[COMRAM] unsigned char 
  3552 ;; Auto vars:     Size  Location     Type
  3553 ;;		None
  3554 ;; Return value:  Size  Location     Type
  3555 ;;                  1    wreg      void 
  3556 ;; Registers used:
  3557 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3558 ;; Tracked objects:
  3559 ;;		On entry : 0/0
  3560 ;;		On exit  : 0/0
  3561 ;;		Unchanged: 0/0
  3562 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3563 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3564 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3565 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3566 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3567 ;;Total ram usage:        7 bytes
  3568 ;; Hardware stack levels used: 1
  3569 ;; Hardware stack levels required when called: 5
  3570 ;; This function calls:
  3571 ;;		_custom_delay
  3572 ;;		_left_45
  3573 ;;		_reverse
  3574 ;;		_right_45
  3575 ;;		_space
  3576 ;;		_stop
  3577 ;; This function is called by:
  3578 ;;		_buggy_color_response
  3579 ;; This function uses a non-reentrant model
  3580 ;;
  3581                           
  3582                           	psect	text21
  3583   000A9E                     __ptext21:
  3584                           	callstack 0
  3585   000A9E                     _movement:
  3586                           	callstack 24
  3587   000A9E                     
  3588                           ;dc_motor.c: 302: void movement(DC_motor *mL, DC_motor *mR, char count);dc_motor.c: 303:
      +                           {;dc_motor.c: 304:     space(mL,mR);
  3589   000A9E  C026  F01C         	movff	movement@mL,space@mL
  3590   000AA2  C027  F01D         	movff	movement@mL+1,space@mL+1
  3591   000AA6  C028  F01E         	movff	movement@mR,space@mR
  3592   000AAA  C029  F01F         	movff	movement@mR+1,space@mR+1
  3593   000AAE  EC25  F00C         	call	_space	;wreg free
  3594   000AB2                     
  3595                           ;dc_motor.c: 305:     _delay((unsigned long)((500)*(64000000/4000.0)));
  3596   000AB2  0E29               	movlw	41
  3597   000AB4  6E2C               	movwf	(??_movement+1)^0,c
  3598   000AB6  0E96               	movlw	150
  3599   000AB8  6E2B               	movwf	??_movement^0,c
  3600   000ABA  0E7F               	movlw	127
  3601   000ABC                     u2707:
  3602   000ABC  2EE8               	decfsz	wreg,f,c
  3603   000ABE  D7FE               	bra	u2707
  3604   000AC0  2E2B               	decfsz	??_movement^0,f,c
  3605   000AC2  D7FC               	bra	u2707
  3606   000AC4  2E2C               	decfsz	(??_movement+1)^0,f,c
  3607   000AC6  D7FA               	bra	u2707
  3608   000AC8  F000               	nop	
  3609   000ACA                     
  3610                           ;dc_motor.c: 306:     stop(mL,mR);
  3611   000ACA  C026  F016         	movff	movement@mL,stop@mL
  3612   000ACE  C027  F017         	movff	movement@mL+1,stop@mL+1
  3613   000AD2  C028  F018         	movff	movement@mR,stop@mR
  3614   000AD6  C029  F019         	movff	movement@mR+1,stop@mR+1
  3615   000ADA  EC90  F00D         	call	_stop	;wreg free
  3616                           
  3617                           ;dc_motor.c: 307:     _delay((unsigned long)((500)*(64000000/4000.0)));
  3618   000ADE  0E29               	movlw	41
  3619   000AE0  6E2C               	movwf	(??_movement+1)^0,c
  3620   000AE2  0E96               	movlw	150
  3621   000AE4  6E2B               	movwf	??_movement^0,c
  3622   000AE6  0E7F               	movlw	127
  3623   000AE8                     u2717:
  3624   000AE8  2EE8               	decfsz	wreg,f,c
  3625   000AEA  D7FE               	bra	u2717
  3626   000AEC  2E2B               	decfsz	??_movement^0,f,c
  3627   000AEE  D7FC               	bra	u2717
  3628   000AF0  2E2C               	decfsz	(??_movement+1)^0,f,c
  3629   000AF2  D7FA               	bra	u2717
  3630   000AF4  F000               	nop	
  3631   000AF6                     
  3632                           ;dc_motor.c: 309:     if (count == 1){right_45(mL,mR,2,right_timer); stop(mL,mR);}
  3633   000AF6  042A               	decf	movement@count^0,w,c
  3634   000AF8  A4D8               	btfss	status,2,c
  3635   000AFA  EF81  F005         	goto	u2021
  3636   000AFE  EF83  F005         	goto	u2020
  3637   000B02                     u2021:
  3638   000B02  EF9D  F005         	goto	l2835
  3639   000B06                     u2020:
  3640   000B06  C026  F01C         	movff	movement@mL,right_45@mL
  3641   000B0A  C027  F01D         	movff	movement@mL+1,right_45@mL+1
  3642   000B0E  C028  F01E         	movff	movement@mR,right_45@mR
  3643   000B12  C029  F01F         	movff	movement@mR+1,right_45@mR+1
  3644   000B16  0E02               	movlw	2
  3645   000B18  6E20               	movwf	right_45@count^0,c
  3646   000B1A  C059  F021         	movff	_right_timer,right_45@right_timer
  3647   000B1E  C05A  F022         	movff	_right_timer+1,right_45@right_timer+1
  3648   000B22  EC79  F00A         	call	_right_45	;wreg free
  3649   000B26  C026  F016         	movff	movement@mL,stop@mL
  3650   000B2A  C027  F017         	movff	movement@mL+1,stop@mL+1
  3651   000B2E  C028  F018         	movff	movement@mR,stop@mR
  3652   000B32  C029  F019         	movff	movement@mR+1,stop@mR+1
  3653   000B36  EC90  F00D         	call	_stop	;wreg free
  3654   000B3A                     l2835:
  3655                           
  3656                           ;dc_motor.c: 310:     if (count == 2){left_45(mL,mR,2,left_timer); stop(mL,mR);}
  3657   000B3A  0E02               	movlw	2
  3658   000B3C  182A               	xorwf	movement@count^0,w,c
  3659   000B3E  A4D8               	btfss	status,2,c
  3660   000B40  EFA4  F005         	goto	u2031
  3661   000B44  EFA6  F005         	goto	u2030
  3662   000B48                     u2031:
  3663   000B48  EFC0  F005         	goto	l2839
  3664   000B4C                     u2030:
  3665   000B4C  C026  F01C         	movff	movement@mL,left_45@mL
  3666   000B50  C027  F01D         	movff	movement@mL+1,left_45@mL+1
  3667   000B54  C028  F01E         	movff	movement@mR,left_45@mR
  3668   000B58  C029  F01F         	movff	movement@mR+1,left_45@mR+1
  3669   000B5C  0E02               	movlw	2
  3670   000B5E  6E20               	movwf	left_45@count^0,c
  3671   000B60  C05B  F021         	movff	_left_timer,left_45@left_timer
  3672   000B64  C05C  F022         	movff	_left_timer+1,left_45@left_timer+1
  3673   000B68  EC0E  F00B         	call	_left_45	;wreg free
  3674   000B6C  C026  F016         	movff	movement@mL,stop@mL
  3675   000B70  C027  F017         	movff	movement@mL+1,stop@mL+1
  3676   000B74  C028  F018         	movff	movement@mR,stop@mR
  3677   000B78  C029  F019         	movff	movement@mR+1,stop@mR+1
  3678   000B7C  EC90  F00D         	call	_stop	;wreg free
  3679   000B80                     l2839:
  3680                           
  3681                           ;dc_motor.c: 311:     if (count == 3){right_45(mL,mR,4,right_timer); stop(mL,mR);}
  3682   000B80  0E03               	movlw	3
  3683   000B82  182A               	xorwf	movement@count^0,w,c
  3684   000B84  A4D8               	btfss	status,2,c
  3685   000B86  EFC7  F005         	goto	u2041
  3686   000B8A  EFC9  F005         	goto	u2040
  3687   000B8E                     u2041:
  3688   000B8E  EFE3  F005         	goto	l2843
  3689   000B92                     u2040:
  3690   000B92  C026  F01C         	movff	movement@mL,right_45@mL
  3691   000B96  C027  F01D         	movff	movement@mL+1,right_45@mL+1
  3692   000B9A  C028  F01E         	movff	movement@mR,right_45@mR
  3693   000B9E  C029  F01F         	movff	movement@mR+1,right_45@mR+1
  3694   000BA2  0E04               	movlw	4
  3695   000BA4  6E20               	movwf	right_45@count^0,c
  3696   000BA6  C059  F021         	movff	_right_timer,right_45@right_timer
  3697   000BAA  C05A  F022         	movff	_right_timer+1,right_45@right_timer+1
  3698   000BAE  EC79  F00A         	call	_right_45	;wreg free
  3699   000BB2  C026  F016         	movff	movement@mL,stop@mL
  3700   000BB6  C027  F017         	movff	movement@mL+1,stop@mL+1
  3701   000BBA  C028  F018         	movff	movement@mR,stop@mR
  3702   000BBE  C029  F019         	movff	movement@mR+1,stop@mR+1
  3703   000BC2  EC90  F00D         	call	_stop	;wreg free
  3704   000BC6                     l2843:
  3705                           
  3706                           ;dc_motor.c: 312:     if (count == 4){reverse(mL,mR); custom_delay(square_timer);stop(mL
      +                          ,mR);_delay((unsigned long)((500)*(64000000/4000.0)));right_45(mL,mR,2,right_timer); sto
      +                          p(mL,mR);}
  3707   000BC6  0E04               	movlw	4
  3708   000BC8  182A               	xorwf	movement@count^0,w,c
  3709   000BCA  A4D8               	btfss	status,2,c
  3710   000BCC  EFEA  F005         	goto	u2051
  3711   000BD0  EFEC  F005         	goto	u2050
  3712   000BD4                     u2051:
  3713   000BD4  EF2C  F006         	goto	l2857
  3714   000BD8                     u2050:
  3715   000BD8  C026  F01C         	movff	movement@mL,reverse@mL
  3716   000BDC  C027  F01D         	movff	movement@mL+1,reverse@mL+1
  3717   000BE0  C028  F01E         	movff	movement@mR,reverse@mR
  3718   000BE4  C029  F01F         	movff	movement@mR+1,reverse@mR+1
  3719   000BE8  EC1B  F00D         	call	_reverse	;wreg free
  3720   000BEC  0E03               	movlw	3
  3721   000BEE  6E04               	movwf	(custom_delay@temp+1)^0,c
  3722   000BF0  0E84               	movlw	132
  3723   000BF2  6E03               	movwf	custom_delay@temp^0,c
  3724   000BF4  EC78  F010         	call	_custom_delay	;wreg free
  3725   000BF8  C026  F016         	movff	movement@mL,stop@mL
  3726   000BFC  C027  F017         	movff	movement@mL+1,stop@mL+1
  3727   000C00  C028  F018         	movff	movement@mR,stop@mR
  3728   000C04  C029  F019         	movff	movement@mR+1,stop@mR+1
  3729   000C08  EC90  F00D         	call	_stop	;wreg free
  3730   000C0C  0E29               	movlw	41
  3731   000C0E  6E2C               	movwf	(??_movement+1)^0,c
  3732   000C10  0E96               	movlw	150
  3733   000C12  6E2B               	movwf	??_movement^0,c
  3734   000C14  0E7F               	movlw	127
  3735   000C16                     u2727:
  3736   000C16  2EE8               	decfsz	wreg,f,c
  3737   000C18  D7FE               	bra	u2727
  3738   000C1A  2E2B               	decfsz	??_movement^0,f,c
  3739   000C1C  D7FC               	bra	u2727
  3740   000C1E  2E2C               	decfsz	(??_movement+1)^0,f,c
  3741   000C20  D7FA               	bra	u2727
  3742   000C22  F000               	nop	
  3743   000C24  C026  F01C         	movff	movement@mL,right_45@mL
  3744   000C28  C027  F01D         	movff	movement@mL+1,right_45@mL+1
  3745   000C2C  C028  F01E         	movff	movement@mR,right_45@mR
  3746   000C30  C029  F01F         	movff	movement@mR+1,right_45@mR+1
  3747   000C34  0E02               	movlw	2
  3748   000C36  6E20               	movwf	right_45@count^0,c
  3749   000C38  C059  F021         	movff	_right_timer,right_45@right_timer
  3750   000C3C  C05A  F022         	movff	_right_timer+1,right_45@right_timer+1
  3751   000C40  EC79  F00A         	call	_right_45	;wreg free
  3752   000C44  C026  F016         	movff	movement@mL,stop@mL
  3753   000C48  C027  F017         	movff	movement@mL+1,stop@mL+1
  3754   000C4C  C028  F018         	movff	movement@mR,stop@mR
  3755   000C50  C029  F019         	movff	movement@mR+1,stop@mR+1
  3756   000C54  EC90  F00D         	call	_stop	;wreg free
  3757   000C58                     l2857:
  3758                           
  3759                           ;dc_motor.c: 313:     if (count == 5){reverse(mL,mR); custom_delay(square_timer);stop(mL
      +                          ,mR);_delay((unsigned long)((500)*(64000000/4000.0)));left_45(mL,mR,2,left_timer); stop(
      +                          mL,mR);}
  3760   000C58  0E05               	movlw	5
  3761   000C5A  182A               	xorwf	movement@count^0,w,c
  3762   000C5C  A4D8               	btfss	status,2,c
  3763   000C5E  EF33  F006         	goto	u2061
  3764   000C62  EF35  F006         	goto	u2060
  3765   000C66                     u2061:
  3766   000C66  EF75  F006         	goto	l2871
  3767   000C6A                     u2060:
  3768   000C6A  C026  F01C         	movff	movement@mL,reverse@mL
  3769   000C6E  C027  F01D         	movff	movement@mL+1,reverse@mL+1
  3770   000C72  C028  F01E         	movff	movement@mR,reverse@mR
  3771   000C76  C029  F01F         	movff	movement@mR+1,reverse@mR+1
  3772   000C7A  EC1B  F00D         	call	_reverse	;wreg free
  3773   000C7E  0E03               	movlw	3
  3774   000C80  6E04               	movwf	(custom_delay@temp+1)^0,c
  3775   000C82  0E84               	movlw	132
  3776   000C84  6E03               	movwf	custom_delay@temp^0,c
  3777   000C86  EC78  F010         	call	_custom_delay	;wreg free
  3778   000C8A  C026  F016         	movff	movement@mL,stop@mL
  3779   000C8E  C027  F017         	movff	movement@mL+1,stop@mL+1
  3780   000C92  C028  F018         	movff	movement@mR,stop@mR
  3781   000C96  C029  F019         	movff	movement@mR+1,stop@mR+1
  3782   000C9A  EC90  F00D         	call	_stop	;wreg free
  3783   000C9E  0E29               	movlw	41
  3784   000CA0  6E2C               	movwf	(??_movement+1)^0,c
  3785   000CA2  0E96               	movlw	150
  3786   000CA4  6E2B               	movwf	??_movement^0,c
  3787   000CA6  0E7F               	movlw	127
  3788   000CA8                     u2737:
  3789   000CA8  2EE8               	decfsz	wreg,f,c
  3790   000CAA  D7FE               	bra	u2737
  3791   000CAC  2E2B               	decfsz	??_movement^0,f,c
  3792   000CAE  D7FC               	bra	u2737
  3793   000CB0  2E2C               	decfsz	(??_movement+1)^0,f,c
  3794   000CB2  D7FA               	bra	u2737
  3795   000CB4  F000               	nop	
  3796   000CB6  C026  F01C         	movff	movement@mL,left_45@mL
  3797   000CBA  C027  F01D         	movff	movement@mL+1,left_45@mL+1
  3798   000CBE  C028  F01E         	movff	movement@mR,left_45@mR
  3799   000CC2  C029  F01F         	movff	movement@mR+1,left_45@mR+1
  3800   000CC6  0E02               	movlw	2
  3801   000CC8  6E20               	movwf	left_45@count^0,c
  3802   000CCA  C05B  F021         	movff	_left_timer,left_45@left_timer
  3803   000CCE  C05C  F022         	movff	_left_timer+1,left_45@left_timer+1
  3804   000CD2  EC0E  F00B         	call	_left_45	;wreg free
  3805   000CD6  C026  F016         	movff	movement@mL,stop@mL
  3806   000CDA  C027  F017         	movff	movement@mL+1,stop@mL+1
  3807   000CDE  C028  F018         	movff	movement@mR,stop@mR
  3808   000CE2  C029  F019         	movff	movement@mR+1,stop@mR+1
  3809   000CE6  EC90  F00D         	call	_stop	;wreg free
  3810   000CEA                     l2871:
  3811                           
  3812                           ;dc_motor.c: 314:     if (count == 6){right_45(mL,mR,3,right_timer); stop(mL,mR);}
  3813   000CEA  0E06               	movlw	6
  3814   000CEC  182A               	xorwf	movement@count^0,w,c
  3815   000CEE  A4D8               	btfss	status,2,c
  3816   000CF0  EF7C  F006         	goto	u2071
  3817   000CF4  EF7E  F006         	goto	u2070
  3818   000CF8                     u2071:
  3819   000CF8  EF98  F006         	goto	l2875
  3820   000CFC                     u2070:
  3821   000CFC  C026  F01C         	movff	movement@mL,right_45@mL
  3822   000D00  C027  F01D         	movff	movement@mL+1,right_45@mL+1
  3823   000D04  C028  F01E         	movff	movement@mR,right_45@mR
  3824   000D08  C029  F01F         	movff	movement@mR+1,right_45@mR+1
  3825   000D0C  0E03               	movlw	3
  3826   000D0E  6E20               	movwf	right_45@count^0,c
  3827   000D10  C059  F021         	movff	_right_timer,right_45@right_timer
  3828   000D14  C05A  F022         	movff	_right_timer+1,right_45@right_timer+1
  3829   000D18  EC79  F00A         	call	_right_45	;wreg free
  3830   000D1C  C026  F016         	movff	movement@mL,stop@mL
  3831   000D20  C027  F017         	movff	movement@mL+1,stop@mL+1
  3832   000D24  C028  F018         	movff	movement@mR,stop@mR
  3833   000D28  C029  F019         	movff	movement@mR+1,stop@mR+1
  3834   000D2C  EC90  F00D         	call	_stop	;wreg free
  3835   000D30                     l2875:
  3836                           
  3837                           ;dc_motor.c: 315:     if (count == 7){left_45(mL,mR,3,left_timer); stop(mL,mR);}
  3838   000D30  0E07               	movlw	7
  3839   000D32  182A               	xorwf	movement@count^0,w,c
  3840   000D34  A4D8               	btfss	status,2,c
  3841   000D36  EF9F  F006         	goto	u2081
  3842   000D3A  EFA1  F006         	goto	u2080
  3843   000D3E                     u2081:
  3844   000D3E  EFBB  F006         	goto	l351
  3845   000D42                     u2080:
  3846   000D42  C026  F01C         	movff	movement@mL,left_45@mL
  3847   000D46  C027  F01D         	movff	movement@mL+1,left_45@mL+1
  3848   000D4A  C028  F01E         	movff	movement@mR,left_45@mR
  3849   000D4E  C029  F01F         	movff	movement@mR+1,left_45@mR+1
  3850   000D52  0E03               	movlw	3
  3851   000D54  6E20               	movwf	left_45@count^0,c
  3852   000D56  C05B  F021         	movff	_left_timer,left_45@left_timer
  3853   000D5A  C05C  F022         	movff	_left_timer+1,left_45@left_timer+1
  3854   000D5E  EC0E  F00B         	call	_left_45	;wreg free
  3855   000D62  C026  F016         	movff	movement@mL,stop@mL
  3856   000D66  C027  F017         	movff	movement@mL+1,stop@mL+1
  3857   000D6A  C028  F018         	movff	movement@mR,stop@mR
  3858   000D6E  C029  F019         	movff	movement@mR+1,stop@mR+1
  3859   000D72  EC90  F00D         	call	_stop	;wreg free
  3860   000D76                     l351:
  3861   000D76  0012               	return		;funcret
  3862   000D78                     __end_of_movement:
  3863                           	callstack 0
  3864                           
  3865 ;; *************** function _space *****************
  3866 ;; Defined at:
  3867 ;;		line 247 in file "dc_motor.c"
  3868 ;; Parameters:    Size  Location     Type
  3869 ;;  mL              2   27[COMRAM] PTR struct DC_motor
  3870 ;;		 -> motorL(9), 
  3871 ;;  mR              2   29[COMRAM] PTR struct DC_motor
  3872 ;;		 -> motorR(9), 
  3873 ;; Auto vars:     Size  Location     Type
  3874 ;;		None
  3875 ;; Return value:  Size  Location     Type
  3876 ;;                  1    wreg      void 
  3877 ;; Registers used:
  3878 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3879 ;; Tracked objects:
  3880 ;;		On entry : 0/0
  3881 ;;		On exit  : 0/0
  3882 ;;		Unchanged: 0/0
  3883 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3884 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3885 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3886 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3887 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3888 ;;Total ram usage:        6 bytes
  3889 ;; Hardware stack levels used: 1
  3890 ;; Hardware stack levels required when called: 4
  3891 ;; This function calls:
  3892 ;;		_setMotorPWM
  3893 ;;		_stop
  3894 ;; This function is called by:
  3895 ;;		_buggy_color_response
  3896 ;;		_movement
  3897 ;; This function uses a non-reentrant model
  3898 ;;
  3899                           
  3900                           	psect	text22
  3901   00184A                     __ptext22:
  3902                           	callstack 0
  3903   00184A                     _space:
  3904                           	callstack 25
  3905   00184A                     
  3906                           ;dc_motor.c: 247: void space(DC_motor *mL, DC_motor *mR);dc_motor.c: 248: {;dc_motor.c: 
      +                          249:     stop(mL,mR);
  3907   00184A  C01C  F016         	movff	space@mL,stop@mL
  3908   00184E  C01D  F017         	movff	space@mL+1,stop@mL+1
  3909   001852  C01E  F018         	movff	space@mR,stop@mR
  3910   001856  C01F  F019         	movff	space@mR+1,stop@mR+1
  3911   00185A  EC90  F00D         	call	_stop	;wreg free
  3912   00185E                     
  3913                           ;dc_motor.c: 250:     LATHbits.LATH1 = 1;
  3914   00185E  8280               	bsf	128,1,c	;volatile
  3915   001860                     
  3916                           ;dc_motor.c: 251:     mL-> direction = 0;
  3917   001860  EE20 F001          	lfsr	2,1
  3918   001864  501C               	movf	space@mL^0,w,c
  3919   001866  26D9               	addwf	fsr2l,f,c
  3920   001868  501D               	movf	(space@mL+1)^0,w,c
  3921   00186A  22DA               	addwfc	fsr2h,f,c
  3922   00186C  0E00               	movlw	0
  3923   00186E  6EDF               	movwf	indf2,c
  3924   001870                     
  3925                           ;dc_motor.c: 252:     mR-> direction = 0;
  3926   001870  EE20 F001          	lfsr	2,1
  3927   001874  501E               	movf	space@mR^0,w,c
  3928   001876  26D9               	addwf	fsr2l,f,c
  3929   001878  501F               	movf	(space@mR+1)^0,w,c
  3930   00187A  22DA               	addwfc	fsr2h,f,c
  3931   00187C  0E00               	movlw	0
  3932   00187E  6EDF               	movwf	indf2,c
  3933                           
  3934                           ;dc_motor.c: 253:     setMotorPWM(mR);
  3935   001880  C01E  F010         	movff	space@mR,setMotorPWM@m
  3936   001884  C01F  F011         	movff	space@mR+1,setMotorPWM@m+1
  3937   001888  EC26  F009         	call	_setMotorPWM	;wreg free
  3938                           
  3939                           ;dc_motor.c: 254:     setMotorPWM(mL);
  3940   00188C  C01C  F010         	movff	space@mL,setMotorPWM@m
  3941   001890  C01D  F011         	movff	space@mL+1,setMotorPWM@m+1
  3942   001894  EC26  F009         	call	_setMotorPWM	;wreg free
  3943                           
  3944                           ;dc_motor.c: 255:     while ((mL->power <30) && (mR->power <30)){
  3945   001898  EF6A  F00C         	goto	l2583
  3946   00189C                     l2575:
  3947                           
  3948                           ;dc_motor.c: 256:         mL->power += 10;
  3949   00189C  C01C  FFD9         	movff	space@mL,fsr2l
  3950   0018A0  C01D  FFDA         	movff	space@mL+1,fsr2h
  3951   0018A4  0E0A               	movlw	10
  3952   0018A6  26DF               	addwf	indf2,f,c
  3953                           
  3954                           ;dc_motor.c: 257:         mR->power += 10;
  3955   0018A8  C01E  FFD9         	movff	space@mR,fsr2l
  3956   0018AC  C01F  FFDA         	movff	space@mR+1,fsr2h
  3957   0018B0  0E0A               	movlw	10
  3958   0018B2  26DF               	addwf	indf2,f,c
  3959   0018B4                     
  3960                           ;dc_motor.c: 258:         setMotorPWM(mL);
  3961   0018B4  C01C  F010         	movff	space@mL,setMotorPWM@m
  3962   0018B8  C01D  F011         	movff	space@mL+1,setMotorPWM@m+1
  3963   0018BC  EC26  F009         	call	_setMotorPWM	;wreg free
  3964   0018C0                     
  3965                           ;dc_motor.c: 259:         setMotorPWM(mR);
  3966   0018C0  C01E  F010         	movff	space@mR,setMotorPWM@m
  3967   0018C4  C01F  F011         	movff	space@mR+1,setMotorPWM@m+1
  3968   0018C8  EC26  F009         	call	_setMotorPWM	;wreg free
  3969   0018CC                     
  3970                           ;dc_motor.c: 260:         _delay((unsigned long)((20)*(64000000/4000000.0)));
  3971   0018CC  0E6A               	movlw	106
  3972   0018CE                     u2747:
  3973   0018CE  2EE8               	decfsz	wreg,f,c
  3974   0018D0  D7FE               	bra	u2747
  3975   0018D2  D000               	nop2	
  3976   0018D4                     l2583:
  3977                           
  3978                           ;dc_motor.c: 255:     while ((mL->power <30) && (mR->power <30)){
  3979   0018D4  C01C  FFD9         	movff	space@mL,fsr2l
  3980   0018D8  C01D  FFDA         	movff	space@mL+1,fsr2h
  3981   0018DC  0E1E               	movlw	30
  3982   0018DE  60DF               	cpfslt	indf2,c
  3983   0018E0  EF74  F00C         	goto	u1591
  3984   0018E4  EF76  F00C         	goto	u1590
  3985   0018E8                     u1591:
  3986   0018E8  EF82  F00C         	goto	l2587
  3987   0018EC                     u1590:
  3988   0018EC  C01E  FFD9         	movff	space@mR,fsr2l
  3989   0018F0  C01F  FFDA         	movff	space@mR+1,fsr2h
  3990   0018F4  0E1D               	movlw	29
  3991   0018F6  64DF               	cpfsgt	indf2,c
  3992   0018F8  EF80  F00C         	goto	u1601
  3993   0018FC  EF82  F00C         	goto	u1600
  3994   001900                     u1601:
  3995   001900  EF4E  F00C         	goto	l2575
  3996   001904                     u1600:
  3997   001904                     l2587:
  3998                           
  3999                           ;dc_motor.c: 262:     _delay((unsigned long)((350)*(64000000/4000.0)));
  4000   001904  0E1D               	movlw	29
  4001   001906  6E21               	movwf	(??_space+1)^0,c
  4002   001908  0E69               	movlw	105
  4003   00190A  6E20               	movwf	??_space^0,c
  4004   00190C  0EA5               	movlw	165
  4005   00190E                     u2757:
  4006   00190E  2EE8               	decfsz	wreg,f,c
  4007   001910  D7FE               	bra	u2757
  4008   001912  2E20               	decfsz	??_space^0,f,c
  4009   001914  D7FC               	bra	u2757
  4010   001916  2E21               	decfsz	(??_space+1)^0,f,c
  4011   001918  D7FA               	bra	u2757
  4012   00191A  F000               	nop	
  4013   00191C                     
  4014                           ;dc_motor.c: 263:     stop(mL,mR);
  4015   00191C  C01C  F016         	movff	space@mL,stop@mL
  4016   001920  C01D  F017         	movff	space@mL+1,stop@mL+1
  4017   001924  C01E  F018         	movff	space@mR,stop@mR
  4018   001928  C01F  F019         	movff	space@mR+1,stop@mR+1
  4019   00192C  EC90  F00D         	call	_stop	;wreg free
  4020   001930                     
  4021                           ;dc_motor.c: 264:     _delay((unsigned long)((200)*(64000000/4000.0)));
  4022   001930  0E11               	movlw	17
  4023   001932  6E21               	movwf	(??_space+1)^0,c
  4024   001934  0E3C               	movlw	60
  4025   001936  6E20               	movwf	??_space^0,c
  4026   001938  0ECB               	movlw	203
  4027   00193A                     u2767:
  4028   00193A  2EE8               	decfsz	wreg,f,c
  4029   00193C  D7FE               	bra	u2767
  4030   00193E  2E20               	decfsz	??_space^0,f,c
  4031   001940  D7FC               	bra	u2767
  4032   001942  2E21               	decfsz	(??_space+1)^0,f,c
  4033   001944  D7FA               	bra	u2767
  4034   001946  F000               	nop	
  4035   001948                     
  4036                           ;dc_motor.c: 265:     LATHbits.LATH1 = 0;
  4037   001948  9280               	bcf	128,1,c	;volatile
  4038   00194A  0012               	return		;funcret
  4039   00194C                     __end_of_space:
  4040                           	callstack 0
  4041                           
  4042 ;; *************** function _right_45 *****************
  4043 ;; Defined at:
  4044 ;;		line 222 in file "dc_motor.c"
  4045 ;; Parameters:    Size  Location     Type
  4046 ;;  mL              2   27[COMRAM] PTR struct DC_motor
  4047 ;;		 -> motorL(9), 
  4048 ;;  mR              2   29[COMRAM] PTR struct DC_motor
  4049 ;;		 -> motorR(9), 
  4050 ;;  count           1   31[COMRAM] unsigned char 
  4051 ;;  right_timer     2   32[COMRAM] int 
  4052 ;; Auto vars:     Size  Location     Type
  4053 ;;  i               1   36[COMRAM] unsigned char 
  4054 ;; Return value:  Size  Location     Type
  4055 ;;                  1    wreg      void 
  4056 ;; Registers used:
  4057 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4058 ;; Tracked objects:
  4059 ;;		On entry : 0/0
  4060 ;;		On exit  : 0/0
  4061 ;;		Unchanged: 0/0
  4062 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4063 ;;      Params:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4064 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4065 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4066 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4067 ;;Total ram usage:       10 bytes
  4068 ;; Hardware stack levels used: 1
  4069 ;; Hardware stack levels required when called: 4
  4070 ;; This function calls:
  4071 ;;		_custom_delay
  4072 ;;		_setMotorPWM
  4073 ;;		_stop
  4074 ;; This function is called by:
  4075 ;;		_reverse_pink
  4076 ;;		_movement
  4077 ;;		_movement_return
  4078 ;;		_right_turn_calibration
  4079 ;; This function uses a non-reentrant model
  4080 ;;
  4081                           
  4082                           	psect	text23
  4083   0014F2                     __ptext23:
  4084                           	callstack 0
  4085   0014F2                     _right_45:
  4086                           	callstack 23
  4087   0014F2                     
  4088                           ;dc_motor.c: 222: void right_45(DC_motor *mL, DC_motor *mR, char count, int right_timer)
      +                          ;dc_motor.c: 223: {;dc_motor.c: 224:     stop(mL,mR);
  4089   0014F2  C01C  F016         	movff	right_45@mL,stop@mL
  4090   0014F6  C01D  F017         	movff	right_45@mL+1,stop@mL+1
  4091   0014FA  C01E  F018         	movff	right_45@mR,stop@mR
  4092   0014FE  C01F  F019         	movff	right_45@mR+1,stop@mR+1
  4093   001502  EC90  F00D         	call	_stop	;wreg free
  4094   001506                     
  4095                           ;dc_motor.c: 225:     mL-> direction = 1;
  4096   001506  EE20 F001          	lfsr	2,1
  4097   00150A  501C               	movf	right_45@mL^0,w,c
  4098   00150C  26D9               	addwf	fsr2l,f,c
  4099   00150E  501D               	movf	(right_45@mL+1)^0,w,c
  4100   001510  22DA               	addwfc	fsr2h,f,c
  4101   001512  0E01               	movlw	1
  4102   001514  6EDF               	movwf	indf2,c
  4103   001516                     
  4104                           ;dc_motor.c: 226:     mR-> direction = 0;
  4105   001516  EE20 F001          	lfsr	2,1
  4106   00151A  501E               	movf	right_45@mR^0,w,c
  4107   00151C  26D9               	addwf	fsr2l,f,c
  4108   00151E  501F               	movf	(right_45@mR+1)^0,w,c
  4109   001520  22DA               	addwfc	fsr2h,f,c
  4110   001522  0E00               	movlw	0
  4111   001524  6EDF               	movwf	indf2,c
  4112   001526                     
  4113                           ;dc_motor.c: 227:     LATHbits.LATH0 = 1;
  4114   001526  8080               	bsf	128,0,c	;volatile
  4115   001528                     
  4116                           ;dc_motor.c: 228:     char i;;dc_motor.c: 229:     for (i = 0;i<count;i++){
  4117   001528  0E00               	movlw	0
  4118   00152A  6E25               	movwf	right_45@i^0,c
  4119   00152C  EF04  F00B         	goto	l2453
  4120   001530                     l2425:
  4121                           
  4122                           ;dc_motor.c: 231:         if (mL->power <= 50){mL->power += 10;}
  4123   001530  C01C  FFD9         	movff	right_45@mL,fsr2l
  4124   001534  C01D  FFDA         	movff	right_45@mL+1,fsr2h
  4125   001538  0E33               	movlw	51
  4126   00153A  60DF               	cpfslt	indf2,c
  4127   00153C  EFA2  F00A         	goto	u1481
  4128   001540  EFA4  F00A         	goto	u1480
  4129   001544                     u1481:
  4130   001544  EFAA  F00A         	goto	l2429
  4131   001548                     u1480:
  4132   001548  C01C  FFD9         	movff	right_45@mL,fsr2l
  4133   00154C  C01D  FFDA         	movff	right_45@mL+1,fsr2h
  4134   001550  0E0A               	movlw	10
  4135   001552  26DF               	addwf	indf2,f,c
  4136   001554                     l2429:
  4137                           
  4138                           ;dc_motor.c: 232:         if (mR->power <= 50){mR->power += 10;}
  4139   001554  C01E  FFD9         	movff	right_45@mR,fsr2l
  4140   001558  C01F  FFDA         	movff	right_45@mR+1,fsr2h
  4141   00155C  0E33               	movlw	51
  4142   00155E  60DF               	cpfslt	indf2,c
  4143   001560  EFB4  F00A         	goto	u1491
  4144   001564  EFB6  F00A         	goto	u1490
  4145   001568                     u1491:
  4146   001568  EFBC  F00A         	goto	l2433
  4147   00156C                     u1490:
  4148   00156C  C01E  FFD9         	movff	right_45@mR,fsr2l
  4149   001570  C01F  FFDA         	movff	right_45@mR+1,fsr2h
  4150   001574  0E0A               	movlw	10
  4151   001576  26DF               	addwf	indf2,f,c
  4152   001578                     l2433:
  4153                           
  4154                           ;dc_motor.c: 233:         setMotorPWM(mL);
  4155   001578  C01C  F010         	movff	right_45@mL,setMotorPWM@m
  4156   00157C  C01D  F011         	movff	right_45@mL+1,setMotorPWM@m+1
  4157   001580  EC26  F009         	call	_setMotorPWM	;wreg free
  4158   001584                     
  4159                           ;dc_motor.c: 234:         setMotorPWM(mR);
  4160   001584  C01E  F010         	movff	right_45@mR,setMotorPWM@m
  4161   001588  C01F  F011         	movff	right_45@mR+1,setMotorPWM@m+1
  4162   00158C  EC26  F009         	call	_setMotorPWM	;wreg free
  4163   001590                     
  4164                           ;dc_motor.c: 235:         _delay((unsigned long)((10)*(64000000/4000.0)));
  4165   001590  0ED0               	movlw	208
  4166   001592  6E23               	movwf	??_right_45^0,c
  4167   001594  0ECA               	movlw	202
  4168   001596                     u2777:
  4169   001596  2EE8               	decfsz	wreg,f,c
  4170   001598  D7FE               	bra	u2777
  4171   00159A  2E23               	decfsz	??_right_45^0,f,c
  4172   00159C  D7FC               	bra	u2777
  4173   00159E                     l2439:
  4174                           
  4175                           ;dc_motor.c: 230:     while ((mL->power <= 50) || (mR->power <= 50)){
  4176   00159E  C01C  FFD9         	movff	right_45@mL,fsr2l
  4177   0015A2  C01D  FFDA         	movff	right_45@mL+1,fsr2h
  4178   0015A6  0E32               	movlw	50
  4179   0015A8  64DF               	cpfsgt	indf2,c
  4180   0015AA  EFD9  F00A         	goto	u1501
  4181   0015AE  EFDB  F00A         	goto	u1500
  4182   0015B2                     u1501:
  4183   0015B2  EF98  F00A         	goto	l2425
  4184   0015B6                     u1500:
  4185   0015B6  C01E  FFD9         	movff	right_45@mR,fsr2l
  4186   0015BA  C01F  FFDA         	movff	right_45@mR+1,fsr2h
  4187   0015BE  0E32               	movlw	50
  4188   0015C0  64DF               	cpfsgt	indf2,c
  4189   0015C2  EFE5  F00A         	goto	u1511
  4190   0015C6  EFE7  F00A         	goto	u1510
  4191   0015CA                     u1511:
  4192   0015CA  EF98  F00A         	goto	l2425
  4193   0015CE                     u1510:
  4194   0015CE                     
  4195                           ;dc_motor.c: 237:     custom_delay(right_timer);
  4196   0015CE  C021  F003         	movff	right_45@right_timer,custom_delay@temp
  4197   0015D2  C022  F004         	movff	right_45@right_timer+1,custom_delay@temp+1
  4198   0015D6  EC78  F010         	call	_custom_delay	;wreg free
  4199   0015DA                     
  4200                           ;dc_motor.c: 238:     stop(mL,mR);
  4201   0015DA  C01C  F016         	movff	right_45@mL,stop@mL
  4202   0015DE  C01D  F017         	movff	right_45@mL+1,stop@mL+1
  4203   0015E2  C01E  F018         	movff	right_45@mR,stop@mR
  4204   0015E6  C01F  F019         	movff	right_45@mR+1,stop@mR+1
  4205   0015EA  EC90  F00D         	call	_stop	;wreg free
  4206   0015EE                     
  4207                           ;dc_motor.c: 239:     _delay((unsigned long)((150)*(64000000/4000.0)));
  4208   0015EE  0E0D               	movlw	13
  4209   0015F0  6E24               	movwf	(??_right_45+1)^0,c
  4210   0015F2  0E2D               	movlw	45
  4211   0015F4  6E23               	movwf	??_right_45^0,c
  4212   0015F6  0ED8               	movlw	216
  4213   0015F8                     u2787:
  4214   0015F8  2EE8               	decfsz	wreg,f,c
  4215   0015FA  D7FE               	bra	u2787
  4216   0015FC  2E23               	decfsz	??_right_45^0,f,c
  4217   0015FE  D7FC               	bra	u2787
  4218   001600  2E24               	decfsz	(??_right_45+1)^0,f,c
  4219   001602  D7FA               	bra	u2787
  4220   001604                     
  4221                           ;dc_motor.c: 240:     LATHbits.LATH0 = 0;
  4222   001604  9080               	bcf	128,0,c	;volatile
  4223   001606                     
  4224                           ;dc_motor.c: 241:     }
  4225   001606  2A25               	incf	right_45@i^0,f,c
  4226   001608                     l2453:
  4227   001608  5020               	movf	right_45@count^0,w,c
  4228   00160A  5C25               	subwf	right_45@i^0,w,c
  4229   00160C  A0D8               	btfss	status,0,c
  4230   00160E  EF0B  F00B         	goto	u1521
  4231   001612  EF0D  F00B         	goto	u1520
  4232   001616                     u1521:
  4233   001616  EFCF  F00A         	goto	l2439
  4234   00161A                     u1520:
  4235   00161A  0012               	return		;funcret
  4236   00161C                     __end_of_right_45:
  4237                           	callstack 0
  4238                           
  4239 ;; *************** function _reverse *****************
  4240 ;; Defined at:
  4241 ;;		line 148 in file "dc_motor.c"
  4242 ;; Parameters:    Size  Location     Type
  4243 ;;  mL              2   27[COMRAM] PTR struct DC_motor
  4244 ;;		 -> motorL(9), 
  4245 ;;  mR              2   29[COMRAM] PTR struct DC_motor
  4246 ;;		 -> motorR(9), 
  4247 ;; Auto vars:     Size  Location     Type
  4248 ;;		None
  4249 ;; Return value:  Size  Location     Type
  4250 ;;                  1    wreg      void 
  4251 ;; Registers used:
  4252 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4253 ;; Tracked objects:
  4254 ;;		On entry : 0/0
  4255 ;;		On exit  : 0/0
  4256 ;;		Unchanged: 0/0
  4257 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4258 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4259 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4260 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4261 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4262 ;;Total ram usage:        5 bytes
  4263 ;; Hardware stack levels used: 1
  4264 ;; Hardware stack levels required when called: 4
  4265 ;; This function calls:
  4266 ;;		_setMotorPWM
  4267 ;;		_stop
  4268 ;; This function is called by:
  4269 ;;		_return_home
  4270 ;;		_reverse_yellow
  4271 ;;		_reverse_pink
  4272 ;;		_movement
  4273 ;; This function uses a non-reentrant model
  4274 ;;
  4275                           
  4276                           	psect	text24
  4277   001A36                     __ptext24:
  4278                           	callstack 0
  4279   001A36                     _reverse:
  4280                           	callstack 24
  4281   001A36                     
  4282                           ;dc_motor.c: 148: void reverse(DC_motor *mL, DC_motor *mR);dc_motor.c: 149: {;dc_motor.c
      +                          : 150:     stop(mL,mR);
  4283   001A36  C01C  F016         	movff	reverse@mL,stop@mL
  4284   001A3A  C01D  F017         	movff	reverse@mL+1,stop@mL+1
  4285   001A3E  C01E  F018         	movff	reverse@mR,stop@mR
  4286   001A42  C01F  F019         	movff	reverse@mR+1,stop@mR+1
  4287   001A46  EC90  F00D         	call	_stop	;wreg free
  4288   001A4A                     
  4289                           ;dc_motor.c: 151:     mL-> direction = 0;
  4290   001A4A  EE20 F001          	lfsr	2,1
  4291   001A4E  501C               	movf	reverse@mL^0,w,c
  4292   001A50  26D9               	addwf	fsr2l,f,c
  4293   001A52  501D               	movf	(reverse@mL+1)^0,w,c
  4294   001A54  22DA               	addwfc	fsr2h,f,c
  4295   001A56  0E00               	movlw	0
  4296   001A58  6EDF               	movwf	indf2,c
  4297   001A5A                     
  4298                           ;dc_motor.c: 152:     mR-> direction = 0;
  4299   001A5A  EE20 F001          	lfsr	2,1
  4300   001A5E  501E               	movf	reverse@mR^0,w,c
  4301   001A60  26D9               	addwf	fsr2l,f,c
  4302   001A62  501F               	movf	(reverse@mR+1)^0,w,c
  4303   001A64  22DA               	addwfc	fsr2h,f,c
  4304   001A66  0E00               	movlw	0
  4305   001A68  6EDF               	movwf	indf2,c
  4306   001A6A                     
  4307                           ;dc_motor.c: 153:     LATHbits.LATH1 = 1;
  4308   001A6A  8280               	bsf	128,1,c	;volatile
  4309                           
  4310                           ;dc_motor.c: 154:     setMotorPWM(mR);
  4311   001A6C  C01E  F010         	movff	reverse@mR,setMotorPWM@m
  4312   001A70  C01F  F011         	movff	reverse@mR+1,setMotorPWM@m+1
  4313   001A74  EC26  F009         	call	_setMotorPWM	;wreg free
  4314                           
  4315                           ;dc_motor.c: 155:     setMotorPWM(mL);
  4316   001A78  C01C  F010         	movff	reverse@mL,setMotorPWM@m
  4317   001A7C  C01D  F011         	movff	reverse@mL+1,setMotorPWM@m+1
  4318   001A80  EC26  F009         	call	_setMotorPWM	;wreg free
  4319                           
  4320                           ;dc_motor.c: 156:     while ((mL->power <= 50) || (mR->power <= 55)){
  4321   001A84  EF76  F00D         	goto	l295
  4322   001A88                     l2359:
  4323                           
  4324                           ;dc_motor.c: 157:         if (mL->power <= 50){mL->power += 1;}
  4325   001A88  C01C  FFD9         	movff	reverse@mL,fsr2l
  4326   001A8C  C01D  FFDA         	movff	reverse@mL+1,fsr2h
  4327   001A90  0E33               	movlw	51
  4328   001A92  60DF               	cpfslt	indf2,c
  4329   001A94  EF4E  F00D         	goto	u1391
  4330   001A98  EF50  F00D         	goto	u1390
  4331   001A9C                     u1391:
  4332   001A9C  EF55  F00D         	goto	l2363
  4333   001AA0                     u1390:
  4334   001AA0  C01C  FFD9         	movff	reverse@mL,fsr2l
  4335   001AA4  C01D  FFDA         	movff	reverse@mL+1,fsr2h
  4336   001AA8  2ADF               	incf	indf2,f,c
  4337   001AAA                     l2363:
  4338                           
  4339                           ;dc_motor.c: 158:         if (mR->power <= 55){mR->power += 1;}
  4340   001AAA  C01E  FFD9         	movff	reverse@mR,fsr2l
  4341   001AAE  C01F  FFDA         	movff	reverse@mR+1,fsr2h
  4342   001AB2  0E38               	movlw	56
  4343   001AB4  60DF               	cpfslt	indf2,c
  4344   001AB6  EF5F  F00D         	goto	u1401
  4345   001ABA  EF61  F00D         	goto	u1400
  4346   001ABE                     u1401:
  4347   001ABE  EF66  F00D         	goto	l2367
  4348   001AC2                     u1400:
  4349   001AC2  C01E  FFD9         	movff	reverse@mR,fsr2l
  4350   001AC6  C01F  FFDA         	movff	reverse@mR+1,fsr2h
  4351   001ACA  2ADF               	incf	indf2,f,c
  4352   001ACC                     l2367:
  4353                           
  4354                           ;dc_motor.c: 159:         setMotorPWM(mL);
  4355   001ACC  C01C  F010         	movff	reverse@mL,setMotorPWM@m
  4356   001AD0  C01D  F011         	movff	reverse@mL+1,setMotorPWM@m+1
  4357   001AD4  EC26  F009         	call	_setMotorPWM	;wreg free
  4358   001AD8                     
  4359                           ;dc_motor.c: 160:         setMotorPWM(mR);
  4360   001AD8  C01E  F010         	movff	reverse@mR,setMotorPWM@m
  4361   001ADC  C01F  F011         	movff	reverse@mR+1,setMotorPWM@m+1
  4362   001AE0  EC26  F009         	call	_setMotorPWM	;wreg free
  4363   001AE4                     
  4364                           ;dc_motor.c: 161:         _delay((unsigned long)((5)*(64000000/4000000.0)));
  4365   001AE4  0E1A               	movlw	26
  4366   001AE6                     u2797:
  4367   001AE6  2EE8               	decfsz	wreg,f,c
  4368   001AE8  D7FE               	bra	u2797
  4369   001AEA  D000               	nop2	
  4370   001AEC                     l295:
  4371                           
  4372                           ;dc_motor.c: 156:     while ((mL->power <= 50) || (mR->power <= 55)){
  4373   001AEC  C01C  FFD9         	movff	reverse@mL,fsr2l
  4374   001AF0  C01D  FFDA         	movff	reverse@mL+1,fsr2h
  4375   001AF4  0E32               	movlw	50
  4376   001AF6  64DF               	cpfsgt	indf2,c
  4377   001AF8  EF80  F00D         	goto	u1411
  4378   001AFC  EF82  F00D         	goto	u1410
  4379   001B00                     u1411:
  4380   001B00  EF44  F00D         	goto	l2359
  4381   001B04                     u1410:
  4382   001B04  C01E  FFD9         	movff	reverse@mR,fsr2l
  4383   001B08  C01F  FFDA         	movff	reverse@mR+1,fsr2h
  4384   001B0C  0E37               	movlw	55
  4385   001B0E  64DF               	cpfsgt	indf2,c
  4386   001B10  EF8C  F00D         	goto	u1421
  4387   001B14  EF8E  F00D         	goto	u1420
  4388   001B18                     u1421:
  4389   001B18  EF44  F00D         	goto	l2359
  4390   001B1C                     u1420:
  4391   001B1C                     
  4392                           ;dc_motor.c: 163:     LATHbits.LATH1 = 0;
  4393   001B1C  9280               	bcf	128,1,c	;volatile
  4394   001B1E  0012               	return		;funcret
  4395   001B20                     __end_of_reverse:
  4396                           	callstack 0
  4397                           
  4398 ;; *************** function _left_45 *****************
  4399 ;; Defined at:
  4400 ;;		line 195 in file "dc_motor.c"
  4401 ;; Parameters:    Size  Location     Type
  4402 ;;  mL              2   27[COMRAM] PTR struct DC_motor
  4403 ;;		 -> motorL(9), 
  4404 ;;  mR              2   29[COMRAM] PTR struct DC_motor
  4405 ;;		 -> motorR(9), 
  4406 ;;  count           1   31[COMRAM] unsigned char 
  4407 ;;  left_timer      2   32[COMRAM] int 
  4408 ;; Auto vars:     Size  Location     Type
  4409 ;;  i               1   36[COMRAM] unsigned char 
  4410 ;; Return value:  Size  Location     Type
  4411 ;;                  1    wreg      void 
  4412 ;; Registers used:
  4413 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4414 ;; Tracked objects:
  4415 ;;		On entry : 0/0
  4416 ;;		On exit  : 0/0
  4417 ;;		Unchanged: 0/0
  4418 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4419 ;;      Params:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4420 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4421 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4422 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4423 ;;Total ram usage:       10 bytes
  4424 ;; Hardware stack levels used: 1
  4425 ;; Hardware stack levels required when called: 4
  4426 ;; This function calls:
  4427 ;;		_custom_delay
  4428 ;;		_setMotorPWM
  4429 ;;		_stop
  4430 ;; This function is called by:
  4431 ;;		_reverse_yellow
  4432 ;;		_movement
  4433 ;;		_movement_return
  4434 ;;		_left_turn_calibration
  4435 ;; This function uses a non-reentrant model
  4436 ;;
  4437                           
  4438                           	psect	text25
  4439   00161C                     __ptext25:
  4440                           	callstack 0
  4441   00161C                     _left_45:
  4442                           	callstack 22
  4443   00161C                     
  4444                           ;dc_motor.c: 195: void left_45(DC_motor *mL, DC_motor *mR, char count, int left_timer);d
      +                          c_motor.c: 196: {;dc_motor.c: 197:     stop(mL,mR);
  4445   00161C  C01C  F016         	movff	left_45@mL,stop@mL
  4446   001620  C01D  F017         	movff	left_45@mL+1,stop@mL+1
  4447   001624  C01E  F018         	movff	left_45@mR,stop@mR
  4448   001628  C01F  F019         	movff	left_45@mR+1,stop@mR+1
  4449   00162C  EC90  F00D         	call	_stop	;wreg free
  4450   001630                     
  4451                           ;dc_motor.c: 198:     mL-> direction = 0;
  4452   001630  EE20 F001          	lfsr	2,1
  4453   001634  501C               	movf	left_45@mL^0,w,c
  4454   001636  26D9               	addwf	fsr2l,f,c
  4455   001638  501D               	movf	(left_45@mL+1)^0,w,c
  4456   00163A  22DA               	addwfc	fsr2h,f,c
  4457   00163C  0E00               	movlw	0
  4458   00163E  6EDF               	movwf	indf2,c
  4459   001640                     
  4460                           ;dc_motor.c: 199:     mR-> direction = 1;
  4461   001640  EE20 F001          	lfsr	2,1
  4462   001644  501E               	movf	left_45@mR^0,w,c
  4463   001646  26D9               	addwf	fsr2l,f,c
  4464   001648  501F               	movf	(left_45@mR+1)^0,w,c
  4465   00164A  22DA               	addwfc	fsr2h,f,c
  4466   00164C  0E01               	movlw	1
  4467   00164E  6EDF               	movwf	indf2,c
  4468   001650                     
  4469                           ;dc_motor.c: 200:     LATFbits.LATF0 = 1;
  4470   001650  807E               	bsf	126,0,c	;volatile
  4471   001652                     
  4472                           ;dc_motor.c: 201:     char i;;dc_motor.c: 202:     for (i = 0;i<count;i++){
  4473   001652  0E00               	movlw	0
  4474   001654  6E25               	movwf	left_45@i^0,c
  4475   001656  EF99  F00B         	goto	l2413
  4476   00165A                     l2385:
  4477                           
  4478                           ;dc_motor.c: 204:         if (mL->power <= 50){mL->power += 10;}
  4479   00165A  C01C  FFD9         	movff	left_45@mL,fsr2l
  4480   00165E  C01D  FFDA         	movff	left_45@mL+1,fsr2h
  4481   001662  0E33               	movlw	51
  4482   001664  60DF               	cpfslt	indf2,c
  4483   001666  EF37  F00B         	goto	u1431
  4484   00166A  EF39  F00B         	goto	u1430
  4485   00166E                     u1431:
  4486   00166E  EF3F  F00B         	goto	l2389
  4487   001672                     u1430:
  4488   001672  C01C  FFD9         	movff	left_45@mL,fsr2l
  4489   001676  C01D  FFDA         	movff	left_45@mL+1,fsr2h
  4490   00167A  0E0A               	movlw	10
  4491   00167C  26DF               	addwf	indf2,f,c
  4492   00167E                     l2389:
  4493                           
  4494                           ;dc_motor.c: 205:         if (mR->power <= 50){mR->power += 10;}
  4495   00167E  C01E  FFD9         	movff	left_45@mR,fsr2l
  4496   001682  C01F  FFDA         	movff	left_45@mR+1,fsr2h
  4497   001686  0E33               	movlw	51
  4498   001688  60DF               	cpfslt	indf2,c
  4499   00168A  EF49  F00B         	goto	u1441
  4500   00168E  EF4B  F00B         	goto	u1440
  4501   001692                     u1441:
  4502   001692  EF51  F00B         	goto	l2393
  4503   001696                     u1440:
  4504   001696  C01E  FFD9         	movff	left_45@mR,fsr2l
  4505   00169A  C01F  FFDA         	movff	left_45@mR+1,fsr2h
  4506   00169E  0E0A               	movlw	10
  4507   0016A0  26DF               	addwf	indf2,f,c
  4508   0016A2                     l2393:
  4509                           
  4510                           ;dc_motor.c: 206:         setMotorPWM(mL);
  4511   0016A2  C01C  F010         	movff	left_45@mL,setMotorPWM@m
  4512   0016A6  C01D  F011         	movff	left_45@mL+1,setMotorPWM@m+1
  4513   0016AA  EC26  F009         	call	_setMotorPWM	;wreg free
  4514   0016AE                     
  4515                           ;dc_motor.c: 207:         setMotorPWM(mR);
  4516   0016AE  C01E  F010         	movff	left_45@mR,setMotorPWM@m
  4517   0016B2  C01F  F011         	movff	left_45@mR+1,setMotorPWM@m+1
  4518   0016B6  EC26  F009         	call	_setMotorPWM	;wreg free
  4519   0016BA                     
  4520                           ;dc_motor.c: 208:         _delay((unsigned long)((10)*(64000000/4000.0)));
  4521   0016BA  0ED0               	movlw	208
  4522   0016BC  6E23               	movwf	??_left_45^0,c
  4523   0016BE  0ECA               	movlw	202
  4524   0016C0                     u2807:
  4525   0016C0  2EE8               	decfsz	wreg,f,c
  4526   0016C2  D7FE               	bra	u2807
  4527   0016C4  2E23               	decfsz	??_left_45^0,f,c
  4528   0016C6  D7FC               	bra	u2807
  4529   0016C8                     l2399:
  4530                           
  4531                           ;dc_motor.c: 203:     while ((mL->power <= 50) || (mR->power <= 50)){
  4532   0016C8  C01C  FFD9         	movff	left_45@mL,fsr2l
  4533   0016CC  C01D  FFDA         	movff	left_45@mL+1,fsr2h
  4534   0016D0  0E32               	movlw	50
  4535   0016D2  64DF               	cpfsgt	indf2,c
  4536   0016D4  EF6E  F00B         	goto	u1451
  4537   0016D8  EF70  F00B         	goto	u1450
  4538   0016DC                     u1451:
  4539   0016DC  EF2D  F00B         	goto	l2385
  4540   0016E0                     u1450:
  4541   0016E0  C01E  FFD9         	movff	left_45@mR,fsr2l
  4542   0016E4  C01F  FFDA         	movff	left_45@mR+1,fsr2h
  4543   0016E8  0E32               	movlw	50
  4544   0016EA  64DF               	cpfsgt	indf2,c
  4545   0016EC  EF7A  F00B         	goto	u1461
  4546   0016F0  EF7C  F00B         	goto	u1460
  4547   0016F4                     u1461:
  4548   0016F4  EF2D  F00B         	goto	l2385
  4549   0016F8                     u1460:
  4550   0016F8                     
  4551                           ;dc_motor.c: 210:     custom_delay(left_timer);
  4552   0016F8  C021  F003         	movff	left_45@left_timer,custom_delay@temp
  4553   0016FC  C022  F004         	movff	left_45@left_timer+1,custom_delay@temp+1
  4554   001700  EC78  F010         	call	_custom_delay	;wreg free
  4555   001704                     
  4556                           ;dc_motor.c: 211:     stop(mL,mR);
  4557   001704  C01C  F016         	movff	left_45@mL,stop@mL
  4558   001708  C01D  F017         	movff	left_45@mL+1,stop@mL+1
  4559   00170C  C01E  F018         	movff	left_45@mR,stop@mR
  4560   001710  C01F  F019         	movff	left_45@mR+1,stop@mR+1
  4561   001714  EC90  F00D         	call	_stop	;wreg free
  4562   001718                     
  4563                           ;dc_motor.c: 212:     _delay((unsigned long)((150)*(64000000/4000.0)));
  4564   001718  0E0D               	movlw	13
  4565   00171A  6E24               	movwf	(??_left_45+1)^0,c
  4566   00171C  0E2D               	movlw	45
  4567   00171E  6E23               	movwf	??_left_45^0,c
  4568   001720  0ED8               	movlw	216
  4569   001722                     u2817:
  4570   001722  2EE8               	decfsz	wreg,f,c
  4571   001724  D7FE               	bra	u2817
  4572   001726  2E23               	decfsz	??_left_45^0,f,c
  4573   001728  D7FC               	bra	u2817
  4574   00172A  2E24               	decfsz	(??_left_45+1)^0,f,c
  4575   00172C  D7FA               	bra	u2817
  4576   00172E                     
  4577                           ;dc_motor.c: 213:     LATFbits.LATF0 = 0;
  4578   00172E  907E               	bcf	126,0,c	;volatile
  4579   001730                     
  4580                           ;dc_motor.c: 214:     }
  4581   001730  2A25               	incf	left_45@i^0,f,c
  4582   001732                     l2413:
  4583   001732  5020               	movf	left_45@count^0,w,c
  4584   001734  5C25               	subwf	left_45@i^0,w,c
  4585   001736  A0D8               	btfss	status,0,c
  4586   001738  EFA0  F00B         	goto	u1471
  4587   00173C  EFA2  F00B         	goto	u1470
  4588   001740                     u1471:
  4589   001740  EF64  F00B         	goto	l2399
  4590   001744                     u1470:
  4591   001744  0012               	return		;funcret
  4592   001746                     __end_of_left_45:
  4593                           	callstack 0
  4594                           
  4595 ;; *************** function _stop *****************
  4596 ;; Defined at:
  4597 ;;		line 169 in file "dc_motor.c"
  4598 ;; Parameters:    Size  Location     Type
  4599 ;;  mL              2   21[COMRAM] PTR struct DC_motor
  4600 ;;		 -> motorL(9), 
  4601 ;;  mR              2   23[COMRAM] PTR struct DC_motor
  4602 ;;		 -> motorR(9), 
  4603 ;; Auto vars:     Size  Location     Type
  4604 ;;  i               2   25[COMRAM] int 
  4605 ;; Return value:  Size  Location     Type
  4606 ;;                  1    wreg      void 
  4607 ;; Registers used:
  4608 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4609 ;; Tracked objects:
  4610 ;;		On entry : 0/0
  4611 ;;		On exit  : 0/0
  4612 ;;		Unchanged: 0/0
  4613 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4614 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4615 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4616 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4617 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4618 ;;Total ram usage:        6 bytes
  4619 ;; Hardware stack levels used: 1
  4620 ;; Hardware stack levels required when called: 3
  4621 ;; This function calls:
  4622 ;;		_setMotorPWM
  4623 ;; This function is called by:
  4624 ;;		_buggy_color_response
  4625 ;;		_return_home
  4626 ;;		_forward
  4627 ;;		_reverse
  4628 ;;		_left_45
  4629 ;;		_right_45
  4630 ;;		_space
  4631 ;;		_reverse_yellow
  4632 ;;		_reverse_pink
  4633 ;;		_movement
  4634 ;;		_movement_return
  4635 ;; This function uses a non-reentrant model
  4636 ;;
  4637                           
  4638                           	psect	text26
  4639   001B20                     __ptext26:
  4640                           	callstack 0
  4641   001B20                     _stop:
  4642                           	callstack 26
  4643   001B20                     
  4644                           ;dc_motor.c: 169: void stop(DC_motor *mL, DC_motor *mR);dc_motor.c: 170: {;dc_motor.c: 1
      +                          71:     mL->brakemode = 1;
  4645   001B20  EE20 F002          	lfsr	2,2
  4646   001B24  5016               	movf	stop@mL^0,w,c
  4647   001B26  26D9               	addwf	fsr2l,f,c
  4648   001B28  5017               	movf	(stop@mL+1)^0,w,c
  4649   001B2A  22DA               	addwfc	fsr2h,f,c
  4650   001B2C  0E01               	movlw	1
  4651   001B2E  6EDF               	movwf	indf2,c
  4652                           
  4653                           ;dc_motor.c: 172:     mR->brakemode = 1;
  4654   001B30  EE20 F002          	lfsr	2,2
  4655   001B34  5018               	movf	stop@mR^0,w,c
  4656   001B36  26D9               	addwf	fsr2l,f,c
  4657   001B38  5019               	movf	(stop@mR+1)^0,w,c
  4658   001B3A  22DA               	addwfc	fsr2h,f,c
  4659   001B3C  0E01               	movlw	1
  4660   001B3E  6EDF               	movwf	indf2,c
  4661   001B40                     
  4662                           ;dc_motor.c: 173:     LATDbits.LATD4 = 1;
  4663   001B40  887C               	bsf	124,4,c	;volatile
  4664   001B42                     
  4665                           ;dc_motor.c: 175:     for (int i = 70; i >= 0; i=i-10) {
  4666   001B42  0E00               	movlw	0
  4667   001B44  6E1B               	movwf	(stop@i+1)^0,c
  4668   001B46  0E46               	movlw	70
  4669   001B48  6E1A               	movwf	stop@i^0,c
  4670   001B4A                     l2321:
  4671                           
  4672                           ;dc_motor.c: 176:         mL -> power = i;
  4673   001B4A  C016  FFD9         	movff	stop@mL,fsr2l
  4674   001B4E  C017  FFDA         	movff	stop@mL+1,fsr2h
  4675   001B52  C01A  FFDF         	movff	stop@i,indf2
  4676                           
  4677                           ;dc_motor.c: 177:         mR -> power = i;
  4678   001B56  C018  FFD9         	movff	stop@mR,fsr2l
  4679   001B5A  C019  FFDA         	movff	stop@mR+1,fsr2h
  4680   001B5E  C01A  FFDF         	movff	stop@i,indf2
  4681   001B62                     
  4682                           ;dc_motor.c: 178:         setMotorPWM(mL);
  4683   001B62  C016  F010         	movff	stop@mL,setMotorPWM@m
  4684   001B66  C017  F011         	movff	stop@mL+1,setMotorPWM@m+1
  4685   001B6A  EC26  F009         	call	_setMotorPWM	;wreg free
  4686   001B6E                     
  4687                           ;dc_motor.c: 179:         setMotorPWM(mR);
  4688   001B6E  C018  F010         	movff	stop@mR,setMotorPWM@m
  4689   001B72  C019  F011         	movff	stop@mR+1,setMotorPWM@m+1
  4690   001B76  EC26  F009         	call	_setMotorPWM	;wreg free
  4691   001B7A                     
  4692                           ;dc_motor.c: 180:         _delay((unsigned long)((20)*(64000000/4000000.0)));
  4693   001B7A  0E6A               	movlw	106
  4694   001B7C                     u2827:
  4695   001B7C  2EE8               	decfsz	wreg,f,c
  4696   001B7E  D7FE               	bra	u2827
  4697   001B80  D000               	nop2	
  4698   001B82                     
  4699                           ;dc_motor.c: 181:     }
  4700   001B82  0EF6               	movlw	246
  4701   001B84  241A               	addwf	stop@i^0,w,c
  4702   001B86  6E1A               	movwf	stop@i^0,c
  4703   001B88  0EFF               	movlw	255
  4704   001B8A  201B               	addwfc	(stop@i+1)^0,w,c
  4705   001B8C  6E1B               	movwf	(stop@i+1)^0,c
  4706   001B8E  BE1B               	btfsc	(stop@i+1)^0,7,c
  4707   001B90  EFCE  F00D         	goto	u1350
  4708   001B94  EFCC  F00D         	goto	u1351
  4709   001B98                     u1351:
  4710   001B98  EFA5  F00D         	goto	l2321
  4711   001B9C                     u1350:
  4712   001B9C                     
  4713                           ;dc_motor.c: 183:     mL->power = 0;
  4714   001B9C  C016  FFD9         	movff	stop@mL,fsr2l
  4715   001BA0  C017  FFDA         	movff	stop@mL+1,fsr2h
  4716   001BA4  0E00               	movlw	0
  4717   001BA6  6EDF               	movwf	indf2,c
  4718                           
  4719                           ;dc_motor.c: 184:     mR->power = 0;
  4720   001BA8  C018  FFD9         	movff	stop@mR,fsr2l
  4721   001BAC  C019  FFDA         	movff	stop@mR+1,fsr2h
  4722   001BB0  0E00               	movlw	0
  4723   001BB2  6EDF               	movwf	indf2,c
  4724   001BB4                     
  4725                           ;dc_motor.c: 185:     setMotorPWM(mL);
  4726   001BB4  C016  F010         	movff	stop@mL,setMotorPWM@m
  4727   001BB8  C017  F011         	movff	stop@mL+1,setMotorPWM@m+1
  4728   001BBC  EC26  F009         	call	_setMotorPWM	;wreg free
  4729   001BC0                     
  4730                           ;dc_motor.c: 186:     setMotorPWM(mR);
  4731   001BC0  C018  F010         	movff	stop@mR,setMotorPWM@m
  4732   001BC4  C019  F011         	movff	stop@mR+1,setMotorPWM@m+1
  4733   001BC8  EC26  F009         	call	_setMotorPWM	;wreg free
  4734   001BCC                     
  4735                           ;dc_motor.c: 187:     LATDbits.LATD4 = 0;
  4736   001BCC  987C               	bcf	124,4,c	;volatile
  4737   001BCE  0012               	return		;funcret
  4738   001BD0                     __end_of_stop:
  4739                           	callstack 0
  4740                           
  4741 ;; *************** function _setMotorPWM *****************
  4742 ;; Defined at:
  4743 ;;		line 78 in file "dc_motor.c"
  4744 ;; Parameters:    Size  Location     Type
  4745 ;;  m               2   15[COMRAM] PTR struct DC_motor
  4746 ;;		 -> motorR(9), motorL(9), 
  4747 ;; Auto vars:     Size  Location     Type
  4748 ;;  negDuty         1   20[COMRAM] unsigned char 
  4749 ;;  posDuty         1   19[COMRAM] unsigned char 
  4750 ;; Return value:  Size  Location     Type
  4751 ;;                  1    wreg      void 
  4752 ;; Registers used:
  4753 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4754 ;; Tracked objects:
  4755 ;;		On entry : 0/0
  4756 ;;		On exit  : 0/0
  4757 ;;		Unchanged: 0/0
  4758 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4759 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4760 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4761 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4762 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4763 ;;Total ram usage:        6 bytes
  4764 ;; Hardware stack levels used: 1
  4765 ;; Hardware stack levels required when called: 2
  4766 ;; This function calls:
  4767 ;;		___lwdiv
  4768 ;;		___wmul
  4769 ;; This function is called by:
  4770 ;;		_forward
  4771 ;;		_reverse
  4772 ;;		_stop
  4773 ;;		_left_45
  4774 ;;		_right_45
  4775 ;;		_space
  4776 ;; This function uses a non-reentrant model
  4777 ;;
  4778                           
  4779                           	psect	text27
  4780   00124C                     __ptext27:
  4781                           	callstack 0
  4782   00124C                     _setMotorPWM:
  4783                           	callstack 26
  4784   00124C                     
  4785                           ;dc_motor.c: 78: void setMotorPWM(DC_motor *m);dc_motor.c: 79: {;dc_motor.c: 80:     uns
      +                          igned char posDuty, negDuty;;dc_motor.c: 82:     if(m->brakemode) {
  4786   00124C  EE20 F002          	lfsr	2,2
  4787   001250  5010               	movf	setMotorPWM@m^0,w,c
  4788   001252  26D9               	addwf	fsr2l,f,c
  4789   001254  5011               	movf	(setMotorPWM@m+1)^0,w,c
  4790   001256  22DA               	addwfc	fsr2h,f,c
  4791   001258  50DF               	movf	indf2,w,c
  4792   00125A  B4D8               	btfsc	status,2,c
  4793   00125C  EF32  F009         	goto	u1331
  4794   001260  EF34  F009         	goto	u1330
  4795   001264                     u1331:
  4796   001264  EF68  F009         	goto	l2301
  4797   001268                     u1330:
  4798   001268                     
  4799                           ;dc_motor.c: 83:         posDuty = m->PWMperiod - ((unsigned int)(m->power)*(m->PWMperio
      +                          d))/100;
  4800   001268  C010  FFD9         	movff	setMotorPWM@m,fsr2l
  4801   00126C  C011  FFDA         	movff	setMotorPWM@m+1,fsr2h
  4802   001270  50DF               	movf	indf2,w,c
  4803   001272  6E12               	movwf	??_setMotorPWM^0,c
  4804   001274  5012               	movf	??_setMotorPWM^0,w,c
  4805   001276  6E03               	movwf	___wmul@multiplier^0,c
  4806   001278  6A04               	clrf	(___wmul@multiplier+1)^0,c
  4807   00127A  EE20 F003          	lfsr	2,3
  4808   00127E  5010               	movf	setMotorPWM@m^0,w,c
  4809   001280  26D9               	addwf	fsr2l,f,c
  4810   001282  5011               	movf	(setMotorPWM@m+1)^0,w,c
  4811   001284  22DA               	addwfc	fsr2h,f,c
  4812   001286  CFDE F005          	movff	postinc2,___wmul@multiplicand
  4813   00128A  CFDD F006          	movff	postdec2,___wmul@multiplicand+1
  4814   00128E  ECDB  F010         	call	___wmul	;wreg free
  4815   001292  C003  F009         	movff	?___wmul,___lwdiv@dividend
  4816   001296  C004  F00A         	movff	?___wmul+1,___lwdiv@dividend+1
  4817   00129A  0E00               	movlw	0
  4818   00129C  6E0C               	movwf	(___lwdiv@divisor+1)^0,c
  4819   00129E  0E64               	movlw	100
  4820   0012A0  6E0B               	movwf	___lwdiv@divisor^0,c
  4821   0012A2  ECB2  F00E         	call	___lwdiv	;wreg free
  4822   0012A6  EE20 F003          	lfsr	2,3
  4823   0012AA  5010               	movf	setMotorPWM@m^0,w,c
  4824   0012AC  26D9               	addwf	fsr2l,f,c
  4825   0012AE  5011               	movf	(setMotorPWM@m+1)^0,w,c
  4826   0012B0  22DA               	addwfc	fsr2h,f,c
  4827   0012B2  50DF               	movf	indf2,w,c
  4828   0012B4  6E13               	movwf	(??_setMotorPWM+1)^0,c
  4829   0012B6  5009               	movf	?___lwdiv^0,w,c
  4830   0012B8  5C13               	subwf	(??_setMotorPWM+1)^0,w,c
  4831   0012BA  6E14               	movwf	setMotorPWM@posDuty^0,c
  4832   0012BC                     
  4833                           ;dc_motor.c: 84:         negDuty = m->PWMperiod;
  4834   0012BC  EE20 F003          	lfsr	2,3
  4835   0012C0  5010               	movf	setMotorPWM@m^0,w,c
  4836   0012C2  26D9               	addwf	fsr2l,f,c
  4837   0012C4  5011               	movf	(setMotorPWM@m+1)^0,w,c
  4838   0012C6  22DA               	addwfc	fsr2h,f,c
  4839   0012C8  50DF               	movf	indf2,w,c
  4840   0012CA  6E15               	movwf	setMotorPWM@negDuty^0,c
  4841                           
  4842                           ;dc_motor.c: 85:     }
  4843   0012CC  EF8B  F009         	goto	l2305
  4844   0012D0                     l2301:
  4845                           
  4846                           ;dc_motor.c: 87:         posDuty=0;
  4847   0012D0  0E00               	movlw	0
  4848   0012D2  6E14               	movwf	setMotorPWM@posDuty^0,c
  4849   0012D4                     
  4850                           ;dc_motor.c: 88:   negDuty=((unsigned int)(m->power)*(m->PWMperiod))/100;
  4851   0012D4  C010  FFD9         	movff	setMotorPWM@m,fsr2l
  4852   0012D8  C011  FFDA         	movff	setMotorPWM@m+1,fsr2h
  4853   0012DC  50DF               	movf	indf2,w,c
  4854   0012DE  6E12               	movwf	??_setMotorPWM^0,c
  4855   0012E0  5012               	movf	??_setMotorPWM^0,w,c
  4856   0012E2  6E03               	movwf	___wmul@multiplier^0,c
  4857   0012E4  6A04               	clrf	(___wmul@multiplier+1)^0,c
  4858   0012E6  EE20 F003          	lfsr	2,3
  4859   0012EA  5010               	movf	setMotorPWM@m^0,w,c
  4860   0012EC  26D9               	addwf	fsr2l,f,c
  4861   0012EE  5011               	movf	(setMotorPWM@m+1)^0,w,c
  4862   0012F0  22DA               	addwfc	fsr2h,f,c
  4863   0012F2  CFDE F005          	movff	postinc2,___wmul@multiplicand
  4864   0012F6  CFDD F006          	movff	postdec2,___wmul@multiplicand+1
  4865   0012FA  ECDB  F010         	call	___wmul	;wreg free
  4866   0012FE  C003  F009         	movff	?___wmul,___lwdiv@dividend
  4867   001302  C004  F00A         	movff	?___wmul+1,___lwdiv@dividend+1
  4868   001306  0E00               	movlw	0
  4869   001308  6E0C               	movwf	(___lwdiv@divisor+1)^0,c
  4870   00130A  0E64               	movlw	100
  4871   00130C  6E0B               	movwf	___lwdiv@divisor^0,c
  4872   00130E  ECB2  F00E         	call	___lwdiv	;wreg free
  4873   001312  5009               	movf	?___lwdiv^0,w,c
  4874   001314  6E15               	movwf	setMotorPWM@negDuty^0,c
  4875   001316                     l2305:
  4876                           
  4877                           ;dc_motor.c: 91:     if (m->direction) {
  4878   001316  EE20 F001          	lfsr	2,1
  4879   00131A  5010               	movf	setMotorPWM@m^0,w,c
  4880   00131C  26D9               	addwf	fsr2l,f,c
  4881   00131E  5011               	movf	(setMotorPWM@m+1)^0,w,c
  4882   001320  22DA               	addwfc	fsr2h,f,c
  4883   001322  50DF               	movf	indf2,w,c
  4884   001324  B4D8               	btfsc	status,2,c
  4885   001326  EF97  F009         	goto	u1341
  4886   00132A  EF99  F009         	goto	u1340
  4887   00132E                     u1341:
  4888   00132E  EFBB  F009         	goto	l2309
  4889   001332                     u1340:
  4890   001332                     
  4891                           ;dc_motor.c: 92:         *(m->posDutyHighByte)= posDuty;
  4892   001332  EE20 F005          	lfsr	2,5
  4893   001336  5010               	movf	setMotorPWM@m^0,w,c
  4894   001338  26D9               	addwf	fsr2l,f,c
  4895   00133A  5011               	movf	(setMotorPWM@m+1)^0,w,c
  4896   00133C  22DA               	addwfc	fsr2h,f,c
  4897   00133E  CFDE F012          	movff	postinc2,??_setMotorPWM
  4898   001342  CFDD F013          	movff	postdec2,??_setMotorPWM+1
  4899   001346  C012  FFD9         	movff	??_setMotorPWM,fsr2l
  4900   00134A  C013  FFDA         	movff	??_setMotorPWM+1,fsr2h
  4901   00134E  C014  FFDF         	movff	setMotorPWM@posDuty,indf2
  4902                           
  4903                           ;dc_motor.c: 93:         *(m->negDutyHighByte)= negDuty;
  4904   001352  EE20 F007          	lfsr	2,7
  4905   001356  5010               	movf	setMotorPWM@m^0,w,c
  4906   001358  26D9               	addwf	fsr2l,f,c
  4907   00135A  5011               	movf	(setMotorPWM@m+1)^0,w,c
  4908   00135C  22DA               	addwfc	fsr2h,f,c
  4909   00135E  CFDE F012          	movff	postinc2,??_setMotorPWM
  4910   001362  CFDD F013          	movff	postdec2,??_setMotorPWM+1
  4911   001366  C012  FFD9         	movff	??_setMotorPWM,fsr2l
  4912   00136A  C013  FFDA         	movff	??_setMotorPWM+1,fsr2h
  4913   00136E  C015  FFDF         	movff	setMotorPWM@negDuty,indf2
  4914                           
  4915                           ;dc_motor.c: 94:     } else {
  4916   001372  EFDB  F009         	goto	l281
  4917   001376                     l2309:
  4918                           
  4919                           ;dc_motor.c: 95:         *(m->posDutyHighByte)= negDuty;
  4920   001376  EE20 F005          	lfsr	2,5
  4921   00137A  5010               	movf	setMotorPWM@m^0,w,c
  4922   00137C  26D9               	addwf	fsr2l,f,c
  4923   00137E  5011               	movf	(setMotorPWM@m+1)^0,w,c
  4924   001380  22DA               	addwfc	fsr2h,f,c
  4925   001382  CFDE F012          	movff	postinc2,??_setMotorPWM
  4926   001386  CFDD F013          	movff	postdec2,??_setMotorPWM+1
  4927   00138A  C012  FFD9         	movff	??_setMotorPWM,fsr2l
  4928   00138E  C013  FFDA         	movff	??_setMotorPWM+1,fsr2h
  4929   001392  C015  FFDF         	movff	setMotorPWM@negDuty,indf2
  4930                           
  4931                           ;dc_motor.c: 96:         *(m->negDutyHighByte)= posDuty;
  4932   001396  EE20 F007          	lfsr	2,7
  4933   00139A  5010               	movf	setMotorPWM@m^0,w,c
  4934   00139C  26D9               	addwf	fsr2l,f,c
  4935   00139E  5011               	movf	(setMotorPWM@m+1)^0,w,c
  4936   0013A0  22DA               	addwfc	fsr2h,f,c
  4937   0013A2  CFDE F012          	movff	postinc2,??_setMotorPWM
  4938   0013A6  CFDD F013          	movff	postdec2,??_setMotorPWM+1
  4939   0013AA  C012  FFD9         	movff	??_setMotorPWM,fsr2l
  4940   0013AE  C013  FFDA         	movff	??_setMotorPWM+1,fsr2h
  4941   0013B2  C014  FFDF         	movff	setMotorPWM@posDuty,indf2
  4942   0013B6                     l281:
  4943   0013B6  0012               	return		;funcret
  4944   0013B8                     __end_of_setMotorPWM:
  4945                           	callstack 0
  4946                           
  4947 ;; *************** function ___wmul *****************
  4948 ;; Defined at:
  4949 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\Umul16.c"
  4950 ;; Parameters:    Size  Location     Type
  4951 ;;  multiplier      2    2[COMRAM] unsigned int 
  4952 ;;  multiplicand    2    4[COMRAM] unsigned int 
  4953 ;; Auto vars:     Size  Location     Type
  4954 ;;  product         2    6[COMRAM] unsigned int 
  4955 ;; Return value:  Size  Location     Type
  4956 ;;                  2    2[COMRAM] unsigned int 
  4957 ;; Registers used:
  4958 ;;		wreg, status,2, status,0, prodl, prodh
  4959 ;; Tracked objects:
  4960 ;;		On entry : 0/0
  4961 ;;		On exit  : 0/0
  4962 ;;		Unchanged: 0/0
  4963 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4964 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4965 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4966 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4967 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4968 ;;Total ram usage:        6 bytes
  4969 ;; Hardware stack levels used: 1
  4970 ;; Hardware stack levels required when called: 1
  4971 ;; This function calls:
  4972 ;;		Nothing
  4973 ;; This function is called by:
  4974 ;;		_setMotorPWM
  4975 ;; This function uses a non-reentrant model
  4976 ;;
  4977                           
  4978                           	psect	text28
  4979   0021B6                     __ptext28:
  4980                           	callstack 0
  4981   0021B6                     ___wmul:
  4982                           	callstack 26
  4983   0021B6  5003               	movf	___wmul@multiplier^0,w,c
  4984   0021B8  0205               	mulwf	___wmul@multiplicand^0,c
  4985   0021BA  CFF3 F007          	movff	prodl,___wmul@product
  4986   0021BE  CFF4 F008          	movff	prodh,___wmul@product+1
  4987   0021C2  5003               	movf	___wmul@multiplier^0,w,c
  4988   0021C4  0206               	mulwf	(___wmul@multiplicand+1)^0,c
  4989   0021C6  50F3               	movf	243,w,c
  4990   0021C8  2608               	addwf	(___wmul@product+1)^0,f,c
  4991   0021CA  5004               	movf	(___wmul@multiplier+1)^0,w,c
  4992   0021CC  0205               	mulwf	___wmul@multiplicand^0,c
  4993   0021CE  50F3               	movf	243,w,c
  4994   0021D0  2608               	addwf	(___wmul@product+1)^0,f,c
  4995   0021D2  C007  F003         	movff	___wmul@product,?___wmul
  4996   0021D6  C008  F004         	movff	___wmul@product+1,?___wmul+1
  4997   0021DA  0012               	return		;funcret
  4998   0021DC                     __end_of___wmul:
  4999                           	callstack 0
  5000                           
  5001 ;; *************** function ___lwdiv *****************
  5002 ;; Defined at:
  5003 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\lwdiv.c"
  5004 ;; Parameters:    Size  Location     Type
  5005 ;;  dividend        2    8[COMRAM] unsigned int 
  5006 ;;  divisor         2   10[COMRAM] unsigned int 
  5007 ;; Auto vars:     Size  Location     Type
  5008 ;;  quotient        2   12[COMRAM] unsigned int 
  5009 ;;  counter         1   14[COMRAM] unsigned char 
  5010 ;; Return value:  Size  Location     Type
  5011 ;;                  2    8[COMRAM] unsigned int 
  5012 ;; Registers used:
  5013 ;;		wreg, status,2, status,0
  5014 ;; Tracked objects:
  5015 ;;		On entry : 0/0
  5016 ;;		On exit  : 0/0
  5017 ;;		Unchanged: 0/0
  5018 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5019 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5020 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5021 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5022 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5023 ;;Total ram usage:        7 bytes
  5024 ;; Hardware stack levels used: 1
  5025 ;; Hardware stack levels required when called: 1
  5026 ;; This function calls:
  5027 ;;		Nothing
  5028 ;; This function is called by:
  5029 ;;		_setMotorPWM
  5030 ;; This function uses a non-reentrant model
  5031 ;;
  5032                           
  5033                           	psect	text29
  5034   001D64                     __ptext29:
  5035                           	callstack 0
  5036   001D64                     ___lwdiv:
  5037                           	callstack 26
  5038   001D64  0E00               	movlw	0
  5039   001D66  6E0E               	movwf	(___lwdiv@quotient+1)^0,c
  5040   001D68  0E00               	movlw	0
  5041   001D6A  6E0D               	movwf	___lwdiv@quotient^0,c
  5042   001D6C  500B               	movf	___lwdiv@divisor^0,w,c
  5043   001D6E  100C               	iorwf	(___lwdiv@divisor+1)^0,w,c
  5044   001D70  B4D8               	btfsc	status,2,c
  5045   001D72  EFBD  F00E         	goto	u1301
  5046   001D76  EFBF  F00E         	goto	u1300
  5047   001D7A                     u1301:
  5048   001D7A  EFE7  F00E         	goto	l1087
  5049   001D7E                     u1300:
  5050   001D7E  0E01               	movlw	1
  5051   001D80  6E0F               	movwf	___lwdiv@counter^0,c
  5052   001D82  EFC7  F00E         	goto	l2281
  5053   001D86                     l2279:
  5054   001D86  90D8               	bcf	status,0,c
  5055   001D88  360B               	rlcf	___lwdiv@divisor^0,f,c
  5056   001D8A  360C               	rlcf	(___lwdiv@divisor+1)^0,f,c
  5057   001D8C  2A0F               	incf	___lwdiv@counter^0,f,c
  5058   001D8E                     l2281:
  5059   001D8E  AE0C               	btfss	(___lwdiv@divisor+1)^0,7,c
  5060   001D90  EFCC  F00E         	goto	u1311
  5061   001D94  EFCE  F00E         	goto	u1310
  5062   001D98                     u1311:
  5063   001D98  EFC3  F00E         	goto	l2279
  5064   001D9C                     u1310:
  5065   001D9C                     l2283:
  5066   001D9C  90D8               	bcf	status,0,c
  5067   001D9E  360D               	rlcf	___lwdiv@quotient^0,f,c
  5068   001DA0  360E               	rlcf	(___lwdiv@quotient+1)^0,f,c
  5069   001DA2  500B               	movf	___lwdiv@divisor^0,w,c
  5070   001DA4  5C09               	subwf	___lwdiv@dividend^0,w,c
  5071   001DA6  500C               	movf	(___lwdiv@divisor+1)^0,w,c
  5072   001DA8  580A               	subwfb	(___lwdiv@dividend+1)^0,w,c
  5073   001DAA  A0D8               	btfss	status,0,c
  5074   001DAC  EFDA  F00E         	goto	u1321
  5075   001DB0  EFDC  F00E         	goto	u1320
  5076   001DB4                     u1321:
  5077   001DB4  EFE1  F00E         	goto	l2291
  5078   001DB8                     u1320:
  5079   001DB8  500B               	movf	___lwdiv@divisor^0,w,c
  5080   001DBA  5E09               	subwf	___lwdiv@dividend^0,f,c
  5081   001DBC  500C               	movf	(___lwdiv@divisor+1)^0,w,c
  5082   001DBE  5A0A               	subwfb	(___lwdiv@dividend+1)^0,f,c
  5083   001DC0  800D               	bsf	___lwdiv@quotient^0,0,c
  5084   001DC2                     l2291:
  5085   001DC2  90D8               	bcf	status,0,c
  5086   001DC4  320C               	rrcf	(___lwdiv@divisor+1)^0,f,c
  5087   001DC6  320B               	rrcf	___lwdiv@divisor^0,f,c
  5088   001DC8  2E0F               	decfsz	___lwdiv@counter^0,f,c
  5089   001DCA  EFCE  F00E         	goto	l2283
  5090   001DCE                     l1087:
  5091   001DCE  C00D  F009         	movff	___lwdiv@quotient,?___lwdiv
  5092   001DD2  C00E  F00A         	movff	___lwdiv@quotient+1,?___lwdiv+1
  5093   001DD6  0012               	return		;funcret
  5094   001DD8                     __end_of___lwdiv:
  5095                           	callstack 0
  5096                           
  5097 ;; *************** function _custom_delay *****************
  5098 ;; Defined at:
  5099 ;;		line 37 in file "calibration.c"
  5100 ;; Parameters:    Size  Location     Type
  5101 ;;  temp            2    2[COMRAM] int 
  5102 ;; Auto vars:     Size  Location     Type
  5103 ;;  i               2    5[COMRAM] int 
  5104 ;; Return value:  Size  Location     Type
  5105 ;;                  1    wreg      void 
  5106 ;; Registers used:
  5107 ;;		wreg, status,2, status,0
  5108 ;; Tracked objects:
  5109 ;;		On entry : 0/0
  5110 ;;		On exit  : 0/0
  5111 ;;		Unchanged: 0/0
  5112 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5113 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5114 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5115 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5116 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5117 ;;Total ram usage:        5 bytes
  5118 ;; Hardware stack levels used: 1
  5119 ;; Hardware stack levels required when called: 1
  5120 ;; This function calls:
  5121 ;;		Nothing
  5122 ;; This function is called by:
  5123 ;;		_left_45
  5124 ;;		_right_45
  5125 ;;		_reverse_yellow
  5126 ;;		_reverse_pink
  5127 ;;		_movement
  5128 ;; This function uses a non-reentrant model
  5129 ;;
  5130                           
  5131                           	psect	text30
  5132   0020F0                     __ptext30:
  5133                           	callstack 0
  5134   0020F0                     _custom_delay:
  5135                           	callstack 25
  5136   0020F0                     
  5137                           ;calibration.c: 38: int i;;calibration.c: 39: for (i = 0; i < temp; i++){_delay((unsigne
      +                          d long)((1)*(64000000/4000.0)));}
  5138   0020F0  0E00               	movlw	0
  5139   0020F2  6E07               	movwf	(custom_delay@i+1)^0,c
  5140   0020F4  0E00               	movlw	0
  5141   0020F6  6E06               	movwf	custom_delay@i^0,c
  5142   0020F8  EF88  F010         	goto	l515
  5143   0020FC                     l2343:
  5144   0020FC  0E15               	movlw	21
  5145   0020FE  6E05               	movwf	??_custom_delay^0,c
  5146   002100  0EC6               	movlw	198
  5147   002102                     u2837:
  5148   002102  2EE8               	decfsz	wreg,f,c
  5149   002104  D7FE               	bra	u2837
  5150   002106  2E05               	decfsz	??_custom_delay^0,f,c
  5151   002108  D7FC               	bra	u2837
  5152   00210A  D000               	nop2	
  5153   00210C  4A06               	infsnz	custom_delay@i^0,f,c
  5154   00210E  2A07               	incf	(custom_delay@i+1)^0,f,c
  5155   002110                     l515:
  5156   002110  5003               	movf	custom_delay@temp^0,w,c
  5157   002112  5C06               	subwf	custom_delay@i^0,w,c
  5158   002114  5007               	movf	(custom_delay@i+1)^0,w,c
  5159   002116  0A80               	xorlw	128
  5160   002118  6E05               	movwf	??_custom_delay^0,c
  5161   00211A  5004               	movf	(custom_delay@temp+1)^0,w,c
  5162   00211C  0A80               	xorlw	128
  5163   00211E  5805               	subwfb	??_custom_delay^0,w,c
  5164   002120  A0D8               	btfss	status,0,c
  5165   002122  EF95  F010         	goto	u1361
  5166   002126  EF97  F010         	goto	u1360
  5167   00212A                     u1361:
  5168   00212A  EF7E  F010         	goto	l2343
  5169   00212E                     u1360:
  5170   00212E  0012               	return		;funcret
  5171   002130                     __end_of_custom_delay:
  5172                           	callstack 0
  5173                           
  5174 ;; *************** function ___flge *****************
  5175 ;; Defined at:
  5176 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\flge.c"
  5177 ;; Parameters:    Size  Location     Type
  5178 ;;  ff1             4    2[COMRAM] void 
  5179 ;;  ff2             4    6[COMRAM] void 
  5180 ;; Auto vars:     Size  Location     Type
  5181 ;;		None
  5182 ;; Return value:  Size  Location     Type
  5183 ;;		None               void
  5184 ;; Registers used:
  5185 ;;		wreg, status,2, status,0
  5186 ;; Tracked objects:
  5187 ;;		On entry : 0/0
  5188 ;;		On exit  : 0/0
  5189 ;;		Unchanged: 0/0
  5190 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5191 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5192 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5193 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5194 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5195 ;;Total ram usage:       12 bytes
  5196 ;; Hardware stack levels used: 1
  5197 ;; Hardware stack levels required when called: 1
  5198 ;; This function calls:
  5199 ;;		Nothing
  5200 ;; This function is called by:
  5201 ;;		_buggy_color_response
  5202 ;; This function uses a non-reentrant model
  5203 ;;
  5204                           
  5205                           	psect	text31
  5206   001746                     __ptext31:
  5207                           	callstack 0
  5208   001746                     ___flge:
  5209                           	callstack 28
  5210   001746  0E00               	movlw	0
  5211   001748  1403               	andwf	___flge@ff1^0,w,c
  5212   00174A  6E0B               	movwf	??___flge^0,c
  5213   00174C  0E00               	movlw	0
  5214   00174E  1404               	andwf	(___flge@ff1+1)^0,w,c
  5215   001750  6E0C               	movwf	(??___flge+1)^0,c
  5216   001752  0E80               	movlw	128
  5217   001754  1405               	andwf	(___flge@ff1+2)^0,w,c
  5218   001756  6E0D               	movwf	(??___flge+2)^0,c
  5219   001758  0E7F               	movlw	127
  5220   00175A  1406               	andwf	(___flge@ff1+3)^0,w,c
  5221   00175C  6E0E               	movwf	(??___flge+3)^0,c
  5222   00175E  500B               	movf	??___flge^0,w,c
  5223   001760  100C               	iorwf	(??___flge+1)^0,w,c
  5224   001762  100D               	iorwf	(??___flge+2)^0,w,c
  5225   001764  100E               	iorwf	(??___flge+3)^0,w,c
  5226   001766  A4D8               	btfss	status,2,c
  5227   001768  EFB8  F00B         	goto	u2111
  5228   00176C  EFBA  F00B         	goto	u2110
  5229   001770                     u2111:
  5230   001770  EFC2  F00B         	goto	l2995
  5231   001774                     u2110:
  5232   001774  0E00               	movlw	0
  5233   001776  6E03               	movwf	___flge@ff1^0,c
  5234   001778  0E00               	movlw	0
  5235   00177A  6E04               	movwf	(___flge@ff1+1)^0,c
  5236   00177C  0E00               	movlw	0
  5237   00177E  6E05               	movwf	(___flge@ff1+2)^0,c
  5238   001780  0E00               	movlw	0
  5239   001782  6E06               	movwf	(___flge@ff1+3)^0,c
  5240   001784                     l2995:
  5241   001784  0E00               	movlw	0
  5242   001786  1407               	andwf	___flge@ff2^0,w,c
  5243   001788  6E0B               	movwf	??___flge^0,c
  5244   00178A  0E00               	movlw	0
  5245   00178C  1408               	andwf	(___flge@ff2+1)^0,w,c
  5246   00178E  6E0C               	movwf	(??___flge+1)^0,c
  5247   001790  0E80               	movlw	128
  5248   001792  1409               	andwf	(___flge@ff2+2)^0,w,c
  5249   001794  6E0D               	movwf	(??___flge+2)^0,c
  5250   001796  0E7F               	movlw	127
  5251   001798  140A               	andwf	(___flge@ff2+3)^0,w,c
  5252   00179A  6E0E               	movwf	(??___flge+3)^0,c
  5253   00179C  500B               	movf	??___flge^0,w,c
  5254   00179E  100C               	iorwf	(??___flge+1)^0,w,c
  5255   0017A0  100D               	iorwf	(??___flge+2)^0,w,c
  5256   0017A2  100E               	iorwf	(??___flge+3)^0,w,c
  5257   0017A4  A4D8               	btfss	status,2,c
  5258   0017A6  EFD7  F00B         	goto	u2121
  5259   0017AA  EFD9  F00B         	goto	u2120
  5260   0017AE                     u2121:
  5261   0017AE  EFE1  F00B         	goto	l2999
  5262   0017B2                     u2120:
  5263   0017B2  0E00               	movlw	0
  5264   0017B4  6E07               	movwf	___flge@ff2^0,c
  5265   0017B6  0E00               	movlw	0
  5266   0017B8  6E08               	movwf	(___flge@ff2+1)^0,c
  5267   0017BA  0E00               	movlw	0
  5268   0017BC  6E09               	movwf	(___flge@ff2+2)^0,c
  5269   0017BE  0E00               	movlw	0
  5270   0017C0  6E0A               	movwf	(___flge@ff2+3)^0,c
  5271   0017C2                     l2999:
  5272   0017C2  AE06               	btfss	(___flge@ff1+3)^0,7,c
  5273   0017C4  EFE6  F00B         	goto	u2131
  5274   0017C8  EFE8  F00B         	goto	u2130
  5275   0017CC                     u2131:
  5276   0017CC  EFF1  F00B         	goto	l3003
  5277   0017D0                     u2130:
  5278   0017D0  6C03               	negf	___flge@ff1^0,c
  5279   0017D2  1E04               	comf	(___flge@ff1+1)^0,f,c
  5280   0017D4  B0D8               	btfsc	status,0,c
  5281   0017D6  2A04               	incf	(___flge@ff1+1)^0,f,c
  5282   0017D8  1E05               	comf	(___flge@ff1+2)^0,f,c
  5283   0017DA  B0D8               	btfsc	status,0,c
  5284   0017DC  2A05               	incf	(___flge@ff1+2)^0,f,c
  5285   0017DE  0E80               	movlw	128
  5286   0017E0  5606               	subfwb	(___flge@ff1+3)^0,f,c
  5287   0017E2                     l3003:
  5288   0017E2  AE0A               	btfss	(___flge@ff2+3)^0,7,c
  5289   0017E4  EFF6  F00B         	goto	u2141
  5290   0017E8  EFF8  F00B         	goto	u2140
  5291   0017EC                     u2141:
  5292   0017EC  EF01  F00C         	goto	l861
  5293   0017F0                     u2140:
  5294   0017F0  6C07               	negf	___flge@ff2^0,c
  5295   0017F2  1E08               	comf	(___flge@ff2+1)^0,f,c
  5296   0017F4  B0D8               	btfsc	status,0,c
  5297   0017F6  2A08               	incf	(___flge@ff2+1)^0,f,c
  5298   0017F8  1E09               	comf	(___flge@ff2+2)^0,f,c
  5299   0017FA  B0D8               	btfsc	status,0,c
  5300   0017FC  2A09               	incf	(___flge@ff2+2)^0,f,c
  5301   0017FE  0E80               	movlw	128
  5302   001800  560A               	subfwb	(___flge@ff2+3)^0,f,c
  5303   001802                     l861:
  5304   001802  0E00               	movlw	0
  5305   001804  1A03               	xorwf	___flge@ff1^0,f,c
  5306   001806  0E00               	movlw	0
  5307   001808  1A04               	xorwf	(___flge@ff1+1)^0,f,c
  5308   00180A  0E00               	movlw	0
  5309   00180C  1A05               	xorwf	(___flge@ff1+2)^0,f,c
  5310   00180E  0E80               	movlw	128
  5311   001810  1A06               	xorwf	(___flge@ff1+3)^0,f,c
  5312   001812  0E00               	movlw	0
  5313   001814  1A07               	xorwf	___flge@ff2^0,f,c
  5314   001816  0E00               	movlw	0
  5315   001818  1A08               	xorwf	(___flge@ff2+1)^0,f,c
  5316   00181A  0E00               	movlw	0
  5317   00181C  1A09               	xorwf	(___flge@ff2+2)^0,f,c
  5318   00181E  0E80               	movlw	128
  5319   001820  1A0A               	xorwf	(___flge@ff2+3)^0,f,c
  5320   001822  5007               	movf	___flge@ff2^0,w,c
  5321   001824  5C03               	subwf	___flge@ff1^0,w,c
  5322   001826  5008               	movf	(___flge@ff2+1)^0,w,c
  5323   001828  5804               	subwfb	(___flge@ff1+1)^0,w,c
  5324   00182A  5009               	movf	(___flge@ff2+2)^0,w,c
  5325   00182C  5805               	subwfb	(___flge@ff1+2)^0,w,c
  5326   00182E  500A               	movf	(___flge@ff2+3)^0,w,c
  5327   001830  5806               	subwfb	(___flge@ff1+3)^0,w,c
  5328   001832  B0D8               	btfsc	status,0,c
  5329   001834  EF1E  F00C         	goto	u2151
  5330   001838  EF20  F00C         	goto	u2150
  5331   00183C                     u2151:
  5332   00183C  EF23  F00C         	goto	l3009
  5333   001840                     u2150:
  5334   001840  90D8               	bcf	status,0,c
  5335   001842  EF24  F00C         	goto	l866
  5336   001846                     l3009:
  5337   001846  80D8               	bsf	status,0,c
  5338   001848                     l866:
  5339   001848  0012               	return		;funcret
  5340   00184A                     __end_of___flge:
  5341                           	callstack 0
  5342                           
  5343 ;; *************** function _READcolor *****************
  5344 ;; Defined at:
  5345 ;;		line 112 in file "color.c"
  5346 ;; Parameters:    Size  Location     Type
  5347 ;;  c               2   41[COMRAM] PTR struct colors
  5348 ;;		 -> color(20), 
  5349 ;; Auto vars:     Size  Location     Type
  5350 ;;		None
  5351 ;; Return value:  Size  Location     Type
  5352 ;;                  1    wreg      void 
  5353 ;; Registers used:
  5354 ;;		wreg, status,2, status,0, cstack
  5355 ;; Tracked objects:
  5356 ;;		On entry : 0/0
  5357 ;;		On exit  : 0/0
  5358 ;;		Unchanged: 0/0
  5359 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5360 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5361 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5362 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5363 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5364 ;;Total ram usage:        2 bytes
  5365 ;; Hardware stack levels used: 1
  5366 ;; Hardware stack levels required when called: 4
  5367 ;; This function calls:
  5368 ;;		___fldiv
  5369 ;;		___xxtofl
  5370 ;;		_color_read_Blue
  5371 ;;		_color_read_Clear
  5372 ;;		_color_read_Green
  5373 ;;		_color_read_Red
  5374 ;; This function is called by:
  5375 ;;		_buggy_color_response
  5376 ;; This function uses a non-reentrant model
  5377 ;;
  5378                           
  5379                           	psect	text32
  5380   0013B8                     __ptext32:
  5381                           	callstack 0
  5382   0013B8                     _READcolor:
  5383                           	callstack 25
  5384   0013B8                     
  5385                           ;color.c: 114:     color.R = color_read_Red();
  5386   0013B8  EC50  F00F         	call	_color_read_Red	;wreg free
  5387   0013BC  C007  F043         	movff	?_color_read_Red,_color
  5388   0013C0  C008  F044         	movff	?_color_read_Red+1,_color+1
  5389                           
  5390                           ;color.c: 115:     color.B = color_read_Blue();
  5391   0013C4  ECC8  F00F         	call	_color_read_Blue	;wreg free
  5392   0013C8  C007  F045         	movff	?_color_read_Blue,_color+2
  5393   0013CC  C008  F046         	movff	?_color_read_Blue+1,_color+3
  5394                           
  5395                           ;color.c: 116:     color.G = color_read_Green();
  5396   0013D0  EC78  F00F         	call	_color_read_Green	;wreg free
  5397   0013D4  C007  F047         	movff	?_color_read_Green,_color+4
  5398   0013D8  C008  F048         	movff	?_color_read_Green+1,_color+5
  5399                           
  5400                           ;color.c: 117:     color.C = color_read_Clear();
  5401   0013DC  ECA0  F00F         	call	_color_read_Clear	;wreg free
  5402   0013E0  C007  F049         	movff	?_color_read_Clear,_color+6
  5403   0013E4  C008  F04A         	movff	?_color_read_Clear+1,_color+7
  5404                           
  5405                           ;color.c: 119:     color.R_norm = (float)color.R / (float)color.C;
  5406   0013E8  C043  F003         	movff	_color,___xxtofl@val
  5407   0013EC  C044  F004         	movff	_color+1,___xxtofl@val+1
  5408   0013F0  6A05               	clrf	(___xxtofl@val+2)^0,c
  5409   0013F2  6A06               	clrf	(___xxtofl@val+3)^0,c
  5410   0013F4  0E00               	movlw	0
  5411   0013F6  ECBC  F006         	call	___xxtofl
  5412   0013FA  C003  F011         	movff	?___xxtofl,___fldiv@b
  5413   0013FE  C004  F012         	movff	?___xxtofl+1,___fldiv@b+1
  5414   001402  C005  F013         	movff	?___xxtofl+2,___fldiv@b+2
  5415   001406  C006  F014         	movff	?___xxtofl+3,___fldiv@b+3
  5416   00140A  C049  F003         	movff	_color+6,___xxtofl@val
  5417   00140E  C04A  F004         	movff	_color+7,___xxtofl@val+1
  5418   001412  6A05               	clrf	(___xxtofl@val+2)^0,c
  5419   001414  6A06               	clrf	(___xxtofl@val+3)^0,c
  5420   001416  0E00               	movlw	0
  5421   001418  ECBC  F006         	call	___xxtofl
  5422   00141C  C003  F015         	movff	?___xxtofl,___fldiv@a
  5423   001420  C004  F016         	movff	?___xxtofl+1,___fldiv@a+1
  5424   001424  C005  F017         	movff	?___xxtofl+2,___fldiv@a+2
  5425   001428  C006  F018         	movff	?___xxtofl+3,___fldiv@a+3
  5426   00142C  EC82  F003         	call	___fldiv	;wreg free
  5427   001430  C011  F04B         	movff	?___fldiv,_color+8
  5428   001434  C012  F04C         	movff	?___fldiv+1,_color+9
  5429   001438  C013  F04D         	movff	?___fldiv+2,_color+10
  5430   00143C  C014  F04E         	movff	?___fldiv+3,_color+11
  5431                           
  5432                           ;color.c: 120:     color.B_norm = (float)color.B / (float)color.C;
  5433   001440  C045  F003         	movff	_color+2,___xxtofl@val
  5434   001444  C046  F004         	movff	_color+3,___xxtofl@val+1
  5435   001448  6A05               	clrf	(___xxtofl@val+2)^0,c
  5436   00144A  6A06               	clrf	(___xxtofl@val+3)^0,c
  5437   00144C  0E00               	movlw	0
  5438   00144E  ECBC  F006         	call	___xxtofl
  5439   001452  C003  F011         	movff	?___xxtofl,___fldiv@b
  5440   001456  C004  F012         	movff	?___xxtofl+1,___fldiv@b+1
  5441   00145A  C005  F013         	movff	?___xxtofl+2,___fldiv@b+2
  5442   00145E  C006  F014         	movff	?___xxtofl+3,___fldiv@b+3
  5443   001462  C049  F003         	movff	_color+6,___xxtofl@val
  5444   001466  C04A  F004         	movff	_color+7,___xxtofl@val+1
  5445   00146A  6A05               	clrf	(___xxtofl@val+2)^0,c
  5446   00146C  6A06               	clrf	(___xxtofl@val+3)^0,c
  5447   00146E  0E00               	movlw	0
  5448   001470  ECBC  F006         	call	___xxtofl
  5449   001474  C003  F015         	movff	?___xxtofl,___fldiv@a
  5450   001478  C004  F016         	movff	?___xxtofl+1,___fldiv@a+1
  5451   00147C  C005  F017         	movff	?___xxtofl+2,___fldiv@a+2
  5452   001480  C006  F018         	movff	?___xxtofl+3,___fldiv@a+3
  5453   001484  EC82  F003         	call	___fldiv	;wreg free
  5454   001488  C011  F04F         	movff	?___fldiv,_color+12
  5455   00148C  C012  F050         	movff	?___fldiv+1,_color+13
  5456   001490  C013  F051         	movff	?___fldiv+2,_color+14
  5457   001494  C014  F052         	movff	?___fldiv+3,_color+15
  5458                           
  5459                           ;color.c: 121:     color.G_norm = (float)color.G / (float)color.C;
  5460   001498  C047  F003         	movff	_color+4,___xxtofl@val
  5461   00149C  C048  F004         	movff	_color+5,___xxtofl@val+1
  5462   0014A0  6A05               	clrf	(___xxtofl@val+2)^0,c
  5463   0014A2  6A06               	clrf	(___xxtofl@val+3)^0,c
  5464   0014A4  0E00               	movlw	0
  5465   0014A6  ECBC  F006         	call	___xxtofl
  5466   0014AA  C003  F011         	movff	?___xxtofl,___fldiv@b
  5467   0014AE  C004  F012         	movff	?___xxtofl+1,___fldiv@b+1
  5468   0014B2  C005  F013         	movff	?___xxtofl+2,___fldiv@b+2
  5469   0014B6  C006  F014         	movff	?___xxtofl+3,___fldiv@b+3
  5470   0014BA  C049  F003         	movff	_color+6,___xxtofl@val
  5471   0014BE  C04A  F004         	movff	_color+7,___xxtofl@val+1
  5472   0014C2  6A05               	clrf	(___xxtofl@val+2)^0,c
  5473   0014C4  6A06               	clrf	(___xxtofl@val+3)^0,c
  5474   0014C6  0E00               	movlw	0
  5475   0014C8  ECBC  F006         	call	___xxtofl
  5476   0014CC  C003  F015         	movff	?___xxtofl,___fldiv@a
  5477   0014D0  C004  F016         	movff	?___xxtofl+1,___fldiv@a+1
  5478   0014D4  C005  F017         	movff	?___xxtofl+2,___fldiv@a+2
  5479   0014D8  C006  F018         	movff	?___xxtofl+3,___fldiv@a+3
  5480   0014DC  EC82  F003         	call	___fldiv	;wreg free
  5481   0014E0  C011  F053         	movff	?___fldiv,_color+16
  5482   0014E4  C012  F054         	movff	?___fldiv+1,_color+17
  5483   0014E8  C013  F055         	movff	?___fldiv+2,_color+18
  5484   0014EC  C014  F056         	movff	?___fldiv+3,_color+19
  5485   0014F0  0012               	return		;funcret
  5486   0014F2                     __end_of_READcolor:
  5487                           	callstack 0
  5488                           
  5489 ;; *************** function _color_read_Red *****************
  5490 ;; Defined at:
  5491 ;;		line 39 in file "color.c"
  5492 ;; Parameters:    Size  Location     Type
  5493 ;;		None
  5494 ;; Auto vars:     Size  Location     Type
  5495 ;;  tmp             2   11[COMRAM] unsigned int 
  5496 ;; Return value:  Size  Location     Type
  5497 ;;                  2    6[COMRAM] unsigned int 
  5498 ;; Registers used:
  5499 ;;		wreg, status,2, status,0, cstack
  5500 ;; Tracked objects:
  5501 ;;		On entry : 0/0
  5502 ;;		On exit  : 0/0
  5503 ;;		Unchanged: 0/0
  5504 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5505 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5506 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5507 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5508 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5509 ;;Total ram usage:        7 bytes
  5510 ;; Hardware stack levels used: 1
  5511 ;; Hardware stack levels required when called: 3
  5512 ;; This function calls:
  5513 ;;		_I2C_2_Master_Read
  5514 ;;		_I2C_2_Master_RepStart
  5515 ;;		_I2C_2_Master_Start
  5516 ;;		_I2C_2_Master_Stop
  5517 ;;		_I2C_2_Master_Write
  5518 ;; This function is called by:
  5519 ;;		_READcolor
  5520 ;; This function uses a non-reentrant model
  5521 ;;
  5522                           
  5523                           	psect	text33
  5524   001EA0                     __ptext33:
  5525                           	callstack 0
  5526   001EA0                     _color_read_Red:
  5527                           	callstack 25
  5528   001EA0                     
  5529                           ;color.c: 41:  unsigned int tmp;;color.c: 42:  I2C_2_Master_Start();
  5530   001EA0  EC62  F011         	call	_I2C_2_Master_Start	;wreg free
  5531                           
  5532                           ;color.c: 43:  I2C_2_Master_Write(0x52 | 0x00);
  5533   001EA4  0E52               	movlw	82
  5534   001EA6  EC57  F011         	call	_I2C_2_Master_Write
  5535                           
  5536                           ;color.c: 45:  I2C_2_Master_Write(0xA0 | 0x16);
  5537   001EAA  0EB6               	movlw	182
  5538   001EAC  EC57  F011         	call	_I2C_2_Master_Write
  5539                           
  5540                           ;color.c: 46:  I2C_2_Master_RepStart();
  5541   001EB0  EC67  F011         	call	_I2C_2_Master_RepStart	;wreg free
  5542                           
  5543                           ;color.c: 47:  I2C_2_Master_Write(0x52 | 0x01);
  5544   001EB4  0E53               	movlw	83
  5545   001EB6  EC57  F011         	call	_I2C_2_Master_Write
  5546                           
  5547                           ;color.c: 48:  tmp=I2C_2_Master_Read(1);
  5548   001EBA  0E01               	movlw	1
  5549   001EBC  EC37  F010         	call	_I2C_2_Master_Read
  5550   001EC0  6E09               	movwf	??_color_read_Red^0,c
  5551   001EC2  5009               	movf	??_color_read_Red^0,w,c
  5552   001EC4  6E0C               	movwf	color_read_Red@tmp^0,c
  5553   001EC6  6A0D               	clrf	(color_read_Red@tmp+1)^0,c
  5554                           
  5555                           ;color.c: 49:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  5556   001EC8  0E00               	movlw	0
  5557   001ECA  EC37  F010         	call	_I2C_2_Master_Read
  5558   001ECE  6E09               	movwf	??_color_read_Red^0,c
  5559   001ED0  5009               	movf	??_color_read_Red^0,w,c
  5560   001ED2  6E0B               	movwf	(??_color_read_Red+2)^0,c
  5561   001ED4  6A0A               	clrf	(??_color_read_Red+1)^0,c
  5562   001ED6  500C               	movf	color_read_Red@tmp^0,w,c
  5563   001ED8  100A               	iorwf	(??_color_read_Red+1)^0,w,c
  5564   001EDA  6E0C               	movwf	color_read_Red@tmp^0,c
  5565   001EDC  500D               	movf	(color_read_Red@tmp+1)^0,w,c
  5566   001EDE  100B               	iorwf	(??_color_read_Red+2)^0,w,c
  5567   001EE0  6E0D               	movwf	(color_read_Red@tmp+1)^0,c
  5568                           
  5569                           ;color.c: 50:  I2C_2_Master_Stop();
  5570   001EE2  EC5D  F011         	call	_I2C_2_Master_Stop	;wreg free
  5571   001EE6                     
  5572                           ;color.c: 51:  return tmp;
  5573   001EE6  C00C  F007         	movff	color_read_Red@tmp,?_color_read_Red
  5574   001EEA  C00D  F008         	movff	color_read_Red@tmp+1,?_color_read_Red+1
  5575   001EEE  0012               	return		;funcret
  5576   001EF0                     __end_of_color_read_Red:
  5577                           	callstack 0
  5578                           
  5579 ;; *************** function _color_read_Green *****************
  5580 ;; Defined at:
  5581 ;;		line 75 in file "color.c"
  5582 ;; Parameters:    Size  Location     Type
  5583 ;;		None
  5584 ;; Auto vars:     Size  Location     Type
  5585 ;;  tmp             2   11[COMRAM] unsigned int 
  5586 ;; Return value:  Size  Location     Type
  5587 ;;                  2    6[COMRAM] unsigned int 
  5588 ;; Registers used:
  5589 ;;		wreg, status,2, status,0, cstack
  5590 ;; Tracked objects:
  5591 ;;		On entry : 0/0
  5592 ;;		On exit  : 0/0
  5593 ;;		Unchanged: 0/0
  5594 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5595 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5596 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5597 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5598 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5599 ;;Total ram usage:        7 bytes
  5600 ;; Hardware stack levels used: 1
  5601 ;; Hardware stack levels required when called: 3
  5602 ;; This function calls:
  5603 ;;		_I2C_2_Master_Read
  5604 ;;		_I2C_2_Master_RepStart
  5605 ;;		_I2C_2_Master_Start
  5606 ;;		_I2C_2_Master_Stop
  5607 ;;		_I2C_2_Master_Write
  5608 ;; This function is called by:
  5609 ;;		_READcolor
  5610 ;; This function uses a non-reentrant model
  5611 ;;
  5612                           
  5613                           	psect	text34
  5614   001EF0                     __ptext34:
  5615                           	callstack 0
  5616   001EF0                     _color_read_Green:
  5617                           	callstack 25
  5618   001EF0                     
  5619                           ;color.c: 77:  unsigned int tmp;;color.c: 78:  I2C_2_Master_Start();
  5620   001EF0  EC62  F011         	call	_I2C_2_Master_Start	;wreg free
  5621                           
  5622                           ;color.c: 79:  I2C_2_Master_Write(0x52 | 0x00);
  5623   001EF4  0E52               	movlw	82
  5624   001EF6  EC57  F011         	call	_I2C_2_Master_Write
  5625                           
  5626                           ;color.c: 81:  I2C_2_Master_Write(0xA0 | 0x18);
  5627   001EFA  0EB8               	movlw	184
  5628   001EFC  EC57  F011         	call	_I2C_2_Master_Write
  5629                           
  5630                           ;color.c: 82:  I2C_2_Master_RepStart();
  5631   001F00  EC67  F011         	call	_I2C_2_Master_RepStart	;wreg free
  5632                           
  5633                           ;color.c: 83:  I2C_2_Master_Write(0x52 | 0x01);
  5634   001F04  0E53               	movlw	83
  5635   001F06  EC57  F011         	call	_I2C_2_Master_Write
  5636                           
  5637                           ;color.c: 84:  tmp=I2C_2_Master_Read(1);
  5638   001F0A  0E01               	movlw	1
  5639   001F0C  EC37  F010         	call	_I2C_2_Master_Read
  5640   001F10  6E09               	movwf	??_color_read_Green^0,c
  5641   001F12  5009               	movf	??_color_read_Green^0,w,c
  5642   001F14  6E0C               	movwf	color_read_Green@tmp^0,c
  5643   001F16  6A0D               	clrf	(color_read_Green@tmp+1)^0,c
  5644                           
  5645                           ;color.c: 85:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  5646   001F18  0E00               	movlw	0
  5647   001F1A  EC37  F010         	call	_I2C_2_Master_Read
  5648   001F1E  6E09               	movwf	??_color_read_Green^0,c
  5649   001F20  5009               	movf	??_color_read_Green^0,w,c
  5650   001F22  6E0B               	movwf	(??_color_read_Green+2)^0,c
  5651   001F24  6A0A               	clrf	(??_color_read_Green+1)^0,c
  5652   001F26  500C               	movf	color_read_Green@tmp^0,w,c
  5653   001F28  100A               	iorwf	(??_color_read_Green+1)^0,w,c
  5654   001F2A  6E0C               	movwf	color_read_Green@tmp^0,c
  5655   001F2C  500D               	movf	(color_read_Green@tmp+1)^0,w,c
  5656   001F2E  100B               	iorwf	(??_color_read_Green+2)^0,w,c
  5657   001F30  6E0D               	movwf	(color_read_Green@tmp+1)^0,c
  5658                           
  5659                           ;color.c: 86:  I2C_2_Master_Stop();
  5660   001F32  EC5D  F011         	call	_I2C_2_Master_Stop	;wreg free
  5661   001F36                     
  5662                           ;color.c: 87:  return tmp;
  5663   001F36  C00C  F007         	movff	color_read_Green@tmp,?_color_read_Green
  5664   001F3A  C00D  F008         	movff	color_read_Green@tmp+1,?_color_read_Green+1
  5665   001F3E  0012               	return		;funcret
  5666   001F40                     __end_of_color_read_Green:
  5667                           	callstack 0
  5668                           
  5669 ;; *************** function _color_read_Clear *****************
  5670 ;; Defined at:
  5671 ;;		line 93 in file "color.c"
  5672 ;; Parameters:    Size  Location     Type
  5673 ;;		None
  5674 ;; Auto vars:     Size  Location     Type
  5675 ;;  tmp             2   11[COMRAM] unsigned int 
  5676 ;; Return value:  Size  Location     Type
  5677 ;;                  2    6[COMRAM] unsigned int 
  5678 ;; Registers used:
  5679 ;;		wreg, status,2, status,0, cstack
  5680 ;; Tracked objects:
  5681 ;;		On entry : 0/0
  5682 ;;		On exit  : 0/0
  5683 ;;		Unchanged: 0/0
  5684 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5685 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5686 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5687 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5688 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5689 ;;Total ram usage:        7 bytes
  5690 ;; Hardware stack levels used: 1
  5691 ;; Hardware stack levels required when called: 3
  5692 ;; This function calls:
  5693 ;;		_I2C_2_Master_Read
  5694 ;;		_I2C_2_Master_RepStart
  5695 ;;		_I2C_2_Master_Start
  5696 ;;		_I2C_2_Master_Stop
  5697 ;;		_I2C_2_Master_Write
  5698 ;; This function is called by:
  5699 ;;		_READcolor
  5700 ;; This function uses a non-reentrant model
  5701 ;;
  5702                           
  5703                           	psect	text35
  5704   001F40                     __ptext35:
  5705                           	callstack 0
  5706   001F40                     _color_read_Clear:
  5707                           	callstack 25
  5708   001F40                     
  5709                           ;color.c: 95:  unsigned int tmp;;color.c: 96:  I2C_2_Master_Start();
  5710   001F40  EC62  F011         	call	_I2C_2_Master_Start	;wreg free
  5711                           
  5712                           ;color.c: 97:  I2C_2_Master_Write(0x52 | 0x00);
  5713   001F44  0E52               	movlw	82
  5714   001F46  EC57  F011         	call	_I2C_2_Master_Write
  5715                           
  5716                           ;color.c: 99:  I2C_2_Master_Write(0xA0 | 0x14);
  5717   001F4A  0EB4               	movlw	180
  5718   001F4C  EC57  F011         	call	_I2C_2_Master_Write
  5719                           
  5720                           ;color.c: 100:  I2C_2_Master_RepStart();
  5721   001F50  EC67  F011         	call	_I2C_2_Master_RepStart	;wreg free
  5722                           
  5723                           ;color.c: 101:  I2C_2_Master_Write(0x52 | 0x01);
  5724   001F54  0E53               	movlw	83
  5725   001F56  EC57  F011         	call	_I2C_2_Master_Write
  5726                           
  5727                           ;color.c: 102:  tmp=I2C_2_Master_Read(1);
  5728   001F5A  0E01               	movlw	1
  5729   001F5C  EC37  F010         	call	_I2C_2_Master_Read
  5730   001F60  6E09               	movwf	??_color_read_Clear^0,c
  5731   001F62  5009               	movf	??_color_read_Clear^0,w,c
  5732   001F64  6E0C               	movwf	color_read_Clear@tmp^0,c
  5733   001F66  6A0D               	clrf	(color_read_Clear@tmp+1)^0,c
  5734                           
  5735                           ;color.c: 103:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  5736   001F68  0E00               	movlw	0
  5737   001F6A  EC37  F010         	call	_I2C_2_Master_Read
  5738   001F6E  6E09               	movwf	??_color_read_Clear^0,c
  5739   001F70  5009               	movf	??_color_read_Clear^0,w,c
  5740   001F72  6E0B               	movwf	(??_color_read_Clear+2)^0,c
  5741   001F74  6A0A               	clrf	(??_color_read_Clear+1)^0,c
  5742   001F76  500C               	movf	color_read_Clear@tmp^0,w,c
  5743   001F78  100A               	iorwf	(??_color_read_Clear+1)^0,w,c
  5744   001F7A  6E0C               	movwf	color_read_Clear@tmp^0,c
  5745   001F7C  500D               	movf	(color_read_Clear@tmp+1)^0,w,c
  5746   001F7E  100B               	iorwf	(??_color_read_Clear+2)^0,w,c
  5747   001F80  6E0D               	movwf	(color_read_Clear@tmp+1)^0,c
  5748                           
  5749                           ;color.c: 104:  I2C_2_Master_Stop();
  5750   001F82  EC5D  F011         	call	_I2C_2_Master_Stop	;wreg free
  5751   001F86                     
  5752                           ;color.c: 105:  return tmp;
  5753   001F86  C00C  F007         	movff	color_read_Clear@tmp,?_color_read_Clear
  5754   001F8A  C00D  F008         	movff	color_read_Clear@tmp+1,?_color_read_Clear+1
  5755   001F8E  0012               	return		;funcret
  5756   001F90                     __end_of_color_read_Clear:
  5757                           	callstack 0
  5758                           
  5759 ;; *************** function _color_read_Blue *****************
  5760 ;; Defined at:
  5761 ;;		line 57 in file "color.c"
  5762 ;; Parameters:    Size  Location     Type
  5763 ;;		None
  5764 ;; Auto vars:     Size  Location     Type
  5765 ;;  tmp             2   11[COMRAM] unsigned int 
  5766 ;; Return value:  Size  Location     Type
  5767 ;;                  2    6[COMRAM] unsigned int 
  5768 ;; Registers used:
  5769 ;;		wreg, status,2, status,0, cstack
  5770 ;; Tracked objects:
  5771 ;;		On entry : 0/0
  5772 ;;		On exit  : 0/0
  5773 ;;		Unchanged: 0/0
  5774 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5775 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5776 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5777 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5778 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5779 ;;Total ram usage:        7 bytes
  5780 ;; Hardware stack levels used: 1
  5781 ;; Hardware stack levels required when called: 3
  5782 ;; This function calls:
  5783 ;;		_I2C_2_Master_Read
  5784 ;;		_I2C_2_Master_RepStart
  5785 ;;		_I2C_2_Master_Start
  5786 ;;		_I2C_2_Master_Stop
  5787 ;;		_I2C_2_Master_Write
  5788 ;; This function is called by:
  5789 ;;		_READcolor
  5790 ;; This function uses a non-reentrant model
  5791 ;;
  5792                           
  5793                           	psect	text36
  5794   001F90                     __ptext36:
  5795                           	callstack 0
  5796   001F90                     _color_read_Blue:
  5797                           	callstack 25
  5798   001F90                     
  5799                           ;color.c: 59:  unsigned int tmp;;color.c: 60:  I2C_2_Master_Start();
  5800   001F90  EC62  F011         	call	_I2C_2_Master_Start	;wreg free
  5801                           
  5802                           ;color.c: 61:  I2C_2_Master_Write(0x52 | 0x00);
  5803   001F94  0E52               	movlw	82
  5804   001F96  EC57  F011         	call	_I2C_2_Master_Write
  5805                           
  5806                           ;color.c: 63:  I2C_2_Master_Write(0xA0 | 0x1A);
  5807   001F9A  0EBA               	movlw	186
  5808   001F9C  EC57  F011         	call	_I2C_2_Master_Write
  5809                           
  5810                           ;color.c: 64:  I2C_2_Master_RepStart();
  5811   001FA0  EC67  F011         	call	_I2C_2_Master_RepStart	;wreg free
  5812                           
  5813                           ;color.c: 65:  I2C_2_Master_Write(0x52 | 0x01);
  5814   001FA4  0E53               	movlw	83
  5815   001FA6  EC57  F011         	call	_I2C_2_Master_Write
  5816                           
  5817                           ;color.c: 66:  tmp=I2C_2_Master_Read(1);
  5818   001FAA  0E01               	movlw	1
  5819   001FAC  EC37  F010         	call	_I2C_2_Master_Read
  5820   001FB0  6E09               	movwf	??_color_read_Blue^0,c
  5821   001FB2  5009               	movf	??_color_read_Blue^0,w,c
  5822   001FB4  6E0C               	movwf	color_read_Blue@tmp^0,c
  5823   001FB6  6A0D               	clrf	(color_read_Blue@tmp+1)^0,c
  5824                           
  5825                           ;color.c: 67:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  5826   001FB8  0E00               	movlw	0
  5827   001FBA  EC37  F010         	call	_I2C_2_Master_Read
  5828   001FBE  6E09               	movwf	??_color_read_Blue^0,c
  5829   001FC0  5009               	movf	??_color_read_Blue^0,w,c
  5830   001FC2  6E0B               	movwf	(??_color_read_Blue+2)^0,c
  5831   001FC4  6A0A               	clrf	(??_color_read_Blue+1)^0,c
  5832   001FC6  500C               	movf	color_read_Blue@tmp^0,w,c
  5833   001FC8  100A               	iorwf	(??_color_read_Blue+1)^0,w,c
  5834   001FCA  6E0C               	movwf	color_read_Blue@tmp^0,c
  5835   001FCC  500D               	movf	(color_read_Blue@tmp+1)^0,w,c
  5836   001FCE  100B               	iorwf	(??_color_read_Blue+2)^0,w,c
  5837   001FD0  6E0D               	movwf	(color_read_Blue@tmp+1)^0,c
  5838                           
  5839                           ;color.c: 68:  I2C_2_Master_Stop();
  5840   001FD2  EC5D  F011         	call	_I2C_2_Master_Stop	;wreg free
  5841   001FD6                     
  5842                           ;color.c: 69:  return tmp;
  5843   001FD6  C00C  F007         	movff	color_read_Blue@tmp,?_color_read_Blue
  5844   001FDA  C00D  F008         	movff	color_read_Blue@tmp+1,?_color_read_Blue+1
  5845   001FDE  0012               	return		;funcret
  5846   001FE0                     __end_of_color_read_Blue:
  5847                           	callstack 0
  5848                           
  5849 ;; *************** function _I2C_2_Master_Write *****************
  5850 ;; Defined at:
  5851 ;;		line 63 in file "i2c.c"
  5852 ;; Parameters:    Size  Location     Type
  5853 ;;  data_byte       1    wreg     unsigned char 
  5854 ;; Auto vars:     Size  Location     Type
  5855 ;;  data_byte       1    3[COMRAM] unsigned char 
  5856 ;; Return value:  Size  Location     Type
  5857 ;;                  1    wreg      void 
  5858 ;; Registers used:
  5859 ;;		wreg, status,2, status,0, cstack
  5860 ;; Tracked objects:
  5861 ;;		On entry : 0/0
  5862 ;;		On exit  : 0/0
  5863 ;;		Unchanged: 0/0
  5864 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5865 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5866 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5867 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5868 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5869 ;;Total ram usage:        1 bytes
  5870 ;; Hardware stack levels used: 1
  5871 ;; Hardware stack levels required when called: 2
  5872 ;; This function calls:
  5873 ;;		_I2C_2_Master_Idle
  5874 ;; This function is called by:
  5875 ;;		_color_writetoaddr
  5876 ;;		_color_read_Red
  5877 ;;		_color_read_Blue
  5878 ;;		_color_read_Green
  5879 ;;		_color_read_Clear
  5880 ;; This function uses a non-reentrant model
  5881 ;;
  5882                           
  5883                           	psect	text37
  5884   0022AE                     __ptext37:
  5885                           	callstack 0
  5886   0022AE                     _I2C_2_Master_Write:
  5887                           	callstack 25
  5888                           
  5889                           ;incstack = 0
  5890                           ;I2C_2_Master_Write@data_byte stored from wreg
  5891   0022AE  6E04               	movwf	I2C_2_Master_Write@data_byte^0,c
  5892   0022B0                     
  5893                           ;i2c.c: 63: void I2C_2_Master_Write(unsigned char data_byte);i2c.c: 64: {;i2c.c: 65:   I
      +                          2C_2_Master_Idle();
  5894   0022B0  ECC7  F010         	call	_I2C_2_Master_Idle	;wreg free
  5895   0022B4                     
  5896                           ;i2c.c: 66:   SSP2BUF = data_byte;
  5897   0022B4  C004  FED5         	movff	I2C_2_Master_Write@data_byte,3797	;volatile
  5898   0022B8  0012               	return		;funcret
  5899   0022BA                     __end_of_I2C_2_Master_Write:
  5900                           	callstack 0
  5901                           
  5902 ;; *************** function _I2C_2_Master_Stop *****************
  5903 ;; Defined at:
  5904 ;;		line 54 in file "i2c.c"
  5905 ;; Parameters:    Size  Location     Type
  5906 ;;		None
  5907 ;; Auto vars:     Size  Location     Type
  5908 ;;		None
  5909 ;; Return value:  Size  Location     Type
  5910 ;;                  1    wreg      void 
  5911 ;; Registers used:
  5912 ;;		wreg, status,2, status,0, cstack
  5913 ;; Tracked objects:
  5914 ;;		On entry : 0/0
  5915 ;;		On exit  : 0/0
  5916 ;;		Unchanged: 0/0
  5917 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5918 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5919 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5920 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5921 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5922 ;;Total ram usage:        0 bytes
  5923 ;; Hardware stack levels used: 1
  5924 ;; Hardware stack levels required when called: 2
  5925 ;; This function calls:
  5926 ;;		_I2C_2_Master_Idle
  5927 ;; This function is called by:
  5928 ;;		_color_writetoaddr
  5929 ;;		_color_read_Red
  5930 ;;		_color_read_Blue
  5931 ;;		_color_read_Green
  5932 ;;		_color_read_Clear
  5933 ;; This function uses a non-reentrant model
  5934 ;;
  5935                           
  5936                           	psect	text38
  5937   0022BA                     __ptext38:
  5938                           	callstack 0
  5939   0022BA                     _I2C_2_Master_Stop:
  5940                           	callstack 25
  5941   0022BA                     
  5942                           ;i2c.c: 56:   I2C_2_Master_Idle();
  5943   0022BA  ECC7  F010         	call	_I2C_2_Master_Idle	;wreg free
  5944   0022BE                     
  5945                           ;i2c.c: 57:   SSP2CON2bits.PEN = 1;
  5946   0022BE  010E               	movlb	14	; () banked
  5947   0022C0  85DA               	bsf	218,2,b	;volatile
  5948   0022C2                     
  5949                           ; BSR set to: 14
  5950   0022C2  0012               	return		;funcret
  5951   0022C4                     __end_of_I2C_2_Master_Stop:
  5952                           	callstack 0
  5953                           
  5954 ;; *************** function _I2C_2_Master_Start *****************
  5955 ;; Defined at:
  5956 ;;		line 36 in file "i2c.c"
  5957 ;; Parameters:    Size  Location     Type
  5958 ;;		None
  5959 ;; Auto vars:     Size  Location     Type
  5960 ;;		None
  5961 ;; Return value:  Size  Location     Type
  5962 ;;                  1    wreg      void 
  5963 ;; Registers used:
  5964 ;;		wreg, status,2, status,0, cstack
  5965 ;; Tracked objects:
  5966 ;;		On entry : 0/0
  5967 ;;		On exit  : 0/0
  5968 ;;		Unchanged: 0/0
  5969 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5970 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5971 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5972 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5973 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5974 ;;Total ram usage:        0 bytes
  5975 ;; Hardware stack levels used: 1
  5976 ;; Hardware stack levels required when called: 2
  5977 ;; This function calls:
  5978 ;;		_I2C_2_Master_Idle
  5979 ;; This function is called by:
  5980 ;;		_color_writetoaddr
  5981 ;;		_color_read_Red
  5982 ;;		_color_read_Blue
  5983 ;;		_color_read_Green
  5984 ;;		_color_read_Clear
  5985 ;; This function uses a non-reentrant model
  5986 ;;
  5987                           
  5988                           	psect	text39
  5989   0022C4                     __ptext39:
  5990                           	callstack 0
  5991   0022C4                     _I2C_2_Master_Start:
  5992                           	callstack 25
  5993   0022C4                     
  5994                           ;i2c.c: 38:   I2C_2_Master_Idle();
  5995   0022C4  ECC7  F010         	call	_I2C_2_Master_Idle	;wreg free
  5996   0022C8                     
  5997                           ;i2c.c: 39:   SSP2CON2bits.SEN = 1;
  5998   0022C8  010E               	movlb	14	; () banked
  5999   0022CA  81DA               	bsf	218,0,b	;volatile
  6000   0022CC                     
  6001                           ; BSR set to: 14
  6002   0022CC  0012               	return		;funcret
  6003   0022CE                     __end_of_I2C_2_Master_Start:
  6004                           	callstack 0
  6005                           
  6006 ;; *************** function _I2C_2_Master_RepStart *****************
  6007 ;; Defined at:
  6008 ;;		line 45 in file "i2c.c"
  6009 ;; Parameters:    Size  Location     Type
  6010 ;;		None
  6011 ;; Auto vars:     Size  Location     Type
  6012 ;;		None
  6013 ;; Return value:  Size  Location     Type
  6014 ;;                  1    wreg      void 
  6015 ;; Registers used:
  6016 ;;		wreg, status,2, status,0, cstack
  6017 ;; Tracked objects:
  6018 ;;		On entry : 0/0
  6019 ;;		On exit  : 0/0
  6020 ;;		Unchanged: 0/0
  6021 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6022 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6023 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6024 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6025 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6026 ;;Total ram usage:        0 bytes
  6027 ;; Hardware stack levels used: 1
  6028 ;; Hardware stack levels required when called: 2
  6029 ;; This function calls:
  6030 ;;		_I2C_2_Master_Idle
  6031 ;; This function is called by:
  6032 ;;		_color_read_Red
  6033 ;;		_color_read_Blue
  6034 ;;		_color_read_Green
  6035 ;;		_color_read_Clear
  6036 ;; This function uses a non-reentrant model
  6037 ;;
  6038                           
  6039                           	psect	text40
  6040   0022CE                     __ptext40:
  6041                           	callstack 0
  6042   0022CE                     _I2C_2_Master_RepStart:
  6043                           	callstack 25
  6044   0022CE                     
  6045                           ;i2c.c: 47:   I2C_2_Master_Idle();
  6046   0022CE  ECC7  F010         	call	_I2C_2_Master_Idle	;wreg free
  6047   0022D2                     
  6048                           ;i2c.c: 48:   SSP2CON2bits.RSEN = 1;
  6049   0022D2  010E               	movlb	14	; () banked
  6050   0022D4  83DA               	bsf	218,1,b	;volatile
  6051   0022D6                     
  6052                           ; BSR set to: 14
  6053   0022D6  0012               	return		;funcret
  6054   0022D8                     __end_of_I2C_2_Master_RepStart:
  6055                           	callstack 0
  6056                           
  6057 ;; *************** function _I2C_2_Master_Read *****************
  6058 ;; Defined at:
  6059 ;;		line 72 in file "i2c.c"
  6060 ;; Parameters:    Size  Location     Type
  6061 ;;  ack             1    wreg     unsigned char 
  6062 ;; Auto vars:     Size  Location     Type
  6063 ;;  ack             1    4[COMRAM] unsigned char 
  6064 ;;  tmp             1    5[COMRAM] unsigned char 
  6065 ;; Return value:  Size  Location     Type
  6066 ;;                  1    wreg      unsigned char 
  6067 ;; Registers used:
  6068 ;;		wreg, status,2, status,0, cstack
  6069 ;; Tracked objects:
  6070 ;;		On entry : 0/0
  6071 ;;		On exit  : 0/0
  6072 ;;		Unchanged: 0/0
  6073 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6074 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6075 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6076 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6077 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6078 ;;Total ram usage:        3 bytes
  6079 ;; Hardware stack levels used: 1
  6080 ;; Hardware stack levels required when called: 2
  6081 ;; This function calls:
  6082 ;;		_I2C_2_Master_Idle
  6083 ;; This function is called by:
  6084 ;;		_color_read_Red
  6085 ;;		_color_read_Blue
  6086 ;;		_color_read_Green
  6087 ;;		_color_read_Clear
  6088 ;; This function uses a non-reentrant model
  6089 ;;
  6090                           
  6091                           	psect	text41
  6092   00206E                     __ptext41:
  6093                           	callstack 0
  6094   00206E                     _I2C_2_Master_Read:
  6095                           	callstack 25
  6096                           
  6097                           ; BSR set to: 14
  6098                           ;incstack = 0
  6099                           ;I2C_2_Master_Read@ack stored from wreg
  6100   00206E  6E05               	movwf	I2C_2_Master_Read@ack^0,c
  6101   002070                     
  6102                           ;i2c.c: 72: unsigned char I2C_2_Master_Read(unsigned char ack);i2c.c: 73: {;i2c.c: 74:  
      +                           unsigned char tmp;;i2c.c: 75:   I2C_2_Master_Idle();
  6103   002070  ECC7  F010         	call	_I2C_2_Master_Idle	;wreg free
  6104   002074                     
  6105                           ;i2c.c: 76:   SSP2CON2bits.RCEN = 1;
  6106   002074  010E               	movlb	14	; () banked
  6107   002076  87DA               	bsf	218,3,b	;volatile
  6108                           
  6109                           ;i2c.c: 77:   I2C_2_Master_Idle();
  6110   002078  ECC7  F010         	call	_I2C_2_Master_Idle	;wreg free
  6111   00207C                     
  6112                           ;i2c.c: 78:   tmp = SSP2BUF;
  6113   00207C  CED5 F006          	movff	3797,I2C_2_Master_Read@tmp	;volatile
  6114                           
  6115                           ;i2c.c: 79:   I2C_2_Master_Idle();
  6116   002080  ECC7  F010         	call	_I2C_2_Master_Idle	;wreg free
  6117   002084                     
  6118                           ;i2c.c: 80:   SSP2CON2bits.ACKDT = !ack;
  6119   002084  5005               	movf	I2C_2_Master_Read@ack^0,w,c
  6120   002086  B4D8               	btfsc	status,2,c
  6121   002088  EF48  F010         	goto	u1531
  6122   00208C  EF4C  F010         	goto	u1530
  6123   002090                     u1531:
  6124   002090  6A04               	clrf	??_I2C_2_Master_Read^0,c
  6125   002092  2A04               	incf	??_I2C_2_Master_Read^0,f,c
  6126   002094  EF4D  F010         	goto	u1548
  6127   002098                     u1530:
  6128   002098  6A04               	clrf	??_I2C_2_Master_Read^0,c
  6129   00209A                     u1548:
  6130   00209A  3A04               	swapf	??_I2C_2_Master_Read^0,f,c
  6131   00209C  4604               	rlncf	??_I2C_2_Master_Read^0,f,c
  6132   00209E  010E               	movlb	14	; () banked
  6133   0020A0  51DA               	movf	218,w,b	;volatile
  6134   0020A2  1804               	xorwf	??_I2C_2_Master_Read^0,w,c
  6135   0020A4  0BDF               	andlw	-33
  6136   0020A6  1804               	xorwf	??_I2C_2_Master_Read^0,w,c
  6137   0020A8  6FDA               	movwf	218,b	;volatile
  6138   0020AA                     
  6139                           ; BSR set to: 14
  6140                           ;i2c.c: 81:   SSP2CON2bits.ACKEN = 1;
  6141   0020AA  89DA               	bsf	218,4,b	;volatile
  6142   0020AC                     
  6143                           ; BSR set to: 14
  6144                           ;i2c.c: 82:   return tmp;
  6145   0020AC  5006               	movf	I2C_2_Master_Read@tmp^0,w,c
  6146   0020AE                     
  6147                           ; BSR set to: 14
  6148   0020AE  0012               	return		;funcret
  6149   0020B0                     __end_of_I2C_2_Master_Read:
  6150                           	callstack 0
  6151                           
  6152 ;; *************** function _I2C_2_Master_Idle *****************
  6153 ;; Defined at:
  6154 ;;		line 28 in file "i2c.c"
  6155 ;; Parameters:    Size  Location     Type
  6156 ;;		None
  6157 ;; Auto vars:     Size  Location     Type
  6158 ;;		None
  6159 ;; Return value:  Size  Location     Type
  6160 ;;                  1    wreg      void 
  6161 ;; Registers used:
  6162 ;;		wreg, status,2, status,0
  6163 ;; Tracked objects:
  6164 ;;		On entry : 0/0
  6165 ;;		On exit  : 0/0
  6166 ;;		Unchanged: 0/0
  6167 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6168 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6169 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6170 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6171 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6172 ;;Total ram usage:        1 bytes
  6173 ;; Hardware stack levels used: 1
  6174 ;; Hardware stack levels required when called: 1
  6175 ;; This function calls:
  6176 ;;		Nothing
  6177 ;; This function is called by:
  6178 ;;		_I2C_2_Master_Start
  6179 ;;		_I2C_2_Master_RepStart
  6180 ;;		_I2C_2_Master_Stop
  6181 ;;		_I2C_2_Master_Write
  6182 ;;		_I2C_2_Master_Read
  6183 ;; This function uses a non-reentrant model
  6184 ;;
  6185                           
  6186                           	psect	text42
  6187   00218E                     __ptext42:
  6188                           	callstack 0
  6189   00218E                     _I2C_2_Master_Idle:
  6190                           	callstack 25
  6191   00218E                     l30:
  6192   00218E  010E               	movlb	14	; () banked
  6193   002190  B5D8               	btfsc	216,2,b	;volatile
  6194   002192  EFCD  F010         	goto	u1371
  6195   002196  EFCF  F010         	goto	u1370
  6196   00219A                     u1371:
  6197   00219A  EFC7  F010         	goto	l30
  6198   00219E                     u1370:
  6199   00219E                     
  6200                           ; BSR set to: 14
  6201   00219E  CEDA F003          	movff	3802,??_I2C_2_Master_Idle	;volatile
  6202   0021A2  0E1F               	movlw	31
  6203   0021A4  1603               	andwf	??_I2C_2_Master_Idle^0,f,c
  6204   0021A6  A4D8               	btfss	status,2,c
  6205   0021A8  EFD8  F010         	goto	u1381
  6206   0021AC  EFDA  F010         	goto	u1380
  6207   0021B0                     u1381:
  6208   0021B0  EFC7  F010         	goto	l30
  6209   0021B4                     u1380:
  6210   0021B4                     
  6211                           ; BSR set to: 14
  6212   0021B4  0012               	return		;funcret
  6213   0021B6                     __end_of_I2C_2_Master_Idle:
  6214                           	callstack 0
  6215                           
  6216 ;; *************** function ___xxtofl *****************
  6217 ;; Defined at:
  6218 ;;		line 10 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\xxtofl.c"
  6219 ;; Parameters:    Size  Location     Type
  6220 ;;  sign            1    wreg     unsigned char 
  6221 ;;  val             4    2[COMRAM] long 
  6222 ;; Auto vars:     Size  Location     Type
  6223 ;;  sign            1   10[COMRAM] unsigned char 
  6224 ;;  arg             4   12[COMRAM] unsigned long 
  6225 ;;  exp             1   11[COMRAM] unsigned char 
  6226 ;; Return value:  Size  Location     Type
  6227 ;;                  4    2[COMRAM] unsigned char 
  6228 ;; Registers used:
  6229 ;;		wreg, status,2, status,0
  6230 ;; Tracked objects:
  6231 ;;		On entry : 0/0
  6232 ;;		On exit  : 0/0
  6233 ;;		Unchanged: 0/0
  6234 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6235 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6236 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6237 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6238 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6239 ;;Total ram usage:       14 bytes
  6240 ;; Hardware stack levels used: 1
  6241 ;; Hardware stack levels required when called: 1
  6242 ;; This function calls:
  6243 ;;		Nothing
  6244 ;; This function is called by:
  6245 ;;		_READcolor
  6246 ;; This function uses a non-reentrant model
  6247 ;;
  6248                           
  6249                           	psect	text43
  6250   000D78                     __ptext43:
  6251                           	callstack 0
  6252   000D78                     ___xxtofl:
  6253                           	callstack 27
  6254                           
  6255                           ; BSR set to: 14
  6256                           ;incstack = 0
  6257                           ;___xxtofl@sign stored from wreg
  6258   000D78  6E0B               	movwf	___xxtofl@sign^0,c
  6259   000D7A  500B               	movf	___xxtofl@sign^0,w,c
  6260   000D7C  B4D8               	btfsc	status,2,c
  6261   000D7E  EFC3  F006         	goto	u1921
  6262   000D82  EFC5  F006         	goto	u1920
  6263   000D86                     u1921:
  6264   000D86  EFE7  F006         	goto	l1251
  6265   000D8A                     u1920:
  6266   000D8A  BE06               	btfsc	(___xxtofl@val+3)^0,7,c
  6267   000D8C  EFCC  F006         	goto	u1930
  6268   000D90  EFCA  F006         	goto	u1931
  6269   000D94                     u1931:
  6270   000D94  EFE7  F006         	goto	l1251
  6271   000D98                     u1930:
  6272   000D98  C003  F007         	movff	___xxtofl@val,??___xxtofl
  6273   000D9C  C004  F008         	movff	___xxtofl@val+1,??___xxtofl+1
  6274   000DA0  C005  F009         	movff	___xxtofl@val+2,??___xxtofl+2
  6275   000DA4  C006  F00A         	movff	___xxtofl@val+3,??___xxtofl+3
  6276   000DA8  1E07               	comf	??___xxtofl^0,f,c
  6277   000DAA  1E08               	comf	(??___xxtofl+1)^0,f,c
  6278   000DAC  1E09               	comf	(??___xxtofl+2)^0,f,c
  6279   000DAE  1E0A               	comf	(??___xxtofl+3)^0,f,c
  6280   000DB0  2A07               	incf	??___xxtofl^0,f,c
  6281   000DB2  0E00               	movlw	0
  6282   000DB4  2208               	addwfc	(??___xxtofl+1)^0,f,c
  6283   000DB6  2209               	addwfc	(??___xxtofl+2)^0,f,c
  6284   000DB8  220A               	addwfc	(??___xxtofl+3)^0,f,c
  6285   000DBA  C007  F00D         	movff	??___xxtofl,___xxtofl@arg
  6286   000DBE  C008  F00E         	movff	??___xxtofl+1,___xxtofl@arg+1
  6287   000DC2  C009  F00F         	movff	??___xxtofl+2,___xxtofl@arg+2
  6288   000DC6  C00A  F010         	movff	??___xxtofl+3,___xxtofl@arg+3
  6289   000DCA  EFEF  F006         	goto	l2773
  6290   000DCE                     l1251:
  6291   000DCE  C003  F00D         	movff	___xxtofl@val,___xxtofl@arg
  6292   000DD2  C004  F00E         	movff	___xxtofl@val+1,___xxtofl@arg+1
  6293   000DD6  C005  F00F         	movff	___xxtofl@val+2,___xxtofl@arg+2
  6294   000DDA  C006  F010         	movff	___xxtofl@val+3,___xxtofl@arg+3
  6295   000DDE                     l2773:
  6296   000DDE  5003               	movf	___xxtofl@val^0,w,c
  6297   000DE0  1004               	iorwf	(___xxtofl@val+1)^0,w,c
  6298   000DE2  1005               	iorwf	(___xxtofl@val+2)^0,w,c
  6299   000DE4  1006               	iorwf	(___xxtofl@val+3)^0,w,c
  6300   000DE6  A4D8               	btfss	status,2,c
  6301   000DE8  EFF8  F006         	goto	u1941
  6302   000DEC  EFFA  F006         	goto	u1940
  6303   000DF0                     u1941:
  6304   000DF0  EF04  F007         	goto	l2779
  6305   000DF4                     u1940:
  6306   000DF4  0E00               	movlw	0
  6307   000DF6  6E03               	movwf	?___xxtofl^0,c
  6308   000DF8  0E00               	movlw	0
  6309   000DFA  6E04               	movwf	(?___xxtofl+1)^0,c
  6310   000DFC  0E00               	movlw	0
  6311   000DFE  6E05               	movwf	(?___xxtofl+2)^0,c
  6312   000E00  0E00               	movlw	0
  6313   000E02  6E06               	movwf	(?___xxtofl+3)^0,c
  6314   000E04  EF95  F007         	goto	l1254
  6315   000E08                     l2779:
  6316   000E08  0E96               	movlw	150
  6317   000E0A  6E0C               	movwf	___xxtofl@exp^0,c
  6318   000E0C  EF0E  F007         	goto	l2783
  6319   000E10                     l2781:
  6320   000E10  2A0C               	incf	___xxtofl@exp^0,f,c
  6321   000E12  90D8               	bcf	status,0,c
  6322   000E14  3210               	rrcf	(___xxtofl@arg+3)^0,f,c
  6323   000E16  320F               	rrcf	(___xxtofl@arg+2)^0,f,c
  6324   000E18  320E               	rrcf	(___xxtofl@arg+1)^0,f,c
  6325   000E1A  320D               	rrcf	___xxtofl@arg^0,f,c
  6326   000E1C                     l2783:
  6327   000E1C  0E00               	movlw	0
  6328   000E1E  140D               	andwf	___xxtofl@arg^0,w,c
  6329   000E20  6E07               	movwf	??___xxtofl^0,c
  6330   000E22  0E00               	movlw	0
  6331   000E24  140E               	andwf	(___xxtofl@arg+1)^0,w,c
  6332   000E26  6E08               	movwf	(??___xxtofl+1)^0,c
  6333   000E28  0E00               	movlw	0
  6334   000E2A  140F               	andwf	(___xxtofl@arg+2)^0,w,c
  6335   000E2C  6E09               	movwf	(??___xxtofl+2)^0,c
  6336   000E2E  0EFE               	movlw	254
  6337   000E30  1410               	andwf	(___xxtofl@arg+3)^0,w,c
  6338   000E32  6E0A               	movwf	(??___xxtofl+3)^0,c
  6339   000E34  5007               	movf	??___xxtofl^0,w,c
  6340   000E36  1008               	iorwf	(??___xxtofl+1)^0,w,c
  6341   000E38  1009               	iorwf	(??___xxtofl+2)^0,w,c
  6342   000E3A  100A               	iorwf	(??___xxtofl+3)^0,w,c
  6343   000E3C  A4D8               	btfss	status,2,c
  6344   000E3E  EF23  F007         	goto	u1951
  6345   000E42  EF25  F007         	goto	u1950
  6346   000E46                     u1951:
  6347   000E46  EF08  F007         	goto	l2781
  6348   000E4A                     u1950:
  6349   000E4A  EF33  F007         	goto	l1258
  6350   000E4E                     l2785:
  6351   000E4E  2A0C               	incf	___xxtofl@exp^0,f,c
  6352   000E50  0E01               	movlw	1
  6353   000E52  260D               	addwf	___xxtofl@arg^0,f,c
  6354   000E54  0E00               	movlw	0
  6355   000E56  220E               	addwfc	(___xxtofl@arg+1)^0,f,c
  6356   000E58  220F               	addwfc	(___xxtofl@arg+2)^0,f,c
  6357   000E5A  2210               	addwfc	(___xxtofl@arg+3)^0,f,c
  6358   000E5C  90D8               	bcf	status,0,c
  6359   000E5E  3210               	rrcf	(___xxtofl@arg+3)^0,f,c
  6360   000E60  320F               	rrcf	(___xxtofl@arg+2)^0,f,c
  6361   000E62  320E               	rrcf	(___xxtofl@arg+1)^0,f,c
  6362   000E64  320D               	rrcf	___xxtofl@arg^0,f,c
  6363   000E66                     l1258:
  6364   000E66  0E00               	movlw	0
  6365   000E68  140D               	andwf	___xxtofl@arg^0,w,c
  6366   000E6A  6E07               	movwf	??___xxtofl^0,c
  6367   000E6C  0E00               	movlw	0
  6368   000E6E  140E               	andwf	(___xxtofl@arg+1)^0,w,c
  6369   000E70  6E08               	movwf	(??___xxtofl+1)^0,c
  6370   000E72  0E00               	movlw	0
  6371   000E74  140F               	andwf	(___xxtofl@arg+2)^0,w,c
  6372   000E76  6E09               	movwf	(??___xxtofl+2)^0,c
  6373   000E78  0EFF               	movlw	255
  6374   000E7A  1410               	andwf	(___xxtofl@arg+3)^0,w,c
  6375   000E7C  6E0A               	movwf	(??___xxtofl+3)^0,c
  6376   000E7E  5007               	movf	??___xxtofl^0,w,c
  6377   000E80  1008               	iorwf	(??___xxtofl+1)^0,w,c
  6378   000E82  1009               	iorwf	(??___xxtofl+2)^0,w,c
  6379   000E84  100A               	iorwf	(??___xxtofl+3)^0,w,c
  6380   000E86  A4D8               	btfss	status,2,c
  6381   000E88  EF48  F007         	goto	u1961
  6382   000E8C  EF4A  F007         	goto	u1960
  6383   000E90                     u1961:
  6384   000E90  EF27  F007         	goto	l2785
  6385   000E94                     u1960:
  6386   000E94  EF52  F007         	goto	l2793
  6387   000E98                     l2791:
  6388   000E98  060C               	decf	___xxtofl@exp^0,f,c
  6389   000E9A  90D8               	bcf	status,0,c
  6390   000E9C  360D               	rlcf	___xxtofl@arg^0,f,c
  6391   000E9E  360E               	rlcf	(___xxtofl@arg+1)^0,f,c
  6392   000EA0  360F               	rlcf	(___xxtofl@arg+2)^0,f,c
  6393   000EA2  3610               	rlcf	(___xxtofl@arg+3)^0,f,c
  6394   000EA4                     l2793:
  6395   000EA4  BE0F               	btfsc	(___xxtofl@arg+2)^0,7,c
  6396   000EA6  EF57  F007         	goto	u1971
  6397   000EAA  EF59  F007         	goto	u1970
  6398   000EAE                     u1971:
  6399   000EAE  EF61  F007         	goto	l1265
  6400   000EB2                     u1970:
  6401   000EB2  0E02               	movlw	2
  6402   000EB4  600C               	cpfslt	___xxtofl@exp^0,c
  6403   000EB6  EF5F  F007         	goto	u1981
  6404   000EBA  EF61  F007         	goto	u1980
  6405   000EBE                     u1981:
  6406   000EBE  EF4C  F007         	goto	l2791
  6407   000EC2                     u1980:
  6408   000EC2                     l1265:
  6409   000EC2  B00C               	btfsc	___xxtofl@exp^0,0,c
  6410   000EC4  EF66  F007         	goto	u1991
  6411   000EC8  EF68  F007         	goto	u1990
  6412   000ECC                     u1991:
  6413   000ECC  EF69  F007         	goto	l2799
  6414   000ED0                     u1990:
  6415   000ED0  9E0F               	bcf	(___xxtofl@arg+2)^0,7,c
  6416   000ED2                     l2799:
  6417   000ED2  90D8               	bcf	status,0,c
  6418   000ED4  320C               	rrcf	___xxtofl@exp^0,f,c
  6419   000ED6  C00C  F007         	movff	___xxtofl@exp,??___xxtofl
  6420   000EDA  6A08               	clrf	(??___xxtofl+1)^0,c
  6421   000EDC  6A09               	clrf	(??___xxtofl+2)^0,c
  6422   000EDE  6A0A               	clrf	(??___xxtofl+3)^0,c
  6423   000EE0  C007  F00A         	movff	??___xxtofl,??___xxtofl+3
  6424   000EE4  6A09               	clrf	(??___xxtofl+2)^0,c
  6425   000EE6  6A08               	clrf	(??___xxtofl+1)^0,c
  6426   000EE8  6A07               	clrf	??___xxtofl^0,c
  6427   000EEA  5007               	movf	??___xxtofl^0,w,c
  6428   000EEC  120D               	iorwf	___xxtofl@arg^0,f,c
  6429   000EEE  5008               	movf	(??___xxtofl+1)^0,w,c
  6430   000EF0  120E               	iorwf	(___xxtofl@arg+1)^0,f,c
  6431   000EF2  5009               	movf	(??___xxtofl+2)^0,w,c
  6432   000EF4  120F               	iorwf	(___xxtofl@arg+2)^0,f,c
  6433   000EF6  500A               	movf	(??___xxtofl+3)^0,w,c
  6434   000EF8  1210               	iorwf	(___xxtofl@arg+3)^0,f,c
  6435   000EFA  500B               	movf	___xxtofl@sign^0,w,c
  6436   000EFC  B4D8               	btfsc	status,2,c
  6437   000EFE  EF83  F007         	goto	u2001
  6438   000F02  EF85  F007         	goto	u2000
  6439   000F06                     u2001:
  6440   000F06  EF8D  F007         	goto	l2809
  6441   000F0A                     u2000:
  6442   000F0A  BE06               	btfsc	(___xxtofl@val+3)^0,7,c
  6443   000F0C  EF8C  F007         	goto	u2010
  6444   000F10  EF8A  F007         	goto	u2011
  6445   000F14                     u2011:
  6446   000F14  EF8D  F007         	goto	l2809
  6447   000F18                     u2010:
  6448   000F18  8E10               	bsf	(___xxtofl@arg+3)^0,7,c
  6449   000F1A                     l2809:
  6450   000F1A  C00D  F003         	movff	___xxtofl@arg,?___xxtofl
  6451   000F1E  C00E  F004         	movff	___xxtofl@arg+1,?___xxtofl+1
  6452   000F22  C00F  F005         	movff	___xxtofl@arg+2,?___xxtofl+2
  6453   000F26  C010  F006         	movff	___xxtofl@arg+3,?___xxtofl+3
  6454   000F2A                     l1254:
  6455   000F2A  0012               	return		;funcret
  6456   000F2C                     __end_of___xxtofl:
  6457                           	callstack 0
  6458                           
  6459 ;; *************** function ___fldiv *****************
  6460 ;; Defined at:
  6461 ;;		line 11 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\sprcdiv.c"
  6462 ;; Parameters:    Size  Location     Type
  6463 ;;  b               4   16[COMRAM] unsigned char 
  6464 ;;  a               4   20[COMRAM] unsigned char 
  6465 ;; Auto vars:     Size  Location     Type
  6466 ;;  grs             4   35[COMRAM] unsigned long 
  6467 ;;  rem             4   28[COMRAM] unsigned long 
  6468 ;;  new_exp         2   33[COMRAM] short 
  6469 ;;  aexp            1   40[COMRAM] unsigned char 
  6470 ;;  bexp            1   39[COMRAM] unsigned char 
  6471 ;;  sign            1   32[COMRAM] unsigned char 
  6472 ;; Return value:  Size  Location     Type
  6473 ;;                  4   16[COMRAM] unsigned char 
  6474 ;; Registers used:
  6475 ;;		wreg, status,2, status,0
  6476 ;; Tracked objects:
  6477 ;;		On entry : 0/0
  6478 ;;		On exit  : 0/0
  6479 ;;		Unchanged: 0/0
  6480 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6481 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6482 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6483 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6484 ;;      Totals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6485 ;;Total ram usage:       25 bytes
  6486 ;; Hardware stack levels used: 1
  6487 ;; Hardware stack levels required when called: 1
  6488 ;; This function calls:
  6489 ;;		Nothing
  6490 ;; This function is called by:
  6491 ;;		_READcolor
  6492 ;; This function uses a non-reentrant model
  6493 ;;
  6494                           
  6495                           	psect	text44
  6496   000704                     __ptext44:
  6497                           	callstack 0
  6498   000704                     ___fldiv:
  6499                           	callstack 27
  6500   000704  5014               	movf	(___fldiv@b+3)^0,w,c
  6501   000706  0B80               	andlw	128
  6502   000708  6E21               	movwf	___fldiv@sign^0,c
  6503   00070A  5014               	movf	(___fldiv@b+3)^0,w,c
  6504   00070C  2414               	addwf	(___fldiv@b+3)^0,w,c
  6505   00070E  6E28               	movwf	___fldiv@bexp^0,c
  6506   000710  AE13               	btfss	(___fldiv@b+2)^0,7,c
  6507   000712  EF8D  F003         	goto	u1691
  6508   000716  EF8F  F003         	goto	u1690
  6509   00071A                     u1691:
  6510   00071A  EF90  F003         	goto	l2635
  6511   00071E                     u1690:
  6512   00071E  8028               	bsf	___fldiv@bexp^0,0,c
  6513   000720                     l2635:
  6514   000720  5028               	movf	___fldiv@bexp^0,w,c
  6515   000722  B4D8               	btfsc	status,2,c
  6516   000724  EF96  F003         	goto	u1701
  6517   000728  EF98  F003         	goto	u1700
  6518   00072C                     u1701:
  6519   00072C  EFAD  F003         	goto	l2645
  6520   000730                     u1700:
  6521   000730  2828               	incf	___fldiv@bexp^0,w,c
  6522   000732  A4D8               	btfss	status,2,c
  6523   000734  EF9E  F003         	goto	u1711
  6524   000738  EFA0  F003         	goto	u1710
  6525   00073C                     u1711:
  6526   00073C  EFA8  F003         	goto	l2641
  6527   000740                     u1710:
  6528   000740  0E00               	movlw	0
  6529   000742  6E11               	movwf	___fldiv@b^0,c
  6530   000744  0E00               	movlw	0
  6531   000746  6E12               	movwf	(___fldiv@b+1)^0,c
  6532   000748  0E00               	movlw	0
  6533   00074A  6E13               	movwf	(___fldiv@b+2)^0,c
  6534   00074C  0E00               	movlw	0
  6535   00074E  6E14               	movwf	(___fldiv@b+3)^0,c
  6536   000750                     l2641:
  6537   000750  8E13               	bsf	(___fldiv@b+2)^0,7,c
  6538   000752  0E00               	movlw	0
  6539   000754  6E14               	movwf	(___fldiv@b+3)^0,c
  6540   000756  EFB5  F003         	goto	l2647
  6541   00075A                     l2645:
  6542   00075A  0E00               	movlw	0
  6543   00075C  6E11               	movwf	___fldiv@b^0,c
  6544   00075E  0E00               	movlw	0
  6545   000760  6E12               	movwf	(___fldiv@b+1)^0,c
  6546   000762  0E00               	movlw	0
  6547   000764  6E13               	movwf	(___fldiv@b+2)^0,c
  6548   000766  0E00               	movlw	0
  6549   000768  6E14               	movwf	(___fldiv@b+3)^0,c
  6550   00076A                     l2647:
  6551   00076A  5018               	movf	(___fldiv@a+3)^0,w,c
  6552   00076C  0B80               	andlw	128
  6553   00076E  1A21               	xorwf	___fldiv@sign^0,f,c
  6554   000770  5018               	movf	(___fldiv@a+3)^0,w,c
  6555   000772  2418               	addwf	(___fldiv@a+3)^0,w,c
  6556   000774  6E29               	movwf	___fldiv@aexp^0,c
  6557   000776  AE17               	btfss	(___fldiv@a+2)^0,7,c
  6558   000778  EFC0  F003         	goto	u1721
  6559   00077C  EFC2  F003         	goto	u1720
  6560   000780                     u1721:
  6561   000780  EFC3  F003         	goto	l2655
  6562   000784                     u1720:
  6563   000784  8029               	bsf	___fldiv@aexp^0,0,c
  6564   000786                     l2655:
  6565   000786  5029               	movf	___fldiv@aexp^0,w,c
  6566   000788  B4D8               	btfsc	status,2,c
  6567   00078A  EFC9  F003         	goto	u1731
  6568   00078E  EFCB  F003         	goto	u1730
  6569   000792                     u1731:
  6570   000792  EFE0  F003         	goto	l2665
  6571   000796                     u1730:
  6572   000796  2829               	incf	___fldiv@aexp^0,w,c
  6573   000798  A4D8               	btfss	status,2,c
  6574   00079A  EFD1  F003         	goto	u1741
  6575   00079E  EFD3  F003         	goto	u1740
  6576   0007A2                     u1741:
  6577   0007A2  EFDB  F003         	goto	l2661
  6578   0007A6                     u1740:
  6579   0007A6  0E00               	movlw	0
  6580   0007A8  6E15               	movwf	___fldiv@a^0,c
  6581   0007AA  0E00               	movlw	0
  6582   0007AC  6E16               	movwf	(___fldiv@a+1)^0,c
  6583   0007AE  0E00               	movlw	0
  6584   0007B0  6E17               	movwf	(___fldiv@a+2)^0,c
  6585   0007B2  0E00               	movlw	0
  6586   0007B4  6E18               	movwf	(___fldiv@a+3)^0,c
  6587   0007B6                     l2661:
  6588   0007B6  8E17               	bsf	(___fldiv@a+2)^0,7,c
  6589   0007B8  0E00               	movlw	0
  6590   0007BA  6E18               	movwf	(___fldiv@a+3)^0,c
  6591   0007BC  EFE8  F003         	goto	l2667
  6592   0007C0                     l2665:
  6593   0007C0  0E00               	movlw	0
  6594   0007C2  6E15               	movwf	___fldiv@a^0,c
  6595   0007C4  0E00               	movlw	0
  6596   0007C6  6E16               	movwf	(___fldiv@a+1)^0,c
  6597   0007C8  0E00               	movlw	0
  6598   0007CA  6E17               	movwf	(___fldiv@a+2)^0,c
  6599   0007CC  0E00               	movlw	0
  6600   0007CE  6E18               	movwf	(___fldiv@a+3)^0,c
  6601   0007D0                     l2667:
  6602   0007D0  5015               	movf	___fldiv@a^0,w,c
  6603   0007D2  1016               	iorwf	(___fldiv@a+1)^0,w,c
  6604   0007D4  1017               	iorwf	(___fldiv@a+2)^0,w,c
  6605   0007D6  1018               	iorwf	(___fldiv@a+3)^0,w,c
  6606   0007D8  A4D8               	btfss	status,2,c
  6607   0007DA  EFF1  F003         	goto	u1751
  6608   0007DE  EFF3  F003         	goto	u1750
  6609   0007E2                     u1751:
  6610   0007E2  EF0B  F004         	goto	l2679
  6611   0007E6                     u1750:
  6612   0007E6  0E00               	movlw	0
  6613   0007E8  6E11               	movwf	___fldiv@b^0,c
  6614   0007EA  0E00               	movlw	0
  6615   0007EC  6E12               	movwf	(___fldiv@b+1)^0,c
  6616   0007EE  0E00               	movlw	0
  6617   0007F0  6E13               	movwf	(___fldiv@b+2)^0,c
  6618   0007F2  0E00               	movlw	0
  6619   0007F4  6E14               	movwf	(___fldiv@b+3)^0,c
  6620   0007F6  0E80               	movlw	128
  6621   0007F8  1213               	iorwf	(___fldiv@b+2)^0,f,c
  6622   0007FA  0E7F               	movlw	127
  6623   0007FC  1214               	iorwf	(___fldiv@b+3)^0,f,c
  6624   0007FE                     l2673:
  6625   0007FE  5021               	movf	___fldiv@sign^0,w,c
  6626   000800  1214               	iorwf	(___fldiv@b+3)^0,f,c
  6627   000802  C011  F011         	movff	___fldiv@b,?___fldiv
  6628   000806  C012  F012         	movff	___fldiv@b+1,?___fldiv+1
  6629   00080A  C013  F013         	movff	___fldiv@b+2,?___fldiv+2
  6630   00080E  C014  F014         	movff	___fldiv@b+3,?___fldiv+3
  6631   000812  EF4E  F005         	goto	l1178
  6632   000816                     l2679:
  6633   000816  5028               	movf	___fldiv@bexp^0,w,c
  6634   000818  A4D8               	btfss	status,2,c
  6635   00081A  EF11  F004         	goto	u1761
  6636   00081E  EF13  F004         	goto	u1760
  6637   000822                     u1761:
  6638   000822  EF1D  F004         	goto	l2687
  6639   000826                     u1760:
  6640   000826  0E00               	movlw	0
  6641   000828  6E11               	movwf	?___fldiv^0,c
  6642   00082A  0E00               	movlw	0
  6643   00082C  6E12               	movwf	(?___fldiv+1)^0,c
  6644   00082E  0E00               	movlw	0
  6645   000830  6E13               	movwf	(?___fldiv+2)^0,c
  6646   000832  0E00               	movlw	0
  6647   000834  6E14               	movwf	(?___fldiv+3)^0,c
  6648   000836  EF4E  F005         	goto	l1178
  6649   00083A                     l2687:
  6650   00083A  5029               	movf	___fldiv@aexp^0,w,c
  6651   00083C  C028  F019         	movff	___fldiv@bexp,??___fldiv
  6652   000840  6A1A               	clrf	(??___fldiv+1)^0,c
  6653   000842  5E19               	subwf	??___fldiv^0,f,c
  6654   000844  0E00               	movlw	0
  6655   000846  5A1A               	subwfb	(??___fldiv+1)^0,f,c
  6656   000848  0E7F               	movlw	127
  6657   00084A  2419               	addwf	??___fldiv^0,w,c
  6658   00084C  6E22               	movwf	___fldiv@new_exp^0,c
  6659   00084E  0E00               	movlw	0
  6660   000850  201A               	addwfc	(??___fldiv+1)^0,w,c
  6661   000852  6E23               	movwf	(___fldiv@new_exp+1)^0,c
  6662   000854  C011  F01D         	movff	___fldiv@b,___fldiv@rem
  6663   000858  C012  F01E         	movff	___fldiv@b+1,___fldiv@rem+1
  6664   00085C  C013  F01F         	movff	___fldiv@b+2,___fldiv@rem+2
  6665   000860  C014  F020         	movff	___fldiv@b+3,___fldiv@rem+3
  6666   000864  0E00               	movlw	0
  6667   000866  6E11               	movwf	___fldiv@b^0,c
  6668   000868  0E00               	movlw	0
  6669   00086A  6E12               	movwf	(___fldiv@b+1)^0,c
  6670   00086C  0E00               	movlw	0
  6671   00086E  6E13               	movwf	(___fldiv@b+2)^0,c
  6672   000870  0E00               	movlw	0
  6673   000872  6E14               	movwf	(___fldiv@b+3)^0,c
  6674   000874  0E00               	movlw	0
  6675   000876  6E24               	movwf	___fldiv@grs^0,c
  6676   000878  0E00               	movlw	0
  6677   00087A  6E25               	movwf	(___fldiv@grs+1)^0,c
  6678   00087C  0E00               	movlw	0
  6679   00087E  6E26               	movwf	(___fldiv@grs+2)^0,c
  6680   000880  0E00               	movlw	0
  6681   000882  6E27               	movwf	(___fldiv@grs+3)^0,c
  6682   000884  0E00               	movlw	0
  6683   000886  6E29               	movwf	___fldiv@aexp^0,c
  6684   000888  EF7E  F004         	goto	l1180
  6685   00088C                     l2697:
  6686   00088C  5029               	movf	___fldiv@aexp^0,w,c
  6687   00088E  B4D8               	btfsc	status,2,c
  6688   000890  EF4C  F004         	goto	u1771
  6689   000894  EF4E  F004         	goto	u1770
  6690   000898                     u1771:
  6691   000898  EF65  F004         	goto	l2705
  6692   00089C                     u1770:
  6693   00089C  90D8               	bcf	status,0,c
  6694   00089E  361D               	rlcf	___fldiv@rem^0,f,c
  6695   0008A0  361E               	rlcf	(___fldiv@rem+1)^0,f,c
  6696   0008A2  361F               	rlcf	(___fldiv@rem+2)^0,f,c
  6697   0008A4  3620               	rlcf	(___fldiv@rem+3)^0,f,c
  6698   0008A6  90D8               	bcf	status,0,c
  6699   0008A8  3611               	rlcf	___fldiv@b^0,f,c
  6700   0008AA  3612               	rlcf	(___fldiv@b+1)^0,f,c
  6701   0008AC  3613               	rlcf	(___fldiv@b+2)^0,f,c
  6702   0008AE  3614               	rlcf	(___fldiv@b+3)^0,f,c
  6703   0008B0  AE27               	btfss	(___fldiv@grs+3)^0,7,c
  6704   0008B2  EF5D  F004         	goto	u1781
  6705   0008B6  EF5F  F004         	goto	u1780
  6706   0008BA                     u1781:
  6707   0008BA  EF60  F004         	goto	l1183
  6708   0008BE                     u1780:
  6709   0008BE  8011               	bsf	___fldiv@b^0,0,c
  6710   0008C0                     l1183:
  6711   0008C0  90D8               	bcf	status,0,c
  6712   0008C2  3624               	rlcf	___fldiv@grs^0,f,c
  6713   0008C4  3625               	rlcf	(___fldiv@grs+1)^0,f,c
  6714   0008C6  3626               	rlcf	(___fldiv@grs+2)^0,f,c
  6715   0008C8  3627               	rlcf	(___fldiv@grs+3)^0,f,c
  6716   0008CA                     l2705:
  6717   0008CA  5015               	movf	___fldiv@a^0,w,c
  6718   0008CC  5C1D               	subwf	___fldiv@rem^0,w,c
  6719   0008CE  5016               	movf	(___fldiv@a+1)^0,w,c
  6720   0008D0  581E               	subwfb	(___fldiv@rem+1)^0,w,c
  6721   0008D2  5017               	movf	(___fldiv@a+2)^0,w,c
  6722   0008D4  581F               	subwfb	(___fldiv@rem+2)^0,w,c
  6723   0008D6  5018               	movf	(___fldiv@a+3)^0,w,c
  6724   0008D8  5820               	subwfb	(___fldiv@rem+3)^0,w,c
  6725   0008DA  A0D8               	btfss	status,0,c
  6726   0008DC  EF72  F004         	goto	u1791
  6727   0008E0  EF74  F004         	goto	u1790
  6728   0008E4                     u1791:
  6729   0008E4  EF7D  F004         	goto	l2711
  6730   0008E8                     u1790:
  6731   0008E8  8C27               	bsf	(___fldiv@grs+3)^0,6,c
  6732   0008EA  5015               	movf	___fldiv@a^0,w,c
  6733   0008EC  5E1D               	subwf	___fldiv@rem^0,f,c
  6734   0008EE  5016               	movf	(___fldiv@a+1)^0,w,c
  6735   0008F0  5A1E               	subwfb	(___fldiv@rem+1)^0,f,c
  6736   0008F2  5017               	movf	(___fldiv@a+2)^0,w,c
  6737   0008F4  5A1F               	subwfb	(___fldiv@rem+2)^0,f,c
  6738   0008F6  5018               	movf	(___fldiv@a+3)^0,w,c
  6739   0008F8  5A20               	subwfb	(___fldiv@rem+3)^0,f,c
  6740   0008FA                     l2711:
  6741   0008FA  2A29               	incf	___fldiv@aexp^0,f,c
  6742   0008FC                     l1180:
  6743   0008FC  0E19               	movlw	25
  6744   0008FE  6429               	cpfsgt	___fldiv@aexp^0,c
  6745   000900  EF84  F004         	goto	u1801
  6746   000904  EF86  F004         	goto	u1800
  6747   000908                     u1801:
  6748   000908  EF46  F004         	goto	l2697
  6749   00090C                     u1800:
  6750   00090C  501D               	movf	___fldiv@rem^0,w,c
  6751   00090E  101E               	iorwf	(___fldiv@rem+1)^0,w,c
  6752   000910  101F               	iorwf	(___fldiv@rem+2)^0,w,c
  6753   000912  1020               	iorwf	(___fldiv@rem+3)^0,w,c
  6754   000914  B4D8               	btfsc	status,2,c
  6755   000916  EF8F  F004         	goto	u1811
  6756   00091A  EF91  F004         	goto	u1810
  6757   00091E                     u1811:
  6758   00091E  EFA9  F004         	goto	l2723
  6759   000922                     u1810:
  6760   000922  8024               	bsf	___fldiv@grs^0,0,c
  6761   000924  EFA9  F004         	goto	l2723
  6762   000928                     l2717:
  6763   000928  90D8               	bcf	status,0,c
  6764   00092A  3611               	rlcf	___fldiv@b^0,f,c
  6765   00092C  3612               	rlcf	(___fldiv@b+1)^0,f,c
  6766   00092E  3613               	rlcf	(___fldiv@b+2)^0,f,c
  6767   000930  3614               	rlcf	(___fldiv@b+3)^0,f,c
  6768   000932  AE27               	btfss	(___fldiv@grs+3)^0,7,c
  6769   000934  EF9E  F004         	goto	u1821
  6770   000938  EFA0  F004         	goto	u1820
  6771   00093C                     u1821:
  6772   00093C  EFA1  F004         	goto	l1189
  6773   000940                     u1820:
  6774   000940  8011               	bsf	___fldiv@b^0,0,c
  6775   000942                     l1189:
  6776   000942  90D8               	bcf	status,0,c
  6777   000944  3624               	rlcf	___fldiv@grs^0,f,c
  6778   000946  3625               	rlcf	(___fldiv@grs+1)^0,f,c
  6779   000948  3626               	rlcf	(___fldiv@grs+2)^0,f,c
  6780   00094A  3627               	rlcf	(___fldiv@grs+3)^0,f,c
  6781   00094C  0622               	decf	___fldiv@new_exp^0,f,c
  6782   00094E  A0D8               	btfss	status,0,c
  6783   000950  0623               	decf	(___fldiv@new_exp+1)^0,f,c
  6784   000952                     l2723:
  6785   000952  AE13               	btfss	(___fldiv@b+2)^0,7,c
  6786   000954  EFAE  F004         	goto	u1831
  6787   000958  EFB0  F004         	goto	u1830
  6788   00095C                     u1831:
  6789   00095C  EF94  F004         	goto	l2717
  6790   000960                     u1830:
  6791   000960  0E00               	movlw	0
  6792   000962  6E29               	movwf	___fldiv@aexp^0,c
  6793   000964  AE27               	btfss	(___fldiv@grs+3)^0,7,c
  6794   000966  EFB7  F004         	goto	u1841
  6795   00096A  EFB9  F004         	goto	u1840
  6796   00096E                     u1841:
  6797   00096E  EFDD  F004         	goto	l1191
  6798   000972                     u1840:
  6799   000972  0EFF               	movlw	255
  6800   000974  1424               	andwf	___fldiv@grs^0,w,c
  6801   000976  6E19               	movwf	??___fldiv^0,c
  6802   000978  0EFF               	movlw	255
  6803   00097A  1425               	andwf	(___fldiv@grs+1)^0,w,c
  6804   00097C  6E1A               	movwf	(??___fldiv+1)^0,c
  6805   00097E  0EFF               	movlw	255
  6806   000980  1426               	andwf	(___fldiv@grs+2)^0,w,c
  6807   000982  6E1B               	movwf	(??___fldiv+2)^0,c
  6808   000984  0E7F               	movlw	127
  6809   000986  1427               	andwf	(___fldiv@grs+3)^0,w,c
  6810   000988  6E1C               	movwf	(??___fldiv+3)^0,c
  6811   00098A  5019               	movf	??___fldiv^0,w,c
  6812   00098C  101A               	iorwf	(??___fldiv+1)^0,w,c
  6813   00098E  101B               	iorwf	(??___fldiv+2)^0,w,c
  6814   000990  101C               	iorwf	(??___fldiv+3)^0,w,c
  6815   000992  B4D8               	btfsc	status,2,c
  6816   000994  EFCE  F004         	goto	u1851
  6817   000998  EFD0  F004         	goto	u1850
  6818   00099C                     u1851:
  6819   00099C  EFD4  F004         	goto	l1192
  6820   0009A0                     u1850:
  6821   0009A0                     l2731:
  6822   0009A0  0E01               	movlw	1
  6823   0009A2  6E29               	movwf	___fldiv@aexp^0,c
  6824   0009A4  EFDD  F004         	goto	l1191
  6825   0009A8                     l1192:
  6826   0009A8  A011               	btfss	___fldiv@b^0,0,c
  6827   0009AA  EFD9  F004         	goto	u1861
  6828   0009AE  EFDB  F004         	goto	u1860
  6829   0009B2                     u1861:
  6830   0009B2  EFDD  F004         	goto	l1191
  6831   0009B6                     u1860:
  6832   0009B6  EFD0  F004         	goto	l2731
  6833   0009BA                     l1191:
  6834   0009BA  5029               	movf	___fldiv@aexp^0,w,c
  6835   0009BC  B4D8               	btfsc	status,2,c
  6836   0009BE  EFE3  F004         	goto	u1871
  6837   0009C2  EFE5  F004         	goto	u1870
  6838   0009C6                     u1871:
  6839   0009C6  EF09  F005         	goto	l2743
  6840   0009CA                     u1870:
  6841   0009CA  0E01               	movlw	1
  6842   0009CC  2611               	addwf	___fldiv@b^0,f,c
  6843   0009CE  0E00               	movlw	0
  6844   0009D0  2212               	addwfc	(___fldiv@b+1)^0,f,c
  6845   0009D2  2213               	addwfc	(___fldiv@b+2)^0,f,c
  6846   0009D4  2214               	addwfc	(___fldiv@b+3)^0,f,c
  6847   0009D6  A014               	btfss	(___fldiv@b+3)^0,0,c
  6848   0009D8  EFF0  F004         	goto	u1881
  6849   0009DC  EFF2  F004         	goto	u1880
  6850   0009E0                     u1881:
  6851   0009E0  EF09  F005         	goto	l2743
  6852   0009E4                     u1880:
  6853   0009E4  C011  F019         	movff	___fldiv@b,??___fldiv
  6854   0009E8  C012  F01A         	movff	___fldiv@b+1,??___fldiv+1
  6855   0009EC  C013  F01B         	movff	___fldiv@b+2,??___fldiv+2
  6856   0009F0  C014  F01C         	movff	___fldiv@b+3,??___fldiv+3
  6857   0009F4  341C               	rlcf	(??___fldiv+3)^0,w,c
  6858   0009F6  321C               	rrcf	(??___fldiv+3)^0,f,c
  6859   0009F8  321B               	rrcf	(??___fldiv+2)^0,f,c
  6860   0009FA  321A               	rrcf	(??___fldiv+1)^0,f,c
  6861   0009FC  3219               	rrcf	??___fldiv^0,f,c
  6862   0009FE  C019  F011         	movff	??___fldiv,___fldiv@b
  6863   000A02  C01A  F012         	movff	??___fldiv+1,___fldiv@b+1
  6864   000A06  C01B  F013         	movff	??___fldiv+2,___fldiv@b+2
  6865   000A0A  C01C  F014         	movff	??___fldiv+3,___fldiv@b+3
  6866   000A0E  4A22               	infsnz	___fldiv@new_exp^0,f,c
  6867   000A10  2A23               	incf	(___fldiv@new_exp+1)^0,f,c
  6868   000A12                     l2743:
  6869   000A12  BE23               	btfsc	(___fldiv@new_exp+1)^0,7,c
  6870   000A14  EF14  F005         	goto	u1891
  6871   000A18  5023               	movf	(___fldiv@new_exp+1)^0,w,c
  6872   000A1A  E108               	bnz	u1890
  6873   000A1C  2822               	incf	___fldiv@new_exp^0,w,c
  6874   000A1E  A0D8               	btfss	status,0,c
  6875   000A20  EF14  F005         	goto	u1891
  6876   000A24  EF16  F005         	goto	u1890
  6877   000A28                     u1891:
  6878   000A28  EF21  F005         	goto	l2747
  6879   000A2C                     u1890:
  6880   000A2C  0E00               	movlw	0
  6881   000A2E  6E23               	movwf	(___fldiv@new_exp+1)^0,c
  6882   000A30  6822               	setf	___fldiv@new_exp^0,c
  6883   000A32  0E00               	movlw	0
  6884   000A34  6E11               	movwf	___fldiv@b^0,c
  6885   000A36  0E00               	movlw	0
  6886   000A38  6E12               	movwf	(___fldiv@b+1)^0,c
  6887   000A3A  0E00               	movlw	0
  6888   000A3C  6E13               	movwf	(___fldiv@b+2)^0,c
  6889   000A3E  0E00               	movlw	0
  6890   000A40  6E14               	movwf	(___fldiv@b+3)^0,c
  6891   000A42                     l2747:
  6892   000A42  BE23               	btfsc	(___fldiv@new_exp+1)^0,7,c
  6893   000A44  EF2E  F005         	goto	u1900
  6894   000A48  5023               	movf	(___fldiv@new_exp+1)^0,w,c
  6895   000A4A  E106               	bnz	u1901
  6896   000A4C  0422               	decf	___fldiv@new_exp^0,w,c
  6897   000A4E  B0D8               	btfsc	status,0,c
  6898   000A50  EF2C  F005         	goto	u1901
  6899   000A54  EF2E  F005         	goto	u1900
  6900   000A58                     u1901:
  6901   000A58  EF3C  F005         	goto	l2751
  6902   000A5C                     u1900:
  6903   000A5C  0E00               	movlw	0
  6904   000A5E  6E23               	movwf	(___fldiv@new_exp+1)^0,c
  6905   000A60  0E00               	movlw	0
  6906   000A62  6E22               	movwf	___fldiv@new_exp^0,c
  6907   000A64  0E00               	movlw	0
  6908   000A66  6E11               	movwf	___fldiv@b^0,c
  6909   000A68  0E00               	movlw	0
  6910   000A6A  6E12               	movwf	(___fldiv@b+1)^0,c
  6911   000A6C  0E00               	movlw	0
  6912   000A6E  6E13               	movwf	(___fldiv@b+2)^0,c
  6913   000A70  0E00               	movlw	0
  6914   000A72  6E14               	movwf	(___fldiv@b+3)^0,c
  6915   000A74  0E00               	movlw	0
  6916   000A76  6E21               	movwf	___fldiv@sign^0,c
  6917   000A78                     l2751:
  6918   000A78  C022  F028         	movff	___fldiv@new_exp,___fldiv@bexp
  6919   000A7C  A028               	btfss	___fldiv@bexp^0,0,c
  6920   000A7E  EF43  F005         	goto	u1911
  6921   000A82  EF45  F005         	goto	u1910
  6922   000A86                     u1911:
  6923   000A86  EF48  F005         	goto	l2757
  6924   000A8A                     u1910:
  6925   000A8A  8E13               	bsf	(___fldiv@b+2)^0,7,c
  6926   000A8C  EF49  F005         	goto	l2759
  6927   000A90                     l2757:
  6928   000A90  9E13               	bcf	(___fldiv@b+2)^0,7,c
  6929   000A92                     l2759:
  6930   000A92  90D8               	bcf	status,0,c
  6931   000A94  3028               	rrcf	___fldiv@bexp^0,w,c
  6932   000A96  6E14               	movwf	(___fldiv@b+3)^0,c
  6933   000A98  EFFF  F003         	goto	l2673
  6934   000A9C                     l1178:
  6935   000A9C  0012               	return		;funcret
  6936   000A9E                     __end_of___fldiv:
  6937                           	callstack 0
  6938                           
  6939 ;; *************** function _LowISR *****************
  6940 ;; Defined at:
  6941 ;;		line 23 in file "interrupts.c"
  6942 ;; Parameters:    Size  Location     Type
  6943 ;;		None
  6944 ;; Auto vars:     Size  Location     Type
  6945 ;;		None
  6946 ;; Return value:  Size  Location     Type
  6947 ;;                  1    wreg      void 
  6948 ;; Registers used:
  6949 ;;		status,2, status,0
  6950 ;; Tracked objects:
  6951 ;;		On entry : 0/0
  6952 ;;		On exit  : 0/0
  6953 ;;		Unchanged: 0/0
  6954 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6955 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6956 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6957 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6958 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6959 ;;Total ram usage:        2 bytes
  6960 ;; Hardware stack levels used: 1
  6961 ;; This function calls:
  6962 ;;		Nothing
  6963 ;; This function is called by:
  6964 ;;		Interrupt level 1
  6965 ;; This function uses a non-reentrant model
  6966 ;;
  6967                           
  6968                           	psect	intcodelo
  6969   000018                     __pintcodelo:
  6970                           	callstack 0
  6971   000018                     _LowISR:
  6972                           	callstack 22
  6973                           
  6974                           ;incstack = 0
  6975   000018  805D               	bsf	int$flags,0,c	;set compiler interrupt flag (level 1)
  6976   00001A  CFD8 F001          	movff	status,??_LowISR
  6977   00001E  CFE0 F002          	movff	bsr,??_LowISR+1
  6978   000022                     
  6979                           ;interrupts.c: 25:     if (PIR0bits.TMR0IF) {
  6980   000022  010E               	movlb	14	; () banked
  6981   000024  AB33               	btfss	51,5,b	;volatile
  6982   000026  EF17  F000         	goto	i1u115_21
  6983   00002A  EF19  F000         	goto	i1u115_20
  6984   00002E                     i1u115_21:
  6985   00002E  EF1C  F000         	goto	i1l428
  6986   000032                     i1u115_20:
  6987   000032                     
  6988                           ; BSR set to: 14
  6989                           ;interrupts.c: 26:         timer_val += 1;
  6990   000032  4A3F               	infsnz	_timer_val^0,f,c
  6991   000034  2A40               	incf	(_timer_val+1)^0,f,c
  6992   000036                     
  6993                           ; BSR set to: 14
  6994                           ;interrupts.c: 27:         PIR0bits.TMR0IF = 0;
  6995   000036  9B33               	bcf	51,5,b	;volatile
  6996   000038                     i1l428:
  6997                           
  6998                           ; BSR set to: 14
  6999   000038  C002  FFE0         	movff	??_LowISR+1,bsr
  7000   00003C  C001  FFD8         	movff	??_LowISR,status
  7001   000040  905D               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  7002   000042  0010               	retfie	
  7003   000044                     __end_of_LowISR:
  7004                           	callstack 0
  7005   000000                     
  7006                           	psect	rparam
  7007   000000                     
  7008                           	psect	temp
  7009   00005D                     btemp:
  7010                           	callstack 0
  7011   00005D                     	ds	1
  7012   000000                     int$flags	set	btemp
  7013   000000                     wtemp8	set	btemp+1
  7014   000000                     ttemp5	set	btemp+1
  7015   000000                     ttemp6	set	btemp+4
  7016   000000                     ttemp7	set	btemp+8
  7017                           
  7018                           	psect	idloc
  7019                           
  7020                           ;Config register IDLOC0 @ 0x200000
  7021                           ;	unspecified, using default values
  7022   200000                     	org	2097152
  7023   200000  0FFF               	dw	4095
  7024                           
  7025                           ;Config register IDLOC1 @ 0x200002
  7026                           ;	unspecified, using default values
  7027   200002                     	org	2097154
  7028   200002  0FFF               	dw	4095
  7029                           
  7030                           ;Config register IDLOC2 @ 0x200004
  7031                           ;	unspecified, using default values
  7032   200004                     	org	2097156
  7033   200004  0FFF               	dw	4095
  7034                           
  7035                           ;Config register IDLOC3 @ 0x200006
  7036                           ;	unspecified, using default values
  7037   200006                     	org	2097158
  7038   200006  0FFF               	dw	4095
  7039                           
  7040                           ;Config register IDLOC4 @ 0x200008
  7041                           ;	unspecified, using default values
  7042   200008                     	org	2097160
  7043   200008  0FFF               	dw	4095
  7044                           
  7045                           ;Config register IDLOC5 @ 0x20000A
  7046                           ;	unspecified, using default values
  7047   20000A                     	org	2097162
  7048   20000A  0FFF               	dw	4095
  7049                           
  7050                           ;Config register IDLOC6 @ 0x20000C
  7051                           ;	unspecified, using default values
  7052   20000C                     	org	2097164
  7053   20000C  0FFF               	dw	4095
  7054                           
  7055                           ;Config register IDLOC7 @ 0x20000E
  7056                           ;	unspecified, using default values
  7057   20000E                     	org	2097166
  7058   20000E  0FFF               	dw	4095
  7059                           
  7060                           	psect	config
  7061                           
  7062                           ;Config register CONFIG1L @ 0x300000
  7063                           ;	External Oscillator mode Selection bits
  7064                           ;	FEXTOSC = HS, HS (crystal oscillator) above 8 MHz; PFM set to high power
  7065                           ;	Power-up default value for COSC bits
  7066                           ;	RSTOSC = EXTOSC_4PLL, EXTOSC with 4x PLL, with EXTOSC operating per FEXTOSC bits
  7067   300000                     	org	3145728
  7068   300000  AA                 	db	170
  7069                           
  7070                           ;Config register CONFIG1H @ 0x300001
  7071                           ;	unspecified, using default values
  7072                           ;	Clock Out Enable bit
  7073                           ;	CLKOUTEN = 0x1, unprogrammed default
  7074                           ;	Clock Switch Enable bit
  7075                           ;	CSWEN = 0x1, unprogrammed default
  7076                           ;	Fail-Safe Clock Monitor Enable bit
  7077                           ;	FCMEN = 0x1, unprogrammed default
  7078   300001                     	org	3145729
  7079   300001  FF                 	db	255
  7080                           
  7081                           ;Config register CONFIG2L @ 0x300002
  7082                           ;	unspecified, using default values
  7083                           ;	Master Clear Enable bit
  7084                           ;	MCLRE = 0x1, unprogrammed default
  7085                           ;	Power-up Timer Enable bit
  7086                           ;	PWRTE = 0x1, unprogrammed default
  7087                           ;	Low-power BOR enable bit
  7088                           ;	LPBOREN = 0x1, unprogrammed default
  7089                           ;	Brown-out Reset Enable bits
  7090                           ;	BOREN = 0x3, unprogrammed default
  7091   300002                     	org	3145730
  7092   300002  FF                 	db	255
  7093                           
  7094                           ;Config register CONFIG2H @ 0x300003
  7095                           ;	unspecified, using default values
  7096                           ;	Brown Out Reset Voltage selection bits
  7097                           ;	BORV = 0x3, unprogrammed default
  7098                           ;	ZCD Disable bit
  7099                           ;	ZCD = 0x1, unprogrammed default
  7100                           ;	PPSLOCK bit One-Way Set Enable bit
  7101                           ;	PPS1WAY = 0x1, unprogrammed default
  7102                           ;	Stack Full/Underflow Reset Enable bit
  7103                           ;	STVREN = 0x1, unprogrammed default
  7104                           ;	Debugger Enable bit
  7105                           ;	DEBUG = 0x1, unprogrammed default
  7106                           ;	Extended Instruction Set Enable bit
  7107                           ;	XINST = 0x1, unprogrammed default
  7108   300003                     	org	3145731
  7109   300003  FF                 	db	255
  7110                           
  7111                           ;Config register CONFIG3L @ 0x300004
  7112                           ;	WDT Period Select bits
  7113                           ;	WDTCPS = WDTCPS_31, Divider ratio 1:65536; software control of WDTPS
  7114                           ;	WDT operating mode
  7115                           ;	WDTE = OFF, WDT Disabled
  7116   300004                     	org	3145732
  7117   300004  9F                 	db	159
  7118                           
  7119                           ;Config register CONFIG3H @ 0x300005
  7120                           ;	unspecified, using default values
  7121                           ;	WDT Window Select bits
  7122                           ;	WDTCWS = 0x7, unprogrammed default
  7123                           ;	WDT input clock selector
  7124                           ;	WDTCCS = 0x7, unprogrammed default
  7125   300005                     	org	3145733
  7126   300005  FF                 	db	255
  7127                           
  7128                           ;Config register CONFIG4L @ 0x300006
  7129                           ;	unspecified, using default values
  7130                           ;	Write Protection Block 0
  7131                           ;	WRT0 = 0x1, unprogrammed default
  7132                           ;	Write Protection Block 1
  7133                           ;	WRT1 = 0x1, unprogrammed default
  7134                           ;	Write Protection Block 2
  7135                           ;	WRT2 = 0x1, unprogrammed default
  7136                           ;	Write Protection Block 3
  7137                           ;	WRT3 = 0x1, unprogrammed default
  7138                           ;	Write Protection Block 3
  7139                           ;	WRT4 = 0x1, unprogrammed default
  7140                           ;	Write Protection Block 3
  7141                           ;	WRT5 = 0x1, unprogrammed default
  7142                           ;	Write Protection Block 3
  7143                           ;	WRT6 = 0x1, unprogrammed default
  7144                           ;	Write Protection Block 3
  7145                           ;	WRT7 = 0x1, unprogrammed default
  7146   300006                     	org	3145734
  7147   300006  FF                 	db	255
  7148                           
  7149                           ;Config register CONFIG4H @ 0x300007
  7150                           ;	unspecified, using default values
  7151                           ;	Configuration Register Write Protection bit
  7152                           ;	WRTC = 0x1, unprogrammed default
  7153                           ;	Boot Block Write Protection bit
  7154                           ;	WRTB = 0x1, unprogrammed default
  7155                           ;	Data EEPROM Write Protection bit
  7156                           ;	WRTD = 0x1, unprogrammed default
  7157                           ;	Scanner Enable bit
  7158                           ;	SCANE = 0x1, unprogrammed default
  7159                           ;	Low Voltage Programming Enable bit
  7160                           ;	LVP = 0x1, unprogrammed default
  7161   300007                     	org	3145735
  7162   300007  FF                 	db	255
  7163                           
  7164                           ;Config register CONFIG5L @ 0x300008
  7165                           ;	unspecified, using default values
  7166                           ;	UserNVM Program Memory Code Protection bit
  7167                           ;	CP = 0x1, unprogrammed default
  7168                           ;	DataNVM Memory Code Protection bit
  7169                           ;	CPD = 0x1, unprogrammed default
  7170   300008                     	org	3145736
  7171   300008  FF                 	db	255
  7172                           
  7173                           ;Config register CONFIG5H @ 0x300009
  7174                           ;	unspecified, using default values
  7175   300009                     	org	3145737
  7176   300009  FF                 	db	255
  7177                           
  7178                           ;Config register CONFIG6L @ 0x30000A
  7179                           ;	unspecified, using default values
  7180                           ;	Table Read Protection Block 0
  7181                           ;	EBTR0 = 0x1, unprogrammed default
  7182                           ;	Table Read Protection Block 1
  7183                           ;	EBTR1 = 0x1, unprogrammed default
  7184                           ;	Table Read Protection Block 2
  7185                           ;	EBTR2 = 0x1, unprogrammed default
  7186                           ;	Table Read Protection Block 3
  7187                           ;	EBTR3 = 0x1, unprogrammed default
  7188                           ;	Table Read Protection Block 4
  7189                           ;	EBTR4 = 0x1, unprogrammed default
  7190                           ;	Table Read Protection Block 5
  7191                           ;	EBTR5 = 0x1, unprogrammed default
  7192                           ;	Table Read Protection Block 6
  7193                           ;	EBTR6 = 0x1, unprogrammed default
  7194                           ;	Table Read Protection Block 7
  7195                           ;	EBTR7 = 0x1, unprogrammed default
  7196   30000A                     	org	3145738
  7197   30000A  FF                 	db	255
  7198                           
  7199                           ;Config register CONFIG6H @ 0x30000B
  7200                           ;	unspecified, using default values
  7201                           ;	Boot Block Table Read Protection bit
  7202                           ;	EBTRB = 0x1, unprogrammed default
  7203   30000B                     	org	3145739
  7204   30000B  FF                 	db	255
  7205                           tosu	equ	0xFFF
  7206                           tosh	equ	0xFFE
  7207                           tosl	equ	0xFFD
  7208                           stkptr	equ	0xFFC
  7209                           pclatu	equ	0xFFB
  7210                           pclath	equ	0xFFA
  7211                           pcl	equ	0xFF9
  7212                           tblptru	equ	0xFF8
  7213                           tblptrh	equ	0xFF7
  7214                           tblptrl	equ	0xFF6
  7215                           tablat	equ	0xFF5
  7216                           prodh	equ	0xFF4
  7217                           prodl	equ	0xFF3
  7218                           indf0	equ	0xFEF
  7219                           postinc0	equ	0xFEE
  7220                           postdec0	equ	0xFED
  7221                           preinc0	equ	0xFEC
  7222                           plusw0	equ	0xFEB
  7223                           fsr0h	equ	0xFEA
  7224                           fsr0l	equ	0xFE9
  7225                           wreg	equ	0xFE8
  7226                           indf1	equ	0xFE7
  7227                           postinc1	equ	0xFE6
  7228                           postdec1	equ	0xFE5
  7229                           preinc1	equ	0xFE4
  7230                           plusw1	equ	0xFE3
  7231                           fsr1h	equ	0xFE2
  7232                           fsr1l	equ	0xFE1
  7233                           bsr	equ	0xFE0
  7234                           indf2	equ	0xFDF
  7235                           postinc2	equ	0xFDE
  7236                           postdec2	equ	0xFDD
  7237                           preinc2	equ	0xFDC
  7238                           plusw2	equ	0xFDB
  7239                           fsr2h	equ	0xFDA
  7240                           fsr2l	equ	0xFD9
  7241                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    0
    Data        8
    BSS         122
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     62      92
    BANK0           160      2     102
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          234      0       0

Pointer List with Targets:

    motor_init@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> motorR(BANK0[9]), 

    motor_init@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> motorL(BANK0[9]), 

    buggy_color_response@c	PTR struct colors size(2) Largest target is 20
		 -> color(COMRAM[20]), 

    READcolor@c	PTR struct colors size(2) Largest target is 20
		 -> color(COMRAM[20]), 

    movement_return@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> motorR(BANK0[9]), 

    movement_return@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> motorL(BANK0[9]), 

    movement@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> motorR(BANK0[9]), 

    movement@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> motorL(BANK0[9]), 

    reverse_pink@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> motorR(BANK0[9]), 

    reverse_pink@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> motorL(BANK0[9]), 

    reverse_yellow@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> motorR(BANK0[9]), 

    reverse_yellow@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> motorL(BANK0[9]), 

    space@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllhll[1]), CCPR2H(BITBIGSFRhhhllll[1]), 

    space@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllhll[1]), CCPR1H(BITBIGSFRhhhllll[1]), 

    space@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllhll[1]), CCPR2H(BITBIGSFRhhhllll[1]), 

    space@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllhll[1]), CCPR1H(BITBIGSFRhhhllll[1]), 

    space@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> motorR(BANK0[9]), 

    space@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> motorL(BANK0[9]), 

    right_45@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllhll[1]), CCPR2H(BITBIGSFRhhhllll[1]), 

    right_45@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllhll[1]), CCPR1H(BITBIGSFRhhhllll[1]), 

    right_45@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllhll[1]), CCPR2H(BITBIGSFRhhhllll[1]), 

    right_45@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllhll[1]), CCPR1H(BITBIGSFRhhhllll[1]), 

    right_45@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> motorR(BANK0[9]), 

    right_45@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> motorL(BANK0[9]), 

    left_45@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllhll[1]), CCPR2H(BITBIGSFRhhhllll[1]), 

    left_45@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllhll[1]), CCPR1H(BITBIGSFRhhhllll[1]), 

    left_45@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllhll[1]), CCPR2H(BITBIGSFRhhhllll[1]), 

    left_45@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllhll[1]), CCPR1H(BITBIGSFRhhhllll[1]), 

    left_45@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> motorR(BANK0[9]), 

    left_45@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> motorL(BANK0[9]), 

    stop@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllhll[1]), CCPR2H(BITBIGSFRhhhllll[1]), 

    stop@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllhll[1]), CCPR1H(BITBIGSFRhhhllll[1]), 

    stop@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> motorR(BANK0[9]), 

    stop@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllhll[1]), CCPR2H(BITBIGSFRhhhllll[1]), 

    stop@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllhll[1]), CCPR1H(BITBIGSFRhhhllll[1]), 

    stop@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> motorL(BANK0[9]), 

    reverse@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllhll[1]), CCPR2H(BITBIGSFRhhhllll[1]), 

    reverse@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllhll[1]), CCPR1H(BITBIGSFRhhhllll[1]), 

    reverse@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllhll[1]), CCPR2H(BITBIGSFRhhhllll[1]), 

    reverse@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllhll[1]), CCPR1H(BITBIGSFRhhhllll[1]), 

    reverse@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> motorR(BANK0[9]), 

    reverse@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> motorL(BANK0[9]), 

    forward@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllhll[1]), CCPR2H(BITBIGSFRhhhllll[1]), 

    forward@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllhll[1]), CCPR1H(BITBIGSFRhhhllll[1]), 

    forward@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllhll[1]), CCPR2H(BITBIGSFRhhhllll[1]), 

    forward@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllhll[1]), CCPR1H(BITBIGSFRhhhllll[1]), 

    forward@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> motorR(BANK0[9]), 

    forward@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> motorL(BANK0[9]), 

    setMotorPWM@m.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllhll[1]), CCPR2H(BITBIGSFRhhhllll[1]), 

    setMotorPWM@m.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllhll[1]), CCPR1H(BITBIGSFRhhhllll[1]), 

    setMotorPWM@m	PTR struct DC_motor size(2) Largest target is 11
		 -> motorR(BANK0[9]), motorL(BANK0[9]), 

    return_home@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> motorR(BANK0[9]), 

    return_home@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> motorL(BANK0[9]), 

    buggy_color_response@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> motorR(BANK0[9]), 

    buggy_color_response@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> motorL(BANK0[9]), 

    motorR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllhll[1]), CCPR2H(BITBIGSFRhhhllll[1]), 

    motorR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllhll[1]), CCPR1H(BITBIGSFRhhhllll[1]), 

    S236DC_motor$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllhll[1]), CCPR2H(BITBIGSFRhhhllll[1]), 

    motorL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllhll[1]), CCPR2H(BITBIGSFRhhhllll[1]), 

    S236DC_motor$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllhll[1]), CCPR1H(BITBIGSFRhhhllll[1]), 

    motorL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllhll[1]), CCPR1H(BITBIGSFRhhhllll[1]), 


Critical Paths under _main in COMRAM

    _main->_buggy_color_response
    _complete_initialisation->_color_click_init
    _color_click_init->_color_writetoaddr
    _color_writetoaddr->_I2C_2_Master_Write
    _buggy_color_response->_return_home
    _return_home->_movement_return
    _movement_return->_reverse_pink
    _movement_return->_reverse_yellow
    _reverse_yellow->_left_45
    _reverse_pink->_right_45
    _forward->_stop
    _movement->_left_45
    _movement->_right_45
    _space->_stop
    _right_45->_stop
    _reverse->_stop
    _left_45->_stop
    _stop->_setMotorPWM
    _setMotorPWM->___lwdiv
    ___lwdiv->___wmul
    _READcolor->___fldiv
    _color_read_Red->_I2C_2_Master_Read
    _color_read_Green->_I2C_2_Master_Read
    _color_read_Clear->_I2C_2_Master_Read
    _color_read_Blue->_I2C_2_Master_Read
    _I2C_2_Master_Write->_I2C_2_Master_Idle
    _I2C_2_Master_Stop->_I2C_2_Master_Idle
    _I2C_2_Master_Start->_I2C_2_Master_Idle
    _I2C_2_Master_RepStart->_I2C_2_Master_Idle
    _I2C_2_Master_Read->_I2C_2_Master_Idle
    ___fldiv->___xxtofl

Critical Paths under _LowISR in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _LowISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _LowISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _LowISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _LowISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _LowISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _LowISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _LowISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _LowISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _LowISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _LowISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _LowISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _LowISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _LowISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _LowISR in BANK13

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0  342174
                                              0 BANK0      2     2      0
               _buggy_color_response
            _complete_initialisation
                        _timer_reset
 ---------------------------------------------------------------------------------
 (1) _complete_initialisation                              0     0      0     544
                           _ADC_init
                  _I2C_2_Master_Init
                        _Timer0_init
                     _buggyLEDs_init
                   _color_click_init
                    _initDCmotorsPWM
                         _initUSART4
                    _interrupts_init
                         _motor_init
                         _ports_init
 ---------------------------------------------------------------------------------
 (2) _ports_init                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _motor_init                                           4     0      4     152
                                              2 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (2) _interrupts_init                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _initUSART4                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _initDCmotorsPWM                                      2     0      2      98
                                              2 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _color_click_init                                     1     1      0     294
                                              6 COMRAM     1     1      0
                  _I2C_2_Master_Init
                  _color_writetoaddr
 ---------------------------------------------------------------------------------
 (3) _color_writetoaddr                                    2     1      1     294
                                              4 COMRAM     2     1      1
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Init                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _buggyLEDs_init                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Timer0_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _buggy_color_response                                 8     2      6  341630
                                             54 COMRAM     8     2      6
                          _READcolor
                             ___flge
                            _forward
                           _movement
                    _movement_return
                        _return_home
                              _space
                               _stop
                        _timer_reset
 ---------------------------------------------------------------------------------
 (1) _timer_reset                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _return_home                                          6     2      4  137000
                                             48 COMRAM     6     2      4
                      _delay_ms_func
                            _forward
                    _movement_return
                            _reverse
                               _stop
 ---------------------------------------------------------------------------------
 (3) _movement_return                                      5     0      5  105445
                                             43 COMRAM     5     0      5
                            _left_45
                       _reverse_pink
                     _reverse_yellow
                           _right_45
                               _stop
 ---------------------------------------------------------------------------------
 (4) _reverse_yellow                                       6     2      4   34045
                                             37 COMRAM     6     2      4
                       _custom_delay
                            _left_45
                            _reverse
                               _stop
 ---------------------------------------------------------------------------------
 (4) _reverse_pink                                         6     2      4   34653
                                             37 COMRAM     6     2      4
                       _custom_delay
                            _reverse
                           _right_45
                               _stop
 ---------------------------------------------------------------------------------
 (3) _forward                                              5     1      4   11290
                                             27 COMRAM     5     1      4
                        _setMotorPWM
                               _stop
 ---------------------------------------------------------------------------------
 (3) _delay_ms_func                                        6     4      2     122
                                              2 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (2) _movement                                             7     2      5   61625
                                             37 COMRAM     7     2      5
                       _custom_delay
                            _left_45
                            _reverse
                           _right_45
                              _space
                               _stop
 ---------------------------------------------------------------------------------
 (2) _space                                                6     2      4   11138
                                             27 COMRAM     6     2      4
                        _setMotorPWM
                               _stop
 ---------------------------------------------------------------------------------
 (4) _right_45                                            10     3      7   14140
                                             27 COMRAM    10     3      7
                       _custom_delay
                        _setMotorPWM
                               _stop
 ---------------------------------------------------------------------------------
 (3) _reverse                                              5     1      4   11746
                                             27 COMRAM     5     1      4
                        _setMotorPWM
                               _stop
 ---------------------------------------------------------------------------------
 (5) _left_45                                             10     3      7   13532
                                             27 COMRAM    10     3      7
                       _custom_delay
                        _setMotorPWM
                               _stop
 ---------------------------------------------------------------------------------
 (2) _stop                                                 6     2      4    7937
                                             21 COMRAM     6     2      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (3) _setMotorPWM                                          6     4      2    2589
                                             15 COMRAM     6     4      2
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     355
                                              2 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              7     3      4     358
                                              8 COMRAM     7     3      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (5) _custom_delay                                         5     3      2     502
                                              2 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (2) ___flge                                              12     4      8    3222
                                              2 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (2) _READcolor                                            2     0      2    3085
                                             41 COMRAM     2     0      2
                            ___fldiv
                           ___xxtofl
                    _color_read_Blue
                   _color_read_Clear
                   _color_read_Green
                     _color_read_Red
 ---------------------------------------------------------------------------------
 (3) _color_read_Red                                       7     5      2     113
                                              6 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (3) _color_read_Green                                     7     5      2     113
                                              6 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (3) _color_read_Clear                                     7     5      2     113
                                              6 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (3) _color_read_Blue                                      7     5      2     113
                                              6 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (4) _I2C_2_Master_Write                                   1     1      0      22
                                              3 COMRAM     1     1      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (4) _I2C_2_Master_Stop                                    0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (4) _I2C_2_Master_Start                                   0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (4) _I2C_2_Master_RepStart                                0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (4) _I2C_2_Master_Read                                    3     3      0      45
                                              3 COMRAM     3     3      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (5) _I2C_2_Master_Idle                                    1     1      0       0
                                              2 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) ___xxtofl                                            14    10      4     778
                                              2 COMRAM    14    10      4
 ---------------------------------------------------------------------------------
 (3) ___fldiv                                             25    17      8    1703
                                             16 COMRAM    25    17      8
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _LowISR                                               2     2      0       0
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _buggy_color_response
     _READcolor
       ___fldiv
         ___xxtofl (ARG)
       ___xxtofl
       _color_read_Blue
         _I2C_2_Master_Read
           _I2C_2_Master_Idle
         _I2C_2_Master_RepStart
           _I2C_2_Master_Idle
         _I2C_2_Master_Start
           _I2C_2_Master_Idle
         _I2C_2_Master_Stop
           _I2C_2_Master_Idle
         _I2C_2_Master_Write
           _I2C_2_Master_Idle
       _color_read_Clear
         _I2C_2_Master_Read
         _I2C_2_Master_RepStart
         _I2C_2_Master_Start
         _I2C_2_Master_Stop
         _I2C_2_Master_Write
       _color_read_Green
         _I2C_2_Master_Read
         _I2C_2_Master_RepStart
         _I2C_2_Master_Start
         _I2C_2_Master_Stop
         _I2C_2_Master_Write
       _color_read_Red
         _I2C_2_Master_Read
         _I2C_2_Master_RepStart
         _I2C_2_Master_Start
         _I2C_2_Master_Stop
         _I2C_2_Master_Write
     ___flge
     _forward
       _setMotorPWM
         ___lwdiv
           ___wmul (ARG)
         ___wmul
       _stop
         _setMotorPWM
     _movement
       _custom_delay
       _left_45
         _custom_delay
         _setMotorPWM
         _stop
       _reverse
         _setMotorPWM
         _stop
       _right_45
         _custom_delay
         _setMotorPWM
         _stop
       _space
         _setMotorPWM
         _stop
       _stop
     _movement_return
       _left_45
       _reverse_pink
         _custom_delay
         _reverse
         _right_45
         _stop
       _reverse_yellow
         _custom_delay
         _left_45
         _reverse
         _stop
       _right_45
       _stop
     _return_home
       _delay_ms_func
       _forward
       _movement_return
       _reverse
       _stop
     _space
     _stop
     _timer_reset
   _complete_initialisation
     _ADC_init
     _I2C_2_Master_Init
     _Timer0_init
     _buggyLEDs_init
     _color_click_init
       _I2C_2_Master_Init
       _color_writetoaddr
         _I2C_2_Master_Start
         _I2C_2_Master_Stop
         _I2C_2_Master_Write
     _initDCmotorsPWM
     _initUSART4
     _interrupts_init
     _motor_init
     _ports_init
   _timer_reset

 _LowISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             DE9      0       0      66        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK13           EA      0       0      30        0.0%
BANK13              EA      0       0      31        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      2      66       5       63.7%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     3E      5C       1       97.9%
BITBIGSFRhlllhl     37      0       0      47        0.0%
BITBIGSFRhlllhh     31      0       0      45        0.0%
BITBIGSFRlllhll     2A      0       0      58        0.0%
BITBIGSFRlllll      26      0       0      64        0.0%
BITBIGSFRllhh       20      0       0      50        0.0%
BITBIGSFRlllhhh     1E      0       0      52        0.0%
BITBIGSFRhhhhlh     1B      0       0      33        0.0%
BITBIGSFRhhhlll     17      0       0      38        0.0%
BITBIGSFRhlllhh     14      0       0      42        0.0%
BITBIGSFRhhhhll     13      0       0      34        0.0%
BITBIGSFRlllhhh     11      0       0      53        0.0%
BITBIGSFRhhhlhh      E      0       0      35        0.0%
BITBIGSFRhhhhh       D      0       0      32        0.0%
BITBIGSFRllhl        C      0       0      51        0.0%
BITBIGSFRlllhll      9      0       0      61        0.0%
BITBIGSFRlllhll      9      0       0      60        0.0%
BITBIGSFRhlllll      8      0       0      48        0.0%
BITBIGSFRhlllhh      6      0       0      44        0.0%
BITBIGSFRllllh       6      0       0      63        0.0%
BITBIGSFRlllhlh      6      0       0      57        0.0%
BITBIGSFRlllhlh      5      0       0      56        0.0%
BITBIGSFRhhhlll      5      0       0      39        0.0%
BITBIGSFRhlllhh      3      0       0      43        0.0%
BITBIGSFRlllhll      3      0       0      59        0.0%
BITBIGSFRlllhhl      3      0       0      55        0.0%
BITBIGSFRhlllhl      2      0       0      46        0.0%
BITBIGSFRhhhllh      2      0       0      37        0.0%
BITBIGSFRhhhlhl      1      0       0      36        0.0%
BITBIGSFRlllhhh      1      0       0      54        0.0%
BITBIGSFRhllhl       1      0       0      41        0.0%
BITBIGSFRhlh         1      0       0      40        0.0%
BITBIGSFRlllhll      1      0       0      62        0.0%
BITBIGSFRlh          1      0       0      49        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      C2      65        0.0%
DATA                 0      0      C2       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.40 build 20220703182018 
Symbol Table                                                                                   Thu Mar 16 10:32:13 2023

                 _color_read_Red 1EA0                     ___fldiv@aexp 0029  
                   ___fldiv@bexp 0028                     ___fldiv@sign 0021  
                _color_read_Blue 1F90                               l30 218E  
                             l33 21B4                               l42 22C2  
                             l27 218C                               l36 22CC  
                             l45 22B8                               l39 22D6  
                             l48 20AE                               bsr 000FE0  
            ___wmul@multiplicand 0005                 custom_delay@temp 0003  
               _color_read_Clear 1F40                 _color_read_Green 1EF0  
        _complete_initialisation 202C                delay_ms_func@time 0003  
                            l121 1EEE                              l130 1F8E  
                            l115 2162                              l124 1FDE  
                            l300 1B1E                              l133 14F0  
                            l118 223A                              l127 1F3E  
                            l160 20EE                              l400 1DDC  
                            l305 1BCE                              l154 124A  
                            l146 0702                              l316 1744  
                            l404 1DF8                              l157 20D8  
                            l341 1D62                              l422 22AC  
                            l327 161A                              l335 194A  
                            l351 0D76                              l281 13B6  
                            l361 10D4                              l441 225A  
                            l185 221A                              l409 1E42  
                            l338 1CE0                              l274 1C5E  
                            l515 2110                              l291 1A32  
                            l292 1A34                              l444 229C  
                            l284 202A                              l518 212E  
                            l295 1AEC                              l287 1A02  
                            l472 228A                              l299 1B1C  
                            l572 206C                              l469 21FA  
                            l587 2274                              l596 21DA  
                            l861 1802                              l866 1848  
                            wreg 000FE8                    return_home@mL 0031  
                  return_home@mR 0033                             l3001 17D0  
                           l1251 0DCE                             l3003 17E2  
                           l1180 08FC                             l3005 17F0  
                           l2301 12D0                             l3101 0514  
                           l3021 007C                             l3013 0048  
                           l1254 0F2A                             l1094 1DD6  
                           l1191 09BA                             l1183 08C0  
                           l3007 1840                             l1087 1DCE  
                           l2303 12D4                             l2311 1B20  
                           l3111 05BC                             l3103 0546  
                           l3031 00E0                             l3023 0090  
                           l3015 0054                             l1192 09A8  
                           l1265 0EC2                             l3009 1846  
                           l2305 1316                             l2321 1B4A  
                           l2313 1B40                             l2401 16E0  
                           l3121 062E                             l3105 0578  
                           l3113 05D4                             l3041 019E  
                           l3033 00F8                             l3025 00A8  
                           l3017 006A                             l1178 0A9C  
                           l1258 0E66                             l2307 1332  
                           l2331 1B8E                             l2323 1B62  
                           l2315 1B42                             l2411 1730  
                           l2403 16F8                             l3131 0660  
                           l3123 0630                             l3115 0606  
                           l3107 05AA                             l3051 022C  
                           l3043 01A0                             l3035 012A  
                           l3027 00BC                             l3019 007A  
                           l1189 0942                             l2341 20F0  
                           l2309 1376                             l2333 1B9C  
                           l2325 1B6E                             l2405 1704  
                           l2413 1732                             l2421 1526  
                           l2501 1D42                             l3141 06CC  
                           l3133 0674                             l3125 0632  
                           l3117 061C                             l3109 05BA  
                           l3061 02DC                             l3053 022E  
                           l3037 015C                             l3045 01B8  
                           l3029 00D4                             l2343 20FC  
                           l2335 1BB4                             l2327 1B7A  
                           l2407 1718                             l2351 1A36  
                           l2431 156C                             l2423 1528  
                           l2415 14F2                             l2503 1D4E  
                           l3135 068C                             l3127 0634  
                           l3119 062C                             l3143 06E6  
                           l3071 036A                             l3063 02EC  
                           l3047 01EA                             l3055 0246  
                           l3039 018E                             l2511 2176  
                           l3151 203C                             l2521 1EE6  
                           l2345 210C                             l2281 1D8E  
                           l2273 1D64                             l2337 1BC0  
                           l2329 1B82                             l2409 172E  
                           l2361 1AA0                             l2353 1A4A  
                           l2441 15B6                             l2433 1578  
                           l2425 1530                             l2417 1506  
                           l2601 0F82                             l3137 06A0  
                           l3129 0648                             l3081 03F8  
                           l3073 037A                             l3065 02EE  
                           l3057 0278                             l3049 021C  
                           l3145 06EE                             l2513 2178  
                           l2505 2164                             l3161 2064  
                           l3153 2040                             l3241 1E1E  
                           l2347 218E                             l2531 1EF0  
                           l2291 1DC2                             l2283 1D9C  
                           l2275 1D6C                             l2267 21B6  
                           l2339 1BCC                             l2371 1AE4  
                           l2363 1AAA                             l2355 1A5A  
                           l2451 1606                             l2443 15CE  
                           l2435 1584                             l2427 1548  
                           l2419 1516                             l2611 1042  
                           l2603 0FB6                             l3139 06B4  
                           l3091 0486                             l3083 042A  
                           l3075 037C                             l3059 02AA  
                           l3067 0306                             l2515 217A  
                           l2507 216E                             l3163 2068  
                           l3155 2054                             l3147 202C  
                           l3243 1E22                             l3235 1DD8  
                           l2701 08B0                             l2349 219E  
                           l2461 22D2                             l2525 1F90  
                           l2533 1F36                             l2293 1DC8  
                           l2285 1DA2                             l2277 1D7E  
                           l2269 21D2                             l2381 1650  
                           l2373 1B04                             l2365 1AC2  
                           l2357 1A6A                             l2445 15DA  
                           l2437 1590                             l2429 1554  
                           l2453 1608                             l2621 10C0  
                           l2613 1054                             l2605 0FC8  
                           l3093 04B8                             l3085 043A  
                           l3069 0338                             l3077 0394  
                           l2509 2174                             l2517 221E  
                           l3157 205C                             l3149 2038  
                           l3237 1DEA                             l2711 08FA  
                           l2703 08BE                             l2631 0710  
                           l2471 2070                             l2455 22C4  
                           l2463 22BA                             l2527 1FD6  
                           l2519 1EA0                             l2287 1DB8  
                           l2279 1D86                             l2295 124C  
                           l2391 1696                             l2383 1652  
                           l2375 161C                             l2367 1ACC  
                           l2359 1A88                             l2447 15EE  
                           l2439 159E                             l2623 20B0  
                           l2551 199E                             l2543 194C  
                           l2615 1088                             l2607 0FFC  
                           l3095 04EA                             l3087 043C  
                           l3079 03C6                             l3159 2060  
                           l3239 1E06                             l2721 0940  
                           l2713 090C                             l2705 08CA  
                           l2641 0750                             l2633 071E  
                           l2801 0ED6                             l2481 20AC  
                           l2473 2074                             l2457 22C8  
                           l2465 22BE                             l2537 1F40  
                           l2289 1DC0                             l2297 1268  
                           l2393 16A2                             l2385 165A  
                           l2377 1630                             l2369 1AD8  
                           l2449 1604                             l2625 20BC  
                           l2561 19EE                             l2553 19B6  
                           l2545 1960                             l2617 109A  
                           l2609 100E                             l3097 04FA  
                           l3089 0454                             l2731 09A0  
                           l2715 0922                             l2723 0952  
                           l2707 08E8                             l2651 0776  
                           l2643 0752                             l2635 0720  
                           l2803 0EFA                             l2475 207C  
                           l2459 22CE                             l2467 22B0  
                           l2539 1F86                             l2299 12BC  
                           l2395 16AE                             l2387 1672  
                           l2379 1640                             l2571 1860  
                           l2627 20D4                             l2563 19FA  
                           l2555 19C0                             l2547 1970  
                           l2491 1CC0                             l2619 10AE  
                           l3099 04FC                             l2741 0A0E  
                           l2725 0960                             l2717 0928  
                           l2709 08EA                             l2661 07B6  
                           l2653 0784                             l2637 0730  
                           l2645 075A                             l2629 0704  
                           l2805 0F0A                             l2477 2084  
                           l2469 22B4                             l2397 16BA  
                           l2389 167E                             l2581 18CC  
                           l2573 1870                             l2565 1A1A  
                           l2557 19D8                             l2549 1980  
                           l2493 1CCC                             l2485 1C60  
                           l2901 11A6                             l2821 2158  
                           l2813 2130                             l2751 0A78  
                           l2735 09CA                             l2743 0A12  
                           l2727 0964                             l2719 0932  
                           l2671 07F6                             l2663 07B8  
                           l2655 0786                             l2647 076A  
                           l2639 0740                             l2807 0F18  
                           l2479 20AA                             l2823 13B8  
                           l2399 16C8                             l2591 1930  
                           l2575 189C                             l2583 18D4  
                           l2567 184A                             l2831 0AF6  
                           l2559 19E2                             l2495 1CE2  
                           l2487 1C94                             l2911 1212  
                           l2903 11BA                             l2815 2134  
                           l2753 0A7C                             l2745 0A2C  
                           l2737 09D6                             l2729 0972  
                           l2681 0826                             l2673 07FE  
                           l2657 0796                             l2665 07C0  
                           l2649 0770                             l2809 0F1A  
                           l2593 1948                             l2585 18EC  
                           l2577 18B4                             l2569 185E  
                           l2841 0B92                             l2833 0B06  
                           l2825 0A9E                             l2497 1D16  
                           l2489 1CAC                             l2905 11D2  
                           l2913 122A                             l2817 213E  
                           l2921 2206                             l2755 0A8A  
                           l2747 0A42                             l2739 09E4  
                           l2691 0864                             l2683 0826  
                           l2675 0802                             l2667 07D0  
                           l2659 07A6                             l2771 0D98  
                           l2587 1904                             l2579 18C0  
                           l2851 0C0C                             l2843 0BC6  
                           l2835 0B3A                             l2827 0AB2  
                           l2499 1D2E                             l2595 0F2C  
                           l2915 123A                             l2907 11E6  
                           l2819 214E                             l2931 2218  
                           l2923 2208                             l2757 0A90  
                           l2749 0A5C                             l2693 0874  
                           l2669 07E6                             l2781 0E10  
                           l2773 0DDE                             l2589 191C  
                           l2861 0C7E                             l2853 0C24  
                           l2845 0BD8                             l2837 0B4C  
                           l2829 0ACA                             l2597 0F3C  
                           l2909 11FE                             l2917 228C  
                           l2941 1C2E                             l2933 1BD0  
                           l2925 220A                             l2759 0A92  
                           l2695 0884                             l2687 083A  
                           l2679 0816                             l2791 0E98  
                           l2783 0E1C                             l2775 0DF4  
                           l2767 0D7A                             l2863 0C8A  
                           l2871 0CEA                             l2855 0C44  
                           l2847 0BEC                             l2839 0B80  
                           l2599 0F70                             l2951 1C50  
                           l2943 1C38                             l2935 1BE0  
                           l2927 2214                             l2919 21FC  
                           l2697 088C                             l2689 0854  
                           l2793 0EA4                             l2785 0E4E  
                           l2769 0D8A                             l2873 0CFC  
                           l2865 0C9E                             l2849 0BF8  
                           l2857 0C58                             l2881 10DA  
                           l2953 1C52                             l2945 1C3A  
                           l2937 1C06                             l2929 2216  
                           l2961 1FF6                             l2699 089C  
                           l2795 0EB2                             l2787 0E50  
                           l2779 0E08                             l2875 0D30  
                           l2867 0CB6                             l2859 0C6A  
                           l2891 1144                             l2883 10FE  
                           l2971 2244                             l2955 1C5C  
                           l2947 1C44                             l2939 1C0A  
                           l2963 2012                             l2797 0ED0  
                           l2789 0E5C                             l2877 0D42  
                           l2869 0CD6                             l2893 1158  
                           l2885 1100                             l2981 225C  
                           l2973 224E                             l2949 1C46  
                           l2965 201A                             l2957 1FE0  
                           l2799 0ED2                             l2991 1746  
                           l2895 1170                             l2887 1118  
                           l2879 10D6                             l2983 2266  
                           l2975 2258                             l2967 229E  
                           l2959 1FEE                             l2993 1774  
                           l2897 1184                             l2889 112C  
                           l2985 226E                             l2969 223C  
                           l2977 21DC                             l2995 1784  
                           l2899 11A4                             l2987 2270  
                           l2979 2276                             l2997 17B2  
                           l2989 2272                             l2999 17C2  
                           u2000 0F0A                             u2001 0F06  
                           u2010 0F18                             u2011 0F14  
                           u1300 1D7E                             u2020 0B06  
                           u2100 124A                             u1301 1D7A  
                           u2021 0B02                             u2101 1246  
                           u2110 1774                             u1310 1D9C  
                           u2030 0B4C                             u2111 1770  
                           u1311 1D98                             u2031 0B48  
                           u2120 17B2                             u1320 1DB8  
                           u1400 1AC2                             u2040 0B92  
                           u2200 01EA                             u2121 17AE  
                           u1321 1DB4                             u1401 1ABE  
                           u2041 0B8E                             u2201 01E6  
                           u2130 17D0                             u1330 1268  
                           u1410 1B04                             u2050 0BD8  
                           u2210 021C                             u2131 17CC  
                           u1331 1264                             u1411 1B00  
                           u2051 0BD4                             u2211 0218  
                           u2140 17F0                             u1340 1332  
                           u1420 1B1C                             u1500 15B6  
                           u2060 0C6A                             u2300 0486  
                           u2220 0278                             u2141 17EC  
                           u1341 132E                             u1421 1B18  
                           u1501 15B2                             u2061 0C66  
                           u2301 0482                             u2221 0274  
                           u2150 1840                             u1350 1B9C  
                           u1430 1672                             u1510 15CE  
                           u2070 0CFC                             u2310 04B8  
                           u2230 02AA                             u2151 183C  
                           u1351 1B98                             u1431 166E  
                           u1511 15CA                             u2071 0CF8  
                           u2311 04B4                             u2231 02A6  
                           u1360 212E                             u1440 1696  
                           u1520 161A                             u1600 1904  
                           u2080 0D42                             u2320 04EA  
                           u2240 02DC                             u2160 006A  
                   _BAUD4CONbits 000EE9                             u1361 212A  
                           u1441 1692                             u1521 1616  
                           u1601 1900                             u2081 0D3E  
                           u2321 04E6                             u2241 02D8  
                           u2161 0066                             u1370 219E  
                           u1530 2098                             u1450 16E0  
                           u1610 0F3C                             u2090 123A  
                           u2330 0546                             u2250 0338  
                           u2170 012A                             u1371 219A  
                           u1531 2090                             u1451 16DC  
                           u1611 0F38                             u2091 1236  
                           u2331 0542                             u2251 0334  
                           u2171 0126                             u1700 0730  
                           u1380 21B4                             u1460 16F8  
                           u1620 0F82                             u2340 0578  
                           u2260 036A                             u2180 015C  
                           u2500 1DF8                             u1701 072C  
                           u1381 21B0                             u1461 16F4  
                           u1621 0F7E                             u2341 0574  
                           u2261 0366                             u2181 0158  
                           u2501 1DF4                             u1710 0740  
                           u1470 1744                             u1390 1AA0  
                           u1550 19B6                             u1630 0FC8  
                           u2350 05AA                             u2270 03C6  
                           u2190 018E                             u2510 1E06  
                           u1711 073C                             u1471 1740  
                           u1391 1A9C                             u1551 19B2  
                           u1631 0FC4                             u2351 05A6  
                           u2271 03C2                             u2191 018A  
                           u2511 1E02                             u1800 090C  
                           u1720 0784                             u1480 1548  
                           u1560 19D8                             u1640 100E  
                           u2360 0606                             u2280 03F8  
                           u1801 0908                             u1721 0780  
                           u1481 1544                             u1561 19D4  
                           u1641 100A                             u2361 0602  
                           u2281 03F4                             u1810 0922  
                           u1730 0796                             u1490 156C  
                           u1570 1A1A                             u1650 1054  
                           u2370 061C                             u2290 042A  
                           _T2PR 000FBC                             u1811 091E  
                           u1731 0792                             u1491 1568  
                           u1571 1A16                             u1651 1050  
                           u2371 0618                             u2291 0426  
                           u1900 0A5C                             u1820 0940  
                           u1740 07A6                             u1548 209A  
                           u1580 1A32                             u1660 109A  
                           u1901 0A58                             u1821 093C  
                           u1741 07A2                             u1581 1A2E  
                           u1661 1096                             u1910 0A8A  
                           u1830 0960                             u1750 07E6  
                           u1590 18EC                             u1670 10C0  
                           u1911 0A86                             u1831 095C  
                           u1751 07E2                             u1591 18E8  
                           u1671 10BC                             u2607 110A  
                           u2527 1E12                             u1840 0972  
                           u1760 0826                             u1920 0D8A  
                           u1680 20EE                             u1841 096E  
                           u1761 0822                             u1921 0D86  
                           u1681 20EA                             u2617 1136  
                           u2537 2144                             u1850 09A0  
                           u1770 089C                             u1690 071E  
                           u1930 0D98                             u2490 1DEA  
                           u1851 099C                             u1771 0898  
                           u1691 071A                             u1931 0D94  
                           u2707 0ABC                             u2627 1162  
                           u2547 009A                             u2491 1DE6  
                           u1860 09B6                             u1780 08BE  
                           u1940 0DF4                             u1861 09B2  
                           u1781 08BA                             u1941 0DF0  
                           u2717 0AE8                             u2637 11C4  
                           u2557 00C6                             u1870 09CA  
                           u1790 08E8                             u1950 0E4A  
                           u1871 09C6                             u1791 08E4  
                           u1951 0E46                             u2807 16C0  
                           u2727 0C16                             u2647 11F0  
                           u2567 00EA                             u1880 09E4  
                           u1960 0E94                             u1881 09E0  
                           u1961 0E90                             u2817 1722  
                           u2737 0CA8                             u2657 121C  
                           u2577 0652                             u1890 0A2C  
                           u1970 0EB2                             u1891 0A28  
                           u1971 0EAE                             u2827 1B7C  
                           u2747 18CE                             u2667 1C9E  
                           u2587 067E                             u1980 0EC2  
                           u1981 0EBE                             u2837 2102  
                           u2757 190E                             u2677 1D20  
                           u2597 06BE                             u1990 0ED0  
                           u1991 0ECC                             u2767 193A  
                           u2687 19FC                             u2777 1596  
                           u2697 20C6                             u2787 15F8  
                           u2797 1AE6          __end_of_interrupts_init 22AE  
                _movement_return 0F2C                             _main 1DD8  
                           fsr2h 000FDA                             indf2 000FDF  
                           fsr1l 000FE1                             fsr2l 000FD9  
                           btemp 005D                             _stop 1B20  
                           prodh 000FF4                             prodl 000FF3  
                           start 0044                 __end_of_ADC_init 2276  
                ___fldiv@new_exp 0022           __end_of_color_read_Red 1EF0  
                   ___param_bank 000000                            ?_main 0001  
                          _ADPCH 000F5F                  __end_of___fldiv 0A9E  
                          ?_stop 0016                  __end_of___lwdiv 1DD8  
                          i1l428 0038                            _TMR0H 000FD4  
                          _TMR0L 000FD3                     _square_timer 0057  
                   left_45@count 0020       __end_of_I2C_2_Master_Start 22CE  
     __end_of_I2C_2_Master_Write 22BA                  __end_of_left_45 1746  
                          _color 0043                  __end_of_forward 1A36  
                          _space 184A                            tablat 000FF5  
                __end_of_reverse 1B20                            ttemp5 005E  
                          ttemp6 0061                            ttemp7 0065  
                          stop@i 001A                            status 000FD8  
                          wtemp8 005E          __end_of_color_read_Blue 1FE0  
          _I2C_2_Master_RepStart 22CE                   delay_ms_func@i 0007  
                ?_color_read_Red 0007                  __initialization 1E46  
                   __end_of_main 1E46                     __end_of_stop 1BD0  
               _color_upperbound 00C2        ??_complete_initialisation 0008  
              left_45@left_timer 0021                           ??_main 00C4  
                         ??_stop 001A                    __activetblptr 000000  
        __end_of_movement_return 10D6                     ?_setMotorPWM 0010  
                         _ADRESH 000F64                           _CCPR1H 000FAA  
                         _CCPR2H 000FA6                           _CCPR3H 000F25  
                         _CCPR4H 000F21                           ?_space 001C  
          __end_of_delay_ms_func 20F0                __end_of_READcolor 14F2  
                         _RC0PPS 000E62                           _RC4REG 000EE3  
                         _RE2PPS 000E74                           i1l2195 0022  
                         _RC7PPS 000E69                           _RD5PPS 000E6F  
                         i1l2197 0032                           i1l2199 0036  
                         _RE4PPS 000E76                           _RD6PPS 000E70  
                         _RG6PPS 000E88                 ?_interrupts_init 0001  
       __end_of_color_click_init 2164                           _RX4PPS 000E15  
                         _TX4REG 000EE4                 __end_of___xxtofl 0F2C  
                         _LowISR 0018                    ??_Timer0_init 0003  
                   _CCPTMRS0bits 000FAD                           ___flge 1746  
                         ___wmul 21B6                        ??___fldiv 0019  
                      ??___lwdiv 000D                 ??_buggyLEDs_init 0003  
                         clear_0 1E84                           clear_1 1E90  
                  ?_custom_delay 0003                           _motorL 00B9  
                         _motorR 00B0                           isa$std 000001  
                      ??_left_45 0023                 __end_of_right_45 161C  
                   __pdataCOMRAM 0057                        ??_forward 0020  
               __end_of_movement 0D78                           tblptrh 000FF7  
                         tblptrl 000FF6                           tblptru 000FF8  
                      ?_ADC_init 0001                        ??_reverse 0020  
                   ?_return_home 0031                           stop@mL 0016  
                         stop@mR 0018                     ?_timer_reset 0001  
              ??_initDCmotorsPWM 0005  __end_of_complete_initialisation 206E  
   __end_of_buggy_color_response 0704                       ___flge@ff1 0003  
                     ___flge@ff2 0007                     ___xxtofl@arg 000D  
                   ___xxtofl@exp 000C                     ___xxtofl@val 0003  
                     __accesstop 0060          __end_of__initialization 1E96  
       __end_of_color_read_Clear 1F90         __end_of_color_read_Green 1F40  
         ?_I2C_2_Master_RepStart 0001                    ___rparam_used 000001  
               ?_color_read_Blue 0007                   __pcstackCOMRAM 0001  
                   __pidataBANK0 22DE                   ??_custom_delay 0005  
                  __end_of_space 194C              __end_of_Timer0_init 225C  
                     ??_ADC_init 0003                 ?_movement_return 002C  
                        ??_space 0020                       _card_count 0042  
                     __pbssBANK0 0060                          ?_LowISR 0001  
              _color_writetoaddr 221C                     _T2CLKCONbits 000FBF  
                        ?___flge 0003               ?_color_writetoaddr 0005  
                        ?___wmul 0003              ??_color_writetoaddr 0006  
                      ?___xxtofl 0003                          _SP4BRGH 000EE6  
                        _SP4BRGL 000EE5                          _SSP2ADD 000ED6  
                        _SSP2BUF 000ED5           color_writetoaddr@value 0005  
               ??_color_read_Red 0009        __end_of_color_writetoaddr 223C  
                      _ADREFbits 000F58               _I2C_2_Master_Start 22C4  
                     _initUSART4 21FC               _I2C_2_Master_Write 22AE  
                      ?_right_45 001C                          __Hparam 0000  
                     _left_timer 005B                          __Lparam 0000  
              color_read_Red@tmp 000C                        ?_movement 0026  
                    _Timer0_init 223C                          ___fldiv 0704  
            ?_I2C_2_Master_Start 0001                          ___lwdiv 1D64  
            ?_I2C_2_Master_Write 0001             _buggy_color_response 0048  
                        __pcinit 1E46                          __ramtop 0E00  
                        __ptext0 1DD8                          __ptext1 202C  
                        __ptext2 21DC                          __ptext3 1FE0  
                        __ptext4 229E                          __ptext5 21FC  
                        __ptext6 1BD0                          __ptext7 2130  
                        __ptext8 221C                          __ptext9 2164  
                        _left_45 161C                        _T2CONbits 000FBD  
                        _forward 194C                       ??___xxtofl 0007  
                  ?_reverse_pink 0026                        _T2HLTbits 000FBE  
                        _reverse 1A36                    right_45@count 0020  
           ??_I2C_2_Master_Start 0004             ??_I2C_2_Master_Write 0004  
           end_of_initialization 1E96             __end_of_custom_delay 2130  
              ?_color_click_init 0001                        _READcolor 13B8  
                     ??_right_45 0023               ??_color_click_init 0007  
                        space@mL 001C                          space@mR 001E  
                     ??_movement 002B                          postdec1 000FE5  
                        postdec2 000FDD                          postinc0 000FEE  
                        postinc2 000FDE                       _motor_init 1FE0  
          ?_buggy_color_response 0037                  _initDCmotorsPWM 1BD0  
                      _PORTFbits 000F8E               setMotorPWM@negDuty 0015  
                 ??_reverse_pink 002A                    ___xxtofl@sign 000B  
                      _TRISAbits 000F81               setMotorPWM@posDuty 0014  
                      _TRISCbits 000F83                        _TRISDbits 000F84  
                      _TRISEbits 000F85                        _TRISFbits 000F86  
                      _TRISGbits 000F87                        _TRISHbits 000F88  
                    ___fldiv@grs 0024                       _ports_init 21DC  
                    ___fldiv@rem 001D         color_writetoaddr@address 0006  
        ??_I2C_2_Master_RepStart 0004                      _CCP1CONbits 000FAB  
              ?_color_read_Clear 0007                      _CCP2CONbits 000FA7  
              ?_color_read_Green 0007                       ?_READcolor 002A  
                    _CCP3CONbits 000F26                      ?_initUSART4 0001  
                    _CCP4CONbits 000F22               ??_color_read_Clear 0009  
       ?_complete_initialisation 0001               ??_color_read_Green 0009  
                 __end_of_LowISR 0044                   __end_of___flge 184A  
                 __end_of___wmul 21DC                    __pidataCOMRAM 22D8  
            color_read_Clear@tmp 000C              start_initialization 1E46  
         buggy_color_response@mL 0037           buggy_color_response@mR 0039  
            color_read_Green@tmp 000C                         ??_LowISR 0001  
                 _reverse_yellow 1C60          __end_of_initDCmotorsPWM 1C60  
                       ??___flge 000B           ??_buggy_color_response 003D  
                       ??___wmul 0007                      ?_motor_init 0003  
                     READcolor@c 002A                      __pdataBANK0 00C2  
                    _card_memory 0088                        ___fldiv@a 0015  
                      ___fldiv@b 0011                      __pbssCOMRAM 003F  
                  __pcstackBANK0 00C4                      ?_ports_init 0001  
                  _delay_ms_func 20B0           __end_of_reverse_yellow 1CE2  
                    ??_READcolor 002C             __end_of_reverse_pink 1D64  
               ___lwdiv@dividend 0009                     ?_Timer0_init 0001  
                       ?___fldiv 0011                         ?___lwdiv 0009  
                     right_45@mL 001C                       right_45@mR 001E  
                    __pintcodelo 0018                     _custom_delay 20F0  
           I2C_2_Master_Read@ack 0005                ??_interrupts_init 0003  
           I2C_2_Master_Read@tmp 0006                         ?_left_45 001C  
                       ?_forward 001C                _I2C_2_Master_Idle 218E  
              _I2C_2_Master_Init 2164                _I2C_2_Master_Read 206E  
              _I2C_2_Master_Stop 22BA                         _ADC_init 225C  
                       ?_reverse 001C               ?_I2C_2_Master_Idle 0001  
             ?_I2C_2_Master_Init 0001               ?_I2C_2_Master_Read 0001  
                  ??_setMotorPWM 0012               ?_I2C_2_Master_Stop 0001  
               ___lwdiv@quotient 000D         initDCmotorsPWM@PWMperiod 0003  
                 ?_delay_ms_func 0003              ??_I2C_2_Master_Idle 0003  
            ??_I2C_2_Master_Init 0003              ??_I2C_2_Master_Read 0004  
                 ___wmul@product 0007                         _LATAbits 000F79  
            ??_I2C_2_Master_Stop 0004                         _LATCbits 000F7B  
                       _LATDbits 000F7C                       movement@mL 0026  
                       _LATEbits 000F7D                       movement@mR 0028  
                       _LATFbits 000F7E                   reverse_pink@mL 0026  
                       _LATGbits 000F7F                   reverse_pink@mR 0028  
                       _LATHbits 000F80                  ?_reverse_yellow 0026  
                       _IPR0bits 000E1F                         _PIE0bits 000E29  
                       i1u115_20 0032                         i1u115_21 002E  
              movement_return@mL 002C                movement_return@mR 002E  
                       _PIR0bits 000E33                         _PIR4bits 000E37  
               ?_initDCmotorsPWM 0003                         _SSP2CON2 000EDA  
                       _SSP2STAT 000ED8                        _timer_val 003F  
                     _ADCON0bits 000F60        __end_of_I2C_2_Master_Idle 21B6  
      __end_of_I2C_2_Master_Init 218E        __end_of_I2C_2_Master_Read 20B0  
              ___wmul@multiplier 0003        __end_of_I2C_2_Master_Stop 22C4  
                   setMotorPWM@m 0010      I2C_2_Master_Write@data_byte 0004  
                      left_45@mL 001C                        left_45@mR 001E  
              ??_color_read_Blue 0009                    ??_return_home 0035  
                  ??_timer_reset 0003                        copy_data0 1E72  
                  movement@count 002A    __end_of_I2C_2_Master_RepStart 22D8  
             color_read_Blue@tmp 000C              __end_of_setMotorPWM 13B8  
                   ??_initUSART4 0003            buggy_color_response@c 003B  
                       __Hrparam 0000                         __Lrparam 0000  
                      forward@mL 001C                        forward@mR 001E  
              ??_movement_return 0031                       _ANSELDbits 000EA7  
                     _ANSELFbits 000EB4                         ___xxtofl 0D78  
           movement_return@count 0030                       _T0CON0bits 000FD5  
                     _T0CON1bits 000FD6                   _buggyLEDs_init 2276  
                ___lwdiv@divisor 000B               __end_of_initUSART4 221C  
                ___lwdiv@counter 000F                  ??_delay_ms_func 0005  
                       __ptext10 2276                         __ptext11 223C  
                       __ptext20 20B0                         __ptext12 225C  
                       __ptext21 0A9E                         __ptext13 0048  
                       __ptext30 20F0                         __ptext22 184A  
                       __ptext14 228C                         __ptext31 1746  
                       __ptext23 14F2                         __ptext15 10D6  
                       __ptext40 22CE                         __ptext32 13B8  
                       __ptext24 1A36                         __ptext16 0F2C  
                       __ptext41 206E                         __ptext33 1EA0  
                       __ptext25 161C                         __ptext17 1C60  
                       __ptext42 218E                         __ptext34 1EF0  
                       __ptext26 1B20                         __ptext18 1CE2  
                       __ptext43 0D78                         __ptext35 1F40  
                       __ptext27 124C                         __ptext19 194C  
                       __ptext44 0704                         __ptext36 1F90  
                       __ptext28 21B6                         __ptext37 22AE  
                       __ptext29 1D64                         __ptext38 22BA  
                       __ptext39 22C4                        right_45@i 0025  
                   _SSP2CON1bits 000ED9                     _SSP2CON2bits 000EDA  
            __end_of_return_home 124C              __end_of_timer_reset 229E  
                       _right_45 14F2                        reverse@mL 001C  
                      reverse@mR 001E                         _movement 0A9E  
                       isa$xinst 000000                       _RC4STAbits 000EE7  
                       int$flags 005D                     ??_motor_init 0007  
                       left_45@i 0025           __end_of_buggyLEDs_init 228C  
                     _INTCONbits 000FF2                     _reverse_pink 1CE2  
                   ??_ports_init 0003                      _setMotorPWM 124C  
                       intlevel1 0000               __end_of_motor_init 202C  
                    _right_timer 0059                 reverse_yellow@mL 0026  
               reverse_yellow@mR 0028                  _interrupts_init 229E  
                   _timer_memory 0060               __end_of_ports_init 21FC  
                   motor_init@mL 0003                     motor_init@mR 0005  
               _color_click_init 2130              right_45@right_timer 0021  
                ?_buggyLEDs_init 0001                       _SSP2DATPPS 000E1D  
                     _SSP2CLKPPS 000E1C                      _timer_index 0041  
                    _return_home 10D6                      _timer_reset 228C  
               ??_reverse_yellow 002A                       _TX4STAbits 000EE8  
                  custom_delay@i 0006  
