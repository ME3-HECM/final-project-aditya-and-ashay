

Microchip MPLAB XC8 Assembler V2.40 build 20220703182018 
                                                                                               Sun Mar 12 14:43:07 2023

Microchip MPLAB XC8 C Compiler v2.40 (Free license) build 20220703182018 Og1 
     1                           	processor	18F67K40
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     6                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1
    12                           	psect	text3,global,reloc=2,class=CODE,delta=1
    13                           	psect	text4,global,reloc=2,class=CODE,delta=1
    14                           	psect	text5,global,reloc=2,class=CODE,delta=1
    15                           	psect	text6,global,reloc=2,class=CODE,delta=1
    16                           	psect	text7,global,reloc=2,class=CODE,delta=1
    17                           	psect	text8,global,reloc=2,class=CODE,delta=1
    18                           	psect	text9,global,reloc=2,class=CODE,delta=1
    19                           	psect	text10,global,reloc=2,class=CODE,delta=1
    20                           	psect	text11,global,reloc=2,class=CODE,delta=1
    21                           	psect	text12,global,reloc=2,class=CODE,delta=1
    22                           	psect	text13,global,reloc=2,class=CODE,delta=1
    23                           	psect	text14,global,reloc=2,class=CODE,delta=1
    24                           	psect	text15,global,reloc=2,class=CODE,delta=1
    25                           	psect	text16,global,reloc=2,class=CODE,delta=1
    26                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=1
    27                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=1
    28                           	psect	text19,global,reloc=2,class=CODE,delta=1
    29                           	psect	text20,global,reloc=2,class=CODE,delta=1,group=1
    30                           	psect	text21,global,reloc=2,class=CODE,delta=1,group=1
    31                           	psect	text22,global,reloc=2,class=CODE,delta=1,group=1
    32                           	psect	text23,global,reloc=2,class=CODE,delta=1
    33                           	psect	text24,global,reloc=2,class=CODE,delta=1
    34                           	psect	text25,global,reloc=2,class=CODE,delta=1
    35                           	psect	text26,global,reloc=2,class=CODE,delta=1
    36                           	psect	text27,global,reloc=2,class=CODE,delta=1
    37                           	psect	text28,global,reloc=2,class=CODE,delta=1
    38                           	psect	text29,global,reloc=2,class=CODE,delta=1
    39                           	psect	text30,global,reloc=2,class=CODE,delta=1
    40                           	psect	text31,global,reloc=2,class=CODE,delta=1
    41                           	psect	text32,global,reloc=2,class=CODE,delta=1
    42                           	psect	text33,global,reloc=2,class=CODE,delta=1
    43                           	psect	text34,global,reloc=2,class=CODE,delta=1
    44                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    45                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    46                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    47                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    48                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    49                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    50   000000                     
    51                           ; Generated 06/04/2022 GMT
    52                           ; 
    53                           ; Copyright Â© 2022, Microchip Technology Inc. and its subsidiaries ("Microchip")
    54                           ; All rights reserved.
    55                           ; 
    56                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    57                           ; 
    58                           ; Redistribution and use in source and binary forms, with or without modification, are
    59                           ; permitted provided that the following conditions are met:
    60                           ; 
    61                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    62                           ;        conditions and the following disclaimer.
    63                           ; 
    64                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    65                           ;        of conditions and the following disclaimer in the documentation and/or other
    66                           ;        materials provided with the distribution. Publication is not required when
    67                           ;        this file is used in an embedded application.
    68                           ; 
    69                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    70                           ;        software without specific prior written permission.
    71                           ; 
    72                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    73                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    74                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    75                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    76                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    77                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    78                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    79                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    80                           ; 
    81                           ; 
    82                           ; Code-generator required, PIC18F67K40 Definitions
    83                           ; 
    84                           ; SFR Addresses
    85   000000                     _TRISBbits	set	3970
    86   000000                     _TRISAbits	set	3969
    87   000000                     _TRISFbits	set	3974
    88   000000                     _LATFbits	set	3966
    89   000000                     _LATHbits	set	3968
    90   000000                     _LATGbits	set	3967
    91   000000                     _LATEbits	set	3965
    92   000000                     _TRISGbits	set	3975
    93   000000                     _TRISEbits	set	3973
    94   000000                     _TX4REG	set	3812
    95   000000                     _RC4STAbits	set	3815
    96   000000                     _SP4BRGH	set	3814
    97   000000                     _TRISCbits	set	3971
    98   000000                     _PORTFbits	set	3982
    99   000000                     _SSP2CON2bits	set	3802
   100   000000                     _RX4PPS	set	3605
   101   000000                     _SSP2CLKPPS	set	3612
   102   000000                     _SSP2DATPPS	set	3613
   103   000000                     _ANSELDbits	set	3751
   104   000000                     _SSP2ADD	set	3798
   105   000000                     _SSP2CON1bits	set	3801
   106   000000                     _RC4REG	set	3811
   107   000000                     _SP4BRGL	set	3813
   108   000000                     _TX4STAbits	set	3816
   109   000000                     _BAUD4CONbits	set	3817
   110   000000                     _LATDbits	set	3964
   111   000000                     _SSP2CON2	set	3802
   112   000000                     _TRISDbits	set	3972
   113   000000                     _SSP2STAT	set	3800
   114   000000                     _ANSELFbits	set	3764
   115   000000                     _SSP2BUF	set	3797
   116   000000                     _IPR0bits	set	3615
   117   000000                     _PIE0bits	set	3625
   118   000000                     _PIE4bits	set	3629
   119   000000                     _PIR4bits	set	3639
   120   000000                     _RC0PPS	set	3682
   121   000000                     _RD5PPS	set	3695
   122   000000                     _RE2PPS	set	3700
   123   000000                     _RD6PPS	set	3696
   124   000000                     _T2PR	set	4028
   125   000000                     _T2CONbits	set	4029
   126   000000                     _CCPR2H	set	4006
   127   000000                     _CCPR1H	set	4010
   128   000000                     _RC7PPS	set	3689
   129   000000                     _LATCbits	set	3963
   130   000000                     _CCPR4H	set	3873
   131   000000                     _CCPR3H	set	3877
   132   000000                     _PIR0bits	set	3635
   133   000000                     _TRISHbits	set	3976
   134   000000                     _RE4PPS	set	3702
   135   000000                     _RG6PPS	set	3720
   136   000000                     _ANSELBbits	set	3738
   137   000000                     _INTCONbits	set	4082
   138   000000                     _T2CLKCONbits	set	4031
   139   000000                     _T2HLTbits	set	4030
   140   000000                     _CCP1CONbits	set	4011
   141   000000                     _CCPTMRS0bits	set	4013
   142   000000                     _CCP2CONbits	set	4007
   143   000000                     _LATAbits	set	3961
   144   000000                     _CCP3CONbits	set	3878
   145   000000                     _CCP4CONbits	set	3874
   146                           
   147                           ; #config settings
   148                           
   149                           	psect	cinit
   150   001C22                     __pcinit:
   151                           	callstack 0
   152   001C22                     start_initialization:
   153                           	callstack 0
   154   001C22                     __initialization:
   155                           	callstack 0
   156                           
   157                           ; Clear objects allocated to BANK0 (98 bytes)
   158   001C22  EE00  F060         	lfsr	0,__pbssBANK0
   159   001C26  0E62               	movlw	98
   160   001C28                     clear_0:
   161   001C28  6AEE               	clrf	postinc0,c
   162   001C2A  06E8               	decf	wreg,f,c
   163   001C2C  E1FD               	bnz	clear_0
   164                           
   165                           ; Clear objects allocated to COMRAM (30 bytes)
   166   001C2E  EE00  F03A         	lfsr	0,__pbssCOMRAM
   167   001C32  0E1E               	movlw	30
   168   001C34                     clear_1:
   169   001C34  6AEE               	clrf	postinc0,c
   170   001C36  06E8               	decf	wreg,f,c
   171   001C38  E1FD               	bnz	clear_1
   172   001C3A                     end_of_initialization:
   173                           	callstack 0
   174   001C3A                     __end_of__initialization:
   175                           	callstack 0
   176   001C3A  9058               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   177   001C3C  9258               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   178   001C3E  0100               	movlb	0
   179   001C40  EF46  F00C         	goto	_main	;jump to C main() function
   180                           
   181                           	psect	bssCOMRAM
   182   00003A                     __pbssCOMRAM:
   183                           	callstack 0
   184   00003A                     _color_upperbound:
   185                           	callstack 0
   186   00003A                     	ds	2
   187   00003C                     _color_lowerbound:
   188                           	callstack 0
   189   00003C                     	ds	2
   190   00003E                     _TxBufReadCnt:
   191                           	callstack 0
   192   00003E                     	ds	1
   193   00003F                     _TxBufWriteCnt:
   194                           	callstack 0
   195   00003F                     	ds	1
   196   000040                     _RxBufReadCnt:
   197                           	callstack 0
   198   000040                     	ds	1
   199   000041                     _RxBufWriteCnt:
   200                           	callstack 0
   201   000041                     	ds	1
   202   000042                     _read_color_flag:
   203                           	callstack 0
   204   000042                     	ds	1
   205   000043                     _start_flag:
   206                           	callstack 0
   207   000043                     	ds	1
   208   000044                     _color:
   209                           	callstack 0
   210   000044                     	ds	20
   211                           
   212                           	psect	bssBANK0
   213   000060                     __pbssBANK0:
   214                           	callstack 0
   215   000060                     _EUSART4TXbuf:
   216                           	callstack 0
   217   000060                     	ds	60
   218   00009C                     _EUSART4RXbuf:
   219                           	callstack 0
   220   00009C                     	ds	20
   221   0000B0                     _motorR:
   222                           	callstack 0
   223   0000B0                     	ds	9
   224   0000B9                     _motorL:
   225                           	callstack 0
   226   0000B9                     	ds	9
   227                           
   228                           	psect	cstackCOMRAM
   229   000001                     __pcstackCOMRAM:
   230                           	callstack 0
   231   000001                     ??_I2C_2_Master_Idle:
   232   000001                     ?___wmul:
   233                           	callstack 0
   234   000001                     ?___xxtofl:
   235                           	callstack 0
   236   000001                     initDCmotorsPWM@PWMperiod:
   237                           	callstack 0
   238   000001                     motor_init@mL:
   239                           	callstack 0
   240   000001                     ___wmul@multiplier:
   241                           	callstack 0
   242   000001                     ___flge@ff1:
   243                           	callstack 0
   244   000001                     ___xxtofl@val:
   245                           	callstack 0
   246                           
   247                           ; 4 bytes @ 0x0
   248   000001                     	ds	1
   249   000002                     ??_I2C_2_Master_Read:
   250   000002                     I2C_2_Master_Write@data_byte:
   251                           	callstack 0
   252                           
   253                           ; 1 bytes @ 0x1
   254   000002                     	ds	1
   255   000003                     I2C_2_Master_Read@ack:
   256                           	callstack 0
   257   000003                     color_writetoaddr@value:
   258                           	callstack 0
   259   000003                     motor_init@mR:
   260                           	callstack 0
   261   000003                     ___wmul@multiplicand:
   262                           	callstack 0
   263                           
   264                           ; 2 bytes @ 0x2
   265   000003                     	ds	1
   266   000004                     I2C_2_Master_Read@tmp:
   267                           	callstack 0
   268   000004                     color_writetoaddr@address:
   269                           	callstack 0
   270                           
   271                           ; 1 bytes @ 0x3
   272   000004                     	ds	1
   273   000005                     ??_color_click_init:
   274   000005                     ??___xxtofl:
   275   000005                     ?_color_read_Red:
   276                           	callstack 0
   277   000005                     ?_color_read_Blue:
   278                           	callstack 0
   279   000005                     ?_color_read_Green:
   280                           	callstack 0
   281   000005                     ?_color_read_Clear:
   282                           	callstack 0
   283   000005                     ___wmul@product:
   284                           	callstack 0
   285   000005                     ___flge@ff2:
   286                           	callstack 0
   287                           
   288                           ; 4 bytes @ 0x4
   289   000005                     	ds	2
   290   000007                     ??_color_read_Red:
   291   000007                     ??_color_read_Blue:
   292   000007                     ??_color_read_Green:
   293   000007                     ??_color_read_Clear:
   294   000007                     ?___lwdiv:
   295                           	callstack 0
   296   000007                     ___lwdiv@dividend:
   297                           	callstack 0
   298                           
   299                           ; 2 bytes @ 0x6
   300   000007                     	ds	2
   301   000009                     ??___flge:
   302   000009                     ___xxtofl@sign:
   303                           	callstack 0
   304   000009                     ___lwdiv@divisor:
   305                           	callstack 0
   306                           
   307                           ; 2 bytes @ 0x8
   308   000009                     	ds	1
   309   00000A                     ___xxtofl@exp:
   310                           	callstack 0
   311   00000A                     color_read_Red@tmp:
   312                           	callstack 0
   313   00000A                     color_read_Blue@tmp:
   314                           	callstack 0
   315   00000A                     color_read_Green@tmp:
   316                           	callstack 0
   317   00000A                     color_read_Clear@tmp:
   318                           	callstack 0
   319                           
   320                           ; 2 bytes @ 0x9
   321   00000A                     	ds	1
   322   00000B                     ___lwdiv@quotient:
   323                           	callstack 0
   324   00000B                     ___xxtofl@arg:
   325                           	callstack 0
   326                           
   327                           ; 4 bytes @ 0xA
   328   00000B                     	ds	1
   329   00000C                     READcolor@c:
   330                           	callstack 0
   331                           
   332                           ; 2 bytes @ 0xB
   333   00000C                     	ds	1
   334   00000D                     ___lwdiv@counter:
   335                           	callstack 0
   336                           
   337                           ; 1 bytes @ 0xC
   338   00000D                     	ds	1
   339   00000E                     setMotorPWM@m:
   340                           	callstack 0
   341                           
   342                           ; 2 bytes @ 0xD
   343   00000E                     	ds	1
   344   00000F                     ?___fldiv:
   345                           	callstack 0
   346   00000F                     ___fldiv@b:
   347                           	callstack 0
   348                           
   349                           ; 4 bytes @ 0xE
   350   00000F                     	ds	1
   351   000010                     ??_setMotorPWM:
   352                           
   353                           ; 1 bytes @ 0xF
   354   000010                     	ds	2
   355   000012                     setMotorPWM@posDuty:
   356                           	callstack 0
   357                           
   358                           ; 1 bytes @ 0x11
   359   000012                     	ds	1
   360   000013                     setMotorPWM@negDuty:
   361                           	callstack 0
   362   000013                     ___fldiv@a:
   363                           	callstack 0
   364                           
   365                           ; 4 bytes @ 0x12
   366   000013                     	ds	1
   367   000014                     stop@mL:
   368                           	callstack 0
   369                           
   370                           ; 2 bytes @ 0x13
   371   000014                     	ds	2
   372   000016                     stop@mR:
   373                           	callstack 0
   374                           
   375                           ; 2 bytes @ 0x15
   376   000016                     	ds	1
   377   000017                     ??___fldiv:
   378                           
   379                           ; 1 bytes @ 0x16
   380   000017                     	ds	1
   381   000018                     stop@i:
   382                           	callstack 0
   383                           
   384                           ; 2 bytes @ 0x17
   385   000018                     	ds	2
   386   00001A                     forward@mL:
   387                           	callstack 0
   388   00001A                     reverse@mL:
   389                           	callstack 0
   390   00001A                     left_45@mL:
   391                           	callstack 0
   392   00001A                     right_45@mL:
   393                           	callstack 0
   394   00001A                     space@mL:
   395                           	callstack 0
   396                           
   397                           ; 2 bytes @ 0x19
   398   00001A                     	ds	1
   399   00001B                     ___fldiv@rem:
   400                           	callstack 0
   401                           
   402                           ; 4 bytes @ 0x1A
   403   00001B                     	ds	1
   404   00001C                     forward@mR:
   405                           	callstack 0
   406   00001C                     reverse@mR:
   407                           	callstack 0
   408   00001C                     left_45@mR:
   409                           	callstack 0
   410   00001C                     right_45@mR:
   411                           	callstack 0
   412   00001C                     space@mR:
   413                           	callstack 0
   414                           
   415                           ; 2 bytes @ 0x1B
   416   00001C                     	ds	2
   417   00001E                     ??_space:
   418   00001E                     left_45@count:
   419                           	callstack 0
   420   00001E                     right_45@count:
   421                           	callstack 0
   422                           
   423                           ; 2 bytes @ 0x1D
   424   00001E                     	ds	1
   425   00001F                     ___fldiv@sign:
   426                           	callstack 0
   427                           
   428                           ; 1 bytes @ 0x1E
   429   00001F                     	ds	1
   430   000020                     ??_left_45:
   431   000020                     ??_right_45:
   432   000020                     ___fldiv@new_exp:
   433                           	callstack 0
   434                           
   435                           ; 2 bytes @ 0x1F
   436   000020                     	ds	2
   437   000022                     left_45@i:
   438                           	callstack 0
   439   000022                     right_45@i:
   440                           	callstack 0
   441   000022                     ___fldiv@grs:
   442                           	callstack 0
   443                           
   444                           ; 4 bytes @ 0x21
   445   000022                     	ds	2
   446   000024                     instructions@mL:
   447                           	callstack 0
   448                           
   449                           ; 2 bytes @ 0x23
   450   000024                     	ds	2
   451   000026                     ___fldiv@bexp:
   452                           	callstack 0
   453   000026                     instructions@mR:
   454                           	callstack 0
   455                           
   456                           ; 2 bytes @ 0x25
   457   000026                     	ds	1
   458   000027                     ___fldiv@aexp:
   459                           	callstack 0
   460                           
   461                           ; 1 bytes @ 0x26
   462   000027                     	ds	1
   463   000028                     colourcards_normaliseRGBC@c:
   464                           	callstack 0
   465   000028                     instructions@count:
   466                           	callstack 0
   467                           
   468                           ; 2 bytes @ 0x27
   469   000028                     	ds	2
   470   00002A                     ??_instructions:
   471   00002A                     colourcards_normaliseRGBC@R:
   472                           	callstack 0
   473                           
   474                           ; 2 bytes @ 0x29
   475   00002A                     	ds	2
   476   00002C                     colourcards_normaliseRGBC@G:
   477                           	callstack 0
   478                           
   479                           ; 2 bytes @ 0x2B
   480   00002C                     	ds	2
   481   00002E                     colourcards_normaliseRGBC@B:
   482                           	callstack 0
   483                           
   484                           ; 2 bytes @ 0x2D
   485   00002E                     	ds	2
   486   000030                     colourcards_normaliseRGBC@C:
   487                           	callstack 0
   488                           
   489                           ; 2 bytes @ 0x2F
   490   000030                     	ds	2
   491   000032                     buggy_color_response@mL:
   492                           	callstack 0
   493   000032                     calibrate_upperbound@c:
   494                           	callstack 0
   495                           
   496                           ; 2 bytes @ 0x31
   497   000032                     	ds	2
   498   000034                     ??_calibrate_upperbound:
   499   000034                     buggy_color_response@mR:
   500                           	callstack 0
   501                           
   502                           ; 2 bytes @ 0x33
   503   000034                     	ds	2
   504   000036                     buggy_color_response@c:
   505                           	callstack 0
   506                           
   507                           ; 2 bytes @ 0x35
   508   000036                     	ds	2
   509   000038                     ??_buggy_color_response:
   510                           
   511                           ; 1 bytes @ 0x37
   512   000038                     	ds	2
   513   00003A                     
   514                           ; 1 bytes @ 0x39
   515 ;;
   516 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   517 ;;
   518 ;; *************** function _main *****************
   519 ;; Defined at:
   520 ;;		line 17 in file "main.c"
   521 ;; Parameters:    Size  Location     Type
   522 ;;		None
   523 ;; Auto vars:     Size  Location     Type
   524 ;;		None
   525 ;; Return value:  Size  Location     Type
   526 ;;                  1    wreg      void 
   527 ;; Registers used:
   528 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   529 ;; Tracked objects:
   530 ;;		On entry : 0/0
   531 ;;		On exit  : 0/0
   532 ;;		Unchanged: 0/0
   533 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   534 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   535 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   536 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   537 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   538 ;;Total ram usage:        0 bytes
   539 ;; Hardware stack levels required when called: 7
   540 ;; This function calls:
   541 ;;		_buggyLEDs_init
   542 ;;		_buggy_color_response
   543 ;;		_calibrate_upperbound
   544 ;;		_color_click_init
   545 ;;		_initDCmotorsPWM
   546 ;;		_initUSART4
   547 ;;		_motor_init
   548 ;; This function is called by:
   549 ;;		Startup code after reset
   550 ;; This function uses a non-reentrant model
   551 ;;
   552                           
   553                           	psect	text0
   554   00188C                     __ptext0:
   555                           	callstack 0
   556   00188C                     _main:
   557                           	callstack 24
   558   00188C                     
   559                           ;main.c: 19:     initDCmotorsPWM(99);
   560   00188C  0E00               	movlw	0
   561   00188E  6E02               	movwf	(initDCmotorsPWM@PWMperiod+1)^0,c
   562   001890  0E63               	movlw	99
   563   001892  6E01               	movwf	initDCmotorsPWM@PWMperiod^0,c
   564   001894  ECFE  F00B         	call	_initDCmotorsPWM	;wreg free
   565   001898                     
   566                           ;main.c: 20:     motor_init(&motorL,&motorR);
   567   001898  0EB9               	movlw	low _motorL
   568   00189A  6E01               	movwf	motor_init@mL^0,c
   569   00189C  0E00               	movlw	high _motorL
   570   00189E  6E02               	movwf	(motor_init@mL+1)^0,c
   571   0018A0  0EB0               	movlw	low _motorR
   572   0018A2  6E03               	movwf	motor_init@mR^0,c
   573   0018A4  0E00               	movlw	high _motorR
   574   0018A6  6E04               	movwf	(motor_init@mR+1)^0,c
   575   0018A8  EC5B  F00D         	call	_motor_init	;wreg free
   576   0018AC                     
   577                           ;main.c: 21:     buggyLEDs_init();
   578   0018AC  EC42  F00E         	call	_buggyLEDs_init	;wreg free
   579   0018B0                     
   580                           ;main.c: 22:     initUSART4();
   581   0018B0  EC22  F00E         	call	_initUSART4	;wreg free
   582   0018B4                     
   583                           ;main.c: 23:     color_click_init();
   584   0018B4  ECA2  F00D         	call	_color_click_init	;wreg free
   585   0018B8                     
   586                           ;main.c: 28:     TRISGbits.TRISG1 = 0;
   587   0018B8  9287               	bcf	135,1,c	;volatile
   588   0018BA                     
   589                           ;main.c: 29:     TRISAbits.TRISA4 = 0;
   590   0018BA  9881               	bcf	129,4,c	;volatile
   591   0018BC                     
   592                           ;main.c: 30:     TRISFbits.TRISF7 = 0;
   593   0018BC  9E86               	bcf	134,7,c	;volatile
   594   0018BE                     
   595                           ;main.c: 32:     LATGbits.LATG1 = 1;
   596   0018BE  827F               	bsf	127,1,c	;volatile
   597   0018C0                     
   598                           ;main.c: 33:     LATAbits.LATA4 = 1;
   599   0018C0  8879               	bsf	121,4,c	;volatile
   600   0018C2                     
   601                           ;main.c: 34:     LATFbits.LATF7 = 1;
   602   0018C2  8E7E               	bsf	126,7,c	;volatile
   603   0018C4                     
   604                           ;main.c: 36:     TRISFbits.TRISF2 = 1;
   605   0018C4  8486               	bsf	134,2,c	;volatile
   606   0018C6                     
   607                           ;main.c: 37:     ANSELFbits.ANSELF2 = 0;
   608   0018C6  010E               	movlb	14	; () banked
   609   0018C8  95B4               	bcf	180,2,b	;volatile
   610   0018CA                     
   611                           ; BSR set to: 14
   612                           ;main.c: 39:     TRISFbits.TRISF3 = 1;
   613   0018CA  8686               	bsf	134,3,c	;volatile
   614   0018CC                     
   615                           ; BSR set to: 14
   616                           ;main.c: 40:     ANSELFbits.ANSELF3 = 0;
   617   0018CC  97B4               	bcf	180,3,b	;volatile
   618   0018CE                     
   619                           ; BSR set to: 14
   620                           ;main.c: 42:     TRISDbits.TRISD7 = 0;
   621   0018CE  9E84               	bcf	132,7,c	;volatile
   622   0018D0                     
   623                           ; BSR set to: 14
   624                           ;main.c: 43:     LATDbits.LATD7 = 0;
   625   0018D0  9E7C               	bcf	124,7,c	;volatile
   626   0018D2                     
   627                           ; BSR set to: 14
   628                           ;main.c: 44:     start_flag = 0;
   629   0018D2  0E00               	movlw	0
   630   0018D4  6E43               	movwf	_start_flag^0,c
   631   0018D6                     
   632                           ; BSR set to: 14
   633                           ;main.c: 46:     if (start_flag = 0) {
   634   0018D6  0E00               	movlw	0
   635   0018D8  6E43               	movwf	_start_flag^0,c
   636   0018DA                     
   637                           ; BSR set to: 14
   638                           ;main.c: 52:     if (start_flag = 1){
   639   0018DA  0E01               	movlw	1
   640   0018DC  6E43               	movwf	_start_flag^0,c
   641   0018DE                     l2828:
   642                           
   643                           ;main.c: 55:        buggy_color_response(&motorL,&motorR,&color);
   644   0018DE  0EB9               	movlw	low _motorL
   645   0018E0  6E32               	movwf	buggy_color_response@mL^0,c
   646   0018E2  0E00               	movlw	high _motorL
   647   0018E4  6E33               	movwf	(buggy_color_response@mL+1)^0,c
   648   0018E6  0EB0               	movlw	low _motorR
   649   0018E8  6E34               	movwf	buggy_color_response@mR^0,c
   650   0018EA  0E00               	movlw	high _motorR
   651   0018EC  6E35               	movwf	(buggy_color_response@mR+1)^0,c
   652   0018EE  0E44               	movlw	low _color
   653   0018F0  6E36               	movwf	buggy_color_response@c^0,c
   654   0018F2  0E00               	movlw	high _color
   655   0018F4  6E37               	movwf	(buggy_color_response@c+1)^0,c
   656   0018F6  EC14  F000         	call	_buggy_color_response	;wreg free
   657   0018FA  EF6F  F00C         	goto	l2828
   658   0018FE  EF12  F000         	goto	start
   659   001902                     __end_of_main:
   660                           	callstack 0
   661                           
   662 ;; *************** function _motor_init *****************
   663 ;; Defined at:
   664 ;;		line 94 in file "dc_motor.c"
   665 ;; Parameters:    Size  Location     Type
   666 ;;  mL              2    0[COMRAM] PTR struct DC_motor
   667 ;;		 -> motorL(9), 
   668 ;;  mR              2    2[COMRAM] PTR struct DC_motor
   669 ;;		 -> motorR(9), 
   670 ;; Auto vars:     Size  Location     Type
   671 ;;		None
   672 ;; Return value:  Size  Location     Type
   673 ;;                  1    wreg      void 
   674 ;; Registers used:
   675 ;;		wreg, status,2, status,0
   676 ;; Tracked objects:
   677 ;;		On entry : 0/0
   678 ;;		On exit  : 0/0
   679 ;;		Unchanged: 0/0
   680 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   681 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   682 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   683 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   684 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   685 ;;Total ram usage:        4 bytes
   686 ;; Hardware stack levels used: 1
   687 ;; Hardware stack levels required when called: 1
   688 ;; This function calls:
   689 ;;		Nothing
   690 ;; This function is called by:
   691 ;;		_main
   692 ;; This function uses a non-reentrant model
   693 ;;
   694                           
   695                           	psect	text1
   696   001AB6                     __ptext1:
   697                           	callstack 0
   698   001AB6                     _motor_init:
   699                           	callstack 29
   700   001AB6                     
   701                           ;dc_motor.c: 94: void motor_init(DC_motor *mL, DC_motor *mR);dc_motor.c: 95: {;dc_motor.
      +                          c: 96:     motorL.power=0;
   702   001AB6  0E00               	movlw	0
   703   001AB8  0100               	movlb	0	; () banked
   704   001ABA  6FB9               	movwf	_motorL& (0+255),b
   705                           
   706                           ;dc_motor.c: 97:     motorL.direction=1;
   707   001ABC  0E01               	movlw	1
   708   001ABE  6FBA               	movwf	(_motorL+1)& (0+255),b
   709                           
   710                           ;dc_motor.c: 98:     motorL.brakemode=1;
   711   001AC0  0E01               	movlw	1
   712   001AC2  6FBB               	movwf	(_motorL+2)& (0+255),b
   713   001AC4                     
   714                           ; BSR set to: 0
   715                           ;dc_motor.c: 99:     motorL.posDutyHighByte=(unsigned char *)(&CCPR1H);
   716   001AC4  0EAA               	movlw	170
   717   001AC6  6FBE               	movwf	(_motorL+5)& (0+255),b
   718   001AC8  0E0F               	movlw	15
   719   001ACA  6FBF               	movwf	(_motorL+6)& (0+255),b
   720   001ACC                     
   721                           ; BSR set to: 0
   722                           ;dc_motor.c: 100:     motorL.negDutyHighByte=(unsigned char *)(&CCPR2H);
   723   001ACC  0EA6               	movlw	166
   724   001ACE  6FC0               	movwf	(_motorL+7)& (0+255),b
   725   001AD0  0E0F               	movlw	15
   726   001AD2  6FC1               	movwf	(_motorL+8)& (0+255),b
   727                           
   728                           ;dc_motor.c: 101:     motorL.PWMperiod=99;
   729   001AD4  0E00               	movlw	0
   730   001AD6  6FBD               	movwf	(_motorL+4)& (0+255),b
   731   001AD8  0E63               	movlw	99
   732   001ADA  6FBC               	movwf	(_motorL+3)& (0+255),b
   733                           
   734                           ;dc_motor.c: 103:     motorR.power=0;
   735   001ADC  0E00               	movlw	0
   736   001ADE  6FB0               	movwf	_motorR& (0+255),b
   737                           
   738                           ;dc_motor.c: 104:     motorR.direction=1;
   739   001AE0  0E01               	movlw	1
   740   001AE2  6FB1               	movwf	(_motorR+1)& (0+255),b
   741                           
   742                           ;dc_motor.c: 105:     motorR.brakemode=1;
   743   001AE4  0E01               	movlw	1
   744   001AE6  6FB2               	movwf	(_motorR+2)& (0+255),b
   745   001AE8                     
   746                           ; BSR set to: 0
   747                           ;dc_motor.c: 106:     motorR.posDutyHighByte=(unsigned char *)(&CCPR3H);
   748   001AE8  0E25               	movlw	37
   749   001AEA  6FB5               	movwf	(_motorR+5)& (0+255),b
   750   001AEC  0E0F               	movlw	15
   751   001AEE  6FB6               	movwf	(_motorR+6)& (0+255),b
   752   001AF0                     
   753                           ; BSR set to: 0
   754                           ;dc_motor.c: 107:     motorR.negDutyHighByte=(unsigned char *)(&CCPR4H);
   755   001AF0  0E21               	movlw	33
   756   001AF2  6FB7               	movwf	(_motorR+7)& (0+255),b
   757   001AF4  0E0F               	movlw	15
   758   001AF6  6FB8               	movwf	(_motorR+8)& (0+255),b
   759                           
   760                           ;dc_motor.c: 108:     motorR.PWMperiod=99;
   761   001AF8  0E00               	movlw	0
   762   001AFA  6FB4               	movwf	(_motorR+4)& (0+255),b
   763   001AFC  0E63               	movlw	99
   764   001AFE  6FB3               	movwf	(_motorR+3)& (0+255),b
   765   001B00                     
   766                           ; BSR set to: 0
   767   001B00  0012               	return		;funcret
   768   001B02                     __end_of_motor_init:
   769                           	callstack 0
   770                           
   771 ;; *************** function _initUSART4 *****************
   772 ;; Defined at:
   773 ;;		line 5 in file "serial.c"
   774 ;; Parameters:    Size  Location     Type
   775 ;;		None
   776 ;; Auto vars:     Size  Location     Type
   777 ;;		None
   778 ;; Return value:  Size  Location     Type
   779 ;;                  1    wreg      void 
   780 ;; Registers used:
   781 ;;		wreg, status,2
   782 ;; Tracked objects:
   783 ;;		On entry : 0/0
   784 ;;		On exit  : 0/0
   785 ;;		Unchanged: 0/0
   786 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   787 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   788 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   789 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   790 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   791 ;;Total ram usage:        0 bytes
   792 ;; Hardware stack levels used: 1
   793 ;; Hardware stack levels required when called: 1
   794 ;; This function calls:
   795 ;;		Nothing
   796 ;; This function is called by:
   797 ;;		_main
   798 ;; This function uses a non-reentrant model
   799 ;;
   800                           
   801                           	psect	text2
   802   001C44                     __ptext2:
   803                           	callstack 0
   804   001C44                     _initUSART4:
   805                           	callstack 29
   806   001C44                     
   807                           ;serial.c: 7:     RC0PPS = 0x12;
   808   001C44  0E12               	movlw	18
   809   001C46  010E               	movlb	14	; () banked
   810   001C48  6F62               	movwf	98,b	;volatile
   811                           
   812                           ;serial.c: 8:     RX4PPS = 0x11;
   813   001C4A  0E11               	movlw	17
   814   001C4C  6F15               	movwf	21,b	;volatile
   815   001C4E                     
   816                           ; BSR set to: 14
   817                           ;serial.c: 9:     TRISCbits.TRISC1 = 1;
   818   001C4E  8283               	bsf	131,1,c	;volatile
   819   001C50                     
   820                           ; BSR set to: 14
   821                           ;serial.c: 12:     BAUD4CONbits.BRG16 = 0;
   822   001C50  97E9               	bcf	233,3,b	;volatile
   823   001C52                     
   824                           ; BSR set to: 14
   825                           ;serial.c: 13:     TX4STAbits.BRGH = 0;
   826   001C52  95E8               	bcf	232,2,b	;volatile
   827                           
   828                           ;serial.c: 14:     SP4BRGL = 51;
   829   001C54  0E33               	movlw	51
   830   001C56  6FE5               	movwf	229,b	;volatile
   831                           
   832                           ;serial.c: 15:     SP4BRGH = 0;
   833   001C58  0E00               	movlw	0
   834   001C5A  6FE6               	movwf	230,b	;volatile
   835   001C5C                     
   836                           ; BSR set to: 14
   837                           ;serial.c: 17:     RC4STAbits.CREN = 1;
   838   001C5C  89E7               	bsf	231,4,b	;volatile
   839   001C5E                     
   840                           ; BSR set to: 14
   841                           ;serial.c: 18:     TX4STAbits.TXEN = 1;
   842   001C5E  8BE8               	bsf	232,5,b	;volatile
   843   001C60                     
   844                           ; BSR set to: 14
   845                           ;serial.c: 19:     RC4STAbits.SPEN = 1;
   846   001C60  8FE7               	bsf	231,7,b	;volatile
   847   001C62                     
   848                           ; BSR set to: 14
   849   001C62  0012               	return		;funcret
   850   001C64                     __end_of_initUSART4:
   851                           	callstack 0
   852                           
   853 ;; *************** function _initDCmotorsPWM *****************
   854 ;; Defined at:
   855 ;;		line 5 in file "dc_motor.c"
   856 ;; Parameters:    Size  Location     Type
   857 ;;  PWMperiod       2    0[COMRAM] unsigned int 
   858 ;; Auto vars:     Size  Location     Type
   859 ;;		None
   860 ;; Return value:  Size  Location     Type
   861 ;;                  1    wreg      void 
   862 ;; Registers used:
   863 ;;		wreg, status,2
   864 ;; Tracked objects:
   865 ;;		On entry : 0/0
   866 ;;		On exit  : 0/0
   867 ;;		Unchanged: 0/0
   868 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   869 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   870 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   871 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   872 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   873 ;;Total ram usage:        2 bytes
   874 ;; Hardware stack levels used: 1
   875 ;; Hardware stack levels required when called: 1
   876 ;; This function calls:
   877 ;;		Nothing
   878 ;; This function is called by:
   879 ;;		_main
   880 ;; This function uses a non-reentrant model
   881 ;;
   882                           
   883                           	psect	text3
   884   0017FC                     __ptext3:
   885                           	callstack 0
   886   0017FC                     _initDCmotorsPWM:
   887                           	callstack 29
   888   0017FC                     
   889                           ;dc_motor.c: 7:     TRISEbits.TRISE2 = 0;
   890   0017FC  9485               	bcf	133,2,c	;volatile
   891                           
   892                           ;dc_motor.c: 8:     TRISEbits.TRISE4 = 0;
   893   0017FE  9885               	bcf	133,4,c	;volatile
   894                           
   895                           ;dc_motor.c: 9:     TRISCbits.TRISC7 = 0;
   896   001800  9E83               	bcf	131,7,c	;volatile
   897                           
   898                           ;dc_motor.c: 10:     TRISGbits.TRISG6 = 0;
   899   001802  9C87               	bcf	135,6,c	;volatile
   900                           
   901                           ;dc_motor.c: 12:     LATEbits.LATE2 = 0;
   902   001804  947D               	bcf	125,2,c	;volatile
   903                           
   904                           ;dc_motor.c: 13:     LATEbits.LATE4 = 0;
   905   001806  987D               	bcf	125,4,c	;volatile
   906                           
   907                           ;dc_motor.c: 14:     LATCbits.LATC7 = 0;
   908   001808  9E7B               	bcf	123,7,c	;volatile
   909                           
   910                           ;dc_motor.c: 15:     LATGbits.LATG6 = 0;
   911   00180A  9C7F               	bcf	127,6,c	;volatile
   912   00180C                     
   913                           ;dc_motor.c: 18:     RE2PPS=0x05;
   914   00180C  0E05               	movlw	5
   915   00180E  010E               	movlb	14	; () banked
   916   001810  6F74               	movwf	116,b	;volatile
   917                           
   918                           ;dc_motor.c: 19:     RE4PPS=0x06;
   919   001812  0E06               	movlw	6
   920   001814  6F76               	movwf	118,b	;volatile
   921                           
   922                           ;dc_motor.c: 20:     RC7PPS=0x07;
   923   001816  0E07               	movlw	7
   924   001818  6F69               	movwf	105,b	;volatile
   925                           
   926                           ;dc_motor.c: 21:     RG6PPS=0x08;
   927   00181A  0E08               	movlw	8
   928   00181C  6F88               	movwf	136,b	;volatile
   929                           
   930                           ;dc_motor.c: 24:     T2CONbits.CKPS=0b100;
   931   00181E  50BD               	movf	189,w,c	;volatile
   932   001820  0B8F               	andlw	-113
   933   001822  0940               	iorlw	64
   934   001824  6EBD               	movwf	189,c	;volatile
   935                           
   936                           ;dc_motor.c: 25:     T2HLTbits.MODE=0b00000;
   937   001826  0EE0               	movlw	-32
   938   001828  16BE               	andwf	190,f,c	;volatile
   939                           
   940                           ;dc_motor.c: 26:     T2CLKCONbits.CS=0b0001;
   941   00182A  50BF               	movf	191,w,c	;volatile
   942   00182C  0BF0               	andlw	-16
   943   00182E  0901               	iorlw	1
   944   001830  6EBF               	movwf	191,c	;volatile
   945   001832                     
   946                           ; BSR set to: 14
   947                           ;dc_motor.c: 30:     T2PR=PWMperiod;
   948   001832  C001  FFBC         	movff	initDCmotorsPWM@PWMperiod,4028	;volatile
   949   001836                     
   950                           ; BSR set to: 14
   951                           ;dc_motor.c: 31:     T2CONbits.ON=1;
   952   001836  8EBD               	bsf	189,7,c	;volatile
   953                           
   954                           ;dc_motor.c: 35:     CCPR1H=0;
   955   001838  0E00               	movlw	0
   956   00183A  6EAA               	movwf	170,c	;volatile
   957                           
   958                           ;dc_motor.c: 36:     CCPR2H=0;
   959   00183C  0E00               	movlw	0
   960   00183E  6EA6               	movwf	166,c	;volatile
   961                           
   962                           ;dc_motor.c: 37:     CCPR3H=0;
   963   001840  0E00               	movlw	0
   964   001842  010F               	movlb	15	; () banked
   965   001844  6F25               	movwf	37,b	;volatile
   966                           
   967                           ;dc_motor.c: 38:     CCPR4H=0;
   968   001846  0E00               	movlw	0
   969   001848  6F21               	movwf	33,b	;volatile
   970                           
   971                           ;dc_motor.c: 41:     CCPTMRS0bits.C1TSEL=0;
   972   00184A  0EFC               	movlw	-4
   973   00184C  16AD               	andwf	173,f,c	;volatile
   974                           
   975                           ;dc_motor.c: 42:     CCPTMRS0bits.C2TSEL=0;
   976   00184E  0EF3               	movlw	-13
   977   001850  16AD               	andwf	173,f,c	;volatile
   978                           
   979                           ;dc_motor.c: 43:     CCPTMRS0bits.C3TSEL=0;
   980   001852  0ECF               	movlw	-49
   981   001854  16AD               	andwf	173,f,c	;volatile
   982                           
   983                           ;dc_motor.c: 44:     CCPTMRS0bits.C4TSEL=0;
   984   001856  0E3F               	movlw	-193
   985   001858  16AD               	andwf	173,f,c	;volatile
   986   00185A                     
   987                           ; BSR set to: 15
   988                           ;dc_motor.c: 47:     CCP1CONbits.FMT=1;
   989   00185A  88AB               	bsf	171,4,c	;volatile
   990                           
   991                           ;dc_motor.c: 48:     CCP1CONbits.CCP1MODE=0b1100;
   992   00185C  50AB               	movf	171,w,c	;volatile
   993   00185E  0BF0               	andlw	-16
   994   001860  090C               	iorlw	12
   995   001862  6EAB               	movwf	171,c	;volatile
   996   001864                     
   997                           ; BSR set to: 15
   998                           ;dc_motor.c: 49:     CCP1CONbits.EN=1;
   999   001864  8EAB               	bsf	171,7,c	;volatile
  1000   001866                     
  1001                           ; BSR set to: 15
  1002                           ;dc_motor.c: 52:     CCP2CONbits.FMT=1;
  1003   001866  88A7               	bsf	167,4,c	;volatile
  1004                           
  1005                           ;dc_motor.c: 53:     CCP2CONbits.CCP2MODE=0b1100;
  1006   001868  50A7               	movf	167,w,c	;volatile
  1007   00186A  0BF0               	andlw	-16
  1008   00186C  090C               	iorlw	12
  1009   00186E  6EA7               	movwf	167,c	;volatile
  1010   001870                     
  1011                           ; BSR set to: 15
  1012                           ;dc_motor.c: 54:     CCP2CONbits.EN=1;
  1013   001870  8EA7               	bsf	167,7,c	;volatile
  1014   001872                     
  1015                           ; BSR set to: 15
  1016                           ;dc_motor.c: 58:     CCP3CONbits.FMT=1;
  1017   001872  8926               	bsf	38,4,b	;volatile
  1018                           
  1019                           ;dc_motor.c: 59:     CCP3CONbits.CCP3MODE=0b1100;
  1020   001874  5126               	movf	38,w,b	;volatile
  1021   001876  0BF0               	andlw	-16
  1022   001878  090C               	iorlw	12
  1023   00187A  6F26               	movwf	38,b	;volatile
  1024   00187C                     
  1025                           ; BSR set to: 15
  1026                           ;dc_motor.c: 60:     CCP3CONbits.EN=1;
  1027   00187C  8F26               	bsf	38,7,b	;volatile
  1028   00187E                     
  1029                           ; BSR set to: 15
  1030                           ;dc_motor.c: 63:     CCP4CONbits.FMT=1;
  1031   00187E  8922               	bsf	34,4,b	;volatile
  1032                           
  1033                           ;dc_motor.c: 64:     CCP4CONbits.CCP4MODE=0b1100;
  1034   001880  5122               	movf	34,w,b	;volatile
  1035   001882  0BF0               	andlw	-16
  1036   001884  090C               	iorlw	12
  1037   001886  6F22               	movwf	34,b	;volatile
  1038   001888                     
  1039                           ; BSR set to: 15
  1040                           ;dc_motor.c: 65:     CCP4CONbits.EN=1;
  1041   001888  8F22               	bsf	34,7,b	;volatile
  1042   00188A                     
  1043                           ; BSR set to: 15
  1044   00188A  0012               	return		;funcret
  1045   00188C                     __end_of_initDCmotorsPWM:
  1046                           	callstack 0
  1047                           
  1048 ;; *************** function _color_click_init *****************
  1049 ;; Defined at:
  1050 ;;		line 8 in file "color.c"
  1051 ;; Parameters:    Size  Location     Type
  1052 ;;		None
  1053 ;; Auto vars:     Size  Location     Type
  1054 ;;		None
  1055 ;; Return value:  Size  Location     Type
  1056 ;;                  1    wreg      void 
  1057 ;; Registers used:
  1058 ;;		wreg, status,2, status,0, cstack
  1059 ;; Tracked objects:
  1060 ;;		On entry : 0/0
  1061 ;;		On exit  : 0/0
  1062 ;;		Unchanged: 0/0
  1063 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1064 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1065 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1066 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1067 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1068 ;;Total ram usage:        1 bytes
  1069 ;; Hardware stack levels used: 1
  1070 ;; Hardware stack levels required when called: 4
  1071 ;; This function calls:
  1072 ;;		_I2C_2_Master_Init
  1073 ;;		_color_writetoaddr
  1074 ;; This function is called by:
  1075 ;;		_main
  1076 ;; This function uses a non-reentrant model
  1077 ;;
  1078                           
  1079                           	psect	text4
  1080   001B44                     __ptext4:
  1081                           	callstack 0
  1082   001B44                     _color_click_init:
  1083                           	callstack 26
  1084   001B44                     
  1085                           ;color.c: 11:     I2C_2_Master_Init();
  1086   001B44  ECD5  F00D         	call	_I2C_2_Master_Init	;wreg free
  1087   001B48                     
  1088                           ;color.c: 13:   color_writetoaddr(0x00, 0x01);
  1089   001B48  0E01               	movlw	1
  1090   001B4A  6E03               	movwf	color_writetoaddr@value^0,c
  1091   001B4C  0E00               	movlw	0
  1092   001B4E  EC32  F00E         	call	_color_writetoaddr
  1093   001B52                     
  1094                           ;color.c: 14:     _delay((unsigned long)((3)*(64000000/4000.0)));
  1095   001B52  0E3F               	movlw	63
  1096   001B54  6E05               	movwf	??_color_click_init^0,c
  1097   001B56  0E55               	movlw	85
  1098   001B58                     u2147:
  1099   001B58  2EE8               	decfsz	wreg,f,c
  1100   001B5A  D7FE               	bra	u2147
  1101   001B5C  2E05               	decfsz	??_color_click_init^0,f,c
  1102   001B5E  D7FC               	bra	u2147
  1103   001B60  F000               	nop	
  1104   001B62                     
  1105                           ;color.c: 16:  color_writetoaddr(0x00, 0x03);
  1106   001B62  0E03               	movlw	3
  1107   001B64  6E03               	movwf	color_writetoaddr@value^0,c
  1108   001B66  0E00               	movlw	0
  1109   001B68  EC32  F00E         	call	_color_writetoaddr
  1110   001B6C                     
  1111                           ;color.c: 18:  color_writetoaddr(0x01, 0xD5);
  1112   001B6C  0ED5               	movlw	213
  1113   001B6E  6E03               	movwf	color_writetoaddr@value^0,c
  1114   001B70  0E01               	movlw	1
  1115   001B72  EC32  F00E         	call	_color_writetoaddr
  1116   001B76  0012               	return		;funcret
  1117   001B78                     __end_of_color_click_init:
  1118                           	callstack 0
  1119                           
  1120 ;; *************** function _color_writetoaddr *****************
  1121 ;; Defined at:
  1122 ;;		line 21 in file "color.c"
  1123 ;; Parameters:    Size  Location     Type
  1124 ;;  address         1    wreg     unsigned char 
  1125 ;;  value           1    2[COMRAM] unsigned char 
  1126 ;; Auto vars:     Size  Location     Type
  1127 ;;  address         1    3[COMRAM] unsigned char 
  1128 ;; Return value:  Size  Location     Type
  1129 ;;                  1    wreg      void 
  1130 ;; Registers used:
  1131 ;;		wreg, status,2, status,0, cstack
  1132 ;; Tracked objects:
  1133 ;;		On entry : 0/0
  1134 ;;		On exit  : 0/0
  1135 ;;		Unchanged: 0/0
  1136 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1137 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1138 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1139 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1140 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1141 ;;Total ram usage:        2 bytes
  1142 ;; Hardware stack levels used: 1
  1143 ;; Hardware stack levels required when called: 3
  1144 ;; This function calls:
  1145 ;;		_I2C_2_Master_Start
  1146 ;;		_I2C_2_Master_Stop
  1147 ;;		_I2C_2_Master_Write
  1148 ;; This function is called by:
  1149 ;;		_color_click_init
  1150 ;;		_colorclick_interrupts_init
  1151 ;; This function uses a non-reentrant model
  1152 ;;
  1153                           
  1154                           	psect	text5
  1155   001C64                     __ptext5:
  1156                           	callstack 0
  1157   001C64                     _color_writetoaddr:
  1158                           	callstack 26
  1159                           
  1160                           ;incstack = 0
  1161                           ;color_writetoaddr@address stored from wreg
  1162   001C64  6E04               	movwf	color_writetoaddr@address^0,c
  1163   001C66                     
  1164                           ;color.c: 22:     I2C_2_Master_Start();
  1165   001C66  EC58  F00E         	call	_I2C_2_Master_Start	;wreg free
  1166                           
  1167                           ;color.c: 23:     I2C_2_Master_Write(0x52 | 0x00);
  1168   001C6A  0E52               	movlw	82
  1169   001C6C  EC4D  F00E         	call	_I2C_2_Master_Write
  1170                           
  1171                           ;color.c: 24:     I2C_2_Master_Write(0x80 | address);
  1172   001C70  5004               	movf	color_writetoaddr@address^0,w,c
  1173   001C72  0980               	iorlw	128
  1174   001C74  EC4D  F00E         	call	_I2C_2_Master_Write
  1175                           
  1176                           ;color.c: 25:     I2C_2_Master_Write(value);
  1177   001C78  5003               	movf	color_writetoaddr@value^0,w,c
  1178   001C7A  EC4D  F00E         	call	_I2C_2_Master_Write
  1179                           
  1180                           ;color.c: 26:     I2C_2_Master_Stop();
  1181   001C7E  EC53  F00E         	call	_I2C_2_Master_Stop	;wreg free
  1182   001C82  0012               	return		;funcret
  1183   001C84                     __end_of_color_writetoaddr:
  1184                           	callstack 0
  1185                           
  1186 ;; *************** function _I2C_2_Master_Init *****************
  1187 ;; Defined at:
  1188 ;;		line 4 in file "i2c.c"
  1189 ;; Parameters:    Size  Location     Type
  1190 ;;		None
  1191 ;; Auto vars:     Size  Location     Type
  1192 ;;		None
  1193 ;; Return value:  Size  Location     Type
  1194 ;;                  1    wreg      void 
  1195 ;; Registers used:
  1196 ;;		wreg, status,2
  1197 ;; Tracked objects:
  1198 ;;		On entry : 0/0
  1199 ;;		On exit  : 0/0
  1200 ;;		Unchanged: 0/0
  1201 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1202 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1203 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1204 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1205 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1206 ;;Total ram usage:        0 bytes
  1207 ;; Hardware stack levels used: 1
  1208 ;; Hardware stack levels required when called: 1
  1209 ;; This function calls:
  1210 ;;		Nothing
  1211 ;; This function is called by:
  1212 ;;		_color_click_init
  1213 ;; This function uses a non-reentrant model
  1214 ;;
  1215                           
  1216                           	psect	text6
  1217   001BAA                     __ptext6:
  1218                           	callstack 0
  1219   001BAA                     _I2C_2_Master_Init:
  1220                           	callstack 28
  1221   001BAA                     
  1222                           ;i2c.c: 7:   SSP2CON1bits.SSPM= 0b1000;
  1223   001BAA  010E               	movlb	14	; () banked
  1224   001BAC  51D9               	movf	217,w,b	;volatile
  1225   001BAE  0BF0               	andlw	-16
  1226   001BB0  0908               	iorlw	8
  1227   001BB2  6FD9               	movwf	217,b	;volatile
  1228   001BB4                     
  1229                           ; BSR set to: 14
  1230                           ;i2c.c: 8:   SSP2CON1bits.SSPEN = 1;
  1231   001BB4  8BD9               	bsf	217,5,b	;volatile
  1232                           
  1233                           ;i2c.c: 9:   SSP2ADD = (64000000/(4*100000))-1;
  1234   001BB6  0E9F               	movlw	159
  1235   001BB8  6FD6               	movwf	214,b	;volatile
  1236   001BBA                     
  1237                           ; BSR set to: 14
  1238                           ;i2c.c: 12:   TRISDbits.TRISD5 = 1;
  1239   001BBA  8A84               	bsf	132,5,c	;volatile
  1240   001BBC                     
  1241                           ; BSR set to: 14
  1242                           ;i2c.c: 13:   TRISDbits.TRISD6 = 1;
  1243   001BBC  8C84               	bsf	132,6,c	;volatile
  1244   001BBE                     
  1245                           ; BSR set to: 14
  1246                           ;i2c.c: 14:   ANSELDbits.ANSELD5=0;
  1247   001BBE  9BA7               	bcf	167,5,b	;volatile
  1248   001BC0                     
  1249                           ; BSR set to: 14
  1250                           ;i2c.c: 15:   ANSELDbits.ANSELD6=0;
  1251   001BC0  9DA7               	bcf	167,6,b	;volatile
  1252                           
  1253                           ;i2c.c: 16:   SSP2DATPPS=0x1D;
  1254   001BC2  0E1D               	movlw	29
  1255   001BC4  6F1D               	movwf	29,b	;volatile
  1256                           
  1257                           ;i2c.c: 17:   SSP2CLKPPS=0x1E;
  1258   001BC6  0E1E               	movlw	30
  1259   001BC8  6F1C               	movwf	28,b	;volatile
  1260                           
  1261                           ;i2c.c: 18:   RD5PPS=0x1C;
  1262   001BCA  0E1C               	movlw	28
  1263   001BCC  6F6F               	movwf	111,b	;volatile
  1264                           
  1265                           ;i2c.c: 19:   RD6PPS=0x1B;
  1266   001BCE  0E1B               	movlw	27
  1267   001BD0  6F70               	movwf	112,b	;volatile
  1268   001BD2                     
  1269                           ; BSR set to: 14
  1270   001BD2  0012               	return		;funcret
  1271   001BD4                     __end_of_I2C_2_Master_Init:
  1272                           	callstack 0
  1273                           
  1274 ;; *************** function _calibrate_upperbound *****************
  1275 ;; Defined at:
  1276 ;;		line 160 in file "color.c"
  1277 ;; Parameters:    Size  Location     Type
  1278 ;;  c               2   49[COMRAM] PTR struct colors
  1279 ;;		 -> color(20), 
  1280 ;; Auto vars:     Size  Location     Type
  1281 ;;		None
  1282 ;; Return value:  Size  Location     Type
  1283 ;;                  1    wreg      void 
  1284 ;; Registers used:
  1285 ;;		wreg, status,2, status,0, cstack
  1286 ;; Tracked objects:
  1287 ;;		On entry : 0/0
  1288 ;;		On exit  : 0/0
  1289 ;;		Unchanged: 0/0
  1290 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1291 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1292 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1293 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1294 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1295 ;;Total ram usage:        3 bytes
  1296 ;; Hardware stack levels used: 1
  1297 ;; Hardware stack levels required when called: 5
  1298 ;; This function calls:
  1299 ;;		_READcolor
  1300 ;;		___flge
  1301 ;;		_colourcards_normaliseRGBC
  1302 ;; This function is called by:
  1303 ;;		_main
  1304 ;; This function uses a non-reentrant model
  1305 ;;
  1306                           
  1307                           	psect	text7
  1308   0012A4                     __ptext7:
  1309                           	callstack 0
  1310   0012A4                     _calibrate_upperbound:
  1311                           	callstack 25
  1312   0012A4                     
  1313                           ;color.c: 161:     READcolor(&color);
  1314   0012A4  0E44               	movlw	low _color
  1315   0012A6  6E0C               	movwf	READcolor@c^0,c
  1316   0012A8  0E00               	movlw	high _color
  1317   0012AA  6E0D               	movwf	(READcolor@c+1)^0,c
  1318   0012AC  ECBC  F00D         	call	_READcolor	;wreg free
  1319                           
  1320                           ;color.c: 162:     colourcards_normaliseRGBC(&color);
  1321   0012B0  0E44               	movlw	low _color
  1322   0012B2  6E28               	movwf	colourcards_normaliseRGBC@c^0,c
  1323   0012B4  0E00               	movlw	high _color
  1324   0012B6  6E29               	movwf	(colourcards_normaliseRGBC@c+1)^0,c
  1325   0012B8  ECBD  F008         	call	_colourcards_normaliseRGBC	;wreg free
  1326                           
  1327                           ;color.c: 163:     if (color.R_norm < 0.38 && color.B_norm > 0.32 && color.G_norm > 0.34
      +                          ){
  1328   0012BC  C04C  F001         	movff	_color+8,___flge@ff1
  1329   0012C0  C04D  F002         	movff	_color+9,___flge@ff1+1
  1330   0012C4  C04E  F003         	movff	_color+10,___flge@ff1+2
  1331   0012C8  C04F  F004         	movff	_color+11,___flge@ff1+3
  1332   0012CC  0E5C               	movlw	92
  1333   0012CE  6E05               	movwf	___flge@ff2^0,c
  1334   0012D0  0E8F               	movlw	143
  1335   0012D2  6E06               	movwf	(___flge@ff2+1)^0,c
  1336   0012D4  0EC2               	movlw	194
  1337   0012D6  6E07               	movwf	(___flge@ff2+2)^0,c
  1338   0012D8  0E3E               	movlw	62
  1339   0012DA  6E08               	movwf	(___flge@ff2+3)^0,c
  1340   0012DC  ECE6  F009         	call	___flge	;wreg free
  1341   0012E0  B0D8               	btfsc	status,0,c
  1342   0012E2  EF75  F009         	goto	u2021
  1343   0012E6  EF77  F009         	goto	u2020
  1344   0012EA                     u2021:
  1345   0012EA  EFBD  F009         	goto	l2682
  1346   0012EE                     u2020:
  1347   0012EE  0E0A               	movlw	10
  1348   0012F0  6E01               	movwf	___flge@ff1^0,c
  1349   0012F2  0ED7               	movlw	215
  1350   0012F4  6E02               	movwf	(___flge@ff1+1)^0,c
  1351   0012F6  0EA3               	movlw	163
  1352   0012F8  6E03               	movwf	(___flge@ff1+2)^0,c
  1353   0012FA  0E3E               	movlw	62
  1354   0012FC  6E04               	movwf	(___flge@ff1+3)^0,c
  1355   0012FE  C050  F005         	movff	_color+12,___flge@ff2
  1356   001302  C051  F006         	movff	_color+13,___flge@ff2+1
  1357   001306  C052  F007         	movff	_color+14,___flge@ff2+2
  1358   00130A  C053  F008         	movff	_color+15,___flge@ff2+3
  1359   00130E  ECE6  F009         	call	___flge	;wreg free
  1360   001312  B0D8               	btfsc	status,0,c
  1361   001314  EF8E  F009         	goto	u2031
  1362   001318  EF90  F009         	goto	u2030
  1363   00131C                     u2031:
  1364   00131C  EFBD  F009         	goto	l2682
  1365   001320                     u2030:
  1366   001320  0E7B               	movlw	123
  1367   001322  6E01               	movwf	___flge@ff1^0,c
  1368   001324  0E14               	movlw	20
  1369   001326  6E02               	movwf	(___flge@ff1+1)^0,c
  1370   001328  0EAE               	movlw	174
  1371   00132A  6E03               	movwf	(___flge@ff1+2)^0,c
  1372   00132C  0E3E               	movlw	62
  1373   00132E  6E04               	movwf	(___flge@ff1+3)^0,c
  1374   001330  C054  F005         	movff	_color+16,___flge@ff2
  1375   001334  C055  F006         	movff	_color+17,___flge@ff2+1
  1376   001338  C056  F007         	movff	_color+18,___flge@ff2+2
  1377   00133C  C057  F008         	movff	_color+19,___flge@ff2+3
  1378   001340  ECE6  F009         	call	___flge	;wreg free
  1379   001344  B0D8               	btfsc	status,0,c
  1380   001346  EFA7  F009         	goto	u2041
  1381   00134A  EFA9  F009         	goto	u2040
  1382   00134E                     u2041:
  1383   00134E  EFBD  F009         	goto	l2682
  1384   001352                     u2040:
  1385   001352                     
  1386                           ;color.c: 164:     LATDbits.LATD3 = 1;
  1387   001352  867C               	bsf	124,3,c	;volatile
  1388   001354                     
  1389                           ;color.c: 165:     READcolor(&color);
  1390   001354  0E44               	movlw	low _color
  1391   001356  6E0C               	movwf	READcolor@c^0,c
  1392   001358  0E00               	movlw	high _color
  1393   00135A  6E0D               	movwf	(READcolor@c+1)^0,c
  1394   00135C  ECBC  F00D         	call	_READcolor	;wreg free
  1395                           
  1396                           ;color.c: 166:     colourcards_normaliseRGBC(&color);
  1397   001360  0E44               	movlw	low _color
  1398   001362  6E28               	movwf	colourcards_normaliseRGBC@c^0,c
  1399   001364  0E00               	movlw	high _color
  1400   001366  6E29               	movwf	(colourcards_normaliseRGBC@c+1)^0,c
  1401   001368  ECBD  F008         	call	_colourcards_normaliseRGBC	;wreg free
  1402   00136C                     
  1403                           ;color.c: 167:     color_upperbound = (color.C - 250);
  1404   00136C  0E06               	movlw	6
  1405   00136E  244A               	addwf	(_color+6)^0,w,c
  1406   001370  6E3A               	movwf	_color_upperbound^0,c
  1407   001372  0EFF               	movlw	255
  1408   001374  204B               	addwfc	(_color+7)^0,w,c
  1409   001376  6E3B               	movwf	(_color_upperbound+1)^0,c
  1410   001378                     
  1411                           ;color.c: 168:     LATDbits.LATD3 = 0;
  1412   001378  967C               	bcf	124,3,c	;volatile
  1413   00137A                     l2682:
  1414                           
  1415                           ;color.c: 171:     if (color_upperbound < 3000){
  1416   00137A  BE3B               	btfsc	(_color_upperbound+1)^0,7,c
  1417   00137C  EFCB  F009         	goto	u2050
  1418   001380  0EB8               	movlw	184
  1419   001382  5C3A               	subwf	_color_upperbound^0,w,c
  1420   001384  0E0B               	movlw	11
  1421   001386  583B               	subwfb	(_color_upperbound+1)^0,w,c
  1422   001388  B0D8               	btfsc	status,0,c
  1423   00138A  EFC9  F009         	goto	u2051
  1424   00138E  EFCB  F009         	goto	u2050
  1425   001392                     u2051:
  1426   001392  EFDC  F009         	goto	l2686
  1427   001396                     u2050:
  1428   001396                     
  1429                           ;color.c: 172:         LATDbits.LATD7 = !LATDbits.LATD7;
  1430   001396  AE7C               	btfss	124,7,c	;volatile
  1431   001398  EFD0  F009         	goto	u2061
  1432   00139C  EFD4  F009         	goto	u2060
  1433   0013A0                     u2061:
  1434   0013A0  6A34               	clrf	??_calibrate_upperbound^0,c
  1435   0013A2  2A34               	incf	??_calibrate_upperbound^0,f,c
  1436   0013A4  EFD5  F009         	goto	u2078
  1437   0013A8                     u2060:
  1438   0013A8  6A34               	clrf	??_calibrate_upperbound^0,c
  1439   0013AA                     u2078:
  1440   0013AA  3234               	rrcf	??_calibrate_upperbound^0,f,c
  1441   0013AC  3234               	rrcf	??_calibrate_upperbound^0,f,c
  1442   0013AE  507C               	movf	124,w,c	;volatile
  1443   0013B0  1834               	xorwf	??_calibrate_upperbound^0,w,c
  1444   0013B2  0B7F               	andlw	-129
  1445   0013B4  1834               	xorwf	??_calibrate_upperbound^0,w,c
  1446   0013B6  6E7C               	movwf	124,c	;volatile
  1447   0013B8                     l2686:
  1448                           
  1449                           ;color.c: 174:     if(PORTFbits.RF2 == 1) {
  1450   0013B8  A48E               	btfss	142,2,c	;volatile
  1451   0013BA  EFE1  F009         	goto	u2081
  1452   0013BE  EFE3  F009         	goto	u2080
  1453   0013C2                     u2081:
  1454   0013C2  EFE5  F009         	goto	l136
  1455   0013C6                     u2080:
  1456   0013C6                     
  1457                           ;color.c: 175:         start_flag = 1;
  1458   0013C6  0E01               	movlw	1
  1459   0013C8  6E43               	movwf	_start_flag^0,c
  1460   0013CA                     l136:
  1461   0013CA  0012               	return		;funcret
  1462   0013CC                     __end_of_calibrate_upperbound:
  1463                           	callstack 0
  1464                           
  1465 ;; *************** function _buggy_color_response *****************
  1466 ;; Defined at:
  1467 ;;		line 101 in file "color.c"
  1468 ;; Parameters:    Size  Location     Type
  1469 ;;  mL              2   49[COMRAM] PTR struct DC_motor
  1470 ;;		 -> motorL(9), 
  1471 ;;  mR              2   51[COMRAM] PTR struct DC_motor
  1472 ;;		 -> motorR(9), 
  1473 ;;  c               2   53[COMRAM] PTR struct colors
  1474 ;;		 -> color(20), 
  1475 ;; Auto vars:     Size  Location     Type
  1476 ;;		None
  1477 ;; Return value:  Size  Location     Type
  1478 ;;                  1    wreg      void 
  1479 ;; Registers used:
  1480 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1481 ;; Tracked objects:
  1482 ;;		On entry : 0/0
  1483 ;;		On exit  : 0/0
  1484 ;;		Unchanged: 0/0
  1485 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1486 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1487 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1488 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1489 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1490 ;;Total ram usage:        8 bytes
  1491 ;; Hardware stack levels used: 1
  1492 ;; Hardware stack levels required when called: 6
  1493 ;; This function calls:
  1494 ;;		_READcolor
  1495 ;;		___flge
  1496 ;;		_colourcards_normaliseRGBC
  1497 ;;		_forward
  1498 ;;		_instructions
  1499 ;;		_stop
  1500 ;; This function is called by:
  1501 ;;		_main
  1502 ;; This function uses a non-reentrant model
  1503 ;;
  1504                           
  1505                           	psect	text8
  1506   000028                     __ptext8:
  1507                           	callstack 0
  1508   000028                     _buggy_color_response:
  1509                           	callstack 24
  1510   000028                     
  1511                           ;color.c: 102:     READcolor(&color);
  1512   000028  0E44               	movlw	low _color
  1513   00002A  6E0C               	movwf	READcolor@c^0,c
  1514   00002C  0E00               	movlw	high _color
  1515   00002E  6E0D               	movwf	(READcolor@c+1)^0,c
  1516   000030  ECBC  F00D         	call	_READcolor	;wreg free
  1517                           
  1518                           ;color.c: 103:     colourcards_normaliseRGBC(&color);
  1519   000034  0E44               	movlw	low _color
  1520   000036  6E28               	movwf	colourcards_normaliseRGBC@c^0,c
  1521   000038  0E00               	movlw	high _color
  1522   00003A  6E29               	movwf	(colourcards_normaliseRGBC@c+1)^0,c
  1523   00003C  ECBD  F008         	call	_colourcards_normaliseRGBC	;wreg free
  1524   000040                     
  1525                           ;color.c: 105:     if (color.C > color_upperbound){stop(mL,mR);_delay((unsigned long)((5
      +                          00)*(64000000/4000.0)));READcolor(&color);colourcards_normaliseRGBC(&color);_delay((unsi
      +                          gned long)((500)*(64000000/4000.0)));
  1526   000040  504A               	movf	(_color+6)^0,w,c
  1527   000042  5C3A               	subwf	_color_upperbound^0,w,c
  1528   000044  504B               	movf	(_color+7)^0,w,c
  1529   000046  583B               	subwfb	(_color_upperbound+1)^0,w,c
  1530   000048  B0D8               	btfsc	status,0,c
  1531   00004A  EF29  F000         	goto	u1821
  1532   00004E  EF2B  F000         	goto	u1820
  1533   000052                     u1821:
  1534   000052  EFAA  F002         	goto	l2664
  1535   000056                     u1820:
  1536   000056  C032  F014         	movff	buggy_color_response@mL,stop@mL
  1537   00005A  C033  F015         	movff	buggy_color_response@mL+1,stop@mL+1
  1538   00005E  C034  F016         	movff	buggy_color_response@mR,stop@mR
  1539   000062  C035  F017         	movff	buggy_color_response@mR+1,stop@mR+1
  1540   000066  ECA6  F00B         	call	_stop	;wreg free
  1541   00006A  0E29               	movlw	41
  1542   00006C  6E39               	movwf	(??_buggy_color_response+1)^0,c
  1543   00006E  0E96               	movlw	150
  1544   000070  6E38               	movwf	??_buggy_color_response^0,c
  1545   000072  0E7F               	movlw	127
  1546   000074                     u2157:
  1547   000074  2EE8               	decfsz	wreg,f,c
  1548   000076  D7FE               	bra	u2157
  1549   000078  2E38               	decfsz	??_buggy_color_response^0,f,c
  1550   00007A  D7FC               	bra	u2157
  1551   00007C  2E39               	decfsz	(??_buggy_color_response+1)^0,f,c
  1552   00007E  D7FA               	bra	u2157
  1553   000080  F000               	nop	
  1554   000082  0E44               	movlw	low _color
  1555   000084  6E0C               	movwf	READcolor@c^0,c
  1556   000086  0E00               	movlw	high _color
  1557   000088  6E0D               	movwf	(READcolor@c+1)^0,c
  1558   00008A  ECBC  F00D         	call	_READcolor	;wreg free
  1559   00008E  0E44               	movlw	low _color
  1560   000090  6E28               	movwf	colourcards_normaliseRGBC@c^0,c
  1561   000092  0E00               	movlw	high _color
  1562   000094  6E29               	movwf	(colourcards_normaliseRGBC@c+1)^0,c
  1563   000096  ECBD  F008         	call	_colourcards_normaliseRGBC	;wreg free
  1564   00009A  0E29               	movlw	41
  1565   00009C  6E39               	movwf	(??_buggy_color_response+1)^0,c
  1566   00009E  0E96               	movlw	150
  1567   0000A0  6E38               	movwf	??_buggy_color_response^0,c
  1568   0000A2  0E7F               	movlw	127
  1569   0000A4                     u2167:
  1570   0000A4  2EE8               	decfsz	wreg,f,c
  1571   0000A6  D7FE               	bra	u2167
  1572   0000A8  2E38               	decfsz	??_buggy_color_response^0,f,c
  1573   0000AA  D7FC               	bra	u2167
  1574   0000AC  2E39               	decfsz	(??_buggy_color_response+1)^0,f,c
  1575   0000AE  D7FA               	bra	u2167
  1576   0000B0  F000               	nop	
  1577   0000B2                     
  1578                           ;color.c: 106:     if (color.R_norm > 0.77 && color.B_norm < 0.18 && color.G_norm < 0.14
      +                          ){
  1579   0000B2  0EB8               	movlw	184
  1580   0000B4  6E01               	movwf	___flge@ff1^0,c
  1581   0000B6  0E1E               	movlw	30
  1582   0000B8  6E02               	movwf	(___flge@ff1+1)^0,c
  1583   0000BA  0E45               	movlw	69
  1584   0000BC  6E03               	movwf	(___flge@ff1+2)^0,c
  1585   0000BE  0E3F               	movlw	63
  1586   0000C0  6E04               	movwf	(___flge@ff1+3)^0,c
  1587   0000C2  C04C  F005         	movff	_color+8,___flge@ff2
  1588   0000C6  C04D  F006         	movff	_color+9,___flge@ff2+1
  1589   0000CA  C04E  F007         	movff	_color+10,___flge@ff2+2
  1590   0000CE  C04F  F008         	movff	_color+11,___flge@ff2+3
  1591   0000D2  ECE6  F009         	call	___flge	;wreg free
  1592   0000D6  B0D8               	btfsc	status,0,c
  1593   0000D8  EF70  F000         	goto	u1831
  1594   0000DC  EF72  F000         	goto	u1830
  1595   0000E0                     u1831:
  1596   0000E0  EFB2  F000         	goto	l2616
  1597   0000E4                     u1830:
  1598   0000E4  C050  F001         	movff	_color+12,___flge@ff1
  1599   0000E8  C051  F002         	movff	_color+13,___flge@ff1+1
  1600   0000EC  C052  F003         	movff	_color+14,___flge@ff1+2
  1601   0000F0  C053  F004         	movff	_color+15,___flge@ff1+3
  1602   0000F4  0EEC               	movlw	236
  1603   0000F6  6E05               	movwf	___flge@ff2^0,c
  1604   0000F8  0E51               	movlw	81
  1605   0000FA  6E06               	movwf	(___flge@ff2+1)^0,c
  1606   0000FC  0E38               	movlw	56
  1607   0000FE  6E07               	movwf	(___flge@ff2+2)^0,c
  1608   000100  0E3E               	movlw	62
  1609   000102  6E08               	movwf	(___flge@ff2+3)^0,c
  1610   000104  ECE6  F009         	call	___flge	;wreg free
  1611   000108  B0D8               	btfsc	status,0,c
  1612   00010A  EF89  F000         	goto	u1841
  1613   00010E  EF8B  F000         	goto	u1840
  1614   000112                     u1841:
  1615   000112  EFB2  F000         	goto	l2616
  1616   000116                     u1840:
  1617   000116  C054  F001         	movff	_color+16,___flge@ff1
  1618   00011A  C055  F002         	movff	_color+17,___flge@ff1+1
  1619   00011E  C056  F003         	movff	_color+18,___flge@ff1+2
  1620   000122  C057  F004         	movff	_color+19,___flge@ff1+3
  1621   000126  0E29               	movlw	41
  1622   000128  6E05               	movwf	___flge@ff2^0,c
  1623   00012A  0E5C               	movlw	92
  1624   00012C  6E06               	movwf	(___flge@ff2+1)^0,c
  1625   00012E  0E0F               	movlw	15
  1626   000130  6E07               	movwf	(___flge@ff2+2)^0,c
  1627   000132  0E3E               	movlw	62
  1628   000134  6E08               	movwf	(___flge@ff2+3)^0,c
  1629   000136  ECE6  F009         	call	___flge	;wreg free
  1630   00013A  B0D8               	btfsc	status,0,c
  1631   00013C  EFA2  F000         	goto	u1851
  1632   000140  EFA4  F000         	goto	u1850
  1633   000144                     u1851:
  1634   000144  EFB2  F000         	goto	l2616
  1635   000148                     u1850:
  1636   000148                     
  1637                           ;color.c: 107:     instructions(mL,mR,1);
  1638   000148  C032  F024         	movff	buggy_color_response@mL,instructions@mL
  1639   00014C  C033  F025         	movff	buggy_color_response@mL+1,instructions@mL+1
  1640   000150  C034  F026         	movff	buggy_color_response@mR,instructions@mR
  1641   000154  C035  F027         	movff	buggy_color_response@mR+1,instructions@mR+1
  1642   000158  0E00               	movlw	0
  1643   00015A  6E29               	movwf	(instructions@count+1)^0,c
  1644   00015C  0E01               	movlw	1
  1645   00015E  6E28               	movwf	instructions@count^0,c
  1646   000160  EC84  F004         	call	_instructions	;wreg free
  1647   000164                     l2616:
  1648                           
  1649                           ;color.c: 109:     if (color.B_norm < 0.25 && color.G_norm > 0.40) {
  1650   000164  C050  F001         	movff	_color+12,___flge@ff1
  1651   000168  C051  F002         	movff	_color+13,___flge@ff1+1
  1652   00016C  C052  F003         	movff	_color+14,___flge@ff1+2
  1653   000170  C053  F004         	movff	_color+15,___flge@ff1+3
  1654   000174  0E00               	movlw	0
  1655   000176  6E05               	movwf	___flge@ff2^0,c
  1656   000178  0E00               	movlw	0
  1657   00017A  6E06               	movwf	(___flge@ff2+1)^0,c
  1658   00017C  0E80               	movlw	128
  1659   00017E  6E07               	movwf	(___flge@ff2+2)^0,c
  1660   000180  0E3E               	movlw	62
  1661   000182  6E08               	movwf	(___flge@ff2+3)^0,c
  1662   000184  ECE6  F009         	call	___flge	;wreg free
  1663   000188  B0D8               	btfsc	status,0,c
  1664   00018A  EFC9  F000         	goto	u1861
  1665   00018E  EFCB  F000         	goto	u1860
  1666   000192                     u1861:
  1667   000192  EFF2  F000         	goto	l2622
  1668   000196                     u1860:
  1669   000196  0ECD               	movlw	205
  1670   000198  6E01               	movwf	___flge@ff1^0,c
  1671   00019A  0ECC               	movlw	204
  1672   00019C  6E02               	movwf	(___flge@ff1+1)^0,c
  1673   00019E  0ECC               	movlw	204
  1674   0001A0  6E03               	movwf	(___flge@ff1+2)^0,c
  1675   0001A2  0E3E               	movlw	62
  1676   0001A4  6E04               	movwf	(___flge@ff1+3)^0,c
  1677   0001A6  C054  F005         	movff	_color+16,___flge@ff2
  1678   0001AA  C055  F006         	movff	_color+17,___flge@ff2+1
  1679   0001AE  C056  F007         	movff	_color+18,___flge@ff2+2
  1680   0001B2  C057  F008         	movff	_color+19,___flge@ff2+3
  1681   0001B6  ECE6  F009         	call	___flge	;wreg free
  1682   0001BA  B0D8               	btfsc	status,0,c
  1683   0001BC  EFE2  F000         	goto	u1871
  1684   0001C0  EFE4  F000         	goto	u1870
  1685   0001C4                     u1871:
  1686   0001C4  EFF2  F000         	goto	l2622
  1687   0001C8                     u1870:
  1688   0001C8                     
  1689                           ;color.c: 110:     instructions(mL,mR,2);
  1690   0001C8  C032  F024         	movff	buggy_color_response@mL,instructions@mL
  1691   0001CC  C033  F025         	movff	buggy_color_response@mL+1,instructions@mL+1
  1692   0001D0  C034  F026         	movff	buggy_color_response@mR,instructions@mR
  1693   0001D4  C035  F027         	movff	buggy_color_response@mR+1,instructions@mR+1
  1694   0001D8  0E00               	movlw	0
  1695   0001DA  6E29               	movwf	(instructions@count+1)^0,c
  1696   0001DC  0E02               	movlw	2
  1697   0001DE  6E28               	movwf	instructions@count^0,c
  1698   0001E0  EC84  F004         	call	_instructions	;wreg free
  1699   0001E4                     l2622:
  1700                           
  1701                           ;color.c: 112:     if (color.R_norm < 0.38 && color.B_norm > 0.32 && color.G_norm > 0.34
      +                          ){
  1702   0001E4  C04C  F001         	movff	_color+8,___flge@ff1
  1703   0001E8  C04D  F002         	movff	_color+9,___flge@ff1+1
  1704   0001EC  C04E  F003         	movff	_color+10,___flge@ff1+2
  1705   0001F0  C04F  F004         	movff	_color+11,___flge@ff1+3
  1706   0001F4  0E5C               	movlw	92
  1707   0001F6  6E05               	movwf	___flge@ff2^0,c
  1708   0001F8  0E8F               	movlw	143
  1709   0001FA  6E06               	movwf	(___flge@ff2+1)^0,c
  1710   0001FC  0EC2               	movlw	194
  1711   0001FE  6E07               	movwf	(___flge@ff2+2)^0,c
  1712   000200  0E3E               	movlw	62
  1713   000202  6E08               	movwf	(___flge@ff2+3)^0,c
  1714   000204  ECE6  F009         	call	___flge	;wreg free
  1715   000208  B0D8               	btfsc	status,0,c
  1716   00020A  EF09  F001         	goto	u1881
  1717   00020E  EF0B  F001         	goto	u1880
  1718   000212                     u1881:
  1719   000212  EF4B  F001         	goto	l2630
  1720   000216                     u1880:
  1721   000216  0E0A               	movlw	10
  1722   000218  6E01               	movwf	___flge@ff1^0,c
  1723   00021A  0ED7               	movlw	215
  1724   00021C  6E02               	movwf	(___flge@ff1+1)^0,c
  1725   00021E  0EA3               	movlw	163
  1726   000220  6E03               	movwf	(___flge@ff1+2)^0,c
  1727   000222  0E3E               	movlw	62
  1728   000224  6E04               	movwf	(___flge@ff1+3)^0,c
  1729   000226  C050  F005         	movff	_color+12,___flge@ff2
  1730   00022A  C051  F006         	movff	_color+13,___flge@ff2+1
  1731   00022E  C052  F007         	movff	_color+14,___flge@ff2+2
  1732   000232  C053  F008         	movff	_color+15,___flge@ff2+3
  1733   000236  ECE6  F009         	call	___flge	;wreg free
  1734   00023A  B0D8               	btfsc	status,0,c
  1735   00023C  EF22  F001         	goto	u1891
  1736   000240  EF24  F001         	goto	u1890
  1737   000244                     u1891:
  1738   000244  EF4B  F001         	goto	l2630
  1739   000248                     u1890:
  1740   000248  0E7B               	movlw	123
  1741   00024A  6E01               	movwf	___flge@ff1^0,c
  1742   00024C  0E14               	movlw	20
  1743   00024E  6E02               	movwf	(___flge@ff1+1)^0,c
  1744   000250  0EAE               	movlw	174
  1745   000252  6E03               	movwf	(___flge@ff1+2)^0,c
  1746   000254  0E3E               	movlw	62
  1747   000256  6E04               	movwf	(___flge@ff1+3)^0,c
  1748   000258  C054  F005         	movff	_color+16,___flge@ff2
  1749   00025C  C055  F006         	movff	_color+17,___flge@ff2+1
  1750   000260  C056  F007         	movff	_color+18,___flge@ff2+2
  1751   000264  C057  F008         	movff	_color+19,___flge@ff2+3
  1752   000268  ECE6  F009         	call	___flge	;wreg free
  1753   00026C  B0D8               	btfsc	status,0,c
  1754   00026E  EF3B  F001         	goto	u1901
  1755   000272  EF3D  F001         	goto	u1900
  1756   000276                     u1901:
  1757   000276  EF4B  F001         	goto	l2630
  1758   00027A                     u1900:
  1759   00027A                     
  1760                           ;color.c: 113:     instructions(mL,mR,3);
  1761   00027A  C032  F024         	movff	buggy_color_response@mL,instructions@mL
  1762   00027E  C033  F025         	movff	buggy_color_response@mL+1,instructions@mL+1
  1763   000282  C034  F026         	movff	buggy_color_response@mR,instructions@mR
  1764   000286  C035  F027         	movff	buggy_color_response@mR+1,instructions@mR+1
  1765   00028A  0E00               	movlw	0
  1766   00028C  6E29               	movwf	(instructions@count+1)^0,c
  1767   00028E  0E03               	movlw	3
  1768   000290  6E28               	movwf	instructions@count^0,c
  1769   000292  EC84  F004         	call	_instructions	;wreg free
  1770   000296                     l2630:
  1771                           
  1772                           ;color.c: 115:     if (color.R_norm > 0.52 && color.G_norm > 0.32){
  1773   000296  0EB8               	movlw	184
  1774   000298  6E01               	movwf	___flge@ff1^0,c
  1775   00029A  0E1E               	movlw	30
  1776   00029C  6E02               	movwf	(___flge@ff1+1)^0,c
  1777   00029E  0E05               	movlw	5
  1778   0002A0  6E03               	movwf	(___flge@ff1+2)^0,c
  1779   0002A2  0E3F               	movlw	63
  1780   0002A4  6E04               	movwf	(___flge@ff1+3)^0,c
  1781   0002A6  C04C  F005         	movff	_color+8,___flge@ff2
  1782   0002AA  C04D  F006         	movff	_color+9,___flge@ff2+1
  1783   0002AE  C04E  F007         	movff	_color+10,___flge@ff2+2
  1784   0002B2  C04F  F008         	movff	_color+11,___flge@ff2+3
  1785   0002B6  ECE6  F009         	call	___flge	;wreg free
  1786   0002BA  B0D8               	btfsc	status,0,c
  1787   0002BC  EF62  F001         	goto	u1911
  1788   0002C0  EF64  F001         	goto	u1910
  1789   0002C4                     u1911:
  1790   0002C4  EF8B  F001         	goto	l2636
  1791   0002C8                     u1910:
  1792   0002C8  0E0A               	movlw	10
  1793   0002CA  6E01               	movwf	___flge@ff1^0,c
  1794   0002CC  0ED7               	movlw	215
  1795   0002CE  6E02               	movwf	(___flge@ff1+1)^0,c
  1796   0002D0  0EA3               	movlw	163
  1797   0002D2  6E03               	movwf	(___flge@ff1+2)^0,c
  1798   0002D4  0E3E               	movlw	62
  1799   0002D6  6E04               	movwf	(___flge@ff1+3)^0,c
  1800   0002D8  C054  F005         	movff	_color+16,___flge@ff2
  1801   0002DC  C055  F006         	movff	_color+17,___flge@ff2+1
  1802   0002E0  C056  F007         	movff	_color+18,___flge@ff2+2
  1803   0002E4  C057  F008         	movff	_color+19,___flge@ff2+3
  1804   0002E8  ECE6  F009         	call	___flge	;wreg free
  1805   0002EC  B0D8               	btfsc	status,0,c
  1806   0002EE  EF7B  F001         	goto	u1921
  1807   0002F2  EF7D  F001         	goto	u1920
  1808   0002F6                     u1921:
  1809   0002F6  EF8B  F001         	goto	l2636
  1810   0002FA                     u1920:
  1811   0002FA                     
  1812                           ;color.c: 116:     instructions(mL,mR,4);
  1813   0002FA  C032  F024         	movff	buggy_color_response@mL,instructions@mL
  1814   0002FE  C033  F025         	movff	buggy_color_response@mL+1,instructions@mL+1
  1815   000302  C034  F026         	movff	buggy_color_response@mR,instructions@mR
  1816   000306  C035  F027         	movff	buggy_color_response@mR+1,instructions@mR+1
  1817   00030A  0E00               	movlw	0
  1818   00030C  6E29               	movwf	(instructions@count+1)^0,c
  1819   00030E  0E04               	movlw	4
  1820   000310  6E28               	movwf	instructions@count^0,c
  1821   000312  EC84  F004         	call	_instructions	;wreg free
  1822   000316                     l2636:
  1823                           
  1824                           ;color.c: 118:     if (color.R_norm > 0.50 && color.B_norm > 0.24 && color.G_norm < 0.33
      +                          ){
  1825   000316  0E00               	movlw	0
  1826   000318  6E01               	movwf	___flge@ff1^0,c
  1827   00031A  0E00               	movlw	0
  1828   00031C  6E02               	movwf	(___flge@ff1+1)^0,c
  1829   00031E  0E00               	movlw	0
  1830   000320  6E03               	movwf	(___flge@ff1+2)^0,c
  1831   000322  0E3F               	movlw	63
  1832   000324  6E04               	movwf	(___flge@ff1+3)^0,c
  1833   000326  C04C  F005         	movff	_color+8,___flge@ff2
  1834   00032A  C04D  F006         	movff	_color+9,___flge@ff2+1
  1835   00032E  C04E  F007         	movff	_color+10,___flge@ff2+2
  1836   000332  C04F  F008         	movff	_color+11,___flge@ff2+3
  1837   000336  ECE6  F009         	call	___flge	;wreg free
  1838   00033A  B0D8               	btfsc	status,0,c
  1839   00033C  EFA2  F001         	goto	u1931
  1840   000340  EFA4  F001         	goto	u1930
  1841   000344                     u1931:
  1842   000344  EFE4  F001         	goto	l2644
  1843   000348                     u1930:
  1844   000348  0E8F               	movlw	143
  1845   00034A  6E01               	movwf	___flge@ff1^0,c
  1846   00034C  0EC2               	movlw	194
  1847   00034E  6E02               	movwf	(___flge@ff1+1)^0,c
  1848   000350  0E75               	movlw	117
  1849   000352  6E03               	movwf	(___flge@ff1+2)^0,c
  1850   000354  0E3E               	movlw	62
  1851   000356  6E04               	movwf	(___flge@ff1+3)^0,c
  1852   000358  C050  F005         	movff	_color+12,___flge@ff2
  1853   00035C  C051  F006         	movff	_color+13,___flge@ff2+1
  1854   000360  C052  F007         	movff	_color+14,___flge@ff2+2
  1855   000364  C053  F008         	movff	_color+15,___flge@ff2+3
  1856   000368  ECE6  F009         	call	___flge	;wreg free
  1857   00036C  B0D8               	btfsc	status,0,c
  1858   00036E  EFBB  F001         	goto	u1941
  1859   000372  EFBD  F001         	goto	u1940
  1860   000376                     u1941:
  1861   000376  EFE4  F001         	goto	l2644
  1862   00037A                     u1940:
  1863   00037A  C054  F001         	movff	_color+16,___flge@ff1
  1864   00037E  C055  F002         	movff	_color+17,___flge@ff1+1
  1865   000382  C056  F003         	movff	_color+18,___flge@ff1+2
  1866   000386  C057  F004         	movff	_color+19,___flge@ff1+3
  1867   00038A  0EC3               	movlw	195
  1868   00038C  6E05               	movwf	___flge@ff2^0,c
  1869   00038E  0EF5               	movlw	245
  1870   000390  6E06               	movwf	(___flge@ff2+1)^0,c
  1871   000392  0EA8               	movlw	168
  1872   000394  6E07               	movwf	(___flge@ff2+2)^0,c
  1873   000396  0E3E               	movlw	62
  1874   000398  6E08               	movwf	(___flge@ff2+3)^0,c
  1875   00039A  ECE6  F009         	call	___flge	;wreg free
  1876   00039E  B0D8               	btfsc	status,0,c
  1877   0003A0  EFD4  F001         	goto	u1951
  1878   0003A4  EFD6  F001         	goto	u1950
  1879   0003A8                     u1951:
  1880   0003A8  EFE4  F001         	goto	l2644
  1881   0003AC                     u1950:
  1882   0003AC                     
  1883                           ;color.c: 119:     instructions(mL,mR,5);
  1884   0003AC  C032  F024         	movff	buggy_color_response@mL,instructions@mL
  1885   0003B0  C033  F025         	movff	buggy_color_response@mL+1,instructions@mL+1
  1886   0003B4  C034  F026         	movff	buggy_color_response@mR,instructions@mR
  1887   0003B8  C035  F027         	movff	buggy_color_response@mR+1,instructions@mR+1
  1888   0003BC  0E00               	movlw	0
  1889   0003BE  6E29               	movwf	(instructions@count+1)^0,c
  1890   0003C0  0E05               	movlw	5
  1891   0003C2  6E28               	movwf	instructions@count^0,c
  1892   0003C4  EC84  F004         	call	_instructions	;wreg free
  1893   0003C8                     l2644:
  1894                           
  1895                           ;color.c: 121:     if (color.R_norm > 0.60 && color.B_norm < 0.22 && color.G_norm > 0.23
      +                          ){
  1896   0003C8  0E9A               	movlw	154
  1897   0003CA  6E01               	movwf	___flge@ff1^0,c
  1898   0003CC  0E99               	movlw	153
  1899   0003CE  6E02               	movwf	(___flge@ff1+1)^0,c
  1900   0003D0  0E19               	movlw	25
  1901   0003D2  6E03               	movwf	(___flge@ff1+2)^0,c
  1902   0003D4  0E3F               	movlw	63
  1903   0003D6  6E04               	movwf	(___flge@ff1+3)^0,c
  1904   0003D8  C04C  F005         	movff	_color+8,___flge@ff2
  1905   0003DC  C04D  F006         	movff	_color+9,___flge@ff2+1
  1906   0003E0  C04E  F007         	movff	_color+10,___flge@ff2+2
  1907   0003E4  C04F  F008         	movff	_color+11,___flge@ff2+3
  1908   0003E8  ECE6  F009         	call	___flge	;wreg free
  1909   0003EC  B0D8               	btfsc	status,0,c
  1910   0003EE  EFFB  F001         	goto	u1961
  1911   0003F2  EFFD  F001         	goto	u1960
  1912   0003F6                     u1961:
  1913   0003F6  EF3D  F002         	goto	l2652
  1914   0003FA                     u1960:
  1915   0003FA  C050  F001         	movff	_color+12,___flge@ff1
  1916   0003FE  C051  F002         	movff	_color+13,___flge@ff1+1
  1917   000402  C052  F003         	movff	_color+14,___flge@ff1+2
  1918   000406  C053  F004         	movff	_color+15,___flge@ff1+3
  1919   00040A  0EAE               	movlw	174
  1920   00040C  6E05               	movwf	___flge@ff2^0,c
  1921   00040E  0E47               	movlw	71
  1922   000410  6E06               	movwf	(___flge@ff2+1)^0,c
  1923   000412  0E61               	movlw	97
  1924   000414  6E07               	movwf	(___flge@ff2+2)^0,c
  1925   000416  0E3E               	movlw	62
  1926   000418  6E08               	movwf	(___flge@ff2+3)^0,c
  1927   00041A  ECE6  F009         	call	___flge	;wreg free
  1928   00041E  B0D8               	btfsc	status,0,c
  1929   000420  EF14  F002         	goto	u1971
  1930   000424  EF16  F002         	goto	u1970
  1931   000428                     u1971:
  1932   000428  EF3D  F002         	goto	l2652
  1933   00042C                     u1970:
  1934   00042C  0E1F               	movlw	31
  1935   00042E  6E01               	movwf	___flge@ff1^0,c
  1936   000430  0E85               	movlw	133
  1937   000432  6E02               	movwf	(___flge@ff1+1)^0,c
  1938   000434  0E6B               	movlw	107
  1939   000436  6E03               	movwf	(___flge@ff1+2)^0,c
  1940   000438  0E3E               	movlw	62
  1941   00043A  6E04               	movwf	(___flge@ff1+3)^0,c
  1942   00043C  C054  F005         	movff	_color+16,___flge@ff2
  1943   000440  C055  F006         	movff	_color+17,___flge@ff2+1
  1944   000444  C056  F007         	movff	_color+18,___flge@ff2+2
  1945   000448  C057  F008         	movff	_color+19,___flge@ff2+3
  1946   00044C  ECE6  F009         	call	___flge	;wreg free
  1947   000450  B0D8               	btfsc	status,0,c
  1948   000452  EF2D  F002         	goto	u1981
  1949   000456  EF2F  F002         	goto	u1980
  1950   00045A                     u1981:
  1951   00045A  EF3D  F002         	goto	l2652
  1952   00045E                     u1980:
  1953   00045E                     
  1954                           ;color.c: 122:     instructions(mL,mR,6);
  1955   00045E  C032  F024         	movff	buggy_color_response@mL,instructions@mL
  1956   000462  C033  F025         	movff	buggy_color_response@mL+1,instructions@mL+1
  1957   000466  C034  F026         	movff	buggy_color_response@mR,instructions@mR
  1958   00046A  C035  F027         	movff	buggy_color_response@mR+1,instructions@mR+1
  1959   00046E  0E00               	movlw	0
  1960   000470  6E29               	movwf	(instructions@count+1)^0,c
  1961   000472  0E06               	movlw	6
  1962   000474  6E28               	movwf	instructions@count^0,c
  1963   000476  EC84  F004         	call	_instructions	;wreg free
  1964   00047A                     l2652:
  1965                           
  1966                           ;color.c: 124:     if (color.R_norm < 0.40 && color.B_norm > 0.30 && color.G_norm > 0.4)
      +                          {
  1967   00047A  C04C  F001         	movff	_color+8,___flge@ff1
  1968   00047E  C04D  F002         	movff	_color+9,___flge@ff1+1
  1969   000482  C04E  F003         	movff	_color+10,___flge@ff1+2
  1970   000486  C04F  F004         	movff	_color+11,___flge@ff1+3
  1971   00048A  0ECD               	movlw	205
  1972   00048C  6E05               	movwf	___flge@ff2^0,c
  1973   00048E  0ECC               	movlw	204
  1974   000490  6E06               	movwf	(___flge@ff2+1)^0,c
  1975   000492  0ECC               	movlw	204
  1976   000494  6E07               	movwf	(___flge@ff2+2)^0,c
  1977   000496  0E3E               	movlw	62
  1978   000498  6E08               	movwf	(___flge@ff2+3)^0,c
  1979   00049A  ECE6  F009         	call	___flge	;wreg free
  1980   00049E  B0D8               	btfsc	status,0,c
  1981   0004A0  EF54  F002         	goto	u1991
  1982   0004A4  EF56  F002         	goto	u1990
  1983   0004A8                     u1991:
  1984   0004A8  EF96  F002         	goto	l2660
  1985   0004AC                     u1990:
  1986   0004AC  0E9A               	movlw	154
  1987   0004AE  6E01               	movwf	___flge@ff1^0,c
  1988   0004B0  0E99               	movlw	153
  1989   0004B2  6E02               	movwf	(___flge@ff1+1)^0,c
  1990   0004B4  0E99               	movlw	153
  1991   0004B6  6E03               	movwf	(___flge@ff1+2)^0,c
  1992   0004B8  0E3E               	movlw	62
  1993   0004BA  6E04               	movwf	(___flge@ff1+3)^0,c
  1994   0004BC  C050  F005         	movff	_color+12,___flge@ff2
  1995   0004C0  C051  F006         	movff	_color+13,___flge@ff2+1
  1996   0004C4  C052  F007         	movff	_color+14,___flge@ff2+2
  1997   0004C8  C053  F008         	movff	_color+15,___flge@ff2+3
  1998   0004CC  ECE6  F009         	call	___flge	;wreg free
  1999   0004D0  B0D8               	btfsc	status,0,c
  2000   0004D2  EF6D  F002         	goto	u2001
  2001   0004D6  EF6F  F002         	goto	u2000
  2002   0004DA                     u2001:
  2003   0004DA  EF96  F002         	goto	l2660
  2004   0004DE                     u2000:
  2005   0004DE  0ECD               	movlw	205
  2006   0004E0  6E01               	movwf	___flge@ff1^0,c
  2007   0004E2  0ECC               	movlw	204
  2008   0004E4  6E02               	movwf	(___flge@ff1+1)^0,c
  2009   0004E6  0ECC               	movlw	204
  2010   0004E8  6E03               	movwf	(___flge@ff1+2)^0,c
  2011   0004EA  0E3E               	movlw	62
  2012   0004EC  6E04               	movwf	(___flge@ff1+3)^0,c
  2013   0004EE  C054  F005         	movff	_color+16,___flge@ff2
  2014   0004F2  C055  F006         	movff	_color+17,___flge@ff2+1
  2015   0004F6  C056  F007         	movff	_color+18,___flge@ff2+2
  2016   0004FA  C057  F008         	movff	_color+19,___flge@ff2+3
  2017   0004FE  ECE6  F009         	call	___flge	;wreg free
  2018   000502  B0D8               	btfsc	status,0,c
  2019   000504  EF86  F002         	goto	u2011
  2020   000508  EF88  F002         	goto	u2010
  2021   00050C                     u2011:
  2022   00050C  EF96  F002         	goto	l2660
  2023   000510                     u2010:
  2024   000510                     
  2025                           ;color.c: 125:     instructions(mL,mR,7);
  2026   000510  C032  F024         	movff	buggy_color_response@mL,instructions@mL
  2027   000514  C033  F025         	movff	buggy_color_response@mL+1,instructions@mL+1
  2028   000518  C034  F026         	movff	buggy_color_response@mR,instructions@mR
  2029   00051C  C035  F027         	movff	buggy_color_response@mR+1,instructions@mR+1
  2030   000520  0E00               	movlw	0
  2031   000522  6E29               	movwf	(instructions@count+1)^0,c
  2032   000524  0E07               	movlw	7
  2033   000526  6E28               	movwf	instructions@count^0,c
  2034   000528  EC84  F004         	call	_instructions	;wreg free
  2035   00052C                     l2660:
  2036                           
  2037                           ;color.c: 127:     if (color.R_norm < 0.5 && color.C > 16000){
  2038   00052C  C04C  F001         	movff	_color+8,___flge@ff1
  2039   000530  C04D  F002         	movff	_color+9,___flge@ff1+1
  2040   000534  C04E  F003         	movff	_color+10,___flge@ff1+2
  2041   000538  C04F  F004         	movff	_color+11,___flge@ff1+3
  2042   00053C  0E00               	movlw	0
  2043   00053E  6E05               	movwf	___flge@ff2^0,c
  2044   000540  0E00               	movlw	0
  2045   000542  6E06               	movwf	(___flge@ff2+1)^0,c
  2046   000544  0E00               	movlw	0
  2047   000546  6E07               	movwf	(___flge@ff2+2)^0,c
  2048   000548  0E3F               	movlw	63
  2049   00054A  6E08               	movwf	(___flge@ff2+3)^0,c
  2050   00054C  ECE6  F009         	call	___flge	;wreg free
  2051   000550  EFB4  F002         	goto	l2666
  2052   000554                     l2664:
  2053   000554  C032  F01A         	movff	buggy_color_response@mL,forward@mL
  2054   000558  C033  F01B         	movff	buggy_color_response@mL+1,forward@mL+1
  2055   00055C  C034  F01C         	movff	buggy_color_response@mR,forward@mR
  2056   000560  C035  F01D         	movff	buggy_color_response@mR+1,forward@mR+1
  2057   000564  EC47  F00B         	call	_forward	;wreg free
  2058   000568                     l2666:
  2059                           
  2060                           ;color.c: 132:     read_color_flag = 0;
  2061   000568  0E00               	movlw	0
  2062   00056A  6E42               	movwf	_read_color_flag^0,c
  2063   00056C  0012               	return		;funcret
  2064   00056E                     __end_of_buggy_color_response:
  2065                           	callstack 0
  2066                           
  2067 ;; *************** function _instructions *****************
  2068 ;; Defined at:
  2069 ;;		line 254 in file "dc_motor.c"
  2070 ;; Parameters:    Size  Location     Type
  2071 ;;  mL              2   35[COMRAM] PTR struct DC_motor
  2072 ;;		 -> motorL(9), 
  2073 ;;  mR              2   37[COMRAM] PTR struct DC_motor
  2074 ;;		 -> motorR(9), 
  2075 ;;  count           2   39[COMRAM] int 
  2076 ;; Auto vars:     Size  Location     Type
  2077 ;;		None
  2078 ;; Return value:  Size  Location     Type
  2079 ;;                  1    wreg      void 
  2080 ;; Registers used:
  2081 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2082 ;; Tracked objects:
  2083 ;;		On entry : 0/0
  2084 ;;		On exit  : 0/0
  2085 ;;		Unchanged: 0/0
  2086 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2087 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2088 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2089 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2090 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2091 ;;Total ram usage:        8 bytes
  2092 ;; Hardware stack levels used: 1
  2093 ;; Hardware stack levels required when called: 5
  2094 ;; This function calls:
  2095 ;;		_left_45
  2096 ;;		_reverse
  2097 ;;		_right_45
  2098 ;;		_space
  2099 ;;		_stop
  2100 ;; This function is called by:
  2101 ;;		_buggy_color_response
  2102 ;; This function uses a non-reentrant model
  2103 ;;
  2104                           
  2105                           	psect	text9
  2106   000908                     __ptext9:
  2107                           	callstack 0
  2108   000908                     _instructions:
  2109                           	callstack 24
  2110   000908                     
  2111                           ;dc_motor.c: 254: void instructions(DC_motor *mL, DC_motor *mR, int count);dc_motor.c: 2
      +                          55: {;dc_motor.c: 256:     space(mL,mR);
  2112   000908  C024  F01A         	movff	instructions@mL,space@mL
  2113   00090C  C025  F01B         	movff	instructions@mL+1,space@mL+1
  2114   000910  C026  F01C         	movff	instructions@mR,space@mR
  2115   000914  C027  F01D         	movff	instructions@mR+1,space@mR+1
  2116   000918  EC68  F00A         	call	_space	;wreg free
  2117   00091C                     
  2118                           ;dc_motor.c: 257:     _delay((unsigned long)((500)*(64000000/4000.0)));
  2119   00091C  0E29               	movlw	41
  2120   00091E  6E2B               	movwf	(??_instructions+1)^0,c
  2121   000920  0E96               	movlw	150
  2122   000922  6E2A               	movwf	??_instructions^0,c
  2123   000924  0E7F               	movlw	127
  2124   000926                     u2177:
  2125   000926  2EE8               	decfsz	wreg,f,c
  2126   000928  D7FE               	bra	u2177
  2127   00092A  2E2A               	decfsz	??_instructions^0,f,c
  2128   00092C  D7FC               	bra	u2177
  2129   00092E  2E2B               	decfsz	(??_instructions+1)^0,f,c
  2130   000930  D7FA               	bra	u2177
  2131   000932  F000               	nop	
  2132   000934                     
  2133                           ;dc_motor.c: 258:     stop(mL,mR);
  2134   000934  C024  F014         	movff	instructions@mL,stop@mL
  2135   000938  C025  F015         	movff	instructions@mL+1,stop@mL+1
  2136   00093C  C026  F016         	movff	instructions@mR,stop@mR
  2137   000940  C027  F017         	movff	instructions@mR+1,stop@mR+1
  2138   000944  ECA6  F00B         	call	_stop	;wreg free
  2139                           
  2140                           ;dc_motor.c: 259:     _delay((unsigned long)((500)*(64000000/4000.0)));
  2141   000948  0E29               	movlw	41
  2142   00094A  6E2B               	movwf	(??_instructions+1)^0,c
  2143   00094C  0E96               	movlw	150
  2144   00094E  6E2A               	movwf	??_instructions^0,c
  2145   000950  0E7F               	movlw	127
  2146   000952                     u2187:
  2147   000952  2EE8               	decfsz	wreg,f,c
  2148   000954  D7FE               	bra	u2187
  2149   000956  2E2A               	decfsz	??_instructions^0,f,c
  2150   000958  D7FC               	bra	u2187
  2151   00095A  2E2B               	decfsz	(??_instructions+1)^0,f,c
  2152   00095C  D7FA               	bra	u2187
  2153   00095E  F000               	nop	
  2154   000960                     
  2155                           ;dc_motor.c: 261:     if (count == 1){right_45(mL,mR,2); stop(mL,mR);}
  2156   000960  0428               	decf	instructions@count^0,w,c
  2157   000962  1029               	iorwf	(instructions@count+1)^0,w,c
  2158   000964  A4D8               	btfss	status,2,c
  2159   000966  EFB7  F004         	goto	u1681
  2160   00096A  EFB9  F004         	goto	u1680
  2161   00096E                     u1681:
  2162   00096E  EFD1  F004         	goto	l2502
  2163   000972                     u1680:
  2164   000972  C024  F01A         	movff	instructions@mL,right_45@mL
  2165   000976  C025  F01B         	movff	instructions@mL+1,right_45@mL+1
  2166   00097A  C026  F01C         	movff	instructions@mR,right_45@mR
  2167   00097E  C027  F01D         	movff	instructions@mR+1,right_45@mR+1
  2168   000982  0E00               	movlw	0
  2169   000984  6E1F               	movwf	(right_45@count+1)^0,c
  2170   000986  0E02               	movlw	2
  2171   000988  6E1E               	movwf	right_45@count^0,c
  2172   00098A  EC26  F008         	call	_right_45	;wreg free
  2173   00098E  C024  F014         	movff	instructions@mL,stop@mL
  2174   000992  C025  F015         	movff	instructions@mL+1,stop@mL+1
  2175   000996  C026  F016         	movff	instructions@mR,stop@mR
  2176   00099A  C027  F017         	movff	instructions@mR+1,stop@mR+1
  2177   00099E  ECA6  F00B         	call	_stop	;wreg free
  2178   0009A2                     l2502:
  2179                           
  2180                           ;dc_motor.c: 262:     if (count == 2){left_45(mL,mR,2); stop(mL,mR);}
  2181   0009A2  0E02               	movlw	2
  2182   0009A4  1828               	xorwf	instructions@count^0,w,c
  2183   0009A6  1029               	iorwf	(instructions@count+1)^0,w,c
  2184   0009A8  A4D8               	btfss	status,2,c
  2185   0009AA  EFD9  F004         	goto	u1691
  2186   0009AE  EFDB  F004         	goto	u1690
  2187   0009B2                     u1691:
  2188   0009B2  EFF3  F004         	goto	l2506
  2189   0009B6                     u1690:
  2190   0009B6  C024  F01A         	movff	instructions@mL,left_45@mL
  2191   0009BA  C025  F01B         	movff	instructions@mL+1,left_45@mL+1
  2192   0009BE  C026  F01C         	movff	instructions@mR,left_45@mR
  2193   0009C2  C027  F01D         	movff	instructions@mR+1,left_45@mR+1
  2194   0009C6  0E00               	movlw	0
  2195   0009C8  6E1F               	movwf	(left_45@count+1)^0,c
  2196   0009CA  0E02               	movlw	2
  2197   0009CC  6E1E               	movwf	left_45@count^0,c
  2198   0009CE  EC86  F007         	call	_left_45	;wreg free
  2199   0009D2  C024  F014         	movff	instructions@mL,stop@mL
  2200   0009D6  C025  F015         	movff	instructions@mL+1,stop@mL+1
  2201   0009DA  C026  F016         	movff	instructions@mR,stop@mR
  2202   0009DE  C027  F017         	movff	instructions@mR+1,stop@mR+1
  2203   0009E2  ECA6  F00B         	call	_stop	;wreg free
  2204   0009E6                     l2506:
  2205                           
  2206                           ;dc_motor.c: 263:     if (count == 3){right_45(mL,mR,4); stop(mL,mR);}
  2207   0009E6  0E03               	movlw	3
  2208   0009E8  1828               	xorwf	instructions@count^0,w,c
  2209   0009EA  1029               	iorwf	(instructions@count+1)^0,w,c
  2210   0009EC  A4D8               	btfss	status,2,c
  2211   0009EE  EFFB  F004         	goto	u1701
  2212   0009F2  EFFD  F004         	goto	u1700
  2213   0009F6                     u1701:
  2214   0009F6  EF15  F005         	goto	l2510
  2215   0009FA                     u1700:
  2216   0009FA  C024  F01A         	movff	instructions@mL,right_45@mL
  2217   0009FE  C025  F01B         	movff	instructions@mL+1,right_45@mL+1
  2218   000A02  C026  F01C         	movff	instructions@mR,right_45@mR
  2219   000A06  C027  F01D         	movff	instructions@mR+1,right_45@mR+1
  2220   000A0A  0E00               	movlw	0
  2221   000A0C  6E1F               	movwf	(right_45@count+1)^0,c
  2222   000A0E  0E04               	movlw	4
  2223   000A10  6E1E               	movwf	right_45@count^0,c
  2224   000A12  EC26  F008         	call	_right_45	;wreg free
  2225   000A16  C024  F014         	movff	instructions@mL,stop@mL
  2226   000A1A  C025  F015         	movff	instructions@mL+1,stop@mL+1
  2227   000A1E  C026  F016         	movff	instructions@mR,stop@mR
  2228   000A22  C027  F017         	movff	instructions@mR+1,stop@mR+1
  2229   000A26  ECA6  F00B         	call	_stop	;wreg free
  2230   000A2A                     l2510:
  2231                           
  2232                           ;dc_motor.c: 264:     if (count == 4){reverse(mL,mR); _delay((unsigned long)((400)*(6400
      +                          0000/4000.0)));stop(mL,mR);_delay((unsigned long)((500)*(64000000/4000.0)));right_45(mL,
      +                          mR,2); stop(mL,mR);}
  2233   000A2A  0E04               	movlw	4
  2234   000A2C  1828               	xorwf	instructions@count^0,w,c
  2235   000A2E  1029               	iorwf	(instructions@count+1)^0,w,c
  2236   000A30  A4D8               	btfss	status,2,c
  2237   000A32  EF1D  F005         	goto	u1711
  2238   000A36  EF1F  F005         	goto	u1710
  2239   000A3A                     u1711:
  2240   000A3A  EF63  F005         	goto	l2522
  2241   000A3E                     u1710:
  2242   000A3E  C024  F01A         	movff	instructions@mL,reverse@mL
  2243   000A42  C025  F01B         	movff	instructions@mL+1,reverse@mL+1
  2244   000A46  C026  F01C         	movff	instructions@mR,reverse@mR
  2245   000A4A  C027  F01D         	movff	instructions@mR+1,reverse@mR+1
  2246   000A4E  ECE8  F00A         	call	_reverse	;wreg free
  2247   000A52  0E21               	movlw	33
  2248   000A54  6E2B               	movwf	(??_instructions+1)^0,c
  2249   000A56  0E78               	movlw	120
  2250   000A58  6E2A               	movwf	??_instructions^0,c
  2251   000A5A  0E98               	movlw	152
  2252   000A5C                     u2197:
  2253   000A5C  2EE8               	decfsz	wreg,f,c
  2254   000A5E  D7FE               	bra	u2197
  2255   000A60  2E2A               	decfsz	??_instructions^0,f,c
  2256   000A62  D7FC               	bra	u2197
  2257   000A64  2E2B               	decfsz	(??_instructions+1)^0,f,c
  2258   000A66  D7FA               	bra	u2197
  2259   000A68  D000               	nop2	
  2260   000A6A  C024  F014         	movff	instructions@mL,stop@mL
  2261   000A6E  C025  F015         	movff	instructions@mL+1,stop@mL+1
  2262   000A72  C026  F016         	movff	instructions@mR,stop@mR
  2263   000A76  C027  F017         	movff	instructions@mR+1,stop@mR+1
  2264   000A7A  ECA6  F00B         	call	_stop	;wreg free
  2265   000A7E  0E29               	movlw	41
  2266   000A80  6E2B               	movwf	(??_instructions+1)^0,c
  2267   000A82  0E96               	movlw	150
  2268   000A84  6E2A               	movwf	??_instructions^0,c
  2269   000A86  0E7F               	movlw	127
  2270   000A88                     u2207:
  2271   000A88  2EE8               	decfsz	wreg,f,c
  2272   000A8A  D7FE               	bra	u2207
  2273   000A8C  2E2A               	decfsz	??_instructions^0,f,c
  2274   000A8E  D7FC               	bra	u2207
  2275   000A90  2E2B               	decfsz	(??_instructions+1)^0,f,c
  2276   000A92  D7FA               	bra	u2207
  2277   000A94  F000               	nop	
  2278   000A96  C024  F01A         	movff	instructions@mL,right_45@mL
  2279   000A9A  C025  F01B         	movff	instructions@mL+1,right_45@mL+1
  2280   000A9E  C026  F01C         	movff	instructions@mR,right_45@mR
  2281   000AA2  C027  F01D         	movff	instructions@mR+1,right_45@mR+1
  2282   000AA6  0E00               	movlw	0
  2283   000AA8  6E1F               	movwf	(right_45@count+1)^0,c
  2284   000AAA  0E02               	movlw	2
  2285   000AAC  6E1E               	movwf	right_45@count^0,c
  2286   000AAE  EC26  F008         	call	_right_45	;wreg free
  2287   000AB2  C024  F014         	movff	instructions@mL,stop@mL
  2288   000AB6  C025  F015         	movff	instructions@mL+1,stop@mL+1
  2289   000ABA  C026  F016         	movff	instructions@mR,stop@mR
  2290   000ABE  C027  F017         	movff	instructions@mR+1,stop@mR+1
  2291   000AC2  ECA6  F00B         	call	_stop	;wreg free
  2292   000AC6                     l2522:
  2293                           
  2294                           ;dc_motor.c: 265:     if (count == 5){reverse(mL,mR); _delay((unsigned long)((400)*(6400
      +                          0000/4000.0)));stop(mL,mR);_delay((unsigned long)((500)*(64000000/4000.0)));left_45(mL,m
      +                          R,2); stop(mL,mR);}
  2295   000AC6  0E05               	movlw	5
  2296   000AC8  1828               	xorwf	instructions@count^0,w,c
  2297   000ACA  1029               	iorwf	(instructions@count+1)^0,w,c
  2298   000ACC  A4D8               	btfss	status,2,c
  2299   000ACE  EF6B  F005         	goto	u1721
  2300   000AD2  EF6D  F005         	goto	u1720
  2301   000AD6                     u1721:
  2302   000AD6  EFB1  F005         	goto	l2534
  2303   000ADA                     u1720:
  2304   000ADA  C024  F01A         	movff	instructions@mL,reverse@mL
  2305   000ADE  C025  F01B         	movff	instructions@mL+1,reverse@mL+1
  2306   000AE2  C026  F01C         	movff	instructions@mR,reverse@mR
  2307   000AE6  C027  F01D         	movff	instructions@mR+1,reverse@mR+1
  2308   000AEA  ECE8  F00A         	call	_reverse	;wreg free
  2309   000AEE  0E21               	movlw	33
  2310   000AF0  6E2B               	movwf	(??_instructions+1)^0,c
  2311   000AF2  0E78               	movlw	120
  2312   000AF4  6E2A               	movwf	??_instructions^0,c
  2313   000AF6  0E98               	movlw	152
  2314   000AF8                     u2217:
  2315   000AF8  2EE8               	decfsz	wreg,f,c
  2316   000AFA  D7FE               	bra	u2217
  2317   000AFC  2E2A               	decfsz	??_instructions^0,f,c
  2318   000AFE  D7FC               	bra	u2217
  2319   000B00  2E2B               	decfsz	(??_instructions+1)^0,f,c
  2320   000B02  D7FA               	bra	u2217
  2321   000B04  D000               	nop2	
  2322   000B06  C024  F014         	movff	instructions@mL,stop@mL
  2323   000B0A  C025  F015         	movff	instructions@mL+1,stop@mL+1
  2324   000B0E  C026  F016         	movff	instructions@mR,stop@mR
  2325   000B12  C027  F017         	movff	instructions@mR+1,stop@mR+1
  2326   000B16  ECA6  F00B         	call	_stop	;wreg free
  2327   000B1A  0E29               	movlw	41
  2328   000B1C  6E2B               	movwf	(??_instructions+1)^0,c
  2329   000B1E  0E96               	movlw	150
  2330   000B20  6E2A               	movwf	??_instructions^0,c
  2331   000B22  0E7F               	movlw	127
  2332   000B24                     u2227:
  2333   000B24  2EE8               	decfsz	wreg,f,c
  2334   000B26  D7FE               	bra	u2227
  2335   000B28  2E2A               	decfsz	??_instructions^0,f,c
  2336   000B2A  D7FC               	bra	u2227
  2337   000B2C  2E2B               	decfsz	(??_instructions+1)^0,f,c
  2338   000B2E  D7FA               	bra	u2227
  2339   000B30  F000               	nop	
  2340   000B32  C024  F01A         	movff	instructions@mL,left_45@mL
  2341   000B36  C025  F01B         	movff	instructions@mL+1,left_45@mL+1
  2342   000B3A  C026  F01C         	movff	instructions@mR,left_45@mR
  2343   000B3E  C027  F01D         	movff	instructions@mR+1,left_45@mR+1
  2344   000B42  0E00               	movlw	0
  2345   000B44  6E1F               	movwf	(left_45@count+1)^0,c
  2346   000B46  0E02               	movlw	2
  2347   000B48  6E1E               	movwf	left_45@count^0,c
  2348   000B4A  EC86  F007         	call	_left_45	;wreg free
  2349   000B4E  C024  F014         	movff	instructions@mL,stop@mL
  2350   000B52  C025  F015         	movff	instructions@mL+1,stop@mL+1
  2351   000B56  C026  F016         	movff	instructions@mR,stop@mR
  2352   000B5A  C027  F017         	movff	instructions@mR+1,stop@mR+1
  2353   000B5E  ECA6  F00B         	call	_stop	;wreg free
  2354   000B62                     l2534:
  2355                           
  2356                           ;dc_motor.c: 266:     if (count == 6){right_45(mL,mR,3); stop(mL,mR);}
  2357   000B62  0E06               	movlw	6
  2358   000B64  1828               	xorwf	instructions@count^0,w,c
  2359   000B66  1029               	iorwf	(instructions@count+1)^0,w,c
  2360   000B68  A4D8               	btfss	status,2,c
  2361   000B6A  EFB9  F005         	goto	u1731
  2362   000B6E  EFBB  F005         	goto	u1730
  2363   000B72                     u1731:
  2364   000B72  EFD3  F005         	goto	l2538
  2365   000B76                     u1730:
  2366   000B76  C024  F01A         	movff	instructions@mL,right_45@mL
  2367   000B7A  C025  F01B         	movff	instructions@mL+1,right_45@mL+1
  2368   000B7E  C026  F01C         	movff	instructions@mR,right_45@mR
  2369   000B82  C027  F01D         	movff	instructions@mR+1,right_45@mR+1
  2370   000B86  0E00               	movlw	0
  2371   000B88  6E1F               	movwf	(right_45@count+1)^0,c
  2372   000B8A  0E03               	movlw	3
  2373   000B8C  6E1E               	movwf	right_45@count^0,c
  2374   000B8E  EC26  F008         	call	_right_45	;wreg free
  2375   000B92  C024  F014         	movff	instructions@mL,stop@mL
  2376   000B96  C025  F015         	movff	instructions@mL+1,stop@mL+1
  2377   000B9A  C026  F016         	movff	instructions@mR,stop@mR
  2378   000B9E  C027  F017         	movff	instructions@mR+1,stop@mR+1
  2379   000BA2  ECA6  F00B         	call	_stop	;wreg free
  2380   000BA6                     l2538:
  2381                           
  2382                           ;dc_motor.c: 267:     if (count == 7){left_45(mL,mR,3); stop(mL,mR);}
  2383   000BA6  0E07               	movlw	7
  2384   000BA8  1828               	xorwf	instructions@count^0,w,c
  2385   000BAA  1029               	iorwf	(instructions@count+1)^0,w,c
  2386   000BAC  A4D8               	btfss	status,2,c
  2387   000BAE  EFDB  F005         	goto	u1741
  2388   000BB2  EFDD  F005         	goto	u1740
  2389   000BB6                     u1741:
  2390   000BB6  EFF5  F005         	goto	l368
  2391   000BBA                     u1740:
  2392   000BBA  C024  F01A         	movff	instructions@mL,left_45@mL
  2393   000BBE  C025  F01B         	movff	instructions@mL+1,left_45@mL+1
  2394   000BC2  C026  F01C         	movff	instructions@mR,left_45@mR
  2395   000BC6  C027  F01D         	movff	instructions@mR+1,left_45@mR+1
  2396   000BCA  0E00               	movlw	0
  2397   000BCC  6E1F               	movwf	(left_45@count+1)^0,c
  2398   000BCE  0E03               	movlw	3
  2399   000BD0  6E1E               	movwf	left_45@count^0,c
  2400   000BD2  EC86  F007         	call	_left_45	;wreg free
  2401   000BD6  C024  F014         	movff	instructions@mL,stop@mL
  2402   000BDA  C025  F015         	movff	instructions@mL+1,stop@mL+1
  2403   000BDE  C026  F016         	movff	instructions@mR,stop@mR
  2404   000BE2  C027  F017         	movff	instructions@mR+1,stop@mR+1
  2405   000BE6  ECA6  F00B         	call	_stop	;wreg free
  2406   000BEA                     l368:
  2407   000BEA  0012               	return		;funcret
  2408   000BEC                     __end_of_instructions:
  2409                           	callstack 0
  2410                           
  2411 ;; *************** function _space *****************
  2412 ;; Defined at:
  2413 ;;		line 231 in file "dc_motor.c"
  2414 ;; Parameters:    Size  Location     Type
  2415 ;;  mL              2   25[COMRAM] PTR struct DC_motor
  2416 ;;		 -> motorL(9), 
  2417 ;;  mR              2   27[COMRAM] PTR struct DC_motor
  2418 ;;		 -> motorR(9), 
  2419 ;; Auto vars:     Size  Location     Type
  2420 ;;		None
  2421 ;; Return value:  Size  Location     Type
  2422 ;;                  1    wreg      void 
  2423 ;; Registers used:
  2424 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2425 ;; Tracked objects:
  2426 ;;		On entry : 0/0
  2427 ;;		On exit  : 0/0
  2428 ;;		Unchanged: 0/0
  2429 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2430 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2431 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2432 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2433 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2434 ;;Total ram usage:        6 bytes
  2435 ;; Hardware stack levels used: 1
  2436 ;; Hardware stack levels required when called: 4
  2437 ;; This function calls:
  2438 ;;		_setMotorPWM
  2439 ;;		_stop
  2440 ;; This function is called by:
  2441 ;;		_instructions
  2442 ;; This function uses a non-reentrant model
  2443 ;;
  2444                           
  2445                           	psect	text10
  2446   0014D0                     __ptext10:
  2447                           	callstack 0
  2448   0014D0                     _space:
  2449                           	callstack 24
  2450   0014D0                     
  2451                           ;dc_motor.c: 231: void space(DC_motor *mL, DC_motor *mR);dc_motor.c: 232: {;dc_motor.c: 
      +                          233:     stop(mL,mR);
  2452   0014D0  C01A  F014         	movff	space@mL,stop@mL
  2453   0014D4  C01B  F015         	movff	space@mL+1,stop@mL+1
  2454   0014D8  C01C  F016         	movff	space@mR,stop@mR
  2455   0014DC  C01D  F017         	movff	space@mR+1,stop@mR+1
  2456   0014E0  ECA6  F00B         	call	_stop	;wreg free
  2457   0014E4                     
  2458                           ;dc_motor.c: 234:     LATHbits.LATH1 = 1;
  2459   0014E4  8280               	bsf	128,1,c	;volatile
  2460   0014E6                     
  2461                           ;dc_motor.c: 235:     mL-> direction = 0;
  2462   0014E6  EE20 F001          	lfsr	2,1
  2463   0014EA  501A               	movf	space@mL^0,w,c
  2464   0014EC  26D9               	addwf	fsr2l,f,c
  2465   0014EE  501B               	movf	(space@mL+1)^0,w,c
  2466   0014F0  22DA               	addwfc	fsr2h,f,c
  2467   0014F2  0E00               	movlw	0
  2468   0014F4  6EDF               	movwf	indf2,c
  2469   0014F6                     
  2470                           ;dc_motor.c: 236:     mR-> direction = 0;
  2471   0014F6  EE20 F001          	lfsr	2,1
  2472   0014FA  501C               	movf	space@mR^0,w,c
  2473   0014FC  26D9               	addwf	fsr2l,f,c
  2474   0014FE  501D               	movf	(space@mR+1)^0,w,c
  2475   001500  22DA               	addwfc	fsr2h,f,c
  2476   001502  0E00               	movlw	0
  2477   001504  6EDF               	movwf	indf2,c
  2478                           
  2479                           ;dc_motor.c: 237:     setMotorPWM(mR);
  2480   001506  C01C  F00E         	movff	space@mR,setMotorPWM@m
  2481   00150A  C01D  F00F         	movff	space@mR+1,setMotorPWM@m+1
  2482   00150E  ECD0  F006         	call	_setMotorPWM	;wreg free
  2483                           
  2484                           ;dc_motor.c: 238:     setMotorPWM(mL);
  2485   001512  C01A  F00E         	movff	space@mL,setMotorPWM@m
  2486   001516  C01B  F00F         	movff	space@mL+1,setMotorPWM@m+1
  2487   00151A  ECD0  F006         	call	_setMotorPWM	;wreg free
  2488                           
  2489                           ;dc_motor.c: 239:     while ((mL->power <40) && (mR->power <40)){
  2490   00151E  EFAD  F00A         	goto	l2276
  2491   001522                     l2268:
  2492                           
  2493                           ;dc_motor.c: 240:         mL->power += 10;
  2494   001522  C01A  FFD9         	movff	space@mL,fsr2l
  2495   001526  C01B  FFDA         	movff	space@mL+1,fsr2h
  2496   00152A  0E0A               	movlw	10
  2497   00152C  26DF               	addwf	indf2,f,c
  2498                           
  2499                           ;dc_motor.c: 241:         mR->power += 10;
  2500   00152E  C01C  FFD9         	movff	space@mR,fsr2l
  2501   001532  C01D  FFDA         	movff	space@mR+1,fsr2h
  2502   001536  0E0A               	movlw	10
  2503   001538  26DF               	addwf	indf2,f,c
  2504   00153A                     
  2505                           ;dc_motor.c: 242:         setMotorPWM(mL);
  2506   00153A  C01A  F00E         	movff	space@mL,setMotorPWM@m
  2507   00153E  C01B  F00F         	movff	space@mL+1,setMotorPWM@m+1
  2508   001542  ECD0  F006         	call	_setMotorPWM	;wreg free
  2509   001546                     
  2510                           ;dc_motor.c: 243:         setMotorPWM(mR);
  2511   001546  C01C  F00E         	movff	space@mR,setMotorPWM@m
  2512   00154A  C01D  F00F         	movff	space@mR+1,setMotorPWM@m+1
  2513   00154E  ECD0  F006         	call	_setMotorPWM	;wreg free
  2514   001552                     
  2515                           ;dc_motor.c: 244:         _delay((unsigned long)((20)*(64000000/4000000.0)));
  2516   001552  0E6A               	movlw	106
  2517   001554                     u2237:
  2518   001554  2EE8               	decfsz	wreg,f,c
  2519   001556  D7FE               	bra	u2237
  2520   001558  D000               	nop2	
  2521   00155A                     l2276:
  2522                           
  2523                           ;dc_motor.c: 239:     while ((mL->power <40) && (mR->power <40)){
  2524   00155A  C01A  FFD9         	movff	space@mL,fsr2l
  2525   00155E  C01B  FFDA         	movff	space@mL+1,fsr2h
  2526   001562  0E28               	movlw	40
  2527   001564  60DF               	cpfslt	indf2,c
  2528   001566  EFB7  F00A         	goto	u1331
  2529   00156A  EFB9  F00A         	goto	u1330
  2530   00156E                     u1331:
  2531   00156E  EFC5  F00A         	goto	l2280
  2532   001572                     u1330:
  2533   001572  C01C  FFD9         	movff	space@mR,fsr2l
  2534   001576  C01D  FFDA         	movff	space@mR+1,fsr2h
  2535   00157A  0E27               	movlw	39
  2536   00157C  64DF               	cpfsgt	indf2,c
  2537   00157E  EFC3  F00A         	goto	u1341
  2538   001582  EFC5  F00A         	goto	u1340
  2539   001586                     u1341:
  2540   001586  EF91  F00A         	goto	l2268
  2541   00158A                     u1340:
  2542   00158A                     l2280:
  2543                           
  2544                           ;dc_motor.c: 246:     _delay((unsigned long)((300)*(64000000/4000.0)));
  2545   00158A  0E19               	movlw	25
  2546   00158C  6E1F               	movwf	(??_space+1)^0,c
  2547   00158E  0E5A               	movlw	90
  2548   001590  6E1E               	movwf	??_space^0,c
  2549   001592  0EB2               	movlw	178
  2550   001594                     u2247:
  2551   001594  2EE8               	decfsz	wreg,f,c
  2552   001596  D7FE               	bra	u2247
  2553   001598  2E1E               	decfsz	??_space^0,f,c
  2554   00159A  D7FC               	bra	u2247
  2555   00159C  2E1F               	decfsz	(??_space+1)^0,f,c
  2556   00159E  D7FA               	bra	u2247
  2557   0015A0                     
  2558                           ;dc_motor.c: 247:     stop(mL,mR);
  2559   0015A0  C01A  F014         	movff	space@mL,stop@mL
  2560   0015A4  C01B  F015         	movff	space@mL+1,stop@mL+1
  2561   0015A8  C01C  F016         	movff	space@mR,stop@mR
  2562   0015AC  C01D  F017         	movff	space@mR+1,stop@mR+1
  2563   0015B0  ECA6  F00B         	call	_stop	;wreg free
  2564   0015B4                     
  2565                           ;dc_motor.c: 248:     _delay((unsigned long)((200)*(64000000/4000.0)));
  2566   0015B4  0E11               	movlw	17
  2567   0015B6  6E1F               	movwf	(??_space+1)^0,c
  2568   0015B8  0E3C               	movlw	60
  2569   0015BA  6E1E               	movwf	??_space^0,c
  2570   0015BC  0ECB               	movlw	203
  2571   0015BE                     u2257:
  2572   0015BE  2EE8               	decfsz	wreg,f,c
  2573   0015C0  D7FE               	bra	u2257
  2574   0015C2  2E1E               	decfsz	??_space^0,f,c
  2575   0015C4  D7FC               	bra	u2257
  2576   0015C6  2E1F               	decfsz	(??_space+1)^0,f,c
  2577   0015C8  D7FA               	bra	u2257
  2578   0015CA  F000               	nop	
  2579   0015CC                     
  2580                           ;dc_motor.c: 249:     LATHbits.LATH1 = 0;
  2581   0015CC  9280               	bcf	128,1,c	;volatile
  2582   0015CE  0012               	return		;funcret
  2583   0015D0                     __end_of_space:
  2584                           	callstack 0
  2585                           
  2586 ;; *************** function _right_45 *****************
  2587 ;; Defined at:
  2588 ;;		line 210 in file "dc_motor.c"
  2589 ;; Parameters:    Size  Location     Type
  2590 ;;  mL              2   25[COMRAM] PTR struct DC_motor
  2591 ;;		 -> motorL(9), 
  2592 ;;  mR              2   27[COMRAM] PTR struct DC_motor
  2593 ;;		 -> motorR(9), 
  2594 ;;  count           2   29[COMRAM] int 
  2595 ;; Auto vars:     Size  Location     Type
  2596 ;;  i               2   33[COMRAM] int 
  2597 ;; Return value:  Size  Location     Type
  2598 ;;                  1    wreg      void 
  2599 ;; Registers used:
  2600 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2601 ;; Tracked objects:
  2602 ;;		On entry : 0/0
  2603 ;;		On exit  : 0/0
  2604 ;;		Unchanged: 0/0
  2605 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2606 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2607 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2608 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2609 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2610 ;;Total ram usage:       10 bytes
  2611 ;; Hardware stack levels used: 1
  2612 ;; Hardware stack levels required when called: 4
  2613 ;; This function calls:
  2614 ;;		_setMotorPWM
  2615 ;;		_stop
  2616 ;; This function is called by:
  2617 ;;		_instructions
  2618 ;; This function uses a non-reentrant model
  2619 ;;
  2620                           
  2621                           	psect	text11
  2622   00104C                     __ptext11:
  2623                           	callstack 0
  2624   00104C                     _right_45:
  2625                           	callstack 24
  2626   00104C                     
  2627                           ;dc_motor.c: 210: void right_45(DC_motor *mL, DC_motor *mR, int count);dc_motor.c: 211: 
      +                          {;dc_motor.c: 212:     mL-> direction = 1;
  2628   00104C  EE20 F001          	lfsr	2,1
  2629   001050  501A               	movf	right_45@mL^0,w,c
  2630   001052  26D9               	addwf	fsr2l,f,c
  2631   001054  501B               	movf	(right_45@mL+1)^0,w,c
  2632   001056  22DA               	addwfc	fsr2h,f,c
  2633   001058  0E01               	movlw	1
  2634   00105A  6EDF               	movwf	indf2,c
  2635                           
  2636                           ;dc_motor.c: 213:     mR-> direction = 0;
  2637   00105C  EE20 F001          	lfsr	2,1
  2638   001060  501C               	movf	right_45@mR^0,w,c
  2639   001062  26D9               	addwf	fsr2l,f,c
  2640   001064  501D               	movf	(right_45@mR+1)^0,w,c
  2641   001066  22DA               	addwfc	fsr2h,f,c
  2642   001068  0E00               	movlw	0
  2643   00106A  6EDF               	movwf	indf2,c
  2644   00106C                     
  2645                           ;dc_motor.c: 214:     LATHbits.LATH0 = 1;
  2646   00106C  8080               	bsf	128,0,c	;volatile
  2647   00106E                     
  2648                           ;dc_motor.c: 215:     int i;;dc_motor.c: 216:     for (i = 0;i<count;i++){
  2649   00106E  0E00               	movlw	0
  2650   001070  6E23               	movwf	(right_45@i+1)^0,c
  2651   001072  0E00               	movlw	0
  2652   001074  6E22               	movwf	right_45@i^0,c
  2653   001076  EFAD  F008         	goto	l2258
  2654   00107A                     l2230:
  2655                           
  2656                           ;dc_motor.c: 218:         if (mL->power <= 30){mL->power += 10;}
  2657   00107A  C01A  FFD9         	movff	right_45@mL,fsr2l
  2658   00107E  C01B  FFDA         	movff	right_45@mL+1,fsr2h
  2659   001082  0E1F               	movlw	31
  2660   001084  60DF               	cpfslt	indf2,c
  2661   001086  EF47  F008         	goto	u1281
  2662   00108A  EF49  F008         	goto	u1280
  2663   00108E                     u1281:
  2664   00108E  EF4F  F008         	goto	l2234
  2665   001092                     u1280:
  2666   001092  C01A  FFD9         	movff	right_45@mL,fsr2l
  2667   001096  C01B  FFDA         	movff	right_45@mL+1,fsr2h
  2668   00109A  0E0A               	movlw	10
  2669   00109C  26DF               	addwf	indf2,f,c
  2670   00109E                     l2234:
  2671                           
  2672                           ;dc_motor.c: 219:         if (mR->power <= 30){mR->power += 10;}
  2673   00109E  C01C  FFD9         	movff	right_45@mR,fsr2l
  2674   0010A2  C01D  FFDA         	movff	right_45@mR+1,fsr2h
  2675   0010A6  0E1F               	movlw	31
  2676   0010A8  60DF               	cpfslt	indf2,c
  2677   0010AA  EF59  F008         	goto	u1291
  2678   0010AE  EF5B  F008         	goto	u1290
  2679   0010B2                     u1291:
  2680   0010B2  EF61  F008         	goto	l2238
  2681   0010B6                     u1290:
  2682   0010B6  C01C  FFD9         	movff	right_45@mR,fsr2l
  2683   0010BA  C01D  FFDA         	movff	right_45@mR+1,fsr2h
  2684   0010BE  0E0A               	movlw	10
  2685   0010C0  26DF               	addwf	indf2,f,c
  2686   0010C2                     l2238:
  2687                           
  2688                           ;dc_motor.c: 220:         setMotorPWM(mL);
  2689   0010C2  C01A  F00E         	movff	right_45@mL,setMotorPWM@m
  2690   0010C6  C01B  F00F         	movff	right_45@mL+1,setMotorPWM@m+1
  2691   0010CA  ECD0  F006         	call	_setMotorPWM	;wreg free
  2692   0010CE                     
  2693                           ;dc_motor.c: 221:         setMotorPWM(mR);
  2694   0010CE  C01C  F00E         	movff	right_45@mR,setMotorPWM@m
  2695   0010D2  C01D  F00F         	movff	right_45@mR+1,setMotorPWM@m+1
  2696   0010D6  ECD0  F006         	call	_setMotorPWM	;wreg free
  2697   0010DA                     
  2698                           ;dc_motor.c: 222:         _delay((unsigned long)((50)*(64000000/4000000.0)));
  2699   0010DA  0EA0               	movlw	160
  2700   0010DC                     u2267:
  2701   0010DC  D000               	nop2	
  2702   0010DE  2EE8               	decfsz	wreg,f,c
  2703   0010E0  D7FD               	bra	u2267
  2704   0010E2                     l2244:
  2705                           
  2706                           ;dc_motor.c: 217:     while ((mL->power <= 30) || (mR->power <= 30)){
  2707   0010E2  C01A  FFD9         	movff	right_45@mL,fsr2l
  2708   0010E6  C01B  FFDA         	movff	right_45@mL+1,fsr2h
  2709   0010EA  0E1E               	movlw	30
  2710   0010EC  64DF               	cpfsgt	indf2,c
  2711   0010EE  EF7B  F008         	goto	u1301
  2712   0010F2  EF7D  F008         	goto	u1300
  2713   0010F6                     u1301:
  2714   0010F6  EF3D  F008         	goto	l2230
  2715   0010FA                     u1300:
  2716   0010FA  C01C  FFD9         	movff	right_45@mR,fsr2l
  2717   0010FE  C01D  FFDA         	movff	right_45@mR+1,fsr2h
  2718   001102  0E1E               	movlw	30
  2719   001104  64DF               	cpfsgt	indf2,c
  2720   001106  EF87  F008         	goto	u1311
  2721   00110A  EF89  F008         	goto	u1310
  2722   00110E                     u1311:
  2723   00110E  EF3D  F008         	goto	l2230
  2724   001112                     u1310:
  2725   001112                     
  2726                           ;dc_motor.c: 224:     _delay((unsigned long)((250)*(64000000/4000.0)));
  2727   001112  0E15               	movlw	21
  2728   001114  6E21               	movwf	(??_right_45+1)^0,c
  2729   001116  0E4B               	movlw	75
  2730   001118  6E20               	movwf	??_right_45^0,c
  2731   00111A  0EBE               	movlw	190
  2732   00111C                     u2277:
  2733   00111C  2EE8               	decfsz	wreg,f,c
  2734   00111E  D7FE               	bra	u2277
  2735   001120  2E20               	decfsz	??_right_45^0,f,c
  2736   001122  D7FC               	bra	u2277
  2737   001124  2E21               	decfsz	(??_right_45+1)^0,f,c
  2738   001126  D7FA               	bra	u2277
  2739   001128  D000               	nop2	
  2740   00112A                     
  2741                           ;dc_motor.c: 225:     stop(mL,mR);
  2742   00112A  C01A  F014         	movff	right_45@mL,stop@mL
  2743   00112E  C01B  F015         	movff	right_45@mL+1,stop@mL+1
  2744   001132  C01C  F016         	movff	right_45@mR,stop@mR
  2745   001136  C01D  F017         	movff	right_45@mR+1,stop@mR+1
  2746   00113A  ECA6  F00B         	call	_stop	;wreg free
  2747   00113E                     
  2748                           ;dc_motor.c: 226:     _delay((unsigned long)((150)*(64000000/4000.0)));
  2749   00113E  0E0D               	movlw	13
  2750   001140  6E21               	movwf	(??_right_45+1)^0,c
  2751   001142  0E2D               	movlw	45
  2752   001144  6E20               	movwf	??_right_45^0,c
  2753   001146  0ED8               	movlw	216
  2754   001148                     u2287:
  2755   001148  2EE8               	decfsz	wreg,f,c
  2756   00114A  D7FE               	bra	u2287
  2757   00114C  2E20               	decfsz	??_right_45^0,f,c
  2758   00114E  D7FC               	bra	u2287
  2759   001150  2E21               	decfsz	(??_right_45+1)^0,f,c
  2760   001152  D7FA               	bra	u2287
  2761   001154                     
  2762                           ;dc_motor.c: 227:     LATHbits.LATH0 = 0;
  2763   001154  9080               	bcf	128,0,c	;volatile
  2764   001156                     
  2765                           ;dc_motor.c: 228: }
  2766   001156  4A22               	infsnz	right_45@i^0,f,c
  2767   001158  2A23               	incf	(right_45@i+1)^0,f,c
  2768   00115A                     l2258:
  2769   00115A  501E               	movf	right_45@count^0,w,c
  2770   00115C  5C22               	subwf	right_45@i^0,w,c
  2771   00115E  5023               	movf	(right_45@i+1)^0,w,c
  2772   001160  0A80               	xorlw	128
  2773   001162  6E20               	movwf	??_right_45^0,c
  2774   001164  501F               	movf	(right_45@count+1)^0,w,c
  2775   001166  0A80               	xorlw	128
  2776   001168  5820               	subwfb	??_right_45^0,w,c
  2777   00116A  A0D8               	btfss	status,0,c
  2778   00116C  EFBA  F008         	goto	u1321
  2779   001170  EFBC  F008         	goto	u1320
  2780   001174                     u1321:
  2781   001174  EF71  F008         	goto	l2244
  2782   001178                     u1320:
  2783   001178  0012               	return		;funcret
  2784   00117A                     __end_of_right_45:
  2785                           	callstack 0
  2786                           
  2787 ;; *************** function _reverse *****************
  2788 ;; Defined at:
  2789 ;;		line 146 in file "dc_motor.c"
  2790 ;; Parameters:    Size  Location     Type
  2791 ;;  mL              2   25[COMRAM] PTR struct DC_motor
  2792 ;;		 -> motorL(9), 
  2793 ;;  mR              2   27[COMRAM] PTR struct DC_motor
  2794 ;;		 -> motorR(9), 
  2795 ;; Auto vars:     Size  Location     Type
  2796 ;;		None
  2797 ;; Return value:  Size  Location     Type
  2798 ;;                  1    wreg      void 
  2799 ;; Registers used:
  2800 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2801 ;; Tracked objects:
  2802 ;;		On entry : 0/0
  2803 ;;		On exit  : 0/0
  2804 ;;		Unchanged: 0/0
  2805 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2806 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2807 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2808 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2809 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2810 ;;Total ram usage:        5 bytes
  2811 ;; Hardware stack levels used: 1
  2812 ;; Hardware stack levels required when called: 4
  2813 ;; This function calls:
  2814 ;;		_setMotorPWM
  2815 ;;		_stop
  2816 ;; This function is called by:
  2817 ;;		_instructions
  2818 ;; This function uses a non-reentrant model
  2819 ;;
  2820                           
  2821                           	psect	text12
  2822   0015D0                     __ptext12:
  2823                           	callstack 0
  2824   0015D0                     _reverse:
  2825                           	callstack 24
  2826   0015D0                     
  2827                           ;dc_motor.c: 146: void reverse(DC_motor *mL, DC_motor *mR);dc_motor.c: 147: {;dc_motor.c
      +                          : 148:     stop(mL,mR);
  2828   0015D0  C01A  F014         	movff	reverse@mL,stop@mL
  2829   0015D4  C01B  F015         	movff	reverse@mL+1,stop@mL+1
  2830   0015D8  C01C  F016         	movff	reverse@mR,stop@mR
  2831   0015DC  C01D  F017         	movff	reverse@mR+1,stop@mR+1
  2832   0015E0  ECA6  F00B         	call	_stop	;wreg free
  2833   0015E4                     
  2834                           ;dc_motor.c: 149:     mL-> direction = 0;
  2835   0015E4  EE20 F001          	lfsr	2,1
  2836   0015E8  501A               	movf	reverse@mL^0,w,c
  2837   0015EA  26D9               	addwf	fsr2l,f,c
  2838   0015EC  501B               	movf	(reverse@mL+1)^0,w,c
  2839   0015EE  22DA               	addwfc	fsr2h,f,c
  2840   0015F0  0E00               	movlw	0
  2841   0015F2  6EDF               	movwf	indf2,c
  2842   0015F4                     
  2843                           ;dc_motor.c: 150:     mR-> direction = 0;
  2844   0015F4  EE20 F001          	lfsr	2,1
  2845   0015F8  501C               	movf	reverse@mR^0,w,c
  2846   0015FA  26D9               	addwf	fsr2l,f,c
  2847   0015FC  501D               	movf	(reverse@mR+1)^0,w,c
  2848   0015FE  22DA               	addwfc	fsr2h,f,c
  2849   001600  0E00               	movlw	0
  2850   001602  6EDF               	movwf	indf2,c
  2851   001604                     
  2852                           ;dc_motor.c: 151:     LATHbits.LATH1 = 1;
  2853   001604  8280               	bsf	128,1,c	;volatile
  2854                           
  2855                           ;dc_motor.c: 152:     setMotorPWM(mR);
  2856   001606  C01C  F00E         	movff	reverse@mR,setMotorPWM@m
  2857   00160A  C01D  F00F         	movff	reverse@mR+1,setMotorPWM@m+1
  2858   00160E  ECD0  F006         	call	_setMotorPWM	;wreg free
  2859                           
  2860                           ;dc_motor.c: 153:     setMotorPWM(mL);
  2861   001612  C01A  F00E         	movff	reverse@mL,setMotorPWM@m
  2862   001616  C01B  F00F         	movff	reverse@mL+1,setMotorPWM@m+1
  2863   00161A  ECD0  F006         	call	_setMotorPWM	;wreg free
  2864                           
  2865                           ;dc_motor.c: 154:     while ((mL->power <40) && (mR->power <40)){
  2866   00161E  EF2D  F00B         	goto	l2180
  2867   001622                     l2172:
  2868                           
  2869                           ;dc_motor.c: 155:         mL->power += 10;
  2870   001622  C01A  FFD9         	movff	reverse@mL,fsr2l
  2871   001626  C01B  FFDA         	movff	reverse@mL+1,fsr2h
  2872   00162A  0E0A               	movlw	10
  2873   00162C  26DF               	addwf	indf2,f,c
  2874                           
  2875                           ;dc_motor.c: 156:         mR->power += 10;
  2876   00162E  C01C  FFD9         	movff	reverse@mR,fsr2l
  2877   001632  C01D  FFDA         	movff	reverse@mR+1,fsr2h
  2878   001636  0E0A               	movlw	10
  2879   001638  26DF               	addwf	indf2,f,c
  2880   00163A                     
  2881                           ;dc_motor.c: 157:         setMotorPWM(mL);
  2882   00163A  C01A  F00E         	movff	reverse@mL,setMotorPWM@m
  2883   00163E  C01B  F00F         	movff	reverse@mL+1,setMotorPWM@m+1
  2884   001642  ECD0  F006         	call	_setMotorPWM	;wreg free
  2885   001646                     
  2886                           ;dc_motor.c: 158:         setMotorPWM(mR);
  2887   001646  C01C  F00E         	movff	reverse@mR,setMotorPWM@m
  2888   00164A  C01D  F00F         	movff	reverse@mR+1,setMotorPWM@m+1
  2889   00164E  ECD0  F006         	call	_setMotorPWM	;wreg free
  2890   001652                     
  2891                           ;dc_motor.c: 159:         _delay((unsigned long)((20)*(64000000/4000000.0)));
  2892   001652  0E6A               	movlw	106
  2893   001654                     u2297:
  2894   001654  2EE8               	decfsz	wreg,f,c
  2895   001656  D7FE               	bra	u2297
  2896   001658  D000               	nop2	
  2897   00165A                     l2180:
  2898                           
  2899                           ;dc_motor.c: 154:     while ((mL->power <40) && (mR->power <40)){
  2900   00165A  C01A  FFD9         	movff	reverse@mL,fsr2l
  2901   00165E  C01B  FFDA         	movff	reverse@mL+1,fsr2h
  2902   001662  0E28               	movlw	40
  2903   001664  60DF               	cpfslt	indf2,c
  2904   001666  EF37  F00B         	goto	u1211
  2905   00166A  EF39  F00B         	goto	u1210
  2906   00166E                     u1211:
  2907   00166E  EF45  F00B         	goto	l322
  2908   001672                     u1210:
  2909   001672  C01C  FFD9         	movff	reverse@mR,fsr2l
  2910   001676  C01D  FFDA         	movff	reverse@mR+1,fsr2h
  2911   00167A  0E27               	movlw	39
  2912   00167C  64DF               	cpfsgt	indf2,c
  2913   00167E  EF43  F00B         	goto	u1221
  2914   001682  EF45  F00B         	goto	u1220
  2915   001686                     u1221:
  2916   001686  EF11  F00B         	goto	l2172
  2917   00168A                     u1220:
  2918   00168A                     l322:
  2919                           
  2920                           ;dc_motor.c: 161:     LATHbits.LATH1 = 0;
  2921   00168A  9280               	bcf	128,1,c	;volatile
  2922   00168C  0012               	return		;funcret
  2923   00168E                     __end_of_reverse:
  2924                           	callstack 0
  2925                           
  2926 ;; *************** function _left_45 *****************
  2927 ;; Defined at:
  2928 ;;		line 187 in file "dc_motor.c"
  2929 ;; Parameters:    Size  Location     Type
  2930 ;;  mL              2   25[COMRAM] PTR struct DC_motor
  2931 ;;		 -> motorL(9), 
  2932 ;;  mR              2   27[COMRAM] PTR struct DC_motor
  2933 ;;		 -> motorR(9), 
  2934 ;;  count           2   29[COMRAM] int 
  2935 ;; Auto vars:     Size  Location     Type
  2936 ;;  i               2   33[COMRAM] int 
  2937 ;; Return value:  Size  Location     Type
  2938 ;;                  1    wreg      void 
  2939 ;; Registers used:
  2940 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2941 ;; Tracked objects:
  2942 ;;		On entry : 0/0
  2943 ;;		On exit  : 0/0
  2944 ;;		Unchanged: 0/0
  2945 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2946 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2947 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2948 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2949 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2950 ;;Total ram usage:       10 bytes
  2951 ;; Hardware stack levels used: 1
  2952 ;; Hardware stack levels required when called: 4
  2953 ;; This function calls:
  2954 ;;		_setMotorPWM
  2955 ;;		_stop
  2956 ;; This function is called by:
  2957 ;;		_instructions
  2958 ;; This function uses a non-reentrant model
  2959 ;;
  2960                           
  2961                           	psect	text13
  2962   000F0C                     __ptext13:
  2963                           	callstack 0
  2964   000F0C                     _left_45:
  2965                           	callstack 24
  2966   000F0C                     
  2967                           ;dc_motor.c: 187: void left_45(DC_motor *mL, DC_motor *mR, int count);dc_motor.c: 188: {
      +                          ;dc_motor.c: 189:     stop(mL,mR);
  2968   000F0C  C01A  F014         	movff	left_45@mL,stop@mL
  2969   000F10  C01B  F015         	movff	left_45@mL+1,stop@mL+1
  2970   000F14  C01C  F016         	movff	left_45@mR,stop@mR
  2971   000F18  C01D  F017         	movff	left_45@mR+1,stop@mR+1
  2972   000F1C  ECA6  F00B         	call	_stop	;wreg free
  2973   000F20                     
  2974                           ;dc_motor.c: 190:     mL-> direction = 0;
  2975   000F20  EE20 F001          	lfsr	2,1
  2976   000F24  501A               	movf	left_45@mL^0,w,c
  2977   000F26  26D9               	addwf	fsr2l,f,c
  2978   000F28  501B               	movf	(left_45@mL+1)^0,w,c
  2979   000F2A  22DA               	addwfc	fsr2h,f,c
  2980   000F2C  0E00               	movlw	0
  2981   000F2E  6EDF               	movwf	indf2,c
  2982   000F30                     
  2983                           ;dc_motor.c: 191:     mR-> direction = 1;
  2984   000F30  EE20 F001          	lfsr	2,1
  2985   000F34  501C               	movf	left_45@mR^0,w,c
  2986   000F36  26D9               	addwf	fsr2l,f,c
  2987   000F38  501D               	movf	(left_45@mR+1)^0,w,c
  2988   000F3A  22DA               	addwfc	fsr2h,f,c
  2989   000F3C  0E01               	movlw	1
  2990   000F3E  6EDF               	movwf	indf2,c
  2991   000F40                     
  2992                           ;dc_motor.c: 192:     LATFbits.LATF0 = 1;
  2993   000F40  807E               	bsf	126,0,c	;volatile
  2994   000F42                     
  2995                           ;dc_motor.c: 193:     int i;;dc_motor.c: 194:     for (i = 0;i<count;i++){
  2996   000F42  0E00               	movlw	0
  2997   000F44  6E23               	movwf	(left_45@i+1)^0,c
  2998   000F46  0E00               	movlw	0
  2999   000F48  6E22               	movwf	left_45@i^0,c
  3000   000F4A  EF16  F008         	goto	l2222
  3001   000F4E                     l2194:
  3002                           
  3003                           ;dc_motor.c: 196:         if (mL->power <= 30){mL->power += 10;}
  3004   000F4E  C01A  FFD9         	movff	left_45@mL,fsr2l
  3005   000F52  C01B  FFDA         	movff	left_45@mL+1,fsr2h
  3006   000F56  0E1F               	movlw	31
  3007   000F58  60DF               	cpfslt	indf2,c
  3008   000F5A  EFB1  F007         	goto	u1231
  3009   000F5E  EFB3  F007         	goto	u1230
  3010   000F62                     u1231:
  3011   000F62  EFB9  F007         	goto	l2198
  3012   000F66                     u1230:
  3013   000F66  C01A  FFD9         	movff	left_45@mL,fsr2l
  3014   000F6A  C01B  FFDA         	movff	left_45@mL+1,fsr2h
  3015   000F6E  0E0A               	movlw	10
  3016   000F70  26DF               	addwf	indf2,f,c
  3017   000F72                     l2198:
  3018                           
  3019                           ;dc_motor.c: 197:         if (mR->power <= 30){mR->power += 10;}
  3020   000F72  C01C  FFD9         	movff	left_45@mR,fsr2l
  3021   000F76  C01D  FFDA         	movff	left_45@mR+1,fsr2h
  3022   000F7A  0E1F               	movlw	31
  3023   000F7C  60DF               	cpfslt	indf2,c
  3024   000F7E  EFC3  F007         	goto	u1241
  3025   000F82  EFC5  F007         	goto	u1240
  3026   000F86                     u1241:
  3027   000F86  EFCB  F007         	goto	l2202
  3028   000F8A                     u1240:
  3029   000F8A  C01C  FFD9         	movff	left_45@mR,fsr2l
  3030   000F8E  C01D  FFDA         	movff	left_45@mR+1,fsr2h
  3031   000F92  0E0A               	movlw	10
  3032   000F94  26DF               	addwf	indf2,f,c
  3033   000F96                     l2202:
  3034                           
  3035                           ;dc_motor.c: 198:         setMotorPWM(mL);
  3036   000F96  C01A  F00E         	movff	left_45@mL,setMotorPWM@m
  3037   000F9A  C01B  F00F         	movff	left_45@mL+1,setMotorPWM@m+1
  3038   000F9E  ECD0  F006         	call	_setMotorPWM	;wreg free
  3039   000FA2                     
  3040                           ;dc_motor.c: 199:         setMotorPWM(mR);
  3041   000FA2  C01C  F00E         	movff	left_45@mR,setMotorPWM@m
  3042   000FA6  C01D  F00F         	movff	left_45@mR+1,setMotorPWM@m+1
  3043   000FAA  ECD0  F006         	call	_setMotorPWM	;wreg free
  3044   000FAE                     
  3045                           ;dc_motor.c: 200:         _delay((unsigned long)((20)*(64000000/4000000.0)));
  3046   000FAE  0E6A               	movlw	106
  3047   000FB0                     u2307:
  3048   000FB0  2EE8               	decfsz	wreg,f,c
  3049   000FB2  D7FE               	bra	u2307
  3050   000FB4  D000               	nop2	
  3051   000FB6                     l2208:
  3052                           
  3053                           ;dc_motor.c: 195:     while ((mL->power <= 30) || (mR->power <= 30)){
  3054   000FB6  C01A  FFD9         	movff	left_45@mL,fsr2l
  3055   000FBA  C01B  FFDA         	movff	left_45@mL+1,fsr2h
  3056   000FBE  0E1E               	movlw	30
  3057   000FC0  64DF               	cpfsgt	indf2,c
  3058   000FC2  EFE5  F007         	goto	u1251
  3059   000FC6  EFE7  F007         	goto	u1250
  3060   000FCA                     u1251:
  3061   000FCA  EFA7  F007         	goto	l2194
  3062   000FCE                     u1250:
  3063   000FCE  C01C  FFD9         	movff	left_45@mR,fsr2l
  3064   000FD2  C01D  FFDA         	movff	left_45@mR+1,fsr2h
  3065   000FD6  0E1E               	movlw	30
  3066   000FD8  64DF               	cpfsgt	indf2,c
  3067   000FDA  EFF1  F007         	goto	u1261
  3068   000FDE  EFF3  F007         	goto	u1260
  3069   000FE2                     u1261:
  3070   000FE2  EFA7  F007         	goto	l2194
  3071   000FE6                     u1260:
  3072   000FE6                     
  3073                           ;dc_motor.c: 202:     _delay((unsigned long)((230)*(64000000/4000.0)));
  3074   000FE6  0E13               	movlw	19
  3075   000FE8  6E21               	movwf	(??_left_45+1)^0,c
  3076   000FEA  0EAC               	movlw	172
  3077   000FEC  6E20               	movwf	??_left_45^0,c
  3078   000FEE  0E2A               	movlw	42
  3079   000FF0                     u2317:
  3080   000FF0  2EE8               	decfsz	wreg,f,c
  3081   000FF2  D7FE               	bra	u2317
  3082   000FF4  2E20               	decfsz	??_left_45^0,f,c
  3083   000FF6  D7FC               	bra	u2317
  3084   000FF8  2E21               	decfsz	(??_left_45+1)^0,f,c
  3085   000FFA  D7FA               	bra	u2317
  3086   000FFC                     
  3087                           ;dc_motor.c: 203:     stop(mL,mR);
  3088   000FFC  C01A  F014         	movff	left_45@mL,stop@mL
  3089   001000  C01B  F015         	movff	left_45@mL+1,stop@mL+1
  3090   001004  C01C  F016         	movff	left_45@mR,stop@mR
  3091   001008  C01D  F017         	movff	left_45@mR+1,stop@mR+1
  3092   00100C  ECA6  F00B         	call	_stop	;wreg free
  3093   001010                     
  3094                           ;dc_motor.c: 204:     _delay((unsigned long)((150)*(64000000/4000.0)));
  3095   001010  0E0D               	movlw	13
  3096   001012  6E21               	movwf	(??_left_45+1)^0,c
  3097   001014  0E2D               	movlw	45
  3098   001016  6E20               	movwf	??_left_45^0,c
  3099   001018  0ED8               	movlw	216
  3100   00101A                     u2327:
  3101   00101A  2EE8               	decfsz	wreg,f,c
  3102   00101C  D7FE               	bra	u2327
  3103   00101E  2E20               	decfsz	??_left_45^0,f,c
  3104   001020  D7FC               	bra	u2327
  3105   001022  2E21               	decfsz	(??_left_45+1)^0,f,c
  3106   001024  D7FA               	bra	u2327
  3107   001026                     
  3108                           ;dc_motor.c: 205:     LATFbits.LATF0 = 0;
  3109   001026  907E               	bcf	126,0,c	;volatile
  3110   001028                     
  3111                           ;dc_motor.c: 206:     }
  3112   001028  4A22               	infsnz	left_45@i^0,f,c
  3113   00102A  2A23               	incf	(left_45@i+1)^0,f,c
  3114   00102C                     l2222:
  3115   00102C  501E               	movf	left_45@count^0,w,c
  3116   00102E  5C22               	subwf	left_45@i^0,w,c
  3117   001030  5023               	movf	(left_45@i+1)^0,w,c
  3118   001032  0A80               	xorlw	128
  3119   001034  6E20               	movwf	??_left_45^0,c
  3120   001036  501F               	movf	(left_45@count+1)^0,w,c
  3121   001038  0A80               	xorlw	128
  3122   00103A  5820               	subwfb	??_left_45^0,w,c
  3123   00103C  A0D8               	btfss	status,0,c
  3124   00103E  EF23  F008         	goto	u1271
  3125   001042  EF25  F008         	goto	u1270
  3126   001046                     u1271:
  3127   001046  EFDB  F007         	goto	l2208
  3128   00104A                     u1270:
  3129   00104A  0012               	return		;funcret
  3130   00104C                     __end_of_left_45:
  3131                           	callstack 0
  3132                           
  3133 ;; *************** function _forward *****************
  3134 ;; Defined at:
  3135 ;;		line 128 in file "dc_motor.c"
  3136 ;; Parameters:    Size  Location     Type
  3137 ;;  mL              2   25[COMRAM] PTR struct DC_motor
  3138 ;;		 -> motorL(9), 
  3139 ;;  mR              2   27[COMRAM] PTR struct DC_motor
  3140 ;;		 -> motorR(9), 
  3141 ;; Auto vars:     Size  Location     Type
  3142 ;;		None
  3143 ;; Return value:  Size  Location     Type
  3144 ;;                  1    wreg      void 
  3145 ;; Registers used:
  3146 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3147 ;; Tracked objects:
  3148 ;;		On entry : 0/0
  3149 ;;		On exit  : 0/0
  3150 ;;		Unchanged: 0/0
  3151 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3152 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3153 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3154 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3155 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3156 ;;Total ram usage:        5 bytes
  3157 ;; Hardware stack levels used: 1
  3158 ;; Hardware stack levels required when called: 4
  3159 ;; This function calls:
  3160 ;;		_setMotorPWM
  3161 ;;		_stop
  3162 ;; This function is called by:
  3163 ;;		_buggy_color_response
  3164 ;; This function uses a non-reentrant model
  3165 ;;
  3166                           
  3167                           	psect	text14
  3168   00168E                     __ptext14:
  3169                           	callstack 0
  3170   00168E                     _forward:
  3171                           	callstack 25
  3172   00168E                     
  3173                           ;dc_motor.c: 128: void forward(DC_motor *mL, DC_motor *mR);dc_motor.c: 129: {;dc_motor.c
      +                          : 130:     stop(mL,mR);
  3174   00168E  C01A  F014         	movff	forward@mL,stop@mL
  3175   001692  C01B  F015         	movff	forward@mL+1,stop@mL+1
  3176   001696  C01C  F016         	movff	forward@mR,stop@mR
  3177   00169A  C01D  F017         	movff	forward@mR+1,stop@mR+1
  3178   00169E  ECA6  F00B         	call	_stop	;wreg free
  3179   0016A2                     
  3180                           ;dc_motor.c: 131:     mL-> direction = 1;
  3181   0016A2  EE20 F001          	lfsr	2,1
  3182   0016A6  501A               	movf	forward@mL^0,w,c
  3183   0016A8  26D9               	addwf	fsr2l,f,c
  3184   0016AA  501B               	movf	(forward@mL+1)^0,w,c
  3185   0016AC  22DA               	addwfc	fsr2h,f,c
  3186   0016AE  0E01               	movlw	1
  3187   0016B0  6EDF               	movwf	indf2,c
  3188   0016B2                     
  3189                           ;dc_motor.c: 132:     mR-> direction = 1;
  3190   0016B2  EE20 F001          	lfsr	2,1
  3191   0016B6  501C               	movf	forward@mR^0,w,c
  3192   0016B8  26D9               	addwf	fsr2l,f,c
  3193   0016BA  501D               	movf	(forward@mR+1)^0,w,c
  3194   0016BC  22DA               	addwfc	fsr2h,f,c
  3195   0016BE  0E01               	movlw	1
  3196   0016C0  6EDF               	movwf	indf2,c
  3197   0016C2                     
  3198                           ;dc_motor.c: 133:     LATDbits.LATD3 = 1;
  3199   0016C2  867C               	bsf	124,3,c	;volatile
  3200                           
  3201                           ;dc_motor.c: 134:     setMotorPWM(mR);
  3202   0016C4  C01C  F00E         	movff	forward@mR,setMotorPWM@m
  3203   0016C8  C01D  F00F         	movff	forward@mR+1,setMotorPWM@m+1
  3204   0016CC  ECD0  F006         	call	_setMotorPWM	;wreg free
  3205                           
  3206                           ;dc_motor.c: 135:     setMotorPWM(mL);
  3207   0016D0  C01A  F00E         	movff	forward@mL,setMotorPWM@m
  3208   0016D4  C01B  F00F         	movff	forward@mL+1,setMotorPWM@m+1
  3209   0016D8  ECD0  F006         	call	_setMotorPWM	;wreg free
  3210                           
  3211                           ;dc_motor.c: 136:     while ((mL->power <40) && (mR->power <40)){
  3212   0016DC  EF8C  F00B         	goto	l2558
  3213   0016E0                     l2550:
  3214                           
  3215                           ;dc_motor.c: 137:         mL->power += 10;
  3216   0016E0  C01A  FFD9         	movff	forward@mL,fsr2l
  3217   0016E4  C01B  FFDA         	movff	forward@mL+1,fsr2h
  3218   0016E8  0E0A               	movlw	10
  3219   0016EA  26DF               	addwf	indf2,f,c
  3220                           
  3221                           ;dc_motor.c: 138:         mR->power += 10;
  3222   0016EC  C01C  FFD9         	movff	forward@mR,fsr2l
  3223   0016F0  C01D  FFDA         	movff	forward@mR+1,fsr2h
  3224   0016F4  0E0A               	movlw	10
  3225   0016F6  26DF               	addwf	indf2,f,c
  3226   0016F8                     
  3227                           ;dc_motor.c: 139:         setMotorPWM(mL);
  3228   0016F8  C01A  F00E         	movff	forward@mL,setMotorPWM@m
  3229   0016FC  C01B  F00F         	movff	forward@mL+1,setMotorPWM@m+1
  3230   001700  ECD0  F006         	call	_setMotorPWM	;wreg free
  3231   001704                     
  3232                           ;dc_motor.c: 140:         setMotorPWM(mR);
  3233   001704  C01C  F00E         	movff	forward@mR,setMotorPWM@m
  3234   001708  C01D  F00F         	movff	forward@mR+1,setMotorPWM@m+1
  3235   00170C  ECD0  F006         	call	_setMotorPWM	;wreg free
  3236   001710                     
  3237                           ;dc_motor.c: 141:         _delay((unsigned long)((20)*(64000000/4000000.0)));
  3238   001710  0E6A               	movlw	106
  3239   001712                     u2337:
  3240   001712  2EE8               	decfsz	wreg,f,c
  3241   001714  D7FE               	bra	u2337
  3242   001716  D000               	nop2	
  3243   001718                     l2558:
  3244                           
  3245                           ;dc_motor.c: 136:     while ((mL->power <40) && (mR->power <40)){
  3246   001718  C01A  FFD9         	movff	forward@mL,fsr2l
  3247   00171C  C01B  FFDA         	movff	forward@mL+1,fsr2h
  3248   001720  0E28               	movlw	40
  3249   001722  60DF               	cpfslt	indf2,c
  3250   001724  EF96  F00B         	goto	u1751
  3251   001728  EF98  F00B         	goto	u1750
  3252   00172C                     u1751:
  3253   00172C  EFA4  F00B         	goto	l314
  3254   001730                     u1750:
  3255   001730  C01C  FFD9         	movff	forward@mR,fsr2l
  3256   001734  C01D  FFDA         	movff	forward@mR+1,fsr2h
  3257   001738  0E27               	movlw	39
  3258   00173A  64DF               	cpfsgt	indf2,c
  3259   00173C  EFA2  F00B         	goto	u1761
  3260   001740  EFA4  F00B         	goto	u1760
  3261   001744                     u1761:
  3262   001744  EF70  F00B         	goto	l2550
  3263   001748                     u1760:
  3264   001748                     l314:
  3265                           
  3266                           ;dc_motor.c: 143:     LATDbits.LATD3 = 0;
  3267   001748  967C               	bcf	124,3,c	;volatile
  3268   00174A  0012               	return		;funcret
  3269   00174C                     __end_of_forward:
  3270                           	callstack 0
  3271                           
  3272 ;; *************** function _stop *****************
  3273 ;; Defined at:
  3274 ;;		line 165 in file "dc_motor.c"
  3275 ;; Parameters:    Size  Location     Type
  3276 ;;  mL              2   19[COMRAM] PTR struct DC_motor
  3277 ;;		 -> motorL(9), 
  3278 ;;  mR              2   21[COMRAM] PTR struct DC_motor
  3279 ;;		 -> motorR(9), 
  3280 ;; Auto vars:     Size  Location     Type
  3281 ;;  i               2   23[COMRAM] int 
  3282 ;; Return value:  Size  Location     Type
  3283 ;;                  1    wreg      void 
  3284 ;; Registers used:
  3285 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3286 ;; Tracked objects:
  3287 ;;		On entry : 0/0
  3288 ;;		On exit  : 0/0
  3289 ;;		Unchanged: 0/0
  3290 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3291 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3292 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3293 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3294 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3295 ;;Total ram usage:        6 bytes
  3296 ;; Hardware stack levels used: 1
  3297 ;; Hardware stack levels required when called: 3
  3298 ;; This function calls:
  3299 ;;		_setMotorPWM
  3300 ;; This function is called by:
  3301 ;;		_buggy_color_response
  3302 ;;		_forward
  3303 ;;		_reverse
  3304 ;;		_left_45
  3305 ;;		_right_45
  3306 ;;		_space
  3307 ;;		_instructions
  3308 ;; This function uses a non-reentrant model
  3309 ;;
  3310                           
  3311                           	psect	text15
  3312   00174C                     __ptext15:
  3313                           	callstack 0
  3314   00174C                     _stop:
  3315                           	callstack 26
  3316   00174C                     
  3317                           ;dc_motor.c: 165: void stop(DC_motor *mL, DC_motor *mR);dc_motor.c: 166: {;dc_motor.c: 1
      +                          67:     mL->brakemode = 1;
  3318   00174C  EE20 F002          	lfsr	2,2
  3319   001750  5014               	movf	stop@mL^0,w,c
  3320   001752  26D9               	addwf	fsr2l,f,c
  3321   001754  5015               	movf	(stop@mL+1)^0,w,c
  3322   001756  22DA               	addwfc	fsr2h,f,c
  3323   001758  0E01               	movlw	1
  3324   00175A  6EDF               	movwf	indf2,c
  3325                           
  3326                           ;dc_motor.c: 168:     mR->brakemode = 1;
  3327   00175C  EE20 F002          	lfsr	2,2
  3328   001760  5016               	movf	stop@mR^0,w,c
  3329   001762  26D9               	addwf	fsr2l,f,c
  3330   001764  5017               	movf	(stop@mR+1)^0,w,c
  3331   001766  22DA               	addwfc	fsr2h,f,c
  3332   001768  0E01               	movlw	1
  3333   00176A  6EDF               	movwf	indf2,c
  3334   00176C                     
  3335                           ;dc_motor.c: 169:     LATDbits.LATD4 = 1;
  3336   00176C  887C               	bsf	124,4,c	;volatile
  3337   00176E                     
  3338                           ;dc_motor.c: 171:     for (int i = 70; i >= 0; i=i-10) {
  3339   00176E  0E00               	movlw	0
  3340   001770  6E19               	movwf	(stop@i+1)^0,c
  3341   001772  0E46               	movlw	70
  3342   001774  6E18               	movwf	stop@i^0,c
  3343   001776                     l2120:
  3344                           
  3345                           ;dc_motor.c: 172:         mL -> power = i;
  3346   001776  C014  FFD9         	movff	stop@mL,fsr2l
  3347   00177A  C015  FFDA         	movff	stop@mL+1,fsr2h
  3348   00177E  C018  FFDF         	movff	stop@i,indf2
  3349                           
  3350                           ;dc_motor.c: 173:         mR -> power = i;
  3351   001782  C016  FFD9         	movff	stop@mR,fsr2l
  3352   001786  C017  FFDA         	movff	stop@mR+1,fsr2h
  3353   00178A  C018  FFDF         	movff	stop@i,indf2
  3354   00178E                     
  3355                           ;dc_motor.c: 174:         setMotorPWM(mL);
  3356   00178E  C014  F00E         	movff	stop@mL,setMotorPWM@m
  3357   001792  C015  F00F         	movff	stop@mL+1,setMotorPWM@m+1
  3358   001796  ECD0  F006         	call	_setMotorPWM	;wreg free
  3359   00179A                     
  3360                           ;dc_motor.c: 175:         setMotorPWM(mR);
  3361   00179A  C016  F00E         	movff	stop@mR,setMotorPWM@m
  3362   00179E  C017  F00F         	movff	stop@mR+1,setMotorPWM@m+1
  3363   0017A2  ECD0  F006         	call	_setMotorPWM	;wreg free
  3364   0017A6                     
  3365                           ;dc_motor.c: 176:         _delay((unsigned long)((20)*(64000000/4000000.0)));
  3366   0017A6  0E6A               	movlw	106
  3367   0017A8                     u2347:
  3368   0017A8  2EE8               	decfsz	wreg,f,c
  3369   0017AA  D7FE               	bra	u2347
  3370   0017AC  D000               	nop2	
  3371   0017AE                     
  3372                           ;dc_motor.c: 177:     }
  3373   0017AE  0EF6               	movlw	246
  3374   0017B0  2418               	addwf	stop@i^0,w,c
  3375   0017B2  6E18               	movwf	stop@i^0,c
  3376   0017B4  0EFF               	movlw	255
  3377   0017B6  2019               	addwfc	(stop@i+1)^0,w,c
  3378   0017B8  6E19               	movwf	(stop@i+1)^0,c
  3379   0017BA  BE19               	btfsc	(stop@i+1)^0,7,c
  3380   0017BC  EFE4  F00B         	goto	u1200
  3381   0017C0  EFE2  F00B         	goto	u1201
  3382   0017C4                     u1201:
  3383   0017C4  EFBB  F00B         	goto	l2120
  3384   0017C8                     u1200:
  3385   0017C8                     
  3386                           ;dc_motor.c: 179:     mL->power = 0;
  3387   0017C8  C014  FFD9         	movff	stop@mL,fsr2l
  3388   0017CC  C015  FFDA         	movff	stop@mL+1,fsr2h
  3389   0017D0  0E00               	movlw	0
  3390   0017D2  6EDF               	movwf	indf2,c
  3391                           
  3392                           ;dc_motor.c: 180:     mR->power = 0;
  3393   0017D4  C016  FFD9         	movff	stop@mR,fsr2l
  3394   0017D8  C017  FFDA         	movff	stop@mR+1,fsr2h
  3395   0017DC  0E00               	movlw	0
  3396   0017DE  6EDF               	movwf	indf2,c
  3397   0017E0                     
  3398                           ;dc_motor.c: 181:     setMotorPWM(mL);
  3399   0017E0  C014  F00E         	movff	stop@mL,setMotorPWM@m
  3400   0017E4  C015  F00F         	movff	stop@mL+1,setMotorPWM@m+1
  3401   0017E8  ECD0  F006         	call	_setMotorPWM	;wreg free
  3402   0017EC                     
  3403                           ;dc_motor.c: 182:     setMotorPWM(mR);
  3404   0017EC  C016  F00E         	movff	stop@mR,setMotorPWM@m
  3405   0017F0  C017  F00F         	movff	stop@mR+1,setMotorPWM@m+1
  3406   0017F4  ECD0  F006         	call	_setMotorPWM	;wreg free
  3407   0017F8                     
  3408                           ;dc_motor.c: 183:     LATDbits.LATD4 = 0;
  3409   0017F8  987C               	bcf	124,4,c	;volatile
  3410   0017FA  0012               	return		;funcret
  3411   0017FC                     __end_of_stop:
  3412                           	callstack 0
  3413                           
  3414 ;; *************** function _setMotorPWM *****************
  3415 ;; Defined at:
  3416 ;;		line 72 in file "dc_motor.c"
  3417 ;; Parameters:    Size  Location     Type
  3418 ;;  m               2   13[COMRAM] PTR struct DC_motor
  3419 ;;		 -> motorR(9), motorL(9), 
  3420 ;; Auto vars:     Size  Location     Type
  3421 ;;  negDuty         1   18[COMRAM] unsigned char 
  3422 ;;  posDuty         1   17[COMRAM] unsigned char 
  3423 ;; Return value:  Size  Location     Type
  3424 ;;                  1    wreg      void 
  3425 ;; Registers used:
  3426 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3427 ;; Tracked objects:
  3428 ;;		On entry : 0/0
  3429 ;;		On exit  : 0/0
  3430 ;;		Unchanged: 0/0
  3431 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3432 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3433 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3434 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3435 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3436 ;;Total ram usage:        6 bytes
  3437 ;; Hardware stack levels used: 1
  3438 ;; Hardware stack levels required when called: 2
  3439 ;; This function calls:
  3440 ;;		___lwdiv
  3441 ;;		___wmul
  3442 ;; This function is called by:
  3443 ;;		_forward
  3444 ;;		_reverse
  3445 ;;		_stop
  3446 ;;		_left_45
  3447 ;;		_right_45
  3448 ;;		_space
  3449 ;; This function uses a non-reentrant model
  3450 ;;
  3451                           
  3452                           	psect	text16
  3453   000DA0                     __ptext16:
  3454                           	callstack 0
  3455   000DA0                     _setMotorPWM:
  3456                           	callstack 26
  3457   000DA0                     
  3458                           ;dc_motor.c: 72: void setMotorPWM(DC_motor *m);dc_motor.c: 73: {;dc_motor.c: 74:     uns
      +                          igned char posDuty, negDuty;;dc_motor.c: 76:     if(m->brakemode) {
  3459   000DA0  EE20 F002          	lfsr	2,2
  3460   000DA4  500E               	movf	setMotorPWM@m^0,w,c
  3461   000DA6  26D9               	addwf	fsr2l,f,c
  3462   000DA8  500F               	movf	(setMotorPWM@m+1)^0,w,c
  3463   000DAA  22DA               	addwfc	fsr2h,f,c
  3464   000DAC  50DF               	movf	indf2,w,c
  3465   000DAE  B4D8               	btfsc	status,2,c
  3466   000DB0  EFDC  F006         	goto	u1161
  3467   000DB4  EFDE  F006         	goto	u1160
  3468   000DB8                     u1161:
  3469   000DB8  EF12  F007         	goto	l2070
  3470   000DBC                     u1160:
  3471   000DBC                     
  3472                           ;dc_motor.c: 77:         posDuty = m->PWMperiod - ((unsigned int)(m->power)*(m->PWMperio
      +                          d))/100;
  3473   000DBC  C00E  FFD9         	movff	setMotorPWM@m,fsr2l
  3474   000DC0  C00F  FFDA         	movff	setMotorPWM@m+1,fsr2h
  3475   000DC4  50DF               	movf	indf2,w,c
  3476   000DC6  6E10               	movwf	??_setMotorPWM^0,c
  3477   000DC8  5010               	movf	??_setMotorPWM^0,w,c
  3478   000DCA  6E01               	movwf	___wmul@multiplier^0,c
  3479   000DCC  6A02               	clrf	(___wmul@multiplier+1)^0,c
  3480   000DCE  EE20 F003          	lfsr	2,3
  3481   000DD2  500E               	movf	setMotorPWM@m^0,w,c
  3482   000DD4  26D9               	addwf	fsr2l,f,c
  3483   000DD6  500F               	movf	(setMotorPWM@m+1)^0,w,c
  3484   000DD8  22DA               	addwfc	fsr2h,f,c
  3485   000DDA  CFDE F003          	movff	postinc2,___wmul@multiplicand
  3486   000DDE  CFDD F004          	movff	postdec2,___wmul@multiplicand+1
  3487   000DE2  ECFE  F00D         	call	___wmul	;wreg free
  3488   000DE6  C001  F007         	movff	?___wmul,___lwdiv@dividend
  3489   000DEA  C002  F008         	movff	?___wmul+1,___lwdiv@dividend+1
  3490   000DEE  0E00               	movlw	0
  3491   000DF0  6E0A               	movwf	(___lwdiv@divisor+1)^0,c
  3492   000DF2  0E64               	movlw	100
  3493   000DF4  6E09               	movwf	___lwdiv@divisor^0,c
  3494   000DF6  EC81  F00C         	call	___lwdiv	;wreg free
  3495   000DFA  EE20 F003          	lfsr	2,3
  3496   000DFE  500E               	movf	setMotorPWM@m^0,w,c
  3497   000E00  26D9               	addwf	fsr2l,f,c
  3498   000E02  500F               	movf	(setMotorPWM@m+1)^0,w,c
  3499   000E04  22DA               	addwfc	fsr2h,f,c
  3500   000E06  50DF               	movf	indf2,w,c
  3501   000E08  6E11               	movwf	(??_setMotorPWM+1)^0,c
  3502   000E0A  5007               	movf	?___lwdiv^0,w,c
  3503   000E0C  5C11               	subwf	(??_setMotorPWM+1)^0,w,c
  3504   000E0E  6E12               	movwf	setMotorPWM@posDuty^0,c
  3505   000E10                     
  3506                           ;dc_motor.c: 78:         negDuty = m->PWMperiod;
  3507   000E10  EE20 F003          	lfsr	2,3
  3508   000E14  500E               	movf	setMotorPWM@m^0,w,c
  3509   000E16  26D9               	addwf	fsr2l,f,c
  3510   000E18  500F               	movf	(setMotorPWM@m+1)^0,w,c
  3511   000E1A  22DA               	addwfc	fsr2h,f,c
  3512   000E1C  50DF               	movf	indf2,w,c
  3513   000E1E  6E13               	movwf	setMotorPWM@negDuty^0,c
  3514                           
  3515                           ;dc_motor.c: 79:     }
  3516   000E20  EF35  F007         	goto	l2074
  3517   000E24                     l2070:
  3518                           
  3519                           ;dc_motor.c: 81:         posDuty=0;
  3520   000E24  0E00               	movlw	0
  3521   000E26  6E12               	movwf	setMotorPWM@posDuty^0,c
  3522   000E28                     
  3523                           ;dc_motor.c: 82:   negDuty=((unsigned int)(m->power)*(m->PWMperiod))/100;
  3524   000E28  C00E  FFD9         	movff	setMotorPWM@m,fsr2l
  3525   000E2C  C00F  FFDA         	movff	setMotorPWM@m+1,fsr2h
  3526   000E30  50DF               	movf	indf2,w,c
  3527   000E32  6E10               	movwf	??_setMotorPWM^0,c
  3528   000E34  5010               	movf	??_setMotorPWM^0,w,c
  3529   000E36  6E01               	movwf	___wmul@multiplier^0,c
  3530   000E38  6A02               	clrf	(___wmul@multiplier+1)^0,c
  3531   000E3A  EE20 F003          	lfsr	2,3
  3532   000E3E  500E               	movf	setMotorPWM@m^0,w,c
  3533   000E40  26D9               	addwf	fsr2l,f,c
  3534   000E42  500F               	movf	(setMotorPWM@m+1)^0,w,c
  3535   000E44  22DA               	addwfc	fsr2h,f,c
  3536   000E46  CFDE F003          	movff	postinc2,___wmul@multiplicand
  3537   000E4A  CFDD F004          	movff	postdec2,___wmul@multiplicand+1
  3538   000E4E  ECFE  F00D         	call	___wmul	;wreg free
  3539   000E52  C001  F007         	movff	?___wmul,___lwdiv@dividend
  3540   000E56  C002  F008         	movff	?___wmul+1,___lwdiv@dividend+1
  3541   000E5A  0E00               	movlw	0
  3542   000E5C  6E0A               	movwf	(___lwdiv@divisor+1)^0,c
  3543   000E5E  0E64               	movlw	100
  3544   000E60  6E09               	movwf	___lwdiv@divisor^0,c
  3545   000E62  EC81  F00C         	call	___lwdiv	;wreg free
  3546   000E66  5007               	movf	?___lwdiv^0,w,c
  3547   000E68  6E13               	movwf	setMotorPWM@negDuty^0,c
  3548   000E6A                     l2074:
  3549                           
  3550                           ;dc_motor.c: 85:     if (m->direction) {
  3551   000E6A  EE20 F001          	lfsr	2,1
  3552   000E6E  500E               	movf	setMotorPWM@m^0,w,c
  3553   000E70  26D9               	addwf	fsr2l,f,c
  3554   000E72  500F               	movf	(setMotorPWM@m+1)^0,w,c
  3555   000E74  22DA               	addwfc	fsr2h,f,c
  3556   000E76  50DF               	movf	indf2,w,c
  3557   000E78  B4D8               	btfsc	status,2,c
  3558   000E7A  EF41  F007         	goto	u1171
  3559   000E7E  EF43  F007         	goto	u1170
  3560   000E82                     u1171:
  3561   000E82  EF65  F007         	goto	l2078
  3562   000E86                     u1170:
  3563   000E86                     
  3564                           ;dc_motor.c: 86:         *(m->posDutyHighByte)= posDuty;
  3565   000E86  EE20 F005          	lfsr	2,5
  3566   000E8A  500E               	movf	setMotorPWM@m^0,w,c
  3567   000E8C  26D9               	addwf	fsr2l,f,c
  3568   000E8E  500F               	movf	(setMotorPWM@m+1)^0,w,c
  3569   000E90  22DA               	addwfc	fsr2h,f,c
  3570   000E92  CFDE F010          	movff	postinc2,??_setMotorPWM
  3571   000E96  CFDD F011          	movff	postdec2,??_setMotorPWM+1
  3572   000E9A  C010  FFD9         	movff	??_setMotorPWM,fsr2l
  3573   000E9E  C011  FFDA         	movff	??_setMotorPWM+1,fsr2h
  3574   000EA2  C012  FFDF         	movff	setMotorPWM@posDuty,indf2
  3575                           
  3576                           ;dc_motor.c: 87:         *(m->negDutyHighByte)= negDuty;
  3577   000EA6  EE20 F007          	lfsr	2,7
  3578   000EAA  500E               	movf	setMotorPWM@m^0,w,c
  3579   000EAC  26D9               	addwf	fsr2l,f,c
  3580   000EAE  500F               	movf	(setMotorPWM@m+1)^0,w,c
  3581   000EB0  22DA               	addwfc	fsr2h,f,c
  3582   000EB2  CFDE F010          	movff	postinc2,??_setMotorPWM
  3583   000EB6  CFDD F011          	movff	postdec2,??_setMotorPWM+1
  3584   000EBA  C010  FFD9         	movff	??_setMotorPWM,fsr2l
  3585   000EBE  C011  FFDA         	movff	??_setMotorPWM+1,fsr2h
  3586   000EC2  C013  FFDF         	movff	setMotorPWM@negDuty,indf2
  3587                           
  3588                           ;dc_motor.c: 88:     } else {
  3589   000EC6  EF85  F007         	goto	l301
  3590   000ECA                     l2078:
  3591                           
  3592                           ;dc_motor.c: 89:         *(m->posDutyHighByte)= negDuty;
  3593   000ECA  EE20 F005          	lfsr	2,5
  3594   000ECE  500E               	movf	setMotorPWM@m^0,w,c
  3595   000ED0  26D9               	addwf	fsr2l,f,c
  3596   000ED2  500F               	movf	(setMotorPWM@m+1)^0,w,c
  3597   000ED4  22DA               	addwfc	fsr2h,f,c
  3598   000ED6  CFDE F010          	movff	postinc2,??_setMotorPWM
  3599   000EDA  CFDD F011          	movff	postdec2,??_setMotorPWM+1
  3600   000EDE  C010  FFD9         	movff	??_setMotorPWM,fsr2l
  3601   000EE2  C011  FFDA         	movff	??_setMotorPWM+1,fsr2h
  3602   000EE6  C013  FFDF         	movff	setMotorPWM@negDuty,indf2
  3603                           
  3604                           ;dc_motor.c: 90:         *(m->negDutyHighByte)= posDuty;
  3605   000EEA  EE20 F007          	lfsr	2,7
  3606   000EEE  500E               	movf	setMotorPWM@m^0,w,c
  3607   000EF0  26D9               	addwf	fsr2l,f,c
  3608   000EF2  500F               	movf	(setMotorPWM@m+1)^0,w,c
  3609   000EF4  22DA               	addwfc	fsr2h,f,c
  3610   000EF6  CFDE F010          	movff	postinc2,??_setMotorPWM
  3611   000EFA  CFDD F011          	movff	postdec2,??_setMotorPWM+1
  3612   000EFE  C010  FFD9         	movff	??_setMotorPWM,fsr2l
  3613   000F02  C011  FFDA         	movff	??_setMotorPWM+1,fsr2h
  3614   000F06  C012  FFDF         	movff	setMotorPWM@posDuty,indf2
  3615   000F0A                     l301:
  3616   000F0A  0012               	return		;funcret
  3617   000F0C                     __end_of_setMotorPWM:
  3618                           	callstack 0
  3619                           
  3620 ;; *************** function ___wmul *****************
  3621 ;; Defined at:
  3622 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\Umul16.c"
  3623 ;; Parameters:    Size  Location     Type
  3624 ;;  multiplier      2    0[COMRAM] unsigned int 
  3625 ;;  multiplicand    2    2[COMRAM] unsigned int 
  3626 ;; Auto vars:     Size  Location     Type
  3627 ;;  product         2    4[COMRAM] unsigned int 
  3628 ;; Return value:  Size  Location     Type
  3629 ;;                  2    0[COMRAM] unsigned int 
  3630 ;; Registers used:
  3631 ;;		wreg, status,2, status,0, prodl, prodh
  3632 ;; Tracked objects:
  3633 ;;		On entry : 0/0
  3634 ;;		On exit  : 0/0
  3635 ;;		Unchanged: 0/0
  3636 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3637 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3638 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3639 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3640 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3641 ;;Total ram usage:        6 bytes
  3642 ;; Hardware stack levels used: 1
  3643 ;; Hardware stack levels required when called: 1
  3644 ;; This function calls:
  3645 ;;		Nothing
  3646 ;; This function is called by:
  3647 ;;		_setMotorPWM
  3648 ;; This function uses a non-reentrant model
  3649 ;;
  3650                           
  3651                           	psect	text17
  3652   001BFC                     __ptext17:
  3653                           	callstack 0
  3654   001BFC                     ___wmul:
  3655                           	callstack 26
  3656   001BFC  5001               	movf	___wmul@multiplier^0,w,c
  3657   001BFE  0203               	mulwf	___wmul@multiplicand^0,c
  3658   001C00  CFF3 F005          	movff	prodl,___wmul@product
  3659   001C04  CFF4 F006          	movff	prodh,___wmul@product+1
  3660   001C08  5001               	movf	___wmul@multiplier^0,w,c
  3661   001C0A  0204               	mulwf	(___wmul@multiplicand+1)^0,c
  3662   001C0C  50F3               	movf	243,w,c
  3663   001C0E  2606               	addwf	(___wmul@product+1)^0,f,c
  3664   001C10  5002               	movf	(___wmul@multiplier+1)^0,w,c
  3665   001C12  0203               	mulwf	___wmul@multiplicand^0,c
  3666   001C14  50F3               	movf	243,w,c
  3667   001C16  2606               	addwf	(___wmul@product+1)^0,f,c
  3668   001C18  C005  F001         	movff	___wmul@product,?___wmul
  3669   001C1C  C006  F002         	movff	___wmul@product+1,?___wmul+1
  3670   001C20  0012               	return		;funcret
  3671   001C22                     __end_of___wmul:
  3672                           	callstack 0
  3673                           
  3674 ;; *************** function ___lwdiv *****************
  3675 ;; Defined at:
  3676 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\lwdiv.c"
  3677 ;; Parameters:    Size  Location     Type
  3678 ;;  dividend        2    6[COMRAM] unsigned int 
  3679 ;;  divisor         2    8[COMRAM] unsigned int 
  3680 ;; Auto vars:     Size  Location     Type
  3681 ;;  quotient        2   10[COMRAM] unsigned int 
  3682 ;;  counter         1   12[COMRAM] unsigned char 
  3683 ;; Return value:  Size  Location     Type
  3684 ;;                  2    6[COMRAM] unsigned int 
  3685 ;; Registers used:
  3686 ;;		wreg, status,2, status,0
  3687 ;; Tracked objects:
  3688 ;;		On entry : 0/0
  3689 ;;		On exit  : 0/0
  3690 ;;		Unchanged: 0/0
  3691 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3692 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3693 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3694 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3695 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3696 ;;Total ram usage:        7 bytes
  3697 ;; Hardware stack levels used: 1
  3698 ;; Hardware stack levels required when called: 1
  3699 ;; This function calls:
  3700 ;;		Nothing
  3701 ;; This function is called by:
  3702 ;;		_setMotorPWM
  3703 ;; This function uses a non-reentrant model
  3704 ;;
  3705                           
  3706                           	psect	text18
  3707   001902                     __ptext18:
  3708                           	callstack 0
  3709   001902                     ___lwdiv:
  3710                           	callstack 26
  3711   001902  0E00               	movlw	0
  3712   001904  6E0C               	movwf	(___lwdiv@quotient+1)^0,c
  3713   001906  0E00               	movlw	0
  3714   001908  6E0B               	movwf	___lwdiv@quotient^0,c
  3715   00190A  5009               	movf	___lwdiv@divisor^0,w,c
  3716   00190C  100A               	iorwf	(___lwdiv@divisor+1)^0,w,c
  3717   00190E  B4D8               	btfsc	status,2,c
  3718   001910  EF8C  F00C         	goto	u1111
  3719   001914  EF8E  F00C         	goto	u1110
  3720   001918                     u1111:
  3721   001918  EFB6  F00C         	goto	l996
  3722   00191C                     u1110:
  3723   00191C  0E01               	movlw	1
  3724   00191E  6E0D               	movwf	___lwdiv@counter^0,c
  3725   001920  EF96  F00C         	goto	l2046
  3726   001924                     l2044:
  3727   001924  90D8               	bcf	status,0,c
  3728   001926  3609               	rlcf	___lwdiv@divisor^0,f,c
  3729   001928  360A               	rlcf	(___lwdiv@divisor+1)^0,f,c
  3730   00192A  2A0D               	incf	___lwdiv@counter^0,f,c
  3731   00192C                     l2046:
  3732   00192C  AE0A               	btfss	(___lwdiv@divisor+1)^0,7,c
  3733   00192E  EF9B  F00C         	goto	u1121
  3734   001932  EF9D  F00C         	goto	u1120
  3735   001936                     u1121:
  3736   001936  EF92  F00C         	goto	l2044
  3737   00193A                     u1120:
  3738   00193A                     l2048:
  3739   00193A  90D8               	bcf	status,0,c
  3740   00193C  360B               	rlcf	___lwdiv@quotient^0,f,c
  3741   00193E  360C               	rlcf	(___lwdiv@quotient+1)^0,f,c
  3742   001940  5009               	movf	___lwdiv@divisor^0,w,c
  3743   001942  5C07               	subwf	___lwdiv@dividend^0,w,c
  3744   001944  500A               	movf	(___lwdiv@divisor+1)^0,w,c
  3745   001946  5808               	subwfb	(___lwdiv@dividend+1)^0,w,c
  3746   001948  A0D8               	btfss	status,0,c
  3747   00194A  EFA9  F00C         	goto	u1131
  3748   00194E  EFAB  F00C         	goto	u1130
  3749   001952                     u1131:
  3750   001952  EFB0  F00C         	goto	l2056
  3751   001956                     u1130:
  3752   001956  5009               	movf	___lwdiv@divisor^0,w,c
  3753   001958  5E07               	subwf	___lwdiv@dividend^0,f,c
  3754   00195A  500A               	movf	(___lwdiv@divisor+1)^0,w,c
  3755   00195C  5A08               	subwfb	(___lwdiv@dividend+1)^0,f,c
  3756   00195E  800B               	bsf	___lwdiv@quotient^0,0,c
  3757   001960                     l2056:
  3758   001960  90D8               	bcf	status,0,c
  3759   001962  320A               	rrcf	(___lwdiv@divisor+1)^0,f,c
  3760   001964  3209               	rrcf	___lwdiv@divisor^0,f,c
  3761   001966  2E0D               	decfsz	___lwdiv@counter^0,f,c
  3762   001968  EF9D  F00C         	goto	l2048
  3763   00196C                     l996:
  3764   00196C  C00B  F007         	movff	___lwdiv@quotient,?___lwdiv
  3765   001970  C00C  F008         	movff	___lwdiv@quotient+1,?___lwdiv+1
  3766   001974  0012               	return		;funcret
  3767   001976                     __end_of___lwdiv:
  3768                           	callstack 0
  3769                           
  3770 ;; *************** function _colourcards_normaliseRGBC *****************
  3771 ;; Defined at:
  3772 ;;		line 136 in file "color.c"
  3773 ;; Parameters:    Size  Location     Type
  3774 ;;  c               2   39[COMRAM] PTR struct colors
  3775 ;;		 -> color(20), 
  3776 ;; Auto vars:     Size  Location     Type
  3777 ;;  C               2   47[COMRAM] unsigned int 
  3778 ;;  B               2   45[COMRAM] unsigned int 
  3779 ;;  G               2   43[COMRAM] unsigned int 
  3780 ;;  R               2   41[COMRAM] unsigned int 
  3781 ;; Return value:  Size  Location     Type
  3782 ;;                  1    wreg      void 
  3783 ;; Registers used:
  3784 ;;		wreg, status,2, status,0, cstack
  3785 ;; Tracked objects:
  3786 ;;		On entry : 0/0
  3787 ;;		On exit  : 0/0
  3788 ;;		Unchanged: 0/0
  3789 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3790 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3791 ;;      Locals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3792 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3793 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3794 ;;Total ram usage:       10 bytes
  3795 ;; Hardware stack levels used: 1
  3796 ;; Hardware stack levels required when called: 2
  3797 ;; This function calls:
  3798 ;;		___fldiv
  3799 ;;		___xxtofl
  3800 ;; This function is called by:
  3801 ;;		_buggy_color_response
  3802 ;;		_calibrate_upperbound
  3803 ;; This function uses a non-reentrant model
  3804 ;;
  3805                           
  3806                           	psect	text19
  3807   00117A                     __ptext19:
  3808                           	callstack 0
  3809   00117A                     _colourcards_normaliseRGBC:
  3810                           	callstack 27
  3811   00117A                     
  3812                           ;color.c: 136: void colourcards_normaliseRGBC(colors *c);color.c: 137: {;color.c: 138:  
      +                             unsigned int R = color.R;
  3813   00117A  C044  F02A         	movff	_color,colourcards_normaliseRGBC@R
  3814   00117E  C045  F02B         	movff	_color+1,colourcards_normaliseRGBC@R+1
  3815                           
  3816                           ;color.c: 139:     unsigned int G = color.G;
  3817   001182  C048  F02C         	movff	_color+4,colourcards_normaliseRGBC@G
  3818   001186  C049  F02D         	movff	_color+5,colourcards_normaliseRGBC@G+1
  3819                           
  3820                           ;color.c: 140:     unsigned int B = color.B;
  3821   00118A  C046  F02E         	movff	_color+2,colourcards_normaliseRGBC@B
  3822   00118E  C047  F02F         	movff	_color+3,colourcards_normaliseRGBC@B+1
  3823                           
  3824                           ;color.c: 141:     unsigned int C = color.C;
  3825   001192  C04A  F030         	movff	_color+6,colourcards_normaliseRGBC@C
  3826   001196  C04B  F031         	movff	_color+7,colourcards_normaliseRGBC@C+1
  3827   00119A                     
  3828                           ;color.c: 143:     color.R_norm = (float)R/(float)C;
  3829   00119A  C02A  F001         	movff	colourcards_normaliseRGBC@R,___xxtofl@val
  3830   00119E  C02B  F002         	movff	colourcards_normaliseRGBC@R+1,___xxtofl@val+1
  3831   0011A2  6A03               	clrf	(___xxtofl@val+2)^0,c
  3832   0011A4  6A04               	clrf	(___xxtofl@val+3)^0,c
  3833   0011A6  0E00               	movlw	0
  3834   0011A8  ECF6  F005         	call	___xxtofl
  3835   0011AC  C001  F00F         	movff	?___xxtofl,___fldiv@b
  3836   0011B0  C002  F010         	movff	?___xxtofl+1,___fldiv@b+1
  3837   0011B4  C003  F011         	movff	?___xxtofl+2,___fldiv@b+2
  3838   0011B8  C004  F012         	movff	?___xxtofl+3,___fldiv@b+3
  3839   0011BC  C030  F001         	movff	colourcards_normaliseRGBC@C,___xxtofl@val
  3840   0011C0  C031  F002         	movff	colourcards_normaliseRGBC@C+1,___xxtofl@val+1
  3841   0011C4  6A03               	clrf	(___xxtofl@val+2)^0,c
  3842   0011C6  6A04               	clrf	(___xxtofl@val+3)^0,c
  3843   0011C8  0E00               	movlw	0
  3844   0011CA  ECF6  F005         	call	___xxtofl
  3845   0011CE  C001  F013         	movff	?___xxtofl,___fldiv@a
  3846   0011D2  C002  F014         	movff	?___xxtofl+1,___fldiv@a+1
  3847   0011D6  C003  F015         	movff	?___xxtofl+2,___fldiv@a+2
  3848   0011DA  C004  F016         	movff	?___xxtofl+3,___fldiv@a+3
  3849   0011DE  ECB7  F002         	call	___fldiv	;wreg free
  3850   0011E2  C00F  F04C         	movff	?___fldiv,_color+8
  3851   0011E6  C010  F04D         	movff	?___fldiv+1,_color+9
  3852   0011EA  C011  F04E         	movff	?___fldiv+2,_color+10
  3853   0011EE  C012  F04F         	movff	?___fldiv+3,_color+11
  3854                           
  3855                           ;color.c: 144:     color.G_norm = (float)G/(float)C;
  3856   0011F2  C02C  F001         	movff	colourcards_normaliseRGBC@G,___xxtofl@val
  3857   0011F6  C02D  F002         	movff	colourcards_normaliseRGBC@G+1,___xxtofl@val+1
  3858   0011FA  6A03               	clrf	(___xxtofl@val+2)^0,c
  3859   0011FC  6A04               	clrf	(___xxtofl@val+3)^0,c
  3860   0011FE  0E00               	movlw	0
  3861   001200  ECF6  F005         	call	___xxtofl
  3862   001204  C001  F00F         	movff	?___xxtofl,___fldiv@b
  3863   001208  C002  F010         	movff	?___xxtofl+1,___fldiv@b+1
  3864   00120C  C003  F011         	movff	?___xxtofl+2,___fldiv@b+2
  3865   001210  C004  F012         	movff	?___xxtofl+3,___fldiv@b+3
  3866   001214  C030  F001         	movff	colourcards_normaliseRGBC@C,___xxtofl@val
  3867   001218  C031  F002         	movff	colourcards_normaliseRGBC@C+1,___xxtofl@val+1
  3868   00121C  6A03               	clrf	(___xxtofl@val+2)^0,c
  3869   00121E  6A04               	clrf	(___xxtofl@val+3)^0,c
  3870   001220  0E00               	movlw	0
  3871   001222  ECF6  F005         	call	___xxtofl
  3872   001226  C001  F013         	movff	?___xxtofl,___fldiv@a
  3873   00122A  C002  F014         	movff	?___xxtofl+1,___fldiv@a+1
  3874   00122E  C003  F015         	movff	?___xxtofl+2,___fldiv@a+2
  3875   001232  C004  F016         	movff	?___xxtofl+3,___fldiv@a+3
  3876   001236  ECB7  F002         	call	___fldiv	;wreg free
  3877   00123A  C00F  F054         	movff	?___fldiv,_color+16
  3878   00123E  C010  F055         	movff	?___fldiv+1,_color+17
  3879   001242  C011  F056         	movff	?___fldiv+2,_color+18
  3880   001246  C012  F057         	movff	?___fldiv+3,_color+19
  3881                           
  3882                           ;color.c: 145:     color.B_norm = (float)B/(float)C;
  3883   00124A  C02E  F001         	movff	colourcards_normaliseRGBC@B,___xxtofl@val
  3884   00124E  C02F  F002         	movff	colourcards_normaliseRGBC@B+1,___xxtofl@val+1
  3885   001252  6A03               	clrf	(___xxtofl@val+2)^0,c
  3886   001254  6A04               	clrf	(___xxtofl@val+3)^0,c
  3887   001256  0E00               	movlw	0
  3888   001258  ECF6  F005         	call	___xxtofl
  3889   00125C  C001  F00F         	movff	?___xxtofl,___fldiv@b
  3890   001260  C002  F010         	movff	?___xxtofl+1,___fldiv@b+1
  3891   001264  C003  F011         	movff	?___xxtofl+2,___fldiv@b+2
  3892   001268  C004  F012         	movff	?___xxtofl+3,___fldiv@b+3
  3893   00126C  C030  F001         	movff	colourcards_normaliseRGBC@C,___xxtofl@val
  3894   001270  C031  F002         	movff	colourcards_normaliseRGBC@C+1,___xxtofl@val+1
  3895   001274  6A03               	clrf	(___xxtofl@val+2)^0,c
  3896   001276  6A04               	clrf	(___xxtofl@val+3)^0,c
  3897   001278  0E00               	movlw	0
  3898   00127A  ECF6  F005         	call	___xxtofl
  3899   00127E  C001  F013         	movff	?___xxtofl,___fldiv@a
  3900   001282  C002  F014         	movff	?___xxtofl+1,___fldiv@a+1
  3901   001286  C003  F015         	movff	?___xxtofl+2,___fldiv@a+2
  3902   00128A  C004  F016         	movff	?___xxtofl+3,___fldiv@a+3
  3903   00128E  ECB7  F002         	call	___fldiv	;wreg free
  3904   001292  C00F  F050         	movff	?___fldiv,_color+12
  3905   001296  C010  F051         	movff	?___fldiv+1,_color+13
  3906   00129A  C011  F052         	movff	?___fldiv+2,_color+14
  3907   00129E  C012  F053         	movff	?___fldiv+3,_color+15
  3908   0012A2  0012               	return		;funcret
  3909   0012A4                     __end_of_colourcards_normaliseRGBC:
  3910                           	callstack 0
  3911                           
  3912 ;; *************** function ___xxtofl *****************
  3913 ;; Defined at:
  3914 ;;		line 10 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\xxtofl.c"
  3915 ;; Parameters:    Size  Location     Type
  3916 ;;  sign            1    wreg     unsigned char 
  3917 ;;  val             4    0[COMRAM] long 
  3918 ;; Auto vars:     Size  Location     Type
  3919 ;;  sign            1    8[COMRAM] unsigned char 
  3920 ;;  arg             4   10[COMRAM] unsigned long 
  3921 ;;  exp             1    9[COMRAM] unsigned char 
  3922 ;; Return value:  Size  Location     Type
  3923 ;;                  4    0[COMRAM] unsigned char 
  3924 ;; Registers used:
  3925 ;;		wreg, status,2, status,0
  3926 ;; Tracked objects:
  3927 ;;		On entry : 0/0
  3928 ;;		On exit  : 0/0
  3929 ;;		Unchanged: 0/0
  3930 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3931 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3932 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3933 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3934 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3935 ;;Total ram usage:       14 bytes
  3936 ;; Hardware stack levels used: 1
  3937 ;; Hardware stack levels required when called: 1
  3938 ;; This function calls:
  3939 ;;		Nothing
  3940 ;; This function is called by:
  3941 ;;		_colourcards_normaliseRGBC
  3942 ;; This function uses a non-reentrant model
  3943 ;;
  3944                           
  3945                           	psect	text20
  3946   000BEC                     __ptext20:
  3947                           	callstack 0
  3948   000BEC                     ___xxtofl:
  3949                           	callstack 27
  3950                           
  3951                           ;incstack = 0
  3952                           ;___xxtofl@sign stored from wreg
  3953   000BEC  6E09               	movwf	___xxtofl@sign^0,c
  3954   000BEE  5009               	movf	___xxtofl@sign^0,w,c
  3955   000BF0  B4D8               	btfsc	status,2,c
  3956   000BF2  EFFD  F005         	goto	u1581
  3957   000BF6  EFFF  F005         	goto	u1580
  3958   000BFA                     u1581:
  3959   000BFA  EF21  F006         	goto	l1160
  3960   000BFE                     u1580:
  3961   000BFE  BE04               	btfsc	(___xxtofl@val+3)^0,7,c
  3962   000C00  EF06  F006         	goto	u1590
  3963   000C04  EF04  F006         	goto	u1591
  3964   000C08                     u1591:
  3965   000C08  EF21  F006         	goto	l1160
  3966   000C0C                     u1590:
  3967   000C0C  C001  F005         	movff	___xxtofl@val,??___xxtofl
  3968   000C10  C002  F006         	movff	___xxtofl@val+1,??___xxtofl+1
  3969   000C14  C003  F007         	movff	___xxtofl@val+2,??___xxtofl+2
  3970   000C18  C004  F008         	movff	___xxtofl@val+3,??___xxtofl+3
  3971   000C1C  1E05               	comf	??___xxtofl^0,f,c
  3972   000C1E  1E06               	comf	(??___xxtofl+1)^0,f,c
  3973   000C20  1E07               	comf	(??___xxtofl+2)^0,f,c
  3974   000C22  1E08               	comf	(??___xxtofl+3)^0,f,c
  3975   000C24  2A05               	incf	??___xxtofl^0,f,c
  3976   000C26  0E00               	movlw	0
  3977   000C28  2206               	addwfc	(??___xxtofl+1)^0,f,c
  3978   000C2A  2207               	addwfc	(??___xxtofl+2)^0,f,c
  3979   000C2C  2208               	addwfc	(??___xxtofl+3)^0,f,c
  3980   000C2E  C005  F00B         	movff	??___xxtofl,___xxtofl@arg
  3981   000C32  C006  F00C         	movff	??___xxtofl+1,___xxtofl@arg+1
  3982   000C36  C007  F00D         	movff	??___xxtofl+2,___xxtofl@arg+2
  3983   000C3A  C008  F00E         	movff	??___xxtofl+3,___xxtofl@arg+3
  3984   000C3E  EF29  F006         	goto	l2432
  3985   000C42                     l1160:
  3986   000C42  C001  F00B         	movff	___xxtofl@val,___xxtofl@arg
  3987   000C46  C002  F00C         	movff	___xxtofl@val+1,___xxtofl@arg+1
  3988   000C4A  C003  F00D         	movff	___xxtofl@val+2,___xxtofl@arg+2
  3989   000C4E  C004  F00E         	movff	___xxtofl@val+3,___xxtofl@arg+3
  3990   000C52                     l2432:
  3991   000C52  5001               	movf	___xxtofl@val^0,w,c
  3992   000C54  1002               	iorwf	(___xxtofl@val+1)^0,w,c
  3993   000C56  1003               	iorwf	(___xxtofl@val+2)^0,w,c
  3994   000C58  1004               	iorwf	(___xxtofl@val+3)^0,w,c
  3995   000C5A  A4D8               	btfss	status,2,c
  3996   000C5C  EF32  F006         	goto	u1601
  3997   000C60  EF34  F006         	goto	u1600
  3998   000C64                     u1601:
  3999   000C64  EF3E  F006         	goto	l2438
  4000   000C68                     u1600:
  4001   000C68  0E00               	movlw	0
  4002   000C6A  6E01               	movwf	?___xxtofl^0,c
  4003   000C6C  0E00               	movlw	0
  4004   000C6E  6E02               	movwf	(?___xxtofl+1)^0,c
  4005   000C70  0E00               	movlw	0
  4006   000C72  6E03               	movwf	(?___xxtofl+2)^0,c
  4007   000C74  0E00               	movlw	0
  4008   000C76  6E04               	movwf	(?___xxtofl+3)^0,c
  4009   000C78  EFCF  F006         	goto	l1163
  4010   000C7C                     l2438:
  4011   000C7C  0E96               	movlw	150
  4012   000C7E  6E0A               	movwf	___xxtofl@exp^0,c
  4013   000C80  EF48  F006         	goto	l2442
  4014   000C84                     l2440:
  4015   000C84  2A0A               	incf	___xxtofl@exp^0,f,c
  4016   000C86  90D8               	bcf	status,0,c
  4017   000C88  320E               	rrcf	(___xxtofl@arg+3)^0,f,c
  4018   000C8A  320D               	rrcf	(___xxtofl@arg+2)^0,f,c
  4019   000C8C  320C               	rrcf	(___xxtofl@arg+1)^0,f,c
  4020   000C8E  320B               	rrcf	___xxtofl@arg^0,f,c
  4021   000C90                     l2442:
  4022   000C90  0E00               	movlw	0
  4023   000C92  140B               	andwf	___xxtofl@arg^0,w,c
  4024   000C94  6E05               	movwf	??___xxtofl^0,c
  4025   000C96  0E00               	movlw	0
  4026   000C98  140C               	andwf	(___xxtofl@arg+1)^0,w,c
  4027   000C9A  6E06               	movwf	(??___xxtofl+1)^0,c
  4028   000C9C  0E00               	movlw	0
  4029   000C9E  140D               	andwf	(___xxtofl@arg+2)^0,w,c
  4030   000CA0  6E07               	movwf	(??___xxtofl+2)^0,c
  4031   000CA2  0EFE               	movlw	254
  4032   000CA4  140E               	andwf	(___xxtofl@arg+3)^0,w,c
  4033   000CA6  6E08               	movwf	(??___xxtofl+3)^0,c
  4034   000CA8  5005               	movf	??___xxtofl^0,w,c
  4035   000CAA  1006               	iorwf	(??___xxtofl+1)^0,w,c
  4036   000CAC  1007               	iorwf	(??___xxtofl+2)^0,w,c
  4037   000CAE  1008               	iorwf	(??___xxtofl+3)^0,w,c
  4038   000CB0  A4D8               	btfss	status,2,c
  4039   000CB2  EF5D  F006         	goto	u1611
  4040   000CB6  EF5F  F006         	goto	u1610
  4041   000CBA                     u1611:
  4042   000CBA  EF42  F006         	goto	l2440
  4043   000CBE                     u1610:
  4044   000CBE  EF6D  F006         	goto	l1167
  4045   000CC2                     l2444:
  4046   000CC2  2A0A               	incf	___xxtofl@exp^0,f,c
  4047   000CC4  0E01               	movlw	1
  4048   000CC6  260B               	addwf	___xxtofl@arg^0,f,c
  4049   000CC8  0E00               	movlw	0
  4050   000CCA  220C               	addwfc	(___xxtofl@arg+1)^0,f,c
  4051   000CCC  220D               	addwfc	(___xxtofl@arg+2)^0,f,c
  4052   000CCE  220E               	addwfc	(___xxtofl@arg+3)^0,f,c
  4053   000CD0  90D8               	bcf	status,0,c
  4054   000CD2  320E               	rrcf	(___xxtofl@arg+3)^0,f,c
  4055   000CD4  320D               	rrcf	(___xxtofl@arg+2)^0,f,c
  4056   000CD6  320C               	rrcf	(___xxtofl@arg+1)^0,f,c
  4057   000CD8  320B               	rrcf	___xxtofl@arg^0,f,c
  4058   000CDA                     l1167:
  4059   000CDA  0E00               	movlw	0
  4060   000CDC  140B               	andwf	___xxtofl@arg^0,w,c
  4061   000CDE  6E05               	movwf	??___xxtofl^0,c
  4062   000CE0  0E00               	movlw	0
  4063   000CE2  140C               	andwf	(___xxtofl@arg+1)^0,w,c
  4064   000CE4  6E06               	movwf	(??___xxtofl+1)^0,c
  4065   000CE6  0E00               	movlw	0
  4066   000CE8  140D               	andwf	(___xxtofl@arg+2)^0,w,c
  4067   000CEA  6E07               	movwf	(??___xxtofl+2)^0,c
  4068   000CEC  0EFF               	movlw	255
  4069   000CEE  140E               	andwf	(___xxtofl@arg+3)^0,w,c
  4070   000CF0  6E08               	movwf	(??___xxtofl+3)^0,c
  4071   000CF2  5005               	movf	??___xxtofl^0,w,c
  4072   000CF4  1006               	iorwf	(??___xxtofl+1)^0,w,c
  4073   000CF6  1007               	iorwf	(??___xxtofl+2)^0,w,c
  4074   000CF8  1008               	iorwf	(??___xxtofl+3)^0,w,c
  4075   000CFA  A4D8               	btfss	status,2,c
  4076   000CFC  EF82  F006         	goto	u1621
  4077   000D00  EF84  F006         	goto	u1620
  4078   000D04                     u1621:
  4079   000D04  EF61  F006         	goto	l2444
  4080   000D08                     u1620:
  4081   000D08  EF8C  F006         	goto	l2452
  4082   000D0C                     l2450:
  4083   000D0C  060A               	decf	___xxtofl@exp^0,f,c
  4084   000D0E  90D8               	bcf	status,0,c
  4085   000D10  360B               	rlcf	___xxtofl@arg^0,f,c
  4086   000D12  360C               	rlcf	(___xxtofl@arg+1)^0,f,c
  4087   000D14  360D               	rlcf	(___xxtofl@arg+2)^0,f,c
  4088   000D16  360E               	rlcf	(___xxtofl@arg+3)^0,f,c
  4089   000D18                     l2452:
  4090   000D18  BE0D               	btfsc	(___xxtofl@arg+2)^0,7,c
  4091   000D1A  EF91  F006         	goto	u1631
  4092   000D1E  EF93  F006         	goto	u1630
  4093   000D22                     u1631:
  4094   000D22  EF9B  F006         	goto	l1174
  4095   000D26                     u1630:
  4096   000D26  0E02               	movlw	2
  4097   000D28  600A               	cpfslt	___xxtofl@exp^0,c
  4098   000D2A  EF99  F006         	goto	u1641
  4099   000D2E  EF9B  F006         	goto	u1640
  4100   000D32                     u1641:
  4101   000D32  EF86  F006         	goto	l2450
  4102   000D36                     u1640:
  4103   000D36                     l1174:
  4104   000D36  B00A               	btfsc	___xxtofl@exp^0,0,c
  4105   000D38  EFA0  F006         	goto	u1651
  4106   000D3C  EFA2  F006         	goto	u1650
  4107   000D40                     u1651:
  4108   000D40  EFA3  F006         	goto	l2458
  4109   000D44                     u1650:
  4110   000D44  9E0D               	bcf	(___xxtofl@arg+2)^0,7,c
  4111   000D46                     l2458:
  4112   000D46  90D8               	bcf	status,0,c
  4113   000D48  320A               	rrcf	___xxtofl@exp^0,f,c
  4114   000D4A  C00A  F005         	movff	___xxtofl@exp,??___xxtofl
  4115   000D4E  6A06               	clrf	(??___xxtofl+1)^0,c
  4116   000D50  6A07               	clrf	(??___xxtofl+2)^0,c
  4117   000D52  6A08               	clrf	(??___xxtofl+3)^0,c
  4118   000D54  C005  F008         	movff	??___xxtofl,??___xxtofl+3
  4119   000D58  6A07               	clrf	(??___xxtofl+2)^0,c
  4120   000D5A  6A06               	clrf	(??___xxtofl+1)^0,c
  4121   000D5C  6A05               	clrf	??___xxtofl^0,c
  4122   000D5E  5005               	movf	??___xxtofl^0,w,c
  4123   000D60  120B               	iorwf	___xxtofl@arg^0,f,c
  4124   000D62  5006               	movf	(??___xxtofl+1)^0,w,c
  4125   000D64  120C               	iorwf	(___xxtofl@arg+1)^0,f,c
  4126   000D66  5007               	movf	(??___xxtofl+2)^0,w,c
  4127   000D68  120D               	iorwf	(___xxtofl@arg+2)^0,f,c
  4128   000D6A  5008               	movf	(??___xxtofl+3)^0,w,c
  4129   000D6C  120E               	iorwf	(___xxtofl@arg+3)^0,f,c
  4130   000D6E  5009               	movf	___xxtofl@sign^0,w,c
  4131   000D70  B4D8               	btfsc	status,2,c
  4132   000D72  EFBD  F006         	goto	u1661
  4133   000D76  EFBF  F006         	goto	u1660
  4134   000D7A                     u1661:
  4135   000D7A  EFC7  F006         	goto	l2468
  4136   000D7E                     u1660:
  4137   000D7E  BE04               	btfsc	(___xxtofl@val+3)^0,7,c
  4138   000D80  EFC6  F006         	goto	u1670
  4139   000D84  EFC4  F006         	goto	u1671
  4140   000D88                     u1671:
  4141   000D88  EFC7  F006         	goto	l2468
  4142   000D8C                     u1670:
  4143   000D8C  8E0E               	bsf	(___xxtofl@arg+3)^0,7,c
  4144   000D8E                     l2468:
  4145   000D8E  C00B  F001         	movff	___xxtofl@arg,?___xxtofl
  4146   000D92  C00C  F002         	movff	___xxtofl@arg+1,?___xxtofl+1
  4147   000D96  C00D  F003         	movff	___xxtofl@arg+2,?___xxtofl+2
  4148   000D9A  C00E  F004         	movff	___xxtofl@arg+3,?___xxtofl+3
  4149   000D9E                     l1163:
  4150   000D9E  0012               	return		;funcret
  4151   000DA0                     __end_of___xxtofl:
  4152                           	callstack 0
  4153                           
  4154 ;; *************** function ___fldiv *****************
  4155 ;; Defined at:
  4156 ;;		line 11 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\sprcdiv.c"
  4157 ;; Parameters:    Size  Location     Type
  4158 ;;  b               4   14[COMRAM] unsigned char 
  4159 ;;  a               4   18[COMRAM] unsigned char 
  4160 ;; Auto vars:     Size  Location     Type
  4161 ;;  grs             4   33[COMRAM] unsigned long 
  4162 ;;  rem             4   26[COMRAM] unsigned long 
  4163 ;;  new_exp         2   31[COMRAM] short 
  4164 ;;  aexp            1   38[COMRAM] unsigned char 
  4165 ;;  bexp            1   37[COMRAM] unsigned char 
  4166 ;;  sign            1   30[COMRAM] unsigned char 
  4167 ;; Return value:  Size  Location     Type
  4168 ;;                  4   14[COMRAM] unsigned char 
  4169 ;; Registers used:
  4170 ;;		wreg, status,2, status,0
  4171 ;; Tracked objects:
  4172 ;;		On entry : 0/0
  4173 ;;		On exit  : 0/0
  4174 ;;		Unchanged: 0/0
  4175 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4176 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4177 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4178 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4179 ;;      Totals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4180 ;;Total ram usage:       25 bytes
  4181 ;; Hardware stack levels used: 1
  4182 ;; Hardware stack levels required when called: 1
  4183 ;; This function calls:
  4184 ;;		Nothing
  4185 ;; This function is called by:
  4186 ;;		_colourcards_normaliseRGBC
  4187 ;; This function uses a non-reentrant model
  4188 ;;
  4189                           
  4190                           	psect	text21
  4191   00056E                     __ptext21:
  4192                           	callstack 0
  4193   00056E                     ___fldiv:
  4194                           	callstack 27
  4195   00056E  5012               	movf	(___fldiv@b+3)^0,w,c
  4196   000570  0B80               	andlw	128
  4197   000572  6E1F               	movwf	___fldiv@sign^0,c
  4198   000574  5012               	movf	(___fldiv@b+3)^0,w,c
  4199   000576  2412               	addwf	(___fldiv@b+3)^0,w,c
  4200   000578  6E26               	movwf	___fldiv@bexp^0,c
  4201   00057A  AE11               	btfss	(___fldiv@b+2)^0,7,c
  4202   00057C  EFC2  F002         	goto	u1351
  4203   000580  EFC4  F002         	goto	u1350
  4204   000584                     u1351:
  4205   000584  EFC5  F002         	goto	l2294
  4206   000588                     u1350:
  4207   000588  8026               	bsf	___fldiv@bexp^0,0,c
  4208   00058A                     l2294:
  4209   00058A  5026               	movf	___fldiv@bexp^0,w,c
  4210   00058C  B4D8               	btfsc	status,2,c
  4211   00058E  EFCB  F002         	goto	u1361
  4212   000592  EFCD  F002         	goto	u1360
  4213   000596                     u1361:
  4214   000596  EFE2  F002         	goto	l2304
  4215   00059A                     u1360:
  4216   00059A  2826               	incf	___fldiv@bexp^0,w,c
  4217   00059C  A4D8               	btfss	status,2,c
  4218   00059E  EFD3  F002         	goto	u1371
  4219   0005A2  EFD5  F002         	goto	u1370
  4220   0005A6                     u1371:
  4221   0005A6  EFDD  F002         	goto	l2300
  4222   0005AA                     u1370:
  4223   0005AA  0E00               	movlw	0
  4224   0005AC  6E0F               	movwf	___fldiv@b^0,c
  4225   0005AE  0E00               	movlw	0
  4226   0005B0  6E10               	movwf	(___fldiv@b+1)^0,c
  4227   0005B2  0E00               	movlw	0
  4228   0005B4  6E11               	movwf	(___fldiv@b+2)^0,c
  4229   0005B6  0E00               	movlw	0
  4230   0005B8  6E12               	movwf	(___fldiv@b+3)^0,c
  4231   0005BA                     l2300:
  4232   0005BA  8E11               	bsf	(___fldiv@b+2)^0,7,c
  4233   0005BC  0E00               	movlw	0
  4234   0005BE  6E12               	movwf	(___fldiv@b+3)^0,c
  4235   0005C0  EFEA  F002         	goto	l2306
  4236   0005C4                     l2304:
  4237   0005C4  0E00               	movlw	0
  4238   0005C6  6E0F               	movwf	___fldiv@b^0,c
  4239   0005C8  0E00               	movlw	0
  4240   0005CA  6E10               	movwf	(___fldiv@b+1)^0,c
  4241   0005CC  0E00               	movlw	0
  4242   0005CE  6E11               	movwf	(___fldiv@b+2)^0,c
  4243   0005D0  0E00               	movlw	0
  4244   0005D2  6E12               	movwf	(___fldiv@b+3)^0,c
  4245   0005D4                     l2306:
  4246   0005D4  5016               	movf	(___fldiv@a+3)^0,w,c
  4247   0005D6  0B80               	andlw	128
  4248   0005D8  1A1F               	xorwf	___fldiv@sign^0,f,c
  4249   0005DA  5016               	movf	(___fldiv@a+3)^0,w,c
  4250   0005DC  2416               	addwf	(___fldiv@a+3)^0,w,c
  4251   0005DE  6E27               	movwf	___fldiv@aexp^0,c
  4252   0005E0  AE15               	btfss	(___fldiv@a+2)^0,7,c
  4253   0005E2  EFF5  F002         	goto	u1381
  4254   0005E6  EFF7  F002         	goto	u1380
  4255   0005EA                     u1381:
  4256   0005EA  EFF8  F002         	goto	l2314
  4257   0005EE                     u1380:
  4258   0005EE  8027               	bsf	___fldiv@aexp^0,0,c
  4259   0005F0                     l2314:
  4260   0005F0  5027               	movf	___fldiv@aexp^0,w,c
  4261   0005F2  B4D8               	btfsc	status,2,c
  4262   0005F4  EFFE  F002         	goto	u1391
  4263   0005F8  EF00  F003         	goto	u1390
  4264   0005FC                     u1391:
  4265   0005FC  EF15  F003         	goto	l2324
  4266   000600                     u1390:
  4267   000600  2827               	incf	___fldiv@aexp^0,w,c
  4268   000602  A4D8               	btfss	status,2,c
  4269   000604  EF06  F003         	goto	u1401
  4270   000608  EF08  F003         	goto	u1400
  4271   00060C                     u1401:
  4272   00060C  EF10  F003         	goto	l2320
  4273   000610                     u1400:
  4274   000610  0E00               	movlw	0
  4275   000612  6E13               	movwf	___fldiv@a^0,c
  4276   000614  0E00               	movlw	0
  4277   000616  6E14               	movwf	(___fldiv@a+1)^0,c
  4278   000618  0E00               	movlw	0
  4279   00061A  6E15               	movwf	(___fldiv@a+2)^0,c
  4280   00061C  0E00               	movlw	0
  4281   00061E  6E16               	movwf	(___fldiv@a+3)^0,c
  4282   000620                     l2320:
  4283   000620  8E15               	bsf	(___fldiv@a+2)^0,7,c
  4284   000622  0E00               	movlw	0
  4285   000624  6E16               	movwf	(___fldiv@a+3)^0,c
  4286   000626  EF1D  F003         	goto	l2326
  4287   00062A                     l2324:
  4288   00062A  0E00               	movlw	0
  4289   00062C  6E13               	movwf	___fldiv@a^0,c
  4290   00062E  0E00               	movlw	0
  4291   000630  6E14               	movwf	(___fldiv@a+1)^0,c
  4292   000632  0E00               	movlw	0
  4293   000634  6E15               	movwf	(___fldiv@a+2)^0,c
  4294   000636  0E00               	movlw	0
  4295   000638  6E16               	movwf	(___fldiv@a+3)^0,c
  4296   00063A                     l2326:
  4297   00063A  5013               	movf	___fldiv@a^0,w,c
  4298   00063C  1014               	iorwf	(___fldiv@a+1)^0,w,c
  4299   00063E  1015               	iorwf	(___fldiv@a+2)^0,w,c
  4300   000640  1016               	iorwf	(___fldiv@a+3)^0,w,c
  4301   000642  A4D8               	btfss	status,2,c
  4302   000644  EF26  F003         	goto	u1411
  4303   000648  EF28  F003         	goto	u1410
  4304   00064C                     u1411:
  4305   00064C  EF40  F003         	goto	l2338
  4306   000650                     u1410:
  4307   000650  0E00               	movlw	0
  4308   000652  6E0F               	movwf	___fldiv@b^0,c
  4309   000654  0E00               	movlw	0
  4310   000656  6E10               	movwf	(___fldiv@b+1)^0,c
  4311   000658  0E00               	movlw	0
  4312   00065A  6E11               	movwf	(___fldiv@b+2)^0,c
  4313   00065C  0E00               	movlw	0
  4314   00065E  6E12               	movwf	(___fldiv@b+3)^0,c
  4315   000660  0E80               	movlw	128
  4316   000662  1211               	iorwf	(___fldiv@b+2)^0,f,c
  4317   000664  0E7F               	movlw	127
  4318   000666  1212               	iorwf	(___fldiv@b+3)^0,f,c
  4319   000668                     l2332:
  4320   000668  501F               	movf	___fldiv@sign^0,w,c
  4321   00066A  1212               	iorwf	(___fldiv@b+3)^0,f,c
  4322   00066C  C00F  F00F         	movff	___fldiv@b,?___fldiv
  4323   000670  C010  F010         	movff	___fldiv@b+1,?___fldiv+1
  4324   000674  C011  F011         	movff	___fldiv@b+2,?___fldiv+2
  4325   000678  C012  F012         	movff	___fldiv@b+3,?___fldiv+3
  4326   00067C  EF83  F004         	goto	l1087
  4327   000680                     l2338:
  4328   000680  5026               	movf	___fldiv@bexp^0,w,c
  4329   000682  A4D8               	btfss	status,2,c
  4330   000684  EF46  F003         	goto	u1421
  4331   000688  EF48  F003         	goto	u1420
  4332   00068C                     u1421:
  4333   00068C  EF52  F003         	goto	l2346
  4334   000690                     u1420:
  4335   000690  0E00               	movlw	0
  4336   000692  6E0F               	movwf	?___fldiv^0,c
  4337   000694  0E00               	movlw	0
  4338   000696  6E10               	movwf	(?___fldiv+1)^0,c
  4339   000698  0E00               	movlw	0
  4340   00069A  6E11               	movwf	(?___fldiv+2)^0,c
  4341   00069C  0E00               	movlw	0
  4342   00069E  6E12               	movwf	(?___fldiv+3)^0,c
  4343   0006A0  EF83  F004         	goto	l1087
  4344   0006A4                     l2346:
  4345   0006A4  5027               	movf	___fldiv@aexp^0,w,c
  4346   0006A6  C026  F017         	movff	___fldiv@bexp,??___fldiv
  4347   0006AA  6A18               	clrf	(??___fldiv+1)^0,c
  4348   0006AC  5E17               	subwf	??___fldiv^0,f,c
  4349   0006AE  0E00               	movlw	0
  4350   0006B0  5A18               	subwfb	(??___fldiv+1)^0,f,c
  4351   0006B2  0E7F               	movlw	127
  4352   0006B4  2417               	addwf	??___fldiv^0,w,c
  4353   0006B6  6E20               	movwf	___fldiv@new_exp^0,c
  4354   0006B8  0E00               	movlw	0
  4355   0006BA  2018               	addwfc	(??___fldiv+1)^0,w,c
  4356   0006BC  6E21               	movwf	(___fldiv@new_exp+1)^0,c
  4357   0006BE  C00F  F01B         	movff	___fldiv@b,___fldiv@rem
  4358   0006C2  C010  F01C         	movff	___fldiv@b+1,___fldiv@rem+1
  4359   0006C6  C011  F01D         	movff	___fldiv@b+2,___fldiv@rem+2
  4360   0006CA  C012  F01E         	movff	___fldiv@b+3,___fldiv@rem+3
  4361   0006CE  0E00               	movlw	0
  4362   0006D0  6E0F               	movwf	___fldiv@b^0,c
  4363   0006D2  0E00               	movlw	0
  4364   0006D4  6E10               	movwf	(___fldiv@b+1)^0,c
  4365   0006D6  0E00               	movlw	0
  4366   0006D8  6E11               	movwf	(___fldiv@b+2)^0,c
  4367   0006DA  0E00               	movlw	0
  4368   0006DC  6E12               	movwf	(___fldiv@b+3)^0,c
  4369   0006DE  0E00               	movlw	0
  4370   0006E0  6E22               	movwf	___fldiv@grs^0,c
  4371   0006E2  0E00               	movlw	0
  4372   0006E4  6E23               	movwf	(___fldiv@grs+1)^0,c
  4373   0006E6  0E00               	movlw	0
  4374   0006E8  6E24               	movwf	(___fldiv@grs+2)^0,c
  4375   0006EA  0E00               	movlw	0
  4376   0006EC  6E25               	movwf	(___fldiv@grs+3)^0,c
  4377   0006EE  0E00               	movlw	0
  4378   0006F0  6E27               	movwf	___fldiv@aexp^0,c
  4379   0006F2  EFB3  F003         	goto	l1089
  4380   0006F6                     l2356:
  4381   0006F6  5027               	movf	___fldiv@aexp^0,w,c
  4382   0006F8  B4D8               	btfsc	status,2,c
  4383   0006FA  EF81  F003         	goto	u1431
  4384   0006FE  EF83  F003         	goto	u1430
  4385   000702                     u1431:
  4386   000702  EF9A  F003         	goto	l2364
  4387   000706                     u1430:
  4388   000706  90D8               	bcf	status,0,c
  4389   000708  361B               	rlcf	___fldiv@rem^0,f,c
  4390   00070A  361C               	rlcf	(___fldiv@rem+1)^0,f,c
  4391   00070C  361D               	rlcf	(___fldiv@rem+2)^0,f,c
  4392   00070E  361E               	rlcf	(___fldiv@rem+3)^0,f,c
  4393   000710  90D8               	bcf	status,0,c
  4394   000712  360F               	rlcf	___fldiv@b^0,f,c
  4395   000714  3610               	rlcf	(___fldiv@b+1)^0,f,c
  4396   000716  3611               	rlcf	(___fldiv@b+2)^0,f,c
  4397   000718  3612               	rlcf	(___fldiv@b+3)^0,f,c
  4398   00071A  AE25               	btfss	(___fldiv@grs+3)^0,7,c
  4399   00071C  EF92  F003         	goto	u1441
  4400   000720  EF94  F003         	goto	u1440
  4401   000724                     u1441:
  4402   000724  EF95  F003         	goto	l1092
  4403   000728                     u1440:
  4404   000728  800F               	bsf	___fldiv@b^0,0,c
  4405   00072A                     l1092:
  4406   00072A  90D8               	bcf	status,0,c
  4407   00072C  3622               	rlcf	___fldiv@grs^0,f,c
  4408   00072E  3623               	rlcf	(___fldiv@grs+1)^0,f,c
  4409   000730  3624               	rlcf	(___fldiv@grs+2)^0,f,c
  4410   000732  3625               	rlcf	(___fldiv@grs+3)^0,f,c
  4411   000734                     l2364:
  4412   000734  5013               	movf	___fldiv@a^0,w,c
  4413   000736  5C1B               	subwf	___fldiv@rem^0,w,c
  4414   000738  5014               	movf	(___fldiv@a+1)^0,w,c
  4415   00073A  581C               	subwfb	(___fldiv@rem+1)^0,w,c
  4416   00073C  5015               	movf	(___fldiv@a+2)^0,w,c
  4417   00073E  581D               	subwfb	(___fldiv@rem+2)^0,w,c
  4418   000740  5016               	movf	(___fldiv@a+3)^0,w,c
  4419   000742  581E               	subwfb	(___fldiv@rem+3)^0,w,c
  4420   000744  A0D8               	btfss	status,0,c
  4421   000746  EFA7  F003         	goto	u1451
  4422   00074A  EFA9  F003         	goto	u1450
  4423   00074E                     u1451:
  4424   00074E  EFB2  F003         	goto	l2370
  4425   000752                     u1450:
  4426   000752  8C25               	bsf	(___fldiv@grs+3)^0,6,c
  4427   000754  5013               	movf	___fldiv@a^0,w,c
  4428   000756  5E1B               	subwf	___fldiv@rem^0,f,c
  4429   000758  5014               	movf	(___fldiv@a+1)^0,w,c
  4430   00075A  5A1C               	subwfb	(___fldiv@rem+1)^0,f,c
  4431   00075C  5015               	movf	(___fldiv@a+2)^0,w,c
  4432   00075E  5A1D               	subwfb	(___fldiv@rem+2)^0,f,c
  4433   000760  5016               	movf	(___fldiv@a+3)^0,w,c
  4434   000762  5A1E               	subwfb	(___fldiv@rem+3)^0,f,c
  4435   000764                     l2370:
  4436   000764  2A27               	incf	___fldiv@aexp^0,f,c
  4437   000766                     l1089:
  4438   000766  0E19               	movlw	25
  4439   000768  6427               	cpfsgt	___fldiv@aexp^0,c
  4440   00076A  EFB9  F003         	goto	u1461
  4441   00076E  EFBB  F003         	goto	u1460
  4442   000772                     u1461:
  4443   000772  EF7B  F003         	goto	l2356
  4444   000776                     u1460:
  4445   000776  501B               	movf	___fldiv@rem^0,w,c
  4446   000778  101C               	iorwf	(___fldiv@rem+1)^0,w,c
  4447   00077A  101D               	iorwf	(___fldiv@rem+2)^0,w,c
  4448   00077C  101E               	iorwf	(___fldiv@rem+3)^0,w,c
  4449   00077E  B4D8               	btfsc	status,2,c
  4450   000780  EFC4  F003         	goto	u1471
  4451   000784  EFC6  F003         	goto	u1470
  4452   000788                     u1471:
  4453   000788  EFDE  F003         	goto	l2382
  4454   00078C                     u1470:
  4455   00078C  8022               	bsf	___fldiv@grs^0,0,c
  4456   00078E  EFDE  F003         	goto	l2382
  4457   000792                     l2376:
  4458   000792  90D8               	bcf	status,0,c
  4459   000794  360F               	rlcf	___fldiv@b^0,f,c
  4460   000796  3610               	rlcf	(___fldiv@b+1)^0,f,c
  4461   000798  3611               	rlcf	(___fldiv@b+2)^0,f,c
  4462   00079A  3612               	rlcf	(___fldiv@b+3)^0,f,c
  4463   00079C  AE25               	btfss	(___fldiv@grs+3)^0,7,c
  4464   00079E  EFD3  F003         	goto	u1481
  4465   0007A2  EFD5  F003         	goto	u1480
  4466   0007A6                     u1481:
  4467   0007A6  EFD6  F003         	goto	l1098
  4468   0007AA                     u1480:
  4469   0007AA  800F               	bsf	___fldiv@b^0,0,c
  4470   0007AC                     l1098:
  4471   0007AC  90D8               	bcf	status,0,c
  4472   0007AE  3622               	rlcf	___fldiv@grs^0,f,c
  4473   0007B0  3623               	rlcf	(___fldiv@grs+1)^0,f,c
  4474   0007B2  3624               	rlcf	(___fldiv@grs+2)^0,f,c
  4475   0007B4  3625               	rlcf	(___fldiv@grs+3)^0,f,c
  4476   0007B6  0620               	decf	___fldiv@new_exp^0,f,c
  4477   0007B8  A0D8               	btfss	status,0,c
  4478   0007BA  0621               	decf	(___fldiv@new_exp+1)^0,f,c
  4479   0007BC                     l2382:
  4480   0007BC  AE11               	btfss	(___fldiv@b+2)^0,7,c
  4481   0007BE  EFE3  F003         	goto	u1491
  4482   0007C2  EFE5  F003         	goto	u1490
  4483   0007C6                     u1491:
  4484   0007C6  EFC9  F003         	goto	l2376
  4485   0007CA                     u1490:
  4486   0007CA  0E00               	movlw	0
  4487   0007CC  6E27               	movwf	___fldiv@aexp^0,c
  4488   0007CE  AE25               	btfss	(___fldiv@grs+3)^0,7,c
  4489   0007D0  EFEC  F003         	goto	u1501
  4490   0007D4  EFEE  F003         	goto	u1500
  4491   0007D8                     u1501:
  4492   0007D8  EF12  F004         	goto	l1100
  4493   0007DC                     u1500:
  4494   0007DC  0EFF               	movlw	255
  4495   0007DE  1422               	andwf	___fldiv@grs^0,w,c
  4496   0007E0  6E17               	movwf	??___fldiv^0,c
  4497   0007E2  0EFF               	movlw	255
  4498   0007E4  1423               	andwf	(___fldiv@grs+1)^0,w,c
  4499   0007E6  6E18               	movwf	(??___fldiv+1)^0,c
  4500   0007E8  0EFF               	movlw	255
  4501   0007EA  1424               	andwf	(___fldiv@grs+2)^0,w,c
  4502   0007EC  6E19               	movwf	(??___fldiv+2)^0,c
  4503   0007EE  0E7F               	movlw	127
  4504   0007F0  1425               	andwf	(___fldiv@grs+3)^0,w,c
  4505   0007F2  6E1A               	movwf	(??___fldiv+3)^0,c
  4506   0007F4  5017               	movf	??___fldiv^0,w,c
  4507   0007F6  1018               	iorwf	(??___fldiv+1)^0,w,c
  4508   0007F8  1019               	iorwf	(??___fldiv+2)^0,w,c
  4509   0007FA  101A               	iorwf	(??___fldiv+3)^0,w,c
  4510   0007FC  B4D8               	btfsc	status,2,c
  4511   0007FE  EF03  F004         	goto	u1511
  4512   000802  EF05  F004         	goto	u1510
  4513   000806                     u1511:
  4514   000806  EF09  F004         	goto	l1101
  4515   00080A                     u1510:
  4516   00080A                     l2390:
  4517   00080A  0E01               	movlw	1
  4518   00080C  6E27               	movwf	___fldiv@aexp^0,c
  4519   00080E  EF12  F004         	goto	l1100
  4520   000812                     l1101:
  4521   000812  A00F               	btfss	___fldiv@b^0,0,c
  4522   000814  EF0E  F004         	goto	u1521
  4523   000818  EF10  F004         	goto	u1520
  4524   00081C                     u1521:
  4525   00081C  EF12  F004         	goto	l1100
  4526   000820                     u1520:
  4527   000820  EF05  F004         	goto	l2390
  4528   000824                     l1100:
  4529   000824  5027               	movf	___fldiv@aexp^0,w,c
  4530   000826  B4D8               	btfsc	status,2,c
  4531   000828  EF18  F004         	goto	u1531
  4532   00082C  EF1A  F004         	goto	u1530
  4533   000830                     u1531:
  4534   000830  EF3E  F004         	goto	l2402
  4535   000834                     u1530:
  4536   000834  0E01               	movlw	1
  4537   000836  260F               	addwf	___fldiv@b^0,f,c
  4538   000838  0E00               	movlw	0
  4539   00083A  2210               	addwfc	(___fldiv@b+1)^0,f,c
  4540   00083C  2211               	addwfc	(___fldiv@b+2)^0,f,c
  4541   00083E  2212               	addwfc	(___fldiv@b+3)^0,f,c
  4542   000840  A012               	btfss	(___fldiv@b+3)^0,0,c
  4543   000842  EF25  F004         	goto	u1541
  4544   000846  EF27  F004         	goto	u1540
  4545   00084A                     u1541:
  4546   00084A  EF3E  F004         	goto	l2402
  4547   00084E                     u1540:
  4548   00084E  C00F  F017         	movff	___fldiv@b,??___fldiv
  4549   000852  C010  F018         	movff	___fldiv@b+1,??___fldiv+1
  4550   000856  C011  F019         	movff	___fldiv@b+2,??___fldiv+2
  4551   00085A  C012  F01A         	movff	___fldiv@b+3,??___fldiv+3
  4552   00085E  341A               	rlcf	(??___fldiv+3)^0,w,c
  4553   000860  321A               	rrcf	(??___fldiv+3)^0,f,c
  4554   000862  3219               	rrcf	(??___fldiv+2)^0,f,c
  4555   000864  3218               	rrcf	(??___fldiv+1)^0,f,c
  4556   000866  3217               	rrcf	??___fldiv^0,f,c
  4557   000868  C017  F00F         	movff	??___fldiv,___fldiv@b
  4558   00086C  C018  F010         	movff	??___fldiv+1,___fldiv@b+1
  4559   000870  C019  F011         	movff	??___fldiv+2,___fldiv@b+2
  4560   000874  C01A  F012         	movff	??___fldiv+3,___fldiv@b+3
  4561   000878  4A20               	infsnz	___fldiv@new_exp^0,f,c
  4562   00087A  2A21               	incf	(___fldiv@new_exp+1)^0,f,c
  4563   00087C                     l2402:
  4564   00087C  BE21               	btfsc	(___fldiv@new_exp+1)^0,7,c
  4565   00087E  EF49  F004         	goto	u1551
  4566   000882  5021               	movf	(___fldiv@new_exp+1)^0,w,c
  4567   000884  E108               	bnz	u1550
  4568   000886  2820               	incf	___fldiv@new_exp^0,w,c
  4569   000888  A0D8               	btfss	status,0,c
  4570   00088A  EF49  F004         	goto	u1551
  4571   00088E  EF4B  F004         	goto	u1550
  4572   000892                     u1551:
  4573   000892  EF56  F004         	goto	l2406
  4574   000896                     u1550:
  4575   000896  0E00               	movlw	0
  4576   000898  6E21               	movwf	(___fldiv@new_exp+1)^0,c
  4577   00089A  6820               	setf	___fldiv@new_exp^0,c
  4578   00089C  0E00               	movlw	0
  4579   00089E  6E0F               	movwf	___fldiv@b^0,c
  4580   0008A0  0E00               	movlw	0
  4581   0008A2  6E10               	movwf	(___fldiv@b+1)^0,c
  4582   0008A4  0E00               	movlw	0
  4583   0008A6  6E11               	movwf	(___fldiv@b+2)^0,c
  4584   0008A8  0E00               	movlw	0
  4585   0008AA  6E12               	movwf	(___fldiv@b+3)^0,c
  4586   0008AC                     l2406:
  4587   0008AC  BE21               	btfsc	(___fldiv@new_exp+1)^0,7,c
  4588   0008AE  EF63  F004         	goto	u1560
  4589   0008B2  5021               	movf	(___fldiv@new_exp+1)^0,w,c
  4590   0008B4  E106               	bnz	u1561
  4591   0008B6  0420               	decf	___fldiv@new_exp^0,w,c
  4592   0008B8  B0D8               	btfsc	status,0,c
  4593   0008BA  EF61  F004         	goto	u1561
  4594   0008BE  EF63  F004         	goto	u1560
  4595   0008C2                     u1561:
  4596   0008C2  EF71  F004         	goto	l2410
  4597   0008C6                     u1560:
  4598   0008C6  0E00               	movlw	0
  4599   0008C8  6E21               	movwf	(___fldiv@new_exp+1)^0,c
  4600   0008CA  0E00               	movlw	0
  4601   0008CC  6E20               	movwf	___fldiv@new_exp^0,c
  4602   0008CE  0E00               	movlw	0
  4603   0008D0  6E0F               	movwf	___fldiv@b^0,c
  4604   0008D2  0E00               	movlw	0
  4605   0008D4  6E10               	movwf	(___fldiv@b+1)^0,c
  4606   0008D6  0E00               	movlw	0
  4607   0008D8  6E11               	movwf	(___fldiv@b+2)^0,c
  4608   0008DA  0E00               	movlw	0
  4609   0008DC  6E12               	movwf	(___fldiv@b+3)^0,c
  4610   0008DE  0E00               	movlw	0
  4611   0008E0  6E1F               	movwf	___fldiv@sign^0,c
  4612   0008E2                     l2410:
  4613   0008E2  C020  F026         	movff	___fldiv@new_exp,___fldiv@bexp
  4614   0008E6  A026               	btfss	___fldiv@bexp^0,0,c
  4615   0008E8  EF78  F004         	goto	u1571
  4616   0008EC  EF7A  F004         	goto	u1570
  4617   0008F0                     u1571:
  4618   0008F0  EF7D  F004         	goto	l2416
  4619   0008F4                     u1570:
  4620   0008F4  8E11               	bsf	(___fldiv@b+2)^0,7,c
  4621   0008F6  EF7E  F004         	goto	l2418
  4622   0008FA                     l2416:
  4623   0008FA  9E11               	bcf	(___fldiv@b+2)^0,7,c
  4624   0008FC                     l2418:
  4625   0008FC  90D8               	bcf	status,0,c
  4626   0008FE  3026               	rrcf	___fldiv@bexp^0,w,c
  4627   000900  6E12               	movwf	(___fldiv@b+3)^0,c
  4628   000902  EF34  F003         	goto	l2332
  4629   000906                     l1087:
  4630   000906  0012               	return		;funcret
  4631   000908                     __end_of___fldiv:
  4632                           	callstack 0
  4633                           
  4634 ;; *************** function ___flge *****************
  4635 ;; Defined at:
  4636 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\flge.c"
  4637 ;; Parameters:    Size  Location     Type
  4638 ;;  ff1             4    0[COMRAM] unsigned char 
  4639 ;;  ff2             4    4[COMRAM] unsigned char 
  4640 ;; Auto vars:     Size  Location     Type
  4641 ;;		None
  4642 ;; Return value:  Size  Location     Type
  4643 ;;		None               void
  4644 ;; Registers used:
  4645 ;;		wreg, status,2, status,0
  4646 ;; Tracked objects:
  4647 ;;		On entry : 0/0
  4648 ;;		On exit  : 0/0
  4649 ;;		Unchanged: 0/0
  4650 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4651 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4652 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4653 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4654 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4655 ;;Total ram usage:       12 bytes
  4656 ;; Hardware stack levels used: 1
  4657 ;; Hardware stack levels required when called: 1
  4658 ;; This function calls:
  4659 ;;		Nothing
  4660 ;; This function is called by:
  4661 ;;		_buggy_color_response
  4662 ;;		_calibrate_upperbound
  4663 ;; This function uses a non-reentrant model
  4664 ;;
  4665                           
  4666                           	psect	text22
  4667   0013CC                     __ptext22:
  4668                           	callstack 0
  4669   0013CC                     ___flge:
  4670                           	callstack 28
  4671   0013CC  0E00               	movlw	0
  4672   0013CE  1401               	andwf	___flge@ff1^0,w,c
  4673   0013D0  6E09               	movwf	??___flge^0,c
  4674   0013D2  0E00               	movlw	0
  4675   0013D4  1402               	andwf	(___flge@ff1+1)^0,w,c
  4676   0013D6  6E0A               	movwf	(??___flge+1)^0,c
  4677   0013D8  0E80               	movlw	128
  4678   0013DA  1403               	andwf	(___flge@ff1+2)^0,w,c
  4679   0013DC  6E0B               	movwf	(??___flge+2)^0,c
  4680   0013DE  0E7F               	movlw	127
  4681   0013E0  1404               	andwf	(___flge@ff1+3)^0,w,c
  4682   0013E2  6E0C               	movwf	(??___flge+3)^0,c
  4683   0013E4  5009               	movf	??___flge^0,w,c
  4684   0013E6  100A               	iorwf	(??___flge+1)^0,w,c
  4685   0013E8  100B               	iorwf	(??___flge+2)^0,w,c
  4686   0013EA  100C               	iorwf	(??___flge+3)^0,w,c
  4687   0013EC  A4D8               	btfss	status,2,c
  4688   0013EE  EFFB  F009         	goto	u1771
  4689   0013F2  EFFD  F009         	goto	u1770
  4690   0013F6                     u1771:
  4691   0013F6  EF05  F00A         	goto	l2566
  4692   0013FA                     u1770:
  4693   0013FA  0E00               	movlw	0
  4694   0013FC  6E01               	movwf	___flge@ff1^0,c
  4695   0013FE  0E00               	movlw	0
  4696   001400  6E02               	movwf	(___flge@ff1+1)^0,c
  4697   001402  0E00               	movlw	0
  4698   001404  6E03               	movwf	(___flge@ff1+2)^0,c
  4699   001406  0E00               	movlw	0
  4700   001408  6E04               	movwf	(___flge@ff1+3)^0,c
  4701   00140A                     l2566:
  4702   00140A  0E00               	movlw	0
  4703   00140C  1405               	andwf	___flge@ff2^0,w,c
  4704   00140E  6E09               	movwf	??___flge^0,c
  4705   001410  0E00               	movlw	0
  4706   001412  1406               	andwf	(___flge@ff2+1)^0,w,c
  4707   001414  6E0A               	movwf	(??___flge+1)^0,c
  4708   001416  0E80               	movlw	128
  4709   001418  1407               	andwf	(___flge@ff2+2)^0,w,c
  4710   00141A  6E0B               	movwf	(??___flge+2)^0,c
  4711   00141C  0E7F               	movlw	127
  4712   00141E  1408               	andwf	(___flge@ff2+3)^0,w,c
  4713   001420  6E0C               	movwf	(??___flge+3)^0,c
  4714   001422  5009               	movf	??___flge^0,w,c
  4715   001424  100A               	iorwf	(??___flge+1)^0,w,c
  4716   001426  100B               	iorwf	(??___flge+2)^0,w,c
  4717   001428  100C               	iorwf	(??___flge+3)^0,w,c
  4718   00142A  A4D8               	btfss	status,2,c
  4719   00142C  EF1A  F00A         	goto	u1781
  4720   001430  EF1C  F00A         	goto	u1780
  4721   001434                     u1781:
  4722   001434  EF24  F00A         	goto	l2570
  4723   001438                     u1780:
  4724   001438  0E00               	movlw	0
  4725   00143A  6E05               	movwf	___flge@ff2^0,c
  4726   00143C  0E00               	movlw	0
  4727   00143E  6E06               	movwf	(___flge@ff2+1)^0,c
  4728   001440  0E00               	movlw	0
  4729   001442  6E07               	movwf	(___flge@ff2+2)^0,c
  4730   001444  0E00               	movlw	0
  4731   001446  6E08               	movwf	(___flge@ff2+3)^0,c
  4732   001448                     l2570:
  4733   001448  AE04               	btfss	(___flge@ff1+3)^0,7,c
  4734   00144A  EF29  F00A         	goto	u1791
  4735   00144E  EF2B  F00A         	goto	u1790
  4736   001452                     u1791:
  4737   001452  EF34  F00A         	goto	l2574
  4738   001456                     u1790:
  4739   001456  6C01               	negf	___flge@ff1^0,c
  4740   001458  1E02               	comf	(___flge@ff1+1)^0,f,c
  4741   00145A  B0D8               	btfsc	status,0,c
  4742   00145C  2A02               	incf	(___flge@ff1+1)^0,f,c
  4743   00145E  1E03               	comf	(___flge@ff1+2)^0,f,c
  4744   001460  B0D8               	btfsc	status,0,c
  4745   001462  2A03               	incf	(___flge@ff1+2)^0,f,c
  4746   001464  0E80               	movlw	128
  4747   001466  5604               	subfwb	(___flge@ff1+3)^0,f,c
  4748   001468                     l2574:
  4749   001468  AE08               	btfss	(___flge@ff2+3)^0,7,c
  4750   00146A  EF39  F00A         	goto	u1801
  4751   00146E  EF3B  F00A         	goto	u1800
  4752   001472                     u1801:
  4753   001472  EF44  F00A         	goto	l770
  4754   001476                     u1800:
  4755   001476  6C05               	negf	___flge@ff2^0,c
  4756   001478  1E06               	comf	(___flge@ff2+1)^0,f,c
  4757   00147A  B0D8               	btfsc	status,0,c
  4758   00147C  2A06               	incf	(___flge@ff2+1)^0,f,c
  4759   00147E  1E07               	comf	(___flge@ff2+2)^0,f,c
  4760   001480  B0D8               	btfsc	status,0,c
  4761   001482  2A07               	incf	(___flge@ff2+2)^0,f,c
  4762   001484  0E80               	movlw	128
  4763   001486  5608               	subfwb	(___flge@ff2+3)^0,f,c
  4764   001488                     l770:
  4765   001488  0E00               	movlw	0
  4766   00148A  1A01               	xorwf	___flge@ff1^0,f,c
  4767   00148C  0E00               	movlw	0
  4768   00148E  1A02               	xorwf	(___flge@ff1+1)^0,f,c
  4769   001490  0E00               	movlw	0
  4770   001492  1A03               	xorwf	(___flge@ff1+2)^0,f,c
  4771   001494  0E80               	movlw	128
  4772   001496  1A04               	xorwf	(___flge@ff1+3)^0,f,c
  4773   001498  0E00               	movlw	0
  4774   00149A  1A05               	xorwf	___flge@ff2^0,f,c
  4775   00149C  0E00               	movlw	0
  4776   00149E  1A06               	xorwf	(___flge@ff2+1)^0,f,c
  4777   0014A0  0E00               	movlw	0
  4778   0014A2  1A07               	xorwf	(___flge@ff2+2)^0,f,c
  4779   0014A4  0E80               	movlw	128
  4780   0014A6  1A08               	xorwf	(___flge@ff2+3)^0,f,c
  4781   0014A8  5005               	movf	___flge@ff2^0,w,c
  4782   0014AA  5C01               	subwf	___flge@ff1^0,w,c
  4783   0014AC  5006               	movf	(___flge@ff2+1)^0,w,c
  4784   0014AE  5802               	subwfb	(___flge@ff1+1)^0,w,c
  4785   0014B0  5007               	movf	(___flge@ff2+2)^0,w,c
  4786   0014B2  5803               	subwfb	(___flge@ff1+2)^0,w,c
  4787   0014B4  5008               	movf	(___flge@ff2+3)^0,w,c
  4788   0014B6  5804               	subwfb	(___flge@ff1+3)^0,w,c
  4789   0014B8  B0D8               	btfsc	status,0,c
  4790   0014BA  EF61  F00A         	goto	u1811
  4791   0014BE  EF63  F00A         	goto	u1810
  4792   0014C2                     u1811:
  4793   0014C2  EF66  F00A         	goto	l2580
  4794   0014C6                     u1810:
  4795   0014C6  90D8               	bcf	status,0,c
  4796   0014C8  EF67  F00A         	goto	l775
  4797   0014CC                     l2580:
  4798   0014CC  80D8               	bsf	status,0,c
  4799   0014CE                     l775:
  4800   0014CE  0012               	return		;funcret
  4801   0014D0                     __end_of___flge:
  4802                           	callstack 0
  4803                           
  4804 ;; *************** function _READcolor *****************
  4805 ;; Defined at:
  4806 ;;		line 89 in file "color.c"
  4807 ;; Parameters:    Size  Location     Type
  4808 ;;  c               2   11[COMRAM] PTR struct colors
  4809 ;;		 -> color(20), 
  4810 ;; Auto vars:     Size  Location     Type
  4811 ;;		None
  4812 ;; Return value:  Size  Location     Type
  4813 ;;                  1    wreg      void 
  4814 ;; Registers used:
  4815 ;;		wreg, status,2, status,0, cstack
  4816 ;; Tracked objects:
  4817 ;;		On entry : 0/0
  4818 ;;		On exit  : 0/0
  4819 ;;		Unchanged: 0/0
  4820 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4821 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4822 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4823 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4824 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4825 ;;Total ram usage:        2 bytes
  4826 ;; Hardware stack levels used: 1
  4827 ;; Hardware stack levels required when called: 4
  4828 ;; This function calls:
  4829 ;;		_color_read_Blue
  4830 ;;		_color_read_Clear
  4831 ;;		_color_read_Green
  4832 ;;		_color_read_Red
  4833 ;; This function is called by:
  4834 ;;		_buggy_color_response
  4835 ;;		_calibrate_upperbound
  4836 ;; This function uses a non-reentrant model
  4837 ;;
  4838                           
  4839                           	psect	text23
  4840   001B78                     __ptext23:
  4841                           	callstack 0
  4842   001B78                     _READcolor:
  4843                           	callstack 25
  4844   001B78                     
  4845                           ;color.c: 91:     color.R = color_read_Red();
  4846   001B78  ECBB  F00C         	call	_color_read_Red	;wreg free
  4847   001B7C  C005  F044         	movff	?_color_read_Red,_color
  4848   001B80  C006  F045         	movff	?_color_read_Red+1,_color+1
  4849                           
  4850                           ;color.c: 92:     color.B = color_read_Blue();
  4851   001B84  EC33  F00D         	call	_color_read_Blue	;wreg free
  4852   001B88  C005  F046         	movff	?_color_read_Blue,_color+2
  4853   001B8C  C006  F047         	movff	?_color_read_Blue+1,_color+3
  4854                           
  4855                           ;color.c: 93:     color.G = color_read_Green();
  4856   001B90  ECE3  F00C         	call	_color_read_Green	;wreg free
  4857   001B94  C005  F048         	movff	?_color_read_Green,_color+4
  4858   001B98  C006  F049         	movff	?_color_read_Green+1,_color+5
  4859                           
  4860                           ;color.c: 94:     color.C = color_read_Clear();
  4861   001B9C  EC0B  F00D         	call	_color_read_Clear	;wreg free
  4862   001BA0  C005  F04A         	movff	?_color_read_Clear,_color+6
  4863   001BA4  C006  F04B         	movff	?_color_read_Clear+1,_color+7
  4864   001BA8  0012               	return		;funcret
  4865   001BAA                     __end_of_READcolor:
  4866                           	callstack 0
  4867                           
  4868 ;; *************** function _color_read_Red *****************
  4869 ;; Defined at:
  4870 ;;		line 29 in file "color.c"
  4871 ;; Parameters:    Size  Location     Type
  4872 ;;		None
  4873 ;; Auto vars:     Size  Location     Type
  4874 ;;  tmp             2    9[COMRAM] unsigned int 
  4875 ;; Return value:  Size  Location     Type
  4876 ;;                  2    4[COMRAM] unsigned int 
  4877 ;; Registers used:
  4878 ;;		wreg, status,2, status,0, cstack
  4879 ;; Tracked objects:
  4880 ;;		On entry : 0/0
  4881 ;;		On exit  : 0/0
  4882 ;;		Unchanged: 0/0
  4883 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4884 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4885 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4886 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4887 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4888 ;;Total ram usage:        7 bytes
  4889 ;; Hardware stack levels used: 1
  4890 ;; Hardware stack levels required when called: 3
  4891 ;; This function calls:
  4892 ;;		_I2C_2_Master_Read
  4893 ;;		_I2C_2_Master_RepStart
  4894 ;;		_I2C_2_Master_Start
  4895 ;;		_I2C_2_Master_Stop
  4896 ;;		_I2C_2_Master_Write
  4897 ;; This function is called by:
  4898 ;;		_READcolor
  4899 ;; This function uses a non-reentrant model
  4900 ;;
  4901                           
  4902                           	psect	text24
  4903   001976                     __ptext24:
  4904                           	callstack 0
  4905   001976                     _color_read_Red:
  4906                           	callstack 25
  4907   001976                     
  4908                           ;color.c: 31:  unsigned int tmp;;color.c: 32:  I2C_2_Master_Start();
  4909   001976  EC58  F00E         	call	_I2C_2_Master_Start	;wreg free
  4910                           
  4911                           ;color.c: 33:  I2C_2_Master_Write(0x52 | 0x00);
  4912   00197A  0E52               	movlw	82
  4913   00197C  EC4D  F00E         	call	_I2C_2_Master_Write
  4914                           
  4915                           ;color.c: 35:  I2C_2_Master_Write(0xA0 | 0x16);
  4916   001980  0EB6               	movlw	182
  4917   001982  EC4D  F00E         	call	_I2C_2_Master_Write
  4918                           
  4919                           ;color.c: 36:  I2C_2_Master_RepStart();
  4920   001986  EC5D  F00E         	call	_I2C_2_Master_RepStart	;wreg free
  4921                           
  4922                           ;color.c: 37:  I2C_2_Master_Write(0x52 | 0x01);
  4923   00198A  0E53               	movlw	83
  4924   00198C  EC4D  F00E         	call	_I2C_2_Master_Write
  4925                           
  4926                           ;color.c: 38:  tmp=I2C_2_Master_Read(1);
  4927   001990  0E01               	movlw	1
  4928   001992  EC81  F00D         	call	_I2C_2_Master_Read
  4929   001996  6E07               	movwf	??_color_read_Red^0,c
  4930   001998  5007               	movf	??_color_read_Red^0,w,c
  4931   00199A  6E0A               	movwf	color_read_Red@tmp^0,c
  4932   00199C  6A0B               	clrf	(color_read_Red@tmp+1)^0,c
  4933                           
  4934                           ;color.c: 39:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  4935   00199E  0E00               	movlw	0
  4936   0019A0  EC81  F00D         	call	_I2C_2_Master_Read
  4937   0019A4  6E07               	movwf	??_color_read_Red^0,c
  4938   0019A6  5007               	movf	??_color_read_Red^0,w,c
  4939   0019A8  6E09               	movwf	(??_color_read_Red+2)^0,c
  4940   0019AA  6A08               	clrf	(??_color_read_Red+1)^0,c
  4941   0019AC  500A               	movf	color_read_Red@tmp^0,w,c
  4942   0019AE  1008               	iorwf	(??_color_read_Red+1)^0,w,c
  4943   0019B0  6E0A               	movwf	color_read_Red@tmp^0,c
  4944   0019B2  500B               	movf	(color_read_Red@tmp+1)^0,w,c
  4945   0019B4  1009               	iorwf	(??_color_read_Red+2)^0,w,c
  4946   0019B6  6E0B               	movwf	(color_read_Red@tmp+1)^0,c
  4947                           
  4948                           ;color.c: 40:  I2C_2_Master_Stop();
  4949   0019B8  EC53  F00E         	call	_I2C_2_Master_Stop	;wreg free
  4950   0019BC                     
  4951                           ;color.c: 41:  return tmp;
  4952   0019BC  C00A  F005         	movff	color_read_Red@tmp,?_color_read_Red
  4953   0019C0  C00B  F006         	movff	color_read_Red@tmp+1,?_color_read_Red+1
  4954   0019C4  0012               	return		;funcret
  4955   0019C6                     __end_of_color_read_Red:
  4956                           	callstack 0
  4957                           
  4958 ;; *************** function _color_read_Green *****************
  4959 ;; Defined at:
  4960 ;;		line 59 in file "color.c"
  4961 ;; Parameters:    Size  Location     Type
  4962 ;;		None
  4963 ;; Auto vars:     Size  Location     Type
  4964 ;;  tmp             2    9[COMRAM] unsigned int 
  4965 ;; Return value:  Size  Location     Type
  4966 ;;                  2    4[COMRAM] unsigned int 
  4967 ;; Registers used:
  4968 ;;		wreg, status,2, status,0, cstack
  4969 ;; Tracked objects:
  4970 ;;		On entry : 0/0
  4971 ;;		On exit  : 0/0
  4972 ;;		Unchanged: 0/0
  4973 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4974 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4975 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4976 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4977 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4978 ;;Total ram usage:        7 bytes
  4979 ;; Hardware stack levels used: 1
  4980 ;; Hardware stack levels required when called: 3
  4981 ;; This function calls:
  4982 ;;		_I2C_2_Master_Read
  4983 ;;		_I2C_2_Master_RepStart
  4984 ;;		_I2C_2_Master_Start
  4985 ;;		_I2C_2_Master_Stop
  4986 ;;		_I2C_2_Master_Write
  4987 ;; This function is called by:
  4988 ;;		_READcolor
  4989 ;; This function uses a non-reentrant model
  4990 ;;
  4991                           
  4992                           	psect	text25
  4993   0019C6                     __ptext25:
  4994                           	callstack 0
  4995   0019C6                     _color_read_Green:
  4996                           	callstack 25
  4997   0019C6                     
  4998                           ;color.c: 61:  unsigned int tmp;;color.c: 62:  I2C_2_Master_Start();
  4999   0019C6  EC58  F00E         	call	_I2C_2_Master_Start	;wreg free
  5000                           
  5001                           ;color.c: 63:  I2C_2_Master_Write(0x52 | 0x00);
  5002   0019CA  0E52               	movlw	82
  5003   0019CC  EC4D  F00E         	call	_I2C_2_Master_Write
  5004                           
  5005                           ;color.c: 65:  I2C_2_Master_Write(0xA0 | 0x18);
  5006   0019D0  0EB8               	movlw	184
  5007   0019D2  EC4D  F00E         	call	_I2C_2_Master_Write
  5008                           
  5009                           ;color.c: 66:  I2C_2_Master_RepStart();
  5010   0019D6  EC5D  F00E         	call	_I2C_2_Master_RepStart	;wreg free
  5011                           
  5012                           ;color.c: 67:  I2C_2_Master_Write(0x52 | 0x01);
  5013   0019DA  0E53               	movlw	83
  5014   0019DC  EC4D  F00E         	call	_I2C_2_Master_Write
  5015                           
  5016                           ;color.c: 68:  tmp=I2C_2_Master_Read(1);
  5017   0019E0  0E01               	movlw	1
  5018   0019E2  EC81  F00D         	call	_I2C_2_Master_Read
  5019   0019E6  6E07               	movwf	??_color_read_Green^0,c
  5020   0019E8  5007               	movf	??_color_read_Green^0,w,c
  5021   0019EA  6E0A               	movwf	color_read_Green@tmp^0,c
  5022   0019EC  6A0B               	clrf	(color_read_Green@tmp+1)^0,c
  5023                           
  5024                           ;color.c: 69:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  5025   0019EE  0E00               	movlw	0
  5026   0019F0  EC81  F00D         	call	_I2C_2_Master_Read
  5027   0019F4  6E07               	movwf	??_color_read_Green^0,c
  5028   0019F6  5007               	movf	??_color_read_Green^0,w,c
  5029   0019F8  6E09               	movwf	(??_color_read_Green+2)^0,c
  5030   0019FA  6A08               	clrf	(??_color_read_Green+1)^0,c
  5031   0019FC  500A               	movf	color_read_Green@tmp^0,w,c
  5032   0019FE  1008               	iorwf	(??_color_read_Green+1)^0,w,c
  5033   001A00  6E0A               	movwf	color_read_Green@tmp^0,c
  5034   001A02  500B               	movf	(color_read_Green@tmp+1)^0,w,c
  5035   001A04  1009               	iorwf	(??_color_read_Green+2)^0,w,c
  5036   001A06  6E0B               	movwf	(color_read_Green@tmp+1)^0,c
  5037                           
  5038                           ;color.c: 70:  I2C_2_Master_Stop();
  5039   001A08  EC53  F00E         	call	_I2C_2_Master_Stop	;wreg free
  5040   001A0C                     
  5041                           ;color.c: 71:  return tmp;
  5042   001A0C  C00A  F005         	movff	color_read_Green@tmp,?_color_read_Green
  5043   001A10  C00B  F006         	movff	color_read_Green@tmp+1,?_color_read_Green+1
  5044   001A14  0012               	return		;funcret
  5045   001A16                     __end_of_color_read_Green:
  5046                           	callstack 0
  5047                           
  5048 ;; *************** function _color_read_Clear *****************
  5049 ;; Defined at:
  5050 ;;		line 74 in file "color.c"
  5051 ;; Parameters:    Size  Location     Type
  5052 ;;		None
  5053 ;; Auto vars:     Size  Location     Type
  5054 ;;  tmp             2    9[COMRAM] unsigned int 
  5055 ;; Return value:  Size  Location     Type
  5056 ;;                  2    4[COMRAM] unsigned int 
  5057 ;; Registers used:
  5058 ;;		wreg, status,2, status,0, cstack
  5059 ;; Tracked objects:
  5060 ;;		On entry : 0/0
  5061 ;;		On exit  : 0/0
  5062 ;;		Unchanged: 0/0
  5063 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5064 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5065 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5066 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5067 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5068 ;;Total ram usage:        7 bytes
  5069 ;; Hardware stack levels used: 1
  5070 ;; Hardware stack levels required when called: 3
  5071 ;; This function calls:
  5072 ;;		_I2C_2_Master_Read
  5073 ;;		_I2C_2_Master_RepStart
  5074 ;;		_I2C_2_Master_Start
  5075 ;;		_I2C_2_Master_Stop
  5076 ;;		_I2C_2_Master_Write
  5077 ;; This function is called by:
  5078 ;;		_READcolor
  5079 ;; This function uses a non-reentrant model
  5080 ;;
  5081                           
  5082                           	psect	text26
  5083   001A16                     __ptext26:
  5084                           	callstack 0
  5085   001A16                     _color_read_Clear:
  5086                           	callstack 25
  5087   001A16                     
  5088                           ;color.c: 76:  unsigned int tmp;;color.c: 77:  I2C_2_Master_Start();
  5089   001A16  EC58  F00E         	call	_I2C_2_Master_Start	;wreg free
  5090                           
  5091                           ;color.c: 78:  I2C_2_Master_Write(0x52 | 0x00);
  5092   001A1A  0E52               	movlw	82
  5093   001A1C  EC4D  F00E         	call	_I2C_2_Master_Write
  5094                           
  5095                           ;color.c: 80:  I2C_2_Master_Write(0xA0 | 0x14);
  5096   001A20  0EB4               	movlw	180
  5097   001A22  EC4D  F00E         	call	_I2C_2_Master_Write
  5098                           
  5099                           ;color.c: 81:  I2C_2_Master_RepStart();
  5100   001A26  EC5D  F00E         	call	_I2C_2_Master_RepStart	;wreg free
  5101                           
  5102                           ;color.c: 82:  I2C_2_Master_Write(0x52 | 0x01);
  5103   001A2A  0E53               	movlw	83
  5104   001A2C  EC4D  F00E         	call	_I2C_2_Master_Write
  5105                           
  5106                           ;color.c: 83:  tmp=I2C_2_Master_Read(1);
  5107   001A30  0E01               	movlw	1
  5108   001A32  EC81  F00D         	call	_I2C_2_Master_Read
  5109   001A36  6E07               	movwf	??_color_read_Clear^0,c
  5110   001A38  5007               	movf	??_color_read_Clear^0,w,c
  5111   001A3A  6E0A               	movwf	color_read_Clear@tmp^0,c
  5112   001A3C  6A0B               	clrf	(color_read_Clear@tmp+1)^0,c
  5113                           
  5114                           ;color.c: 84:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  5115   001A3E  0E00               	movlw	0
  5116   001A40  EC81  F00D         	call	_I2C_2_Master_Read
  5117   001A44  6E07               	movwf	??_color_read_Clear^0,c
  5118   001A46  5007               	movf	??_color_read_Clear^0,w,c
  5119   001A48  6E09               	movwf	(??_color_read_Clear+2)^0,c
  5120   001A4A  6A08               	clrf	(??_color_read_Clear+1)^0,c
  5121   001A4C  500A               	movf	color_read_Clear@tmp^0,w,c
  5122   001A4E  1008               	iorwf	(??_color_read_Clear+1)^0,w,c
  5123   001A50  6E0A               	movwf	color_read_Clear@tmp^0,c
  5124   001A52  500B               	movf	(color_read_Clear@tmp+1)^0,w,c
  5125   001A54  1009               	iorwf	(??_color_read_Clear+2)^0,w,c
  5126   001A56  6E0B               	movwf	(color_read_Clear@tmp+1)^0,c
  5127                           
  5128                           ;color.c: 85:  I2C_2_Master_Stop();
  5129   001A58  EC53  F00E         	call	_I2C_2_Master_Stop	;wreg free
  5130   001A5C                     
  5131                           ;color.c: 86:  return tmp;
  5132   001A5C  C00A  F005         	movff	color_read_Clear@tmp,?_color_read_Clear
  5133   001A60  C00B  F006         	movff	color_read_Clear@tmp+1,?_color_read_Clear+1
  5134   001A64  0012               	return		;funcret
  5135   001A66                     __end_of_color_read_Clear:
  5136                           	callstack 0
  5137                           
  5138 ;; *************** function _color_read_Blue *****************
  5139 ;; Defined at:
  5140 ;;		line 44 in file "color.c"
  5141 ;; Parameters:    Size  Location     Type
  5142 ;;		None
  5143 ;; Auto vars:     Size  Location     Type
  5144 ;;  tmp             2    9[COMRAM] unsigned int 
  5145 ;; Return value:  Size  Location     Type
  5146 ;;                  2    4[COMRAM] unsigned int 
  5147 ;; Registers used:
  5148 ;;		wreg, status,2, status,0, cstack
  5149 ;; Tracked objects:
  5150 ;;		On entry : 0/0
  5151 ;;		On exit  : 0/0
  5152 ;;		Unchanged: 0/0
  5153 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5154 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5155 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5156 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5157 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5158 ;;Total ram usage:        7 bytes
  5159 ;; Hardware stack levels used: 1
  5160 ;; Hardware stack levels required when called: 3
  5161 ;; This function calls:
  5162 ;;		_I2C_2_Master_Read
  5163 ;;		_I2C_2_Master_RepStart
  5164 ;;		_I2C_2_Master_Start
  5165 ;;		_I2C_2_Master_Stop
  5166 ;;		_I2C_2_Master_Write
  5167 ;; This function is called by:
  5168 ;;		_READcolor
  5169 ;; This function uses a non-reentrant model
  5170 ;;
  5171                           
  5172                           	psect	text27
  5173   001A66                     __ptext27:
  5174                           	callstack 0
  5175   001A66                     _color_read_Blue:
  5176                           	callstack 25
  5177   001A66                     
  5178                           ;color.c: 46:  unsigned int tmp;;color.c: 47:  I2C_2_Master_Start();
  5179   001A66  EC58  F00E         	call	_I2C_2_Master_Start	;wreg free
  5180                           
  5181                           ;color.c: 48:  I2C_2_Master_Write(0x52 | 0x00);
  5182   001A6A  0E52               	movlw	82
  5183   001A6C  EC4D  F00E         	call	_I2C_2_Master_Write
  5184                           
  5185                           ;color.c: 50:  I2C_2_Master_Write(0xA0 | 0x1A);
  5186   001A70  0EBA               	movlw	186
  5187   001A72  EC4D  F00E         	call	_I2C_2_Master_Write
  5188                           
  5189                           ;color.c: 51:  I2C_2_Master_RepStart();
  5190   001A76  EC5D  F00E         	call	_I2C_2_Master_RepStart	;wreg free
  5191                           
  5192                           ;color.c: 52:  I2C_2_Master_Write(0x52 | 0x01);
  5193   001A7A  0E53               	movlw	83
  5194   001A7C  EC4D  F00E         	call	_I2C_2_Master_Write
  5195                           
  5196                           ;color.c: 53:  tmp=I2C_2_Master_Read(1);
  5197   001A80  0E01               	movlw	1
  5198   001A82  EC81  F00D         	call	_I2C_2_Master_Read
  5199   001A86  6E07               	movwf	??_color_read_Blue^0,c
  5200   001A88  5007               	movf	??_color_read_Blue^0,w,c
  5201   001A8A  6E0A               	movwf	color_read_Blue@tmp^0,c
  5202   001A8C  6A0B               	clrf	(color_read_Blue@tmp+1)^0,c
  5203                           
  5204                           ;color.c: 54:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  5205   001A8E  0E00               	movlw	0
  5206   001A90  EC81  F00D         	call	_I2C_2_Master_Read
  5207   001A94  6E07               	movwf	??_color_read_Blue^0,c
  5208   001A96  5007               	movf	??_color_read_Blue^0,w,c
  5209   001A98  6E09               	movwf	(??_color_read_Blue+2)^0,c
  5210   001A9A  6A08               	clrf	(??_color_read_Blue+1)^0,c
  5211   001A9C  500A               	movf	color_read_Blue@tmp^0,w,c
  5212   001A9E  1008               	iorwf	(??_color_read_Blue+1)^0,w,c
  5213   001AA0  6E0A               	movwf	color_read_Blue@tmp^0,c
  5214   001AA2  500B               	movf	(color_read_Blue@tmp+1)^0,w,c
  5215   001AA4  1009               	iorwf	(??_color_read_Blue+2)^0,w,c
  5216   001AA6  6E0B               	movwf	(color_read_Blue@tmp+1)^0,c
  5217                           
  5218                           ;color.c: 55:  I2C_2_Master_Stop();
  5219   001AA8  EC53  F00E         	call	_I2C_2_Master_Stop	;wreg free
  5220   001AAC                     
  5221                           ;color.c: 56:  return tmp;
  5222   001AAC  C00A  F005         	movff	color_read_Blue@tmp,?_color_read_Blue
  5223   001AB0  C00B  F006         	movff	color_read_Blue@tmp+1,?_color_read_Blue+1
  5224   001AB4  0012               	return		;funcret
  5225   001AB6                     __end_of_color_read_Blue:
  5226                           	callstack 0
  5227                           
  5228 ;; *************** function _I2C_2_Master_Write *****************
  5229 ;; Defined at:
  5230 ;;		line 45 in file "i2c.c"
  5231 ;; Parameters:    Size  Location     Type
  5232 ;;  data_byte       1    wreg     unsigned char 
  5233 ;; Auto vars:     Size  Location     Type
  5234 ;;  data_byte       1    1[COMRAM] unsigned char 
  5235 ;; Return value:  Size  Location     Type
  5236 ;;                  1    wreg      void 
  5237 ;; Registers used:
  5238 ;;		wreg, status,2, status,0, cstack
  5239 ;; Tracked objects:
  5240 ;;		On entry : 0/0
  5241 ;;		On exit  : 0/0
  5242 ;;		Unchanged: 0/0
  5243 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5244 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5245 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5246 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5247 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5248 ;;Total ram usage:        1 bytes
  5249 ;; Hardware stack levels used: 1
  5250 ;; Hardware stack levels required when called: 2
  5251 ;; This function calls:
  5252 ;;		_I2C_2_Master_Idle
  5253 ;; This function is called by:
  5254 ;;		_color_writetoaddr
  5255 ;;		_color_read_Red
  5256 ;;		_color_read_Blue
  5257 ;;		_color_read_Green
  5258 ;;		_color_read_Clear
  5259 ;;		_interrupts_clear
  5260 ;; This function uses a non-reentrant model
  5261 ;;
  5262                           
  5263                           	psect	text28
  5264   001C9A                     __ptext28:
  5265                           	callstack 0
  5266   001C9A                     _I2C_2_Master_Write:
  5267                           	callstack 26
  5268                           
  5269                           ;incstack = 0
  5270                           ;I2C_2_Master_Write@data_byte stored from wreg
  5271   001C9A  6E02               	movwf	I2C_2_Master_Write@data_byte^0,c
  5272   001C9C                     
  5273                           ;i2c.c: 45: void I2C_2_Master_Write(unsigned char data_byte);i2c.c: 46: {;i2c.c: 47:   I
      +                          2C_2_Master_Idle();
  5274   001C9C  ECEA  F00D         	call	_I2C_2_Master_Idle	;wreg free
  5275   001CA0                     
  5276                           ;i2c.c: 48:   SSP2BUF = data_byte;
  5277   001CA0  C002  FED5         	movff	I2C_2_Master_Write@data_byte,3797	;volatile
  5278   001CA4  0012               	return		;funcret
  5279   001CA6                     __end_of_I2C_2_Master_Write:
  5280                           	callstack 0
  5281                           
  5282 ;; *************** function _I2C_2_Master_Stop *****************
  5283 ;; Defined at:
  5284 ;;		line 39 in file "i2c.c"
  5285 ;; Parameters:    Size  Location     Type
  5286 ;;		None
  5287 ;; Auto vars:     Size  Location     Type
  5288 ;;		None
  5289 ;; Return value:  Size  Location     Type
  5290 ;;                  1    wreg      void 
  5291 ;; Registers used:
  5292 ;;		wreg, status,2, status,0, cstack
  5293 ;; Tracked objects:
  5294 ;;		On entry : 0/0
  5295 ;;		On exit  : 0/0
  5296 ;;		Unchanged: 0/0
  5297 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5298 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5299 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5300 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5301 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5302 ;;Total ram usage:        0 bytes
  5303 ;; Hardware stack levels used: 1
  5304 ;; Hardware stack levels required when called: 2
  5305 ;; This function calls:
  5306 ;;		_I2C_2_Master_Idle
  5307 ;; This function is called by:
  5308 ;;		_color_writetoaddr
  5309 ;;		_color_read_Red
  5310 ;;		_color_read_Blue
  5311 ;;		_color_read_Green
  5312 ;;		_color_read_Clear
  5313 ;;		_interrupts_clear
  5314 ;; This function uses a non-reentrant model
  5315 ;;
  5316                           
  5317                           	psect	text29
  5318   001CA6                     __ptext29:
  5319                           	callstack 0
  5320   001CA6                     _I2C_2_Master_Stop:
  5321                           	callstack 26
  5322   001CA6                     
  5323                           ;i2c.c: 41:   I2C_2_Master_Idle();
  5324   001CA6  ECEA  F00D         	call	_I2C_2_Master_Idle	;wreg free
  5325   001CAA                     
  5326                           ;i2c.c: 42:   SSP2CON2bits.PEN = 1;
  5327   001CAA  010E               	movlb	14	; () banked
  5328   001CAC  85DA               	bsf	218,2,b	;volatile
  5329   001CAE                     
  5330                           ; BSR set to: 14
  5331   001CAE  0012               	return		;funcret
  5332   001CB0                     __end_of_I2C_2_Master_Stop:
  5333                           	callstack 0
  5334                           
  5335 ;; *************** function _I2C_2_Master_Start *****************
  5336 ;; Defined at:
  5337 ;;		line 27 in file "i2c.c"
  5338 ;; Parameters:    Size  Location     Type
  5339 ;;		None
  5340 ;; Auto vars:     Size  Location     Type
  5341 ;;		None
  5342 ;; Return value:  Size  Location     Type
  5343 ;;                  1    wreg      void 
  5344 ;; Registers used:
  5345 ;;		wreg, status,2, status,0, cstack
  5346 ;; Tracked objects:
  5347 ;;		On entry : 0/0
  5348 ;;		On exit  : 0/0
  5349 ;;		Unchanged: 0/0
  5350 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5351 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5352 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5353 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5354 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5355 ;;Total ram usage:        0 bytes
  5356 ;; Hardware stack levels used: 1
  5357 ;; Hardware stack levels required when called: 2
  5358 ;; This function calls:
  5359 ;;		_I2C_2_Master_Idle
  5360 ;; This function is called by:
  5361 ;;		_color_writetoaddr
  5362 ;;		_color_read_Red
  5363 ;;		_color_read_Blue
  5364 ;;		_color_read_Green
  5365 ;;		_color_read_Clear
  5366 ;;		_interrupts_clear
  5367 ;; This function uses a non-reentrant model
  5368 ;;
  5369                           
  5370                           	psect	text30
  5371   001CB0                     __ptext30:
  5372                           	callstack 0
  5373   001CB0                     _I2C_2_Master_Start:
  5374                           	callstack 26
  5375   001CB0                     
  5376                           ;i2c.c: 29:   I2C_2_Master_Idle();
  5377   001CB0  ECEA  F00D         	call	_I2C_2_Master_Idle	;wreg free
  5378   001CB4                     
  5379                           ;i2c.c: 30:   SSP2CON2bits.SEN = 1;
  5380   001CB4  010E               	movlb	14	; () banked
  5381   001CB6  81DA               	bsf	218,0,b	;volatile
  5382   001CB8                     
  5383                           ; BSR set to: 14
  5384   001CB8  0012               	return		;funcret
  5385   001CBA                     __end_of_I2C_2_Master_Start:
  5386                           	callstack 0
  5387                           
  5388 ;; *************** function _I2C_2_Master_RepStart *****************
  5389 ;; Defined at:
  5390 ;;		line 33 in file "i2c.c"
  5391 ;; Parameters:    Size  Location     Type
  5392 ;;		None
  5393 ;; Auto vars:     Size  Location     Type
  5394 ;;		None
  5395 ;; Return value:  Size  Location     Type
  5396 ;;                  1    wreg      void 
  5397 ;; Registers used:
  5398 ;;		wreg, status,2, status,0, cstack
  5399 ;; Tracked objects:
  5400 ;;		On entry : 0/0
  5401 ;;		On exit  : 0/0
  5402 ;;		Unchanged: 0/0
  5403 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5404 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5405 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5406 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5407 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5408 ;;Total ram usage:        0 bytes
  5409 ;; Hardware stack levels used: 1
  5410 ;; Hardware stack levels required when called: 2
  5411 ;; This function calls:
  5412 ;;		_I2C_2_Master_Idle
  5413 ;; This function is called by:
  5414 ;;		_color_read_Red
  5415 ;;		_color_read_Blue
  5416 ;;		_color_read_Green
  5417 ;;		_color_read_Clear
  5418 ;; This function uses a non-reentrant model
  5419 ;;
  5420                           
  5421                           	psect	text31
  5422   001CBA                     __ptext31:
  5423                           	callstack 0
  5424   001CBA                     _I2C_2_Master_RepStart:
  5425                           	callstack 25
  5426   001CBA                     
  5427                           ;i2c.c: 35:   I2C_2_Master_Idle();
  5428   001CBA  ECEA  F00D         	call	_I2C_2_Master_Idle	;wreg free
  5429   001CBE                     
  5430                           ;i2c.c: 36:   SSP2CON2bits.RSEN = 1;
  5431   001CBE  010E               	movlb	14	; () banked
  5432   001CC0  83DA               	bsf	218,1,b	;volatile
  5433   001CC2                     
  5434                           ; BSR set to: 14
  5435   001CC2  0012               	return		;funcret
  5436   001CC4                     __end_of_I2C_2_Master_RepStart:
  5437                           	callstack 0
  5438                           
  5439 ;; *************** function _I2C_2_Master_Read *****************
  5440 ;; Defined at:
  5441 ;;		line 51 in file "i2c.c"
  5442 ;; Parameters:    Size  Location     Type
  5443 ;;  ack             1    wreg     unsigned char 
  5444 ;; Auto vars:     Size  Location     Type
  5445 ;;  ack             1    2[COMRAM] unsigned char 
  5446 ;;  tmp             1    3[COMRAM] unsigned char 
  5447 ;; Return value:  Size  Location     Type
  5448 ;;                  1    wreg      unsigned char 
  5449 ;; Registers used:
  5450 ;;		wreg, status,2, status,0, cstack
  5451 ;; Tracked objects:
  5452 ;;		On entry : 0/0
  5453 ;;		On exit  : 0/0
  5454 ;;		Unchanged: 0/0
  5455 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5456 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5457 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5458 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5459 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5460 ;;Total ram usage:        3 bytes
  5461 ;; Hardware stack levels used: 1
  5462 ;; Hardware stack levels required when called: 2
  5463 ;; This function calls:
  5464 ;;		_I2C_2_Master_Idle
  5465 ;; This function is called by:
  5466 ;;		_color_read_Red
  5467 ;;		_color_read_Blue
  5468 ;;		_color_read_Green
  5469 ;;		_color_read_Clear
  5470 ;; This function uses a non-reentrant model
  5471 ;;
  5472                           
  5473                           	psect	text32
  5474   001B02                     __ptext32:
  5475                           	callstack 0
  5476   001B02                     _I2C_2_Master_Read:
  5477                           	callstack 25
  5478                           
  5479                           ; BSR set to: 14
  5480                           ;incstack = 0
  5481                           ;I2C_2_Master_Read@ack stored from wreg
  5482   001B02  6E03               	movwf	I2C_2_Master_Read@ack^0,c
  5483   001B04                     
  5484                           ;i2c.c: 51: unsigned char I2C_2_Master_Read(unsigned char ack);i2c.c: 52: {;i2c.c: 53:  
      +                           unsigned char tmp;;i2c.c: 54:   I2C_2_Master_Idle();
  5485   001B04  ECEA  F00D         	call	_I2C_2_Master_Idle	;wreg free
  5486   001B08                     
  5487                           ;i2c.c: 55:   SSP2CON2bits.RCEN = 1;
  5488   001B08  010E               	movlb	14	; () banked
  5489   001B0A  87DA               	bsf	218,3,b	;volatile
  5490                           
  5491                           ;i2c.c: 56:   I2C_2_Master_Idle();
  5492   001B0C  ECEA  F00D         	call	_I2C_2_Master_Idle	;wreg free
  5493   001B10                     
  5494                           ;i2c.c: 57:   tmp = SSP2BUF;
  5495   001B10  CED5 F004          	movff	3797,I2C_2_Master_Read@tmp	;volatile
  5496                           
  5497                           ;i2c.c: 58:   I2C_2_Master_Idle();
  5498   001B14  ECEA  F00D         	call	_I2C_2_Master_Idle	;wreg free
  5499   001B18                     
  5500                           ;i2c.c: 59:   SSP2CON2bits.ACKDT = !ack;
  5501   001B18  5003               	movf	I2C_2_Master_Read@ack^0,w,c
  5502   001B1A  B4D8               	btfsc	status,2,c
  5503   001B1C  EF92  F00D         	goto	u1181
  5504   001B20  EF96  F00D         	goto	u1180
  5505   001B24                     u1181:
  5506   001B24  6A02               	clrf	??_I2C_2_Master_Read^0,c
  5507   001B26  2A02               	incf	??_I2C_2_Master_Read^0,f,c
  5508   001B28  EF97  F00D         	goto	u1198
  5509   001B2C                     u1180:
  5510   001B2C  6A02               	clrf	??_I2C_2_Master_Read^0,c
  5511   001B2E                     u1198:
  5512   001B2E  3A02               	swapf	??_I2C_2_Master_Read^0,f,c
  5513   001B30  4602               	rlncf	??_I2C_2_Master_Read^0,f,c
  5514   001B32  010E               	movlb	14	; () banked
  5515   001B34  51DA               	movf	218,w,b	;volatile
  5516   001B36  1802               	xorwf	??_I2C_2_Master_Read^0,w,c
  5517   001B38  0BDF               	andlw	-33
  5518   001B3A  1802               	xorwf	??_I2C_2_Master_Read^0,w,c
  5519   001B3C  6FDA               	movwf	218,b	;volatile
  5520   001B3E                     
  5521                           ; BSR set to: 14
  5522                           ;i2c.c: 60:   SSP2CON2bits.ACKEN = 1;
  5523   001B3E  89DA               	bsf	218,4,b	;volatile
  5524   001B40                     
  5525                           ; BSR set to: 14
  5526                           ;i2c.c: 61:   return tmp;
  5527   001B40  5004               	movf	I2C_2_Master_Read@tmp^0,w,c
  5528   001B42                     
  5529                           ; BSR set to: 14
  5530   001B42  0012               	return		;funcret
  5531   001B44                     __end_of_I2C_2_Master_Read:
  5532                           	callstack 0
  5533                           
  5534 ;; *************** function _I2C_2_Master_Idle *****************
  5535 ;; Defined at:
  5536 ;;		line 22 in file "i2c.c"
  5537 ;; Parameters:    Size  Location     Type
  5538 ;;		None
  5539 ;; Auto vars:     Size  Location     Type
  5540 ;;		None
  5541 ;; Return value:  Size  Location     Type
  5542 ;;                  1    wreg      void 
  5543 ;; Registers used:
  5544 ;;		wreg, status,2, status,0
  5545 ;; Tracked objects:
  5546 ;;		On entry : 0/0
  5547 ;;		On exit  : 0/0
  5548 ;;		Unchanged: 0/0
  5549 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5550 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5551 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5552 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5553 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5554 ;;Total ram usage:        1 bytes
  5555 ;; Hardware stack levels used: 1
  5556 ;; Hardware stack levels required when called: 1
  5557 ;; This function calls:
  5558 ;;		Nothing
  5559 ;; This function is called by:
  5560 ;;		_I2C_2_Master_Start
  5561 ;;		_I2C_2_Master_RepStart
  5562 ;;		_I2C_2_Master_Stop
  5563 ;;		_I2C_2_Master_Write
  5564 ;;		_I2C_2_Master_Read
  5565 ;; This function uses a non-reentrant model
  5566 ;;
  5567                           
  5568                           	psect	text33
  5569   001BD4                     __ptext33:
  5570                           	callstack 0
  5571   001BD4                     _I2C_2_Master_Idle:
  5572                           	callstack 26
  5573   001BD4                     l30:
  5574   001BD4  010E               	movlb	14	; () banked
  5575   001BD6  B5D8               	btfsc	216,2,b	;volatile
  5576   001BD8  EFF0  F00D         	goto	u1141
  5577   001BDC  EFF2  F00D         	goto	u1140
  5578   001BE0                     u1141:
  5579   001BE0  EFEA  F00D         	goto	l30
  5580   001BE4                     u1140:
  5581   001BE4                     
  5582                           ; BSR set to: 14
  5583   001BE4  CEDA F001          	movff	3802,??_I2C_2_Master_Idle	;volatile
  5584   001BE8  0E1F               	movlw	31
  5585   001BEA  1601               	andwf	??_I2C_2_Master_Idle^0,f,c
  5586   001BEC  A4D8               	btfss	status,2,c
  5587   001BEE  EFFB  F00D         	goto	u1151
  5588   001BF2  EFFD  F00D         	goto	u1150
  5589   001BF6                     u1151:
  5590   001BF6  EFEA  F00D         	goto	l30
  5591   001BFA                     u1150:
  5592   001BFA                     
  5593                           ; BSR set to: 14
  5594   001BFA  0012               	return		;funcret
  5595   001BFC                     __end_of_I2C_2_Master_Idle:
  5596                           	callstack 0
  5597                           
  5598 ;; *************** function _buggyLEDs_init *****************
  5599 ;; Defined at:
  5600 ;;		line 113 in file "dc_motor.c"
  5601 ;; Parameters:    Size  Location     Type
  5602 ;;		None
  5603 ;; Auto vars:     Size  Location     Type
  5604 ;;		None
  5605 ;; Return value:  Size  Location     Type
  5606 ;;                  1    wreg      void 
  5607 ;; Registers used:
  5608 ;;		None
  5609 ;; Tracked objects:
  5610 ;;		On entry : 0/0
  5611 ;;		On exit  : 0/0
  5612 ;;		Unchanged: 0/0
  5613 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5614 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5615 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5616 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5617 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5618 ;;Total ram usage:        0 bytes
  5619 ;; Hardware stack levels used: 1
  5620 ;; Hardware stack levels required when called: 1
  5621 ;; This function calls:
  5622 ;;		Nothing
  5623 ;; This function is called by:
  5624 ;;		_main
  5625 ;; This function uses a non-reentrant model
  5626 ;;
  5627                           
  5628                           	psect	text34
  5629   001C84                     __ptext34:
  5630                           	callstack 0
  5631   001C84                     _buggyLEDs_init:
  5632                           	callstack 29
  5633   001C84                     
  5634                           ;dc_motor.c: 114:     LATHbits.LATH1 = 0;
  5635   001C84  9280               	bcf	128,1,c	;volatile
  5636                           
  5637                           ;dc_motor.c: 115:     LATDbits.LATD3 = 0;
  5638   001C86  967C               	bcf	124,3,c	;volatile
  5639                           
  5640                           ;dc_motor.c: 116:     LATDbits.LATD4 = 0;
  5641   001C88  987C               	bcf	124,4,c	;volatile
  5642                           
  5643                           ;dc_motor.c: 117:     LATFbits.LATF0 = 0;
  5644   001C8A  907E               	bcf	126,0,c	;volatile
  5645                           
  5646                           ;dc_motor.c: 118:     LATHbits.LATH0 = 0;
  5647   001C8C  9080               	bcf	128,0,c	;volatile
  5648                           
  5649                           ;dc_motor.c: 120:     TRISHbits.TRISH1 = 0;
  5650   001C8E  9288               	bcf	136,1,c	;volatile
  5651                           
  5652                           ;dc_motor.c: 121:     TRISDbits.TRISD3 = 0;
  5653   001C90  9684               	bcf	132,3,c	;volatile
  5654                           
  5655                           ;dc_motor.c: 122:     TRISDbits.TRISD4 = 0;
  5656   001C92  9884               	bcf	132,4,c	;volatile
  5657                           
  5658                           ;dc_motor.c: 123:     TRISFbits.TRISF0 = 0;
  5659   001C94  9086               	bcf	134,0,c	;volatile
  5660                           
  5661                           ;dc_motor.c: 124:     TRISHbits.TRISH0 = 0;
  5662   001C96  9088               	bcf	136,0,c	;volatile
  5663   001C98  0012               	return		;funcret
  5664   001C9A                     __end_of_buggyLEDs_init:
  5665                           	callstack 0
  5666                           
  5667 ;; *************** function _HighISR *****************
  5668 ;; Defined at:
  5669 ;;		line 42 in file "interrupts.c"
  5670 ;; Parameters:    Size  Location     Type
  5671 ;;		None
  5672 ;; Auto vars:     Size  Location     Type
  5673 ;;		None
  5674 ;; Return value:  Size  Location     Type
  5675 ;;                  1    wreg      void 
  5676 ;; Registers used:
  5677 ;;		wreg, status,2
  5678 ;; Tracked objects:
  5679 ;;		On entry : 0/0
  5680 ;;		On exit  : 0/0
  5681 ;;		Unchanged: 0/0
  5682 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5683 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5684 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5685 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5686 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5687 ;;Total ram usage:        0 bytes
  5688 ;; Hardware stack levels used: 1
  5689 ;; This function calls:
  5690 ;;		Nothing
  5691 ;; This function is called by:
  5692 ;;		Interrupt level 2
  5693 ;; This function uses a non-reentrant model
  5694 ;;
  5695                           
  5696                           	psect	intcode
  5697   000008                     __pintcode:
  5698                           	callstack 0
  5699   000008                     _HighISR:
  5700                           	callstack 24
  5701                           
  5702                           ;incstack = 0
  5703   000008  8258               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  5704   00000A                     
  5705                           ;interrupts.c: 43:    if (PIR0bits.INT0IF) {
  5706   00000A  010E               	movlb	14	; () banked
  5707   00000C  A133               	btfss	51,0,b	;volatile
  5708   00000E  EF0B  F000         	goto	i2u110_41
  5709   000012  EF0D  F000         	goto	i2u110_40
  5710   000016                     i2u110_41:
  5711   000016  EF10  F000         	goto	i2l502
  5712   00001A                     i2u110_40:
  5713   00001A                     
  5714                           ; BSR set to: 14
  5715                           ;interrupts.c: 44:        read_color_flag = 1;
  5716   00001A  0E01               	movlw	1
  5717   00001C  6E42               	movwf	_read_color_flag^0,c
  5718   00001E                     
  5719                           ; BSR set to: 14
  5720                           ;interrupts.c: 45:        PIR0bits.INT0IF = 0;
  5721   00001E  9133               	bcf	51,0,b	;volatile
  5722   000020                     i2l502:
  5723                           
  5724                           ; BSR set to: 14
  5725   000020  9258               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  5726   000022  0011               	retfie		f
  5727   000024                     __end_of_HighISR:
  5728                           	callstack 0
  5729   000000                     
  5730                           	psect	rparam
  5731   000000                     
  5732                           	psect	temp
  5733   000058                     btemp:
  5734                           	callstack 0
  5735   000058                     	ds	1
  5736   000000                     int$flags	set	btemp
  5737   000000                     wtemp8	set	btemp+1
  5738   000000                     ttemp5	set	btemp+1
  5739   000000                     ttemp6	set	btemp+4
  5740   000000                     ttemp7	set	btemp+8
  5741                           
  5742                           	psect	idloc
  5743                           
  5744                           ;Config register IDLOC0 @ 0x200000
  5745                           ;	unspecified, using default values
  5746   200000                     	org	2097152
  5747   200000  0FFF               	dw	4095
  5748                           
  5749                           ;Config register IDLOC1 @ 0x200002
  5750                           ;	unspecified, using default values
  5751   200002                     	org	2097154
  5752   200002  0FFF               	dw	4095
  5753                           
  5754                           ;Config register IDLOC2 @ 0x200004
  5755                           ;	unspecified, using default values
  5756   200004                     	org	2097156
  5757   200004  0FFF               	dw	4095
  5758                           
  5759                           ;Config register IDLOC3 @ 0x200006
  5760                           ;	unspecified, using default values
  5761   200006                     	org	2097158
  5762   200006  0FFF               	dw	4095
  5763                           
  5764                           ;Config register IDLOC4 @ 0x200008
  5765                           ;	unspecified, using default values
  5766   200008                     	org	2097160
  5767   200008  0FFF               	dw	4095
  5768                           
  5769                           ;Config register IDLOC5 @ 0x20000A
  5770                           ;	unspecified, using default values
  5771   20000A                     	org	2097162
  5772   20000A  0FFF               	dw	4095
  5773                           
  5774                           ;Config register IDLOC6 @ 0x20000C
  5775                           ;	unspecified, using default values
  5776   20000C                     	org	2097164
  5777   20000C  0FFF               	dw	4095
  5778                           
  5779                           ;Config register IDLOC7 @ 0x20000E
  5780                           ;	unspecified, using default values
  5781   20000E                     	org	2097166
  5782   20000E  0FFF               	dw	4095
  5783                           
  5784                           	psect	config
  5785                           
  5786                           ;Config register CONFIG1L @ 0x300000
  5787                           ;	External Oscillator mode Selection bits
  5788                           ;	FEXTOSC = HS, HS (crystal oscillator) above 8 MHz; PFM set to high power
  5789                           ;	Power-up default value for COSC bits
  5790                           ;	RSTOSC = EXTOSC_4PLL, EXTOSC with 4x PLL, with EXTOSC operating per FEXTOSC bits
  5791   300000                     	org	3145728
  5792   300000  AA                 	db	170
  5793                           
  5794                           ;Config register CONFIG1H @ 0x300001
  5795                           ;	unspecified, using default values
  5796                           ;	Clock Out Enable bit
  5797                           ;	CLKOUTEN = 0x1, unprogrammed default
  5798                           ;	Clock Switch Enable bit
  5799                           ;	CSWEN = 0x1, unprogrammed default
  5800                           ;	Fail-Safe Clock Monitor Enable bit
  5801                           ;	FCMEN = 0x1, unprogrammed default
  5802   300001                     	org	3145729
  5803   300001  FF                 	db	255
  5804                           
  5805                           ;Config register CONFIG2L @ 0x300002
  5806                           ;	unspecified, using default values
  5807                           ;	Master Clear Enable bit
  5808                           ;	MCLRE = 0x1, unprogrammed default
  5809                           ;	Power-up Timer Enable bit
  5810                           ;	PWRTE = 0x1, unprogrammed default
  5811                           ;	Low-power BOR enable bit
  5812                           ;	LPBOREN = 0x1, unprogrammed default
  5813                           ;	Brown-out Reset Enable bits
  5814                           ;	BOREN = 0x3, unprogrammed default
  5815   300002                     	org	3145730
  5816   300002  FF                 	db	255
  5817                           
  5818                           ;Config register CONFIG2H @ 0x300003
  5819                           ;	unspecified, using default values
  5820                           ;	Brown Out Reset Voltage selection bits
  5821                           ;	BORV = 0x3, unprogrammed default
  5822                           ;	ZCD Disable bit
  5823                           ;	ZCD = 0x1, unprogrammed default
  5824                           ;	PPSLOCK bit One-Way Set Enable bit
  5825                           ;	PPS1WAY = 0x1, unprogrammed default
  5826                           ;	Stack Full/Underflow Reset Enable bit
  5827                           ;	STVREN = 0x1, unprogrammed default
  5828                           ;	Debugger Enable bit
  5829                           ;	DEBUG = 0x1, unprogrammed default
  5830                           ;	Extended Instruction Set Enable bit
  5831                           ;	XINST = 0x1, unprogrammed default
  5832   300003                     	org	3145731
  5833   300003  FF                 	db	255
  5834                           
  5835                           ;Config register CONFIG3L @ 0x300004
  5836                           ;	WDT Period Select bits
  5837                           ;	WDTCPS = WDTCPS_31, Divider ratio 1:65536; software control of WDTPS
  5838                           ;	WDT operating mode
  5839                           ;	WDTE = OFF, WDT Disabled
  5840   300004                     	org	3145732
  5841   300004  9F                 	db	159
  5842                           
  5843                           ;Config register CONFIG3H @ 0x300005
  5844                           ;	unspecified, using default values
  5845                           ;	WDT Window Select bits
  5846                           ;	WDTCWS = 0x7, unprogrammed default
  5847                           ;	WDT input clock selector
  5848                           ;	WDTCCS = 0x7, unprogrammed default
  5849   300005                     	org	3145733
  5850   300005  FF                 	db	255
  5851                           
  5852                           ;Config register CONFIG4L @ 0x300006
  5853                           ;	unspecified, using default values
  5854                           ;	Write Protection Block 0
  5855                           ;	WRT0 = 0x1, unprogrammed default
  5856                           ;	Write Protection Block 1
  5857                           ;	WRT1 = 0x1, unprogrammed default
  5858                           ;	Write Protection Block 2
  5859                           ;	WRT2 = 0x1, unprogrammed default
  5860                           ;	Write Protection Block 3
  5861                           ;	WRT3 = 0x1, unprogrammed default
  5862                           ;	Write Protection Block 3
  5863                           ;	WRT4 = 0x1, unprogrammed default
  5864                           ;	Write Protection Block 3
  5865                           ;	WRT5 = 0x1, unprogrammed default
  5866                           ;	Write Protection Block 3
  5867                           ;	WRT6 = 0x1, unprogrammed default
  5868                           ;	Write Protection Block 3
  5869                           ;	WRT7 = 0x1, unprogrammed default
  5870   300006                     	org	3145734
  5871   300006  FF                 	db	255
  5872                           
  5873                           ;Config register CONFIG4H @ 0x300007
  5874                           ;	unspecified, using default values
  5875                           ;	Configuration Register Write Protection bit
  5876                           ;	WRTC = 0x1, unprogrammed default
  5877                           ;	Boot Block Write Protection bit
  5878                           ;	WRTB = 0x1, unprogrammed default
  5879                           ;	Data EEPROM Write Protection bit
  5880                           ;	WRTD = 0x1, unprogrammed default
  5881                           ;	Scanner Enable bit
  5882                           ;	SCANE = 0x1, unprogrammed default
  5883                           ;	Low Voltage Programming Enable bit
  5884                           ;	LVP = 0x1, unprogrammed default
  5885   300007                     	org	3145735
  5886   300007  FF                 	db	255
  5887                           
  5888                           ;Config register CONFIG5L @ 0x300008
  5889                           ;	unspecified, using default values
  5890                           ;	UserNVM Program Memory Code Protection bit
  5891                           ;	CP = 0x1, unprogrammed default
  5892                           ;	DataNVM Memory Code Protection bit
  5893                           ;	CPD = 0x1, unprogrammed default
  5894   300008                     	org	3145736
  5895   300008  FF                 	db	255
  5896                           
  5897                           ;Config register CONFIG5H @ 0x300009
  5898                           ;	unspecified, using default values
  5899   300009                     	org	3145737
  5900   300009  FF                 	db	255
  5901                           
  5902                           ;Config register CONFIG6L @ 0x30000A
  5903                           ;	unspecified, using default values
  5904                           ;	Table Read Protection Block 0
  5905                           ;	EBTR0 = 0x1, unprogrammed default
  5906                           ;	Table Read Protection Block 1
  5907                           ;	EBTR1 = 0x1, unprogrammed default
  5908                           ;	Table Read Protection Block 2
  5909                           ;	EBTR2 = 0x1, unprogrammed default
  5910                           ;	Table Read Protection Block 3
  5911                           ;	EBTR3 = 0x1, unprogrammed default
  5912                           ;	Table Read Protection Block 4
  5913                           ;	EBTR4 = 0x1, unprogrammed default
  5914                           ;	Table Read Protection Block 5
  5915                           ;	EBTR5 = 0x1, unprogrammed default
  5916                           ;	Table Read Protection Block 6
  5917                           ;	EBTR6 = 0x1, unprogrammed default
  5918                           ;	Table Read Protection Block 7
  5919                           ;	EBTR7 = 0x1, unprogrammed default
  5920   30000A                     	org	3145738
  5921   30000A  FF                 	db	255
  5922                           
  5923                           ;Config register CONFIG6H @ 0x30000B
  5924                           ;	unspecified, using default values
  5925                           ;	Boot Block Table Read Protection bit
  5926                           ;	EBTRB = 0x1, unprogrammed default
  5927   30000B                     	org	3145739
  5928   30000B  FF                 	db	255
  5929                           tosu	equ	0xFFF
  5930                           tosh	equ	0xFFE
  5931                           tosl	equ	0xFFD
  5932                           stkptr	equ	0xFFC
  5933                           pclatu	equ	0xFFB
  5934                           pclath	equ	0xFFA
  5935                           pcl	equ	0xFF9
  5936                           tblptru	equ	0xFF8
  5937                           tblptrh	equ	0xFF7
  5938                           tblptrl	equ	0xFF6
  5939                           tablat	equ	0xFF5
  5940                           prodh	equ	0xFF4
  5941                           prodl	equ	0xFF3
  5942                           indf0	equ	0xFEF
  5943                           postinc0	equ	0xFEE
  5944                           postdec0	equ	0xFED
  5945                           preinc0	equ	0xFEC
  5946                           plusw0	equ	0xFEB
  5947                           fsr0h	equ	0xFEA
  5948                           fsr0l	equ	0xFE9
  5949                           wreg	equ	0xFE8
  5950                           indf1	equ	0xFE7
  5951                           postinc1	equ	0xFE6
  5952                           postdec1	equ	0xFE5
  5953                           preinc1	equ	0xFE4
  5954                           plusw1	equ	0xFE3
  5955                           fsr1h	equ	0xFE2
  5956                           fsr1l	equ	0xFE1
  5957                           bsr	equ	0xFE0
  5958                           indf2	equ	0xFDF
  5959                           postinc2	equ	0xFDE
  5960                           postdec2	equ	0xFDD
  5961                           preinc2	equ	0xFDC
  5962                           plusw2	equ	0xFDB
  5963                           fsr2h	equ	0xFDA
  5964                           fsr2l	equ	0xFD9
  5965                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         128
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     57      87
    BANK0           160      0      98
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          234      0       0

Pointer List with Targets:

    buggy_color_response@c	PTR struct colors size(2) Largest target is 20
		 -> color(COMRAM[20]), 

    calibrate_upperbound@c	PTR struct colors size(2) Largest target is 20
		 -> color(COMRAM[20]), 

    motor_init@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> motorR(BANK0[9]), 

    motor_init@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> motorL(BANK0[9]), 

    colourcards_normaliseRGBC@c	PTR struct colors size(2) Largest target is 20
		 -> color(COMRAM[20]), 

    READcolor@c	PTR struct colors size(2) Largest target is 20
		 -> color(COMRAM[20]), 

    instructions@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> motorR(BANK0[9]), 

    instructions@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> motorL(BANK0[9]), 

    space@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhllhll[1]), CCPR2H(BITBIGSFRhhhlll[1]), 

    space@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhllhll[1]), CCPR1H(BITBIGSFRhhhlll[1]), 

    space@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhllhll[1]), CCPR2H(BITBIGSFRhhhlll[1]), 

    space@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhllhll[1]), CCPR1H(BITBIGSFRhhhlll[1]), 

    space@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> motorR(BANK0[9]), 

    space@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> motorL(BANK0[9]), 

    right_45@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhllhll[1]), CCPR2H(BITBIGSFRhhhlll[1]), 

    right_45@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhllhll[1]), CCPR1H(BITBIGSFRhhhlll[1]), 

    right_45@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> motorR(BANK0[9]), 

    right_45@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhllhll[1]), CCPR2H(BITBIGSFRhhhlll[1]), 

    right_45@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhllhll[1]), CCPR1H(BITBIGSFRhhhlll[1]), 

    right_45@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> motorL(BANK0[9]), 

    left_45@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhllhll[1]), CCPR2H(BITBIGSFRhhhlll[1]), 

    left_45@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhllhll[1]), CCPR1H(BITBIGSFRhhhlll[1]), 

    left_45@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhllhll[1]), CCPR2H(BITBIGSFRhhhlll[1]), 

    left_45@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhllhll[1]), CCPR1H(BITBIGSFRhhhlll[1]), 

    left_45@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> motorR(BANK0[9]), 

    left_45@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> motorL(BANK0[9]), 

    stop@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhllhll[1]), CCPR2H(BITBIGSFRhhhlll[1]), 

    stop@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhllhll[1]), CCPR1H(BITBIGSFRhhhlll[1]), 

    stop@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> motorR(BANK0[9]), 

    stop@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhllhll[1]), CCPR2H(BITBIGSFRhhhlll[1]), 

    stop@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhllhll[1]), CCPR1H(BITBIGSFRhhhlll[1]), 

    stop@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> motorL(BANK0[9]), 

    reverse@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhllhll[1]), CCPR2H(BITBIGSFRhhhlll[1]), 

    reverse@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhllhll[1]), CCPR1H(BITBIGSFRhhhlll[1]), 

    reverse@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhllhll[1]), CCPR2H(BITBIGSFRhhhlll[1]), 

    reverse@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhllhll[1]), CCPR1H(BITBIGSFRhhhlll[1]), 

    reverse@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> motorR(BANK0[9]), 

    reverse@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> motorL(BANK0[9]), 

    forward@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhllhll[1]), CCPR2H(BITBIGSFRhhhlll[1]), 

    forward@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhllhll[1]), CCPR1H(BITBIGSFRhhhlll[1]), 

    forward@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhllhll[1]), CCPR2H(BITBIGSFRhhhlll[1]), 

    forward@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhllhll[1]), CCPR1H(BITBIGSFRhhhlll[1]), 

    forward@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> motorR(BANK0[9]), 

    forward@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> motorL(BANK0[9]), 

    setMotorPWM@m.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhllhll[1]), CCPR2H(BITBIGSFRhhhlll[1]), 

    setMotorPWM@m.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhllhll[1]), CCPR1H(BITBIGSFRhhhlll[1]), 

    setMotorPWM@m	PTR struct DC_motor size(2) Largest target is 11
		 -> motorR(BANK0[9]), motorL(BANK0[9]), 

    buggy_color_response@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> motorR(BANK0[9]), 

    buggy_color_response@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> motorL(BANK0[9]), 

    motorR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhllhll[1]), CCPR2H(BITBIGSFRhhhlll[1]), 

    motorR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhllhll[1]), CCPR1H(BITBIGSFRhhhlll[1]), 

    S236DC_motor$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhllhll[1]), CCPR2H(BITBIGSFRhhhlll[1]), 

    motorL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhllhll[1]), CCPR2H(BITBIGSFRhhhlll[1]), 

    S236DC_motor$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhllhll[1]), CCPR1H(BITBIGSFRhhhlll[1]), 

    motorL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhllhll[1]), CCPR1H(BITBIGSFRhhhlll[1]), 


Critical Paths under _main in COMRAM

    _main->_buggy_color_response
    _color_click_init->_color_writetoaddr
    _color_writetoaddr->_I2C_2_Master_Write
    _calibrate_upperbound->_colourcards_normaliseRGBC
    _buggy_color_response->_colourcards_normaliseRGBC
    _instructions->_left_45
    _instructions->_right_45
    _space->_stop
    _right_45->_stop
    _reverse->_stop
    _left_45->_stop
    _forward->_stop
    _stop->_setMotorPWM
    _setMotorPWM->___lwdiv
    ___lwdiv->___wmul
    _colourcards_normaliseRGBC->___fldiv
    ___fldiv->___xxtofl
    _READcolor->_color_read_Blue
    _READcolor->_color_read_Clear
    _READcolor->_color_read_Green
    _READcolor->_color_read_Red
    _color_read_Red->_I2C_2_Master_Read
    _color_read_Green->_I2C_2_Master_Read
    _color_read_Clear->_I2C_2_Master_Read
    _color_read_Blue->_I2C_2_Master_Read
    _I2C_2_Master_Write->_I2C_2_Master_Idle
    _I2C_2_Master_Stop->_I2C_2_Master_Idle
    _I2C_2_Master_Start->_I2C_2_Master_Idle
    _I2C_2_Master_RepStart->_I2C_2_Master_Idle
    _I2C_2_Master_Read->_I2C_2_Master_Idle

Critical Paths under _HighISR in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _HighISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _HighISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _HighISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _HighISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _HighISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _HighISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _HighISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _HighISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _HighISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _HighISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _HighISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _HighISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _HighISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _HighISR in BANK13

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   75288
                     _buggyLEDs_init
               _buggy_color_response
               _calibrate_upperbound
                   _color_click_init
                    _initDCmotorsPWM
                         _initUSART4
                         _motor_init
 ---------------------------------------------------------------------------------
 (1) _motor_init                                           4     0      4     152
                                              0 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (1) _initUSART4                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initDCmotorsPWM                                      2     0      2      98
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _color_click_init                                     1     1      0     750
                                              4 COMRAM     1     1      0
                  _I2C_2_Master_Init
                  _color_writetoaddr
 ---------------------------------------------------------------------------------
 (2) _color_writetoaddr                                    2     1      1     750
                                              2 COMRAM     2     1      1
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Init                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _calibrate_upperbound                                 3     1      2    7431
                                             49 COMRAM     3     1      2
                          _READcolor
                             ___flge
          _colourcards_normaliseRGBC
 ---------------------------------------------------------------------------------
 (1) _buggy_color_response                                 8     2      6   66857
                                             49 COMRAM     8     2      6
                          _READcolor
                             ___flge
          _colourcards_normaliseRGBC
                            _forward
                       _instructions
                               _stop
 ---------------------------------------------------------------------------------
 (2) _instructions                                         8     2      6   44559
                                             35 COMRAM     8     2      6
                            _left_45
                            _reverse
                           _right_45
                              _space
                               _stop
 ---------------------------------------------------------------------------------
 (3) _space                                                6     2      4    8706
                                             25 COMRAM     6     2      4
                        _setMotorPWM
                               _stop
 ---------------------------------------------------------------------------------
 (3) _right_45                                            10     4      6    9468
                                             25 COMRAM    10     4      6
                        _setMotorPWM
                               _stop
 ---------------------------------------------------------------------------------
 (3) _reverse                                              5     1      4    8814
                                             25 COMRAM     5     1      4
                        _setMotorPWM
                               _stop
 ---------------------------------------------------------------------------------
 (3) _left_45                                             10     4      6    9284
                                             25 COMRAM    10     4      6
                        _setMotorPWM
                               _stop
 ---------------------------------------------------------------------------------
 (2) _forward                                              5     1      4    8662
                                             25 COMRAM     5     1      4
                        _setMotorPWM
                               _stop
 ---------------------------------------------------------------------------------
 (2) _stop                                                 6     2      4    5657
                                             19 COMRAM     6     2      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (3) _setMotorPWM                                          6     4      2    2589
                                             13 COMRAM     6     4      2
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     355
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              7     3      4     358
                                              6 COMRAM     7     3      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) _colourcards_normaliseRGBC                           10     8      2    2921
                                             39 COMRAM    10     8      2
                            ___fldiv
                           ___xxtofl
 ---------------------------------------------------------------------------------
 (3) ___xxtofl                                            14    10      4     778
                                              0 COMRAM    14    10      4
 ---------------------------------------------------------------------------------
 (3) ___fldiv                                             25    17      8    1703
                                             14 COMRAM    25    17      8
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (2) ___flge                                              12     4      8    3678
                                              0 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (2) _READcolor                                            2     0      2     756
                                             11 COMRAM     2     0      2
                    _color_read_Blue
                   _color_read_Clear
                   _color_read_Green
                     _color_read_Red
 ---------------------------------------------------------------------------------
 (3) _color_read_Red                                       7     5      2     113
                                              4 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (3) _color_read_Green                                     7     5      2     113
                                              4 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (3) _color_read_Clear                                     7     5      2     113
                                              4 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (3) _color_read_Blue                                      7     5      2     113
                                              4 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Write                                   1     1      0      22
                                              1 COMRAM     1     1      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Stop                                    0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Start                                   0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (4) _I2C_2_Master_RepStart                                0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (4) _I2C_2_Master_Read                                    3     3      0      45
                                              1 COMRAM     3     3      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (4) _I2C_2_Master_Idle                                    1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _buggyLEDs_init                                       0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _HighISR                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _buggyLEDs_init
   _buggy_color_response
     _READcolor
       _color_read_Blue
         _I2C_2_Master_Read
           _I2C_2_Master_Idle
         _I2C_2_Master_RepStart
           _I2C_2_Master_Idle
         _I2C_2_Master_Start
           _I2C_2_Master_Idle
         _I2C_2_Master_Stop
           _I2C_2_Master_Idle
         _I2C_2_Master_Write
           _I2C_2_Master_Idle
       _color_read_Clear
         _I2C_2_Master_Read
         _I2C_2_Master_RepStart
         _I2C_2_Master_Start
         _I2C_2_Master_Stop
         _I2C_2_Master_Write
       _color_read_Green
         _I2C_2_Master_Read
         _I2C_2_Master_RepStart
         _I2C_2_Master_Start
         _I2C_2_Master_Stop
         _I2C_2_Master_Write
       _color_read_Red
         _I2C_2_Master_Read
         _I2C_2_Master_RepStart
         _I2C_2_Master_Start
         _I2C_2_Master_Stop
         _I2C_2_Master_Write
     ___flge
     _colourcards_normaliseRGBC
       ___fldiv
         ___xxtofl (ARG)
       ___xxtofl
     _forward
       _setMotorPWM
         ___lwdiv
           ___wmul (ARG)
         ___wmul
       _stop
         _setMotorPWM
     _instructions
       _left_45
         _setMotorPWM
         _stop
       _reverse
         _setMotorPWM
         _stop
       _right_45
         _setMotorPWM
         _stop
       _space
         _setMotorPWM
         _stop
       _stop
     _stop
   _calibrate_upperbound
     _READcolor
     ___flge
     _colourcards_normaliseRGBC
   _color_click_init
     _I2C_2_Master_Init
     _color_writetoaddr
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
   _initDCmotorsPWM
   _initUSART4
   _motor_init

 _HighISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             DE9      0       0      63        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK13           EA      0       0      30        0.0%
BANK13              EA      0       0      31        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0      62       5       61.3%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     39      57       1       92.6%
BITBIGSFRhllhhl     52      0       0      40        0.0%
BITBIGSFRhllhll     37      0       0      42        0.0%
BITBIGSFRhhhhl      32      0       0      33        0.0%
BITBIGSFRlllhll     2A      0       0      54        0.0%
BITBIGSFRlllll      26      0       0      61        0.0%
BITBIGSFRllhh       20      0       0      45        0.0%
BITBIGSFRhhhlll     17      0       0      37        0.0%
BITBIGSFRlllhhh     11      0       0      48        0.0%
BITBIGSFRlllhhh     11      0       0      49        0.0%
BITBIGSFRhhhlhh      E      0       0      34        0.0%
BITBIGSFRhhhhh       D      0       0      32        0.0%
BITBIGSFRlllhhh      C      0       0      47        0.0%
BITBIGSFRllhl        C      0       0      46        0.0%
BITBIGSFRlllhll      9      0       0      58        0.0%
BITBIGSFRhlllll      8      0       0      43        0.0%
BITBIGSFRllllh       6      0       0      60        0.0%
BITBIGSFRlllhlh      6      0       0      53        0.0%
BITBIGSFRlllhlh      5      0       0      52        0.0%
BITBIGSFRhhlh        5      0       0      38        0.0%
BITBIGSFRlllhll      5      0       0      56        0.0%
BITBIGSFRlllhll      3      0       0      55        0.0%
BITBIGSFRlllhll      3      0       0      57        0.0%
BITBIGSFRlllhhl      3      0       0      51        0.0%
BITBIGSFRhllhlh      2      0       0      41        0.0%
BITBIGSFRhhhllh      2      0       0      36        0.0%
BITBIGSFRhllhhh      1      0       0      39        0.0%
BITBIGSFRhhhlhl      1      0       0      35        0.0%
BITBIGSFRlllhhh      1      0       0      50        0.0%
BITBIGSFRlllhll      1      0       0      59        0.0%
BITBIGSFRlh          1      0       0      44        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      B9      62        0.0%
DATA                 0      0      B9       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.40 build 20220703182018 
Symbol Table                                                                                   Sun Mar 12 14:43:07 2023

                   _color_read_Red 1976                       ___fldiv@aexp 0027  
                     ___fldiv@bexp 0026                       ___fldiv@sign 001F  
                  _color_read_Blue 1A66                                 l30 1BD4  
                               l33 1BFA                                 l42 1CAE  
                               l27 1BD2                                 l36 1CB8  
                               l45 1CA4                                 l39 1CC2  
                               l48 1B42                                 l93 1B76  
                               l96 1C82                                 l99 19C4  
              ___wmul@multiplicand 0003                   _color_read_Clear 1A16  
                 _color_read_Green 19C6                                l102 1AB4  
                              l111 1BA8                                l105 1A14  
                              l108 1A64                                l124 056C  
                              l301 0F0A                                l127 12A2  
                              l136 13CA                                l304 1B00  
                              l314 1748                                l322 168A  
                              l307 1C98                                l315 174A  
                              l323 168C                                l350 1178  
                              l175 1C62                                l328 17FA  
                              l505 1C20                                l339 104A  
                              l358 15CE                                l294 188A  
                              l368 0BEA                                l770 1488  
                              l775 14CE                                l996 196C  
                              wreg 000FE8                               l1003 1974  
                             l1100 0824                               l1101 0812  
                             l2100 1B10                               l2102 1B18  
                             l2110 174C                               l2104 1B3E  
                             l1160 0C42                               l2040 190A  
                             l2032 1BFC                               l2120 1776  
                             l2112 176C                               l2200 0F8A  
                             l2106 1B40                               l2050 1940  
                             l2042 191C                               l2034 1C18  
                             l2130 17BA                               l2122 178E  
                             l2114 176E                               l2210 0FCE  
                             l2202 0F96                               l1163 0D9E  
                             l2060 1BD4                               l2140 1976  
                             l1092 072A                               l2300 05BA  
                             l2052 1956                               l2044 1924  
                             l2132 17C8                               l2124 179A  
                             l2220 1028                               l2212 0FE6  
                             l2204 0FA2                               l2062 1BE4  
                             l2142 19BC                               l2310 05E0  
                             l2302 05BC                               l1174 0D36  
                             l2054 195E                               l2046 192C  
                             l2038 1902                               l2070 0E24  
                             l2134 17E0                               l2126 17A6  
                             l2214 0FFC                               l2206 0FAE  
                             l2222 102C                               l2230 107A  
                             l1087 0906                               l1167 0CDA  
                             l2080 1CB0                               l2160 1A5C  
                             l2152 19C6                               l2400 0878  
                             l2320 0620                               l2312 05EE  
                             l2304 05C4                               l2056 1960  
                             l2048 193A                               l2072 0E28  
                             l2064 0DA0                               l2136 17EC  
                             l2128 17AE                               l2216 1010  
                             l2208 0FB6                               l2240 10CE  
                             l2232 1092                               l2224 104C  
                             l1089 0766                               l2082 1CB4  
                             l2090 1CAA                               l2146 1A66  
                             l2154 1A0C                               l2410 08E2  
                             l2402 087C                               l1098 07AC  
                             l2330 0660                               l2322 0622  
                             l2314 05F0                               l2306 05D4  
                             l2058 1966                               l2074 0E6A  
                             l2066 0DBC                               l2138 17F8  
                             l2218 1026                               l2170 1604  
                             l2250 112A                               l2242 10DA  
                             l2234 109E                               l2226 106C  
                             l2084 1CBA                               l2092 1C9C  
                             l2148 1AAC                               l2412 08E6  
                             l2404 0896                               l2340 0690  
                             l2332 0668                               l2316 0600  
                             l2324 062A                               l2308 05DA  
                             l2076 0E86                               l2068 0E10  
                             l2172 1622                               l2180 165A  
                             l2164 15D0                               l2252 113E  
                             l2244 10E2                               l2236 10B6  
                             l2228 106E                               l2260 14D0  
                             l2500 0972                               l2086 1CBE  
                             l2094 1CA0                               l2158 1A16  
                             l2414 08F4                               l2406 08AC  
                             l2350 06CE                               l2342 0690  
                             l2334 066C                               l2326 063A  
                             l2318 0610                               l2430 0C0C  
                             l2078 0ECA                               l2190 0F40  
                             l2182 1672                               l2174 163A  
                             l2166 15E4                               l2254 1154  
                             l2246 10FA                               l2238 10C2  
                             l2270 153A                               l2262 14E4  
                             l2510 0A2A                               l2502 09A2  
                             l2096 1B04                               l2088 1CA6  
                             l2416 08FA                               l2408 08C6  
                             l2360 071A                               l2352 06DE  
                             l2328 0650                               l2440 0C84  
                             l2432 0C52                               l2192 0F42  
                             l2184 0F0C                               l2176 1646  
                             l2168 15F4                               l2256 1156  
                             l2248 1112                               l2280 158A  
                             l2272 1546                               l2264 14E6  
                             l2520 0AB2                               l2512 0A3E  
                             l2504 09B6                               l2600 006A  
                             l2098 1B08                               l2418 08FC  
                             l2370 0764                               l2362 0728  
                             l2354 06EE                               l2346 06A4  
                             l2338 0680                               l2290 057A  
                             l2450 0D0C                               l2442 0C90  
                             l2434 0C68                               l2426 0BEE  
                             l2194 0F4E                               l2186 0F20  
                             l2178 1652                               l2258 115A  
                             l2282 15A0                               l2274 1552  
                             l2266 14F6                               l2530 0B32  
                             l2514 0A52                               l2522 0AC6  
                             l2506 09E6                               l2610 00E4  
                             l2602 0082                               l2380 07AA  
                             l2372 0776                               l2364 0734  
                             l2356 06F6                               l2348 06BE  
                             l2292 0588                               l2460 0D4A  
                             l2452 0D18                               l2444 0CC2  
                             l2428 0BFE                               l2196 0F66  
                             l2188 0F30                               l2284 15B4  
                             l2268 1522                               l2276 155A  
                             l2540 0BBA                               l2532 0B4E  
                             l2524 0ADA                               l2516 0A6A  
                             l2508 09FA                               l2620 01C8  
                             l2612 0116                               l2604 008E  
                             l2700 1C5E                               l2390 080A  
                             l2374 078C                               l2382 07BC  
                             l2366 0752                               l2358 0706  
                             l2294 058A                               l2462 0D6E  
                             l2454 0D26                               l2446 0CC4  
                             l2438 0C7C                               l2550 16E0  
                             l2542 168E                               l2198 0F72  
                             l2286 15CC                               l2278 1572  
                             l2526 0AEE                               l2534 0B62  
                             l2518 0A96                               l2630 0296  
                             l2622 01E4                               l2614 0148  
                             l2606 009A                               l2702 1C60  
                             l2384 07CA                               l2376 0792  
                             l2368 0754                               l2296 059A  
                             l2288 056E                               l2464 0D7E  
                             l2456 0D44                               l2448 0CD0  
                             l2560 1730                               l2552 16F8  
                             l2544 16A2                               l2536 0B76  
                             l2528 0B06                               l2640 037A  
                             l2632 02C8                               l2624 0216  
                             l2616 0164                               l2608 00B2  
                             l2480 1BBE                               l2472 1BAA  
                             l2720 185A                               l2712 17FC  
                             l2800 18BE                               l2570 1448  
                             l2562 13CC                               l2394 0834  
                             l2386 07CE                               l2378 079C  
                             l2298 05AA                               l2466 0D8C  
                             l2458 0D46                               l2490 119A  
                             l2554 1704                               l2546 16B2  
                             l2538 0BA6                               l2650 045E  
                             l2642 03AC                               l2634 02FA  
                             l2626 0248                               l2618 0196  
                             l2482 1BC0                               l2474 1BB4  
                             l2730 187C                               l2722 1864  
                             l2714 180C                               l2810 18CA  
                             l2802 18C0                               l2580 14CC  
                             l2572 1456                               l2564 13FA  
                             l2396 0840                               l2388 07DC  
                             l2468 0D8E                               l2556 1710  
                             l2548 16C2                               l2492 0908  
                             l2660 052C                               l2652 047A  
                             l2644 03C8                               l2636 0316  
                             l2628 027A                               l2476 1BBA  
                             l2484 1C66                               l2732 187E  
                             l2724 1866                               l2716 1832  
                             l2740 1ACC                               l2820 18D6  
                             l2812 18CC                               l2804 18C2  
                             l2486 1B78                               l2574 1468  
                             l2566 140A                               l2398 084E  
                             l2558 1718                               l2494 091C  
                             l2654 04AC                               l2646 03FA  
                             l2638 0348                               l2670 12EE  
                             l2478 1BBC                               l2590 1B62  
                             l2734 1888                               l2726 1870  
                             l2718 1836                               l2742 1AE8  
                             l2814 18CE                               l2806 18C4  
                             l2576 1476                               l2568 1438  
                             l2488 117A                               l2496 0934  
                             l2656 04DE                               l2648 042C  
                             l2664 0554                               l2680 1378  
                             l2672 1320                               l2592 1B6C  
                             l2584 1B44                               l2728 1872  
                             l2744 1AF0                               l2736 1AB6  
                             l2816 18D0                               l2808 18C6  
                             l2746 1C84                               l2578 14C6  
                             l2498 0960                               l2666 0568  
                             l2658 0510                               l2594 0028  
                             l2674 1352                               l2682 137A  
                             l2586 1B48                               l2690 1C44  
                             l2738 1AC4                               l2826 18DA  
                             l2818 18D2                               l2596 0040  
                             l2684 1396                               l2676 1354  
                             l2668 12A4                               l2588 1B52  
                             l2692 1C4E                               l2828 18DE  
                             l2598 0056                               l2686 13B8  
                             l2678 136C                               l2694 1C50  
                             l2790 18B0                               l2688 13C6  
                             l2696 1C52                               l2792 18B4  
                             l2784 188C                               l2698 1C5C  
                             l2794 18B8                               l2786 1898  
                             l2796 18BA                               l2788 18AC  
                             l2798 18BC                               u1110 191C  
                             u1111 1918                               u1120 193A  
                             u1200 17C8                               u2000 04DE  
                             u1121 1936                               u1201 17C4  
                             u2001 04DA                               u1130 1956  
                             u1210 1672                               u2010 0510  
                             u1131 1952                               u1211 166E  
                             u2011 050C                               u1140 1BE4  
                             u1220 168A                               u1300 10FA  
                             u2020 12EE                               u1141 1BE0  
                             u1221 1686                               u1301 10F6  
                             u2021 12EA                               u1150 1BFA  
                             u1230 0F66                               u1310 1112  
                             u2030 1320                               u1151 1BF6  
                             u1231 0F62                               u1311 110E  
                             u2031 131C                               u1400 0610  
                             u1160 0DBC                               u1240 0F8A  
                             u1320 1178                               u2040 1352  
                             u1401 060C                               u1161 0DB8  
                             u1241 0F86                               u1321 1174  
                             u2041 134E                               u1410 0650  
                             u1170 0E86                               u1250 0FCE  
                             u1330 1572                               u2050 1396  
                             u1411 064C                               u1171 0E82  
                             u1251 0FCA                               u1331 156E  
                             u2051 1392                               u1180 1B2C  
                             u1500 07DC                               u1420 0690  
                             u1260 0FE6                               u1340 158A  
                             u2060 13A8                               u1181 1B24  
                             u1501 07D8                               u1421 068C  
                             u1261 0FE2                               u1341 1586  
                             u2061 13A0                               u1510 080A  
                             u1430 0706                               u1350 0588  
                             u1270 104A                               u1511 0806  
                             u1431 0702                               u1351 0584  
                             u1271 1046                               u2207 0A88  
                             u1520 0820                               u1440 0728  
                             u1360 059A                               u1600 0C68  
                             u1280 1092                               u2080 13C6  
                     _BAUD4CONbits 000EE9                               u1521 081C  
                             u1441 0724                               u1361 0596  
                             u1601 0C64                               u1281 108E  
                             u2217 0AF8                               u2081 13C2  
                             u1530 0834                               u1450 0752  
                             u1370 05AA                               u1610 0CBE  
                             u1290 10B6                               u1531 0830  
                             u1451 074E                               u1371 05A6  
                             u1611 0CBA                               u2307 0FB0  
                             u1291 10B2                               u2227 0B24  
                             u2147 1B58                               u1540 084E  
                             u1460 0776                               u1380 05EE  
                             u1620 0D08                               u1700 09FA  
                             u1541 084A                               u1461 0772  
                             u1381 05EA                               u1621 0D04  
                             u2317 0FF0                               u2237 1554  
                             u1701 09F6                               u2157 0074  
                             u1198 1B2E                               u1550 0896  
                             u1470 078C                               u1390 0600  
                             u1630 0D26                               u1710 0A3E  
                             u2078 13AA                               u1551 0892  
                             u1471 0788                               u1391 05FC  
                             u1631 0D22                               u2327 101A  
                             u2247 1594                               u1711 0A3A  
                             u2167 00A4                               u1800 1476  
                             u1560 08C6                               u1480 07AA  
                             u1640 0D36                               u1720 0ADA  
                             u1801 1472                               u1561 08C2  
                             u1481 07A6                               u1641 0D32  
                             u2337 1712                               u2257 15BE  
                             u1721 0AD6                               u2177 0926  
                             u1810 14C6                               u1570 08F4  
                             u1490 07CA                               u1650 0D44  
                             u1730 0B76                               _T2PR 000FBC  
                             u1811 14C2                               u1571 08F0  
                             u1491 07C6                               u1651 0D40  
                             u2347 17A8                               u2267 10DC  
                             u1731 0B72                               u2187 0952  
                             u1660 0D7E                               u1580 0BFE  
                             u1740 0BBA                               u1900 027A  
                             u1820 0056                               u1661 0D7A  
                             u1581 0BFA                               u2277 111C  
                             u1741 0BB6                               u2197 0A5C  
                             u1901 0276                               u1821 0052  
                             u1670 0D8C                               u1590 0C0C  
                             u1750 1730                               u1910 02C8  
                             u1830 00E4                               u1671 0D88  
                             u1591 0C08                               u1751 172C  
                             u2287 1148                               u1911 02C4  
                             u1831 00E0                               u1760 1748  
                             u1680 0972                               u1920 02FA  
                             u1840 0116                               u1761 1744  
                             u2297 1654                               u1681 096E  
                             u1921 02F6                               u1841 0112  
                             u1770 13FA                               u1690 09B6  
                             u1930 0348                               u1850 0148  
                             u1771 13F6                               u1691 09B2  
                             u1931 0344                               u1851 0144  
                             u1780 1438                               u1940 037A  
                             u1860 0196                               u1781 1434  
                             u1941 0376                               u1861 0192  
                             u1790 1456                               u1950 03AC  
                             u1870 01C8                               u1791 1452  
                             u1951 03A8                               u1871 01C4  
                             u1960 03FA                               u1880 0216  
                             u1961 03F6                               u1881 0212  
                             u1970 042C                               u1890 0248  
                             u1971 0428                               u1891 0244  
                             u1980 045E                               u1981 045A  
                             u1990 04AC                               u1991 04A8  
                             _main 188C                               fsr2h 000FDA  
                             indf2 000FDF                               fsr2l 000FD9  
                             btemp 0058                               _stop 174C  
                             prodh 000FF4                               prodl 000FF3  
                             start 0024                    ___fldiv@new_exp 0020  
           __end_of_color_read_Red 19C6                    __end_of_HighISR 0024  
                     ___param_bank 000000                   _color_lowerbound 003C  
                            ?_main 0001                    __end_of___fldiv 0908  
                            ?_stop 0014                    __end_of___lwdiv 1976  
                            i2l502 0020                       left_45@count 001E  
       __end_of_I2C_2_Master_Start 1CBA         __end_of_I2C_2_Master_Write 1CA6  
                  __end_of_left_45 104C                              _color 0044  
                  __end_of_forward 174C                              _space 14D0  
                  __end_of_reverse 168E                              ttemp5 0059  
                            ttemp6 005C                              ttemp7 0060  
                            stop@i 0018                              status 000FD8  
                            wtemp8 0059            __end_of_color_read_Blue 1AB6  
            _I2C_2_Master_RepStart 1CBA              calibrate_upperbound@c 0032  
                  ?_color_read_Red 0005                    __initialization 1C22  
                     __end_of_main 1902                       __end_of_stop 17FC  
                 _color_upperbound 003A                             ??_main 003A  
                           ??_stop 0018                      __activetblptr 000000  
                     ?_setMotorPWM 000E                             _CCPR1H 000FAA  
                           _CCPR2H 000FA6                             _CCPR3H 000F25  
                           _CCPR4H 000F21                             ?_space 001A  
                __end_of_READcolor 1BAA                             _RC0PPS 000E62  
                           _RC4REG 000EE3                             _RE2PPS 000E74  
                           _RC7PPS 000E69                             _RD5PPS 000E6F  
                           _RE4PPS 000E76                             _RD6PPS 000E70  
                           i2l2030 001E                             i2l2026 000A  
                           i2l2028 001A                             _RG6PPS 000E88  
                        ??_HighISR 0001           __end_of_color_click_init 1B78  
                           _RX4PPS 000E15                             _TX4REG 000EE4  
                 __end_of___xxtofl 0DA0                       _CCPTMRS0bits 000FAD  
                           ___flge 13CC                             ___wmul 1BFC  
                        ??___fldiv 0017                          ??___lwdiv 000B  
                 ??_buggyLEDs_init 0001                             clear_0 1C28  
                           clear_1 1C34                             _motorL 00B9  
                           _motorR 00B0                             isa$std 000001  
__end_of_colourcards_normaliseRGBC 12A4                          ??_left_45 0020  
                 __end_of_right_45 117A                          ??_forward 001E  
                        ??_reverse 001E                             stop@mL 0014  
                           stop@mR 0016                  ??_initDCmotorsPWM 0003  
     __end_of_buggy_color_response 056E                         ___flge@ff1 0001  
                       ___flge@ff2 0005                       ___xxtofl@arg 000B  
                     ___xxtofl@exp 000A                       ___xxtofl@val 0001  
                       __accesstop 0060            __end_of__initialization 1C3A  
         __end_of_color_read_Clear 1A66           __end_of_color_read_Green 1A16  
           ?_I2C_2_Master_RepStart 0001                      ___rparam_used 000001  
                 ?_color_read_Blue 0005                     __pcstackCOMRAM 0001  
                    __end_of_space 15D0                            ??_space 001E  
                       __pbssBANK0 0060                      ?_instructions 0024  
                _color_writetoaddr 1C64                       _T2CLKCONbits 000FBF  
                          ?___flge 0001                 ?_color_writetoaddr 0003  
                          ?___wmul 0001                    _read_color_flag 0042  
              ??_color_writetoaddr 0004                          ?___xxtofl 0001  
                          _SP4BRGH 000EE6                            _SP4BRGL 000EE5  
                          _SSP2ADD 000ED6                            _SSP2BUF 000ED5  
           color_writetoaddr@value 0003                   ??_color_read_Red 0007  
                          _HighISR 0008                     ??_instructions 002A  
        __end_of_color_writetoaddr 1C84                 _I2C_2_Master_Start 1CB0  
                       _initUSART4 1C44                 _I2C_2_Master_Write 1C9A  
                        ?_right_45 001A                            __Hparam 0000  
                          __Lparam 0000                  color_read_Red@tmp 000A  
                          ___fldiv 056E                ?_I2C_2_Master_Start 0001  
                          ___lwdiv 1902                ?_I2C_2_Master_Write 0001  
             _buggy_color_response 0028                            __pcinit 1C22  
                          __ramtop 0E00                            __ptext0 188C  
                          __ptext1 1AB6                            __ptext2 1C44  
                          __ptext3 17FC                            __ptext4 1B44  
                          __ptext5 1C64                            __ptext6 1BAA  
                          __ptext7 12A4                            __ptext8 0028  
                          __ptext9 0908                            _left_45 0F0C  
                        _T2CONbits 000FBD                            _forward 168E  
                       ??___xxtofl 0005                          _T2HLTbits 000FBE  
                          _reverse 15D0                      right_45@count 001E  
                    _RxBufWriteCnt 0041               ??_I2C_2_Master_Start 0002  
             ??_I2C_2_Master_Write 0002               end_of_initialization 1C3A  
                ?_color_click_init 0001                          _READcolor 1B78  
                       ??_right_45 0020                 ??_color_click_init 0005  
                          space@mL 001A                            space@mR 001C  
                          postdec2 000FDD                            postinc0 000FEE  
                          postinc2 000FDE                         _motor_init 1AB6  
            ?_buggy_color_response 0032                    _initDCmotorsPWM 17FC  
                        _PORTFbits 000F8E                 setMotorPWM@negDuty 0013  
                    ___xxtofl@sign 0009                          _TRISAbits 000F81  
               setMotorPWM@posDuty 0012                          _TRISBbits 000F82  
                        _TRISCbits 000F83                          _TRISDbits 000F84  
                        _TRISEbits 000F85                          _TRISFbits 000F86  
                        _TRISGbits 000F87                          _TRISHbits 000F88  
                      ___fldiv@grs 0022                        ___fldiv@rem 001B  
         color_writetoaddr@address 0004            ??_I2C_2_Master_RepStart 0002  
                       _start_flag 0043                        _CCP1CONbits 000FAB  
                ?_color_read_Clear 0005                       _EUSART4RXbuf 009C  
                     _EUSART4TXbuf 0060                        _CCP2CONbits 000FA7  
                ?_color_read_Green 0005                         ?_READcolor 000C  
                      _CCP3CONbits 000F26                        ?_initUSART4 0001  
                      _CCP4CONbits 000F22                 ??_color_read_Clear 0007  
               ??_color_read_Green 0007                     __end_of___flge 14D0  
                   __end_of___wmul 1C22               __end_of_instructions 0BEC  
       ?_colourcards_normaliseRGBC 0028                color_read_Clear@tmp 000A  
              start_initialization 1C22                      _TxBufWriteCnt 003F  
     __end_of_calibrate_upperbound 13CC             buggy_color_response@mL 0032  
           buggy_color_response@mR 0034                color_read_Green@tmp 000A  
          __end_of_initDCmotorsPWM 188C         colourcards_normaliseRGBC@B 002E  
       colourcards_normaliseRGBC@C 0030         colourcards_normaliseRGBC@G 002C  
       colourcards_normaliseRGBC@R 002A         colourcards_normaliseRGBC@c 0028  
                         ??___flge 0009             ??_buggy_color_response 0038  
                         ??___wmul 0005                        ?_motor_init 0001  
                       READcolor@c 000C                          ___fldiv@a 0013  
                        ___fldiv@b 000F                        __pbssCOMRAM 003A  
                         ?_HighISR 0001                        ??_READcolor 000E  
                 ___lwdiv@dividend 0007                          __pintcode 0008  
                         ?___fldiv 000F                           ?___lwdiv 0007  
                       right_45@mL 001A                         right_45@mR 001C  
             I2C_2_Master_Read@ack 0003               I2C_2_Master_Read@tmp 0004  
                         ?_left_45 001A                           ?_forward 001A  
                _I2C_2_Master_Idle 1BD4                  _I2C_2_Master_Init 1BAA  
                _I2C_2_Master_Read 1B02                  _I2C_2_Master_Stop 1CA6  
                     _RxBufReadCnt 0040                           ?_reverse 001A  
               ?_I2C_2_Master_Idle 0001                 ?_I2C_2_Master_Init 0001  
               ?_I2C_2_Master_Read 0001                      ??_setMotorPWM 0010  
               ?_I2C_2_Master_Stop 0001                   ___lwdiv@quotient 000B  
         initDCmotorsPWM@PWMperiod 0001                ??_I2C_2_Master_Idle 0001  
              ??_I2C_2_Master_Init 0001                ??_I2C_2_Master_Read 0002  
                   ___wmul@product 0005                           _LATAbits 000F79  
              ??_I2C_2_Master_Stop 0002                           _LATCbits 000F7B  
                         _LATDbits 000F7C                           _LATEbits 000F7D  
                         _LATFbits 000F7E                           _LATGbits 000F7F  
                         _LATHbits 000F80                           _IPR0bits 000E1F  
                         _PIE0bits 000E29                           _PIE4bits 000E2D  
                         i2u110_40 001A                           i2u110_41 0016  
                         _PIR0bits 000E33                           _PIR4bits 000E37  
                 ?_initDCmotorsPWM 0001                           _SSP2CON2 000EDA  
                         _SSP2STAT 000ED8               _calibrate_upperbound 12A4  
        __end_of_I2C_2_Master_Idle 1BFC          __end_of_I2C_2_Master_Init 1BD4  
        __end_of_I2C_2_Master_Read 1B44                  ___wmul@multiplier 0001  
        __end_of_I2C_2_Master_Stop 1CB0                       setMotorPWM@m 000E  
      I2C_2_Master_Write@data_byte 0002                          left_45@mL 001A  
                        left_45@mR 001C                  ??_color_read_Blue 0007  
                     _TxBufReadCnt 003E      __end_of_I2C_2_Master_RepStart 1CC4  
               color_read_Blue@tmp 000A                __end_of_setMotorPWM 0F0C  
                     _instructions 0908                       ??_initUSART4 0001  
            buggy_color_response@c 0036                           __Hrparam 0000  
                         __Lrparam 0000                          forward@mL 001A  
                        forward@mR 001C              ?_calibrate_upperbound 0032  
                       _ANSELBbits 000E9A                         _ANSELDbits 000EA7  
                       _ANSELFbits 000EB4        ??_colourcards_normaliseRGBC 002A  
                         ___xxtofl 0BEC                     _buggyLEDs_init 1C84  
                  ___lwdiv@divisor 0009                 __end_of_initUSART4 1C64  
                  ___lwdiv@counter 000D                           __ptext10 14D0  
                         __ptext11 104C                           __ptext20 0BEC  
                         __ptext12 15D0                           __ptext21 056E  
                         __ptext13 0F0C                           __ptext30 1CB0  
                         __ptext22 13CC                           __ptext14 168E  
                         __ptext31 1CBA                           __ptext23 1B78  
                         __ptext15 174C                           __ptext32 1B02  
                         __ptext24 1976                           __ptext16 0DA0  
                         __ptext33 1BD4                           __ptext25 19C6  
                         __ptext17 1BFC                           __ptext34 1C84  
                         __ptext26 1A16                           __ptext18 1902  
                         __ptext27 1A66                           __ptext19 117A  
                         __ptext28 1C9A                           __ptext29 1CA6  
                        right_45@i 0022                       _SSP2CON1bits 000ED9  
                     _SSP2CON2bits 000EDA                     instructions@mL 0024  
                   instructions@mR 0026                           _right_45 104C  
                        reverse@mL 001A                          reverse@mR 001C  
                instructions@count 0028                           isa$xinst 000000  
                       _RC4STAbits 000EE7                           int$flags 0058  
                     ??_motor_init 0005                           left_45@i 0022  
           __end_of_buggyLEDs_init 1C9A                         _INTCONbits 000FF2  
                      _setMotorPWM 0DA0                           intlevel2 0000  
               __end_of_motor_init 1B02          _colourcards_normaliseRGBC 117A  
           ??_calibrate_upperbound 0034                       motor_init@mL 0001  
                     motor_init@mR 0003                   _color_click_init 1B44  
                  ?_buggyLEDs_init 0001                         _SSP2DATPPS 000E1D  
                       _SSP2CLKPPS 000E1C                         _TX4STAbits 000EE8  
