

Microchip MPLAB XC8 Assembler V2.40 build 20220703182018 
                                                                                               Thu Mar 16 03:18:19 2023

Microchip MPLAB XC8 C Compiler v2.40 (Free license) build 20220703182018 Og1 
     1                           	processor	18F67K40
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1,group=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1,group=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1,group=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1
    47                           	psect	text33,global,reloc=2,class=CODE,delta=1
    48                           	psect	text34,global,reloc=2,class=CODE,delta=1
    49                           	psect	text35,global,reloc=2,class=CODE,delta=1
    50                           	psect	text36,global,reloc=2,class=CODE,delta=1
    51                           	psect	text37,global,reloc=2,class=CODE,delta=1
    52                           	psect	text38,global,reloc=2,class=CODE,delta=1
    53                           	psect	text39,global,reloc=2,class=CODE,delta=1
    54                           	psect	text40,global,reloc=2,class=CODE,delta=1
    55                           	psect	text41,global,reloc=2,class=CODE,delta=1
    56                           	psect	text42,global,reloc=2,class=CODE,delta=1
    57                           	psect	text43,global,reloc=2,class=CODE,delta=1,group=1
    58                           	psect	text44,global,reloc=2,class=CODE,delta=1,group=1
    59                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    60                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    61                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    62                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    63                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    64                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    65   000000                     
    66                           ; Generated 06/04/2022 GMT
    67                           ; 
    68                           ; Copyright Â© 2022, Microchip Technology Inc. and its subsidiaries ("Microchip")
    69                           ; All rights reserved.
    70                           ; 
    71                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    72                           ; 
    73                           ; Redistribution and use in source and binary forms, with or without modification, are
    74                           ; permitted provided that the following conditions are met:
    75                           ; 
    76                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    77                           ;        conditions and the following disclaimer.
    78                           ; 
    79                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    80                           ;        of conditions and the following disclaimer in the documentation and/or other
    81                           ;        materials provided with the distribution. Publication is not required when
    82                           ;        this file is used in an embedded application.
    83                           ; 
    84                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    85                           ;        software without specific prior written permission.
    86                           ; 
    87                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    88                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    89                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    90                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    91                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    92                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    93                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    94                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    95                           ; 
    96                           ; 
    97                           ; Code-generator required, PIC18F67K40 Definitions
    98                           ; 
    99                           ; SFR Addresses
   100   000000                     
   101                           	psect	idataCOMRAM
   102   0022D2                     __pidataCOMRAM:
   103                           	callstack 0
   104                           
   105                           ;initializer for _square_timer
   106   0022D2  0384               	dw	900
   107                           
   108                           ;initializer for _right_timer
   109   0022D4  0060               	dw	96
   110                           
   111                           ;initializer for _left_timer
   112   0022D6  0062               	dw	98
   113                           
   114                           	psect	idataBANK0
   115   0022D8                     __pidataBANK0:
   116                           	callstack 0
   117                           
   118                           ;initializer for _color_upperbound
   119   0022D8  09C4               	dw	2500
   120   000000                     _TRISFbits	set	3974
   121   000000                     _LATDbits	set	3964
   122   000000                     _TRISGbits	set	3975
   123   000000                     _TRISEbits	set	3973
   124   000000                     _TX4REG	set	3812
   125   000000                     _RC4STAbits	set	3815
   126   000000                     _SP4BRGH	set	3814
   127   000000                     _SSP2CON2bits	set	3802
   128   000000                     _RX4PPS	set	3605
   129   000000                     _SSP2CLKPPS	set	3612
   130   000000                     _SSP2DATPPS	set	3613
   131   000000                     _ANSELDbits	set	3751
   132   000000                     _SSP2ADD	set	3798
   133   000000                     _SSP2CON1bits	set	3801
   134   000000                     _RC4REG	set	3811
   135   000000                     _SP4BRGL	set	3813
   136   000000                     _TX4STAbits	set	3816
   137   000000                     _BAUD4CONbits	set	3817
   138   000000                     _LATAbits	set	3961
   139   000000                     _LATGbits	set	3967
   140   000000                     _SSP2CON2	set	3802
   141   000000                     _TRISDbits	set	3972
   142   000000                     _SSP2STAT	set	3800
   143   000000                     _ANSELFbits	set	3764
   144   000000                     _SSP2BUF	set	3797
   145   000000                     _IPR0bits	set	3615
   146   000000                     _PIE0bits	set	3625
   147   000000                     _PIR4bits	set	3639
   148   000000                     _RC0PPS	set	3682
   149   000000                     _RD5PPS	set	3695
   150   000000                     _RE2PPS	set	3700
   151   000000                     _RD6PPS	set	3696
   152   000000                     _TRISAbits	set	3969
   153   000000                     _LATHbits	set	3968
   154   000000                     _TRISCbits	set	3971
   155   000000                     _LATCbits	set	3963
   156   000000                     _LATEbits	set	3965
   157   000000                     _LATFbits	set	3966
   158   000000                     _RC7PPS	set	3689
   159   000000                     _CCPR4H	set	3873
   160   000000                     _CCPR3H	set	3877
   161   000000                     _TRISHbits	set	3976
   162   000000                     _PORTFbits	set	3982
   163   000000                     _T2PR	set	4028
   164   000000                     _T2CONbits	set	4029
   165   000000                     _CCPR2H	set	4006
   166   000000                     _CCPR1H	set	4010
   167   000000                     _RE4PPS	set	3702
   168   000000                     _RG6PPS	set	3720
   169   000000                     _TMR0L	set	4051
   170   000000                     _TMR0H	set	4052
   171   000000                     _T0CON0bits	set	4053
   172   000000                     _T0CON1bits	set	4054
   173   000000                     _INTCONbits	set	4082
   174   000000                     _T2CLKCONbits	set	4031
   175   000000                     _T2HLTbits	set	4030
   176   000000                     _CCP1CONbits	set	4011
   177   000000                     _CCPTMRS0bits	set	4013
   178   000000                     _CCP2CONbits	set	4007
   179   000000                     _ADREFbits	set	3928
   180   000000                     _CCP3CONbits	set	3878
   181   000000                     _CCP4CONbits	set	3874
   182   000000                     _PIR0bits	set	3635
   183   000000                     _ADPCH	set	3935
   184   000000                     _ADRESH	set	3940
   185   000000                     _ADCON0bits	set	3936
   186                           
   187                           ; #config settings
   188                           
   189                           	psect	cinit
   190   001E40                     __pcinit:
   191                           	callstack 0
   192   001E40                     start_initialization:
   193                           	callstack 0
   194   001E40                     __initialization:
   195                           	callstack 0
   196                           
   197                           ; Initialize objects allocated to BANK0 (2 bytes)
   198                           ; load TBLPTR registers with __pidataBANK0
   199   001E40  0ED8               	movlw	low __pidataBANK0
   200   001E42  6EF6               	movwf	tblptrl,c
   201   001E44  0E22               	movlw	high __pidataBANK0
   202   001E46  6EF7               	movwf	tblptrh,c
   203   001E48  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   204   001E4A  6EF8               	movwf	tblptru,c
   205   001E4C  0009               	tblrd		*+	;fetch initializer
   206   001E4E  CFF5 F0C2          	movff	tablat,__pdataBANK0
   207   001E52  0009               	tblrd		*+	;fetch initializer
   208   001E54  CFF5 F0C3          	movff	tablat,__pdataBANK0+1
   209                           
   210                           ; Initialize objects allocated to COMRAM (6 bytes)
   211                           ; load TBLPTR registers with __pidataCOMRAM
   212   001E58  0ED2               	movlw	low __pidataCOMRAM
   213   001E5A  6EF6               	movwf	tblptrl,c
   214   001E5C  0E22               	movlw	high __pidataCOMRAM
   215   001E5E  6EF7               	movwf	tblptrh,c
   216   001E60  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   217   001E62  6EF8               	movwf	tblptru,c
   218   001E64  EE00  F057         	lfsr	0,__pdataCOMRAM
   219   001E68  EE10 F006          	lfsr	1,6
   220   001E6C                     copy_data0:
   221   001E6C  0009               	tblrd		*+
   222   001E6E  CFF5 FFEE          	movff	tablat,postinc0
   223   001E72  50E5               	movf	postdec1,w,c
   224   001E74  50E1               	movf	fsr1l,w,c
   225   001E76  E1FA               	bnz	copy_data0
   226                           
   227                           ; Clear objects allocated to BANK0 (98 bytes)
   228   001E78  EE00  F060         	lfsr	0,__pbssBANK0
   229   001E7C  0E62               	movlw	98
   230   001E7E                     clear_0:
   231   001E7E  6AEE               	clrf	postinc0,c
   232   001E80  06E8               	decf	wreg,f,c
   233   001E82  E1FD               	bnz	clear_0
   234                           
   235                           ; Clear objects allocated to COMRAM (24 bytes)
   236   001E84  EE00  F03F         	lfsr	0,__pbssCOMRAM
   237   001E88  0E18               	movlw	24
   238   001E8A                     clear_1:
   239   001E8A  6AEE               	clrf	postinc0,c
   240   001E8C  06E8               	decf	wreg,f,c
   241   001E8E  E1FD               	bnz	clear_1
   242   001E90                     end_of_initialization:
   243                           	callstack 0
   244   001E90                     __end_of__initialization:
   245                           	callstack 0
   246   001E90  905D               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   247   001E92  925D               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   248   001E94  0100               	movlb	0
   249   001E96  EFE9  F00E         	goto	_main	;jump to C main() function
   250                           
   251                           	psect	bssCOMRAM
   252   00003F                     __pbssCOMRAM:
   253                           	callstack 0
   254   00003F                     _timer_val:
   255                           	callstack 0
   256   00003F                     	ds	2
   257   000041                     _timer_index:
   258                           	callstack 0
   259   000041                     	ds	1
   260   000042                     _card_count:
   261                           	callstack 0
   262   000042                     	ds	1
   263   000043                     _color:
   264                           	callstack 0
   265   000043                     	ds	20
   266                           
   267                           	psect	dataCOMRAM
   268   000057                     __pdataCOMRAM:
   269                           	callstack 0
   270   000057                     _square_timer:
   271                           	callstack 0
   272   000057                     	ds	2
   273   000059                     _right_timer:
   274                           	callstack 0
   275   000059                     	ds	2
   276   00005B                     _left_timer:
   277                           	callstack 0
   278   00005B                     	ds	2
   279                           
   280                           	psect	bssBANK0
   281   000060                     __pbssBANK0:
   282                           	callstack 0
   283   000060                     _timer_memory:
   284                           	callstack 0
   285   000060                     	ds	40
   286   000088                     _card_memory:
   287                           	callstack 0
   288   000088                     	ds	40
   289   0000B0                     _motorR:
   290                           	callstack 0
   291   0000B0                     	ds	9
   292   0000B9                     _motorL:
   293                           	callstack 0
   294   0000B9                     	ds	9
   295                           
   296                           	psect	dataBANK0
   297   0000C2                     __pdataBANK0:
   298                           	callstack 0
   299   0000C2                     _color_upperbound:
   300                           	callstack 0
   301   0000C2                     	ds	2
   302                           
   303                           	psect	cstackBANK0
   304   0000C4                     __pcstackBANK0:
   305                           	callstack 0
   306   0000C4                     ??_main:
   307                           
   308                           ; 1 bytes @ 0x0
   309   0000C4                     	ds	2
   310                           
   311                           	psect	cstackCOMRAM
   312   000001                     __pcstackCOMRAM:
   313                           	callstack 0
   314   000001                     ??_LowISR:
   315   000001                     
   316                           ; 1 bytes @ 0x0
   317   000001                     	ds	2
   318   000003                     ??_I2C_2_Master_Idle:
   319   000003                     ?___wmul:
   320                           	callstack 0
   321   000003                     ?___xxtofl:
   322                           	callstack 0
   323   000003                     delay_ms_func@time:
   324                           	callstack 0
   325   000003                     initDCmotorsPWM@PWMperiod:
   326                           	callstack 0
   327   000003                     motor_init@mL:
   328                           	callstack 0
   329   000003                     custom_delay@temp:
   330                           	callstack 0
   331   000003                     ___wmul@multiplier:
   332                           	callstack 0
   333   000003                     ___flge@ff1:
   334                           	callstack 0
   335   000003                     ___xxtofl@val:
   336                           	callstack 0
   337                           
   338                           ; 4 bytes @ 0x2
   339   000003                     	ds	1
   340   000004                     ??_I2C_2_Master_Read:
   341   000004                     I2C_2_Master_Write@data_byte:
   342                           	callstack 0
   343                           
   344                           ; 1 bytes @ 0x3
   345   000004                     	ds	1
   346   000005                     ??_delay_ms_func:
   347   000005                     ??_custom_delay:
   348   000005                     I2C_2_Master_Read@ack:
   349                           	callstack 0
   350   000005                     color_writetoaddr@value:
   351                           	callstack 0
   352   000005                     motor_init@mR:
   353                           	callstack 0
   354   000005                     ___wmul@multiplicand:
   355                           	callstack 0
   356                           
   357                           ; 2 bytes @ 0x4
   358   000005                     	ds	1
   359   000006                     I2C_2_Master_Read@tmp:
   360                           	callstack 0
   361   000006                     color_writetoaddr@address:
   362                           	callstack 0
   363   000006                     custom_delay@i:
   364                           	callstack 0
   365                           
   366                           ; 2 bytes @ 0x5
   367   000006                     	ds	1
   368   000007                     ??_color_click_init:
   369   000007                     ??___xxtofl:
   370   000007                     ?_color_read_Red:
   371                           	callstack 0
   372   000007                     ?_color_read_Blue:
   373                           	callstack 0
   374   000007                     ?_color_read_Green:
   375                           	callstack 0
   376   000007                     ?_color_read_Clear:
   377                           	callstack 0
   378   000007                     delay_ms_func@i:
   379                           	callstack 0
   380   000007                     ___wmul@product:
   381                           	callstack 0
   382   000007                     ___flge@ff2:
   383                           	callstack 0
   384                           
   385                           ; 4 bytes @ 0x6
   386   000007                     	ds	1
   387   000008                     
   388                           ; 1 bytes @ 0x7
   389   000008                     	ds	1
   390   000009                     ??_color_read_Red:
   391   000009                     ??_color_read_Blue:
   392   000009                     ??_color_read_Green:
   393   000009                     ??_color_read_Clear:
   394   000009                     ?___lwdiv:
   395                           	callstack 0
   396   000009                     ___lwdiv@dividend:
   397                           	callstack 0
   398                           
   399                           ; 2 bytes @ 0x8
   400   000009                     	ds	2
   401   00000B                     ??___flge:
   402   00000B                     ___xxtofl@sign:
   403                           	callstack 0
   404   00000B                     ___lwdiv@divisor:
   405                           	callstack 0
   406                           
   407                           ; 2 bytes @ 0xA
   408   00000B                     	ds	1
   409   00000C                     ___xxtofl@exp:
   410                           	callstack 0
   411   00000C                     color_read_Red@tmp:
   412                           	callstack 0
   413   00000C                     color_read_Blue@tmp:
   414                           	callstack 0
   415   00000C                     color_read_Green@tmp:
   416                           	callstack 0
   417   00000C                     color_read_Clear@tmp:
   418                           	callstack 0
   419                           
   420                           ; 2 bytes @ 0xB
   421   00000C                     	ds	1
   422   00000D                     ___lwdiv@quotient:
   423                           	callstack 0
   424   00000D                     ___xxtofl@arg:
   425                           	callstack 0
   426                           
   427                           ; 4 bytes @ 0xC
   428   00000D                     	ds	2
   429   00000F                     ___lwdiv@counter:
   430                           	callstack 0
   431                           
   432                           ; 1 bytes @ 0xE
   433   00000F                     	ds	1
   434   000010                     setMotorPWM@m:
   435                           	callstack 0
   436                           
   437                           ; 2 bytes @ 0xF
   438   000010                     	ds	1
   439   000011                     ?___fldiv:
   440                           	callstack 0
   441   000011                     ___fldiv@b:
   442                           	callstack 0
   443                           
   444                           ; 4 bytes @ 0x10
   445   000011                     	ds	1
   446   000012                     ??_setMotorPWM:
   447                           
   448                           ; 1 bytes @ 0x11
   449   000012                     	ds	2
   450   000014                     setMotorPWM@posDuty:
   451                           	callstack 0
   452                           
   453                           ; 1 bytes @ 0x13
   454   000014                     	ds	1
   455   000015                     setMotorPWM@negDuty:
   456                           	callstack 0
   457   000015                     ___fldiv@a:
   458                           	callstack 0
   459                           
   460                           ; 4 bytes @ 0x14
   461   000015                     	ds	1
   462   000016                     stop@mL:
   463                           	callstack 0
   464                           
   465                           ; 2 bytes @ 0x15
   466   000016                     	ds	2
   467   000018                     stop@mR:
   468                           	callstack 0
   469                           
   470                           ; 2 bytes @ 0x17
   471   000018                     	ds	1
   472   000019                     ??___fldiv:
   473                           
   474                           ; 1 bytes @ 0x18
   475   000019                     	ds	1
   476   00001A                     stop@i:
   477                           	callstack 0
   478                           
   479                           ; 2 bytes @ 0x19
   480   00001A                     	ds	2
   481   00001C                     forward@mL:
   482                           	callstack 0
   483   00001C                     reverse@mL:
   484                           	callstack 0
   485   00001C                     left_45@mL:
   486                           	callstack 0
   487   00001C                     right_45@mL:
   488                           	callstack 0
   489   00001C                     space@mL:
   490                           	callstack 0
   491                           
   492                           ; 2 bytes @ 0x1B
   493   00001C                     	ds	1
   494   00001D                     ___fldiv@rem:
   495                           	callstack 0
   496                           
   497                           ; 4 bytes @ 0x1C
   498   00001D                     	ds	1
   499   00001E                     forward@mR:
   500                           	callstack 0
   501   00001E                     reverse@mR:
   502                           	callstack 0
   503   00001E                     left_45@mR:
   504                           	callstack 0
   505   00001E                     right_45@mR:
   506                           	callstack 0
   507   00001E                     space@mR:
   508                           	callstack 0
   509                           
   510                           ; 2 bytes @ 0x1D
   511   00001E                     	ds	2
   512   000020                     ??_space:
   513   000020                     left_45@count:
   514                           	callstack 0
   515   000020                     right_45@count:
   516                           	callstack 0
   517                           
   518                           ; 1 bytes @ 0x1F
   519   000020                     	ds	1
   520   000021                     ___fldiv@sign:
   521                           	callstack 0
   522   000021                     left_45@left_timer:
   523                           	callstack 0
   524   000021                     right_45@right_timer:
   525                           	callstack 0
   526                           
   527                           ; 2 bytes @ 0x20
   528   000021                     	ds	1
   529   000022                     ___fldiv@new_exp:
   530                           	callstack 0
   531                           
   532                           ; 2 bytes @ 0x21
   533   000022                     	ds	1
   534   000023                     ??_left_45:
   535   000023                     ??_right_45:
   536                           
   537                           ; 1 bytes @ 0x22
   538   000023                     	ds	1
   539   000024                     ___fldiv@grs:
   540                           	callstack 0
   541                           
   542                           ; 4 bytes @ 0x23
   543   000024                     	ds	1
   544   000025                     left_45@i:
   545                           	callstack 0
   546   000025                     right_45@i:
   547                           	callstack 0
   548                           
   549                           ; 1 bytes @ 0x24
   550   000025                     	ds	1
   551   000026                     reverse_yellow@mL:
   552                           	callstack 0
   553   000026                     reverse_pink@mL:
   554                           	callstack 0
   555   000026                     movement@mL:
   556                           	callstack 0
   557                           
   558                           ; 2 bytes @ 0x25
   559   000026                     	ds	2
   560   000028                     ___fldiv@bexp:
   561                           	callstack 0
   562   000028                     reverse_yellow@mR:
   563                           	callstack 0
   564   000028                     reverse_pink@mR:
   565                           	callstack 0
   566   000028                     movement@mR:
   567                           	callstack 0
   568                           
   569                           ; 2 bytes @ 0x27
   570   000028                     	ds	1
   571   000029                     ___fldiv@aexp:
   572                           	callstack 0
   573                           
   574                           ; 1 bytes @ 0x28
   575   000029                     	ds	1
   576   00002A                     ??_reverse_yellow:
   577   00002A                     ??_reverse_pink:
   578   00002A                     movement@count:
   579                           	callstack 0
   580   00002A                     READcolor@c:
   581                           	callstack 0
   582                           
   583                           ; 2 bytes @ 0x29
   584   00002A                     	ds	1
   585   00002B                     ??_movement:
   586                           
   587                           ; 1 bytes @ 0x2A
   588   00002B                     	ds	1
   589   00002C                     movement_return@mL:
   590                           	callstack 0
   591                           
   592                           ; 2 bytes @ 0x2B
   593   00002C                     	ds	2
   594   00002E                     movement_return@mR:
   595                           	callstack 0
   596                           
   597                           ; 2 bytes @ 0x2D
   598   00002E                     	ds	2
   599   000030                     movement_return@count:
   600                           	callstack 0
   601                           
   602                           ; 1 bytes @ 0x2F
   603   000030                     	ds	1
   604   000031                     return_home@mL:
   605                           	callstack 0
   606                           
   607                           ; 2 bytes @ 0x30
   608   000031                     	ds	2
   609   000033                     return_home@mR:
   610                           	callstack 0
   611                           
   612                           ; 2 bytes @ 0x32
   613   000033                     	ds	2
   614   000035                     ??_return_home:
   615                           
   616                           ; 1 bytes @ 0x34
   617   000035                     	ds	2
   618   000037                     buggy_color_response@mL:
   619                           	callstack 0
   620                           
   621                           ; 2 bytes @ 0x36
   622   000037                     	ds	2
   623   000039                     buggy_color_response@mR:
   624                           	callstack 0
   625                           
   626                           ; 2 bytes @ 0x38
   627   000039                     	ds	2
   628   00003B                     buggy_color_response@c:
   629                           	callstack 0
   630                           
   631                           ; 2 bytes @ 0x3A
   632   00003B                     	ds	2
   633   00003D                     ??_buggy_color_response:
   634                           
   635                           ; 1 bytes @ 0x3C
   636   00003D                     	ds	2
   637                           
   638 ;;
   639 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   640 ;;
   641 ;; *************** function _main *****************
   642 ;; Defined at:
   643 ;;		line 19 in file "main.c"
   644 ;; Parameters:    Size  Location     Type
   645 ;;		None
   646 ;; Auto vars:     Size  Location     Type
   647 ;;		None
   648 ;; Return value:  Size  Location     Type
   649 ;;                  1    wreg      void 
   650 ;; Registers used:
   651 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   652 ;; Tracked objects:
   653 ;;		On entry : 0/0
   654 ;;		On exit  : 0/0
   655 ;;		Unchanged: 0/0
   656 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   657 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   658 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   659 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   660 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   661 ;;Total ram usage:        2 bytes
   662 ;; Hardware stack levels required when called: 9
   663 ;; This function calls:
   664 ;;		_buggy_color_response
   665 ;;		_complete_initialisation
   666 ;;		_timer_reset
   667 ;; This function is called by:
   668 ;;		Startup code after reset
   669 ;; This function uses a non-reentrant model
   670 ;;
   671                           
   672                           	psect	text0
   673   001DD2                     __ptext0:
   674                           	callstack 0
   675   001DD2                     _main:
   676                           	callstack 22
   677   001DD2                     
   678                           ;main.c: 21:     complete_initialisation();
   679   001DD2  EC13  F010         	call	_complete_initialisation	;wreg free
   680   001DD6                     l400:
   681   001DD6  A48E               	btfss	142,2,c	;volatile
   682   001DD8  EFF0  F00E         	goto	u2491
   683   001DDC  EFF2  F00E         	goto	u2490
   684   001DE0                     u2491:
   685   001DE0  EFF9  F00E         	goto	l404
   686   001DE4                     u2490:
   687   001DE4  B68E               	btfsc	142,3,c	;volatile
   688   001DE6  EFF7  F00E         	goto	u2501
   689   001DEA  EFF9  F00E         	goto	u2500
   690   001DEE                     u2501:
   691   001DEE  EFEB  F00E         	goto	l400
   692   001DF2                     u2500:
   693   001DF2                     l404:
   694                           
   695                           ;main.c: 27:     if (!PORTFbits.RF3){_delay((unsigned long)((500)*(64000000/4000.0)));ti
      +                          mer_reset();
   696   001DF2  B68E               	btfsc	142,3,c	;volatile
   697   001DF4  EFFE  F00E         	goto	u2511
   698   001DF8  EF00  F00F         	goto	u2510
   699   001DFC                     u2511:
   700   001DFC  EF1E  F00F         	goto	l409
   701   001E00                     u2510:
   702   001E00  0E29               	movlw	41
   703   001E02  0100               	movlb	0	; () banked
   704   001E04  6FC5               	movwf	(??_main+1)& (0+255),b
   705   001E06  0E96               	movlw	150
   706   001E08  6FC4               	movwf	??_main& (0+255),b
   707   001E0A  0E7F               	movlw	127
   708   001E0C                     u2527:
   709   001E0C  2EE8               	decfsz	wreg,f,c
   710   001E0E  D7FE               	bra	u2527
   711   001E10  2FC4               	decfsz	??_main& (0+255),f,b
   712   001E12  D7FC               	bra	u2527
   713   001E14  2FC5               	decfsz	(??_main+1)& (0+255),f,b
   714   001E16  D7FA               	bra	u2527
   715   001E18  EC43  F011         	call	_timer_reset	;wreg free
   716   001E1C                     l3243:
   717                           
   718                           ;main.c: 29:         buggy_color_response(&motorL,&motorR,&color);
   719   001E1C  0EB9               	movlw	low _motorL
   720   001E1E  6E37               	movwf	buggy_color_response@mL^0,c
   721   001E20  0E00               	movlw	high _motorL
   722   001E22  6E38               	movwf	(buggy_color_response@mL+1)^0,c
   723   001E24  0EB0               	movlw	low _motorR
   724   001E26  6E39               	movwf	buggy_color_response@mR^0,c
   725   001E28  0E00               	movlw	high _motorR
   726   001E2A  6E3A               	movwf	(buggy_color_response@mR+1)^0,c
   727   001E2C  0E43               	movlw	low _color
   728   001E2E  6E3B               	movwf	buggy_color_response@c^0,c
   729   001E30  0E00               	movlw	high _color
   730   001E32  6E3C               	movwf	(buggy_color_response@c+1)^0,c
   731   001E34  EC24  F000         	call	_buggy_color_response	;wreg free
   732   001E38  EF0E  F00F         	goto	l3243
   733   001E3C                     l409:
   734   001E3C  EF22  F000         	goto	start
   735   001E40                     __end_of_main:
   736                           	callstack 0
   737                           
   738 ;; *************** function _complete_initialisation *****************
   739 ;; Defined at:
   740 ;;		line 16 in file "initialisation.c"
   741 ;; Parameters:    Size  Location     Type
   742 ;;		None
   743 ;; Auto vars:     Size  Location     Type
   744 ;;		None
   745 ;; Return value:  Size  Location     Type
   746 ;;                  1    wreg      void 
   747 ;; Registers used:
   748 ;;		wreg, status,2, status,0, cstack
   749 ;; Tracked objects:
   750 ;;		On entry : 0/0
   751 ;;		On exit  : 0/0
   752 ;;		Unchanged: 0/0
   753 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   754 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   755 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   756 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   757 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   758 ;;Total ram usage:        0 bytes
   759 ;; Hardware stack levels used: 1
   760 ;; Hardware stack levels required when called: 5
   761 ;; This function calls:
   762 ;;		_ADC_init
   763 ;;		_I2C_2_Master_Init
   764 ;;		_Timer0_init
   765 ;;		_buggyLEDs_init
   766 ;;		_color_click_init
   767 ;;		_initDCmotorsPWM
   768 ;;		_initUSART4
   769 ;;		_interrupts_init
   770 ;;		_motor_init
   771 ;;		_ports_init
   772 ;; This function is called by:
   773 ;;		_main
   774 ;; This function uses a non-reentrant model
   775 ;;
   776                           
   777                           	psect	text1
   778   002026                     __ptext1:
   779                           	callstack 0
   780   002026                     _complete_initialisation:
   781                           	callstack 25
   782   002026                     
   783                           ;initialisation.c: 18:     initDCmotorsPWM(99);
   784   002026  0E00               	movlw	0
   785   002028  6E04               	movwf	(initDCmotorsPWM@PWMperiod+1)^0,c
   786   00202A  0E63               	movlw	99
   787   00202C  6E03               	movwf	initDCmotorsPWM@PWMperiod^0,c
   788   00202E  ECE5  F00D         	call	_initDCmotorsPWM	;wreg free
   789   002032                     
   790                           ;initialisation.c: 19:     buggyLEDs_init();
   791   002032  EC38  F011         	call	_buggyLEDs_init	;wreg free
   792   002036                     
   793                           ;initialisation.c: 20:     ports_init();
   794   002036  ECEB  F010         	call	_ports_init	;wreg free
   795   00203A                     
   796                           ;initialisation.c: 21:     motor_init(&motorL,&motorR);
   797   00203A  0EB9               	movlw	low _motorL
   798   00203C  6E03               	movwf	motor_init@mL^0,c
   799   00203E  0E00               	movlw	high _motorL
   800   002040  6E04               	movwf	(motor_init@mL+1)^0,c
   801   002042  0EB0               	movlw	low _motorR
   802   002044  6E05               	movwf	motor_init@mR^0,c
   803   002046  0E00               	movlw	high _motorR
   804   002048  6E06               	movwf	(motor_init@mR+1)^0,c
   805   00204A  ECED  F00F         	call	_motor_init	;wreg free
   806   00204E                     
   807                           ;initialisation.c: 22:     I2C_2_Master_Init();
   808   00204E  ECAF  F010         	call	_I2C_2_Master_Init	;wreg free
   809                           
   810                           ;initialisation.c: 23:     color_click_init();
   811   002052  EC95  F010         	call	_color_click_init	;wreg free
   812   002056                     
   813                           ;initialisation.c: 24:     Timer0_init();
   814   002056  EC1B  F011         	call	_Timer0_init	;wreg free
   815   00205A                     
   816                           ;initialisation.c: 25:     interrupts_init();
   817   00205A  EC4C  F011         	call	_interrupts_init	;wreg free
   818   00205E                     
   819                           ;initialisation.c: 26:     initUSART4();
   820   00205E  ECFB  F010         	call	_initUSART4	;wreg free
   821   002062                     
   822                           ;initialisation.c: 27:     ADC_init();
   823   002062  EC2B  F011         	call	_ADC_init	;wreg free
   824   002066  0012               	return		;funcret
   825   002068                     __end_of_complete_initialisation:
   826                           	callstack 0
   827                           
   828 ;; *************** function _ports_init *****************
   829 ;; Defined at:
   830 ;;		line 8 in file "lights_buttons.c"
   831 ;; Parameters:    Size  Location     Type
   832 ;;		None
   833 ;; Auto vars:     Size  Location     Type
   834 ;;		None
   835 ;; Return value:  Size  Location     Type
   836 ;;                  1    wreg      void 
   837 ;; Registers used:
   838 ;;		None
   839 ;; Tracked objects:
   840 ;;		On entry : 0/0
   841 ;;		On exit  : 0/0
   842 ;;		Unchanged: 0/0
   843 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   844 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   845 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   846 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   847 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   848 ;;Total ram usage:        0 bytes
   849 ;; Hardware stack levels used: 1
   850 ;; Hardware stack levels required when called: 1
   851 ;; This function calls:
   852 ;;		Nothing
   853 ;; This function is called by:
   854 ;;		_complete_initialisation
   855 ;; This function uses a non-reentrant model
   856 ;;
   857                           
   858                           	psect	text2
   859   0021D6                     __ptext2:
   860                           	callstack 0
   861   0021D6                     _ports_init:
   862                           	callstack 28
   863   0021D6                     
   864                           ;lights_buttons.c: 10:     TRISGbits.TRISG1 = 0;
   865   0021D6  9287               	bcf	135,1,c	;volatile
   866                           
   867                           ;lights_buttons.c: 11:     TRISAbits.TRISA4 = 0;
   868   0021D8  9881               	bcf	129,4,c	;volatile
   869                           
   870                           ;lights_buttons.c: 12:     TRISFbits.TRISF7 = 0;
   871   0021DA  9E86               	bcf	134,7,c	;volatile
   872                           
   873                           ;lights_buttons.c: 14:     LATGbits.LATG1 = 1;
   874   0021DC  827F               	bsf	127,1,c	;volatile
   875                           
   876                           ;lights_buttons.c: 15:     LATAbits.LATA4 = 1;
   877   0021DE  8879               	bsf	121,4,c	;volatile
   878                           
   879                           ;lights_buttons.c: 16:     LATFbits.LATF7 = 1;
   880   0021E0  8E7E               	bsf	126,7,c	;volatile
   881                           
   882                           ;lights_buttons.c: 18:     TRISFbits.TRISF2=1;
   883   0021E2  8486               	bsf	134,2,c	;volatile
   884                           
   885                           ;lights_buttons.c: 19:     ANSELFbits.ANSELF2=0;
   886   0021E4  010E               	movlb	14	; () banked
   887   0021E6  95B4               	bcf	180,2,b	;volatile
   888                           
   889                           ;lights_buttons.c: 21:     TRISFbits.TRISF3= 1;
   890   0021E8  8686               	bsf	134,3,c	;volatile
   891                           
   892                           ;lights_buttons.c: 22:     ANSELFbits.ANSELF3 = 0;
   893   0021EA  97B4               	bcf	180,3,b	;volatile
   894                           
   895                           ;lights_buttons.c: 24:     TRISDbits.TRISD7 = 0;
   896   0021EC  9E84               	bcf	132,7,c	;volatile
   897                           
   898                           ;lights_buttons.c: 25:     LATDbits.LATD7 = 0;
   899   0021EE  9E7C               	bcf	124,7,c	;volatile
   900                           
   901                           ;lights_buttons.c: 27:     TRISHbits.TRISH3 = 0;
   902   0021F0  9688               	bcf	136,3,c	;volatile
   903                           
   904                           ;lights_buttons.c: 28:     LATHbits.LATH3 = 0;
   905   0021F2  9680               	bcf	128,3,c	;volatile
   906   0021F4                     
   907                           ; BSR set to: 14
   908   0021F4  0012               	return		;funcret
   909   0021F6                     __end_of_ports_init:
   910                           	callstack 0
   911                           
   912 ;; *************** function _motor_init *****************
   913 ;; Defined at:
   914 ;;		line 104 in file "dc_motor.c"
   915 ;; Parameters:    Size  Location     Type
   916 ;;  mL              2    2[COMRAM] PTR struct DC_motor
   917 ;;		 -> motorL(9), 
   918 ;;  mR              2    4[COMRAM] PTR struct DC_motor
   919 ;;		 -> motorR(9), 
   920 ;; Auto vars:     Size  Location     Type
   921 ;;		None
   922 ;; Return value:  Size  Location     Type
   923 ;;                  1    wreg      void 
   924 ;; Registers used:
   925 ;;		wreg, status,2, status,0
   926 ;; Tracked objects:
   927 ;;		On entry : 0/0
   928 ;;		On exit  : 0/0
   929 ;;		Unchanged: 0/0
   930 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   931 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   932 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   933 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   934 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   935 ;;Total ram usage:        4 bytes
   936 ;; Hardware stack levels used: 1
   937 ;; Hardware stack levels required when called: 1
   938 ;; This function calls:
   939 ;;		Nothing
   940 ;; This function is called by:
   941 ;;		_complete_initialisation
   942 ;; This function uses a non-reentrant model
   943 ;;
   944                           
   945                           	psect	text3
   946   001FDA                     __ptext3:
   947                           	callstack 0
   948   001FDA                     _motor_init:
   949                           	callstack 28
   950   001FDA                     
   951                           ;dc_motor.c: 104: void motor_init(DC_motor *mL, DC_motor *mR);dc_motor.c: 105: {;dc_moto
      +                          r.c: 106:     motorL.power=0;
   952   001FDA  0E00               	movlw	0
   953   001FDC  0100               	movlb	0	; () banked
   954   001FDE  6FB9               	movwf	_motorL& (0+255),b
   955                           
   956                           ;dc_motor.c: 107:     motorL.direction=1;
   957   001FE0  0E01               	movlw	1
   958   001FE2  6FBA               	movwf	(_motorL+1)& (0+255),b
   959                           
   960                           ;dc_motor.c: 108:     motorL.brakemode=1;
   961   001FE4  0E01               	movlw	1
   962   001FE6  6FBB               	movwf	(_motorL+2)& (0+255),b
   963   001FE8                     
   964                           ; BSR set to: 0
   965                           ;dc_motor.c: 109:     motorL.posDutyHighByte=(unsigned char *)(&CCPR1H);
   966   001FE8  0EAA               	movlw	170
   967   001FEA  6FBE               	movwf	(_motorL+5)& (0+255),b
   968   001FEC  0E0F               	movlw	15
   969   001FEE  6FBF               	movwf	(_motorL+6)& (0+255),b
   970   001FF0                     
   971                           ; BSR set to: 0
   972                           ;dc_motor.c: 110:     motorL.negDutyHighByte=(unsigned char *)(&CCPR2H);
   973   001FF0  0EA6               	movlw	166
   974   001FF2  6FC0               	movwf	(_motorL+7)& (0+255),b
   975   001FF4  0E0F               	movlw	15
   976   001FF6  6FC1               	movwf	(_motorL+8)& (0+255),b
   977                           
   978                           ;dc_motor.c: 111:     motorL.PWMperiod=99;
   979   001FF8  0E00               	movlw	0
   980   001FFA  6FBD               	movwf	(_motorL+4)& (0+255),b
   981   001FFC  0E63               	movlw	99
   982   001FFE  6FBC               	movwf	(_motorL+3)& (0+255),b
   983                           
   984                           ;dc_motor.c: 113:     motorR.power=0;
   985   002000  0E00               	movlw	0
   986   002002  6FB0               	movwf	_motorR& (0+255),b
   987                           
   988                           ;dc_motor.c: 114:     motorR.direction=1;
   989   002004  0E01               	movlw	1
   990   002006  6FB1               	movwf	(_motorR+1)& (0+255),b
   991                           
   992                           ;dc_motor.c: 115:     motorR.brakemode=1;
   993   002008  0E01               	movlw	1
   994   00200A  6FB2               	movwf	(_motorR+2)& (0+255),b
   995   00200C                     
   996                           ; BSR set to: 0
   997                           ;dc_motor.c: 116:     motorR.posDutyHighByte=(unsigned char *)(&CCPR3H);
   998   00200C  0E25               	movlw	37
   999   00200E  6FB5               	movwf	(_motorR+5)& (0+255),b
  1000   002010  0E0F               	movlw	15
  1001   002012  6FB6               	movwf	(_motorR+6)& (0+255),b
  1002   002014                     
  1003                           ; BSR set to: 0
  1004                           ;dc_motor.c: 117:     motorR.negDutyHighByte=(unsigned char *)(&CCPR4H);
  1005   002014  0E21               	movlw	33
  1006   002016  6FB7               	movwf	(_motorR+7)& (0+255),b
  1007   002018  0E0F               	movlw	15
  1008   00201A  6FB8               	movwf	(_motorR+8)& (0+255),b
  1009                           
  1010                           ;dc_motor.c: 118:     motorR.PWMperiod=99;
  1011   00201C  0E00               	movlw	0
  1012   00201E  6FB4               	movwf	(_motorR+4)& (0+255),b
  1013   002020  0E63               	movlw	99
  1014   002022  6FB3               	movwf	(_motorR+3)& (0+255),b
  1015   002024                     
  1016                           ; BSR set to: 0
  1017   002024  0012               	return		;funcret
  1018   002026                     __end_of_motor_init:
  1019                           	callstack 0
  1020                           
  1021 ;; *************** function _interrupts_init *****************
  1022 ;; Defined at:
  1023 ;;		line 9 in file "interrupts.c"
  1024 ;; Parameters:    Size  Location     Type
  1025 ;;		None
  1026 ;; Auto vars:     Size  Location     Type
  1027 ;;		None
  1028 ;; Return value:  Size  Location     Type
  1029 ;;                  1    wreg      void 
  1030 ;; Registers used:
  1031 ;;		None
  1032 ;; Tracked objects:
  1033 ;;		On entry : 0/0
  1034 ;;		On exit  : 0/0
  1035 ;;		Unchanged: 0/0
  1036 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1037 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1038 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1039 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1040 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1041 ;;Total ram usage:        0 bytes
  1042 ;; Hardware stack levels used: 1
  1043 ;; Hardware stack levels required when called: 1
  1044 ;; This function calls:
  1045 ;;		Nothing
  1046 ;; This function is called by:
  1047 ;;		_complete_initialisation
  1048 ;; This function uses a non-reentrant model
  1049 ;;
  1050                           
  1051                           	psect	text4
  1052   002298                     __ptext4:
  1053                           	callstack 0
  1054   002298                     _interrupts_init:
  1055                           	callstack 28
  1056   002298                     
  1057                           ;interrupts.c: 11:     PIE0bits.TMR0IE = 1;
  1058   002298  010E               	movlb	14	; () banked
  1059   00229A  8B29               	bsf	41,5,b	;volatile
  1060                           
  1061                           ;interrupts.c: 12:     PIR0bits.TMR0IF = 0;
  1062   00229C  9B33               	bcf	51,5,b	;volatile
  1063                           
  1064                           ;interrupts.c: 13:     IPR0bits.TMR0IP = 0;
  1065   00229E  9B1F               	bcf	31,5,b	;volatile
  1066                           
  1067                           ;interrupts.c: 15:     INTCONbits.IPEN = 1;
  1068   0022A0  8AF2               	bsf	242,5,c	;volatile
  1069                           
  1070                           ;interrupts.c: 16:     INTCONbits.PEIE = 1;
  1071   0022A2  8CF2               	bsf	242,6,c	;volatile
  1072                           
  1073                           ;interrupts.c: 17:     INTCONbits.GIE = 1;
  1074   0022A4  8EF2               	bsf	242,7,c	;volatile
  1075   0022A6                     
  1076                           ; BSR set to: 14
  1077   0022A6  0012               	return		;funcret
  1078   0022A8                     __end_of_interrupts_init:
  1079                           	callstack 0
  1080                           
  1081 ;; *************** function _initUSART4 *****************
  1082 ;; Defined at:
  1083 ;;		line 7 in file "serial.c"
  1084 ;; Parameters:    Size  Location     Type
  1085 ;;		None
  1086 ;; Auto vars:     Size  Location     Type
  1087 ;;		None
  1088 ;; Return value:  Size  Location     Type
  1089 ;;                  1    wreg      void 
  1090 ;; Registers used:
  1091 ;;		wreg, status,2
  1092 ;; Tracked objects:
  1093 ;;		On entry : 0/0
  1094 ;;		On exit  : 0/0
  1095 ;;		Unchanged: 0/0
  1096 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1097 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1098 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1099 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1100 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1101 ;;Total ram usage:        0 bytes
  1102 ;; Hardware stack levels used: 1
  1103 ;; Hardware stack levels required when called: 1
  1104 ;; This function calls:
  1105 ;;		Nothing
  1106 ;; This function is called by:
  1107 ;;		_complete_initialisation
  1108 ;; This function uses a non-reentrant model
  1109 ;;
  1110                           
  1111                           	psect	text5
  1112   0021F6                     __ptext5:
  1113                           	callstack 0
  1114   0021F6                     _initUSART4:
  1115                           	callstack 28
  1116   0021F6                     
  1117                           ;serial.c: 9:     RC0PPS = 0x12;
  1118   0021F6  0E12               	movlw	18
  1119   0021F8  010E               	movlb	14	; () banked
  1120   0021FA  6F62               	movwf	98,b	;volatile
  1121                           
  1122                           ;serial.c: 10:     RX4PPS = 0x11;
  1123   0021FC  0E11               	movlw	17
  1124   0021FE  6F15               	movwf	21,b	;volatile
  1125   002200                     
  1126                           ; BSR set to: 14
  1127                           ;serial.c: 11:     TRISCbits.TRISC1 = 1;
  1128   002200  8283               	bsf	131,1,c	;volatile
  1129   002202                     
  1130                           ; BSR set to: 14
  1131                           ;serial.c: 14:     BAUD4CONbits.BRG16 = 0;
  1132   002202  97E9               	bcf	233,3,b	;volatile
  1133   002204                     
  1134                           ; BSR set to: 14
  1135                           ;serial.c: 15:     TX4STAbits.BRGH = 0;
  1136   002204  95E8               	bcf	232,2,b	;volatile
  1137                           
  1138                           ;serial.c: 16:     SP4BRGL = 51;
  1139   002206  0E33               	movlw	51
  1140   002208  6FE5               	movwf	229,b	;volatile
  1141                           
  1142                           ;serial.c: 17:     SP4BRGH = 0;
  1143   00220A  0E00               	movlw	0
  1144   00220C  6FE6               	movwf	230,b	;volatile
  1145   00220E                     
  1146                           ; BSR set to: 14
  1147                           ;serial.c: 19:     RC4STAbits.CREN = 1;
  1148   00220E  89E7               	bsf	231,4,b	;volatile
  1149   002210                     
  1150                           ; BSR set to: 14
  1151                           ;serial.c: 20:     TX4STAbits.TXEN = 1;
  1152   002210  8BE8               	bsf	232,5,b	;volatile
  1153   002212                     
  1154                           ; BSR set to: 14
  1155                           ;serial.c: 21:     RC4STAbits.SPEN = 1;
  1156   002212  8FE7               	bsf	231,7,b	;volatile
  1157   002214                     
  1158                           ; BSR set to: 14
  1159   002214  0012               	return		;funcret
  1160   002216                     __end_of_initUSART4:
  1161                           	callstack 0
  1162                           
  1163 ;; *************** function _initDCmotorsPWM *****************
  1164 ;; Defined at:
  1165 ;;		line 11 in file "dc_motor.c"
  1166 ;; Parameters:    Size  Location     Type
  1167 ;;  PWMperiod       2    2[COMRAM] unsigned int 
  1168 ;; Auto vars:     Size  Location     Type
  1169 ;;		None
  1170 ;; Return value:  Size  Location     Type
  1171 ;;                  1    wreg      void 
  1172 ;; Registers used:
  1173 ;;		wreg, status,2
  1174 ;; Tracked objects:
  1175 ;;		On entry : 0/0
  1176 ;;		On exit  : 0/0
  1177 ;;		Unchanged: 0/0
  1178 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1179 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1180 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1181 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1182 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1183 ;;Total ram usage:        2 bytes
  1184 ;; Hardware stack levels used: 1
  1185 ;; Hardware stack levels required when called: 1
  1186 ;; This function calls:
  1187 ;;		Nothing
  1188 ;; This function is called by:
  1189 ;;		_complete_initialisation
  1190 ;; This function uses a non-reentrant model
  1191 ;;
  1192                           
  1193                           	psect	text6
  1194   001BCA                     __ptext6:
  1195                           	callstack 0
  1196   001BCA                     _initDCmotorsPWM:
  1197                           	callstack 28
  1198   001BCA                     
  1199                           ;dc_motor.c: 13:     TRISEbits.TRISE2 = 0;
  1200   001BCA  9485               	bcf	133,2,c	;volatile
  1201                           
  1202                           ;dc_motor.c: 14:     TRISEbits.TRISE4 = 0;
  1203   001BCC  9885               	bcf	133,4,c	;volatile
  1204                           
  1205                           ;dc_motor.c: 15:     TRISCbits.TRISC7 = 0;
  1206   001BCE  9E83               	bcf	131,7,c	;volatile
  1207                           
  1208                           ;dc_motor.c: 16:     TRISGbits.TRISG6 = 0;
  1209   001BD0  9C87               	bcf	135,6,c	;volatile
  1210                           
  1211                           ;dc_motor.c: 18:     LATEbits.LATE2 = 0;
  1212   001BD2  947D               	bcf	125,2,c	;volatile
  1213                           
  1214                           ;dc_motor.c: 19:     LATEbits.LATE4 = 0;
  1215   001BD4  987D               	bcf	125,4,c	;volatile
  1216                           
  1217                           ;dc_motor.c: 20:     LATCbits.LATC7 = 0;
  1218   001BD6  9E7B               	bcf	123,7,c	;volatile
  1219                           
  1220                           ;dc_motor.c: 21:     LATGbits.LATG6 = 0;
  1221   001BD8  9C7F               	bcf	127,6,c	;volatile
  1222   001BDA                     
  1223                           ;dc_motor.c: 24:     RE2PPS=0x05;
  1224   001BDA  0E05               	movlw	5
  1225   001BDC  010E               	movlb	14	; () banked
  1226   001BDE  6F74               	movwf	116,b	;volatile
  1227                           
  1228                           ;dc_motor.c: 25:     RE4PPS=0x06;
  1229   001BE0  0E06               	movlw	6
  1230   001BE2  6F76               	movwf	118,b	;volatile
  1231                           
  1232                           ;dc_motor.c: 26:     RC7PPS=0x07;
  1233   001BE4  0E07               	movlw	7
  1234   001BE6  6F69               	movwf	105,b	;volatile
  1235                           
  1236                           ;dc_motor.c: 27:     RG6PPS=0x08;
  1237   001BE8  0E08               	movlw	8
  1238   001BEA  6F88               	movwf	136,b	;volatile
  1239                           
  1240                           ;dc_motor.c: 30:     T2CONbits.CKPS=0b100;
  1241   001BEC  50BD               	movf	189,w,c	;volatile
  1242   001BEE  0B8F               	andlw	-113
  1243   001BF0  0940               	iorlw	64
  1244   001BF2  6EBD               	movwf	189,c	;volatile
  1245                           
  1246                           ;dc_motor.c: 31:     T2HLTbits.MODE=0b00000;
  1247   001BF4  0EE0               	movlw	-32
  1248   001BF6  16BE               	andwf	190,f,c	;volatile
  1249                           
  1250                           ;dc_motor.c: 32:     T2CLKCONbits.CS=0b0001;
  1251   001BF8  50BF               	movf	191,w,c	;volatile
  1252   001BFA  0BF0               	andlw	-16
  1253   001BFC  0901               	iorlw	1
  1254   001BFE  6EBF               	movwf	191,c	;volatile
  1255   001C00                     
  1256                           ; BSR set to: 14
  1257                           ;dc_motor.c: 36:     T2PR=PWMperiod;
  1258   001C00  C003  FFBC         	movff	initDCmotorsPWM@PWMperiod,4028	;volatile
  1259   001C04                     
  1260                           ; BSR set to: 14
  1261                           ;dc_motor.c: 37:     T2CONbits.ON=1;
  1262   001C04  8EBD               	bsf	189,7,c	;volatile
  1263                           
  1264                           ;dc_motor.c: 41:     CCPR1H=0;
  1265   001C06  0E00               	movlw	0
  1266   001C08  6EAA               	movwf	170,c	;volatile
  1267                           
  1268                           ;dc_motor.c: 42:     CCPR2H=0;
  1269   001C0A  0E00               	movlw	0
  1270   001C0C  6EA6               	movwf	166,c	;volatile
  1271                           
  1272                           ;dc_motor.c: 43:     CCPR3H=0;
  1273   001C0E  0E00               	movlw	0
  1274   001C10  010F               	movlb	15	; () banked
  1275   001C12  6F25               	movwf	37,b	;volatile
  1276                           
  1277                           ;dc_motor.c: 44:     CCPR4H=0;
  1278   001C14  0E00               	movlw	0
  1279   001C16  6F21               	movwf	33,b	;volatile
  1280                           
  1281                           ;dc_motor.c: 47:     CCPTMRS0bits.C1TSEL=0;
  1282   001C18  0EFC               	movlw	-4
  1283   001C1A  16AD               	andwf	173,f,c	;volatile
  1284                           
  1285                           ;dc_motor.c: 48:     CCPTMRS0bits.C2TSEL=0;
  1286   001C1C  0EF3               	movlw	-13
  1287   001C1E  16AD               	andwf	173,f,c	;volatile
  1288                           
  1289                           ;dc_motor.c: 49:     CCPTMRS0bits.C3TSEL=0;
  1290   001C20  0ECF               	movlw	-49
  1291   001C22  16AD               	andwf	173,f,c	;volatile
  1292                           
  1293                           ;dc_motor.c: 50:     CCPTMRS0bits.C4TSEL=0;
  1294   001C24  0E3F               	movlw	-193
  1295   001C26  16AD               	andwf	173,f,c	;volatile
  1296   001C28                     
  1297                           ; BSR set to: 15
  1298                           ;dc_motor.c: 53:     CCP1CONbits.FMT=1;
  1299   001C28  88AB               	bsf	171,4,c	;volatile
  1300                           
  1301                           ;dc_motor.c: 54:     CCP1CONbits.CCP1MODE=0b1100;
  1302   001C2A  50AB               	movf	171,w,c	;volatile
  1303   001C2C  0BF0               	andlw	-16
  1304   001C2E  090C               	iorlw	12
  1305   001C30  6EAB               	movwf	171,c	;volatile
  1306   001C32                     
  1307                           ; BSR set to: 15
  1308                           ;dc_motor.c: 55:     CCP1CONbits.EN=1;
  1309   001C32  8EAB               	bsf	171,7,c	;volatile
  1310   001C34                     
  1311                           ; BSR set to: 15
  1312                           ;dc_motor.c: 58:     CCP2CONbits.FMT=1;
  1313   001C34  88A7               	bsf	167,4,c	;volatile
  1314                           
  1315                           ;dc_motor.c: 59:     CCP2CONbits.CCP2MODE=0b1100;
  1316   001C36  50A7               	movf	167,w,c	;volatile
  1317   001C38  0BF0               	andlw	-16
  1318   001C3A  090C               	iorlw	12
  1319   001C3C  6EA7               	movwf	167,c	;volatile
  1320   001C3E                     
  1321                           ; BSR set to: 15
  1322                           ;dc_motor.c: 60:     CCP2CONbits.EN=1;
  1323   001C3E  8EA7               	bsf	167,7,c	;volatile
  1324   001C40                     
  1325                           ; BSR set to: 15
  1326                           ;dc_motor.c: 64:     CCP3CONbits.FMT=1;
  1327   001C40  8926               	bsf	38,4,b	;volatile
  1328                           
  1329                           ;dc_motor.c: 65:     CCP3CONbits.CCP3MODE=0b1100;
  1330   001C42  5126               	movf	38,w,b	;volatile
  1331   001C44  0BF0               	andlw	-16
  1332   001C46  090C               	iorlw	12
  1333   001C48  6F26               	movwf	38,b	;volatile
  1334   001C4A                     
  1335                           ; BSR set to: 15
  1336                           ;dc_motor.c: 66:     CCP3CONbits.EN=1;
  1337   001C4A  8F26               	bsf	38,7,b	;volatile
  1338   001C4C                     
  1339                           ; BSR set to: 15
  1340                           ;dc_motor.c: 69:     CCP4CONbits.FMT=1;
  1341   001C4C  8922               	bsf	34,4,b	;volatile
  1342                           
  1343                           ;dc_motor.c: 70:     CCP4CONbits.CCP4MODE=0b1100;
  1344   001C4E  5122               	movf	34,w,b	;volatile
  1345   001C50  0BF0               	andlw	-16
  1346   001C52  090C               	iorlw	12
  1347   001C54  6F22               	movwf	34,b	;volatile
  1348   001C56                     
  1349                           ; BSR set to: 15
  1350                           ;dc_motor.c: 71:     CCP4CONbits.EN=1;
  1351   001C56  8F22               	bsf	34,7,b	;volatile
  1352   001C58                     
  1353                           ; BSR set to: 15
  1354   001C58  0012               	return		;funcret
  1355   001C5A                     __end_of_initDCmotorsPWM:
  1356                           	callstack 0
  1357                           
  1358 ;; *************** function _color_click_init *****************
  1359 ;; Defined at:
  1360 ;;		line 13 in file "color.c"
  1361 ;; Parameters:    Size  Location     Type
  1362 ;;		None
  1363 ;; Auto vars:     Size  Location     Type
  1364 ;;		None
  1365 ;; Return value:  Size  Location     Type
  1366 ;;                  1    wreg      void 
  1367 ;; Registers used:
  1368 ;;		wreg, status,2, status,0, cstack
  1369 ;; Tracked objects:
  1370 ;;		On entry : 0/0
  1371 ;;		On exit  : 0/0
  1372 ;;		Unchanged: 0/0
  1373 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1374 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1375 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1376 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1377 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1378 ;;Total ram usage:        1 bytes
  1379 ;; Hardware stack levels used: 1
  1380 ;; Hardware stack levels required when called: 4
  1381 ;; This function calls:
  1382 ;;		_I2C_2_Master_Init
  1383 ;;		_color_writetoaddr
  1384 ;; This function is called by:
  1385 ;;		_complete_initialisation
  1386 ;; This function uses a non-reentrant model
  1387 ;;
  1388                           
  1389                           	psect	text7
  1390   00212A                     __ptext7:
  1391                           	callstack 0
  1392   00212A                     _color_click_init:
  1393                           	callstack 25
  1394   00212A                     
  1395                           ;color.c: 16:     I2C_2_Master_Init();
  1396   00212A  ECAF  F010         	call	_I2C_2_Master_Init	;wreg free
  1397   00212E                     
  1398                           ;color.c: 18:   color_writetoaddr(0x00, 0x01);
  1399   00212E  0E01               	movlw	1
  1400   002130  6E05               	movwf	color_writetoaddr@value^0,c
  1401   002132  0E00               	movlw	0
  1402   002134  EC0B  F011         	call	_color_writetoaddr
  1403   002138                     
  1404                           ;color.c: 19:     _delay((unsigned long)((3)*(64000000/4000.0)));
  1405   002138  0E3F               	movlw	63
  1406   00213A  6E07               	movwf	??_color_click_init^0,c
  1407   00213C  0E55               	movlw	85
  1408   00213E                     u2537:
  1409   00213E  2EE8               	decfsz	wreg,f,c
  1410   002140  D7FE               	bra	u2537
  1411   002142  2E07               	decfsz	??_color_click_init^0,f,c
  1412   002144  D7FC               	bra	u2537
  1413   002146  F000               	nop	
  1414   002148                     
  1415                           ;color.c: 21:  color_writetoaddr(0x00, 0x03);
  1416   002148  0E03               	movlw	3
  1417   00214A  6E05               	movwf	color_writetoaddr@value^0,c
  1418   00214C  0E00               	movlw	0
  1419   00214E  EC0B  F011         	call	_color_writetoaddr
  1420   002152                     
  1421                           ;color.c: 23:  color_writetoaddr(0x01, 0xD5);
  1422   002152  0ED5               	movlw	213
  1423   002154  6E05               	movwf	color_writetoaddr@value^0,c
  1424   002156  0E01               	movlw	1
  1425   002158  EC0B  F011         	call	_color_writetoaddr
  1426   00215C  0012               	return		;funcret
  1427   00215E                     __end_of_color_click_init:
  1428                           	callstack 0
  1429                           
  1430 ;; *************** function _color_writetoaddr *****************
  1431 ;; Defined at:
  1432 ;;		line 28 in file "color.c"
  1433 ;; Parameters:    Size  Location     Type
  1434 ;;  address         1    wreg     unsigned char 
  1435 ;;  value           1    4[COMRAM] unsigned char 
  1436 ;; Auto vars:     Size  Location     Type
  1437 ;;  address         1    5[COMRAM] unsigned char 
  1438 ;; Return value:  Size  Location     Type
  1439 ;;                  1    wreg      void 
  1440 ;; Registers used:
  1441 ;;		wreg, status,2, status,0, cstack
  1442 ;; Tracked objects:
  1443 ;;		On entry : 0/0
  1444 ;;		On exit  : 0/0
  1445 ;;		Unchanged: 0/0
  1446 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1447 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1448 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1449 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1450 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1451 ;;Total ram usage:        2 bytes
  1452 ;; Hardware stack levels used: 1
  1453 ;; Hardware stack levels required when called: 3
  1454 ;; This function calls:
  1455 ;;		_I2C_2_Master_Start
  1456 ;;		_I2C_2_Master_Stop
  1457 ;;		_I2C_2_Master_Write
  1458 ;; This function is called by:
  1459 ;;		_color_click_init
  1460 ;; This function uses a non-reentrant model
  1461 ;;
  1462                           
  1463                           	psect	text8
  1464   002216                     __ptext8:
  1465                           	callstack 0
  1466   002216                     _color_writetoaddr:
  1467                           	callstack 25
  1468                           
  1469                           ;incstack = 0
  1470                           ;color_writetoaddr@address stored from wreg
  1471   002216  6E06               	movwf	color_writetoaddr@address^0,c
  1472   002218                     
  1473                           ;color.c: 29:     I2C_2_Master_Start();
  1474   002218  EC5F  F011         	call	_I2C_2_Master_Start	;wreg free
  1475                           
  1476                           ;color.c: 30:     I2C_2_Master_Write(0x52 | 0x00);
  1477   00221C  0E52               	movlw	82
  1478   00221E  EC54  F011         	call	_I2C_2_Master_Write
  1479                           
  1480                           ;color.c: 31:     I2C_2_Master_Write(0x80 | address);
  1481   002222  5006               	movf	color_writetoaddr@address^0,w,c
  1482   002224  0980               	iorlw	128
  1483   002226  EC54  F011         	call	_I2C_2_Master_Write
  1484                           
  1485                           ;color.c: 32:     I2C_2_Master_Write(value);
  1486   00222A  5005               	movf	color_writetoaddr@value^0,w,c
  1487   00222C  EC54  F011         	call	_I2C_2_Master_Write
  1488                           
  1489                           ;color.c: 33:     I2C_2_Master_Stop();
  1490   002230  EC5A  F011         	call	_I2C_2_Master_Stop	;wreg free
  1491   002234  0012               	return		;funcret
  1492   002236                     __end_of_color_writetoaddr:
  1493                           	callstack 0
  1494                           
  1495 ;; *************** function _I2C_2_Master_Init *****************
  1496 ;; Defined at:
  1497 ;;		line 7 in file "i2c.c"
  1498 ;; Parameters:    Size  Location     Type
  1499 ;;		None
  1500 ;; Auto vars:     Size  Location     Type
  1501 ;;		None
  1502 ;; Return value:  Size  Location     Type
  1503 ;;                  1    wreg      void 
  1504 ;; Registers used:
  1505 ;;		wreg, status,2
  1506 ;; Tracked objects:
  1507 ;;		On entry : 0/0
  1508 ;;		On exit  : 0/0
  1509 ;;		Unchanged: 0/0
  1510 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1511 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1512 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1513 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1514 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1515 ;;Total ram usage:        0 bytes
  1516 ;; Hardware stack levels used: 1
  1517 ;; Hardware stack levels required when called: 1
  1518 ;; This function calls:
  1519 ;;		Nothing
  1520 ;; This function is called by:
  1521 ;;		_color_click_init
  1522 ;;		_complete_initialisation
  1523 ;; This function uses a non-reentrant model
  1524 ;;
  1525                           
  1526                           	psect	text9
  1527   00215E                     __ptext9:
  1528                           	callstack 0
  1529   00215E                     _I2C_2_Master_Init:
  1530                           	callstack 27
  1531   00215E                     
  1532                           ;i2c.c: 10:   SSP2CON1bits.SSPM= 0b1000;
  1533   00215E  010E               	movlb	14	; () banked
  1534   002160  51D9               	movf	217,w,b	;volatile
  1535   002162  0BF0               	andlw	-16
  1536   002164  0908               	iorlw	8
  1537   002166  6FD9               	movwf	217,b	;volatile
  1538   002168                     
  1539                           ; BSR set to: 14
  1540                           ;i2c.c: 11:   SSP2CON1bits.SSPEN = 1;
  1541   002168  8BD9               	bsf	217,5,b	;volatile
  1542                           
  1543                           ;i2c.c: 12:   SSP2ADD = (64000000/(4*100000))-1;
  1544   00216A  0E9F               	movlw	159
  1545   00216C  6FD6               	movwf	214,b	;volatile
  1546   00216E                     
  1547                           ; BSR set to: 14
  1548                           ;i2c.c: 15:   TRISDbits.TRISD5 = 1;
  1549   00216E  8A84               	bsf	132,5,c	;volatile
  1550   002170                     
  1551                           ; BSR set to: 14
  1552                           ;i2c.c: 16:   TRISDbits.TRISD6 = 1;
  1553   002170  8C84               	bsf	132,6,c	;volatile
  1554   002172                     
  1555                           ; BSR set to: 14
  1556                           ;i2c.c: 17:   ANSELDbits.ANSELD5=0;
  1557   002172  9BA7               	bcf	167,5,b	;volatile
  1558   002174                     
  1559                           ; BSR set to: 14
  1560                           ;i2c.c: 18:   ANSELDbits.ANSELD6=0;
  1561   002174  9DA7               	bcf	167,6,b	;volatile
  1562                           
  1563                           ;i2c.c: 19:   SSP2DATPPS=0x1D;
  1564   002176  0E1D               	movlw	29
  1565   002178  6F1D               	movwf	29,b	;volatile
  1566                           
  1567                           ;i2c.c: 20:   SSP2CLKPPS=0x1E;
  1568   00217A  0E1E               	movlw	30
  1569   00217C  6F1C               	movwf	28,b	;volatile
  1570                           
  1571                           ;i2c.c: 21:   RD5PPS=0x1C;
  1572   00217E  0E1C               	movlw	28
  1573   002180  6F6F               	movwf	111,b	;volatile
  1574                           
  1575                           ;i2c.c: 22:   RD6PPS=0x1B;
  1576   002182  0E1B               	movlw	27
  1577   002184  6F70               	movwf	112,b	;volatile
  1578   002186                     
  1579                           ; BSR set to: 14
  1580   002186  0012               	return		;funcret
  1581   002188                     __end_of_I2C_2_Master_Init:
  1582                           	callstack 0
  1583                           
  1584 ;; *************** function _buggyLEDs_init *****************
  1585 ;; Defined at:
  1586 ;;		line 34 in file "lights_buttons.c"
  1587 ;; Parameters:    Size  Location     Type
  1588 ;;		None
  1589 ;; Auto vars:     Size  Location     Type
  1590 ;;		None
  1591 ;; Return value:  Size  Location     Type
  1592 ;;                  1    wreg      void 
  1593 ;; Registers used:
  1594 ;;		None
  1595 ;; Tracked objects:
  1596 ;;		On entry : 0/0
  1597 ;;		On exit  : 0/0
  1598 ;;		Unchanged: 0/0
  1599 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1600 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1601 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1602 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1603 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1604 ;;Total ram usage:        0 bytes
  1605 ;; Hardware stack levels used: 1
  1606 ;; Hardware stack levels required when called: 1
  1607 ;; This function calls:
  1608 ;;		Nothing
  1609 ;; This function is called by:
  1610 ;;		_complete_initialisation
  1611 ;; This function uses a non-reentrant model
  1612 ;;
  1613                           
  1614                           	psect	text10
  1615   002270                     __ptext10:
  1616                           	callstack 0
  1617   002270                     _buggyLEDs_init:
  1618                           	callstack 28
  1619   002270                     
  1620                           ;lights_buttons.c: 35:     LATHbits.LATH1 = 0;
  1621   002270  9280               	bcf	128,1,c	;volatile
  1622                           
  1623                           ;lights_buttons.c: 36:     LATDbits.LATD3 = 0;
  1624   002272  967C               	bcf	124,3,c	;volatile
  1625                           
  1626                           ;lights_buttons.c: 37:     LATDbits.LATD4 = 0;
  1627   002274  987C               	bcf	124,4,c	;volatile
  1628                           
  1629                           ;lights_buttons.c: 38:     LATFbits.LATF0 = 0;
  1630   002276  907E               	bcf	126,0,c	;volatile
  1631                           
  1632                           ;lights_buttons.c: 39:     LATHbits.LATH0 = 0;
  1633   002278  9080               	bcf	128,0,c	;volatile
  1634                           
  1635                           ;lights_buttons.c: 41:     TRISHbits.TRISH1 = 0;
  1636   00227A  9288               	bcf	136,1,c	;volatile
  1637                           
  1638                           ;lights_buttons.c: 42:     TRISDbits.TRISD3 = 0;
  1639   00227C  9684               	bcf	132,3,c	;volatile
  1640                           
  1641                           ;lights_buttons.c: 43:     TRISDbits.TRISD4 = 0;
  1642   00227E  9884               	bcf	132,4,c	;volatile
  1643                           
  1644                           ;lights_buttons.c: 44:     TRISFbits.TRISF0 = 0;
  1645   002280  9086               	bcf	134,0,c	;volatile
  1646                           
  1647                           ;lights_buttons.c: 45:     TRISHbits.TRISH0 = 0;
  1648   002282  9088               	bcf	136,0,c	;volatile
  1649   002284  0012               	return		;funcret
  1650   002286                     __end_of_buggyLEDs_init:
  1651                           	callstack 0
  1652                           
  1653 ;; *************** function _Timer0_init *****************
  1654 ;; Defined at:
  1655 ;;		line 8 in file "timers.c"
  1656 ;; Parameters:    Size  Location     Type
  1657 ;;		None
  1658 ;; Auto vars:     Size  Location     Type
  1659 ;;		None
  1660 ;; Return value:  Size  Location     Type
  1661 ;;                  1    wreg      void 
  1662 ;; Registers used:
  1663 ;;		wreg, status,2
  1664 ;; Tracked objects:
  1665 ;;		On entry : 0/0
  1666 ;;		On exit  : 0/0
  1667 ;;		Unchanged: 0/0
  1668 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1669 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1670 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1671 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1672 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1673 ;;Total ram usage:        0 bytes
  1674 ;; Hardware stack levels used: 1
  1675 ;; Hardware stack levels required when called: 1
  1676 ;; This function calls:
  1677 ;;		Nothing
  1678 ;; This function is called by:
  1679 ;;		_complete_initialisation
  1680 ;; This function uses a non-reentrant model
  1681 ;;
  1682                           
  1683                           	psect	text11
  1684   002236                     __ptext11:
  1685                           	callstack 0
  1686   002236                     _Timer0_init:
  1687                           	callstack 28
  1688   002236                     
  1689                           ;timers.c: 10:     T0CON1bits.T0CS=0b010;
  1690   002236  50D6               	movf	214,w,c	;volatile
  1691   002238  0B1F               	andlw	-225
  1692   00223A  0940               	iorlw	64
  1693   00223C  6ED6               	movwf	214,c	;volatile
  1694   00223E                     
  1695                           ;timers.c: 11:     T0CON1bits.T0ASYNC=1;
  1696   00223E  88D6               	bsf	214,4,c	;volatile
  1697                           
  1698                           ;timers.c: 12:     T0CON1bits.T0CKPS=0b0101;
  1699   002240  50D6               	movf	214,w,c	;volatile
  1700   002242  0BF0               	andlw	-16
  1701   002244  0905               	iorlw	5
  1702   002246  6ED6               	movwf	214,c	;volatile
  1703   002248                     
  1704                           ;timers.c: 13:     T0CON0bits.T016BIT=1;
  1705   002248  88D5               	bsf	213,4,c	;volatile
  1706                           
  1707                           ;timers.c: 16:     TMR0H=0;
  1708   00224A  0E00               	movlw	0
  1709   00224C  6ED4               	movwf	212,c	;volatile
  1710                           
  1711                           ;timers.c: 17:     TMR0L=0b00100011;
  1712   00224E  0E23               	movlw	35
  1713   002250  6ED3               	movwf	211,c	;volatile
  1714   002252                     
  1715                           ;timers.c: 18:     T0CON0bits.T0EN=1;
  1716   002252  8ED5               	bsf	213,7,c	;volatile
  1717   002254  0012               	return		;funcret
  1718   002256                     __end_of_Timer0_init:
  1719                           	callstack 0
  1720                           
  1721 ;; *************** function _ADC_init *****************
  1722 ;; Defined at:
  1723 ;;		line 8 in file "ADC.c"
  1724 ;; Parameters:    Size  Location     Type
  1725 ;;		None
  1726 ;; Auto vars:     Size  Location     Type
  1727 ;;		None
  1728 ;; Return value:  Size  Location     Type
  1729 ;;                  1    wreg      void 
  1730 ;; Registers used:
  1731 ;;		wreg, status,2
  1732 ;; Tracked objects:
  1733 ;;		On entry : 0/0
  1734 ;;		On exit  : 0/0
  1735 ;;		Unchanged: 0/0
  1736 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1737 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1738 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1739 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1740 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1741 ;;Total ram usage:        0 bytes
  1742 ;; Hardware stack levels used: 1
  1743 ;; Hardware stack levels required when called: 1
  1744 ;; This function calls:
  1745 ;;		Nothing
  1746 ;; This function is called by:
  1747 ;;		_complete_initialisation
  1748 ;; This function uses a non-reentrant model
  1749 ;;
  1750                           
  1751                           	psect	text12
  1752   002256                     __ptext12:
  1753                           	callstack 0
  1754   002256                     _ADC_init:
  1755                           	callstack 28
  1756   002256                     
  1757                           ;ADC.c: 10:     TRISFbits.TRISF6=1;
  1758   002256  8C86               	bsf	134,6,c	;volatile
  1759                           
  1760                           ;ADC.c: 11:     ANSELFbits.ANSELF6=1;
  1761   002258  010E               	movlb	14	; () banked
  1762   00225A  8DB4               	bsf	180,6,b	;volatile
  1763                           
  1764                           ;ADC.c: 13:     ADREFbits.ADNREF = 0;
  1765   00225C  010F               	movlb	15	; () banked
  1766   00225E  9958               	bcf	88,4,b	;volatile
  1767   002260                     
  1768                           ; BSR set to: 15
  1769                           ;ADC.c: 14:     ADREFbits.ADPREF = 0b00;
  1770   002260  0EFC               	movlw	-4
  1771   002262  1758               	andwf	88,f,b	;volatile
  1772                           
  1773                           ;ADC.c: 15:     ADPCH=0b101110;
  1774   002264  0E2E               	movlw	46
  1775   002266  6F5F               	movwf	95,b	;volatile
  1776   002268                     
  1777                           ; BSR set to: 15
  1778                           ;ADC.c: 16:     ADCON0bits.ADFM = 0;
  1779   002268  9460               	bcf	96,2,c	;volatile
  1780   00226A                     
  1781                           ; BSR set to: 15
  1782                           ;ADC.c: 17:     ADCON0bits.ADCS = 1;
  1783   00226A  8860               	bsf	96,4,c	;volatile
  1784   00226C                     
  1785                           ; BSR set to: 15
  1786                           ;ADC.c: 18:     ADCON0bits.ADON = 1;
  1787   00226C  8E60               	bsf	96,7,c	;volatile
  1788   00226E                     
  1789                           ; BSR set to: 15
  1790   00226E  0012               	return		;funcret
  1791   002270                     __end_of_ADC_init:
  1792                           	callstack 0
  1793                           
  1794 ;; *************** function _buggy_color_response *****************
  1795 ;; Defined at:
  1796 ;;		line 128 in file "color.c"
  1797 ;; Parameters:    Size  Location     Type
  1798 ;;  mL              2   54[COMRAM] PTR struct DC_motor
  1799 ;;		 -> motorL(9), 
  1800 ;;  mR              2   56[COMRAM] PTR struct DC_motor
  1801 ;;		 -> motorR(9), 
  1802 ;;  c               2   58[COMRAM] PTR struct colors
  1803 ;;		 -> color(20), 
  1804 ;; Auto vars:     Size  Location     Type
  1805 ;;		None
  1806 ;; Return value:  Size  Location     Type
  1807 ;;                  1    wreg      void 
  1808 ;; Registers used:
  1809 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1810 ;; Tracked objects:
  1811 ;;		On entry : 0/0
  1812 ;;		On exit  : 0/0
  1813 ;;		Unchanged: 0/0
  1814 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1815 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1816 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1817 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1818 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1819 ;;Total ram usage:        8 bytes
  1820 ;; Hardware stack levels used: 1
  1821 ;; Hardware stack levels required when called: 8
  1822 ;; This function calls:
  1823 ;;		_READcolor
  1824 ;;		___flge
  1825 ;;		_forward
  1826 ;;		_movement
  1827 ;;		_movement_return
  1828 ;;		_return_home
  1829 ;;		_space
  1830 ;;		_stop
  1831 ;;		_timer_reset
  1832 ;; This function is called by:
  1833 ;;		_main
  1834 ;; This function uses a non-reentrant model
  1835 ;;
  1836                           
  1837                           	psect	text13
  1838   000048                     __ptext13:
  1839                           	callstack 0
  1840   000048                     _buggy_color_response:
  1841                           	callstack 22
  1842   000048                     
  1843                           ;color.c: 130:     READcolor(&color);
  1844   000048  0E43               	movlw	low _color
  1845   00004A  6E2A               	movwf	READcolor@c^0,c
  1846   00004C  0E00               	movlw	high _color
  1847   00004E  6E2B               	movwf	(READcolor@c+1)^0,c
  1848   000050  ECD9  F009         	call	_READcolor	;wreg free
  1849   000054  0EC5               	movlw	197
  1850   000056  5C49               	subwf	(_color+6)^0,w,c
  1851   000058  0E09               	movlw	9
  1852   00005A  584A               	subwfb	(_color+7)^0,w,c
  1853   00005C  A0D8               	btfss	status,0,c
  1854   00005E  EF33  F000         	goto	u2161
  1855   000062  EF35  F000         	goto	u2160
  1856   000066                     u2161:
  1857   000066  EF77  F003         	goto	l3145
  1858   00006A                     u2160:
  1859   00006A                     
  1860                           ;color.c: 133:         timer_memory[timer_index] = timer_val;
  1861   00006A  0E60               	movlw	low _timer_memory
  1862   00006C  2441               	addwf	_timer_index^0,w,c
  1863   00006E  6ED9               	movwf	fsr2l,c
  1864   000070  6ADA               	clrf	fsr2h,c
  1865   000072  0E00               	movlw	high _timer_memory
  1866   000074  22DA               	addwfc	fsr2h,f,c
  1867   000076  C03F  FFDF         	movff	_timer_val,indf2
  1868   00007A                     
  1869                           ;color.c: 134:         timer_index ++;
  1870   00007A  2A41               	incf	_timer_index^0,f,c
  1871   00007C                     
  1872                           ;color.c: 135:         forward(mL,mR);
  1873   00007C  C037  F01C         	movff	buggy_color_response@mL,forward@mL
  1874   000080  C038  F01D         	movff	buggy_color_response@mL+1,forward@mL+1
  1875   000084  C039  F01E         	movff	buggy_color_response@mR,forward@mR
  1876   000088  C03A  F01F         	movff	buggy_color_response@mR+1,forward@mR+1
  1877   00008C  ECA3  F00C         	call	_forward	;wreg free
  1878   000090                     
  1879                           ;color.c: 136:         _delay((unsigned long)((50)*(64000000/4000.0)));
  1880   000090  0E05               	movlw	5
  1881   000092  6E3E               	movwf	(??_buggy_color_response+1)^0,c
  1882   000094  0E0F               	movlw	15
  1883   000096  6E3D               	movwf	??_buggy_color_response^0,c
  1884   000098  0EF1               	movlw	241
  1885   00009A                     u2547:
  1886   00009A  2EE8               	decfsz	wreg,f,c
  1887   00009C  D7FE               	bra	u2547
  1888   00009E  2E3D               	decfsz	??_buggy_color_response^0,f,c
  1889   0000A0  D7FC               	bra	u2547
  1890   0000A2  2E3E               	decfsz	(??_buggy_color_response+1)^0,f,c
  1891   0000A4  D7FA               	bra	u2547
  1892   0000A6  F000               	nop	
  1893   0000A8                     
  1894                           ;color.c: 137:         stop(mL,mR); _delay((unsigned long)((500)*(64000000/4000.0)));
  1895   0000A8  C037  F016         	movff	buggy_color_response@mL,stop@mL
  1896   0000AC  C038  F017         	movff	buggy_color_response@mL+1,stop@mL+1
  1897   0000B0  C039  F018         	movff	buggy_color_response@mR,stop@mR
  1898   0000B4  C03A  F019         	movff	buggy_color_response@mR+1,stop@mR+1
  1899   0000B8  EC8D  F00D         	call	_stop	;wreg free
  1900   0000BC  0E29               	movlw	41
  1901   0000BE  6E3E               	movwf	(??_buggy_color_response+1)^0,c
  1902   0000C0  0E96               	movlw	150
  1903   0000C2  6E3D               	movwf	??_buggy_color_response^0,c
  1904   0000C4  0E7F               	movlw	127
  1905   0000C6                     u2557:
  1906   0000C6  2EE8               	decfsz	wreg,f,c
  1907   0000C8  D7FE               	bra	u2557
  1908   0000CA  2E3D               	decfsz	??_buggy_color_response^0,f,c
  1909   0000CC  D7FC               	bra	u2557
  1910   0000CE  2E3E               	decfsz	(??_buggy_color_response+1)^0,f,c
  1911   0000D0  D7FA               	bra	u2557
  1912   0000D2  F000               	nop	
  1913   0000D4                     
  1914                           ;color.c: 138:         READcolor(&color); _delay((unsigned long)((500)*(64000000/4000.0)
      +                          ));
  1915   0000D4  0E43               	movlw	low _color
  1916   0000D6  6E2A               	movwf	READcolor@c^0,c
  1917   0000D8  0E00               	movlw	high _color
  1918   0000DA  6E2B               	movwf	(READcolor@c+1)^0,c
  1919   0000DC  ECD9  F009         	call	_READcolor	;wreg free
  1920   0000E0  0E29               	movlw	41
  1921   0000E2  6E3E               	movwf	(??_buggy_color_response+1)^0,c
  1922   0000E4  0E96               	movlw	150
  1923   0000E6  6E3D               	movwf	??_buggy_color_response^0,c
  1924   0000E8  0E7F               	movlw	127
  1925   0000EA                     u2567:
  1926   0000EA  2EE8               	decfsz	wreg,f,c
  1927   0000EC  D7FE               	bra	u2567
  1928   0000EE  2E3D               	decfsz	??_buggy_color_response^0,f,c
  1929   0000F0  D7FC               	bra	u2567
  1930   0000F2  2E3E               	decfsz	(??_buggy_color_response+1)^0,f,c
  1931   0000F4  D7FA               	bra	u2567
  1932   0000F6  F000               	nop	
  1933   0000F8                     
  1934                           ;color.c: 140:         if (color.R_norm > 0.77 && color.B_norm < 0.18 && color.G_norm < 
      +                          0.14){
  1935   0000F8  0EB8               	movlw	184
  1936   0000FA  6E03               	movwf	___flge@ff1^0,c
  1937   0000FC  0E1E               	movlw	30
  1938   0000FE  6E04               	movwf	(___flge@ff1+1)^0,c
  1939   000100  0E45               	movlw	69
  1940   000102  6E05               	movwf	(___flge@ff1+2)^0,c
  1941   000104  0E3F               	movlw	63
  1942   000106  6E06               	movwf	(___flge@ff1+3)^0,c
  1943   000108  C04B  F007         	movff	_color+8,___flge@ff2
  1944   00010C  C04C  F008         	movff	_color+9,___flge@ff2+1
  1945   000110  C04D  F009         	movff	_color+10,___flge@ff2+2
  1946   000114  C04E  F00A         	movff	_color+11,___flge@ff2+3
  1947   000118  ECA0  F00B         	call	___flge	;wreg free
  1948   00011C  B0D8               	btfsc	status,0,c
  1949   00011E  EF93  F000         	goto	u2171
  1950   000122  EF95  F000         	goto	u2170
  1951   000126                     u2171:
  1952   000126  EFDC  F000         	goto	l3045
  1953   00012A                     u2170:
  1954   00012A  C04F  F003         	movff	_color+12,___flge@ff1
  1955   00012E  C050  F004         	movff	_color+13,___flge@ff1+1
  1956   000132  C051  F005         	movff	_color+14,___flge@ff1+2
  1957   000136  C052  F006         	movff	_color+15,___flge@ff1+3
  1958   00013A  0EEC               	movlw	236
  1959   00013C  6E07               	movwf	___flge@ff2^0,c
  1960   00013E  0E51               	movlw	81
  1961   000140  6E08               	movwf	(___flge@ff2+1)^0,c
  1962   000142  0E38               	movlw	56
  1963   000144  6E09               	movwf	(___flge@ff2+2)^0,c
  1964   000146  0E3E               	movlw	62
  1965   000148  6E0A               	movwf	(___flge@ff2+3)^0,c
  1966   00014A  ECA0  F00B         	call	___flge	;wreg free
  1967   00014E  B0D8               	btfsc	status,0,c
  1968   000150  EFAC  F000         	goto	u2181
  1969   000154  EFAE  F000         	goto	u2180
  1970   000158                     u2181:
  1971   000158  EFDC  F000         	goto	l3045
  1972   00015C                     u2180:
  1973   00015C  C053  F003         	movff	_color+16,___flge@ff1
  1974   000160  C054  F004         	movff	_color+17,___flge@ff1+1
  1975   000164  C055  F005         	movff	_color+18,___flge@ff1+2
  1976   000168  C056  F006         	movff	_color+19,___flge@ff1+3
  1977   00016C  0E29               	movlw	41
  1978   00016E  6E07               	movwf	___flge@ff2^0,c
  1979   000170  0E5C               	movlw	92
  1980   000172  6E08               	movwf	(___flge@ff2+1)^0,c
  1981   000174  0E0F               	movlw	15
  1982   000176  6E09               	movwf	(___flge@ff2+2)^0,c
  1983   000178  0E3E               	movlw	62
  1984   00017A  6E0A               	movwf	(___flge@ff2+3)^0,c
  1985   00017C  ECA0  F00B         	call	___flge	;wreg free
  1986   000180  B0D8               	btfsc	status,0,c
  1987   000182  EFC5  F000         	goto	u2191
  1988   000186  EFC7  F000         	goto	u2190
  1989   00018A                     u2191:
  1990   00018A  EFDC  F000         	goto	l3045
  1991   00018E                     u2190:
  1992   00018E                     
  1993                           ;color.c: 141:             card_memory[card_count] = 2;
  1994   00018E  0E88               	movlw	low _card_memory
  1995   000190  2442               	addwf	_card_count^0,w,c
  1996   000192  6ED9               	movwf	fsr2l,c
  1997   000194  6ADA               	clrf	fsr2h,c
  1998   000196  0E00               	movlw	high _card_memory
  1999   000198  22DA               	addwfc	fsr2h,f,c
  2000   00019A  0E02               	movlw	2
  2001   00019C  6EDF               	movwf	indf2,c
  2002   00019E                     
  2003                           ;color.c: 142:             card_count ++;
  2004   00019E  2A42               	incf	_card_count^0,f,c
  2005   0001A0                     
  2006                           ;color.c: 143:             movement(mL,mR,1);
  2007   0001A0  C037  F026         	movff	buggy_color_response@mL,movement@mL
  2008   0001A4  C038  F027         	movff	buggy_color_response@mL+1,movement@mL+1
  2009   0001A8  C039  F028         	movff	buggy_color_response@mR,movement@mR
  2010   0001AC  C03A  F029         	movff	buggy_color_response@mR+1,movement@mR+1
  2011   0001B0  0E01               	movlw	1
  2012   0001B2  6E2A               	movwf	movement@count^0,c
  2013   0001B4  EC4F  F005         	call	_movement	;wreg free
  2014   0001B8                     l3045:
  2015                           
  2016                           ;color.c: 147:         if (color.B_norm < 0.25 && color.G_norm > 0.40) {
  2017   0001B8  C04F  F003         	movff	_color+12,___flge@ff1
  2018   0001BC  C050  F004         	movff	_color+13,___flge@ff1+1
  2019   0001C0  C051  F005         	movff	_color+14,___flge@ff1+2
  2020   0001C4  C052  F006         	movff	_color+15,___flge@ff1+3
  2021   0001C8  0E00               	movlw	0
  2022   0001CA  6E07               	movwf	___flge@ff2^0,c
  2023   0001CC  0E00               	movlw	0
  2024   0001CE  6E08               	movwf	(___flge@ff2+1)^0,c
  2025   0001D0  0E80               	movlw	128
  2026   0001D2  6E09               	movwf	(___flge@ff2+2)^0,c
  2027   0001D4  0E3E               	movlw	62
  2028   0001D6  6E0A               	movwf	(___flge@ff2+3)^0,c
  2029   0001D8  ECA0  F00B         	call	___flge	;wreg free
  2030   0001DC  B0D8               	btfsc	status,0,c
  2031   0001DE  EFF3  F000         	goto	u2201
  2032   0001E2  EFF5  F000         	goto	u2200
  2033   0001E6                     u2201:
  2034   0001E6  EF23  F001         	goto	l3055
  2035   0001EA                     u2200:
  2036   0001EA  0ECD               	movlw	205
  2037   0001EC  6E03               	movwf	___flge@ff1^0,c
  2038   0001EE  0ECC               	movlw	204
  2039   0001F0  6E04               	movwf	(___flge@ff1+1)^0,c
  2040   0001F2  0ECC               	movlw	204
  2041   0001F4  6E05               	movwf	(___flge@ff1+2)^0,c
  2042   0001F6  0E3E               	movlw	62
  2043   0001F8  6E06               	movwf	(___flge@ff1+3)^0,c
  2044   0001FA  C053  F007         	movff	_color+16,___flge@ff2
  2045   0001FE  C054  F008         	movff	_color+17,___flge@ff2+1
  2046   000202  C055  F009         	movff	_color+18,___flge@ff2+2
  2047   000206  C056  F00A         	movff	_color+19,___flge@ff2+3
  2048   00020A  ECA0  F00B         	call	___flge	;wreg free
  2049   00020E  B0D8               	btfsc	status,0,c
  2050   000210  EF0C  F001         	goto	u2211
  2051   000214  EF0E  F001         	goto	u2210
  2052   000218                     u2211:
  2053   000218  EF23  F001         	goto	l3055
  2054   00021C                     u2210:
  2055   00021C                     
  2056                           ;color.c: 148:             card_memory[card_count] = 1;
  2057   00021C  0E88               	movlw	low _card_memory
  2058   00021E  2442               	addwf	_card_count^0,w,c
  2059   000220  6ED9               	movwf	fsr2l,c
  2060   000222  6ADA               	clrf	fsr2h,c
  2061   000224  0E00               	movlw	high _card_memory
  2062   000226  22DA               	addwfc	fsr2h,f,c
  2063   000228  0E01               	movlw	1
  2064   00022A  6EDF               	movwf	indf2,c
  2065   00022C                     
  2066                           ;color.c: 149:             card_count ++;
  2067   00022C  2A42               	incf	_card_count^0,f,c
  2068   00022E                     
  2069                           ;color.c: 150:             movement(mL,mR,2);
  2070   00022E  C037  F026         	movff	buggy_color_response@mL,movement@mL
  2071   000232  C038  F027         	movff	buggy_color_response@mL+1,movement@mL+1
  2072   000236  C039  F028         	movff	buggy_color_response@mR,movement@mR
  2073   00023A  C03A  F029         	movff	buggy_color_response@mR+1,movement@mR+1
  2074   00023E  0E02               	movlw	2
  2075   000240  6E2A               	movwf	movement@count^0,c
  2076   000242  EC4F  F005         	call	_movement	;wreg free
  2077   000246                     l3055:
  2078                           
  2079                           ;color.c: 154:         if (color.R_norm < 0.38 && color.B_norm > 0.32 && color.G_norm > 
      +                          0.34){
  2080   000246  C04B  F003         	movff	_color+8,___flge@ff1
  2081   00024A  C04C  F004         	movff	_color+9,___flge@ff1+1
  2082   00024E  C04D  F005         	movff	_color+10,___flge@ff1+2
  2083   000252  C04E  F006         	movff	_color+11,___flge@ff1+3
  2084   000256  0E5C               	movlw	92
  2085   000258  6E07               	movwf	___flge@ff2^0,c
  2086   00025A  0E8F               	movlw	143
  2087   00025C  6E08               	movwf	(___flge@ff2+1)^0,c
  2088   00025E  0EC2               	movlw	194
  2089   000260  6E09               	movwf	(___flge@ff2+2)^0,c
  2090   000262  0E3E               	movlw	62
  2091   000264  6E0A               	movwf	(___flge@ff2+3)^0,c
  2092   000266  ECA0  F00B         	call	___flge	;wreg free
  2093   00026A  B0D8               	btfsc	status,0,c
  2094   00026C  EF3A  F001         	goto	u2221
  2095   000270  EF3C  F001         	goto	u2220
  2096   000274                     u2221:
  2097   000274  EF83  F001         	goto	l3067
  2098   000278                     u2220:
  2099   000278  0E0A               	movlw	10
  2100   00027A  6E03               	movwf	___flge@ff1^0,c
  2101   00027C  0ED7               	movlw	215
  2102   00027E  6E04               	movwf	(___flge@ff1+1)^0,c
  2103   000280  0EA3               	movlw	163
  2104   000282  6E05               	movwf	(___flge@ff1+2)^0,c
  2105   000284  0E3E               	movlw	62
  2106   000286  6E06               	movwf	(___flge@ff1+3)^0,c
  2107   000288  C04F  F007         	movff	_color+12,___flge@ff2
  2108   00028C  C050  F008         	movff	_color+13,___flge@ff2+1
  2109   000290  C051  F009         	movff	_color+14,___flge@ff2+2
  2110   000294  C052  F00A         	movff	_color+15,___flge@ff2+3
  2111   000298  ECA0  F00B         	call	___flge	;wreg free
  2112   00029C  B0D8               	btfsc	status,0,c
  2113   00029E  EF53  F001         	goto	u2231
  2114   0002A2  EF55  F001         	goto	u2230
  2115   0002A6                     u2231:
  2116   0002A6  EF83  F001         	goto	l3067
  2117   0002AA                     u2230:
  2118   0002AA  0E7B               	movlw	123
  2119   0002AC  6E03               	movwf	___flge@ff1^0,c
  2120   0002AE  0E14               	movlw	20
  2121   0002B0  6E04               	movwf	(___flge@ff1+1)^0,c
  2122   0002B2  0EAE               	movlw	174
  2123   0002B4  6E05               	movwf	(___flge@ff1+2)^0,c
  2124   0002B6  0E3E               	movlw	62
  2125   0002B8  6E06               	movwf	(___flge@ff1+3)^0,c
  2126   0002BA  C053  F007         	movff	_color+16,___flge@ff2
  2127   0002BE  C054  F008         	movff	_color+17,___flge@ff2+1
  2128   0002C2  C055  F009         	movff	_color+18,___flge@ff2+2
  2129   0002C6  C056  F00A         	movff	_color+19,___flge@ff2+3
  2130   0002CA  ECA0  F00B         	call	___flge	;wreg free
  2131   0002CE  B0D8               	btfsc	status,0,c
  2132   0002D0  EF6C  F001         	goto	u2241
  2133   0002D4  EF6E  F001         	goto	u2240
  2134   0002D8                     u2241:
  2135   0002D8  EF83  F001         	goto	l3067
  2136   0002DC                     u2240:
  2137   0002DC                     
  2138                           ;color.c: 155:             card_memory[card_count] = 3;
  2139   0002DC  0E88               	movlw	low _card_memory
  2140   0002DE  2442               	addwf	_card_count^0,w,c
  2141   0002E0  6ED9               	movwf	fsr2l,c
  2142   0002E2  6ADA               	clrf	fsr2h,c
  2143   0002E4  0E00               	movlw	high _card_memory
  2144   0002E6  22DA               	addwfc	fsr2h,f,c
  2145   0002E8  0E03               	movlw	3
  2146   0002EA  6EDF               	movwf	indf2,c
  2147   0002EC                     
  2148                           ;color.c: 156:             card_count ++;
  2149   0002EC  2A42               	incf	_card_count^0,f,c
  2150   0002EE                     
  2151                           ;color.c: 157:             movement(mL,mR,3);
  2152   0002EE  C037  F026         	movff	buggy_color_response@mL,movement@mL
  2153   0002F2  C038  F027         	movff	buggy_color_response@mL+1,movement@mL+1
  2154   0002F6  C039  F028         	movff	buggy_color_response@mR,movement@mR
  2155   0002FA  C03A  F029         	movff	buggy_color_response@mR+1,movement@mR+1
  2156   0002FE  0E03               	movlw	3
  2157   000300  6E2A               	movwf	movement@count^0,c
  2158   000302  EC4F  F005         	call	_movement	;wreg free
  2159   000306                     l3067:
  2160                           
  2161                           ;color.c: 161:         if (color.R_norm > 0.52 && color.G_norm > 0.32){
  2162   000306  0EB8               	movlw	184
  2163   000308  6E03               	movwf	___flge@ff1^0,c
  2164   00030A  0E1E               	movlw	30
  2165   00030C  6E04               	movwf	(___flge@ff1+1)^0,c
  2166   00030E  0E05               	movlw	5
  2167   000310  6E05               	movwf	(___flge@ff1+2)^0,c
  2168   000312  0E3F               	movlw	63
  2169   000314  6E06               	movwf	(___flge@ff1+3)^0,c
  2170   000316  C04B  F007         	movff	_color+8,___flge@ff2
  2171   00031A  C04C  F008         	movff	_color+9,___flge@ff2+1
  2172   00031E  C04D  F009         	movff	_color+10,___flge@ff2+2
  2173   000322  C04E  F00A         	movff	_color+11,___flge@ff2+3
  2174   000326  ECA0  F00B         	call	___flge	;wreg free
  2175   00032A  B0D8               	btfsc	status,0,c
  2176   00032C  EF9A  F001         	goto	u2251
  2177   000330  EF9C  F001         	goto	u2250
  2178   000334                     u2251:
  2179   000334  EFCA  F001         	goto	l3077
  2180   000338                     u2250:
  2181   000338  0E0A               	movlw	10
  2182   00033A  6E03               	movwf	___flge@ff1^0,c
  2183   00033C  0ED7               	movlw	215
  2184   00033E  6E04               	movwf	(___flge@ff1+1)^0,c
  2185   000340  0EA3               	movlw	163
  2186   000342  6E05               	movwf	(___flge@ff1+2)^0,c
  2187   000344  0E3E               	movlw	62
  2188   000346  6E06               	movwf	(___flge@ff1+3)^0,c
  2189   000348  C053  F007         	movff	_color+16,___flge@ff2
  2190   00034C  C054  F008         	movff	_color+17,___flge@ff2+1
  2191   000350  C055  F009         	movff	_color+18,___flge@ff2+2
  2192   000354  C056  F00A         	movff	_color+19,___flge@ff2+3
  2193   000358  ECA0  F00B         	call	___flge	;wreg free
  2194   00035C  B0D8               	btfsc	status,0,c
  2195   00035E  EFB3  F001         	goto	u2261
  2196   000362  EFB5  F001         	goto	u2260
  2197   000366                     u2261:
  2198   000366  EFCA  F001         	goto	l3077
  2199   00036A                     u2260:
  2200   00036A                     
  2201                           ;color.c: 162:             card_memory[card_count] = 9;
  2202   00036A  0E88               	movlw	low _card_memory
  2203   00036C  2442               	addwf	_card_count^0,w,c
  2204   00036E  6ED9               	movwf	fsr2l,c
  2205   000370  6ADA               	clrf	fsr2h,c
  2206   000372  0E00               	movlw	high _card_memory
  2207   000374  22DA               	addwfc	fsr2h,f,c
  2208   000376  0E09               	movlw	9
  2209   000378  6EDF               	movwf	indf2,c
  2210   00037A                     
  2211                           ;color.c: 163:             card_count ++;
  2212   00037A  2A42               	incf	_card_count^0,f,c
  2213   00037C                     
  2214                           ;color.c: 164:             movement(mL,mR,4);
  2215   00037C  C037  F026         	movff	buggy_color_response@mL,movement@mL
  2216   000380  C038  F027         	movff	buggy_color_response@mL+1,movement@mL+1
  2217   000384  C039  F028         	movff	buggy_color_response@mR,movement@mR
  2218   000388  C03A  F029         	movff	buggy_color_response@mR+1,movement@mR+1
  2219   00038C  0E04               	movlw	4
  2220   00038E  6E2A               	movwf	movement@count^0,c
  2221   000390  EC4F  F005         	call	_movement	;wreg free
  2222   000394                     l3077:
  2223                           
  2224                           ;color.c: 168:         if (color.R_norm > 0.50 && color.B_norm > 0.24 && color.G_norm < 
      +                          0.33){
  2225   000394  0E00               	movlw	0
  2226   000396  6E03               	movwf	___flge@ff1^0,c
  2227   000398  0E00               	movlw	0
  2228   00039A  6E04               	movwf	(___flge@ff1+1)^0,c
  2229   00039C  0E00               	movlw	0
  2230   00039E  6E05               	movwf	(___flge@ff1+2)^0,c
  2231   0003A0  0E3F               	movlw	63
  2232   0003A2  6E06               	movwf	(___flge@ff1+3)^0,c
  2233   0003A4  C04B  F007         	movff	_color+8,___flge@ff2
  2234   0003A8  C04C  F008         	movff	_color+9,___flge@ff2+1
  2235   0003AC  C04D  F009         	movff	_color+10,___flge@ff2+2
  2236   0003B0  C04E  F00A         	movff	_color+11,___flge@ff2+3
  2237   0003B4  ECA0  F00B         	call	___flge	;wreg free
  2238   0003B8  B0D8               	btfsc	status,0,c
  2239   0003BA  EFE1  F001         	goto	u2271
  2240   0003BE  EFE3  F001         	goto	u2270
  2241   0003C2                     u2271:
  2242   0003C2  EF2A  F002         	goto	l3089
  2243   0003C6                     u2270:
  2244   0003C6  0E8F               	movlw	143
  2245   0003C8  6E03               	movwf	___flge@ff1^0,c
  2246   0003CA  0EC2               	movlw	194
  2247   0003CC  6E04               	movwf	(___flge@ff1+1)^0,c
  2248   0003CE  0E75               	movlw	117
  2249   0003D0  6E05               	movwf	(___flge@ff1+2)^0,c
  2250   0003D2  0E3E               	movlw	62
  2251   0003D4  6E06               	movwf	(___flge@ff1+3)^0,c
  2252   0003D6  C04F  F007         	movff	_color+12,___flge@ff2
  2253   0003DA  C050  F008         	movff	_color+13,___flge@ff2+1
  2254   0003DE  C051  F009         	movff	_color+14,___flge@ff2+2
  2255   0003E2  C052  F00A         	movff	_color+15,___flge@ff2+3
  2256   0003E6  ECA0  F00B         	call	___flge	;wreg free
  2257   0003EA  B0D8               	btfsc	status,0,c
  2258   0003EC  EFFA  F001         	goto	u2281
  2259   0003F0  EFFC  F001         	goto	u2280
  2260   0003F4                     u2281:
  2261   0003F4  EF2A  F002         	goto	l3089
  2262   0003F8                     u2280:
  2263   0003F8  C053  F003         	movff	_color+16,___flge@ff1
  2264   0003FC  C054  F004         	movff	_color+17,___flge@ff1+1
  2265   000400  C055  F005         	movff	_color+18,___flge@ff1+2
  2266   000404  C056  F006         	movff	_color+19,___flge@ff1+3
  2267   000408  0EC3               	movlw	195
  2268   00040A  6E07               	movwf	___flge@ff2^0,c
  2269   00040C  0EF5               	movlw	245
  2270   00040E  6E08               	movwf	(___flge@ff2+1)^0,c
  2271   000410  0EA8               	movlw	168
  2272   000412  6E09               	movwf	(___flge@ff2+2)^0,c
  2273   000414  0E3E               	movlw	62
  2274   000416  6E0A               	movwf	(___flge@ff2+3)^0,c
  2275   000418  ECA0  F00B         	call	___flge	;wreg free
  2276   00041C  B0D8               	btfsc	status,0,c
  2277   00041E  EF13  F002         	goto	u2291
  2278   000422  EF15  F002         	goto	u2290
  2279   000426                     u2291:
  2280   000426  EF2A  F002         	goto	l3089
  2281   00042A                     u2290:
  2282   00042A                     
  2283                           ;color.c: 169:             card_memory[card_count] = 10;
  2284   00042A  0E88               	movlw	low _card_memory
  2285   00042C  2442               	addwf	_card_count^0,w,c
  2286   00042E  6ED9               	movwf	fsr2l,c
  2287   000430  6ADA               	clrf	fsr2h,c
  2288   000432  0E00               	movlw	high _card_memory
  2289   000434  22DA               	addwfc	fsr2h,f,c
  2290   000436  0E0A               	movlw	10
  2291   000438  6EDF               	movwf	indf2,c
  2292   00043A                     
  2293                           ;color.c: 170:             card_count ++;
  2294   00043A  2A42               	incf	_card_count^0,f,c
  2295   00043C                     
  2296                           ;color.c: 171:             movement(mL,mR,5);
  2297   00043C  C037  F026         	movff	buggy_color_response@mL,movement@mL
  2298   000440  C038  F027         	movff	buggy_color_response@mL+1,movement@mL+1
  2299   000444  C039  F028         	movff	buggy_color_response@mR,movement@mR
  2300   000448  C03A  F029         	movff	buggy_color_response@mR+1,movement@mR+1
  2301   00044C  0E05               	movlw	5
  2302   00044E  6E2A               	movwf	movement@count^0,c
  2303   000450  EC4F  F005         	call	_movement	;wreg free
  2304   000454                     l3089:
  2305                           
  2306                           ;color.c: 175:         if (color.R_norm > 0.60 && color.B_norm < 0.22 && color.G_norm > 
      +                          0.23){
  2307   000454  0E9A               	movlw	154
  2308   000456  6E03               	movwf	___flge@ff1^0,c
  2309   000458  0E99               	movlw	153
  2310   00045A  6E04               	movwf	(___flge@ff1+1)^0,c
  2311   00045C  0E19               	movlw	25
  2312   00045E  6E05               	movwf	(___flge@ff1+2)^0,c
  2313   000460  0E3F               	movlw	63
  2314   000462  6E06               	movwf	(___flge@ff1+3)^0,c
  2315   000464  C04B  F007         	movff	_color+8,___flge@ff2
  2316   000468  C04C  F008         	movff	_color+9,___flge@ff2+1
  2317   00046C  C04D  F009         	movff	_color+10,___flge@ff2+2
  2318   000470  C04E  F00A         	movff	_color+11,___flge@ff2+3
  2319   000474  ECA0  F00B         	call	___flge	;wreg free
  2320   000478  B0D8               	btfsc	status,0,c
  2321   00047A  EF41  F002         	goto	u2301
  2322   00047E  EF43  F002         	goto	u2300
  2323   000482                     u2301:
  2324   000482  EF8A  F002         	goto	l3101
  2325   000486                     u2300:
  2326   000486  C04F  F003         	movff	_color+12,___flge@ff1
  2327   00048A  C050  F004         	movff	_color+13,___flge@ff1+1
  2328   00048E  C051  F005         	movff	_color+14,___flge@ff1+2
  2329   000492  C052  F006         	movff	_color+15,___flge@ff1+3
  2330   000496  0EAE               	movlw	174
  2331   000498  6E07               	movwf	___flge@ff2^0,c
  2332   00049A  0E47               	movlw	71
  2333   00049C  6E08               	movwf	(___flge@ff2+1)^0,c
  2334   00049E  0E61               	movlw	97
  2335   0004A0  6E09               	movwf	(___flge@ff2+2)^0,c
  2336   0004A2  0E3E               	movlw	62
  2337   0004A4  6E0A               	movwf	(___flge@ff2+3)^0,c
  2338   0004A6  ECA0  F00B         	call	___flge	;wreg free
  2339   0004AA  B0D8               	btfsc	status,0,c
  2340   0004AC  EF5A  F002         	goto	u2311
  2341   0004B0  EF5C  F002         	goto	u2310
  2342   0004B4                     u2311:
  2343   0004B4  EF8A  F002         	goto	l3101
  2344   0004B8                     u2310:
  2345   0004B8  0E1F               	movlw	31
  2346   0004BA  6E03               	movwf	___flge@ff1^0,c
  2347   0004BC  0E85               	movlw	133
  2348   0004BE  6E04               	movwf	(___flge@ff1+1)^0,c
  2349   0004C0  0E6B               	movlw	107
  2350   0004C2  6E05               	movwf	(___flge@ff1+2)^0,c
  2351   0004C4  0E3E               	movlw	62
  2352   0004C6  6E06               	movwf	(___flge@ff1+3)^0,c
  2353   0004C8  C053  F007         	movff	_color+16,___flge@ff2
  2354   0004CC  C054  F008         	movff	_color+17,___flge@ff2+1
  2355   0004D0  C055  F009         	movff	_color+18,___flge@ff2+2
  2356   0004D4  C056  F00A         	movff	_color+19,___flge@ff2+3
  2357   0004D8  ECA0  F00B         	call	___flge	;wreg free
  2358   0004DC  B0D8               	btfsc	status,0,c
  2359   0004DE  EF73  F002         	goto	u2321
  2360   0004E2  EF75  F002         	goto	u2320
  2361   0004E6                     u2321:
  2362   0004E6  EF8A  F002         	goto	l3101
  2363   0004EA                     u2320:
  2364   0004EA                     
  2365                           ;color.c: 176:             card_memory[card_count] = 7;
  2366   0004EA  0E88               	movlw	low _card_memory
  2367   0004EC  2442               	addwf	_card_count^0,w,c
  2368   0004EE  6ED9               	movwf	fsr2l,c
  2369   0004F0  6ADA               	clrf	fsr2h,c
  2370   0004F2  0E00               	movlw	high _card_memory
  2371   0004F4  22DA               	addwfc	fsr2h,f,c
  2372   0004F6  0E07               	movlw	7
  2373   0004F8  6EDF               	movwf	indf2,c
  2374   0004FA                     
  2375                           ;color.c: 177:             card_count ++;
  2376   0004FA  2A42               	incf	_card_count^0,f,c
  2377   0004FC                     
  2378                           ;color.c: 178:             movement(mL,mR,6);
  2379   0004FC  C037  F026         	movff	buggy_color_response@mL,movement@mL
  2380   000500  C038  F027         	movff	buggy_color_response@mL+1,movement@mL+1
  2381   000504  C039  F028         	movff	buggy_color_response@mR,movement@mR
  2382   000508  C03A  F029         	movff	buggy_color_response@mR+1,movement@mR+1
  2383   00050C  0E06               	movlw	6
  2384   00050E  6E2A               	movwf	movement@count^0,c
  2385   000510  EC4F  F005         	call	_movement	;wreg free
  2386   000514                     l3101:
  2387                           
  2388                           ;color.c: 182:         if (color.R_norm < 0.40 && color.B_norm > 0.30 && color.G_norm > 
      +                          0.4){
  2389   000514  C04B  F003         	movff	_color+8,___flge@ff1
  2390   000518  C04C  F004         	movff	_color+9,___flge@ff1+1
  2391   00051C  C04D  F005         	movff	_color+10,___flge@ff1+2
  2392   000520  C04E  F006         	movff	_color+11,___flge@ff1+3
  2393   000524  0ECD               	movlw	205
  2394   000526  6E07               	movwf	___flge@ff2^0,c
  2395   000528  0ECC               	movlw	204
  2396   00052A  6E08               	movwf	(___flge@ff2+1)^0,c
  2397   00052C  0ECC               	movlw	204
  2398   00052E  6E09               	movwf	(___flge@ff2+2)^0,c
  2399   000530  0E3E               	movlw	62
  2400   000532  6E0A               	movwf	(___flge@ff2+3)^0,c
  2401   000534  ECA0  F00B         	call	___flge	;wreg free
  2402   000538  B0D8               	btfsc	status,0,c
  2403   00053A  EFA1  F002         	goto	u2331
  2404   00053E  EFA3  F002         	goto	u2330
  2405   000542                     u2331:
  2406   000542  EFEA  F002         	goto	l3113
  2407   000546                     u2330:
  2408   000546  0E9A               	movlw	154
  2409   000548  6E03               	movwf	___flge@ff1^0,c
  2410   00054A  0E99               	movlw	153
  2411   00054C  6E04               	movwf	(___flge@ff1+1)^0,c
  2412   00054E  0E99               	movlw	153
  2413   000550  6E05               	movwf	(___flge@ff1+2)^0,c
  2414   000552  0E3E               	movlw	62
  2415   000554  6E06               	movwf	(___flge@ff1+3)^0,c
  2416   000556  C04F  F007         	movff	_color+12,___flge@ff2
  2417   00055A  C050  F008         	movff	_color+13,___flge@ff2+1
  2418   00055E  C051  F009         	movff	_color+14,___flge@ff2+2
  2419   000562  C052  F00A         	movff	_color+15,___flge@ff2+3
  2420   000566  ECA0  F00B         	call	___flge	;wreg free
  2421   00056A  B0D8               	btfsc	status,0,c
  2422   00056C  EFBA  F002         	goto	u2341
  2423   000570  EFBC  F002         	goto	u2340
  2424   000574                     u2341:
  2425   000574  EFEA  F002         	goto	l3113
  2426   000578                     u2340:
  2427   000578  0ECD               	movlw	205
  2428   00057A  6E03               	movwf	___flge@ff1^0,c
  2429   00057C  0ECC               	movlw	204
  2430   00057E  6E04               	movwf	(___flge@ff1+1)^0,c
  2431   000580  0ECC               	movlw	204
  2432   000582  6E05               	movwf	(___flge@ff1+2)^0,c
  2433   000584  0E3E               	movlw	62
  2434   000586  6E06               	movwf	(___flge@ff1+3)^0,c
  2435   000588  C053  F007         	movff	_color+16,___flge@ff2
  2436   00058C  C054  F008         	movff	_color+17,___flge@ff2+1
  2437   000590  C055  F009         	movff	_color+18,___flge@ff2+2
  2438   000594  C056  F00A         	movff	_color+19,___flge@ff2+3
  2439   000598  ECA0  F00B         	call	___flge	;wreg free
  2440   00059C  B0D8               	btfsc	status,0,c
  2441   00059E  EFD3  F002         	goto	u2351
  2442   0005A2  EFD5  F002         	goto	u2350
  2443   0005A6                     u2351:
  2444   0005A6  EFEA  F002         	goto	l3113
  2445   0005AA                     u2350:
  2446   0005AA                     
  2447                           ;color.c: 183:             card_memory[card_count] = 6;
  2448   0005AA  0E88               	movlw	low _card_memory
  2449   0005AC  2442               	addwf	_card_count^0,w,c
  2450   0005AE  6ED9               	movwf	fsr2l,c
  2451   0005B0  6ADA               	clrf	fsr2h,c
  2452   0005B2  0E00               	movlw	high _card_memory
  2453   0005B4  22DA               	addwfc	fsr2h,f,c
  2454   0005B6  0E06               	movlw	6
  2455   0005B8  6EDF               	movwf	indf2,c
  2456   0005BA                     
  2457                           ;color.c: 184:             card_count ++;
  2458   0005BA  2A42               	incf	_card_count^0,f,c
  2459   0005BC                     
  2460                           ;color.c: 185:             movement(mL,mR,7);
  2461   0005BC  C037  F026         	movff	buggy_color_response@mL,movement@mL
  2462   0005C0  C038  F027         	movff	buggy_color_response@mL+1,movement@mL+1
  2463   0005C4  C039  F028         	movff	buggy_color_response@mR,movement@mR
  2464   0005C8  C03A  F029         	movff	buggy_color_response@mR+1,movement@mR+1
  2465   0005CC  0E07               	movlw	7
  2466   0005CE  6E2A               	movwf	movement@count^0,c
  2467   0005D0  EC4F  F005         	call	_movement	;wreg free
  2468   0005D4                     l3113:
  2469                           
  2470                           ;color.c: 189:         if (color.R_norm < 0.5 && color.C > 16000 ){
  2471   0005D4  C04B  F003         	movff	_color+8,___flge@ff1
  2472   0005D8  C04C  F004         	movff	_color+9,___flge@ff1+1
  2473   0005DC  C04D  F005         	movff	_color+10,___flge@ff1+2
  2474   0005E0  C04E  F006         	movff	_color+11,___flge@ff1+3
  2475   0005E4  0E00               	movlw	0
  2476   0005E6  6E07               	movwf	___flge@ff2^0,c
  2477   0005E8  0E00               	movlw	0
  2478   0005EA  6E08               	movwf	(___flge@ff2+1)^0,c
  2479   0005EC  0E00               	movlw	0
  2480   0005EE  6E09               	movwf	(___flge@ff2+2)^0,c
  2481   0005F0  0E3F               	movlw	63
  2482   0005F2  6E0A               	movwf	(___flge@ff2+3)^0,c
  2483   0005F4  ECA0  F00B         	call	___flge	;wreg free
  2484   0005F8  B0D8               	btfsc	status,0,c
  2485   0005FA  EF01  F003         	goto	u2361
  2486   0005FE  EF03  F003         	goto	u2360
  2487   000602                     u2361:
  2488   000602  EF73  F003         	goto	l3143
  2489   000606                     u2360:
  2490   000606  0E81               	movlw	129
  2491   000608  5C49               	subwf	(_color+6)^0,w,c
  2492   00060A  0E3E               	movlw	62
  2493   00060C  584A               	subwfb	(_color+7)^0,w,c
  2494   00060E  A0D8               	btfss	status,0,c
  2495   000610  EF0C  F003         	goto	u2371
  2496   000614  EF0E  F003         	goto	u2370
  2497   000618                     u2371:
  2498   000618  EF73  F003         	goto	l3143
  2499   00061C                     u2370:
  2500   00061C                     
  2501                           ;color.c: 192:             card_memory[card_count] = 3;
  2502   00061C  0E88               	movlw	low _card_memory
  2503   00061E  2442               	addwf	_card_count^0,w,c
  2504   000620  6ED9               	movwf	fsr2l,c
  2505   000622  6ADA               	clrf	fsr2h,c
  2506   000624  0E00               	movlw	high _card_memory
  2507   000626  22DA               	addwfc	fsr2h,f,c
  2508   000628  0E03               	movlw	3
  2509   00062A  6EDF               	movwf	indf2,c
  2510   00062C                     
  2511                           ;color.c: 193:             card_count ++;
  2512   00062C  2A42               	incf	_card_count^0,f,c
  2513   00062E                     
  2514                           ;color.c: 195:             LATGbits.LATG1 = 0;
  2515   00062E  927F               	bcf	127,1,c	;volatile
  2516   000630                     
  2517                           ;color.c: 196:             LATAbits.LATA4 = 0;
  2518   000630  9879               	bcf	121,4,c	;volatile
  2519   000632                     
  2520                           ;color.c: 197:             LATFbits.LATF7 = 0;
  2521   000632  9E7E               	bcf	126,7,c	;volatile
  2522   000634                     
  2523                           ;color.c: 199:             space(mL,mR);
  2524   000634  C037  F01C         	movff	buggy_color_response@mL,space@mL
  2525   000638  C038  F01D         	movff	buggy_color_response@mL+1,space@mL+1
  2526   00063C  C039  F01E         	movff	buggy_color_response@mR,space@mR
  2527   000640  C03A  F01F         	movff	buggy_color_response@mR+1,space@mR+1
  2528   000644  EC22  F00C         	call	_space	;wreg free
  2529   000648                     
  2530                           ;color.c: 200:             _delay((unsigned long)((500)*(64000000/4000.0)));
  2531   000648  0E29               	movlw	41
  2532   00064A  6E3E               	movwf	(??_buggy_color_response+1)^0,c
  2533   00064C  0E96               	movlw	150
  2534   00064E  6E3D               	movwf	??_buggy_color_response^0,c
  2535   000650  0E7F               	movlw	127
  2536   000652                     u2577:
  2537   000652  2EE8               	decfsz	wreg,f,c
  2538   000654  D7FE               	bra	u2577
  2539   000656  2E3D               	decfsz	??_buggy_color_response^0,f,c
  2540   000658  D7FC               	bra	u2577
  2541   00065A  2E3E               	decfsz	(??_buggy_color_response+1)^0,f,c
  2542   00065C  D7FA               	bra	u2577
  2543   00065E  F000               	nop	
  2544   000660                     
  2545                           ;color.c: 201:             stop(mL,mR);
  2546   000660  C037  F016         	movff	buggy_color_response@mL,stop@mL
  2547   000664  C038  F017         	movff	buggy_color_response@mL+1,stop@mL+1
  2548   000668  C039  F018         	movff	buggy_color_response@mR,stop@mR
  2549   00066C  C03A  F019         	movff	buggy_color_response@mR+1,stop@mR+1
  2550   000670  EC8D  F00D         	call	_stop	;wreg free
  2551   000674                     
  2552                           ;color.c: 202:             _delay((unsigned long)((500)*(64000000/4000.0)));
  2553   000674  0E29               	movlw	41
  2554   000676  6E3E               	movwf	(??_buggy_color_response+1)^0,c
  2555   000678  0E96               	movlw	150
  2556   00067A  6E3D               	movwf	??_buggy_color_response^0,c
  2557   00067C  0E7F               	movlw	127
  2558   00067E                     u2587:
  2559   00067E  2EE8               	decfsz	wreg,f,c
  2560   000680  D7FE               	bra	u2587
  2561   000682  2E3D               	decfsz	??_buggy_color_response^0,f,c
  2562   000684  D7FC               	bra	u2587
  2563   000686  2E3E               	decfsz	(??_buggy_color_response+1)^0,f,c
  2564   000688  D7FA               	bra	u2587
  2565   00068A  F000               	nop	
  2566   00068C                     
  2567                           ;color.c: 204:             return_home(mL,mR);
  2568   00068C  C037  F031         	movff	buggy_color_response@mL,return_home@mL
  2569   000690  C038  F032         	movff	buggy_color_response@mL+1,return_home@mL+1
  2570   000694  C039  F033         	movff	buggy_color_response@mR,return_home@mR
  2571   000698  C03A  F034         	movff	buggy_color_response@mR+1,return_home@mR+1
  2572   00069C  EC6B  F008         	call	_return_home	;wreg free
  2573   0006A0                     
  2574                           ;color.c: 206:             stop(mL,mR);
  2575   0006A0  C037  F016         	movff	buggy_color_response@mL,stop@mL
  2576   0006A4  C038  F017         	movff	buggy_color_response@mL+1,stop@mL+1
  2577   0006A8  C039  F018         	movff	buggy_color_response@mR,stop@mR
  2578   0006AC  C03A  F019         	movff	buggy_color_response@mR+1,stop@mR+1
  2579   0006B0  EC8D  F00D         	call	_stop	;wreg free
  2580   0006B4                     
  2581                           ;color.c: 207:             _delay((unsigned long)((500)*(64000000/4000.0)));
  2582   0006B4  0E29               	movlw	41
  2583   0006B6  6E3E               	movwf	(??_buggy_color_response+1)^0,c
  2584   0006B8  0E96               	movlw	150
  2585   0006BA  6E3D               	movwf	??_buggy_color_response^0,c
  2586   0006BC  0E7F               	movlw	127
  2587   0006BE                     u2597:
  2588   0006BE  2EE8               	decfsz	wreg,f,c
  2589   0006C0  D7FE               	bra	u2597
  2590   0006C2  2E3D               	decfsz	??_buggy_color_response^0,f,c
  2591   0006C4  D7FC               	bra	u2597
  2592   0006C6  2E3E               	decfsz	(??_buggy_color_response+1)^0,f,c
  2593   0006C8  D7FA               	bra	u2597
  2594   0006CA  F000               	nop	
  2595   0006CC                     
  2596                           ;color.c: 209:             movement_return(mL,mR,3);
  2597   0006CC  C037  F02C         	movff	buggy_color_response@mL,movement_return@mL
  2598   0006D0  C038  F02D         	movff	buggy_color_response@mL+1,movement_return@mL+1
  2599   0006D4  C039  F02E         	movff	buggy_color_response@mR,movement_return@mR
  2600   0006D8  C03A  F02F         	movff	buggy_color_response@mR+1,movement_return@mR+1
  2601   0006DC  0E03               	movlw	3
  2602   0006DE  6E30               	movwf	movement_return@count^0,c
  2603   0006E0  EC96  F007         	call	_movement_return	;wreg free
  2604   0006E4  0003               	sleep		;# 
  2605   0006E6                     l3143:
  2606                           
  2607                           ;color.c: 213:         timer_reset();
  2608   0006E6  EC43  F011         	call	_timer_reset	;wreg free
  2609                           
  2610                           ;color.c: 214:     }
  2611   0006EA  EF81  F003         	goto	l146
  2612   0006EE                     l3145:
  2613   0006EE  C037  F01C         	movff	buggy_color_response@mL,forward@mL
  2614   0006F2  C038  F01D         	movff	buggy_color_response@mL+1,forward@mL+1
  2615   0006F6  C039  F01E         	movff	buggy_color_response@mR,forward@mR
  2616   0006FA  C03A  F01F         	movff	buggy_color_response@mR+1,forward@mR+1
  2617   0006FE  ECA3  F00C         	call	_forward	;wreg free
  2618   000702                     l146:
  2619   000702  0012               	return		;funcret
  2620   000704                     __end_of_buggy_color_response:
  2621                           	callstack 0
  2622                           
  2623 ;; *************** function _timer_reset *****************
  2624 ;; Defined at:
  2625 ;;		line 25 in file "timers.c"
  2626 ;; Parameters:    Size  Location     Type
  2627 ;;		None
  2628 ;; Auto vars:     Size  Location     Type
  2629 ;;		None
  2630 ;; Return value:  Size  Location     Type
  2631 ;;                  1    wreg      void 
  2632 ;; Registers used:
  2633 ;;		wreg, status,2
  2634 ;; Tracked objects:
  2635 ;;		On entry : 0/0
  2636 ;;		On exit  : 0/0
  2637 ;;		Unchanged: 0/0
  2638 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2639 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2640 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2641 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2642 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2643 ;;Total ram usage:        0 bytes
  2644 ;; Hardware stack levels used: 1
  2645 ;; Hardware stack levels required when called: 1
  2646 ;; This function calls:
  2647 ;;		Nothing
  2648 ;; This function is called by:
  2649 ;;		_buggy_color_response
  2650 ;;		_main
  2651 ;; This function uses a non-reentrant model
  2652 ;;
  2653                           
  2654                           	psect	text14
  2655   002286                     __ptext14:
  2656                           	callstack 0
  2657   002286                     _timer_reset:
  2658                           	callstack 29
  2659   002286                     
  2660                           ;timers.c: 26:     timer_val = 0;
  2661   002286  0E00               	movlw	0
  2662   002288  6E40               	movwf	(_timer_val+1)^0,c
  2663   00228A  0E00               	movlw	0
  2664   00228C  6E3F               	movwf	_timer_val^0,c
  2665                           
  2666                           ;timers.c: 27:     TMR0H=0;
  2667   00228E  0E00               	movlw	0
  2668   002290  6ED4               	movwf	212,c	;volatile
  2669                           
  2670                           ;timers.c: 28:     TMR0L=0b00100011;
  2671   002292  0E23               	movlw	35
  2672   002294  6ED3               	movwf	211,c	;volatile
  2673   002296  0012               	return		;funcret
  2674   002298                     __end_of_timer_reset:
  2675                           	callstack 0
  2676                           
  2677 ;; *************** function _return_home *****************
  2678 ;; Defined at:
  2679 ;;		line 248 in file "color.c"
  2680 ;; Parameters:    Size  Location     Type
  2681 ;;  mL              2   48[COMRAM] PTR struct DC_motor
  2682 ;;		 -> motorL(9), 
  2683 ;;  mR              2   50[COMRAM] PTR struct DC_motor
  2684 ;;		 -> motorR(9), 
  2685 ;; Auto vars:     Size  Location     Type
  2686 ;;		None
  2687 ;; Return value:  Size  Location     Type
  2688 ;;                  1    wreg      void 
  2689 ;; Registers used:
  2690 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2691 ;; Tracked objects:
  2692 ;;		On entry : 0/0
  2693 ;;		On exit  : 0/0
  2694 ;;		Unchanged: 0/0
  2695 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2696 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2697 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2698 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2699 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2700 ;;Total ram usage:        6 bytes
  2701 ;; Hardware stack levels used: 1
  2702 ;; Hardware stack levels required when called: 7
  2703 ;; This function calls:
  2704 ;;		_delay_ms_func
  2705 ;;		_forward
  2706 ;;		_movement_return
  2707 ;;		_reverse
  2708 ;;		_stop
  2709 ;; This function is called by:
  2710 ;;		_buggy_color_response
  2711 ;; This function uses a non-reentrant model
  2712 ;;
  2713                           
  2714                           	psect	text15
  2715   0010D6                     __ptext15:
  2716                           	callstack 0
  2717   0010D6                     _return_home:
  2718                           	callstack 22
  2719   0010D6                     
  2720                           ;color.c: 249:     while(timer_index > 0 && card_count > 0 ) {
  2721   0010D6  EF12  F009         	goto	l2913
  2722   0010DA                     l2881:
  2723                           
  2724                           ;color.c: 251:         movement_return(mL,mR,card_memory[card_count-1]);
  2725   0010DA  C031  F02C         	movff	return_home@mL,movement_return@mL
  2726   0010DE  C032  F02D         	movff	return_home@mL+1,movement_return@mL+1
  2727   0010E2  C033  F02E         	movff	return_home@mR,movement_return@mR
  2728   0010E6  C034  F02F         	movff	return_home@mR+1,movement_return@mR+1
  2729   0010EA  0E87               	movlw	low (_card_memory+65535)
  2730   0010EC  2442               	addwf	_card_count^0,w,c
  2731   0010EE  6ED9               	movwf	fsr2l,c
  2732   0010F0  6ADA               	clrf	fsr2h,c
  2733   0010F2  0E00               	movlw	high (_card_memory+65535)
  2734   0010F4  22DA               	addwfc	fsr2h,f,c
  2735   0010F6  50DF               	movf	indf2,w,c
  2736   0010F8  6E30               	movwf	movement_return@count^0,c
  2737   0010FA  EC96  F007         	call	_movement_return	;wreg free
  2738   0010FE                     
  2739                           ;color.c: 252:         card_count--;
  2740   0010FE  0642               	decf	_card_count^0,f,c
  2741   001100                     
  2742                           ;color.c: 253:         _delay((unsigned long)((250)*(64000000/4000.0)));
  2743   001100  0E15               	movlw	21
  2744   001102  6E36               	movwf	(??_return_home+1)^0,c
  2745   001104  0E4B               	movlw	75
  2746   001106  6E35               	movwf	??_return_home^0,c
  2747   001108  0EBE               	movlw	190
  2748   00110A                     u2607:
  2749   00110A  2EE8               	decfsz	wreg,f,c
  2750   00110C  D7FE               	bra	u2607
  2751   00110E  2E35               	decfsz	??_return_home^0,f,c
  2752   001110  D7FC               	bra	u2607
  2753   001112  2E36               	decfsz	(??_return_home+1)^0,f,c
  2754   001114  D7FA               	bra	u2607
  2755   001116  D000               	nop2	
  2756   001118                     
  2757                           ;color.c: 254:         reverse(mL,mR);
  2758   001118  C031  F01C         	movff	return_home@mL,reverse@mL
  2759   00111C  C032  F01D         	movff	return_home@mL+1,reverse@mL+1
  2760   001120  C033  F01E         	movff	return_home@mR,reverse@mR
  2761   001124  C034  F01F         	movff	return_home@mR+1,reverse@mR+1
  2762   001128  EC18  F00D         	call	_reverse	;wreg free
  2763   00112C                     
  2764                           ;color.c: 255:         _delay((unsigned long)((500)*(64000000/4000.0)));
  2765   00112C  0E29               	movlw	41
  2766   00112E  6E36               	movwf	(??_return_home+1)^0,c
  2767   001130  0E96               	movlw	150
  2768   001132  6E35               	movwf	??_return_home^0,c
  2769   001134  0E7F               	movlw	127
  2770   001136                     u2617:
  2771   001136  2EE8               	decfsz	wreg,f,c
  2772   001138  D7FE               	bra	u2617
  2773   00113A  2E35               	decfsz	??_return_home^0,f,c
  2774   00113C  D7FC               	bra	u2617
  2775   00113E  2E36               	decfsz	(??_return_home+1)^0,f,c
  2776   001140  D7FA               	bra	u2617
  2777   001142  F000               	nop	
  2778   001144                     
  2779                           ;color.c: 256:         stop(mL,mR);
  2780   001144  C031  F016         	movff	return_home@mL,stop@mL
  2781   001148  C032  F017         	movff	return_home@mL+1,stop@mL+1
  2782   00114C  C033  F018         	movff	return_home@mR,stop@mR
  2783   001150  C034  F019         	movff	return_home@mR+1,stop@mR+1
  2784   001154  EC8D  F00D         	call	_stop	;wreg free
  2785   001158                     
  2786                           ;color.c: 257:         _delay((unsigned long)((500)*(64000000/4000.0)));
  2787   001158  0E29               	movlw	41
  2788   00115A  6E36               	movwf	(??_return_home+1)^0,c
  2789   00115C  0E96               	movlw	150
  2790   00115E  6E35               	movwf	??_return_home^0,c
  2791   001160  0E7F               	movlw	127
  2792   001162                     u2627:
  2793   001162  2EE8               	decfsz	wreg,f,c
  2794   001164  D7FE               	bra	u2627
  2795   001166  2E35               	decfsz	??_return_home^0,f,c
  2796   001168  D7FC               	bra	u2627
  2797   00116A  2E36               	decfsz	(??_return_home+1)^0,f,c
  2798   00116C  D7FA               	bra	u2627
  2799   00116E  F000               	nop	
  2800   001170                     
  2801                           ;color.c: 258:         forward(mL,mR);
  2802   001170  C031  F01C         	movff	return_home@mL,forward@mL
  2803   001174  C032  F01D         	movff	return_home@mL+1,forward@mL+1
  2804   001178  C033  F01E         	movff	return_home@mR,forward@mR
  2805   00117C  C034  F01F         	movff	return_home@mR+1,forward@mR+1
  2806   001180  ECA3  F00C         	call	_forward	;wreg free
  2807   001184                     
  2808                           ;color.c: 259:         delay_ms_func(timer_memory[timer_index-1]);
  2809   001184  0E5F               	movlw	low (_timer_memory+65535)
  2810   001186  2441               	addwf	_timer_index^0,w,c
  2811   001188  6ED9               	movwf	fsr2l,c
  2812   00118A  6ADA               	clrf	fsr2h,c
  2813   00118C  0E00               	movlw	high (_timer_memory+65535)
  2814   00118E  22DA               	addwfc	fsr2h,f,c
  2815   001190  50DF               	movf	indf2,w,c
  2816   001192  6E35               	movwf	??_return_home^0,c
  2817   001194  5035               	movf	??_return_home^0,w,c
  2818   001196  6E03               	movwf	delay_ms_func@time^0,c
  2819   001198  6A04               	clrf	(delay_ms_func@time+1)^0,c
  2820   00119A  EC55  F010         	call	_delay_ms_func	;wreg free
  2821   00119E                     
  2822                           ;color.c: 260:         timer_index--;
  2823   00119E  0641               	decf	_timer_index^0,f,c
  2824   0011A0                     
  2825                           ;color.c: 261:         stop(mL,mR);
  2826   0011A0  C031  F016         	movff	return_home@mL,stop@mL
  2827   0011A4  C032  F017         	movff	return_home@mL+1,stop@mL+1
  2828   0011A8  C033  F018         	movff	return_home@mR,stop@mR
  2829   0011AC  C034  F019         	movff	return_home@mR+1,stop@mR+1
  2830   0011B0  EC8D  F00D         	call	_stop	;wreg free
  2831   0011B4                     
  2832                           ;color.c: 262:         _delay((unsigned long)((200)*(64000000/4000.0)));
  2833   0011B4  0E11               	movlw	17
  2834   0011B6  6E36               	movwf	(??_return_home+1)^0,c
  2835   0011B8  0E3C               	movlw	60
  2836   0011BA  6E35               	movwf	??_return_home^0,c
  2837   0011BC  0ECB               	movlw	203
  2838   0011BE                     u2637:
  2839   0011BE  2EE8               	decfsz	wreg,f,c
  2840   0011C0  D7FE               	bra	u2637
  2841   0011C2  2E35               	decfsz	??_return_home^0,f,c
  2842   0011C4  D7FC               	bra	u2637
  2843   0011C6  2E36               	decfsz	(??_return_home+1)^0,f,c
  2844   0011C8  D7FA               	bra	u2637
  2845   0011CA  F000               	nop	
  2846   0011CC                     
  2847                           ;color.c: 263:          reverse(mL,mR);
  2848   0011CC  C031  F01C         	movff	return_home@mL,reverse@mL
  2849   0011D0  C032  F01D         	movff	return_home@mL+1,reverse@mL+1
  2850   0011D4  C033  F01E         	movff	return_home@mR,reverse@mR
  2851   0011D8  C034  F01F         	movff	return_home@mR+1,reverse@mR+1
  2852   0011DC  EC18  F00D         	call	_reverse	;wreg free
  2853   0011E0                     
  2854                           ;color.c: 264:         _delay((unsigned long)((100)*(64000000/4000.0)));
  2855   0011E0  0E09               	movlw	9
  2856   0011E2  6E36               	movwf	(??_return_home+1)^0,c
  2857   0011E4  0E1E               	movlw	30
  2858   0011E6  6E35               	movwf	??_return_home^0,c
  2859   0011E8  0EE4               	movlw	228
  2860   0011EA                     u2647:
  2861   0011EA  2EE8               	decfsz	wreg,f,c
  2862   0011EC  D7FE               	bra	u2647
  2863   0011EE  2E35               	decfsz	??_return_home^0,f,c
  2864   0011F0  D7FC               	bra	u2647
  2865   0011F2  2E36               	decfsz	(??_return_home+1)^0,f,c
  2866   0011F4  D7FA               	bra	u2647
  2867   0011F6  D000               	nop2	
  2868   0011F8                     
  2869                           ;color.c: 265:         stop(mL,mR);
  2870   0011F8  C031  F016         	movff	return_home@mL,stop@mL
  2871   0011FC  C032  F017         	movff	return_home@mL+1,stop@mL+1
  2872   001200  C033  F018         	movff	return_home@mR,stop@mR
  2873   001204  C034  F019         	movff	return_home@mR+1,stop@mR+1
  2874   001208  EC8D  F00D         	call	_stop	;wreg free
  2875   00120C                     
  2876                           ;color.c: 266:         _delay((unsigned long)((250)*(64000000/4000.0)));
  2877   00120C  0E15               	movlw	21
  2878   00120E  6E36               	movwf	(??_return_home+1)^0,c
  2879   001210  0E4B               	movlw	75
  2880   001212  6E35               	movwf	??_return_home^0,c
  2881   001214  0EBE               	movlw	190
  2882   001216                     u2657:
  2883   001216  2EE8               	decfsz	wreg,f,c
  2884   001218  D7FE               	bra	u2657
  2885   00121A  2E35               	decfsz	??_return_home^0,f,c
  2886   00121C  D7FC               	bra	u2657
  2887   00121E  2E36               	decfsz	(??_return_home+1)^0,f,c
  2888   001220  D7FA               	bra	u2657
  2889   001222  D000               	nop2	
  2890   001224                     l2913:
  2891                           
  2892                           ;color.c: 249:     while(timer_index > 0 && card_count > 0 ) {
  2893   001224  5041               	movf	_timer_index^0,w,c
  2894   001226  B4D8               	btfsc	status,2,c
  2895   001228  EF18  F009         	goto	u2091
  2896   00122C  EF1A  F009         	goto	u2090
  2897   001230                     u2091:
  2898   001230  EF22  F009         	goto	l154
  2899   001234                     u2090:
  2900   001234  5042               	movf	_card_count^0,w,c
  2901   001236  A4D8               	btfss	status,2,c
  2902   001238  EF20  F009         	goto	u2101
  2903   00123C  EF22  F009         	goto	u2100
  2904   001240                     u2101:
  2905   001240  EF6D  F008         	goto	l2881
  2906   001244                     u2100:
  2907   001244                     l154:
  2908   001244  0012               	return		;funcret
  2909   001246                     __end_of_return_home:
  2910                           	callstack 0
  2911                           
  2912 ;; *************** function _movement_return *****************
  2913 ;; Defined at:
  2914 ;;		line 324 in file "dc_motor.c"
  2915 ;; Parameters:    Size  Location     Type
  2916 ;;  mL              2   43[COMRAM] PTR struct DC_motor
  2917 ;;		 -> motorL(9), 
  2918 ;;  mR              2   45[COMRAM] PTR struct DC_motor
  2919 ;;		 -> motorR(9), 
  2920 ;;  count           1   47[COMRAM] unsigned char 
  2921 ;; Auto vars:     Size  Location     Type
  2922 ;;		None
  2923 ;; Return value:  Size  Location     Type
  2924 ;;                  1    wreg      void 
  2925 ;; Registers used:
  2926 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2927 ;; Tracked objects:
  2928 ;;		On entry : 0/0
  2929 ;;		On exit  : 0/0
  2930 ;;		Unchanged: 0/0
  2931 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2932 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2933 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2934 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2935 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2936 ;;Total ram usage:        5 bytes
  2937 ;; Hardware stack levels used: 1
  2938 ;; Hardware stack levels required when called: 6
  2939 ;; This function calls:
  2940 ;;		_left_45
  2941 ;;		_reverse_pink
  2942 ;;		_reverse_yellow
  2943 ;;		_right_45
  2944 ;;		_stop
  2945 ;; This function is called by:
  2946 ;;		_buggy_color_response
  2947 ;;		_return_home
  2948 ;; This function uses a non-reentrant model
  2949 ;;
  2950                           
  2951                           	psect	text16
  2952   000F2C                     __ptext16:
  2953                           	callstack 0
  2954   000F2C                     _movement_return:
  2955                           	callstack 22
  2956   000F2C                     
  2957                           ;dc_motor.c: 324: void movement_return(DC_motor *mL, DC_motor *mR, char count);dc_motor.
      +                          c: 325: {;dc_motor.c: 327:     if (count == 1){right_45(mL,mR,2,right_timer); stop(mL,mR
      +                          );}
  2958   000F2C  0430               	decf	movement_return@count^0,w,c
  2959   000F2E  A4D8               	btfss	status,2,c
  2960   000F30  EF9C  F007         	goto	u1611
  2961   000F34  EF9E  F007         	goto	u1610
  2962   000F38                     u1611:
  2963   000F38  EFB8  F007         	goto	l2599
  2964   000F3C                     u1610:
  2965   000F3C  C02C  F01C         	movff	movement_return@mL,right_45@mL
  2966   000F40  C02D  F01D         	movff	movement_return@mL+1,right_45@mL+1
  2967   000F44  C02E  F01E         	movff	movement_return@mR,right_45@mR
  2968   000F48  C02F  F01F         	movff	movement_return@mR+1,right_45@mR+1
  2969   000F4C  0E02               	movlw	2
  2970   000F4E  6E20               	movwf	right_45@count^0,c
  2971   000F50  C059  F021         	movff	_right_timer,right_45@right_timer
  2972   000F54  C05A  F022         	movff	_right_timer+1,right_45@right_timer+1
  2973   000F58  EC76  F00A         	call	_right_45	;wreg free
  2974   000F5C  C02C  F016         	movff	movement_return@mL,stop@mL
  2975   000F60  C02D  F017         	movff	movement_return@mL+1,stop@mL+1
  2976   000F64  C02E  F018         	movff	movement_return@mR,stop@mR
  2977   000F68  C02F  F019         	movff	movement_return@mR+1,stop@mR+1
  2978   000F6C  EC8D  F00D         	call	_stop	;wreg free
  2979   000F70                     l2599:
  2980                           
  2981                           ;dc_motor.c: 328:     if (count == 2){left_45(mL,mR,2,left_timer); stop(mL,mR);}
  2982   000F70  0E02               	movlw	2
  2983   000F72  1830               	xorwf	movement_return@count^0,w,c
  2984   000F74  A4D8               	btfss	status,2,c
  2985   000F76  EFBF  F007         	goto	u1621
  2986   000F7A  EFC1  F007         	goto	u1620
  2987   000F7E                     u1621:
  2988   000F7E  EFDB  F007         	goto	l2603
  2989   000F82                     u1620:
  2990   000F82  C02C  F01C         	movff	movement_return@mL,left_45@mL
  2991   000F86  C02D  F01D         	movff	movement_return@mL+1,left_45@mL+1
  2992   000F8A  C02E  F01E         	movff	movement_return@mR,left_45@mR
  2993   000F8E  C02F  F01F         	movff	movement_return@mR+1,left_45@mR+1
  2994   000F92  0E02               	movlw	2
  2995   000F94  6E20               	movwf	left_45@count^0,c
  2996   000F96  C05B  F021         	movff	_left_timer,left_45@left_timer
  2997   000F9A  C05C  F022         	movff	_left_timer+1,left_45@left_timer+1
  2998   000F9E  EC0B  F00B         	call	_left_45	;wreg free
  2999   000FA2  C02C  F016         	movff	movement_return@mL,stop@mL
  3000   000FA6  C02D  F017         	movff	movement_return@mL+1,stop@mL+1
  3001   000FAA  C02E  F018         	movff	movement_return@mR,stop@mR
  3002   000FAE  C02F  F019         	movff	movement_return@mR+1,stop@mR+1
  3003   000FB2  EC8D  F00D         	call	_stop	;wreg free
  3004   000FB6                     l2603:
  3005                           
  3006                           ;dc_motor.c: 329:     if (count == 3){right_45(mL,mR,4,right_timer); stop(mL,mR);}
  3007   000FB6  0E03               	movlw	3
  3008   000FB8  1830               	xorwf	movement_return@count^0,w,c
  3009   000FBA  A4D8               	btfss	status,2,c
  3010   000FBC  EFE2  F007         	goto	u1631
  3011   000FC0  EFE4  F007         	goto	u1630
  3012   000FC4                     u1631:
  3013   000FC4  EFFE  F007         	goto	l2607
  3014   000FC8                     u1630:
  3015   000FC8  C02C  F01C         	movff	movement_return@mL,right_45@mL
  3016   000FCC  C02D  F01D         	movff	movement_return@mL+1,right_45@mL+1
  3017   000FD0  C02E  F01E         	movff	movement_return@mR,right_45@mR
  3018   000FD4  C02F  F01F         	movff	movement_return@mR+1,right_45@mR+1
  3019   000FD8  0E04               	movlw	4
  3020   000FDA  6E20               	movwf	right_45@count^0,c
  3021   000FDC  C059  F021         	movff	_right_timer,right_45@right_timer
  3022   000FE0  C05A  F022         	movff	_right_timer+1,right_45@right_timer+1
  3023   000FE4  EC76  F00A         	call	_right_45	;wreg free
  3024   000FE8  C02C  F016         	movff	movement_return@mL,stop@mL
  3025   000FEC  C02D  F017         	movff	movement_return@mL+1,stop@mL+1
  3026   000FF0  C02E  F018         	movff	movement_return@mR,stop@mR
  3027   000FF4  C02F  F019         	movff	movement_return@mR+1,stop@mR+1
  3028   000FF8  EC8D  F00D         	call	_stop	;wreg free
  3029   000FFC                     l2607:
  3030                           
  3031                           ;dc_motor.c: 330:     if (count == 6){right_45(mL,mR,3,right_timer); stop(mL,mR);}
  3032   000FFC  0E06               	movlw	6
  3033   000FFE  1830               	xorwf	movement_return@count^0,w,c
  3034   001000  A4D8               	btfss	status,2,c
  3035   001002  EF05  F008         	goto	u1641
  3036   001006  EF07  F008         	goto	u1640
  3037   00100A                     u1641:
  3038   00100A  EF21  F008         	goto	l2611
  3039   00100E                     u1640:
  3040   00100E  C02C  F01C         	movff	movement_return@mL,right_45@mL
  3041   001012  C02D  F01D         	movff	movement_return@mL+1,right_45@mL+1
  3042   001016  C02E  F01E         	movff	movement_return@mR,right_45@mR
  3043   00101A  C02F  F01F         	movff	movement_return@mR+1,right_45@mR+1
  3044   00101E  0E03               	movlw	3
  3045   001020  6E20               	movwf	right_45@count^0,c
  3046   001022  C059  F021         	movff	_right_timer,right_45@right_timer
  3047   001026  C05A  F022         	movff	_right_timer+1,right_45@right_timer+1
  3048   00102A  EC76  F00A         	call	_right_45	;wreg free
  3049   00102E  C02C  F016         	movff	movement_return@mL,stop@mL
  3050   001032  C02D  F017         	movff	movement_return@mL+1,stop@mL+1
  3051   001036  C02E  F018         	movff	movement_return@mR,stop@mR
  3052   00103A  C02F  F019         	movff	movement_return@mR+1,stop@mR+1
  3053   00103E  EC8D  F00D         	call	_stop	;wreg free
  3054   001042                     l2611:
  3055                           
  3056                           ;dc_motor.c: 331:     if (count == 7){left_45(mL,mR,3,right_timer); stop(mL,mR);}
  3057   001042  0E07               	movlw	7
  3058   001044  1830               	xorwf	movement_return@count^0,w,c
  3059   001046  A4D8               	btfss	status,2,c
  3060   001048  EF28  F008         	goto	u1651
  3061   00104C  EF2A  F008         	goto	u1650
  3062   001050                     u1651:
  3063   001050  EF44  F008         	goto	l2615
  3064   001054                     u1650:
  3065   001054  C02C  F01C         	movff	movement_return@mL,left_45@mL
  3066   001058  C02D  F01D         	movff	movement_return@mL+1,left_45@mL+1
  3067   00105C  C02E  F01E         	movff	movement_return@mR,left_45@mR
  3068   001060  C02F  F01F         	movff	movement_return@mR+1,left_45@mR+1
  3069   001064  0E03               	movlw	3
  3070   001066  6E20               	movwf	left_45@count^0,c
  3071   001068  C059  F021         	movff	_right_timer,left_45@left_timer
  3072   00106C  C05A  F022         	movff	_right_timer+1,left_45@left_timer+1
  3073   001070  EC0B  F00B         	call	_left_45	;wreg free
  3074   001074  C02C  F016         	movff	movement_return@mL,stop@mL
  3075   001078  C02D  F017         	movff	movement_return@mL+1,stop@mL+1
  3076   00107C  C02E  F018         	movff	movement_return@mR,stop@mR
  3077   001080  C02F  F019         	movff	movement_return@mR+1,stop@mR+1
  3078   001084  EC8D  F00D         	call	_stop	;wreg free
  3079   001088                     l2615:
  3080                           
  3081                           ;dc_motor.c: 333:     if (count == 9){reverse_yellow(mL,mR);}
  3082   001088  0E09               	movlw	9
  3083   00108A  1830               	xorwf	movement_return@count^0,w,c
  3084   00108C  A4D8               	btfss	status,2,c
  3085   00108E  EF4B  F008         	goto	u1661
  3086   001092  EF4D  F008         	goto	u1660
  3087   001096                     u1661:
  3088   001096  EF57  F008         	goto	l2619
  3089   00109A                     u1660:
  3090   00109A  C02C  F026         	movff	movement_return@mL,reverse_yellow@mL
  3091   00109E  C02D  F027         	movff	movement_return@mL+1,reverse_yellow@mL+1
  3092   0010A2  C02E  F028         	movff	movement_return@mR,reverse_yellow@mR
  3093   0010A6  C02F  F029         	movff	movement_return@mR+1,reverse_yellow@mR+1
  3094   0010AA  EC2D  F00E         	call	_reverse_yellow	;wreg free
  3095   0010AE                     l2619:
  3096                           
  3097                           ;dc_motor.c: 334:     if (count == 10) {reverse_pink(mL,mR);}
  3098   0010AE  0E0A               	movlw	10
  3099   0010B0  1830               	xorwf	movement_return@count^0,w,c
  3100   0010B2  A4D8               	btfss	status,2,c
  3101   0010B4  EF5E  F008         	goto	u1671
  3102   0010B8  EF60  F008         	goto	u1670
  3103   0010BC                     u1671:
  3104   0010BC  EF6A  F008         	goto	l361
  3105   0010C0                     u1670:
  3106   0010C0  C02C  F026         	movff	movement_return@mL,reverse_pink@mL
  3107   0010C4  C02D  F027         	movff	movement_return@mL+1,reverse_pink@mL+1
  3108   0010C8  C02E  F028         	movff	movement_return@mR,reverse_pink@mR
  3109   0010CC  C02F  F029         	movff	movement_return@mR+1,reverse_pink@mR+1
  3110   0010D0  EC6E  F00E         	call	_reverse_pink	;wreg free
  3111   0010D4                     l361:
  3112   0010D4  0012               	return		;funcret
  3113   0010D6                     __end_of_movement_return:
  3114                           	callstack 0
  3115                           
  3116 ;; *************** function _reverse_yellow *****************
  3117 ;; Defined at:
  3118 ;;		line 272 in file "dc_motor.c"
  3119 ;; Parameters:    Size  Location     Type
  3120 ;;  mL              2   37[COMRAM] PTR struct DC_motor
  3121 ;;		 -> motorL(9), 
  3122 ;;  mR              2   39[COMRAM] PTR struct DC_motor
  3123 ;;		 -> motorR(9), 
  3124 ;; Auto vars:     Size  Location     Type
  3125 ;;		None
  3126 ;; Return value:  Size  Location     Type
  3127 ;;                  1    wreg      void 
  3128 ;; Registers used:
  3129 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3130 ;; Tracked objects:
  3131 ;;		On entry : 0/0
  3132 ;;		On exit  : 0/0
  3133 ;;		Unchanged: 0/0
  3134 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3135 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3136 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3137 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3138 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3139 ;;Total ram usage:        6 bytes
  3140 ;; Hardware stack levels used: 1
  3141 ;; Hardware stack levels required when called: 5
  3142 ;; This function calls:
  3143 ;;		_custom_delay
  3144 ;;		_left_45
  3145 ;;		_reverse
  3146 ;;		_stop
  3147 ;; This function is called by:
  3148 ;;		_movement_return
  3149 ;; This function uses a non-reentrant model
  3150 ;;
  3151                           
  3152                           	psect	text17
  3153   001C5A                     __ptext17:
  3154                           	callstack 0
  3155   001C5A                     _reverse_yellow:
  3156                           	callstack 22
  3157   001C5A                     
  3158                           ;dc_motor.c: 274:     left_45(mL,mR,2,left_timer);
  3159   001C5A  C026  F01C         	movff	reverse_yellow@mL,left_45@mL
  3160   001C5E  C027  F01D         	movff	reverse_yellow@mL+1,left_45@mL+1
  3161   001C62  C028  F01E         	movff	reverse_yellow@mR,left_45@mR
  3162   001C66  C029  F01F         	movff	reverse_yellow@mR+1,left_45@mR+1
  3163   001C6A  0E02               	movlw	2
  3164   001C6C  6E20               	movwf	left_45@count^0,c
  3165   001C6E  C05B  F021         	movff	_left_timer,left_45@left_timer
  3166   001C72  C05C  F022         	movff	_left_timer+1,left_45@left_timer+1
  3167   001C76  EC0B  F00B         	call	_left_45	;wreg free
  3168                           
  3169                           ;dc_motor.c: 275:     stop(mL,mR);
  3170   001C7A  C026  F016         	movff	reverse_yellow@mL,stop@mL
  3171   001C7E  C027  F017         	movff	reverse_yellow@mL+1,stop@mL+1
  3172   001C82  C028  F018         	movff	reverse_yellow@mR,stop@mR
  3173   001C86  C029  F019         	movff	reverse_yellow@mR+1,stop@mR+1
  3174   001C8A  EC8D  F00D         	call	_stop	;wreg free
  3175   001C8E                     
  3176                           ;dc_motor.c: 276:     _delay((unsigned long)((200)*(64000000/4000.0)));
  3177   001C8E  0E11               	movlw	17
  3178   001C90  6E2B               	movwf	(??_reverse_yellow+1)^0,c
  3179   001C92  0E3C               	movlw	60
  3180   001C94  6E2A               	movwf	??_reverse_yellow^0,c
  3181   001C96  0ECB               	movlw	203
  3182   001C98                     u2667:
  3183   001C98  2EE8               	decfsz	wreg,f,c
  3184   001C9A  D7FE               	bra	u2667
  3185   001C9C  2E2A               	decfsz	??_reverse_yellow^0,f,c
  3186   001C9E  D7FC               	bra	u2667
  3187   001CA0  2E2B               	decfsz	(??_reverse_yellow+1)^0,f,c
  3188   001CA2  D7FA               	bra	u2667
  3189   001CA4  F000               	nop	
  3190   001CA6                     
  3191                           ;dc_motor.c: 278:      reverse(mL,mR);
  3192   001CA6  C026  F01C         	movff	reverse_yellow@mL,reverse@mL
  3193   001CAA  C027  F01D         	movff	reverse_yellow@mL+1,reverse@mL+1
  3194   001CAE  C028  F01E         	movff	reverse_yellow@mR,reverse@mR
  3195   001CB2  C029  F01F         	movff	reverse_yellow@mR+1,reverse@mR+1
  3196   001CB6  EC18  F00D         	call	_reverse	;wreg free
  3197   001CBA  0E03               	movlw	3
  3198   001CBC  6E04               	movwf	(custom_delay@temp+1)^0,c
  3199   001CBE  0E84               	movlw	132
  3200   001CC0  6E03               	movwf	custom_delay@temp^0,c
  3201   001CC2  EC75  F010         	call	_custom_delay	;wreg free
  3202   001CC6                     
  3203                           ;dc_motor.c: 280:     stop(mL,mR);
  3204   001CC6  C026  F016         	movff	reverse_yellow@mL,stop@mL
  3205   001CCA  C027  F017         	movff	reverse_yellow@mL+1,stop@mL+1
  3206   001CCE  C028  F018         	movff	reverse_yellow@mR,stop@mR
  3207   001CD2  C029  F019         	movff	reverse_yellow@mR+1,stop@mR+1
  3208   001CD6  EC8D  F00D         	call	_stop	;wreg free
  3209   001CDA  0012               	return		;funcret
  3210   001CDC                     __end_of_reverse_yellow:
  3211                           	callstack 0
  3212                           
  3213 ;; *************** function _reverse_pink *****************
  3214 ;; Defined at:
  3215 ;;		line 286 in file "dc_motor.c"
  3216 ;; Parameters:    Size  Location     Type
  3217 ;;  mL              2   37[COMRAM] PTR struct DC_motor
  3218 ;;		 -> motorL(9), 
  3219 ;;  mR              2   39[COMRAM] PTR struct DC_motor
  3220 ;;		 -> motorR(9), 
  3221 ;; Auto vars:     Size  Location     Type
  3222 ;;		None
  3223 ;; Return value:  Size  Location     Type
  3224 ;;                  1    wreg      void 
  3225 ;; Registers used:
  3226 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3227 ;; Tracked objects:
  3228 ;;		On entry : 0/0
  3229 ;;		On exit  : 0/0
  3230 ;;		Unchanged: 0/0
  3231 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3232 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3233 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3234 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3235 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3236 ;;Total ram usage:        6 bytes
  3237 ;; Hardware stack levels used: 1
  3238 ;; Hardware stack levels required when called: 5
  3239 ;; This function calls:
  3240 ;;		_custom_delay
  3241 ;;		_reverse
  3242 ;;		_right_45
  3243 ;;		_stop
  3244 ;; This function is called by:
  3245 ;;		_movement_return
  3246 ;; This function uses a non-reentrant model
  3247 ;;
  3248                           
  3249                           	psect	text18
  3250   001CDC                     __ptext18:
  3251                           	callstack 0
  3252   001CDC                     _reverse_pink:
  3253                           	callstack 22
  3254   001CDC                     
  3255                           ;dc_motor.c: 288:     right_45(mL,mR,2,right_timer);
  3256   001CDC  C026  F01C         	movff	reverse_pink@mL,right_45@mL
  3257   001CE0  C027  F01D         	movff	reverse_pink@mL+1,right_45@mL+1
  3258   001CE4  C028  F01E         	movff	reverse_pink@mR,right_45@mR
  3259   001CE8  C029  F01F         	movff	reverse_pink@mR+1,right_45@mR+1
  3260   001CEC  0E02               	movlw	2
  3261   001CEE  6E20               	movwf	right_45@count^0,c
  3262   001CF0  C059  F021         	movff	_right_timer,right_45@right_timer
  3263   001CF4  C05A  F022         	movff	_right_timer+1,right_45@right_timer+1
  3264   001CF8  EC76  F00A         	call	_right_45	;wreg free
  3265                           
  3266                           ;dc_motor.c: 289:     stop(mL,mR);
  3267   001CFC  C026  F016         	movff	reverse_pink@mL,stop@mL
  3268   001D00  C027  F017         	movff	reverse_pink@mL+1,stop@mL+1
  3269   001D04  C028  F018         	movff	reverse_pink@mR,stop@mR
  3270   001D08  C029  F019         	movff	reverse_pink@mR+1,stop@mR+1
  3271   001D0C  EC8D  F00D         	call	_stop	;wreg free
  3272   001D10                     
  3273                           ;dc_motor.c: 290:     _delay((unsigned long)((200)*(64000000/4000.0)));
  3274   001D10  0E11               	movlw	17
  3275   001D12  6E2B               	movwf	(??_reverse_pink+1)^0,c
  3276   001D14  0E3C               	movlw	60
  3277   001D16  6E2A               	movwf	??_reverse_pink^0,c
  3278   001D18  0ECB               	movlw	203
  3279   001D1A                     u2677:
  3280   001D1A  2EE8               	decfsz	wreg,f,c
  3281   001D1C  D7FE               	bra	u2677
  3282   001D1E  2E2A               	decfsz	??_reverse_pink^0,f,c
  3283   001D20  D7FC               	bra	u2677
  3284   001D22  2E2B               	decfsz	(??_reverse_pink+1)^0,f,c
  3285   001D24  D7FA               	bra	u2677
  3286   001D26  F000               	nop	
  3287   001D28                     
  3288                           ;dc_motor.c: 292:     reverse(mL,mR);
  3289   001D28  C026  F01C         	movff	reverse_pink@mL,reverse@mL
  3290   001D2C  C027  F01D         	movff	reverse_pink@mL+1,reverse@mL+1
  3291   001D30  C028  F01E         	movff	reverse_pink@mR,reverse@mR
  3292   001D34  C029  F01F         	movff	reverse_pink@mR+1,reverse@mR+1
  3293   001D38  EC18  F00D         	call	_reverse	;wreg free
  3294   001D3C  0E03               	movlw	3
  3295   001D3E  6E04               	movwf	(custom_delay@temp+1)^0,c
  3296   001D40  0E84               	movlw	132
  3297   001D42  6E03               	movwf	custom_delay@temp^0,c
  3298   001D44  EC75  F010         	call	_custom_delay	;wreg free
  3299   001D48                     
  3300                           ;dc_motor.c: 294:     stop(mL,mR);
  3301   001D48  C026  F016         	movff	reverse_pink@mL,stop@mL
  3302   001D4C  C027  F017         	movff	reverse_pink@mL+1,stop@mL+1
  3303   001D50  C028  F018         	movff	reverse_pink@mR,stop@mR
  3304   001D54  C029  F019         	movff	reverse_pink@mR+1,stop@mR+1
  3305   001D58  EC8D  F00D         	call	_stop	;wreg free
  3306   001D5C  0012               	return		;funcret
  3307   001D5E                     __end_of_reverse_pink:
  3308                           	callstack 0
  3309                           
  3310 ;; *************** function _forward *****************
  3311 ;; Defined at:
  3312 ;;		line 127 in file "dc_motor.c"
  3313 ;; Parameters:    Size  Location     Type
  3314 ;;  mL              2   27[COMRAM] PTR struct DC_motor
  3315 ;;		 -> motorL(9), 
  3316 ;;  mR              2   29[COMRAM] PTR struct DC_motor
  3317 ;;		 -> motorR(9), 
  3318 ;; Auto vars:     Size  Location     Type
  3319 ;;		None
  3320 ;; Return value:  Size  Location     Type
  3321 ;;                  1    wreg      void 
  3322 ;; Registers used:
  3323 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3324 ;; Tracked objects:
  3325 ;;		On entry : 0/0
  3326 ;;		On exit  : 0/0
  3327 ;;		Unchanged: 0/0
  3328 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3329 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3330 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3331 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3332 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3333 ;;Total ram usage:        5 bytes
  3334 ;; Hardware stack levels used: 1
  3335 ;; Hardware stack levels required when called: 4
  3336 ;; This function calls:
  3337 ;;		_setMotorPWM
  3338 ;;		_stop
  3339 ;; This function is called by:
  3340 ;;		_buggy_color_response
  3341 ;;		_return_home
  3342 ;; This function uses a non-reentrant model
  3343 ;;
  3344                           
  3345                           	psect	text19
  3346   001946                     __ptext19:
  3347                           	callstack 0
  3348   001946                     _forward:
  3349                           	callstack 24
  3350   001946                     
  3351                           ;dc_motor.c: 127: void forward(DC_motor *mL, DC_motor *mR);dc_motor.c: 128: {;dc_motor.c
      +                          : 129:     stop(mL,mR);
  3352   001946  C01C  F016         	movff	forward@mL,stop@mL
  3353   00194A  C01D  F017         	movff	forward@mL+1,stop@mL+1
  3354   00194E  C01E  F018         	movff	forward@mR,stop@mR
  3355   001952  C01F  F019         	movff	forward@mR+1,stop@mR+1
  3356   001956  EC8D  F00D         	call	_stop	;wreg free
  3357   00195A                     
  3358                           ;dc_motor.c: 130:     mL-> direction = 1;
  3359   00195A  EE20 F001          	lfsr	2,1
  3360   00195E  501C               	movf	forward@mL^0,w,c
  3361   001960  26D9               	addwf	fsr2l,f,c
  3362   001962  501D               	movf	(forward@mL+1)^0,w,c
  3363   001964  22DA               	addwfc	fsr2h,f,c
  3364   001966  0E01               	movlw	1
  3365   001968  6EDF               	movwf	indf2,c
  3366   00196A                     
  3367                           ;dc_motor.c: 131:     mR-> direction = 1;
  3368   00196A  EE20 F001          	lfsr	2,1
  3369   00196E  501E               	movf	forward@mR^0,w,c
  3370   001970  26D9               	addwf	fsr2l,f,c
  3371   001972  501F               	movf	(forward@mR+1)^0,w,c
  3372   001974  22DA               	addwfc	fsr2h,f,c
  3373   001976  0E01               	movlw	1
  3374   001978  6EDF               	movwf	indf2,c
  3375   00197A                     
  3376                           ;dc_motor.c: 132:     LATDbits.LATD3 = 1;
  3377   00197A  867C               	bsf	124,3,c	;volatile
  3378                           
  3379                           ;dc_motor.c: 133:     setMotorPWM(mR);
  3380   00197C  C01E  F010         	movff	forward@mR,setMotorPWM@m
  3381   001980  C01F  F011         	movff	forward@mR+1,setMotorPWM@m+1
  3382   001984  EC23  F009         	call	_setMotorPWM	;wreg free
  3383                           
  3384                           ;dc_motor.c: 134:     setMotorPWM(mL);
  3385   001988  C01C  F010         	movff	forward@mL,setMotorPWM@m
  3386   00198C  C01D  F011         	movff	forward@mL+1,setMotorPWM@m+1
  3387   001990  EC23  F009         	call	_setMotorPWM	;wreg free
  3388                           
  3389                           ;dc_motor.c: 135:     while ((mL->power <= 50) || (mR->power <= 55)){
  3390   001994  EFFE  F00C         	goto	l287
  3391   001998                     l2551:
  3392                           
  3393                           ;dc_motor.c: 136:         if (mL->power <= 50){mL->power += 1;}
  3394   001998  C01C  FFD9         	movff	forward@mL,fsr2l
  3395   00199C  C01D  FFDA         	movff	forward@mL+1,fsr2h
  3396   0019A0  0E33               	movlw	51
  3397   0019A2  60DF               	cpfslt	indf2,c
  3398   0019A4  EFD6  F00C         	goto	u1551
  3399   0019A8  EFD8  F00C         	goto	u1550
  3400   0019AC                     u1551:
  3401   0019AC  EFDD  F00C         	goto	l2555
  3402   0019B0                     u1550:
  3403   0019B0  C01C  FFD9         	movff	forward@mL,fsr2l
  3404   0019B4  C01D  FFDA         	movff	forward@mL+1,fsr2h
  3405   0019B8  2ADF               	incf	indf2,f,c
  3406   0019BA                     l2555:
  3407                           
  3408                           ;dc_motor.c: 137:         if (mR->power <= 55){mR->power += 1;}
  3409   0019BA  C01E  FFD9         	movff	forward@mR,fsr2l
  3410   0019BE  C01F  FFDA         	movff	forward@mR+1,fsr2h
  3411   0019C2  0E38               	movlw	56
  3412   0019C4  60DF               	cpfslt	indf2,c
  3413   0019C6  EFE7  F00C         	goto	u1561
  3414   0019CA  EFE9  F00C         	goto	u1560
  3415   0019CE                     u1561:
  3416   0019CE  EFEE  F00C         	goto	l2559
  3417   0019D2                     u1560:
  3418   0019D2  C01E  FFD9         	movff	forward@mR,fsr2l
  3419   0019D6  C01F  FFDA         	movff	forward@mR+1,fsr2h
  3420   0019DA  2ADF               	incf	indf2,f,c
  3421   0019DC                     l2559:
  3422                           
  3423                           ;dc_motor.c: 138:         setMotorPWM(mL);
  3424   0019DC  C01C  F010         	movff	forward@mL,setMotorPWM@m
  3425   0019E0  C01D  F011         	movff	forward@mL+1,setMotorPWM@m+1
  3426   0019E4  EC23  F009         	call	_setMotorPWM	;wreg free
  3427   0019E8                     
  3428                           ;dc_motor.c: 139:         setMotorPWM(mR);
  3429   0019E8  C01E  F010         	movff	forward@mR,setMotorPWM@m
  3430   0019EC  C01F  F011         	movff	forward@mR+1,setMotorPWM@m+1
  3431   0019F0  EC23  F009         	call	_setMotorPWM	;wreg free
  3432   0019F4                     
  3433                           ;dc_motor.c: 140:         _delay((unsigned long)((5)*(64000000/4000000.0)));
  3434   0019F4  0E1A               	movlw	26
  3435   0019F6                     u2687:
  3436   0019F6  2EE8               	decfsz	wreg,f,c
  3437   0019F8  D7FE               	bra	u2687
  3438   0019FA  D000               	nop2	
  3439   0019FC                     l287:
  3440                           
  3441                           ;dc_motor.c: 135:     while ((mL->power <= 50) || (mR->power <= 55)){
  3442   0019FC  C01C  FFD9         	movff	forward@mL,fsr2l
  3443   001A00  C01D  FFDA         	movff	forward@mL+1,fsr2h
  3444   001A04  0E32               	movlw	50
  3445   001A06  64DF               	cpfsgt	indf2,c
  3446   001A08  EF08  F00D         	goto	u1571
  3447   001A0C  EF0A  F00D         	goto	u1570
  3448   001A10                     u1571:
  3449   001A10  EFCC  F00C         	goto	l2551
  3450   001A14                     u1570:
  3451   001A14  C01E  FFD9         	movff	forward@mR,fsr2l
  3452   001A18  C01F  FFDA         	movff	forward@mR+1,fsr2h
  3453   001A1C  0E37               	movlw	55
  3454   001A1E  64DF               	cpfsgt	indf2,c
  3455   001A20  EF14  F00D         	goto	u1581
  3456   001A24  EF16  F00D         	goto	u1580
  3457   001A28                     u1581:
  3458   001A28  EFCC  F00C         	goto	l2551
  3459   001A2C                     u1580:
  3460   001A2C                     
  3461                           ;dc_motor.c: 142:     LATDbits.LATD3 = 0;
  3462   001A2C  967C               	bcf	124,3,c	;volatile
  3463   001A2E  0012               	return		;funcret
  3464   001A30                     __end_of_forward:
  3465                           	callstack 0
  3466                           
  3467 ;; *************** function _delay_ms_func *****************
  3468 ;; Defined at:
  3469 ;;		line 275 in file "color.c"
  3470 ;; Parameters:    Size  Location     Type
  3471 ;;  time            2    2[COMRAM] unsigned int 
  3472 ;; Auto vars:     Size  Location     Type
  3473 ;;  i               2    6[COMRAM] unsigned int 
  3474 ;; Return value:  Size  Location     Type
  3475 ;;                  1    wreg      void 
  3476 ;; Registers used:
  3477 ;;		wreg, status,2, status,0
  3478 ;; Tracked objects:
  3479 ;;		On entry : 0/0
  3480 ;;		On exit  : 0/0
  3481 ;;		Unchanged: 0/0
  3482 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3483 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3484 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3485 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3486 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3487 ;;Total ram usage:        6 bytes
  3488 ;; Hardware stack levels used: 1
  3489 ;; Hardware stack levels required when called: 1
  3490 ;; This function calls:
  3491 ;;		Nothing
  3492 ;; This function is called by:
  3493 ;;		_return_home
  3494 ;; This function uses a non-reentrant model
  3495 ;;
  3496                           
  3497                           	psect	text20
  3498   0020AA                     __ptext20:
  3499                           	callstack 0
  3500   0020AA                     _delay_ms_func:
  3501                           	callstack 27
  3502   0020AA                     
  3503                           ;color.c: 276:     unsigned int i;;color.c: 277:     for (i=0; i < time; i++) {_delay((u
      +                          nsigned long)((131)*(64000000/4000.0)));}
  3504   0020AA  0E00               	movlw	0
  3505   0020AC  6E08               	movwf	(delay_ms_func@i+1)^0,c
  3506   0020AE  0E00               	movlw	0
  3507   0020B0  6E07               	movwf	delay_ms_func@i^0,c
  3508   0020B2  EF69  F010         	goto	l157
  3509   0020B6                     l2625:
  3510   0020B6  0E0B               	movlw	11
  3511   0020B8  6E06               	movwf	(??_delay_ms_func+1)^0,c
  3512   0020BA  0EA3               	movlw	163
  3513   0020BC  6E05               	movwf	??_delay_ms_func^0,c
  3514   0020BE  0E0A               	movlw	10
  3515   0020C0                     u2697:
  3516   0020C0  2EE8               	decfsz	wreg,f,c
  3517   0020C2  D7FE               	bra	u2697
  3518   0020C4  2E05               	decfsz	??_delay_ms_func^0,f,c
  3519   0020C6  D7FC               	bra	u2697
  3520   0020C8  2E06               	decfsz	(??_delay_ms_func+1)^0,f,c
  3521   0020CA  D7FA               	bra	u2697
  3522   0020CC  D000               	nop2	
  3523   0020CE  4A07               	infsnz	delay_ms_func@i^0,f,c
  3524   0020D0  2A08               	incf	(delay_ms_func@i+1)^0,f,c
  3525   0020D2                     l157:
  3526   0020D2  5003               	movf	delay_ms_func@time^0,w,c
  3527   0020D4  5C07               	subwf	delay_ms_func@i^0,w,c
  3528   0020D6  5004               	movf	(delay_ms_func@time+1)^0,w,c
  3529   0020D8  5808               	subwfb	(delay_ms_func@i+1)^0,w,c
  3530   0020DA  A0D8               	btfss	status,0,c
  3531   0020DC  EF72  F010         	goto	u1681
  3532   0020E0  EF74  F010         	goto	u1680
  3533   0020E4                     u1681:
  3534   0020E4  EF5B  F010         	goto	l2625
  3535   0020E8                     u1680:
  3536   0020E8  0012               	return		;funcret
  3537   0020EA                     __end_of_delay_ms_func:
  3538                           	callstack 0
  3539                           
  3540 ;; *************** function _movement *****************
  3541 ;; Defined at:
  3542 ;;		line 302 in file "dc_motor.c"
  3543 ;; Parameters:    Size  Location     Type
  3544 ;;  mL              2   37[COMRAM] PTR struct DC_motor
  3545 ;;		 -> motorL(9), 
  3546 ;;  mR              2   39[COMRAM] PTR struct DC_motor
  3547 ;;		 -> motorR(9), 
  3548 ;;  count           1   41[COMRAM] unsigned char 
  3549 ;; Auto vars:     Size  Location     Type
  3550 ;;		None
  3551 ;; Return value:  Size  Location     Type
  3552 ;;                  1    wreg      void 
  3553 ;; Registers used:
  3554 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3555 ;; Tracked objects:
  3556 ;;		On entry : 0/0
  3557 ;;		On exit  : 0/0
  3558 ;;		Unchanged: 0/0
  3559 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3560 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3561 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3562 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3563 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3564 ;;Total ram usage:        7 bytes
  3565 ;; Hardware stack levels used: 1
  3566 ;; Hardware stack levels required when called: 5
  3567 ;; This function calls:
  3568 ;;		_custom_delay
  3569 ;;		_left_45
  3570 ;;		_reverse
  3571 ;;		_right_45
  3572 ;;		_space
  3573 ;;		_stop
  3574 ;; This function is called by:
  3575 ;;		_buggy_color_response
  3576 ;; This function uses a non-reentrant model
  3577 ;;
  3578                           
  3579                           	psect	text21
  3580   000A9E                     __ptext21:
  3581                           	callstack 0
  3582   000A9E                     _movement:
  3583                           	callstack 24
  3584   000A9E                     
  3585                           ;dc_motor.c: 302: void movement(DC_motor *mL, DC_motor *mR, char count);dc_motor.c: 303:
      +                           {;dc_motor.c: 304:     space(mL,mR);
  3586   000A9E  C026  F01C         	movff	movement@mL,space@mL
  3587   000AA2  C027  F01D         	movff	movement@mL+1,space@mL+1
  3588   000AA6  C028  F01E         	movff	movement@mR,space@mR
  3589   000AAA  C029  F01F         	movff	movement@mR+1,space@mR+1
  3590   000AAE  EC22  F00C         	call	_space	;wreg free
  3591   000AB2                     
  3592                           ;dc_motor.c: 305:     _delay((unsigned long)((500)*(64000000/4000.0)));
  3593   000AB2  0E29               	movlw	41
  3594   000AB4  6E2C               	movwf	(??_movement+1)^0,c
  3595   000AB6  0E96               	movlw	150
  3596   000AB8  6E2B               	movwf	??_movement^0,c
  3597   000ABA  0E7F               	movlw	127
  3598   000ABC                     u2707:
  3599   000ABC  2EE8               	decfsz	wreg,f,c
  3600   000ABE  D7FE               	bra	u2707
  3601   000AC0  2E2B               	decfsz	??_movement^0,f,c
  3602   000AC2  D7FC               	bra	u2707
  3603   000AC4  2E2C               	decfsz	(??_movement+1)^0,f,c
  3604   000AC6  D7FA               	bra	u2707
  3605   000AC8  F000               	nop	
  3606   000ACA                     
  3607                           ;dc_motor.c: 306:     stop(mL,mR);
  3608   000ACA  C026  F016         	movff	movement@mL,stop@mL
  3609   000ACE  C027  F017         	movff	movement@mL+1,stop@mL+1
  3610   000AD2  C028  F018         	movff	movement@mR,stop@mR
  3611   000AD6  C029  F019         	movff	movement@mR+1,stop@mR+1
  3612   000ADA  EC8D  F00D         	call	_stop	;wreg free
  3613                           
  3614                           ;dc_motor.c: 307:     _delay((unsigned long)((500)*(64000000/4000.0)));
  3615   000ADE  0E29               	movlw	41
  3616   000AE0  6E2C               	movwf	(??_movement+1)^0,c
  3617   000AE2  0E96               	movlw	150
  3618   000AE4  6E2B               	movwf	??_movement^0,c
  3619   000AE6  0E7F               	movlw	127
  3620   000AE8                     u2717:
  3621   000AE8  2EE8               	decfsz	wreg,f,c
  3622   000AEA  D7FE               	bra	u2717
  3623   000AEC  2E2B               	decfsz	??_movement^0,f,c
  3624   000AEE  D7FC               	bra	u2717
  3625   000AF0  2E2C               	decfsz	(??_movement+1)^0,f,c
  3626   000AF2  D7FA               	bra	u2717
  3627   000AF4  F000               	nop	
  3628   000AF6                     
  3629                           ;dc_motor.c: 309:     if (count == 1){right_45(mL,mR,2,right_timer); stop(mL,mR);}
  3630   000AF6  042A               	decf	movement@count^0,w,c
  3631   000AF8  A4D8               	btfss	status,2,c
  3632   000AFA  EF81  F005         	goto	u2021
  3633   000AFE  EF83  F005         	goto	u2020
  3634   000B02                     u2021:
  3635   000B02  EF9D  F005         	goto	l2835
  3636   000B06                     u2020:
  3637   000B06  C026  F01C         	movff	movement@mL,right_45@mL
  3638   000B0A  C027  F01D         	movff	movement@mL+1,right_45@mL+1
  3639   000B0E  C028  F01E         	movff	movement@mR,right_45@mR
  3640   000B12  C029  F01F         	movff	movement@mR+1,right_45@mR+1
  3641   000B16  0E02               	movlw	2
  3642   000B18  6E20               	movwf	right_45@count^0,c
  3643   000B1A  C059  F021         	movff	_right_timer,right_45@right_timer
  3644   000B1E  C05A  F022         	movff	_right_timer+1,right_45@right_timer+1
  3645   000B22  EC76  F00A         	call	_right_45	;wreg free
  3646   000B26  C026  F016         	movff	movement@mL,stop@mL
  3647   000B2A  C027  F017         	movff	movement@mL+1,stop@mL+1
  3648   000B2E  C028  F018         	movff	movement@mR,stop@mR
  3649   000B32  C029  F019         	movff	movement@mR+1,stop@mR+1
  3650   000B36  EC8D  F00D         	call	_stop	;wreg free
  3651   000B3A                     l2835:
  3652                           
  3653                           ;dc_motor.c: 310:     if (count == 2){left_45(mL,mR,2,left_timer); stop(mL,mR);}
  3654   000B3A  0E02               	movlw	2
  3655   000B3C  182A               	xorwf	movement@count^0,w,c
  3656   000B3E  A4D8               	btfss	status,2,c
  3657   000B40  EFA4  F005         	goto	u2031
  3658   000B44  EFA6  F005         	goto	u2030
  3659   000B48                     u2031:
  3660   000B48  EFC0  F005         	goto	l2839
  3661   000B4C                     u2030:
  3662   000B4C  C026  F01C         	movff	movement@mL,left_45@mL
  3663   000B50  C027  F01D         	movff	movement@mL+1,left_45@mL+1
  3664   000B54  C028  F01E         	movff	movement@mR,left_45@mR
  3665   000B58  C029  F01F         	movff	movement@mR+1,left_45@mR+1
  3666   000B5C  0E02               	movlw	2
  3667   000B5E  6E20               	movwf	left_45@count^0,c
  3668   000B60  C05B  F021         	movff	_left_timer,left_45@left_timer
  3669   000B64  C05C  F022         	movff	_left_timer+1,left_45@left_timer+1
  3670   000B68  EC0B  F00B         	call	_left_45	;wreg free
  3671   000B6C  C026  F016         	movff	movement@mL,stop@mL
  3672   000B70  C027  F017         	movff	movement@mL+1,stop@mL+1
  3673   000B74  C028  F018         	movff	movement@mR,stop@mR
  3674   000B78  C029  F019         	movff	movement@mR+1,stop@mR+1
  3675   000B7C  EC8D  F00D         	call	_stop	;wreg free
  3676   000B80                     l2839:
  3677                           
  3678                           ;dc_motor.c: 311:     if (count == 3){right_45(mL,mR,4,right_timer); stop(mL,mR);}
  3679   000B80  0E03               	movlw	3
  3680   000B82  182A               	xorwf	movement@count^0,w,c
  3681   000B84  A4D8               	btfss	status,2,c
  3682   000B86  EFC7  F005         	goto	u2041
  3683   000B8A  EFC9  F005         	goto	u2040
  3684   000B8E                     u2041:
  3685   000B8E  EFE3  F005         	goto	l2843
  3686   000B92                     u2040:
  3687   000B92  C026  F01C         	movff	movement@mL,right_45@mL
  3688   000B96  C027  F01D         	movff	movement@mL+1,right_45@mL+1
  3689   000B9A  C028  F01E         	movff	movement@mR,right_45@mR
  3690   000B9E  C029  F01F         	movff	movement@mR+1,right_45@mR+1
  3691   000BA2  0E04               	movlw	4
  3692   000BA4  6E20               	movwf	right_45@count^0,c
  3693   000BA6  C059  F021         	movff	_right_timer,right_45@right_timer
  3694   000BAA  C05A  F022         	movff	_right_timer+1,right_45@right_timer+1
  3695   000BAE  EC76  F00A         	call	_right_45	;wreg free
  3696   000BB2  C026  F016         	movff	movement@mL,stop@mL
  3697   000BB6  C027  F017         	movff	movement@mL+1,stop@mL+1
  3698   000BBA  C028  F018         	movff	movement@mR,stop@mR
  3699   000BBE  C029  F019         	movff	movement@mR+1,stop@mR+1
  3700   000BC2  EC8D  F00D         	call	_stop	;wreg free
  3701   000BC6                     l2843:
  3702                           
  3703                           ;dc_motor.c: 312:     if (count == 4){reverse(mL,mR); custom_delay(square_timer);stop(mL
      +                          ,mR);_delay((unsigned long)((500)*(64000000/4000.0)));right_45(mL,mR,2,right_timer); sto
      +                          p(mL,mR);}
  3704   000BC6  0E04               	movlw	4
  3705   000BC8  182A               	xorwf	movement@count^0,w,c
  3706   000BCA  A4D8               	btfss	status,2,c
  3707   000BCC  EFEA  F005         	goto	u2051
  3708   000BD0  EFEC  F005         	goto	u2050
  3709   000BD4                     u2051:
  3710   000BD4  EF2C  F006         	goto	l2857
  3711   000BD8                     u2050:
  3712   000BD8  C026  F01C         	movff	movement@mL,reverse@mL
  3713   000BDC  C027  F01D         	movff	movement@mL+1,reverse@mL+1
  3714   000BE0  C028  F01E         	movff	movement@mR,reverse@mR
  3715   000BE4  C029  F01F         	movff	movement@mR+1,reverse@mR+1
  3716   000BE8  EC18  F00D         	call	_reverse	;wreg free
  3717   000BEC  0E03               	movlw	3
  3718   000BEE  6E04               	movwf	(custom_delay@temp+1)^0,c
  3719   000BF0  0E84               	movlw	132
  3720   000BF2  6E03               	movwf	custom_delay@temp^0,c
  3721   000BF4  EC75  F010         	call	_custom_delay	;wreg free
  3722   000BF8  C026  F016         	movff	movement@mL,stop@mL
  3723   000BFC  C027  F017         	movff	movement@mL+1,stop@mL+1
  3724   000C00  C028  F018         	movff	movement@mR,stop@mR
  3725   000C04  C029  F019         	movff	movement@mR+1,stop@mR+1
  3726   000C08  EC8D  F00D         	call	_stop	;wreg free
  3727   000C0C  0E29               	movlw	41
  3728   000C0E  6E2C               	movwf	(??_movement+1)^0,c
  3729   000C10  0E96               	movlw	150
  3730   000C12  6E2B               	movwf	??_movement^0,c
  3731   000C14  0E7F               	movlw	127
  3732   000C16                     u2727:
  3733   000C16  2EE8               	decfsz	wreg,f,c
  3734   000C18  D7FE               	bra	u2727
  3735   000C1A  2E2B               	decfsz	??_movement^0,f,c
  3736   000C1C  D7FC               	bra	u2727
  3737   000C1E  2E2C               	decfsz	(??_movement+1)^0,f,c
  3738   000C20  D7FA               	bra	u2727
  3739   000C22  F000               	nop	
  3740   000C24  C026  F01C         	movff	movement@mL,right_45@mL
  3741   000C28  C027  F01D         	movff	movement@mL+1,right_45@mL+1
  3742   000C2C  C028  F01E         	movff	movement@mR,right_45@mR
  3743   000C30  C029  F01F         	movff	movement@mR+1,right_45@mR+1
  3744   000C34  0E02               	movlw	2
  3745   000C36  6E20               	movwf	right_45@count^0,c
  3746   000C38  C059  F021         	movff	_right_timer,right_45@right_timer
  3747   000C3C  C05A  F022         	movff	_right_timer+1,right_45@right_timer+1
  3748   000C40  EC76  F00A         	call	_right_45	;wreg free
  3749   000C44  C026  F016         	movff	movement@mL,stop@mL
  3750   000C48  C027  F017         	movff	movement@mL+1,stop@mL+1
  3751   000C4C  C028  F018         	movff	movement@mR,stop@mR
  3752   000C50  C029  F019         	movff	movement@mR+1,stop@mR+1
  3753   000C54  EC8D  F00D         	call	_stop	;wreg free
  3754   000C58                     l2857:
  3755                           
  3756                           ;dc_motor.c: 313:     if (count == 5){reverse(mL,mR); custom_delay(square_timer);stop(mL
      +                          ,mR);_delay((unsigned long)((500)*(64000000/4000.0)));left_45(mL,mR,2,left_timer); stop(
      +                          mL,mR);}
  3757   000C58  0E05               	movlw	5
  3758   000C5A  182A               	xorwf	movement@count^0,w,c
  3759   000C5C  A4D8               	btfss	status,2,c
  3760   000C5E  EF33  F006         	goto	u2061
  3761   000C62  EF35  F006         	goto	u2060
  3762   000C66                     u2061:
  3763   000C66  EF75  F006         	goto	l2871
  3764   000C6A                     u2060:
  3765   000C6A  C026  F01C         	movff	movement@mL,reverse@mL
  3766   000C6E  C027  F01D         	movff	movement@mL+1,reverse@mL+1
  3767   000C72  C028  F01E         	movff	movement@mR,reverse@mR
  3768   000C76  C029  F01F         	movff	movement@mR+1,reverse@mR+1
  3769   000C7A  EC18  F00D         	call	_reverse	;wreg free
  3770   000C7E  0E03               	movlw	3
  3771   000C80  6E04               	movwf	(custom_delay@temp+1)^0,c
  3772   000C82  0E84               	movlw	132
  3773   000C84  6E03               	movwf	custom_delay@temp^0,c
  3774   000C86  EC75  F010         	call	_custom_delay	;wreg free
  3775   000C8A  C026  F016         	movff	movement@mL,stop@mL
  3776   000C8E  C027  F017         	movff	movement@mL+1,stop@mL+1
  3777   000C92  C028  F018         	movff	movement@mR,stop@mR
  3778   000C96  C029  F019         	movff	movement@mR+1,stop@mR+1
  3779   000C9A  EC8D  F00D         	call	_stop	;wreg free
  3780   000C9E  0E29               	movlw	41
  3781   000CA0  6E2C               	movwf	(??_movement+1)^0,c
  3782   000CA2  0E96               	movlw	150
  3783   000CA4  6E2B               	movwf	??_movement^0,c
  3784   000CA6  0E7F               	movlw	127
  3785   000CA8                     u2737:
  3786   000CA8  2EE8               	decfsz	wreg,f,c
  3787   000CAA  D7FE               	bra	u2737
  3788   000CAC  2E2B               	decfsz	??_movement^0,f,c
  3789   000CAE  D7FC               	bra	u2737
  3790   000CB0  2E2C               	decfsz	(??_movement+1)^0,f,c
  3791   000CB2  D7FA               	bra	u2737
  3792   000CB4  F000               	nop	
  3793   000CB6  C026  F01C         	movff	movement@mL,left_45@mL
  3794   000CBA  C027  F01D         	movff	movement@mL+1,left_45@mL+1
  3795   000CBE  C028  F01E         	movff	movement@mR,left_45@mR
  3796   000CC2  C029  F01F         	movff	movement@mR+1,left_45@mR+1
  3797   000CC6  0E02               	movlw	2
  3798   000CC8  6E20               	movwf	left_45@count^0,c
  3799   000CCA  C05B  F021         	movff	_left_timer,left_45@left_timer
  3800   000CCE  C05C  F022         	movff	_left_timer+1,left_45@left_timer+1
  3801   000CD2  EC0B  F00B         	call	_left_45	;wreg free
  3802   000CD6  C026  F016         	movff	movement@mL,stop@mL
  3803   000CDA  C027  F017         	movff	movement@mL+1,stop@mL+1
  3804   000CDE  C028  F018         	movff	movement@mR,stop@mR
  3805   000CE2  C029  F019         	movff	movement@mR+1,stop@mR+1
  3806   000CE6  EC8D  F00D         	call	_stop	;wreg free
  3807   000CEA                     l2871:
  3808                           
  3809                           ;dc_motor.c: 314:     if (count == 6){right_45(mL,mR,3,right_timer); stop(mL,mR);}
  3810   000CEA  0E06               	movlw	6
  3811   000CEC  182A               	xorwf	movement@count^0,w,c
  3812   000CEE  A4D8               	btfss	status,2,c
  3813   000CF0  EF7C  F006         	goto	u2071
  3814   000CF4  EF7E  F006         	goto	u2070
  3815   000CF8                     u2071:
  3816   000CF8  EF98  F006         	goto	l2875
  3817   000CFC                     u2070:
  3818   000CFC  C026  F01C         	movff	movement@mL,right_45@mL
  3819   000D00  C027  F01D         	movff	movement@mL+1,right_45@mL+1
  3820   000D04  C028  F01E         	movff	movement@mR,right_45@mR
  3821   000D08  C029  F01F         	movff	movement@mR+1,right_45@mR+1
  3822   000D0C  0E03               	movlw	3
  3823   000D0E  6E20               	movwf	right_45@count^0,c
  3824   000D10  C059  F021         	movff	_right_timer,right_45@right_timer
  3825   000D14  C05A  F022         	movff	_right_timer+1,right_45@right_timer+1
  3826   000D18  EC76  F00A         	call	_right_45	;wreg free
  3827   000D1C  C026  F016         	movff	movement@mL,stop@mL
  3828   000D20  C027  F017         	movff	movement@mL+1,stop@mL+1
  3829   000D24  C028  F018         	movff	movement@mR,stop@mR
  3830   000D28  C029  F019         	movff	movement@mR+1,stop@mR+1
  3831   000D2C  EC8D  F00D         	call	_stop	;wreg free
  3832   000D30                     l2875:
  3833                           
  3834                           ;dc_motor.c: 315:     if (count == 7){left_45(mL,mR,3,left_timer); stop(mL,mR);}
  3835   000D30  0E07               	movlw	7
  3836   000D32  182A               	xorwf	movement@count^0,w,c
  3837   000D34  A4D8               	btfss	status,2,c
  3838   000D36  EF9F  F006         	goto	u2081
  3839   000D3A  EFA1  F006         	goto	u2080
  3840   000D3E                     u2081:
  3841   000D3E  EFBB  F006         	goto	l351
  3842   000D42                     u2080:
  3843   000D42  C026  F01C         	movff	movement@mL,left_45@mL
  3844   000D46  C027  F01D         	movff	movement@mL+1,left_45@mL+1
  3845   000D4A  C028  F01E         	movff	movement@mR,left_45@mR
  3846   000D4E  C029  F01F         	movff	movement@mR+1,left_45@mR+1
  3847   000D52  0E03               	movlw	3
  3848   000D54  6E20               	movwf	left_45@count^0,c
  3849   000D56  C05B  F021         	movff	_left_timer,left_45@left_timer
  3850   000D5A  C05C  F022         	movff	_left_timer+1,left_45@left_timer+1
  3851   000D5E  EC0B  F00B         	call	_left_45	;wreg free
  3852   000D62  C026  F016         	movff	movement@mL,stop@mL
  3853   000D66  C027  F017         	movff	movement@mL+1,stop@mL+1
  3854   000D6A  C028  F018         	movff	movement@mR,stop@mR
  3855   000D6E  C029  F019         	movff	movement@mR+1,stop@mR+1
  3856   000D72  EC8D  F00D         	call	_stop	;wreg free
  3857   000D76                     l351:
  3858   000D76  0012               	return		;funcret
  3859   000D78                     __end_of_movement:
  3860                           	callstack 0
  3861                           
  3862 ;; *************** function _space *****************
  3863 ;; Defined at:
  3864 ;;		line 247 in file "dc_motor.c"
  3865 ;; Parameters:    Size  Location     Type
  3866 ;;  mL              2   27[COMRAM] PTR struct DC_motor
  3867 ;;		 -> motorL(9), 
  3868 ;;  mR              2   29[COMRAM] PTR struct DC_motor
  3869 ;;		 -> motorR(9), 
  3870 ;; Auto vars:     Size  Location     Type
  3871 ;;		None
  3872 ;; Return value:  Size  Location     Type
  3873 ;;                  1    wreg      void 
  3874 ;; Registers used:
  3875 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3876 ;; Tracked objects:
  3877 ;;		On entry : 0/0
  3878 ;;		On exit  : 0/0
  3879 ;;		Unchanged: 0/0
  3880 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3881 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3882 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3883 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3884 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3885 ;;Total ram usage:        6 bytes
  3886 ;; Hardware stack levels used: 1
  3887 ;; Hardware stack levels required when called: 4
  3888 ;; This function calls:
  3889 ;;		_setMotorPWM
  3890 ;;		_stop
  3891 ;; This function is called by:
  3892 ;;		_buggy_color_response
  3893 ;;		_movement
  3894 ;; This function uses a non-reentrant model
  3895 ;;
  3896                           
  3897                           	psect	text22
  3898   001844                     __ptext22:
  3899                           	callstack 0
  3900   001844                     _space:
  3901                           	callstack 25
  3902   001844                     
  3903                           ;dc_motor.c: 247: void space(DC_motor *mL, DC_motor *mR);dc_motor.c: 248: {;dc_motor.c: 
      +                          249:     stop(mL,mR);
  3904   001844  C01C  F016         	movff	space@mL,stop@mL
  3905   001848  C01D  F017         	movff	space@mL+1,stop@mL+1
  3906   00184C  C01E  F018         	movff	space@mR,stop@mR
  3907   001850  C01F  F019         	movff	space@mR+1,stop@mR+1
  3908   001854  EC8D  F00D         	call	_stop	;wreg free
  3909   001858                     
  3910                           ;dc_motor.c: 250:     LATHbits.LATH1 = 1;
  3911   001858  8280               	bsf	128,1,c	;volatile
  3912   00185A                     
  3913                           ;dc_motor.c: 251:     mL-> direction = 0;
  3914   00185A  EE20 F001          	lfsr	2,1
  3915   00185E  501C               	movf	space@mL^0,w,c
  3916   001860  26D9               	addwf	fsr2l,f,c
  3917   001862  501D               	movf	(space@mL+1)^0,w,c
  3918   001864  22DA               	addwfc	fsr2h,f,c
  3919   001866  0E00               	movlw	0
  3920   001868  6EDF               	movwf	indf2,c
  3921   00186A                     
  3922                           ;dc_motor.c: 252:     mR-> direction = 0;
  3923   00186A  EE20 F001          	lfsr	2,1
  3924   00186E  501E               	movf	space@mR^0,w,c
  3925   001870  26D9               	addwf	fsr2l,f,c
  3926   001872  501F               	movf	(space@mR+1)^0,w,c
  3927   001874  22DA               	addwfc	fsr2h,f,c
  3928   001876  0E00               	movlw	0
  3929   001878  6EDF               	movwf	indf2,c
  3930                           
  3931                           ;dc_motor.c: 253:     setMotorPWM(mR);
  3932   00187A  C01E  F010         	movff	space@mR,setMotorPWM@m
  3933   00187E  C01F  F011         	movff	space@mR+1,setMotorPWM@m+1
  3934   001882  EC23  F009         	call	_setMotorPWM	;wreg free
  3935                           
  3936                           ;dc_motor.c: 254:     setMotorPWM(mL);
  3937   001886  C01C  F010         	movff	space@mL,setMotorPWM@m
  3938   00188A  C01D  F011         	movff	space@mL+1,setMotorPWM@m+1
  3939   00188E  EC23  F009         	call	_setMotorPWM	;wreg free
  3940                           
  3941                           ;dc_motor.c: 255:     while ((mL->power <30) && (mR->power <30)){
  3942   001892  EF67  F00C         	goto	l2583
  3943   001896                     l2575:
  3944                           
  3945                           ;dc_motor.c: 256:         mL->power += 10;
  3946   001896  C01C  FFD9         	movff	space@mL,fsr2l
  3947   00189A  C01D  FFDA         	movff	space@mL+1,fsr2h
  3948   00189E  0E0A               	movlw	10
  3949   0018A0  26DF               	addwf	indf2,f,c
  3950                           
  3951                           ;dc_motor.c: 257:         mR->power += 10;
  3952   0018A2  C01E  FFD9         	movff	space@mR,fsr2l
  3953   0018A6  C01F  FFDA         	movff	space@mR+1,fsr2h
  3954   0018AA  0E0A               	movlw	10
  3955   0018AC  26DF               	addwf	indf2,f,c
  3956   0018AE                     
  3957                           ;dc_motor.c: 258:         setMotorPWM(mL);
  3958   0018AE  C01C  F010         	movff	space@mL,setMotorPWM@m
  3959   0018B2  C01D  F011         	movff	space@mL+1,setMotorPWM@m+1
  3960   0018B6  EC23  F009         	call	_setMotorPWM	;wreg free
  3961   0018BA                     
  3962                           ;dc_motor.c: 259:         setMotorPWM(mR);
  3963   0018BA  C01E  F010         	movff	space@mR,setMotorPWM@m
  3964   0018BE  C01F  F011         	movff	space@mR+1,setMotorPWM@m+1
  3965   0018C2  EC23  F009         	call	_setMotorPWM	;wreg free
  3966   0018C6                     
  3967                           ;dc_motor.c: 260:         _delay((unsigned long)((20)*(64000000/4000000.0)));
  3968   0018C6  0E6A               	movlw	106
  3969   0018C8                     u2747:
  3970   0018C8  2EE8               	decfsz	wreg,f,c
  3971   0018CA  D7FE               	bra	u2747
  3972   0018CC  D000               	nop2	
  3973   0018CE                     l2583:
  3974                           
  3975                           ;dc_motor.c: 255:     while ((mL->power <30) && (mR->power <30)){
  3976   0018CE  C01C  FFD9         	movff	space@mL,fsr2l
  3977   0018D2  C01D  FFDA         	movff	space@mL+1,fsr2h
  3978   0018D6  0E1E               	movlw	30
  3979   0018D8  60DF               	cpfslt	indf2,c
  3980   0018DA  EF71  F00C         	goto	u1591
  3981   0018DE  EF73  F00C         	goto	u1590
  3982   0018E2                     u1591:
  3983   0018E2  EF7F  F00C         	goto	l2587
  3984   0018E6                     u1590:
  3985   0018E6  C01E  FFD9         	movff	space@mR,fsr2l
  3986   0018EA  C01F  FFDA         	movff	space@mR+1,fsr2h
  3987   0018EE  0E1D               	movlw	29
  3988   0018F0  64DF               	cpfsgt	indf2,c
  3989   0018F2  EF7D  F00C         	goto	u1601
  3990   0018F6  EF7F  F00C         	goto	u1600
  3991   0018FA                     u1601:
  3992   0018FA  EF4B  F00C         	goto	l2575
  3993   0018FE                     u1600:
  3994   0018FE                     l2587:
  3995                           
  3996                           ;dc_motor.c: 262:     _delay((unsigned long)((350)*(64000000/4000.0)));
  3997   0018FE  0E1D               	movlw	29
  3998   001900  6E21               	movwf	(??_space+1)^0,c
  3999   001902  0E69               	movlw	105
  4000   001904  6E20               	movwf	??_space^0,c
  4001   001906  0EA5               	movlw	165
  4002   001908                     u2757:
  4003   001908  2EE8               	decfsz	wreg,f,c
  4004   00190A  D7FE               	bra	u2757
  4005   00190C  2E20               	decfsz	??_space^0,f,c
  4006   00190E  D7FC               	bra	u2757
  4007   001910  2E21               	decfsz	(??_space+1)^0,f,c
  4008   001912  D7FA               	bra	u2757
  4009   001914  F000               	nop	
  4010   001916                     
  4011                           ;dc_motor.c: 263:     stop(mL,mR);
  4012   001916  C01C  F016         	movff	space@mL,stop@mL
  4013   00191A  C01D  F017         	movff	space@mL+1,stop@mL+1
  4014   00191E  C01E  F018         	movff	space@mR,stop@mR
  4015   001922  C01F  F019         	movff	space@mR+1,stop@mR+1
  4016   001926  EC8D  F00D         	call	_stop	;wreg free
  4017   00192A                     
  4018                           ;dc_motor.c: 264:     _delay((unsigned long)((200)*(64000000/4000.0)));
  4019   00192A  0E11               	movlw	17
  4020   00192C  6E21               	movwf	(??_space+1)^0,c
  4021   00192E  0E3C               	movlw	60
  4022   001930  6E20               	movwf	??_space^0,c
  4023   001932  0ECB               	movlw	203
  4024   001934                     u2767:
  4025   001934  2EE8               	decfsz	wreg,f,c
  4026   001936  D7FE               	bra	u2767
  4027   001938  2E20               	decfsz	??_space^0,f,c
  4028   00193A  D7FC               	bra	u2767
  4029   00193C  2E21               	decfsz	(??_space+1)^0,f,c
  4030   00193E  D7FA               	bra	u2767
  4031   001940  F000               	nop	
  4032   001942                     
  4033                           ;dc_motor.c: 265:     LATHbits.LATH1 = 0;
  4034   001942  9280               	bcf	128,1,c	;volatile
  4035   001944  0012               	return		;funcret
  4036   001946                     __end_of_space:
  4037                           	callstack 0
  4038                           
  4039 ;; *************** function _right_45 *****************
  4040 ;; Defined at:
  4041 ;;		line 222 in file "dc_motor.c"
  4042 ;; Parameters:    Size  Location     Type
  4043 ;;  mL              2   27[COMRAM] PTR struct DC_motor
  4044 ;;		 -> motorL(9), 
  4045 ;;  mR              2   29[COMRAM] PTR struct DC_motor
  4046 ;;		 -> motorR(9), 
  4047 ;;  count           1   31[COMRAM] unsigned char 
  4048 ;;  right_timer     2   32[COMRAM] int 
  4049 ;; Auto vars:     Size  Location     Type
  4050 ;;  i               1   36[COMRAM] unsigned char 
  4051 ;; Return value:  Size  Location     Type
  4052 ;;                  1    wreg      void 
  4053 ;; Registers used:
  4054 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4055 ;; Tracked objects:
  4056 ;;		On entry : 0/0
  4057 ;;		On exit  : 0/0
  4058 ;;		Unchanged: 0/0
  4059 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4060 ;;      Params:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4061 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4062 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4063 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4064 ;;Total ram usage:       10 bytes
  4065 ;; Hardware stack levels used: 1
  4066 ;; Hardware stack levels required when called: 4
  4067 ;; This function calls:
  4068 ;;		_custom_delay
  4069 ;;		_setMotorPWM
  4070 ;;		_stop
  4071 ;; This function is called by:
  4072 ;;		_reverse_pink
  4073 ;;		_movement
  4074 ;;		_movement_return
  4075 ;;		_right_turn_calibration
  4076 ;; This function uses a non-reentrant model
  4077 ;;
  4078                           
  4079                           	psect	text23
  4080   0014EC                     __ptext23:
  4081                           	callstack 0
  4082   0014EC                     _right_45:
  4083                           	callstack 23
  4084   0014EC                     
  4085                           ;dc_motor.c: 222: void right_45(DC_motor *mL, DC_motor *mR, char count, int right_timer)
      +                          ;dc_motor.c: 223: {;dc_motor.c: 224:     stop(mL,mR);
  4086   0014EC  C01C  F016         	movff	right_45@mL,stop@mL
  4087   0014F0  C01D  F017         	movff	right_45@mL+1,stop@mL+1
  4088   0014F4  C01E  F018         	movff	right_45@mR,stop@mR
  4089   0014F8  C01F  F019         	movff	right_45@mR+1,stop@mR+1
  4090   0014FC  EC8D  F00D         	call	_stop	;wreg free
  4091   001500                     
  4092                           ;dc_motor.c: 225:     mL-> direction = 1;
  4093   001500  EE20 F001          	lfsr	2,1
  4094   001504  501C               	movf	right_45@mL^0,w,c
  4095   001506  26D9               	addwf	fsr2l,f,c
  4096   001508  501D               	movf	(right_45@mL+1)^0,w,c
  4097   00150A  22DA               	addwfc	fsr2h,f,c
  4098   00150C  0E01               	movlw	1
  4099   00150E  6EDF               	movwf	indf2,c
  4100   001510                     
  4101                           ;dc_motor.c: 226:     mR-> direction = 0;
  4102   001510  EE20 F001          	lfsr	2,1
  4103   001514  501E               	movf	right_45@mR^0,w,c
  4104   001516  26D9               	addwf	fsr2l,f,c
  4105   001518  501F               	movf	(right_45@mR+1)^0,w,c
  4106   00151A  22DA               	addwfc	fsr2h,f,c
  4107   00151C  0E00               	movlw	0
  4108   00151E  6EDF               	movwf	indf2,c
  4109   001520                     
  4110                           ;dc_motor.c: 227:     LATHbits.LATH0 = 1;
  4111   001520  8080               	bsf	128,0,c	;volatile
  4112   001522                     
  4113                           ;dc_motor.c: 228:     char i;;dc_motor.c: 229:     for (i = 0;i<count;i++){
  4114   001522  0E00               	movlw	0
  4115   001524  6E25               	movwf	right_45@i^0,c
  4116   001526  EF01  F00B         	goto	l2453
  4117   00152A                     l2425:
  4118                           
  4119                           ;dc_motor.c: 231:         if (mL->power <= 50){mL->power += 10;}
  4120   00152A  C01C  FFD9         	movff	right_45@mL,fsr2l
  4121   00152E  C01D  FFDA         	movff	right_45@mL+1,fsr2h
  4122   001532  0E33               	movlw	51
  4123   001534  60DF               	cpfslt	indf2,c
  4124   001536  EF9F  F00A         	goto	u1481
  4125   00153A  EFA1  F00A         	goto	u1480
  4126   00153E                     u1481:
  4127   00153E  EFA7  F00A         	goto	l2429
  4128   001542                     u1480:
  4129   001542  C01C  FFD9         	movff	right_45@mL,fsr2l
  4130   001546  C01D  FFDA         	movff	right_45@mL+1,fsr2h
  4131   00154A  0E0A               	movlw	10
  4132   00154C  26DF               	addwf	indf2,f,c
  4133   00154E                     l2429:
  4134                           
  4135                           ;dc_motor.c: 232:         if (mR->power <= 50){mR->power += 10;}
  4136   00154E  C01E  FFD9         	movff	right_45@mR,fsr2l
  4137   001552  C01F  FFDA         	movff	right_45@mR+1,fsr2h
  4138   001556  0E33               	movlw	51
  4139   001558  60DF               	cpfslt	indf2,c
  4140   00155A  EFB1  F00A         	goto	u1491
  4141   00155E  EFB3  F00A         	goto	u1490
  4142   001562                     u1491:
  4143   001562  EFB9  F00A         	goto	l2433
  4144   001566                     u1490:
  4145   001566  C01E  FFD9         	movff	right_45@mR,fsr2l
  4146   00156A  C01F  FFDA         	movff	right_45@mR+1,fsr2h
  4147   00156E  0E0A               	movlw	10
  4148   001570  26DF               	addwf	indf2,f,c
  4149   001572                     l2433:
  4150                           
  4151                           ;dc_motor.c: 233:         setMotorPWM(mL);
  4152   001572  C01C  F010         	movff	right_45@mL,setMotorPWM@m
  4153   001576  C01D  F011         	movff	right_45@mL+1,setMotorPWM@m+1
  4154   00157A  EC23  F009         	call	_setMotorPWM	;wreg free
  4155   00157E                     
  4156                           ;dc_motor.c: 234:         setMotorPWM(mR);
  4157   00157E  C01E  F010         	movff	right_45@mR,setMotorPWM@m
  4158   001582  C01F  F011         	movff	right_45@mR+1,setMotorPWM@m+1
  4159   001586  EC23  F009         	call	_setMotorPWM	;wreg free
  4160   00158A                     
  4161                           ;dc_motor.c: 235:         _delay((unsigned long)((10)*(64000000/4000.0)));
  4162   00158A  0ED0               	movlw	208
  4163   00158C  6E23               	movwf	??_right_45^0,c
  4164   00158E  0ECA               	movlw	202
  4165   001590                     u2777:
  4166   001590  2EE8               	decfsz	wreg,f,c
  4167   001592  D7FE               	bra	u2777
  4168   001594  2E23               	decfsz	??_right_45^0,f,c
  4169   001596  D7FC               	bra	u2777
  4170   001598                     l2439:
  4171                           
  4172                           ;dc_motor.c: 230:     while ((mL->power <= 50) || (mR->power <= 50)){
  4173   001598  C01C  FFD9         	movff	right_45@mL,fsr2l
  4174   00159C  C01D  FFDA         	movff	right_45@mL+1,fsr2h
  4175   0015A0  0E32               	movlw	50
  4176   0015A2  64DF               	cpfsgt	indf2,c
  4177   0015A4  EFD6  F00A         	goto	u1501
  4178   0015A8  EFD8  F00A         	goto	u1500
  4179   0015AC                     u1501:
  4180   0015AC  EF95  F00A         	goto	l2425
  4181   0015B0                     u1500:
  4182   0015B0  C01E  FFD9         	movff	right_45@mR,fsr2l
  4183   0015B4  C01F  FFDA         	movff	right_45@mR+1,fsr2h
  4184   0015B8  0E32               	movlw	50
  4185   0015BA  64DF               	cpfsgt	indf2,c
  4186   0015BC  EFE2  F00A         	goto	u1511
  4187   0015C0  EFE4  F00A         	goto	u1510
  4188   0015C4                     u1511:
  4189   0015C4  EF95  F00A         	goto	l2425
  4190   0015C8                     u1510:
  4191   0015C8                     
  4192                           ;dc_motor.c: 237:     custom_delay(right_timer);
  4193   0015C8  C021  F003         	movff	right_45@right_timer,custom_delay@temp
  4194   0015CC  C022  F004         	movff	right_45@right_timer+1,custom_delay@temp+1
  4195   0015D0  EC75  F010         	call	_custom_delay	;wreg free
  4196   0015D4                     
  4197                           ;dc_motor.c: 238:     stop(mL,mR);
  4198   0015D4  C01C  F016         	movff	right_45@mL,stop@mL
  4199   0015D8  C01D  F017         	movff	right_45@mL+1,stop@mL+1
  4200   0015DC  C01E  F018         	movff	right_45@mR,stop@mR
  4201   0015E0  C01F  F019         	movff	right_45@mR+1,stop@mR+1
  4202   0015E4  EC8D  F00D         	call	_stop	;wreg free
  4203   0015E8                     
  4204                           ;dc_motor.c: 239:     _delay((unsigned long)((150)*(64000000/4000.0)));
  4205   0015E8  0E0D               	movlw	13
  4206   0015EA  6E24               	movwf	(??_right_45+1)^0,c
  4207   0015EC  0E2D               	movlw	45
  4208   0015EE  6E23               	movwf	??_right_45^0,c
  4209   0015F0  0ED8               	movlw	216
  4210   0015F2                     u2787:
  4211   0015F2  2EE8               	decfsz	wreg,f,c
  4212   0015F4  D7FE               	bra	u2787
  4213   0015F6  2E23               	decfsz	??_right_45^0,f,c
  4214   0015F8  D7FC               	bra	u2787
  4215   0015FA  2E24               	decfsz	(??_right_45+1)^0,f,c
  4216   0015FC  D7FA               	bra	u2787
  4217   0015FE                     
  4218                           ;dc_motor.c: 240:     LATHbits.LATH0 = 0;
  4219   0015FE  9080               	bcf	128,0,c	;volatile
  4220   001600                     
  4221                           ;dc_motor.c: 241:     }
  4222   001600  2A25               	incf	right_45@i^0,f,c
  4223   001602                     l2453:
  4224   001602  5020               	movf	right_45@count^0,w,c
  4225   001604  5C25               	subwf	right_45@i^0,w,c
  4226   001606  A0D8               	btfss	status,0,c
  4227   001608  EF08  F00B         	goto	u1521
  4228   00160C  EF0A  F00B         	goto	u1520
  4229   001610                     u1521:
  4230   001610  EFCC  F00A         	goto	l2439
  4231   001614                     u1520:
  4232   001614  0012               	return		;funcret
  4233   001616                     __end_of_right_45:
  4234                           	callstack 0
  4235                           
  4236 ;; *************** function _reverse *****************
  4237 ;; Defined at:
  4238 ;;		line 148 in file "dc_motor.c"
  4239 ;; Parameters:    Size  Location     Type
  4240 ;;  mL              2   27[COMRAM] PTR struct DC_motor
  4241 ;;		 -> motorL(9), 
  4242 ;;  mR              2   29[COMRAM] PTR struct DC_motor
  4243 ;;		 -> motorR(9), 
  4244 ;; Auto vars:     Size  Location     Type
  4245 ;;		None
  4246 ;; Return value:  Size  Location     Type
  4247 ;;                  1    wreg      void 
  4248 ;; Registers used:
  4249 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4250 ;; Tracked objects:
  4251 ;;		On entry : 0/0
  4252 ;;		On exit  : 0/0
  4253 ;;		Unchanged: 0/0
  4254 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4255 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4256 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4257 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4258 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4259 ;;Total ram usage:        5 bytes
  4260 ;; Hardware stack levels used: 1
  4261 ;; Hardware stack levels required when called: 4
  4262 ;; This function calls:
  4263 ;;		_setMotorPWM
  4264 ;;		_stop
  4265 ;; This function is called by:
  4266 ;;		_return_home
  4267 ;;		_reverse_yellow
  4268 ;;		_reverse_pink
  4269 ;;		_movement
  4270 ;; This function uses a non-reentrant model
  4271 ;;
  4272                           
  4273                           	psect	text24
  4274   001A30                     __ptext24:
  4275                           	callstack 0
  4276   001A30                     _reverse:
  4277                           	callstack 24
  4278   001A30                     
  4279                           ;dc_motor.c: 148: void reverse(DC_motor *mL, DC_motor *mR);dc_motor.c: 149: {;dc_motor.c
      +                          : 150:     stop(mL,mR);
  4280   001A30  C01C  F016         	movff	reverse@mL,stop@mL
  4281   001A34  C01D  F017         	movff	reverse@mL+1,stop@mL+1
  4282   001A38  C01E  F018         	movff	reverse@mR,stop@mR
  4283   001A3C  C01F  F019         	movff	reverse@mR+1,stop@mR+1
  4284   001A40  EC8D  F00D         	call	_stop	;wreg free
  4285   001A44                     
  4286                           ;dc_motor.c: 151:     mL-> direction = 0;
  4287   001A44  EE20 F001          	lfsr	2,1
  4288   001A48  501C               	movf	reverse@mL^0,w,c
  4289   001A4A  26D9               	addwf	fsr2l,f,c
  4290   001A4C  501D               	movf	(reverse@mL+1)^0,w,c
  4291   001A4E  22DA               	addwfc	fsr2h,f,c
  4292   001A50  0E00               	movlw	0
  4293   001A52  6EDF               	movwf	indf2,c
  4294   001A54                     
  4295                           ;dc_motor.c: 152:     mR-> direction = 0;
  4296   001A54  EE20 F001          	lfsr	2,1
  4297   001A58  501E               	movf	reverse@mR^0,w,c
  4298   001A5A  26D9               	addwf	fsr2l,f,c
  4299   001A5C  501F               	movf	(reverse@mR+1)^0,w,c
  4300   001A5E  22DA               	addwfc	fsr2h,f,c
  4301   001A60  0E00               	movlw	0
  4302   001A62  6EDF               	movwf	indf2,c
  4303   001A64                     
  4304                           ;dc_motor.c: 153:     LATHbits.LATH1 = 1;
  4305   001A64  8280               	bsf	128,1,c	;volatile
  4306                           
  4307                           ;dc_motor.c: 154:     setMotorPWM(mR);
  4308   001A66  C01E  F010         	movff	reverse@mR,setMotorPWM@m
  4309   001A6A  C01F  F011         	movff	reverse@mR+1,setMotorPWM@m+1
  4310   001A6E  EC23  F009         	call	_setMotorPWM	;wreg free
  4311                           
  4312                           ;dc_motor.c: 155:     setMotorPWM(mL);
  4313   001A72  C01C  F010         	movff	reverse@mL,setMotorPWM@m
  4314   001A76  C01D  F011         	movff	reverse@mL+1,setMotorPWM@m+1
  4315   001A7A  EC23  F009         	call	_setMotorPWM	;wreg free
  4316                           
  4317                           ;dc_motor.c: 156:     while ((mL->power <= 50) || (mR->power <= 55)){
  4318   001A7E  EF73  F00D         	goto	l295
  4319   001A82                     l2359:
  4320                           
  4321                           ;dc_motor.c: 157:         if (mL->power <= 50){mL->power += 1;}
  4322   001A82  C01C  FFD9         	movff	reverse@mL,fsr2l
  4323   001A86  C01D  FFDA         	movff	reverse@mL+1,fsr2h
  4324   001A8A  0E33               	movlw	51
  4325   001A8C  60DF               	cpfslt	indf2,c
  4326   001A8E  EF4B  F00D         	goto	u1391
  4327   001A92  EF4D  F00D         	goto	u1390
  4328   001A96                     u1391:
  4329   001A96  EF52  F00D         	goto	l2363
  4330   001A9A                     u1390:
  4331   001A9A  C01C  FFD9         	movff	reverse@mL,fsr2l
  4332   001A9E  C01D  FFDA         	movff	reverse@mL+1,fsr2h
  4333   001AA2  2ADF               	incf	indf2,f,c
  4334   001AA4                     l2363:
  4335                           
  4336                           ;dc_motor.c: 158:         if (mR->power <= 55){mR->power += 1;}
  4337   001AA4  C01E  FFD9         	movff	reverse@mR,fsr2l
  4338   001AA8  C01F  FFDA         	movff	reverse@mR+1,fsr2h
  4339   001AAC  0E38               	movlw	56
  4340   001AAE  60DF               	cpfslt	indf2,c
  4341   001AB0  EF5C  F00D         	goto	u1401
  4342   001AB4  EF5E  F00D         	goto	u1400
  4343   001AB8                     u1401:
  4344   001AB8  EF63  F00D         	goto	l2367
  4345   001ABC                     u1400:
  4346   001ABC  C01E  FFD9         	movff	reverse@mR,fsr2l
  4347   001AC0  C01F  FFDA         	movff	reverse@mR+1,fsr2h
  4348   001AC4  2ADF               	incf	indf2,f,c
  4349   001AC6                     l2367:
  4350                           
  4351                           ;dc_motor.c: 159:         setMotorPWM(mL);
  4352   001AC6  C01C  F010         	movff	reverse@mL,setMotorPWM@m
  4353   001ACA  C01D  F011         	movff	reverse@mL+1,setMotorPWM@m+1
  4354   001ACE  EC23  F009         	call	_setMotorPWM	;wreg free
  4355   001AD2                     
  4356                           ;dc_motor.c: 160:         setMotorPWM(mR);
  4357   001AD2  C01E  F010         	movff	reverse@mR,setMotorPWM@m
  4358   001AD6  C01F  F011         	movff	reverse@mR+1,setMotorPWM@m+1
  4359   001ADA  EC23  F009         	call	_setMotorPWM	;wreg free
  4360   001ADE                     
  4361                           ;dc_motor.c: 161:         _delay((unsigned long)((5)*(64000000/4000000.0)));
  4362   001ADE  0E1A               	movlw	26
  4363   001AE0                     u2797:
  4364   001AE0  2EE8               	decfsz	wreg,f,c
  4365   001AE2  D7FE               	bra	u2797
  4366   001AE4  D000               	nop2	
  4367   001AE6                     l295:
  4368                           
  4369                           ;dc_motor.c: 156:     while ((mL->power <= 50) || (mR->power <= 55)){
  4370   001AE6  C01C  FFD9         	movff	reverse@mL,fsr2l
  4371   001AEA  C01D  FFDA         	movff	reverse@mL+1,fsr2h
  4372   001AEE  0E32               	movlw	50
  4373   001AF0  64DF               	cpfsgt	indf2,c
  4374   001AF2  EF7D  F00D         	goto	u1411
  4375   001AF6  EF7F  F00D         	goto	u1410
  4376   001AFA                     u1411:
  4377   001AFA  EF41  F00D         	goto	l2359
  4378   001AFE                     u1410:
  4379   001AFE  C01E  FFD9         	movff	reverse@mR,fsr2l
  4380   001B02  C01F  FFDA         	movff	reverse@mR+1,fsr2h
  4381   001B06  0E37               	movlw	55
  4382   001B08  64DF               	cpfsgt	indf2,c
  4383   001B0A  EF89  F00D         	goto	u1421
  4384   001B0E  EF8B  F00D         	goto	u1420
  4385   001B12                     u1421:
  4386   001B12  EF41  F00D         	goto	l2359
  4387   001B16                     u1420:
  4388   001B16                     
  4389                           ;dc_motor.c: 163:     LATHbits.LATH1 = 0;
  4390   001B16  9280               	bcf	128,1,c	;volatile
  4391   001B18  0012               	return		;funcret
  4392   001B1A                     __end_of_reverse:
  4393                           	callstack 0
  4394                           
  4395 ;; *************** function _left_45 *****************
  4396 ;; Defined at:
  4397 ;;		line 195 in file "dc_motor.c"
  4398 ;; Parameters:    Size  Location     Type
  4399 ;;  mL              2   27[COMRAM] PTR struct DC_motor
  4400 ;;		 -> motorL(9), 
  4401 ;;  mR              2   29[COMRAM] PTR struct DC_motor
  4402 ;;		 -> motorR(9), 
  4403 ;;  count           1   31[COMRAM] unsigned char 
  4404 ;;  left_timer      2   32[COMRAM] int 
  4405 ;; Auto vars:     Size  Location     Type
  4406 ;;  i               1   36[COMRAM] unsigned char 
  4407 ;; Return value:  Size  Location     Type
  4408 ;;                  1    wreg      void 
  4409 ;; Registers used:
  4410 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4411 ;; Tracked objects:
  4412 ;;		On entry : 0/0
  4413 ;;		On exit  : 0/0
  4414 ;;		Unchanged: 0/0
  4415 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4416 ;;      Params:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4417 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4418 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4419 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4420 ;;Total ram usage:       10 bytes
  4421 ;; Hardware stack levels used: 1
  4422 ;; Hardware stack levels required when called: 4
  4423 ;; This function calls:
  4424 ;;		_custom_delay
  4425 ;;		_setMotorPWM
  4426 ;;		_stop
  4427 ;; This function is called by:
  4428 ;;		_reverse_yellow
  4429 ;;		_movement
  4430 ;;		_movement_return
  4431 ;;		_left_turn_calibration
  4432 ;; This function uses a non-reentrant model
  4433 ;;
  4434                           
  4435                           	psect	text25
  4436   001616                     __ptext25:
  4437                           	callstack 0
  4438   001616                     _left_45:
  4439                           	callstack 22
  4440   001616                     
  4441                           ;dc_motor.c: 195: void left_45(DC_motor *mL, DC_motor *mR, char count, int left_timer);d
      +                          c_motor.c: 196: {;dc_motor.c: 197:     stop(mL,mR);
  4442   001616  C01C  F016         	movff	left_45@mL,stop@mL
  4443   00161A  C01D  F017         	movff	left_45@mL+1,stop@mL+1
  4444   00161E  C01E  F018         	movff	left_45@mR,stop@mR
  4445   001622  C01F  F019         	movff	left_45@mR+1,stop@mR+1
  4446   001626  EC8D  F00D         	call	_stop	;wreg free
  4447   00162A                     
  4448                           ;dc_motor.c: 198:     mL-> direction = 0;
  4449   00162A  EE20 F001          	lfsr	2,1
  4450   00162E  501C               	movf	left_45@mL^0,w,c
  4451   001630  26D9               	addwf	fsr2l,f,c
  4452   001632  501D               	movf	(left_45@mL+1)^0,w,c
  4453   001634  22DA               	addwfc	fsr2h,f,c
  4454   001636  0E00               	movlw	0
  4455   001638  6EDF               	movwf	indf2,c
  4456   00163A                     
  4457                           ;dc_motor.c: 199:     mR-> direction = 1;
  4458   00163A  EE20 F001          	lfsr	2,1
  4459   00163E  501E               	movf	left_45@mR^0,w,c
  4460   001640  26D9               	addwf	fsr2l,f,c
  4461   001642  501F               	movf	(left_45@mR+1)^0,w,c
  4462   001644  22DA               	addwfc	fsr2h,f,c
  4463   001646  0E01               	movlw	1
  4464   001648  6EDF               	movwf	indf2,c
  4465   00164A                     
  4466                           ;dc_motor.c: 200:     LATFbits.LATF0 = 1;
  4467   00164A  807E               	bsf	126,0,c	;volatile
  4468   00164C                     
  4469                           ;dc_motor.c: 201:     char i;;dc_motor.c: 202:     for (i = 0;i<count;i++){
  4470   00164C  0E00               	movlw	0
  4471   00164E  6E25               	movwf	left_45@i^0,c
  4472   001650  EF96  F00B         	goto	l2413
  4473   001654                     l2385:
  4474                           
  4475                           ;dc_motor.c: 204:         if (mL->power <= 50){mL->power += 10;}
  4476   001654  C01C  FFD9         	movff	left_45@mL,fsr2l
  4477   001658  C01D  FFDA         	movff	left_45@mL+1,fsr2h
  4478   00165C  0E33               	movlw	51
  4479   00165E  60DF               	cpfslt	indf2,c
  4480   001660  EF34  F00B         	goto	u1431
  4481   001664  EF36  F00B         	goto	u1430
  4482   001668                     u1431:
  4483   001668  EF3C  F00B         	goto	l2389
  4484   00166C                     u1430:
  4485   00166C  C01C  FFD9         	movff	left_45@mL,fsr2l
  4486   001670  C01D  FFDA         	movff	left_45@mL+1,fsr2h
  4487   001674  0E0A               	movlw	10
  4488   001676  26DF               	addwf	indf2,f,c
  4489   001678                     l2389:
  4490                           
  4491                           ;dc_motor.c: 205:         if (mR->power <= 50){mR->power += 10;}
  4492   001678  C01E  FFD9         	movff	left_45@mR,fsr2l
  4493   00167C  C01F  FFDA         	movff	left_45@mR+1,fsr2h
  4494   001680  0E33               	movlw	51
  4495   001682  60DF               	cpfslt	indf2,c
  4496   001684  EF46  F00B         	goto	u1441
  4497   001688  EF48  F00B         	goto	u1440
  4498   00168C                     u1441:
  4499   00168C  EF4E  F00B         	goto	l2393
  4500   001690                     u1440:
  4501   001690  C01E  FFD9         	movff	left_45@mR,fsr2l
  4502   001694  C01F  FFDA         	movff	left_45@mR+1,fsr2h
  4503   001698  0E0A               	movlw	10
  4504   00169A  26DF               	addwf	indf2,f,c
  4505   00169C                     l2393:
  4506                           
  4507                           ;dc_motor.c: 206:         setMotorPWM(mL);
  4508   00169C  C01C  F010         	movff	left_45@mL,setMotorPWM@m
  4509   0016A0  C01D  F011         	movff	left_45@mL+1,setMotorPWM@m+1
  4510   0016A4  EC23  F009         	call	_setMotorPWM	;wreg free
  4511   0016A8                     
  4512                           ;dc_motor.c: 207:         setMotorPWM(mR);
  4513   0016A8  C01E  F010         	movff	left_45@mR,setMotorPWM@m
  4514   0016AC  C01F  F011         	movff	left_45@mR+1,setMotorPWM@m+1
  4515   0016B0  EC23  F009         	call	_setMotorPWM	;wreg free
  4516   0016B4                     
  4517                           ;dc_motor.c: 208:         _delay((unsigned long)((10)*(64000000/4000.0)));
  4518   0016B4  0ED0               	movlw	208
  4519   0016B6  6E23               	movwf	??_left_45^0,c
  4520   0016B8  0ECA               	movlw	202
  4521   0016BA                     u2807:
  4522   0016BA  2EE8               	decfsz	wreg,f,c
  4523   0016BC  D7FE               	bra	u2807
  4524   0016BE  2E23               	decfsz	??_left_45^0,f,c
  4525   0016C0  D7FC               	bra	u2807
  4526   0016C2                     l2399:
  4527                           
  4528                           ;dc_motor.c: 203:     while ((mL->power <= 50) || (mR->power <= 50)){
  4529   0016C2  C01C  FFD9         	movff	left_45@mL,fsr2l
  4530   0016C6  C01D  FFDA         	movff	left_45@mL+1,fsr2h
  4531   0016CA  0E32               	movlw	50
  4532   0016CC  64DF               	cpfsgt	indf2,c
  4533   0016CE  EF6B  F00B         	goto	u1451
  4534   0016D2  EF6D  F00B         	goto	u1450
  4535   0016D6                     u1451:
  4536   0016D6  EF2A  F00B         	goto	l2385
  4537   0016DA                     u1450:
  4538   0016DA  C01E  FFD9         	movff	left_45@mR,fsr2l
  4539   0016DE  C01F  FFDA         	movff	left_45@mR+1,fsr2h
  4540   0016E2  0E32               	movlw	50
  4541   0016E4  64DF               	cpfsgt	indf2,c
  4542   0016E6  EF77  F00B         	goto	u1461
  4543   0016EA  EF79  F00B         	goto	u1460
  4544   0016EE                     u1461:
  4545   0016EE  EF2A  F00B         	goto	l2385
  4546   0016F2                     u1460:
  4547   0016F2                     
  4548                           ;dc_motor.c: 210:     custom_delay(left_timer);
  4549   0016F2  C021  F003         	movff	left_45@left_timer,custom_delay@temp
  4550   0016F6  C022  F004         	movff	left_45@left_timer+1,custom_delay@temp+1
  4551   0016FA  EC75  F010         	call	_custom_delay	;wreg free
  4552   0016FE                     
  4553                           ;dc_motor.c: 211:     stop(mL,mR);
  4554   0016FE  C01C  F016         	movff	left_45@mL,stop@mL
  4555   001702  C01D  F017         	movff	left_45@mL+1,stop@mL+1
  4556   001706  C01E  F018         	movff	left_45@mR,stop@mR
  4557   00170A  C01F  F019         	movff	left_45@mR+1,stop@mR+1
  4558   00170E  EC8D  F00D         	call	_stop	;wreg free
  4559   001712                     
  4560                           ;dc_motor.c: 212:     _delay((unsigned long)((150)*(64000000/4000.0)));
  4561   001712  0E0D               	movlw	13
  4562   001714  6E24               	movwf	(??_left_45+1)^0,c
  4563   001716  0E2D               	movlw	45
  4564   001718  6E23               	movwf	??_left_45^0,c
  4565   00171A  0ED8               	movlw	216
  4566   00171C                     u2817:
  4567   00171C  2EE8               	decfsz	wreg,f,c
  4568   00171E  D7FE               	bra	u2817
  4569   001720  2E23               	decfsz	??_left_45^0,f,c
  4570   001722  D7FC               	bra	u2817
  4571   001724  2E24               	decfsz	(??_left_45+1)^0,f,c
  4572   001726  D7FA               	bra	u2817
  4573   001728                     
  4574                           ;dc_motor.c: 213:     LATFbits.LATF0 = 0;
  4575   001728  907E               	bcf	126,0,c	;volatile
  4576   00172A                     
  4577                           ;dc_motor.c: 214:     }
  4578   00172A  2A25               	incf	left_45@i^0,f,c
  4579   00172C                     l2413:
  4580   00172C  5020               	movf	left_45@count^0,w,c
  4581   00172E  5C25               	subwf	left_45@i^0,w,c
  4582   001730  A0D8               	btfss	status,0,c
  4583   001732  EF9D  F00B         	goto	u1471
  4584   001736  EF9F  F00B         	goto	u1470
  4585   00173A                     u1471:
  4586   00173A  EF61  F00B         	goto	l2399
  4587   00173E                     u1470:
  4588   00173E  0012               	return		;funcret
  4589   001740                     __end_of_left_45:
  4590                           	callstack 0
  4591                           
  4592 ;; *************** function _stop *****************
  4593 ;; Defined at:
  4594 ;;		line 169 in file "dc_motor.c"
  4595 ;; Parameters:    Size  Location     Type
  4596 ;;  mL              2   21[COMRAM] PTR struct DC_motor
  4597 ;;		 -> motorL(9), 
  4598 ;;  mR              2   23[COMRAM] PTR struct DC_motor
  4599 ;;		 -> motorR(9), 
  4600 ;; Auto vars:     Size  Location     Type
  4601 ;;  i               2   25[COMRAM] int 
  4602 ;; Return value:  Size  Location     Type
  4603 ;;                  1    wreg      void 
  4604 ;; Registers used:
  4605 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4606 ;; Tracked objects:
  4607 ;;		On entry : 0/0
  4608 ;;		On exit  : 0/0
  4609 ;;		Unchanged: 0/0
  4610 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4611 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4612 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4613 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4614 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4615 ;;Total ram usage:        6 bytes
  4616 ;; Hardware stack levels used: 1
  4617 ;; Hardware stack levels required when called: 3
  4618 ;; This function calls:
  4619 ;;		_setMotorPWM
  4620 ;; This function is called by:
  4621 ;;		_buggy_color_response
  4622 ;;		_return_home
  4623 ;;		_forward
  4624 ;;		_reverse
  4625 ;;		_left_45
  4626 ;;		_right_45
  4627 ;;		_space
  4628 ;;		_reverse_yellow
  4629 ;;		_reverse_pink
  4630 ;;		_movement
  4631 ;;		_movement_return
  4632 ;; This function uses a non-reentrant model
  4633 ;;
  4634                           
  4635                           	psect	text26
  4636   001B1A                     __ptext26:
  4637                           	callstack 0
  4638   001B1A                     _stop:
  4639                           	callstack 26
  4640   001B1A                     
  4641                           ;dc_motor.c: 169: void stop(DC_motor *mL, DC_motor *mR);dc_motor.c: 170: {;dc_motor.c: 1
      +                          71:     mL->brakemode = 1;
  4642   001B1A  EE20 F002          	lfsr	2,2
  4643   001B1E  5016               	movf	stop@mL^0,w,c
  4644   001B20  26D9               	addwf	fsr2l,f,c
  4645   001B22  5017               	movf	(stop@mL+1)^0,w,c
  4646   001B24  22DA               	addwfc	fsr2h,f,c
  4647   001B26  0E01               	movlw	1
  4648   001B28  6EDF               	movwf	indf2,c
  4649                           
  4650                           ;dc_motor.c: 172:     mR->brakemode = 1;
  4651   001B2A  EE20 F002          	lfsr	2,2
  4652   001B2E  5018               	movf	stop@mR^0,w,c
  4653   001B30  26D9               	addwf	fsr2l,f,c
  4654   001B32  5019               	movf	(stop@mR+1)^0,w,c
  4655   001B34  22DA               	addwfc	fsr2h,f,c
  4656   001B36  0E01               	movlw	1
  4657   001B38  6EDF               	movwf	indf2,c
  4658   001B3A                     
  4659                           ;dc_motor.c: 173:     LATDbits.LATD4 = 1;
  4660   001B3A  887C               	bsf	124,4,c	;volatile
  4661   001B3C                     
  4662                           ;dc_motor.c: 175:     for (int i = 70; i >= 0; i=i-10) {
  4663   001B3C  0E00               	movlw	0
  4664   001B3E  6E1B               	movwf	(stop@i+1)^0,c
  4665   001B40  0E46               	movlw	70
  4666   001B42  6E1A               	movwf	stop@i^0,c
  4667   001B44                     l2321:
  4668                           
  4669                           ;dc_motor.c: 176:         mL -> power = i;
  4670   001B44  C016  FFD9         	movff	stop@mL,fsr2l
  4671   001B48  C017  FFDA         	movff	stop@mL+1,fsr2h
  4672   001B4C  C01A  FFDF         	movff	stop@i,indf2
  4673                           
  4674                           ;dc_motor.c: 177:         mR -> power = i;
  4675   001B50  C018  FFD9         	movff	stop@mR,fsr2l
  4676   001B54  C019  FFDA         	movff	stop@mR+1,fsr2h
  4677   001B58  C01A  FFDF         	movff	stop@i,indf2
  4678   001B5C                     
  4679                           ;dc_motor.c: 178:         setMotorPWM(mL);
  4680   001B5C  C016  F010         	movff	stop@mL,setMotorPWM@m
  4681   001B60  C017  F011         	movff	stop@mL+1,setMotorPWM@m+1
  4682   001B64  EC23  F009         	call	_setMotorPWM	;wreg free
  4683   001B68                     
  4684                           ;dc_motor.c: 179:         setMotorPWM(mR);
  4685   001B68  C018  F010         	movff	stop@mR,setMotorPWM@m
  4686   001B6C  C019  F011         	movff	stop@mR+1,setMotorPWM@m+1
  4687   001B70  EC23  F009         	call	_setMotorPWM	;wreg free
  4688   001B74                     
  4689                           ;dc_motor.c: 180:         _delay((unsigned long)((20)*(64000000/4000000.0)));
  4690   001B74  0E6A               	movlw	106
  4691   001B76                     u2827:
  4692   001B76  2EE8               	decfsz	wreg,f,c
  4693   001B78  D7FE               	bra	u2827
  4694   001B7A  D000               	nop2	
  4695   001B7C                     
  4696                           ;dc_motor.c: 181:     }
  4697   001B7C  0EF6               	movlw	246
  4698   001B7E  241A               	addwf	stop@i^0,w,c
  4699   001B80  6E1A               	movwf	stop@i^0,c
  4700   001B82  0EFF               	movlw	255
  4701   001B84  201B               	addwfc	(stop@i+1)^0,w,c
  4702   001B86  6E1B               	movwf	(stop@i+1)^0,c
  4703   001B88  BE1B               	btfsc	(stop@i+1)^0,7,c
  4704   001B8A  EFCB  F00D         	goto	u1350
  4705   001B8E  EFC9  F00D         	goto	u1351
  4706   001B92                     u1351:
  4707   001B92  EFA2  F00D         	goto	l2321
  4708   001B96                     u1350:
  4709   001B96                     
  4710                           ;dc_motor.c: 183:     mL->power = 0;
  4711   001B96  C016  FFD9         	movff	stop@mL,fsr2l
  4712   001B9A  C017  FFDA         	movff	stop@mL+1,fsr2h
  4713   001B9E  0E00               	movlw	0
  4714   001BA0  6EDF               	movwf	indf2,c
  4715                           
  4716                           ;dc_motor.c: 184:     mR->power = 0;
  4717   001BA2  C018  FFD9         	movff	stop@mR,fsr2l
  4718   001BA6  C019  FFDA         	movff	stop@mR+1,fsr2h
  4719   001BAA  0E00               	movlw	0
  4720   001BAC  6EDF               	movwf	indf2,c
  4721   001BAE                     
  4722                           ;dc_motor.c: 185:     setMotorPWM(mL);
  4723   001BAE  C016  F010         	movff	stop@mL,setMotorPWM@m
  4724   001BB2  C017  F011         	movff	stop@mL+1,setMotorPWM@m+1
  4725   001BB6  EC23  F009         	call	_setMotorPWM	;wreg free
  4726   001BBA                     
  4727                           ;dc_motor.c: 186:     setMotorPWM(mR);
  4728   001BBA  C018  F010         	movff	stop@mR,setMotorPWM@m
  4729   001BBE  C019  F011         	movff	stop@mR+1,setMotorPWM@m+1
  4730   001BC2  EC23  F009         	call	_setMotorPWM	;wreg free
  4731   001BC6                     
  4732                           ;dc_motor.c: 187:     LATDbits.LATD4 = 0;
  4733   001BC6  987C               	bcf	124,4,c	;volatile
  4734   001BC8  0012               	return		;funcret
  4735   001BCA                     __end_of_stop:
  4736                           	callstack 0
  4737                           
  4738 ;; *************** function _setMotorPWM *****************
  4739 ;; Defined at:
  4740 ;;		line 78 in file "dc_motor.c"
  4741 ;; Parameters:    Size  Location     Type
  4742 ;;  m               2   15[COMRAM] PTR struct DC_motor
  4743 ;;		 -> motorR(9), motorL(9), 
  4744 ;; Auto vars:     Size  Location     Type
  4745 ;;  negDuty         1   20[COMRAM] unsigned char 
  4746 ;;  posDuty         1   19[COMRAM] unsigned char 
  4747 ;; Return value:  Size  Location     Type
  4748 ;;                  1    wreg      void 
  4749 ;; Registers used:
  4750 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4751 ;; Tracked objects:
  4752 ;;		On entry : 0/0
  4753 ;;		On exit  : 0/0
  4754 ;;		Unchanged: 0/0
  4755 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4756 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4757 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4758 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4759 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4760 ;;Total ram usage:        6 bytes
  4761 ;; Hardware stack levels used: 1
  4762 ;; Hardware stack levels required when called: 2
  4763 ;; This function calls:
  4764 ;;		___lwdiv
  4765 ;;		___wmul
  4766 ;; This function is called by:
  4767 ;;		_forward
  4768 ;;		_reverse
  4769 ;;		_stop
  4770 ;;		_left_45
  4771 ;;		_right_45
  4772 ;;		_space
  4773 ;; This function uses a non-reentrant model
  4774 ;;
  4775                           
  4776                           	psect	text27
  4777   001246                     __ptext27:
  4778                           	callstack 0
  4779   001246                     _setMotorPWM:
  4780                           	callstack 26
  4781   001246                     
  4782                           ;dc_motor.c: 78: void setMotorPWM(DC_motor *m);dc_motor.c: 79: {;dc_motor.c: 80:     uns
      +                          igned char posDuty, negDuty;;dc_motor.c: 82:     if(m->brakemode) {
  4783   001246  EE20 F002          	lfsr	2,2
  4784   00124A  5010               	movf	setMotorPWM@m^0,w,c
  4785   00124C  26D9               	addwf	fsr2l,f,c
  4786   00124E  5011               	movf	(setMotorPWM@m+1)^0,w,c
  4787   001250  22DA               	addwfc	fsr2h,f,c
  4788   001252  50DF               	movf	indf2,w,c
  4789   001254  B4D8               	btfsc	status,2,c
  4790   001256  EF2F  F009         	goto	u1331
  4791   00125A  EF31  F009         	goto	u1330
  4792   00125E                     u1331:
  4793   00125E  EF65  F009         	goto	l2301
  4794   001262                     u1330:
  4795   001262                     
  4796                           ;dc_motor.c: 83:         posDuty = m->PWMperiod - ((unsigned int)(m->power)*(m->PWMperio
      +                          d))/100;
  4797   001262  C010  FFD9         	movff	setMotorPWM@m,fsr2l
  4798   001266  C011  FFDA         	movff	setMotorPWM@m+1,fsr2h
  4799   00126A  50DF               	movf	indf2,w,c
  4800   00126C  6E12               	movwf	??_setMotorPWM^0,c
  4801   00126E  5012               	movf	??_setMotorPWM^0,w,c
  4802   001270  6E03               	movwf	___wmul@multiplier^0,c
  4803   001272  6A04               	clrf	(___wmul@multiplier+1)^0,c
  4804   001274  EE20 F003          	lfsr	2,3
  4805   001278  5010               	movf	setMotorPWM@m^0,w,c
  4806   00127A  26D9               	addwf	fsr2l,f,c
  4807   00127C  5011               	movf	(setMotorPWM@m+1)^0,w,c
  4808   00127E  22DA               	addwfc	fsr2h,f,c
  4809   001280  CFDE F005          	movff	postinc2,___wmul@multiplicand
  4810   001284  CFDD F006          	movff	postdec2,___wmul@multiplicand+1
  4811   001288  ECD8  F010         	call	___wmul	;wreg free
  4812   00128C  C003  F009         	movff	?___wmul,___lwdiv@dividend
  4813   001290  C004  F00A         	movff	?___wmul+1,___lwdiv@dividend+1
  4814   001294  0E00               	movlw	0
  4815   001296  6E0C               	movwf	(___lwdiv@divisor+1)^0,c
  4816   001298  0E64               	movlw	100
  4817   00129A  6E0B               	movwf	___lwdiv@divisor^0,c
  4818   00129C  ECAF  F00E         	call	___lwdiv	;wreg free
  4819   0012A0  EE20 F003          	lfsr	2,3
  4820   0012A4  5010               	movf	setMotorPWM@m^0,w,c
  4821   0012A6  26D9               	addwf	fsr2l,f,c
  4822   0012A8  5011               	movf	(setMotorPWM@m+1)^0,w,c
  4823   0012AA  22DA               	addwfc	fsr2h,f,c
  4824   0012AC  50DF               	movf	indf2,w,c
  4825   0012AE  6E13               	movwf	(??_setMotorPWM+1)^0,c
  4826   0012B0  5009               	movf	?___lwdiv^0,w,c
  4827   0012B2  5C13               	subwf	(??_setMotorPWM+1)^0,w,c
  4828   0012B4  6E14               	movwf	setMotorPWM@posDuty^0,c
  4829   0012B6                     
  4830                           ;dc_motor.c: 84:         negDuty = m->PWMperiod;
  4831   0012B6  EE20 F003          	lfsr	2,3
  4832   0012BA  5010               	movf	setMotorPWM@m^0,w,c
  4833   0012BC  26D9               	addwf	fsr2l,f,c
  4834   0012BE  5011               	movf	(setMotorPWM@m+1)^0,w,c
  4835   0012C0  22DA               	addwfc	fsr2h,f,c
  4836   0012C2  50DF               	movf	indf2,w,c
  4837   0012C4  6E15               	movwf	setMotorPWM@negDuty^0,c
  4838                           
  4839                           ;dc_motor.c: 85:     }
  4840   0012C6  EF88  F009         	goto	l2305
  4841   0012CA                     l2301:
  4842                           
  4843                           ;dc_motor.c: 87:         posDuty=0;
  4844   0012CA  0E00               	movlw	0
  4845   0012CC  6E14               	movwf	setMotorPWM@posDuty^0,c
  4846   0012CE                     
  4847                           ;dc_motor.c: 88:   negDuty=((unsigned int)(m->power)*(m->PWMperiod))/100;
  4848   0012CE  C010  FFD9         	movff	setMotorPWM@m,fsr2l
  4849   0012D2  C011  FFDA         	movff	setMotorPWM@m+1,fsr2h
  4850   0012D6  50DF               	movf	indf2,w,c
  4851   0012D8  6E12               	movwf	??_setMotorPWM^0,c
  4852   0012DA  5012               	movf	??_setMotorPWM^0,w,c
  4853   0012DC  6E03               	movwf	___wmul@multiplier^0,c
  4854   0012DE  6A04               	clrf	(___wmul@multiplier+1)^0,c
  4855   0012E0  EE20 F003          	lfsr	2,3
  4856   0012E4  5010               	movf	setMotorPWM@m^0,w,c
  4857   0012E6  26D9               	addwf	fsr2l,f,c
  4858   0012E8  5011               	movf	(setMotorPWM@m+1)^0,w,c
  4859   0012EA  22DA               	addwfc	fsr2h,f,c
  4860   0012EC  CFDE F005          	movff	postinc2,___wmul@multiplicand
  4861   0012F0  CFDD F006          	movff	postdec2,___wmul@multiplicand+1
  4862   0012F4  ECD8  F010         	call	___wmul	;wreg free
  4863   0012F8  C003  F009         	movff	?___wmul,___lwdiv@dividend
  4864   0012FC  C004  F00A         	movff	?___wmul+1,___lwdiv@dividend+1
  4865   001300  0E00               	movlw	0
  4866   001302  6E0C               	movwf	(___lwdiv@divisor+1)^0,c
  4867   001304  0E64               	movlw	100
  4868   001306  6E0B               	movwf	___lwdiv@divisor^0,c
  4869   001308  ECAF  F00E         	call	___lwdiv	;wreg free
  4870   00130C  5009               	movf	?___lwdiv^0,w,c
  4871   00130E  6E15               	movwf	setMotorPWM@negDuty^0,c
  4872   001310                     l2305:
  4873                           
  4874                           ;dc_motor.c: 91:     if (m->direction) {
  4875   001310  EE20 F001          	lfsr	2,1
  4876   001314  5010               	movf	setMotorPWM@m^0,w,c
  4877   001316  26D9               	addwf	fsr2l,f,c
  4878   001318  5011               	movf	(setMotorPWM@m+1)^0,w,c
  4879   00131A  22DA               	addwfc	fsr2h,f,c
  4880   00131C  50DF               	movf	indf2,w,c
  4881   00131E  B4D8               	btfsc	status,2,c
  4882   001320  EF94  F009         	goto	u1341
  4883   001324  EF96  F009         	goto	u1340
  4884   001328                     u1341:
  4885   001328  EFB8  F009         	goto	l2309
  4886   00132C                     u1340:
  4887   00132C                     
  4888                           ;dc_motor.c: 92:         *(m->posDutyHighByte)= posDuty;
  4889   00132C  EE20 F005          	lfsr	2,5
  4890   001330  5010               	movf	setMotorPWM@m^0,w,c
  4891   001332  26D9               	addwf	fsr2l,f,c
  4892   001334  5011               	movf	(setMotorPWM@m+1)^0,w,c
  4893   001336  22DA               	addwfc	fsr2h,f,c
  4894   001338  CFDE F012          	movff	postinc2,??_setMotorPWM
  4895   00133C  CFDD F013          	movff	postdec2,??_setMotorPWM+1
  4896   001340  C012  FFD9         	movff	??_setMotorPWM,fsr2l
  4897   001344  C013  FFDA         	movff	??_setMotorPWM+1,fsr2h
  4898   001348  C014  FFDF         	movff	setMotorPWM@posDuty,indf2
  4899                           
  4900                           ;dc_motor.c: 93:         *(m->negDutyHighByte)= negDuty;
  4901   00134C  EE20 F007          	lfsr	2,7
  4902   001350  5010               	movf	setMotorPWM@m^0,w,c
  4903   001352  26D9               	addwf	fsr2l,f,c
  4904   001354  5011               	movf	(setMotorPWM@m+1)^0,w,c
  4905   001356  22DA               	addwfc	fsr2h,f,c
  4906   001358  CFDE F012          	movff	postinc2,??_setMotorPWM
  4907   00135C  CFDD F013          	movff	postdec2,??_setMotorPWM+1
  4908   001360  C012  FFD9         	movff	??_setMotorPWM,fsr2l
  4909   001364  C013  FFDA         	movff	??_setMotorPWM+1,fsr2h
  4910   001368  C015  FFDF         	movff	setMotorPWM@negDuty,indf2
  4911                           
  4912                           ;dc_motor.c: 94:     } else {
  4913   00136C  EFD8  F009         	goto	l281
  4914   001370                     l2309:
  4915                           
  4916                           ;dc_motor.c: 95:         *(m->posDutyHighByte)= negDuty;
  4917   001370  EE20 F005          	lfsr	2,5
  4918   001374  5010               	movf	setMotorPWM@m^0,w,c
  4919   001376  26D9               	addwf	fsr2l,f,c
  4920   001378  5011               	movf	(setMotorPWM@m+1)^0,w,c
  4921   00137A  22DA               	addwfc	fsr2h,f,c
  4922   00137C  CFDE F012          	movff	postinc2,??_setMotorPWM
  4923   001380  CFDD F013          	movff	postdec2,??_setMotorPWM+1
  4924   001384  C012  FFD9         	movff	??_setMotorPWM,fsr2l
  4925   001388  C013  FFDA         	movff	??_setMotorPWM+1,fsr2h
  4926   00138C  C015  FFDF         	movff	setMotorPWM@negDuty,indf2
  4927                           
  4928                           ;dc_motor.c: 96:         *(m->negDutyHighByte)= posDuty;
  4929   001390  EE20 F007          	lfsr	2,7
  4930   001394  5010               	movf	setMotorPWM@m^0,w,c
  4931   001396  26D9               	addwf	fsr2l,f,c
  4932   001398  5011               	movf	(setMotorPWM@m+1)^0,w,c
  4933   00139A  22DA               	addwfc	fsr2h,f,c
  4934   00139C  CFDE F012          	movff	postinc2,??_setMotorPWM
  4935   0013A0  CFDD F013          	movff	postdec2,??_setMotorPWM+1
  4936   0013A4  C012  FFD9         	movff	??_setMotorPWM,fsr2l
  4937   0013A8  C013  FFDA         	movff	??_setMotorPWM+1,fsr2h
  4938   0013AC  C014  FFDF         	movff	setMotorPWM@posDuty,indf2
  4939   0013B0                     l281:
  4940   0013B0  0012               	return		;funcret
  4941   0013B2                     __end_of_setMotorPWM:
  4942                           	callstack 0
  4943                           
  4944 ;; *************** function ___wmul *****************
  4945 ;; Defined at:
  4946 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\Umul16.c"
  4947 ;; Parameters:    Size  Location     Type
  4948 ;;  multiplier      2    2[COMRAM] unsigned int 
  4949 ;;  multiplicand    2    4[COMRAM] unsigned int 
  4950 ;; Auto vars:     Size  Location     Type
  4951 ;;  product         2    6[COMRAM] unsigned int 
  4952 ;; Return value:  Size  Location     Type
  4953 ;;                  2    2[COMRAM] unsigned int 
  4954 ;; Registers used:
  4955 ;;		wreg, status,2, status,0, prodl, prodh
  4956 ;; Tracked objects:
  4957 ;;		On entry : 0/0
  4958 ;;		On exit  : 0/0
  4959 ;;		Unchanged: 0/0
  4960 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4961 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4962 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4963 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4964 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4965 ;;Total ram usage:        6 bytes
  4966 ;; Hardware stack levels used: 1
  4967 ;; Hardware stack levels required when called: 1
  4968 ;; This function calls:
  4969 ;;		Nothing
  4970 ;; This function is called by:
  4971 ;;		_setMotorPWM
  4972 ;; This function uses a non-reentrant model
  4973 ;;
  4974                           
  4975                           	psect	text28
  4976   0021B0                     __ptext28:
  4977                           	callstack 0
  4978   0021B0                     ___wmul:
  4979                           	callstack 26
  4980   0021B0  5003               	movf	___wmul@multiplier^0,w,c
  4981   0021B2  0205               	mulwf	___wmul@multiplicand^0,c
  4982   0021B4  CFF3 F007          	movff	prodl,___wmul@product
  4983   0021B8  CFF4 F008          	movff	prodh,___wmul@product+1
  4984   0021BC  5003               	movf	___wmul@multiplier^0,w,c
  4985   0021BE  0206               	mulwf	(___wmul@multiplicand+1)^0,c
  4986   0021C0  50F3               	movf	243,w,c
  4987   0021C2  2608               	addwf	(___wmul@product+1)^0,f,c
  4988   0021C4  5004               	movf	(___wmul@multiplier+1)^0,w,c
  4989   0021C6  0205               	mulwf	___wmul@multiplicand^0,c
  4990   0021C8  50F3               	movf	243,w,c
  4991   0021CA  2608               	addwf	(___wmul@product+1)^0,f,c
  4992   0021CC  C007  F003         	movff	___wmul@product,?___wmul
  4993   0021D0  C008  F004         	movff	___wmul@product+1,?___wmul+1
  4994   0021D4  0012               	return		;funcret
  4995   0021D6                     __end_of___wmul:
  4996                           	callstack 0
  4997                           
  4998 ;; *************** function ___lwdiv *****************
  4999 ;; Defined at:
  5000 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\lwdiv.c"
  5001 ;; Parameters:    Size  Location     Type
  5002 ;;  dividend        2    8[COMRAM] unsigned int 
  5003 ;;  divisor         2   10[COMRAM] unsigned int 
  5004 ;; Auto vars:     Size  Location     Type
  5005 ;;  quotient        2   12[COMRAM] unsigned int 
  5006 ;;  counter         1   14[COMRAM] unsigned char 
  5007 ;; Return value:  Size  Location     Type
  5008 ;;                  2    8[COMRAM] unsigned int 
  5009 ;; Registers used:
  5010 ;;		wreg, status,2, status,0
  5011 ;; Tracked objects:
  5012 ;;		On entry : 0/0
  5013 ;;		On exit  : 0/0
  5014 ;;		Unchanged: 0/0
  5015 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5016 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5017 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5018 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5019 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5020 ;;Total ram usage:        7 bytes
  5021 ;; Hardware stack levels used: 1
  5022 ;; Hardware stack levels required when called: 1
  5023 ;; This function calls:
  5024 ;;		Nothing
  5025 ;; This function is called by:
  5026 ;;		_setMotorPWM
  5027 ;; This function uses a non-reentrant model
  5028 ;;
  5029                           
  5030                           	psect	text29
  5031   001D5E                     __ptext29:
  5032                           	callstack 0
  5033   001D5E                     ___lwdiv:
  5034                           	callstack 26
  5035   001D5E  0E00               	movlw	0
  5036   001D60  6E0E               	movwf	(___lwdiv@quotient+1)^0,c
  5037   001D62  0E00               	movlw	0
  5038   001D64  6E0D               	movwf	___lwdiv@quotient^0,c
  5039   001D66  500B               	movf	___lwdiv@divisor^0,w,c
  5040   001D68  100C               	iorwf	(___lwdiv@divisor+1)^0,w,c
  5041   001D6A  B4D8               	btfsc	status,2,c
  5042   001D6C  EFBA  F00E         	goto	u1301
  5043   001D70  EFBC  F00E         	goto	u1300
  5044   001D74                     u1301:
  5045   001D74  EFE4  F00E         	goto	l1087
  5046   001D78                     u1300:
  5047   001D78  0E01               	movlw	1
  5048   001D7A  6E0F               	movwf	___lwdiv@counter^0,c
  5049   001D7C  EFC4  F00E         	goto	l2281
  5050   001D80                     l2279:
  5051   001D80  90D8               	bcf	status,0,c
  5052   001D82  360B               	rlcf	___lwdiv@divisor^0,f,c
  5053   001D84  360C               	rlcf	(___lwdiv@divisor+1)^0,f,c
  5054   001D86  2A0F               	incf	___lwdiv@counter^0,f,c
  5055   001D88                     l2281:
  5056   001D88  AE0C               	btfss	(___lwdiv@divisor+1)^0,7,c
  5057   001D8A  EFC9  F00E         	goto	u1311
  5058   001D8E  EFCB  F00E         	goto	u1310
  5059   001D92                     u1311:
  5060   001D92  EFC0  F00E         	goto	l2279
  5061   001D96                     u1310:
  5062   001D96                     l2283:
  5063   001D96  90D8               	bcf	status,0,c
  5064   001D98  360D               	rlcf	___lwdiv@quotient^0,f,c
  5065   001D9A  360E               	rlcf	(___lwdiv@quotient+1)^0,f,c
  5066   001D9C  500B               	movf	___lwdiv@divisor^0,w,c
  5067   001D9E  5C09               	subwf	___lwdiv@dividend^0,w,c
  5068   001DA0  500C               	movf	(___lwdiv@divisor+1)^0,w,c
  5069   001DA2  580A               	subwfb	(___lwdiv@dividend+1)^0,w,c
  5070   001DA4  A0D8               	btfss	status,0,c
  5071   001DA6  EFD7  F00E         	goto	u1321
  5072   001DAA  EFD9  F00E         	goto	u1320
  5073   001DAE                     u1321:
  5074   001DAE  EFDE  F00E         	goto	l2291
  5075   001DB2                     u1320:
  5076   001DB2  500B               	movf	___lwdiv@divisor^0,w,c
  5077   001DB4  5E09               	subwf	___lwdiv@dividend^0,f,c
  5078   001DB6  500C               	movf	(___lwdiv@divisor+1)^0,w,c
  5079   001DB8  5A0A               	subwfb	(___lwdiv@dividend+1)^0,f,c
  5080   001DBA  800D               	bsf	___lwdiv@quotient^0,0,c
  5081   001DBC                     l2291:
  5082   001DBC  90D8               	bcf	status,0,c
  5083   001DBE  320C               	rrcf	(___lwdiv@divisor+1)^0,f,c
  5084   001DC0  320B               	rrcf	___lwdiv@divisor^0,f,c
  5085   001DC2  2E0F               	decfsz	___lwdiv@counter^0,f,c
  5086   001DC4  EFCB  F00E         	goto	l2283
  5087   001DC8                     l1087:
  5088   001DC8  C00D  F009         	movff	___lwdiv@quotient,?___lwdiv
  5089   001DCC  C00E  F00A         	movff	___lwdiv@quotient+1,?___lwdiv+1
  5090   001DD0  0012               	return		;funcret
  5091   001DD2                     __end_of___lwdiv:
  5092                           	callstack 0
  5093                           
  5094 ;; *************** function _custom_delay *****************
  5095 ;; Defined at:
  5096 ;;		line 37 in file "calibration.c"
  5097 ;; Parameters:    Size  Location     Type
  5098 ;;  temp            2    2[COMRAM] int 
  5099 ;; Auto vars:     Size  Location     Type
  5100 ;;  i               2    5[COMRAM] int 
  5101 ;; Return value:  Size  Location     Type
  5102 ;;                  1    wreg      void 
  5103 ;; Registers used:
  5104 ;;		wreg, status,2, status,0
  5105 ;; Tracked objects:
  5106 ;;		On entry : 0/0
  5107 ;;		On exit  : 0/0
  5108 ;;		Unchanged: 0/0
  5109 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5110 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5111 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5112 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5113 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5114 ;;Total ram usage:        5 bytes
  5115 ;; Hardware stack levels used: 1
  5116 ;; Hardware stack levels required when called: 1
  5117 ;; This function calls:
  5118 ;;		Nothing
  5119 ;; This function is called by:
  5120 ;;		_left_45
  5121 ;;		_right_45
  5122 ;;		_reverse_yellow
  5123 ;;		_reverse_pink
  5124 ;;		_movement
  5125 ;; This function uses a non-reentrant model
  5126 ;;
  5127                           
  5128                           	psect	text30
  5129   0020EA                     __ptext30:
  5130                           	callstack 0
  5131   0020EA                     _custom_delay:
  5132                           	callstack 25
  5133   0020EA                     
  5134                           ;calibration.c: 38: int i;;calibration.c: 39: for (i = 0; i < temp; i++){_delay((unsigne
      +                          d long)((1)*(64000000/4000.0)));}
  5135   0020EA  0E00               	movlw	0
  5136   0020EC  6E07               	movwf	(custom_delay@i+1)^0,c
  5137   0020EE  0E00               	movlw	0
  5138   0020F0  6E06               	movwf	custom_delay@i^0,c
  5139   0020F2  EF85  F010         	goto	l515
  5140   0020F6                     l2343:
  5141   0020F6  0E15               	movlw	21
  5142   0020F8  6E05               	movwf	??_custom_delay^0,c
  5143   0020FA  0EC6               	movlw	198
  5144   0020FC                     u2837:
  5145   0020FC  2EE8               	decfsz	wreg,f,c
  5146   0020FE  D7FE               	bra	u2837
  5147   002100  2E05               	decfsz	??_custom_delay^0,f,c
  5148   002102  D7FC               	bra	u2837
  5149   002104  D000               	nop2	
  5150   002106  4A06               	infsnz	custom_delay@i^0,f,c
  5151   002108  2A07               	incf	(custom_delay@i+1)^0,f,c
  5152   00210A                     l515:
  5153   00210A  5003               	movf	custom_delay@temp^0,w,c
  5154   00210C  5C06               	subwf	custom_delay@i^0,w,c
  5155   00210E  5007               	movf	(custom_delay@i+1)^0,w,c
  5156   002110  0A80               	xorlw	128
  5157   002112  6E05               	movwf	??_custom_delay^0,c
  5158   002114  5004               	movf	(custom_delay@temp+1)^0,w,c
  5159   002116  0A80               	xorlw	128
  5160   002118  5805               	subwfb	??_custom_delay^0,w,c
  5161   00211A  A0D8               	btfss	status,0,c
  5162   00211C  EF92  F010         	goto	u1361
  5163   002120  EF94  F010         	goto	u1360
  5164   002124                     u1361:
  5165   002124  EF7B  F010         	goto	l2343
  5166   002128                     u1360:
  5167   002128  0012               	return		;funcret
  5168   00212A                     __end_of_custom_delay:
  5169                           	callstack 0
  5170                           
  5171 ;; *************** function ___flge *****************
  5172 ;; Defined at:
  5173 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\flge.c"
  5174 ;; Parameters:    Size  Location     Type
  5175 ;;  ff1             4    2[COMRAM] void 
  5176 ;;  ff2             4    6[COMRAM] void 
  5177 ;; Auto vars:     Size  Location     Type
  5178 ;;		None
  5179 ;; Return value:  Size  Location     Type
  5180 ;;		None               void
  5181 ;; Registers used:
  5182 ;;		wreg, status,2, status,0
  5183 ;; Tracked objects:
  5184 ;;		On entry : 0/0
  5185 ;;		On exit  : 0/0
  5186 ;;		Unchanged: 0/0
  5187 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5188 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5189 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5190 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5191 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5192 ;;Total ram usage:       12 bytes
  5193 ;; Hardware stack levels used: 1
  5194 ;; Hardware stack levels required when called: 1
  5195 ;; This function calls:
  5196 ;;		Nothing
  5197 ;; This function is called by:
  5198 ;;		_buggy_color_response
  5199 ;; This function uses a non-reentrant model
  5200 ;;
  5201                           
  5202                           	psect	text31
  5203   001740                     __ptext31:
  5204                           	callstack 0
  5205   001740                     ___flge:
  5206                           	callstack 28
  5207   001740  0E00               	movlw	0
  5208   001742  1403               	andwf	___flge@ff1^0,w,c
  5209   001744  6E0B               	movwf	??___flge^0,c
  5210   001746  0E00               	movlw	0
  5211   001748  1404               	andwf	(___flge@ff1+1)^0,w,c
  5212   00174A  6E0C               	movwf	(??___flge+1)^0,c
  5213   00174C  0E80               	movlw	128
  5214   00174E  1405               	andwf	(___flge@ff1+2)^0,w,c
  5215   001750  6E0D               	movwf	(??___flge+2)^0,c
  5216   001752  0E7F               	movlw	127
  5217   001754  1406               	andwf	(___flge@ff1+3)^0,w,c
  5218   001756  6E0E               	movwf	(??___flge+3)^0,c
  5219   001758  500B               	movf	??___flge^0,w,c
  5220   00175A  100C               	iorwf	(??___flge+1)^0,w,c
  5221   00175C  100D               	iorwf	(??___flge+2)^0,w,c
  5222   00175E  100E               	iorwf	(??___flge+3)^0,w,c
  5223   001760  A4D8               	btfss	status,2,c
  5224   001762  EFB5  F00B         	goto	u2111
  5225   001766  EFB7  F00B         	goto	u2110
  5226   00176A                     u2111:
  5227   00176A  EFBF  F00B         	goto	l2995
  5228   00176E                     u2110:
  5229   00176E  0E00               	movlw	0
  5230   001770  6E03               	movwf	___flge@ff1^0,c
  5231   001772  0E00               	movlw	0
  5232   001774  6E04               	movwf	(___flge@ff1+1)^0,c
  5233   001776  0E00               	movlw	0
  5234   001778  6E05               	movwf	(___flge@ff1+2)^0,c
  5235   00177A  0E00               	movlw	0
  5236   00177C  6E06               	movwf	(___flge@ff1+3)^0,c
  5237   00177E                     l2995:
  5238   00177E  0E00               	movlw	0
  5239   001780  1407               	andwf	___flge@ff2^0,w,c
  5240   001782  6E0B               	movwf	??___flge^0,c
  5241   001784  0E00               	movlw	0
  5242   001786  1408               	andwf	(___flge@ff2+1)^0,w,c
  5243   001788  6E0C               	movwf	(??___flge+1)^0,c
  5244   00178A  0E80               	movlw	128
  5245   00178C  1409               	andwf	(___flge@ff2+2)^0,w,c
  5246   00178E  6E0D               	movwf	(??___flge+2)^0,c
  5247   001790  0E7F               	movlw	127
  5248   001792  140A               	andwf	(___flge@ff2+3)^0,w,c
  5249   001794  6E0E               	movwf	(??___flge+3)^0,c
  5250   001796  500B               	movf	??___flge^0,w,c
  5251   001798  100C               	iorwf	(??___flge+1)^0,w,c
  5252   00179A  100D               	iorwf	(??___flge+2)^0,w,c
  5253   00179C  100E               	iorwf	(??___flge+3)^0,w,c
  5254   00179E  A4D8               	btfss	status,2,c
  5255   0017A0  EFD4  F00B         	goto	u2121
  5256   0017A4  EFD6  F00B         	goto	u2120
  5257   0017A8                     u2121:
  5258   0017A8  EFDE  F00B         	goto	l2999
  5259   0017AC                     u2120:
  5260   0017AC  0E00               	movlw	0
  5261   0017AE  6E07               	movwf	___flge@ff2^0,c
  5262   0017B0  0E00               	movlw	0
  5263   0017B2  6E08               	movwf	(___flge@ff2+1)^0,c
  5264   0017B4  0E00               	movlw	0
  5265   0017B6  6E09               	movwf	(___flge@ff2+2)^0,c
  5266   0017B8  0E00               	movlw	0
  5267   0017BA  6E0A               	movwf	(___flge@ff2+3)^0,c
  5268   0017BC                     l2999:
  5269   0017BC  AE06               	btfss	(___flge@ff1+3)^0,7,c
  5270   0017BE  EFE3  F00B         	goto	u2131
  5271   0017C2  EFE5  F00B         	goto	u2130
  5272   0017C6                     u2131:
  5273   0017C6  EFEE  F00B         	goto	l3003
  5274   0017CA                     u2130:
  5275   0017CA  6C03               	negf	___flge@ff1^0,c
  5276   0017CC  1E04               	comf	(___flge@ff1+1)^0,f,c
  5277   0017CE  B0D8               	btfsc	status,0,c
  5278   0017D0  2A04               	incf	(___flge@ff1+1)^0,f,c
  5279   0017D2  1E05               	comf	(___flge@ff1+2)^0,f,c
  5280   0017D4  B0D8               	btfsc	status,0,c
  5281   0017D6  2A05               	incf	(___flge@ff1+2)^0,f,c
  5282   0017D8  0E80               	movlw	128
  5283   0017DA  5606               	subfwb	(___flge@ff1+3)^0,f,c
  5284   0017DC                     l3003:
  5285   0017DC  AE0A               	btfss	(___flge@ff2+3)^0,7,c
  5286   0017DE  EFF3  F00B         	goto	u2141
  5287   0017E2  EFF5  F00B         	goto	u2140
  5288   0017E6                     u2141:
  5289   0017E6  EFFE  F00B         	goto	l861
  5290   0017EA                     u2140:
  5291   0017EA  6C07               	negf	___flge@ff2^0,c
  5292   0017EC  1E08               	comf	(___flge@ff2+1)^0,f,c
  5293   0017EE  B0D8               	btfsc	status,0,c
  5294   0017F0  2A08               	incf	(___flge@ff2+1)^0,f,c
  5295   0017F2  1E09               	comf	(___flge@ff2+2)^0,f,c
  5296   0017F4  B0D8               	btfsc	status,0,c
  5297   0017F6  2A09               	incf	(___flge@ff2+2)^0,f,c
  5298   0017F8  0E80               	movlw	128
  5299   0017FA  560A               	subfwb	(___flge@ff2+3)^0,f,c
  5300   0017FC                     l861:
  5301   0017FC  0E00               	movlw	0
  5302   0017FE  1A03               	xorwf	___flge@ff1^0,f,c
  5303   001800  0E00               	movlw	0
  5304   001802  1A04               	xorwf	(___flge@ff1+1)^0,f,c
  5305   001804  0E00               	movlw	0
  5306   001806  1A05               	xorwf	(___flge@ff1+2)^0,f,c
  5307   001808  0E80               	movlw	128
  5308   00180A  1A06               	xorwf	(___flge@ff1+3)^0,f,c
  5309   00180C  0E00               	movlw	0
  5310   00180E  1A07               	xorwf	___flge@ff2^0,f,c
  5311   001810  0E00               	movlw	0
  5312   001812  1A08               	xorwf	(___flge@ff2+1)^0,f,c
  5313   001814  0E00               	movlw	0
  5314   001816  1A09               	xorwf	(___flge@ff2+2)^0,f,c
  5315   001818  0E80               	movlw	128
  5316   00181A  1A0A               	xorwf	(___flge@ff2+3)^0,f,c
  5317   00181C  5007               	movf	___flge@ff2^0,w,c
  5318   00181E  5C03               	subwf	___flge@ff1^0,w,c
  5319   001820  5008               	movf	(___flge@ff2+1)^0,w,c
  5320   001822  5804               	subwfb	(___flge@ff1+1)^0,w,c
  5321   001824  5009               	movf	(___flge@ff2+2)^0,w,c
  5322   001826  5805               	subwfb	(___flge@ff1+2)^0,w,c
  5323   001828  500A               	movf	(___flge@ff2+3)^0,w,c
  5324   00182A  5806               	subwfb	(___flge@ff1+3)^0,w,c
  5325   00182C  B0D8               	btfsc	status,0,c
  5326   00182E  EF1B  F00C         	goto	u2151
  5327   001832  EF1D  F00C         	goto	u2150
  5328   001836                     u2151:
  5329   001836  EF20  F00C         	goto	l3009
  5330   00183A                     u2150:
  5331   00183A  90D8               	bcf	status,0,c
  5332   00183C  EF21  F00C         	goto	l866
  5333   001840                     l3009:
  5334   001840  80D8               	bsf	status,0,c
  5335   001842                     l866:
  5336   001842  0012               	return		;funcret
  5337   001844                     __end_of___flge:
  5338                           	callstack 0
  5339                           
  5340 ;; *************** function _READcolor *****************
  5341 ;; Defined at:
  5342 ;;		line 112 in file "color.c"
  5343 ;; Parameters:    Size  Location     Type
  5344 ;;  c               2   41[COMRAM] PTR struct colors
  5345 ;;		 -> color(20), 
  5346 ;; Auto vars:     Size  Location     Type
  5347 ;;		None
  5348 ;; Return value:  Size  Location     Type
  5349 ;;                  1    wreg      void 
  5350 ;; Registers used:
  5351 ;;		wreg, status,2, status,0, cstack
  5352 ;; Tracked objects:
  5353 ;;		On entry : 0/0
  5354 ;;		On exit  : 0/0
  5355 ;;		Unchanged: 0/0
  5356 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5357 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5358 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5359 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5360 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5361 ;;Total ram usage:        2 bytes
  5362 ;; Hardware stack levels used: 1
  5363 ;; Hardware stack levels required when called: 4
  5364 ;; This function calls:
  5365 ;;		___fldiv
  5366 ;;		___xxtofl
  5367 ;;		_color_read_Blue
  5368 ;;		_color_read_Clear
  5369 ;;		_color_read_Green
  5370 ;;		_color_read_Red
  5371 ;; This function is called by:
  5372 ;;		_buggy_color_response
  5373 ;; This function uses a non-reentrant model
  5374 ;;
  5375                           
  5376                           	psect	text32
  5377   0013B2                     __ptext32:
  5378                           	callstack 0
  5379   0013B2                     _READcolor:
  5380                           	callstack 25
  5381   0013B2                     
  5382                           ;color.c: 114:     color.R = color_read_Red();
  5383   0013B2  EC4D  F00F         	call	_color_read_Red	;wreg free
  5384   0013B6  C007  F043         	movff	?_color_read_Red,_color
  5385   0013BA  C008  F044         	movff	?_color_read_Red+1,_color+1
  5386                           
  5387                           ;color.c: 115:     color.B = color_read_Blue();
  5388   0013BE  ECC5  F00F         	call	_color_read_Blue	;wreg free
  5389   0013C2  C007  F045         	movff	?_color_read_Blue,_color+2
  5390   0013C6  C008  F046         	movff	?_color_read_Blue+1,_color+3
  5391                           
  5392                           ;color.c: 116:     color.G = color_read_Green();
  5393   0013CA  EC75  F00F         	call	_color_read_Green	;wreg free
  5394   0013CE  C007  F047         	movff	?_color_read_Green,_color+4
  5395   0013D2  C008  F048         	movff	?_color_read_Green+1,_color+5
  5396                           
  5397                           ;color.c: 117:     color.C = color_read_Clear();
  5398   0013D6  EC9D  F00F         	call	_color_read_Clear	;wreg free
  5399   0013DA  C007  F049         	movff	?_color_read_Clear,_color+6
  5400   0013DE  C008  F04A         	movff	?_color_read_Clear+1,_color+7
  5401                           
  5402                           ;color.c: 119:     color.R_norm = (float)color.R / (float)color.C;
  5403   0013E2  C043  F003         	movff	_color,___xxtofl@val
  5404   0013E6  C044  F004         	movff	_color+1,___xxtofl@val+1
  5405   0013EA  6A05               	clrf	(___xxtofl@val+2)^0,c
  5406   0013EC  6A06               	clrf	(___xxtofl@val+3)^0,c
  5407   0013EE  0E00               	movlw	0
  5408   0013F0  ECBC  F006         	call	___xxtofl
  5409   0013F4  C003  F011         	movff	?___xxtofl,___fldiv@b
  5410   0013F8  C004  F012         	movff	?___xxtofl+1,___fldiv@b+1
  5411   0013FC  C005  F013         	movff	?___xxtofl+2,___fldiv@b+2
  5412   001400  C006  F014         	movff	?___xxtofl+3,___fldiv@b+3
  5413   001404  C049  F003         	movff	_color+6,___xxtofl@val
  5414   001408  C04A  F004         	movff	_color+7,___xxtofl@val+1
  5415   00140C  6A05               	clrf	(___xxtofl@val+2)^0,c
  5416   00140E  6A06               	clrf	(___xxtofl@val+3)^0,c
  5417   001410  0E00               	movlw	0
  5418   001412  ECBC  F006         	call	___xxtofl
  5419   001416  C003  F015         	movff	?___xxtofl,___fldiv@a
  5420   00141A  C004  F016         	movff	?___xxtofl+1,___fldiv@a+1
  5421   00141E  C005  F017         	movff	?___xxtofl+2,___fldiv@a+2
  5422   001422  C006  F018         	movff	?___xxtofl+3,___fldiv@a+3
  5423   001426  EC82  F003         	call	___fldiv	;wreg free
  5424   00142A  C011  F04B         	movff	?___fldiv,_color+8
  5425   00142E  C012  F04C         	movff	?___fldiv+1,_color+9
  5426   001432  C013  F04D         	movff	?___fldiv+2,_color+10
  5427   001436  C014  F04E         	movff	?___fldiv+3,_color+11
  5428                           
  5429                           ;color.c: 120:     color.B_norm = (float)color.B / (float)color.C;
  5430   00143A  C045  F003         	movff	_color+2,___xxtofl@val
  5431   00143E  C046  F004         	movff	_color+3,___xxtofl@val+1
  5432   001442  6A05               	clrf	(___xxtofl@val+2)^0,c
  5433   001444  6A06               	clrf	(___xxtofl@val+3)^0,c
  5434   001446  0E00               	movlw	0
  5435   001448  ECBC  F006         	call	___xxtofl
  5436   00144C  C003  F011         	movff	?___xxtofl,___fldiv@b
  5437   001450  C004  F012         	movff	?___xxtofl+1,___fldiv@b+1
  5438   001454  C005  F013         	movff	?___xxtofl+2,___fldiv@b+2
  5439   001458  C006  F014         	movff	?___xxtofl+3,___fldiv@b+3
  5440   00145C  C049  F003         	movff	_color+6,___xxtofl@val
  5441   001460  C04A  F004         	movff	_color+7,___xxtofl@val+1
  5442   001464  6A05               	clrf	(___xxtofl@val+2)^0,c
  5443   001466  6A06               	clrf	(___xxtofl@val+3)^0,c
  5444   001468  0E00               	movlw	0
  5445   00146A  ECBC  F006         	call	___xxtofl
  5446   00146E  C003  F015         	movff	?___xxtofl,___fldiv@a
  5447   001472  C004  F016         	movff	?___xxtofl+1,___fldiv@a+1
  5448   001476  C005  F017         	movff	?___xxtofl+2,___fldiv@a+2
  5449   00147A  C006  F018         	movff	?___xxtofl+3,___fldiv@a+3
  5450   00147E  EC82  F003         	call	___fldiv	;wreg free
  5451   001482  C011  F04F         	movff	?___fldiv,_color+12
  5452   001486  C012  F050         	movff	?___fldiv+1,_color+13
  5453   00148A  C013  F051         	movff	?___fldiv+2,_color+14
  5454   00148E  C014  F052         	movff	?___fldiv+3,_color+15
  5455                           
  5456                           ;color.c: 121:     color.G_norm = (float)color.G / (float)color.C;
  5457   001492  C047  F003         	movff	_color+4,___xxtofl@val
  5458   001496  C048  F004         	movff	_color+5,___xxtofl@val+1
  5459   00149A  6A05               	clrf	(___xxtofl@val+2)^0,c
  5460   00149C  6A06               	clrf	(___xxtofl@val+3)^0,c
  5461   00149E  0E00               	movlw	0
  5462   0014A0  ECBC  F006         	call	___xxtofl
  5463   0014A4  C003  F011         	movff	?___xxtofl,___fldiv@b
  5464   0014A8  C004  F012         	movff	?___xxtofl+1,___fldiv@b+1
  5465   0014AC  C005  F013         	movff	?___xxtofl+2,___fldiv@b+2
  5466   0014B0  C006  F014         	movff	?___xxtofl+3,___fldiv@b+3
  5467   0014B4  C049  F003         	movff	_color+6,___xxtofl@val
  5468   0014B8  C04A  F004         	movff	_color+7,___xxtofl@val+1
  5469   0014BC  6A05               	clrf	(___xxtofl@val+2)^0,c
  5470   0014BE  6A06               	clrf	(___xxtofl@val+3)^0,c
  5471   0014C0  0E00               	movlw	0
  5472   0014C2  ECBC  F006         	call	___xxtofl
  5473   0014C6  C003  F015         	movff	?___xxtofl,___fldiv@a
  5474   0014CA  C004  F016         	movff	?___xxtofl+1,___fldiv@a+1
  5475   0014CE  C005  F017         	movff	?___xxtofl+2,___fldiv@a+2
  5476   0014D2  C006  F018         	movff	?___xxtofl+3,___fldiv@a+3
  5477   0014D6  EC82  F003         	call	___fldiv	;wreg free
  5478   0014DA  C011  F053         	movff	?___fldiv,_color+16
  5479   0014DE  C012  F054         	movff	?___fldiv+1,_color+17
  5480   0014E2  C013  F055         	movff	?___fldiv+2,_color+18
  5481   0014E6  C014  F056         	movff	?___fldiv+3,_color+19
  5482   0014EA  0012               	return		;funcret
  5483   0014EC                     __end_of_READcolor:
  5484                           	callstack 0
  5485                           
  5486 ;; *************** function _color_read_Red *****************
  5487 ;; Defined at:
  5488 ;;		line 39 in file "color.c"
  5489 ;; Parameters:    Size  Location     Type
  5490 ;;		None
  5491 ;; Auto vars:     Size  Location     Type
  5492 ;;  tmp             2   11[COMRAM] unsigned int 
  5493 ;; Return value:  Size  Location     Type
  5494 ;;                  2    6[COMRAM] unsigned int 
  5495 ;; Registers used:
  5496 ;;		wreg, status,2, status,0, cstack
  5497 ;; Tracked objects:
  5498 ;;		On entry : 0/0
  5499 ;;		On exit  : 0/0
  5500 ;;		Unchanged: 0/0
  5501 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5502 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5503 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5504 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5505 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5506 ;;Total ram usage:        7 bytes
  5507 ;; Hardware stack levels used: 1
  5508 ;; Hardware stack levels required when called: 3
  5509 ;; This function calls:
  5510 ;;		_I2C_2_Master_Read
  5511 ;;		_I2C_2_Master_RepStart
  5512 ;;		_I2C_2_Master_Start
  5513 ;;		_I2C_2_Master_Stop
  5514 ;;		_I2C_2_Master_Write
  5515 ;; This function is called by:
  5516 ;;		_READcolor
  5517 ;; This function uses a non-reentrant model
  5518 ;;
  5519                           
  5520                           	psect	text33
  5521   001E9A                     __ptext33:
  5522                           	callstack 0
  5523   001E9A                     _color_read_Red:
  5524                           	callstack 25
  5525   001E9A                     
  5526                           ;color.c: 41:  unsigned int tmp;;color.c: 42:  I2C_2_Master_Start();
  5527   001E9A  EC5F  F011         	call	_I2C_2_Master_Start	;wreg free
  5528                           
  5529                           ;color.c: 43:  I2C_2_Master_Write(0x52 | 0x00);
  5530   001E9E  0E52               	movlw	82
  5531   001EA0  EC54  F011         	call	_I2C_2_Master_Write
  5532                           
  5533                           ;color.c: 45:  I2C_2_Master_Write(0xA0 | 0x16);
  5534   001EA4  0EB6               	movlw	182
  5535   001EA6  EC54  F011         	call	_I2C_2_Master_Write
  5536                           
  5537                           ;color.c: 46:  I2C_2_Master_RepStart();
  5538   001EAA  EC64  F011         	call	_I2C_2_Master_RepStart	;wreg free
  5539                           
  5540                           ;color.c: 47:  I2C_2_Master_Write(0x52 | 0x01);
  5541   001EAE  0E53               	movlw	83
  5542   001EB0  EC54  F011         	call	_I2C_2_Master_Write
  5543                           
  5544                           ;color.c: 48:  tmp=I2C_2_Master_Read(1);
  5545   001EB4  0E01               	movlw	1
  5546   001EB6  EC34  F010         	call	_I2C_2_Master_Read
  5547   001EBA  6E09               	movwf	??_color_read_Red^0,c
  5548   001EBC  5009               	movf	??_color_read_Red^0,w,c
  5549   001EBE  6E0C               	movwf	color_read_Red@tmp^0,c
  5550   001EC0  6A0D               	clrf	(color_read_Red@tmp+1)^0,c
  5551                           
  5552                           ;color.c: 49:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  5553   001EC2  0E00               	movlw	0
  5554   001EC4  EC34  F010         	call	_I2C_2_Master_Read
  5555   001EC8  6E09               	movwf	??_color_read_Red^0,c
  5556   001ECA  5009               	movf	??_color_read_Red^0,w,c
  5557   001ECC  6E0B               	movwf	(??_color_read_Red+2)^0,c
  5558   001ECE  6A0A               	clrf	(??_color_read_Red+1)^0,c
  5559   001ED0  500C               	movf	color_read_Red@tmp^0,w,c
  5560   001ED2  100A               	iorwf	(??_color_read_Red+1)^0,w,c
  5561   001ED4  6E0C               	movwf	color_read_Red@tmp^0,c
  5562   001ED6  500D               	movf	(color_read_Red@tmp+1)^0,w,c
  5563   001ED8  100B               	iorwf	(??_color_read_Red+2)^0,w,c
  5564   001EDA  6E0D               	movwf	(color_read_Red@tmp+1)^0,c
  5565                           
  5566                           ;color.c: 50:  I2C_2_Master_Stop();
  5567   001EDC  EC5A  F011         	call	_I2C_2_Master_Stop	;wreg free
  5568   001EE0                     
  5569                           ;color.c: 51:  return tmp;
  5570   001EE0  C00C  F007         	movff	color_read_Red@tmp,?_color_read_Red
  5571   001EE4  C00D  F008         	movff	color_read_Red@tmp+1,?_color_read_Red+1
  5572   001EE8  0012               	return		;funcret
  5573   001EEA                     __end_of_color_read_Red:
  5574                           	callstack 0
  5575                           
  5576 ;; *************** function _color_read_Green *****************
  5577 ;; Defined at:
  5578 ;;		line 75 in file "color.c"
  5579 ;; Parameters:    Size  Location     Type
  5580 ;;		None
  5581 ;; Auto vars:     Size  Location     Type
  5582 ;;  tmp             2   11[COMRAM] unsigned int 
  5583 ;; Return value:  Size  Location     Type
  5584 ;;                  2    6[COMRAM] unsigned int 
  5585 ;; Registers used:
  5586 ;;		wreg, status,2, status,0, cstack
  5587 ;; Tracked objects:
  5588 ;;		On entry : 0/0
  5589 ;;		On exit  : 0/0
  5590 ;;		Unchanged: 0/0
  5591 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5592 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5593 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5594 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5595 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5596 ;;Total ram usage:        7 bytes
  5597 ;; Hardware stack levels used: 1
  5598 ;; Hardware stack levels required when called: 3
  5599 ;; This function calls:
  5600 ;;		_I2C_2_Master_Read
  5601 ;;		_I2C_2_Master_RepStart
  5602 ;;		_I2C_2_Master_Start
  5603 ;;		_I2C_2_Master_Stop
  5604 ;;		_I2C_2_Master_Write
  5605 ;; This function is called by:
  5606 ;;		_READcolor
  5607 ;; This function uses a non-reentrant model
  5608 ;;
  5609                           
  5610                           	psect	text34
  5611   001EEA                     __ptext34:
  5612                           	callstack 0
  5613   001EEA                     _color_read_Green:
  5614                           	callstack 25
  5615   001EEA                     
  5616                           ;color.c: 77:  unsigned int tmp;;color.c: 78:  I2C_2_Master_Start();
  5617   001EEA  EC5F  F011         	call	_I2C_2_Master_Start	;wreg free
  5618                           
  5619                           ;color.c: 79:  I2C_2_Master_Write(0x52 | 0x00);
  5620   001EEE  0E52               	movlw	82
  5621   001EF0  EC54  F011         	call	_I2C_2_Master_Write
  5622                           
  5623                           ;color.c: 81:  I2C_2_Master_Write(0xA0 | 0x18);
  5624   001EF4  0EB8               	movlw	184
  5625   001EF6  EC54  F011         	call	_I2C_2_Master_Write
  5626                           
  5627                           ;color.c: 82:  I2C_2_Master_RepStart();
  5628   001EFA  EC64  F011         	call	_I2C_2_Master_RepStart	;wreg free
  5629                           
  5630                           ;color.c: 83:  I2C_2_Master_Write(0x52 | 0x01);
  5631   001EFE  0E53               	movlw	83
  5632   001F00  EC54  F011         	call	_I2C_2_Master_Write
  5633                           
  5634                           ;color.c: 84:  tmp=I2C_2_Master_Read(1);
  5635   001F04  0E01               	movlw	1
  5636   001F06  EC34  F010         	call	_I2C_2_Master_Read
  5637   001F0A  6E09               	movwf	??_color_read_Green^0,c
  5638   001F0C  5009               	movf	??_color_read_Green^0,w,c
  5639   001F0E  6E0C               	movwf	color_read_Green@tmp^0,c
  5640   001F10  6A0D               	clrf	(color_read_Green@tmp+1)^0,c
  5641                           
  5642                           ;color.c: 85:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  5643   001F12  0E00               	movlw	0
  5644   001F14  EC34  F010         	call	_I2C_2_Master_Read
  5645   001F18  6E09               	movwf	??_color_read_Green^0,c
  5646   001F1A  5009               	movf	??_color_read_Green^0,w,c
  5647   001F1C  6E0B               	movwf	(??_color_read_Green+2)^0,c
  5648   001F1E  6A0A               	clrf	(??_color_read_Green+1)^0,c
  5649   001F20  500C               	movf	color_read_Green@tmp^0,w,c
  5650   001F22  100A               	iorwf	(??_color_read_Green+1)^0,w,c
  5651   001F24  6E0C               	movwf	color_read_Green@tmp^0,c
  5652   001F26  500D               	movf	(color_read_Green@tmp+1)^0,w,c
  5653   001F28  100B               	iorwf	(??_color_read_Green+2)^0,w,c
  5654   001F2A  6E0D               	movwf	(color_read_Green@tmp+1)^0,c
  5655                           
  5656                           ;color.c: 86:  I2C_2_Master_Stop();
  5657   001F2C  EC5A  F011         	call	_I2C_2_Master_Stop	;wreg free
  5658   001F30                     
  5659                           ;color.c: 87:  return tmp;
  5660   001F30  C00C  F007         	movff	color_read_Green@tmp,?_color_read_Green
  5661   001F34  C00D  F008         	movff	color_read_Green@tmp+1,?_color_read_Green+1
  5662   001F38  0012               	return		;funcret
  5663   001F3A                     __end_of_color_read_Green:
  5664                           	callstack 0
  5665                           
  5666 ;; *************** function _color_read_Clear *****************
  5667 ;; Defined at:
  5668 ;;		line 93 in file "color.c"
  5669 ;; Parameters:    Size  Location     Type
  5670 ;;		None
  5671 ;; Auto vars:     Size  Location     Type
  5672 ;;  tmp             2   11[COMRAM] unsigned int 
  5673 ;; Return value:  Size  Location     Type
  5674 ;;                  2    6[COMRAM] unsigned int 
  5675 ;; Registers used:
  5676 ;;		wreg, status,2, status,0, cstack
  5677 ;; Tracked objects:
  5678 ;;		On entry : 0/0
  5679 ;;		On exit  : 0/0
  5680 ;;		Unchanged: 0/0
  5681 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5682 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5683 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5684 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5685 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5686 ;;Total ram usage:        7 bytes
  5687 ;; Hardware stack levels used: 1
  5688 ;; Hardware stack levels required when called: 3
  5689 ;; This function calls:
  5690 ;;		_I2C_2_Master_Read
  5691 ;;		_I2C_2_Master_RepStart
  5692 ;;		_I2C_2_Master_Start
  5693 ;;		_I2C_2_Master_Stop
  5694 ;;		_I2C_2_Master_Write
  5695 ;; This function is called by:
  5696 ;;		_READcolor
  5697 ;; This function uses a non-reentrant model
  5698 ;;
  5699                           
  5700                           	psect	text35
  5701   001F3A                     __ptext35:
  5702                           	callstack 0
  5703   001F3A                     _color_read_Clear:
  5704                           	callstack 25
  5705   001F3A                     
  5706                           ;color.c: 95:  unsigned int tmp;;color.c: 96:  I2C_2_Master_Start();
  5707   001F3A  EC5F  F011         	call	_I2C_2_Master_Start	;wreg free
  5708                           
  5709                           ;color.c: 97:  I2C_2_Master_Write(0x52 | 0x00);
  5710   001F3E  0E52               	movlw	82
  5711   001F40  EC54  F011         	call	_I2C_2_Master_Write
  5712                           
  5713                           ;color.c: 99:  I2C_2_Master_Write(0xA0 | 0x14);
  5714   001F44  0EB4               	movlw	180
  5715   001F46  EC54  F011         	call	_I2C_2_Master_Write
  5716                           
  5717                           ;color.c: 100:  I2C_2_Master_RepStart();
  5718   001F4A  EC64  F011         	call	_I2C_2_Master_RepStart	;wreg free
  5719                           
  5720                           ;color.c: 101:  I2C_2_Master_Write(0x52 | 0x01);
  5721   001F4E  0E53               	movlw	83
  5722   001F50  EC54  F011         	call	_I2C_2_Master_Write
  5723                           
  5724                           ;color.c: 102:  tmp=I2C_2_Master_Read(1);
  5725   001F54  0E01               	movlw	1
  5726   001F56  EC34  F010         	call	_I2C_2_Master_Read
  5727   001F5A  6E09               	movwf	??_color_read_Clear^0,c
  5728   001F5C  5009               	movf	??_color_read_Clear^0,w,c
  5729   001F5E  6E0C               	movwf	color_read_Clear@tmp^0,c
  5730   001F60  6A0D               	clrf	(color_read_Clear@tmp+1)^0,c
  5731                           
  5732                           ;color.c: 103:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  5733   001F62  0E00               	movlw	0
  5734   001F64  EC34  F010         	call	_I2C_2_Master_Read
  5735   001F68  6E09               	movwf	??_color_read_Clear^0,c
  5736   001F6A  5009               	movf	??_color_read_Clear^0,w,c
  5737   001F6C  6E0B               	movwf	(??_color_read_Clear+2)^0,c
  5738   001F6E  6A0A               	clrf	(??_color_read_Clear+1)^0,c
  5739   001F70  500C               	movf	color_read_Clear@tmp^0,w,c
  5740   001F72  100A               	iorwf	(??_color_read_Clear+1)^0,w,c
  5741   001F74  6E0C               	movwf	color_read_Clear@tmp^0,c
  5742   001F76  500D               	movf	(color_read_Clear@tmp+1)^0,w,c
  5743   001F78  100B               	iorwf	(??_color_read_Clear+2)^0,w,c
  5744   001F7A  6E0D               	movwf	(color_read_Clear@tmp+1)^0,c
  5745                           
  5746                           ;color.c: 104:  I2C_2_Master_Stop();
  5747   001F7C  EC5A  F011         	call	_I2C_2_Master_Stop	;wreg free
  5748   001F80                     
  5749                           ;color.c: 105:  return tmp;
  5750   001F80  C00C  F007         	movff	color_read_Clear@tmp,?_color_read_Clear
  5751   001F84  C00D  F008         	movff	color_read_Clear@tmp+1,?_color_read_Clear+1
  5752   001F88  0012               	return		;funcret
  5753   001F8A                     __end_of_color_read_Clear:
  5754                           	callstack 0
  5755                           
  5756 ;; *************** function _color_read_Blue *****************
  5757 ;; Defined at:
  5758 ;;		line 57 in file "color.c"
  5759 ;; Parameters:    Size  Location     Type
  5760 ;;		None
  5761 ;; Auto vars:     Size  Location     Type
  5762 ;;  tmp             2   11[COMRAM] unsigned int 
  5763 ;; Return value:  Size  Location     Type
  5764 ;;                  2    6[COMRAM] unsigned int 
  5765 ;; Registers used:
  5766 ;;		wreg, status,2, status,0, cstack
  5767 ;; Tracked objects:
  5768 ;;		On entry : 0/0
  5769 ;;		On exit  : 0/0
  5770 ;;		Unchanged: 0/0
  5771 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5772 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5773 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5774 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5775 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5776 ;;Total ram usage:        7 bytes
  5777 ;; Hardware stack levels used: 1
  5778 ;; Hardware stack levels required when called: 3
  5779 ;; This function calls:
  5780 ;;		_I2C_2_Master_Read
  5781 ;;		_I2C_2_Master_RepStart
  5782 ;;		_I2C_2_Master_Start
  5783 ;;		_I2C_2_Master_Stop
  5784 ;;		_I2C_2_Master_Write
  5785 ;; This function is called by:
  5786 ;;		_READcolor
  5787 ;; This function uses a non-reentrant model
  5788 ;;
  5789                           
  5790                           	psect	text36
  5791   001F8A                     __ptext36:
  5792                           	callstack 0
  5793   001F8A                     _color_read_Blue:
  5794                           	callstack 25
  5795   001F8A                     
  5796                           ;color.c: 59:  unsigned int tmp;;color.c: 60:  I2C_2_Master_Start();
  5797   001F8A  EC5F  F011         	call	_I2C_2_Master_Start	;wreg free
  5798                           
  5799                           ;color.c: 61:  I2C_2_Master_Write(0x52 | 0x00);
  5800   001F8E  0E52               	movlw	82
  5801   001F90  EC54  F011         	call	_I2C_2_Master_Write
  5802                           
  5803                           ;color.c: 63:  I2C_2_Master_Write(0xA0 | 0x1A);
  5804   001F94  0EBA               	movlw	186
  5805   001F96  EC54  F011         	call	_I2C_2_Master_Write
  5806                           
  5807                           ;color.c: 64:  I2C_2_Master_RepStart();
  5808   001F9A  EC64  F011         	call	_I2C_2_Master_RepStart	;wreg free
  5809                           
  5810                           ;color.c: 65:  I2C_2_Master_Write(0x52 | 0x01);
  5811   001F9E  0E53               	movlw	83
  5812   001FA0  EC54  F011         	call	_I2C_2_Master_Write
  5813                           
  5814                           ;color.c: 66:  tmp=I2C_2_Master_Read(1);
  5815   001FA4  0E01               	movlw	1
  5816   001FA6  EC34  F010         	call	_I2C_2_Master_Read
  5817   001FAA  6E09               	movwf	??_color_read_Blue^0,c
  5818   001FAC  5009               	movf	??_color_read_Blue^0,w,c
  5819   001FAE  6E0C               	movwf	color_read_Blue@tmp^0,c
  5820   001FB0  6A0D               	clrf	(color_read_Blue@tmp+1)^0,c
  5821                           
  5822                           ;color.c: 67:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  5823   001FB2  0E00               	movlw	0
  5824   001FB4  EC34  F010         	call	_I2C_2_Master_Read
  5825   001FB8  6E09               	movwf	??_color_read_Blue^0,c
  5826   001FBA  5009               	movf	??_color_read_Blue^0,w,c
  5827   001FBC  6E0B               	movwf	(??_color_read_Blue+2)^0,c
  5828   001FBE  6A0A               	clrf	(??_color_read_Blue+1)^0,c
  5829   001FC0  500C               	movf	color_read_Blue@tmp^0,w,c
  5830   001FC2  100A               	iorwf	(??_color_read_Blue+1)^0,w,c
  5831   001FC4  6E0C               	movwf	color_read_Blue@tmp^0,c
  5832   001FC6  500D               	movf	(color_read_Blue@tmp+1)^0,w,c
  5833   001FC8  100B               	iorwf	(??_color_read_Blue+2)^0,w,c
  5834   001FCA  6E0D               	movwf	(color_read_Blue@tmp+1)^0,c
  5835                           
  5836                           ;color.c: 68:  I2C_2_Master_Stop();
  5837   001FCC  EC5A  F011         	call	_I2C_2_Master_Stop	;wreg free
  5838   001FD0                     
  5839                           ;color.c: 69:  return tmp;
  5840   001FD0  C00C  F007         	movff	color_read_Blue@tmp,?_color_read_Blue
  5841   001FD4  C00D  F008         	movff	color_read_Blue@tmp+1,?_color_read_Blue+1
  5842   001FD8  0012               	return		;funcret
  5843   001FDA                     __end_of_color_read_Blue:
  5844                           	callstack 0
  5845                           
  5846 ;; *************** function _I2C_2_Master_Write *****************
  5847 ;; Defined at:
  5848 ;;		line 63 in file "i2c.c"
  5849 ;; Parameters:    Size  Location     Type
  5850 ;;  data_byte       1    wreg     unsigned char 
  5851 ;; Auto vars:     Size  Location     Type
  5852 ;;  data_byte       1    3[COMRAM] unsigned char 
  5853 ;; Return value:  Size  Location     Type
  5854 ;;                  1    wreg      void 
  5855 ;; Registers used:
  5856 ;;		wreg, status,2, status,0, cstack
  5857 ;; Tracked objects:
  5858 ;;		On entry : 0/0
  5859 ;;		On exit  : 0/0
  5860 ;;		Unchanged: 0/0
  5861 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5862 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5863 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5864 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5865 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5866 ;;Total ram usage:        1 bytes
  5867 ;; Hardware stack levels used: 1
  5868 ;; Hardware stack levels required when called: 2
  5869 ;; This function calls:
  5870 ;;		_I2C_2_Master_Idle
  5871 ;; This function is called by:
  5872 ;;		_color_writetoaddr
  5873 ;;		_color_read_Red
  5874 ;;		_color_read_Blue
  5875 ;;		_color_read_Green
  5876 ;;		_color_read_Clear
  5877 ;; This function uses a non-reentrant model
  5878 ;;
  5879                           
  5880                           	psect	text37
  5881   0022A8                     __ptext37:
  5882                           	callstack 0
  5883   0022A8                     _I2C_2_Master_Write:
  5884                           	callstack 25
  5885                           
  5886                           ;incstack = 0
  5887                           ;I2C_2_Master_Write@data_byte stored from wreg
  5888   0022A8  6E04               	movwf	I2C_2_Master_Write@data_byte^0,c
  5889   0022AA                     
  5890                           ;i2c.c: 63: void I2C_2_Master_Write(unsigned char data_byte);i2c.c: 64: {;i2c.c: 65:   I
      +                          2C_2_Master_Idle();
  5891   0022AA  ECC4  F010         	call	_I2C_2_Master_Idle	;wreg free
  5892   0022AE                     
  5893                           ;i2c.c: 66:   SSP2BUF = data_byte;
  5894   0022AE  C004  FED5         	movff	I2C_2_Master_Write@data_byte,3797	;volatile
  5895   0022B2  0012               	return		;funcret
  5896   0022B4                     __end_of_I2C_2_Master_Write:
  5897                           	callstack 0
  5898                           
  5899 ;; *************** function _I2C_2_Master_Stop *****************
  5900 ;; Defined at:
  5901 ;;		line 54 in file "i2c.c"
  5902 ;; Parameters:    Size  Location     Type
  5903 ;;		None
  5904 ;; Auto vars:     Size  Location     Type
  5905 ;;		None
  5906 ;; Return value:  Size  Location     Type
  5907 ;;                  1    wreg      void 
  5908 ;; Registers used:
  5909 ;;		wreg, status,2, status,0, cstack
  5910 ;; Tracked objects:
  5911 ;;		On entry : 0/0
  5912 ;;		On exit  : 0/0
  5913 ;;		Unchanged: 0/0
  5914 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5915 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5916 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5917 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5918 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5919 ;;Total ram usage:        0 bytes
  5920 ;; Hardware stack levels used: 1
  5921 ;; Hardware stack levels required when called: 2
  5922 ;; This function calls:
  5923 ;;		_I2C_2_Master_Idle
  5924 ;; This function is called by:
  5925 ;;		_color_writetoaddr
  5926 ;;		_color_read_Red
  5927 ;;		_color_read_Blue
  5928 ;;		_color_read_Green
  5929 ;;		_color_read_Clear
  5930 ;; This function uses a non-reentrant model
  5931 ;;
  5932                           
  5933                           	psect	text38
  5934   0022B4                     __ptext38:
  5935                           	callstack 0
  5936   0022B4                     _I2C_2_Master_Stop:
  5937                           	callstack 25
  5938   0022B4                     
  5939                           ;i2c.c: 56:   I2C_2_Master_Idle();
  5940   0022B4  ECC4  F010         	call	_I2C_2_Master_Idle	;wreg free
  5941   0022B8                     
  5942                           ;i2c.c: 57:   SSP2CON2bits.PEN = 1;
  5943   0022B8  010E               	movlb	14	; () banked
  5944   0022BA  85DA               	bsf	218,2,b	;volatile
  5945   0022BC                     
  5946                           ; BSR set to: 14
  5947   0022BC  0012               	return		;funcret
  5948   0022BE                     __end_of_I2C_2_Master_Stop:
  5949                           	callstack 0
  5950                           
  5951 ;; *************** function _I2C_2_Master_Start *****************
  5952 ;; Defined at:
  5953 ;;		line 36 in file "i2c.c"
  5954 ;; Parameters:    Size  Location     Type
  5955 ;;		None
  5956 ;; Auto vars:     Size  Location     Type
  5957 ;;		None
  5958 ;; Return value:  Size  Location     Type
  5959 ;;                  1    wreg      void 
  5960 ;; Registers used:
  5961 ;;		wreg, status,2, status,0, cstack
  5962 ;; Tracked objects:
  5963 ;;		On entry : 0/0
  5964 ;;		On exit  : 0/0
  5965 ;;		Unchanged: 0/0
  5966 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5967 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5968 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5969 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5970 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5971 ;;Total ram usage:        0 bytes
  5972 ;; Hardware stack levels used: 1
  5973 ;; Hardware stack levels required when called: 2
  5974 ;; This function calls:
  5975 ;;		_I2C_2_Master_Idle
  5976 ;; This function is called by:
  5977 ;;		_color_writetoaddr
  5978 ;;		_color_read_Red
  5979 ;;		_color_read_Blue
  5980 ;;		_color_read_Green
  5981 ;;		_color_read_Clear
  5982 ;; This function uses a non-reentrant model
  5983 ;;
  5984                           
  5985                           	psect	text39
  5986   0022BE                     __ptext39:
  5987                           	callstack 0
  5988   0022BE                     _I2C_2_Master_Start:
  5989                           	callstack 25
  5990   0022BE                     
  5991                           ;i2c.c: 38:   I2C_2_Master_Idle();
  5992   0022BE  ECC4  F010         	call	_I2C_2_Master_Idle	;wreg free
  5993   0022C2                     
  5994                           ;i2c.c: 39:   SSP2CON2bits.SEN = 1;
  5995   0022C2  010E               	movlb	14	; () banked
  5996   0022C4  81DA               	bsf	218,0,b	;volatile
  5997   0022C6                     
  5998                           ; BSR set to: 14
  5999   0022C6  0012               	return		;funcret
  6000   0022C8                     __end_of_I2C_2_Master_Start:
  6001                           	callstack 0
  6002                           
  6003 ;; *************** function _I2C_2_Master_RepStart *****************
  6004 ;; Defined at:
  6005 ;;		line 45 in file "i2c.c"
  6006 ;; Parameters:    Size  Location     Type
  6007 ;;		None
  6008 ;; Auto vars:     Size  Location     Type
  6009 ;;		None
  6010 ;; Return value:  Size  Location     Type
  6011 ;;                  1    wreg      void 
  6012 ;; Registers used:
  6013 ;;		wreg, status,2, status,0, cstack
  6014 ;; Tracked objects:
  6015 ;;		On entry : 0/0
  6016 ;;		On exit  : 0/0
  6017 ;;		Unchanged: 0/0
  6018 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6019 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6020 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6021 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6022 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6023 ;;Total ram usage:        0 bytes
  6024 ;; Hardware stack levels used: 1
  6025 ;; Hardware stack levels required when called: 2
  6026 ;; This function calls:
  6027 ;;		_I2C_2_Master_Idle
  6028 ;; This function is called by:
  6029 ;;		_color_read_Red
  6030 ;;		_color_read_Blue
  6031 ;;		_color_read_Green
  6032 ;;		_color_read_Clear
  6033 ;; This function uses a non-reentrant model
  6034 ;;
  6035                           
  6036                           	psect	text40
  6037   0022C8                     __ptext40:
  6038                           	callstack 0
  6039   0022C8                     _I2C_2_Master_RepStart:
  6040                           	callstack 25
  6041   0022C8                     
  6042                           ;i2c.c: 47:   I2C_2_Master_Idle();
  6043   0022C8  ECC4  F010         	call	_I2C_2_Master_Idle	;wreg free
  6044   0022CC                     
  6045                           ;i2c.c: 48:   SSP2CON2bits.RSEN = 1;
  6046   0022CC  010E               	movlb	14	; () banked
  6047   0022CE  83DA               	bsf	218,1,b	;volatile
  6048   0022D0                     
  6049                           ; BSR set to: 14
  6050   0022D0  0012               	return		;funcret
  6051   0022D2                     __end_of_I2C_2_Master_RepStart:
  6052                           	callstack 0
  6053                           
  6054 ;; *************** function _I2C_2_Master_Read *****************
  6055 ;; Defined at:
  6056 ;;		line 72 in file "i2c.c"
  6057 ;; Parameters:    Size  Location     Type
  6058 ;;  ack             1    wreg     unsigned char 
  6059 ;; Auto vars:     Size  Location     Type
  6060 ;;  ack             1    4[COMRAM] unsigned char 
  6061 ;;  tmp             1    5[COMRAM] unsigned char 
  6062 ;; Return value:  Size  Location     Type
  6063 ;;                  1    wreg      unsigned char 
  6064 ;; Registers used:
  6065 ;;		wreg, status,2, status,0, cstack
  6066 ;; Tracked objects:
  6067 ;;		On entry : 0/0
  6068 ;;		On exit  : 0/0
  6069 ;;		Unchanged: 0/0
  6070 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6071 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6072 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6073 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6074 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6075 ;;Total ram usage:        3 bytes
  6076 ;; Hardware stack levels used: 1
  6077 ;; Hardware stack levels required when called: 2
  6078 ;; This function calls:
  6079 ;;		_I2C_2_Master_Idle
  6080 ;; This function is called by:
  6081 ;;		_color_read_Red
  6082 ;;		_color_read_Blue
  6083 ;;		_color_read_Green
  6084 ;;		_color_read_Clear
  6085 ;; This function uses a non-reentrant model
  6086 ;;
  6087                           
  6088                           	psect	text41
  6089   002068                     __ptext41:
  6090                           	callstack 0
  6091   002068                     _I2C_2_Master_Read:
  6092                           	callstack 25
  6093                           
  6094                           ; BSR set to: 14
  6095                           ;incstack = 0
  6096                           ;I2C_2_Master_Read@ack stored from wreg
  6097   002068  6E05               	movwf	I2C_2_Master_Read@ack^0,c
  6098   00206A                     
  6099                           ;i2c.c: 72: unsigned char I2C_2_Master_Read(unsigned char ack);i2c.c: 73: {;i2c.c: 74:  
      +                           unsigned char tmp;;i2c.c: 75:   I2C_2_Master_Idle();
  6100   00206A  ECC4  F010         	call	_I2C_2_Master_Idle	;wreg free
  6101   00206E                     
  6102                           ;i2c.c: 76:   SSP2CON2bits.RCEN = 1;
  6103   00206E  010E               	movlb	14	; () banked
  6104   002070  87DA               	bsf	218,3,b	;volatile
  6105                           
  6106                           ;i2c.c: 77:   I2C_2_Master_Idle();
  6107   002072  ECC4  F010         	call	_I2C_2_Master_Idle	;wreg free
  6108   002076                     
  6109                           ;i2c.c: 78:   tmp = SSP2BUF;
  6110   002076  CED5 F006          	movff	3797,I2C_2_Master_Read@tmp	;volatile
  6111                           
  6112                           ;i2c.c: 79:   I2C_2_Master_Idle();
  6113   00207A  ECC4  F010         	call	_I2C_2_Master_Idle	;wreg free
  6114   00207E                     
  6115                           ;i2c.c: 80:   SSP2CON2bits.ACKDT = !ack;
  6116   00207E  5005               	movf	I2C_2_Master_Read@ack^0,w,c
  6117   002080  B4D8               	btfsc	status,2,c
  6118   002082  EF45  F010         	goto	u1531
  6119   002086  EF49  F010         	goto	u1530
  6120   00208A                     u1531:
  6121   00208A  6A04               	clrf	??_I2C_2_Master_Read^0,c
  6122   00208C  2A04               	incf	??_I2C_2_Master_Read^0,f,c
  6123   00208E  EF4A  F010         	goto	u1548
  6124   002092                     u1530:
  6125   002092  6A04               	clrf	??_I2C_2_Master_Read^0,c
  6126   002094                     u1548:
  6127   002094  3A04               	swapf	??_I2C_2_Master_Read^0,f,c
  6128   002096  4604               	rlncf	??_I2C_2_Master_Read^0,f,c
  6129   002098  010E               	movlb	14	; () banked
  6130   00209A  51DA               	movf	218,w,b	;volatile
  6131   00209C  1804               	xorwf	??_I2C_2_Master_Read^0,w,c
  6132   00209E  0BDF               	andlw	-33
  6133   0020A0  1804               	xorwf	??_I2C_2_Master_Read^0,w,c
  6134   0020A2  6FDA               	movwf	218,b	;volatile
  6135   0020A4                     
  6136                           ; BSR set to: 14
  6137                           ;i2c.c: 81:   SSP2CON2bits.ACKEN = 1;
  6138   0020A4  89DA               	bsf	218,4,b	;volatile
  6139   0020A6                     
  6140                           ; BSR set to: 14
  6141                           ;i2c.c: 82:   return tmp;
  6142   0020A6  5006               	movf	I2C_2_Master_Read@tmp^0,w,c
  6143   0020A8                     
  6144                           ; BSR set to: 14
  6145   0020A8  0012               	return		;funcret
  6146   0020AA                     __end_of_I2C_2_Master_Read:
  6147                           	callstack 0
  6148                           
  6149 ;; *************** function _I2C_2_Master_Idle *****************
  6150 ;; Defined at:
  6151 ;;		line 28 in file "i2c.c"
  6152 ;; Parameters:    Size  Location     Type
  6153 ;;		None
  6154 ;; Auto vars:     Size  Location     Type
  6155 ;;		None
  6156 ;; Return value:  Size  Location     Type
  6157 ;;                  1    wreg      void 
  6158 ;; Registers used:
  6159 ;;		wreg, status,2, status,0
  6160 ;; Tracked objects:
  6161 ;;		On entry : 0/0
  6162 ;;		On exit  : 0/0
  6163 ;;		Unchanged: 0/0
  6164 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6165 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6166 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6167 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6168 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6169 ;;Total ram usage:        1 bytes
  6170 ;; Hardware stack levels used: 1
  6171 ;; Hardware stack levels required when called: 1
  6172 ;; This function calls:
  6173 ;;		Nothing
  6174 ;; This function is called by:
  6175 ;;		_I2C_2_Master_Start
  6176 ;;		_I2C_2_Master_RepStart
  6177 ;;		_I2C_2_Master_Stop
  6178 ;;		_I2C_2_Master_Write
  6179 ;;		_I2C_2_Master_Read
  6180 ;; This function uses a non-reentrant model
  6181 ;;
  6182                           
  6183                           	psect	text42
  6184   002188                     __ptext42:
  6185                           	callstack 0
  6186   002188                     _I2C_2_Master_Idle:
  6187                           	callstack 25
  6188   002188                     l30:
  6189   002188  010E               	movlb	14	; () banked
  6190   00218A  B5D8               	btfsc	216,2,b	;volatile
  6191   00218C  EFCA  F010         	goto	u1371
  6192   002190  EFCC  F010         	goto	u1370
  6193   002194                     u1371:
  6194   002194  EFC4  F010         	goto	l30
  6195   002198                     u1370:
  6196   002198                     
  6197                           ; BSR set to: 14
  6198   002198  CEDA F003          	movff	3802,??_I2C_2_Master_Idle	;volatile
  6199   00219C  0E1F               	movlw	31
  6200   00219E  1603               	andwf	??_I2C_2_Master_Idle^0,f,c
  6201   0021A0  A4D8               	btfss	status,2,c
  6202   0021A2  EFD5  F010         	goto	u1381
  6203   0021A6  EFD7  F010         	goto	u1380
  6204   0021AA                     u1381:
  6205   0021AA  EFC4  F010         	goto	l30
  6206   0021AE                     u1380:
  6207   0021AE                     
  6208                           ; BSR set to: 14
  6209   0021AE  0012               	return		;funcret
  6210   0021B0                     __end_of_I2C_2_Master_Idle:
  6211                           	callstack 0
  6212                           
  6213 ;; *************** function ___xxtofl *****************
  6214 ;; Defined at:
  6215 ;;		line 10 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\xxtofl.c"
  6216 ;; Parameters:    Size  Location     Type
  6217 ;;  sign            1    wreg     unsigned char 
  6218 ;;  val             4    2[COMRAM] long 
  6219 ;; Auto vars:     Size  Location     Type
  6220 ;;  sign            1   10[COMRAM] unsigned char 
  6221 ;;  arg             4   12[COMRAM] unsigned long 
  6222 ;;  exp             1   11[COMRAM] unsigned char 
  6223 ;; Return value:  Size  Location     Type
  6224 ;;                  4    2[COMRAM] unsigned char 
  6225 ;; Registers used:
  6226 ;;		wreg, status,2, status,0
  6227 ;; Tracked objects:
  6228 ;;		On entry : 0/0
  6229 ;;		On exit  : 0/0
  6230 ;;		Unchanged: 0/0
  6231 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6232 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6233 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6234 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6235 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6236 ;;Total ram usage:       14 bytes
  6237 ;; Hardware stack levels used: 1
  6238 ;; Hardware stack levels required when called: 1
  6239 ;; This function calls:
  6240 ;;		Nothing
  6241 ;; This function is called by:
  6242 ;;		_READcolor
  6243 ;; This function uses a non-reentrant model
  6244 ;;
  6245                           
  6246                           	psect	text43
  6247   000D78                     __ptext43:
  6248                           	callstack 0
  6249   000D78                     ___xxtofl:
  6250                           	callstack 27
  6251                           
  6252                           ; BSR set to: 14
  6253                           ;incstack = 0
  6254                           ;___xxtofl@sign stored from wreg
  6255   000D78  6E0B               	movwf	___xxtofl@sign^0,c
  6256   000D7A  500B               	movf	___xxtofl@sign^0,w,c
  6257   000D7C  B4D8               	btfsc	status,2,c
  6258   000D7E  EFC3  F006         	goto	u1921
  6259   000D82  EFC5  F006         	goto	u1920
  6260   000D86                     u1921:
  6261   000D86  EFE7  F006         	goto	l1251
  6262   000D8A                     u1920:
  6263   000D8A  BE06               	btfsc	(___xxtofl@val+3)^0,7,c
  6264   000D8C  EFCC  F006         	goto	u1930
  6265   000D90  EFCA  F006         	goto	u1931
  6266   000D94                     u1931:
  6267   000D94  EFE7  F006         	goto	l1251
  6268   000D98                     u1930:
  6269   000D98  C003  F007         	movff	___xxtofl@val,??___xxtofl
  6270   000D9C  C004  F008         	movff	___xxtofl@val+1,??___xxtofl+1
  6271   000DA0  C005  F009         	movff	___xxtofl@val+2,??___xxtofl+2
  6272   000DA4  C006  F00A         	movff	___xxtofl@val+3,??___xxtofl+3
  6273   000DA8  1E07               	comf	??___xxtofl^0,f,c
  6274   000DAA  1E08               	comf	(??___xxtofl+1)^0,f,c
  6275   000DAC  1E09               	comf	(??___xxtofl+2)^0,f,c
  6276   000DAE  1E0A               	comf	(??___xxtofl+3)^0,f,c
  6277   000DB0  2A07               	incf	??___xxtofl^0,f,c
  6278   000DB2  0E00               	movlw	0
  6279   000DB4  2208               	addwfc	(??___xxtofl+1)^0,f,c
  6280   000DB6  2209               	addwfc	(??___xxtofl+2)^0,f,c
  6281   000DB8  220A               	addwfc	(??___xxtofl+3)^0,f,c
  6282   000DBA  C007  F00D         	movff	??___xxtofl,___xxtofl@arg
  6283   000DBE  C008  F00E         	movff	??___xxtofl+1,___xxtofl@arg+1
  6284   000DC2  C009  F00F         	movff	??___xxtofl+2,___xxtofl@arg+2
  6285   000DC6  C00A  F010         	movff	??___xxtofl+3,___xxtofl@arg+3
  6286   000DCA  EFEF  F006         	goto	l2773
  6287   000DCE                     l1251:
  6288   000DCE  C003  F00D         	movff	___xxtofl@val,___xxtofl@arg
  6289   000DD2  C004  F00E         	movff	___xxtofl@val+1,___xxtofl@arg+1
  6290   000DD6  C005  F00F         	movff	___xxtofl@val+2,___xxtofl@arg+2
  6291   000DDA  C006  F010         	movff	___xxtofl@val+3,___xxtofl@arg+3
  6292   000DDE                     l2773:
  6293   000DDE  5003               	movf	___xxtofl@val^0,w,c
  6294   000DE0  1004               	iorwf	(___xxtofl@val+1)^0,w,c
  6295   000DE2  1005               	iorwf	(___xxtofl@val+2)^0,w,c
  6296   000DE4  1006               	iorwf	(___xxtofl@val+3)^0,w,c
  6297   000DE6  A4D8               	btfss	status,2,c
  6298   000DE8  EFF8  F006         	goto	u1941
  6299   000DEC  EFFA  F006         	goto	u1940
  6300   000DF0                     u1941:
  6301   000DF0  EF04  F007         	goto	l2779
  6302   000DF4                     u1940:
  6303   000DF4  0E00               	movlw	0
  6304   000DF6  6E03               	movwf	?___xxtofl^0,c
  6305   000DF8  0E00               	movlw	0
  6306   000DFA  6E04               	movwf	(?___xxtofl+1)^0,c
  6307   000DFC  0E00               	movlw	0
  6308   000DFE  6E05               	movwf	(?___xxtofl+2)^0,c
  6309   000E00  0E00               	movlw	0
  6310   000E02  6E06               	movwf	(?___xxtofl+3)^0,c
  6311   000E04  EF95  F007         	goto	l1254
  6312   000E08                     l2779:
  6313   000E08  0E96               	movlw	150
  6314   000E0A  6E0C               	movwf	___xxtofl@exp^0,c
  6315   000E0C  EF0E  F007         	goto	l2783
  6316   000E10                     l2781:
  6317   000E10  2A0C               	incf	___xxtofl@exp^0,f,c
  6318   000E12  90D8               	bcf	status,0,c
  6319   000E14  3210               	rrcf	(___xxtofl@arg+3)^0,f,c
  6320   000E16  320F               	rrcf	(___xxtofl@arg+2)^0,f,c
  6321   000E18  320E               	rrcf	(___xxtofl@arg+1)^0,f,c
  6322   000E1A  320D               	rrcf	___xxtofl@arg^0,f,c
  6323   000E1C                     l2783:
  6324   000E1C  0E00               	movlw	0
  6325   000E1E  140D               	andwf	___xxtofl@arg^0,w,c
  6326   000E20  6E07               	movwf	??___xxtofl^0,c
  6327   000E22  0E00               	movlw	0
  6328   000E24  140E               	andwf	(___xxtofl@arg+1)^0,w,c
  6329   000E26  6E08               	movwf	(??___xxtofl+1)^0,c
  6330   000E28  0E00               	movlw	0
  6331   000E2A  140F               	andwf	(___xxtofl@arg+2)^0,w,c
  6332   000E2C  6E09               	movwf	(??___xxtofl+2)^0,c
  6333   000E2E  0EFE               	movlw	254
  6334   000E30  1410               	andwf	(___xxtofl@arg+3)^0,w,c
  6335   000E32  6E0A               	movwf	(??___xxtofl+3)^0,c
  6336   000E34  5007               	movf	??___xxtofl^0,w,c
  6337   000E36  1008               	iorwf	(??___xxtofl+1)^0,w,c
  6338   000E38  1009               	iorwf	(??___xxtofl+2)^0,w,c
  6339   000E3A  100A               	iorwf	(??___xxtofl+3)^0,w,c
  6340   000E3C  A4D8               	btfss	status,2,c
  6341   000E3E  EF23  F007         	goto	u1951
  6342   000E42  EF25  F007         	goto	u1950
  6343   000E46                     u1951:
  6344   000E46  EF08  F007         	goto	l2781
  6345   000E4A                     u1950:
  6346   000E4A  EF33  F007         	goto	l1258
  6347   000E4E                     l2785:
  6348   000E4E  2A0C               	incf	___xxtofl@exp^0,f,c
  6349   000E50  0E01               	movlw	1
  6350   000E52  260D               	addwf	___xxtofl@arg^0,f,c
  6351   000E54  0E00               	movlw	0
  6352   000E56  220E               	addwfc	(___xxtofl@arg+1)^0,f,c
  6353   000E58  220F               	addwfc	(___xxtofl@arg+2)^0,f,c
  6354   000E5A  2210               	addwfc	(___xxtofl@arg+3)^0,f,c
  6355   000E5C  90D8               	bcf	status,0,c
  6356   000E5E  3210               	rrcf	(___xxtofl@arg+3)^0,f,c
  6357   000E60  320F               	rrcf	(___xxtofl@arg+2)^0,f,c
  6358   000E62  320E               	rrcf	(___xxtofl@arg+1)^0,f,c
  6359   000E64  320D               	rrcf	___xxtofl@arg^0,f,c
  6360   000E66                     l1258:
  6361   000E66  0E00               	movlw	0
  6362   000E68  140D               	andwf	___xxtofl@arg^0,w,c
  6363   000E6A  6E07               	movwf	??___xxtofl^0,c
  6364   000E6C  0E00               	movlw	0
  6365   000E6E  140E               	andwf	(___xxtofl@arg+1)^0,w,c
  6366   000E70  6E08               	movwf	(??___xxtofl+1)^0,c
  6367   000E72  0E00               	movlw	0
  6368   000E74  140F               	andwf	(___xxtofl@arg+2)^0,w,c
  6369   000E76  6E09               	movwf	(??___xxtofl+2)^0,c
  6370   000E78  0EFF               	movlw	255
  6371   000E7A  1410               	andwf	(___xxtofl@arg+3)^0,w,c
  6372   000E7C  6E0A               	movwf	(??___xxtofl+3)^0,c
  6373   000E7E  5007               	movf	??___xxtofl^0,w,c
  6374   000E80  1008               	iorwf	(??___xxtofl+1)^0,w,c
  6375   000E82  1009               	iorwf	(??___xxtofl+2)^0,w,c
  6376   000E84  100A               	iorwf	(??___xxtofl+3)^0,w,c
  6377   000E86  A4D8               	btfss	status,2,c
  6378   000E88  EF48  F007         	goto	u1961
  6379   000E8C  EF4A  F007         	goto	u1960
  6380   000E90                     u1961:
  6381   000E90  EF27  F007         	goto	l2785
  6382   000E94                     u1960:
  6383   000E94  EF52  F007         	goto	l2793
  6384   000E98                     l2791:
  6385   000E98  060C               	decf	___xxtofl@exp^0,f,c
  6386   000E9A  90D8               	bcf	status,0,c
  6387   000E9C  360D               	rlcf	___xxtofl@arg^0,f,c
  6388   000E9E  360E               	rlcf	(___xxtofl@arg+1)^0,f,c
  6389   000EA0  360F               	rlcf	(___xxtofl@arg+2)^0,f,c
  6390   000EA2  3610               	rlcf	(___xxtofl@arg+3)^0,f,c
  6391   000EA4                     l2793:
  6392   000EA4  BE0F               	btfsc	(___xxtofl@arg+2)^0,7,c
  6393   000EA6  EF57  F007         	goto	u1971
  6394   000EAA  EF59  F007         	goto	u1970
  6395   000EAE                     u1971:
  6396   000EAE  EF61  F007         	goto	l1265
  6397   000EB2                     u1970:
  6398   000EB2  0E02               	movlw	2
  6399   000EB4  600C               	cpfslt	___xxtofl@exp^0,c
  6400   000EB6  EF5F  F007         	goto	u1981
  6401   000EBA  EF61  F007         	goto	u1980
  6402   000EBE                     u1981:
  6403   000EBE  EF4C  F007         	goto	l2791
  6404   000EC2                     u1980:
  6405   000EC2                     l1265:
  6406   000EC2  B00C               	btfsc	___xxtofl@exp^0,0,c
  6407   000EC4  EF66  F007         	goto	u1991
  6408   000EC8  EF68  F007         	goto	u1990
  6409   000ECC                     u1991:
  6410   000ECC  EF69  F007         	goto	l2799
  6411   000ED0                     u1990:
  6412   000ED0  9E0F               	bcf	(___xxtofl@arg+2)^0,7,c
  6413   000ED2                     l2799:
  6414   000ED2  90D8               	bcf	status,0,c
  6415   000ED4  320C               	rrcf	___xxtofl@exp^0,f,c
  6416   000ED6  C00C  F007         	movff	___xxtofl@exp,??___xxtofl
  6417   000EDA  6A08               	clrf	(??___xxtofl+1)^0,c
  6418   000EDC  6A09               	clrf	(??___xxtofl+2)^0,c
  6419   000EDE  6A0A               	clrf	(??___xxtofl+3)^0,c
  6420   000EE0  C007  F00A         	movff	??___xxtofl,??___xxtofl+3
  6421   000EE4  6A09               	clrf	(??___xxtofl+2)^0,c
  6422   000EE6  6A08               	clrf	(??___xxtofl+1)^0,c
  6423   000EE8  6A07               	clrf	??___xxtofl^0,c
  6424   000EEA  5007               	movf	??___xxtofl^0,w,c
  6425   000EEC  120D               	iorwf	___xxtofl@arg^0,f,c
  6426   000EEE  5008               	movf	(??___xxtofl+1)^0,w,c
  6427   000EF0  120E               	iorwf	(___xxtofl@arg+1)^0,f,c
  6428   000EF2  5009               	movf	(??___xxtofl+2)^0,w,c
  6429   000EF4  120F               	iorwf	(___xxtofl@arg+2)^0,f,c
  6430   000EF6  500A               	movf	(??___xxtofl+3)^0,w,c
  6431   000EF8  1210               	iorwf	(___xxtofl@arg+3)^0,f,c
  6432   000EFA  500B               	movf	___xxtofl@sign^0,w,c
  6433   000EFC  B4D8               	btfsc	status,2,c
  6434   000EFE  EF83  F007         	goto	u2001
  6435   000F02  EF85  F007         	goto	u2000
  6436   000F06                     u2001:
  6437   000F06  EF8D  F007         	goto	l2809
  6438   000F0A                     u2000:
  6439   000F0A  BE06               	btfsc	(___xxtofl@val+3)^0,7,c
  6440   000F0C  EF8C  F007         	goto	u2010
  6441   000F10  EF8A  F007         	goto	u2011
  6442   000F14                     u2011:
  6443   000F14  EF8D  F007         	goto	l2809
  6444   000F18                     u2010:
  6445   000F18  8E10               	bsf	(___xxtofl@arg+3)^0,7,c
  6446   000F1A                     l2809:
  6447   000F1A  C00D  F003         	movff	___xxtofl@arg,?___xxtofl
  6448   000F1E  C00E  F004         	movff	___xxtofl@arg+1,?___xxtofl+1
  6449   000F22  C00F  F005         	movff	___xxtofl@arg+2,?___xxtofl+2
  6450   000F26  C010  F006         	movff	___xxtofl@arg+3,?___xxtofl+3
  6451   000F2A                     l1254:
  6452   000F2A  0012               	return		;funcret
  6453   000F2C                     __end_of___xxtofl:
  6454                           	callstack 0
  6455                           
  6456 ;; *************** function ___fldiv *****************
  6457 ;; Defined at:
  6458 ;;		line 11 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\sprcdiv.c"
  6459 ;; Parameters:    Size  Location     Type
  6460 ;;  b               4   16[COMRAM] unsigned char 
  6461 ;;  a               4   20[COMRAM] unsigned char 
  6462 ;; Auto vars:     Size  Location     Type
  6463 ;;  grs             4   35[COMRAM] unsigned long 
  6464 ;;  rem             4   28[COMRAM] unsigned long 
  6465 ;;  new_exp         2   33[COMRAM] short 
  6466 ;;  aexp            1   40[COMRAM] unsigned char 
  6467 ;;  bexp            1   39[COMRAM] unsigned char 
  6468 ;;  sign            1   32[COMRAM] unsigned char 
  6469 ;; Return value:  Size  Location     Type
  6470 ;;                  4   16[COMRAM] unsigned char 
  6471 ;; Registers used:
  6472 ;;		wreg, status,2, status,0
  6473 ;; Tracked objects:
  6474 ;;		On entry : 0/0
  6475 ;;		On exit  : 0/0
  6476 ;;		Unchanged: 0/0
  6477 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6478 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6479 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6480 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6481 ;;      Totals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6482 ;;Total ram usage:       25 bytes
  6483 ;; Hardware stack levels used: 1
  6484 ;; Hardware stack levels required when called: 1
  6485 ;; This function calls:
  6486 ;;		Nothing
  6487 ;; This function is called by:
  6488 ;;		_READcolor
  6489 ;; This function uses a non-reentrant model
  6490 ;;
  6491                           
  6492                           	psect	text44
  6493   000704                     __ptext44:
  6494                           	callstack 0
  6495   000704                     ___fldiv:
  6496                           	callstack 27
  6497   000704  5014               	movf	(___fldiv@b+3)^0,w,c
  6498   000706  0B80               	andlw	128
  6499   000708  6E21               	movwf	___fldiv@sign^0,c
  6500   00070A  5014               	movf	(___fldiv@b+3)^0,w,c
  6501   00070C  2414               	addwf	(___fldiv@b+3)^0,w,c
  6502   00070E  6E28               	movwf	___fldiv@bexp^0,c
  6503   000710  AE13               	btfss	(___fldiv@b+2)^0,7,c
  6504   000712  EF8D  F003         	goto	u1691
  6505   000716  EF8F  F003         	goto	u1690
  6506   00071A                     u1691:
  6507   00071A  EF90  F003         	goto	l2635
  6508   00071E                     u1690:
  6509   00071E  8028               	bsf	___fldiv@bexp^0,0,c
  6510   000720                     l2635:
  6511   000720  5028               	movf	___fldiv@bexp^0,w,c
  6512   000722  B4D8               	btfsc	status,2,c
  6513   000724  EF96  F003         	goto	u1701
  6514   000728  EF98  F003         	goto	u1700
  6515   00072C                     u1701:
  6516   00072C  EFAD  F003         	goto	l2645
  6517   000730                     u1700:
  6518   000730  2828               	incf	___fldiv@bexp^0,w,c
  6519   000732  A4D8               	btfss	status,2,c
  6520   000734  EF9E  F003         	goto	u1711
  6521   000738  EFA0  F003         	goto	u1710
  6522   00073C                     u1711:
  6523   00073C  EFA8  F003         	goto	l2641
  6524   000740                     u1710:
  6525   000740  0E00               	movlw	0
  6526   000742  6E11               	movwf	___fldiv@b^0,c
  6527   000744  0E00               	movlw	0
  6528   000746  6E12               	movwf	(___fldiv@b+1)^0,c
  6529   000748  0E00               	movlw	0
  6530   00074A  6E13               	movwf	(___fldiv@b+2)^0,c
  6531   00074C  0E00               	movlw	0
  6532   00074E  6E14               	movwf	(___fldiv@b+3)^0,c
  6533   000750                     l2641:
  6534   000750  8E13               	bsf	(___fldiv@b+2)^0,7,c
  6535   000752  0E00               	movlw	0
  6536   000754  6E14               	movwf	(___fldiv@b+3)^0,c
  6537   000756  EFB5  F003         	goto	l2647
  6538   00075A                     l2645:
  6539   00075A  0E00               	movlw	0
  6540   00075C  6E11               	movwf	___fldiv@b^0,c
  6541   00075E  0E00               	movlw	0
  6542   000760  6E12               	movwf	(___fldiv@b+1)^0,c
  6543   000762  0E00               	movlw	0
  6544   000764  6E13               	movwf	(___fldiv@b+2)^0,c
  6545   000766  0E00               	movlw	0
  6546   000768  6E14               	movwf	(___fldiv@b+3)^0,c
  6547   00076A                     l2647:
  6548   00076A  5018               	movf	(___fldiv@a+3)^0,w,c
  6549   00076C  0B80               	andlw	128
  6550   00076E  1A21               	xorwf	___fldiv@sign^0,f,c
  6551   000770  5018               	movf	(___fldiv@a+3)^0,w,c
  6552   000772  2418               	addwf	(___fldiv@a+3)^0,w,c
  6553   000774  6E29               	movwf	___fldiv@aexp^0,c
  6554   000776  AE17               	btfss	(___fldiv@a+2)^0,7,c
  6555   000778  EFC0  F003         	goto	u1721
  6556   00077C  EFC2  F003         	goto	u1720
  6557   000780                     u1721:
  6558   000780  EFC3  F003         	goto	l2655
  6559   000784                     u1720:
  6560   000784  8029               	bsf	___fldiv@aexp^0,0,c
  6561   000786                     l2655:
  6562   000786  5029               	movf	___fldiv@aexp^0,w,c
  6563   000788  B4D8               	btfsc	status,2,c
  6564   00078A  EFC9  F003         	goto	u1731
  6565   00078E  EFCB  F003         	goto	u1730
  6566   000792                     u1731:
  6567   000792  EFE0  F003         	goto	l2665
  6568   000796                     u1730:
  6569   000796  2829               	incf	___fldiv@aexp^0,w,c
  6570   000798  A4D8               	btfss	status,2,c
  6571   00079A  EFD1  F003         	goto	u1741
  6572   00079E  EFD3  F003         	goto	u1740
  6573   0007A2                     u1741:
  6574   0007A2  EFDB  F003         	goto	l2661
  6575   0007A6                     u1740:
  6576   0007A6  0E00               	movlw	0
  6577   0007A8  6E15               	movwf	___fldiv@a^0,c
  6578   0007AA  0E00               	movlw	0
  6579   0007AC  6E16               	movwf	(___fldiv@a+1)^0,c
  6580   0007AE  0E00               	movlw	0
  6581   0007B0  6E17               	movwf	(___fldiv@a+2)^0,c
  6582   0007B2  0E00               	movlw	0
  6583   0007B4  6E18               	movwf	(___fldiv@a+3)^0,c
  6584   0007B6                     l2661:
  6585   0007B6  8E17               	bsf	(___fldiv@a+2)^0,7,c
  6586   0007B8  0E00               	movlw	0
  6587   0007BA  6E18               	movwf	(___fldiv@a+3)^0,c
  6588   0007BC  EFE8  F003         	goto	l2667
  6589   0007C0                     l2665:
  6590   0007C0  0E00               	movlw	0
  6591   0007C2  6E15               	movwf	___fldiv@a^0,c
  6592   0007C4  0E00               	movlw	0
  6593   0007C6  6E16               	movwf	(___fldiv@a+1)^0,c
  6594   0007C8  0E00               	movlw	0
  6595   0007CA  6E17               	movwf	(___fldiv@a+2)^0,c
  6596   0007CC  0E00               	movlw	0
  6597   0007CE  6E18               	movwf	(___fldiv@a+3)^0,c
  6598   0007D0                     l2667:
  6599   0007D0  5015               	movf	___fldiv@a^0,w,c
  6600   0007D2  1016               	iorwf	(___fldiv@a+1)^0,w,c
  6601   0007D4  1017               	iorwf	(___fldiv@a+2)^0,w,c
  6602   0007D6  1018               	iorwf	(___fldiv@a+3)^0,w,c
  6603   0007D8  A4D8               	btfss	status,2,c
  6604   0007DA  EFF1  F003         	goto	u1751
  6605   0007DE  EFF3  F003         	goto	u1750
  6606   0007E2                     u1751:
  6607   0007E2  EF0B  F004         	goto	l2679
  6608   0007E6                     u1750:
  6609   0007E6  0E00               	movlw	0
  6610   0007E8  6E11               	movwf	___fldiv@b^0,c
  6611   0007EA  0E00               	movlw	0
  6612   0007EC  6E12               	movwf	(___fldiv@b+1)^0,c
  6613   0007EE  0E00               	movlw	0
  6614   0007F0  6E13               	movwf	(___fldiv@b+2)^0,c
  6615   0007F2  0E00               	movlw	0
  6616   0007F4  6E14               	movwf	(___fldiv@b+3)^0,c
  6617   0007F6  0E80               	movlw	128
  6618   0007F8  1213               	iorwf	(___fldiv@b+2)^0,f,c
  6619   0007FA  0E7F               	movlw	127
  6620   0007FC  1214               	iorwf	(___fldiv@b+3)^0,f,c
  6621   0007FE                     l2673:
  6622   0007FE  5021               	movf	___fldiv@sign^0,w,c
  6623   000800  1214               	iorwf	(___fldiv@b+3)^0,f,c
  6624   000802  C011  F011         	movff	___fldiv@b,?___fldiv
  6625   000806  C012  F012         	movff	___fldiv@b+1,?___fldiv+1
  6626   00080A  C013  F013         	movff	___fldiv@b+2,?___fldiv+2
  6627   00080E  C014  F014         	movff	___fldiv@b+3,?___fldiv+3
  6628   000812  EF4E  F005         	goto	l1178
  6629   000816                     l2679:
  6630   000816  5028               	movf	___fldiv@bexp^0,w,c
  6631   000818  A4D8               	btfss	status,2,c
  6632   00081A  EF11  F004         	goto	u1761
  6633   00081E  EF13  F004         	goto	u1760
  6634   000822                     u1761:
  6635   000822  EF1D  F004         	goto	l2687
  6636   000826                     u1760:
  6637   000826  0E00               	movlw	0
  6638   000828  6E11               	movwf	?___fldiv^0,c
  6639   00082A  0E00               	movlw	0
  6640   00082C  6E12               	movwf	(?___fldiv+1)^0,c
  6641   00082E  0E00               	movlw	0
  6642   000830  6E13               	movwf	(?___fldiv+2)^0,c
  6643   000832  0E00               	movlw	0
  6644   000834  6E14               	movwf	(?___fldiv+3)^0,c
  6645   000836  EF4E  F005         	goto	l1178
  6646   00083A                     l2687:
  6647   00083A  5029               	movf	___fldiv@aexp^0,w,c
  6648   00083C  C028  F019         	movff	___fldiv@bexp,??___fldiv
  6649   000840  6A1A               	clrf	(??___fldiv+1)^0,c
  6650   000842  5E19               	subwf	??___fldiv^0,f,c
  6651   000844  0E00               	movlw	0
  6652   000846  5A1A               	subwfb	(??___fldiv+1)^0,f,c
  6653   000848  0E7F               	movlw	127
  6654   00084A  2419               	addwf	??___fldiv^0,w,c
  6655   00084C  6E22               	movwf	___fldiv@new_exp^0,c
  6656   00084E  0E00               	movlw	0
  6657   000850  201A               	addwfc	(??___fldiv+1)^0,w,c
  6658   000852  6E23               	movwf	(___fldiv@new_exp+1)^0,c
  6659   000854  C011  F01D         	movff	___fldiv@b,___fldiv@rem
  6660   000858  C012  F01E         	movff	___fldiv@b+1,___fldiv@rem+1
  6661   00085C  C013  F01F         	movff	___fldiv@b+2,___fldiv@rem+2
  6662   000860  C014  F020         	movff	___fldiv@b+3,___fldiv@rem+3
  6663   000864  0E00               	movlw	0
  6664   000866  6E11               	movwf	___fldiv@b^0,c
  6665   000868  0E00               	movlw	0
  6666   00086A  6E12               	movwf	(___fldiv@b+1)^0,c
  6667   00086C  0E00               	movlw	0
  6668   00086E  6E13               	movwf	(___fldiv@b+2)^0,c
  6669   000870  0E00               	movlw	0
  6670   000872  6E14               	movwf	(___fldiv@b+3)^0,c
  6671   000874  0E00               	movlw	0
  6672   000876  6E24               	movwf	___fldiv@grs^0,c
  6673   000878  0E00               	movlw	0
  6674   00087A  6E25               	movwf	(___fldiv@grs+1)^0,c
  6675   00087C  0E00               	movlw	0
  6676   00087E  6E26               	movwf	(___fldiv@grs+2)^0,c
  6677   000880  0E00               	movlw	0
  6678   000882  6E27               	movwf	(___fldiv@grs+3)^0,c
  6679   000884  0E00               	movlw	0
  6680   000886  6E29               	movwf	___fldiv@aexp^0,c
  6681   000888  EF7E  F004         	goto	l1180
  6682   00088C                     l2697:
  6683   00088C  5029               	movf	___fldiv@aexp^0,w,c
  6684   00088E  B4D8               	btfsc	status,2,c
  6685   000890  EF4C  F004         	goto	u1771
  6686   000894  EF4E  F004         	goto	u1770
  6687   000898                     u1771:
  6688   000898  EF65  F004         	goto	l2705
  6689   00089C                     u1770:
  6690   00089C  90D8               	bcf	status,0,c
  6691   00089E  361D               	rlcf	___fldiv@rem^0,f,c
  6692   0008A0  361E               	rlcf	(___fldiv@rem+1)^0,f,c
  6693   0008A2  361F               	rlcf	(___fldiv@rem+2)^0,f,c
  6694   0008A4  3620               	rlcf	(___fldiv@rem+3)^0,f,c
  6695   0008A6  90D8               	bcf	status,0,c
  6696   0008A8  3611               	rlcf	___fldiv@b^0,f,c
  6697   0008AA  3612               	rlcf	(___fldiv@b+1)^0,f,c
  6698   0008AC  3613               	rlcf	(___fldiv@b+2)^0,f,c
  6699   0008AE  3614               	rlcf	(___fldiv@b+3)^0,f,c
  6700   0008B0  AE27               	btfss	(___fldiv@grs+3)^0,7,c
  6701   0008B2  EF5D  F004         	goto	u1781
  6702   0008B6  EF5F  F004         	goto	u1780
  6703   0008BA                     u1781:
  6704   0008BA  EF60  F004         	goto	l1183
  6705   0008BE                     u1780:
  6706   0008BE  8011               	bsf	___fldiv@b^0,0,c
  6707   0008C0                     l1183:
  6708   0008C0  90D8               	bcf	status,0,c
  6709   0008C2  3624               	rlcf	___fldiv@grs^0,f,c
  6710   0008C4  3625               	rlcf	(___fldiv@grs+1)^0,f,c
  6711   0008C6  3626               	rlcf	(___fldiv@grs+2)^0,f,c
  6712   0008C8  3627               	rlcf	(___fldiv@grs+3)^0,f,c
  6713   0008CA                     l2705:
  6714   0008CA  5015               	movf	___fldiv@a^0,w,c
  6715   0008CC  5C1D               	subwf	___fldiv@rem^0,w,c
  6716   0008CE  5016               	movf	(___fldiv@a+1)^0,w,c
  6717   0008D0  581E               	subwfb	(___fldiv@rem+1)^0,w,c
  6718   0008D2  5017               	movf	(___fldiv@a+2)^0,w,c
  6719   0008D4  581F               	subwfb	(___fldiv@rem+2)^0,w,c
  6720   0008D6  5018               	movf	(___fldiv@a+3)^0,w,c
  6721   0008D8  5820               	subwfb	(___fldiv@rem+3)^0,w,c
  6722   0008DA  A0D8               	btfss	status,0,c
  6723   0008DC  EF72  F004         	goto	u1791
  6724   0008E0  EF74  F004         	goto	u1790
  6725   0008E4                     u1791:
  6726   0008E4  EF7D  F004         	goto	l2711
  6727   0008E8                     u1790:
  6728   0008E8  8C27               	bsf	(___fldiv@grs+3)^0,6,c
  6729   0008EA  5015               	movf	___fldiv@a^0,w,c
  6730   0008EC  5E1D               	subwf	___fldiv@rem^0,f,c
  6731   0008EE  5016               	movf	(___fldiv@a+1)^0,w,c
  6732   0008F0  5A1E               	subwfb	(___fldiv@rem+1)^0,f,c
  6733   0008F2  5017               	movf	(___fldiv@a+2)^0,w,c
  6734   0008F4  5A1F               	subwfb	(___fldiv@rem+2)^0,f,c
  6735   0008F6  5018               	movf	(___fldiv@a+3)^0,w,c
  6736   0008F8  5A20               	subwfb	(___fldiv@rem+3)^0,f,c
  6737   0008FA                     l2711:
  6738   0008FA  2A29               	incf	___fldiv@aexp^0,f,c
  6739   0008FC                     l1180:
  6740   0008FC  0E19               	movlw	25
  6741   0008FE  6429               	cpfsgt	___fldiv@aexp^0,c
  6742   000900  EF84  F004         	goto	u1801
  6743   000904  EF86  F004         	goto	u1800
  6744   000908                     u1801:
  6745   000908  EF46  F004         	goto	l2697
  6746   00090C                     u1800:
  6747   00090C  501D               	movf	___fldiv@rem^0,w,c
  6748   00090E  101E               	iorwf	(___fldiv@rem+1)^0,w,c
  6749   000910  101F               	iorwf	(___fldiv@rem+2)^0,w,c
  6750   000912  1020               	iorwf	(___fldiv@rem+3)^0,w,c
  6751   000914  B4D8               	btfsc	status,2,c
  6752   000916  EF8F  F004         	goto	u1811
  6753   00091A  EF91  F004         	goto	u1810
  6754   00091E                     u1811:
  6755   00091E  EFA9  F004         	goto	l2723
  6756   000922                     u1810:
  6757   000922  8024               	bsf	___fldiv@grs^0,0,c
  6758   000924  EFA9  F004         	goto	l2723
  6759   000928                     l2717:
  6760   000928  90D8               	bcf	status,0,c
  6761   00092A  3611               	rlcf	___fldiv@b^0,f,c
  6762   00092C  3612               	rlcf	(___fldiv@b+1)^0,f,c
  6763   00092E  3613               	rlcf	(___fldiv@b+2)^0,f,c
  6764   000930  3614               	rlcf	(___fldiv@b+3)^0,f,c
  6765   000932  AE27               	btfss	(___fldiv@grs+3)^0,7,c
  6766   000934  EF9E  F004         	goto	u1821
  6767   000938  EFA0  F004         	goto	u1820
  6768   00093C                     u1821:
  6769   00093C  EFA1  F004         	goto	l1189
  6770   000940                     u1820:
  6771   000940  8011               	bsf	___fldiv@b^0,0,c
  6772   000942                     l1189:
  6773   000942  90D8               	bcf	status,0,c
  6774   000944  3624               	rlcf	___fldiv@grs^0,f,c
  6775   000946  3625               	rlcf	(___fldiv@grs+1)^0,f,c
  6776   000948  3626               	rlcf	(___fldiv@grs+2)^0,f,c
  6777   00094A  3627               	rlcf	(___fldiv@grs+3)^0,f,c
  6778   00094C  0622               	decf	___fldiv@new_exp^0,f,c
  6779   00094E  A0D8               	btfss	status,0,c
  6780   000950  0623               	decf	(___fldiv@new_exp+1)^0,f,c
  6781   000952                     l2723:
  6782   000952  AE13               	btfss	(___fldiv@b+2)^0,7,c
  6783   000954  EFAE  F004         	goto	u1831
  6784   000958  EFB0  F004         	goto	u1830
  6785   00095C                     u1831:
  6786   00095C  EF94  F004         	goto	l2717
  6787   000960                     u1830:
  6788   000960  0E00               	movlw	0
  6789   000962  6E29               	movwf	___fldiv@aexp^0,c
  6790   000964  AE27               	btfss	(___fldiv@grs+3)^0,7,c
  6791   000966  EFB7  F004         	goto	u1841
  6792   00096A  EFB9  F004         	goto	u1840
  6793   00096E                     u1841:
  6794   00096E  EFDD  F004         	goto	l1191
  6795   000972                     u1840:
  6796   000972  0EFF               	movlw	255
  6797   000974  1424               	andwf	___fldiv@grs^0,w,c
  6798   000976  6E19               	movwf	??___fldiv^0,c
  6799   000978  0EFF               	movlw	255
  6800   00097A  1425               	andwf	(___fldiv@grs+1)^0,w,c
  6801   00097C  6E1A               	movwf	(??___fldiv+1)^0,c
  6802   00097E  0EFF               	movlw	255
  6803   000980  1426               	andwf	(___fldiv@grs+2)^0,w,c
  6804   000982  6E1B               	movwf	(??___fldiv+2)^0,c
  6805   000984  0E7F               	movlw	127
  6806   000986  1427               	andwf	(___fldiv@grs+3)^0,w,c
  6807   000988  6E1C               	movwf	(??___fldiv+3)^0,c
  6808   00098A  5019               	movf	??___fldiv^0,w,c
  6809   00098C  101A               	iorwf	(??___fldiv+1)^0,w,c
  6810   00098E  101B               	iorwf	(??___fldiv+2)^0,w,c
  6811   000990  101C               	iorwf	(??___fldiv+3)^0,w,c
  6812   000992  B4D8               	btfsc	status,2,c
  6813   000994  EFCE  F004         	goto	u1851
  6814   000998  EFD0  F004         	goto	u1850
  6815   00099C                     u1851:
  6816   00099C  EFD4  F004         	goto	l1192
  6817   0009A0                     u1850:
  6818   0009A0                     l2731:
  6819   0009A0  0E01               	movlw	1
  6820   0009A2  6E29               	movwf	___fldiv@aexp^0,c
  6821   0009A4  EFDD  F004         	goto	l1191
  6822   0009A8                     l1192:
  6823   0009A8  A011               	btfss	___fldiv@b^0,0,c
  6824   0009AA  EFD9  F004         	goto	u1861
  6825   0009AE  EFDB  F004         	goto	u1860
  6826   0009B2                     u1861:
  6827   0009B2  EFDD  F004         	goto	l1191
  6828   0009B6                     u1860:
  6829   0009B6  EFD0  F004         	goto	l2731
  6830   0009BA                     l1191:
  6831   0009BA  5029               	movf	___fldiv@aexp^0,w,c
  6832   0009BC  B4D8               	btfsc	status,2,c
  6833   0009BE  EFE3  F004         	goto	u1871
  6834   0009C2  EFE5  F004         	goto	u1870
  6835   0009C6                     u1871:
  6836   0009C6  EF09  F005         	goto	l2743
  6837   0009CA                     u1870:
  6838   0009CA  0E01               	movlw	1
  6839   0009CC  2611               	addwf	___fldiv@b^0,f,c
  6840   0009CE  0E00               	movlw	0
  6841   0009D0  2212               	addwfc	(___fldiv@b+1)^0,f,c
  6842   0009D2  2213               	addwfc	(___fldiv@b+2)^0,f,c
  6843   0009D4  2214               	addwfc	(___fldiv@b+3)^0,f,c
  6844   0009D6  A014               	btfss	(___fldiv@b+3)^0,0,c
  6845   0009D8  EFF0  F004         	goto	u1881
  6846   0009DC  EFF2  F004         	goto	u1880
  6847   0009E0                     u1881:
  6848   0009E0  EF09  F005         	goto	l2743
  6849   0009E4                     u1880:
  6850   0009E4  C011  F019         	movff	___fldiv@b,??___fldiv
  6851   0009E8  C012  F01A         	movff	___fldiv@b+1,??___fldiv+1
  6852   0009EC  C013  F01B         	movff	___fldiv@b+2,??___fldiv+2
  6853   0009F0  C014  F01C         	movff	___fldiv@b+3,??___fldiv+3
  6854   0009F4  341C               	rlcf	(??___fldiv+3)^0,w,c
  6855   0009F6  321C               	rrcf	(??___fldiv+3)^0,f,c
  6856   0009F8  321B               	rrcf	(??___fldiv+2)^0,f,c
  6857   0009FA  321A               	rrcf	(??___fldiv+1)^0,f,c
  6858   0009FC  3219               	rrcf	??___fldiv^0,f,c
  6859   0009FE  C019  F011         	movff	??___fldiv,___fldiv@b
  6860   000A02  C01A  F012         	movff	??___fldiv+1,___fldiv@b+1
  6861   000A06  C01B  F013         	movff	??___fldiv+2,___fldiv@b+2
  6862   000A0A  C01C  F014         	movff	??___fldiv+3,___fldiv@b+3
  6863   000A0E  4A22               	infsnz	___fldiv@new_exp^0,f,c
  6864   000A10  2A23               	incf	(___fldiv@new_exp+1)^0,f,c
  6865   000A12                     l2743:
  6866   000A12  BE23               	btfsc	(___fldiv@new_exp+1)^0,7,c
  6867   000A14  EF14  F005         	goto	u1891
  6868   000A18  5023               	movf	(___fldiv@new_exp+1)^0,w,c
  6869   000A1A  E108               	bnz	u1890
  6870   000A1C  2822               	incf	___fldiv@new_exp^0,w,c
  6871   000A1E  A0D8               	btfss	status,0,c
  6872   000A20  EF14  F005         	goto	u1891
  6873   000A24  EF16  F005         	goto	u1890
  6874   000A28                     u1891:
  6875   000A28  EF21  F005         	goto	l2747
  6876   000A2C                     u1890:
  6877   000A2C  0E00               	movlw	0
  6878   000A2E  6E23               	movwf	(___fldiv@new_exp+1)^0,c
  6879   000A30  6822               	setf	___fldiv@new_exp^0,c
  6880   000A32  0E00               	movlw	0
  6881   000A34  6E11               	movwf	___fldiv@b^0,c
  6882   000A36  0E00               	movlw	0
  6883   000A38  6E12               	movwf	(___fldiv@b+1)^0,c
  6884   000A3A  0E00               	movlw	0
  6885   000A3C  6E13               	movwf	(___fldiv@b+2)^0,c
  6886   000A3E  0E00               	movlw	0
  6887   000A40  6E14               	movwf	(___fldiv@b+3)^0,c
  6888   000A42                     l2747:
  6889   000A42  BE23               	btfsc	(___fldiv@new_exp+1)^0,7,c
  6890   000A44  EF2E  F005         	goto	u1900
  6891   000A48  5023               	movf	(___fldiv@new_exp+1)^0,w,c
  6892   000A4A  E106               	bnz	u1901
  6893   000A4C  0422               	decf	___fldiv@new_exp^0,w,c
  6894   000A4E  B0D8               	btfsc	status,0,c
  6895   000A50  EF2C  F005         	goto	u1901
  6896   000A54  EF2E  F005         	goto	u1900
  6897   000A58                     u1901:
  6898   000A58  EF3C  F005         	goto	l2751
  6899   000A5C                     u1900:
  6900   000A5C  0E00               	movlw	0
  6901   000A5E  6E23               	movwf	(___fldiv@new_exp+1)^0,c
  6902   000A60  0E00               	movlw	0
  6903   000A62  6E22               	movwf	___fldiv@new_exp^0,c
  6904   000A64  0E00               	movlw	0
  6905   000A66  6E11               	movwf	___fldiv@b^0,c
  6906   000A68  0E00               	movlw	0
  6907   000A6A  6E12               	movwf	(___fldiv@b+1)^0,c
  6908   000A6C  0E00               	movlw	0
  6909   000A6E  6E13               	movwf	(___fldiv@b+2)^0,c
  6910   000A70  0E00               	movlw	0
  6911   000A72  6E14               	movwf	(___fldiv@b+3)^0,c
  6912   000A74  0E00               	movlw	0
  6913   000A76  6E21               	movwf	___fldiv@sign^0,c
  6914   000A78                     l2751:
  6915   000A78  C022  F028         	movff	___fldiv@new_exp,___fldiv@bexp
  6916   000A7C  A028               	btfss	___fldiv@bexp^0,0,c
  6917   000A7E  EF43  F005         	goto	u1911
  6918   000A82  EF45  F005         	goto	u1910
  6919   000A86                     u1911:
  6920   000A86  EF48  F005         	goto	l2757
  6921   000A8A                     u1910:
  6922   000A8A  8E13               	bsf	(___fldiv@b+2)^0,7,c
  6923   000A8C  EF49  F005         	goto	l2759
  6924   000A90                     l2757:
  6925   000A90  9E13               	bcf	(___fldiv@b+2)^0,7,c
  6926   000A92                     l2759:
  6927   000A92  90D8               	bcf	status,0,c
  6928   000A94  3028               	rrcf	___fldiv@bexp^0,w,c
  6929   000A96  6E14               	movwf	(___fldiv@b+3)^0,c
  6930   000A98  EFFF  F003         	goto	l2673
  6931   000A9C                     l1178:
  6932   000A9C  0012               	return		;funcret
  6933   000A9E                     __end_of___fldiv:
  6934                           	callstack 0
  6935                           
  6936 ;; *************** function _LowISR *****************
  6937 ;; Defined at:
  6938 ;;		line 23 in file "interrupts.c"
  6939 ;; Parameters:    Size  Location     Type
  6940 ;;		None
  6941 ;; Auto vars:     Size  Location     Type
  6942 ;;		None
  6943 ;; Return value:  Size  Location     Type
  6944 ;;                  1    wreg      void 
  6945 ;; Registers used:
  6946 ;;		status,2, status,0
  6947 ;; Tracked objects:
  6948 ;;		On entry : 0/0
  6949 ;;		On exit  : 0/0
  6950 ;;		Unchanged: 0/0
  6951 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6952 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6953 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6954 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6955 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6956 ;;Total ram usage:        2 bytes
  6957 ;; Hardware stack levels used: 1
  6958 ;; This function calls:
  6959 ;;		Nothing
  6960 ;; This function is called by:
  6961 ;;		Interrupt level 1
  6962 ;; This function uses a non-reentrant model
  6963 ;;
  6964                           
  6965                           	psect	intcodelo
  6966   000018                     __pintcodelo:
  6967                           	callstack 0
  6968   000018                     _LowISR:
  6969                           	callstack 22
  6970                           
  6971                           ;incstack = 0
  6972   000018  805D               	bsf	int$flags,0,c	;set compiler interrupt flag (level 1)
  6973   00001A  CFD8 F001          	movff	status,??_LowISR
  6974   00001E  CFE0 F002          	movff	bsr,??_LowISR+1
  6975   000022                     
  6976                           ;interrupts.c: 25:     if (PIR0bits.TMR0IF) {
  6977   000022  010E               	movlb	14	; () banked
  6978   000024  AB33               	btfss	51,5,b	;volatile
  6979   000026  EF17  F000         	goto	i1u115_21
  6980   00002A  EF19  F000         	goto	i1u115_20
  6981   00002E                     i1u115_21:
  6982   00002E  EF1C  F000         	goto	i1l428
  6983   000032                     i1u115_20:
  6984   000032                     
  6985                           ; BSR set to: 14
  6986                           ;interrupts.c: 26:         timer_val += 1;
  6987   000032  4A3F               	infsnz	_timer_val^0,f,c
  6988   000034  2A40               	incf	(_timer_val+1)^0,f,c
  6989   000036                     
  6990                           ; BSR set to: 14
  6991                           ;interrupts.c: 27:         PIR0bits.TMR0IF = 0;
  6992   000036  9B33               	bcf	51,5,b	;volatile
  6993   000038                     i1l428:
  6994                           
  6995                           ; BSR set to: 14
  6996   000038  C002  FFE0         	movff	??_LowISR+1,bsr
  6997   00003C  C001  FFD8         	movff	??_LowISR,status
  6998   000040  905D               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  6999   000042  0010               	retfie	
  7000   000044                     __end_of_LowISR:
  7001                           	callstack 0
  7002   000000                     
  7003                           	psect	rparam
  7004   000000                     
  7005                           	psect	temp
  7006   00005D                     btemp:
  7007                           	callstack 0
  7008   00005D                     	ds	1
  7009   000000                     int$flags	set	btemp
  7010   000000                     wtemp8	set	btemp+1
  7011   000000                     ttemp5	set	btemp+1
  7012   000000                     ttemp6	set	btemp+4
  7013   000000                     ttemp7	set	btemp+8
  7014                           
  7015                           	psect	idloc
  7016                           
  7017                           ;Config register IDLOC0 @ 0x200000
  7018                           ;	unspecified, using default values
  7019   200000                     	org	2097152
  7020   200000  0FFF               	dw	4095
  7021                           
  7022                           ;Config register IDLOC1 @ 0x200002
  7023                           ;	unspecified, using default values
  7024   200002                     	org	2097154
  7025   200002  0FFF               	dw	4095
  7026                           
  7027                           ;Config register IDLOC2 @ 0x200004
  7028                           ;	unspecified, using default values
  7029   200004                     	org	2097156
  7030   200004  0FFF               	dw	4095
  7031                           
  7032                           ;Config register IDLOC3 @ 0x200006
  7033                           ;	unspecified, using default values
  7034   200006                     	org	2097158
  7035   200006  0FFF               	dw	4095
  7036                           
  7037                           ;Config register IDLOC4 @ 0x200008
  7038                           ;	unspecified, using default values
  7039   200008                     	org	2097160
  7040   200008  0FFF               	dw	4095
  7041                           
  7042                           ;Config register IDLOC5 @ 0x20000A
  7043                           ;	unspecified, using default values
  7044   20000A                     	org	2097162
  7045   20000A  0FFF               	dw	4095
  7046                           
  7047                           ;Config register IDLOC6 @ 0x20000C
  7048                           ;	unspecified, using default values
  7049   20000C                     	org	2097164
  7050   20000C  0FFF               	dw	4095
  7051                           
  7052                           ;Config register IDLOC7 @ 0x20000E
  7053                           ;	unspecified, using default values
  7054   20000E                     	org	2097166
  7055   20000E  0FFF               	dw	4095
  7056                           
  7057                           	psect	config
  7058                           
  7059                           ;Config register CONFIG1L @ 0x300000
  7060                           ;	External Oscillator mode Selection bits
  7061                           ;	FEXTOSC = HS, HS (crystal oscillator) above 8 MHz; PFM set to high power
  7062                           ;	Power-up default value for COSC bits
  7063                           ;	RSTOSC = EXTOSC_4PLL, EXTOSC with 4x PLL, with EXTOSC operating per FEXTOSC bits
  7064   300000                     	org	3145728
  7065   300000  AA                 	db	170
  7066                           
  7067                           ;Config register CONFIG1H @ 0x300001
  7068                           ;	unspecified, using default values
  7069                           ;	Clock Out Enable bit
  7070                           ;	CLKOUTEN = 0x1, unprogrammed default
  7071                           ;	Clock Switch Enable bit
  7072                           ;	CSWEN = 0x1, unprogrammed default
  7073                           ;	Fail-Safe Clock Monitor Enable bit
  7074                           ;	FCMEN = 0x1, unprogrammed default
  7075   300001                     	org	3145729
  7076   300001  FF                 	db	255
  7077                           
  7078                           ;Config register CONFIG2L @ 0x300002
  7079                           ;	unspecified, using default values
  7080                           ;	Master Clear Enable bit
  7081                           ;	MCLRE = 0x1, unprogrammed default
  7082                           ;	Power-up Timer Enable bit
  7083                           ;	PWRTE = 0x1, unprogrammed default
  7084                           ;	Low-power BOR enable bit
  7085                           ;	LPBOREN = 0x1, unprogrammed default
  7086                           ;	Brown-out Reset Enable bits
  7087                           ;	BOREN = 0x3, unprogrammed default
  7088   300002                     	org	3145730
  7089   300002  FF                 	db	255
  7090                           
  7091                           ;Config register CONFIG2H @ 0x300003
  7092                           ;	unspecified, using default values
  7093                           ;	Brown Out Reset Voltage selection bits
  7094                           ;	BORV = 0x3, unprogrammed default
  7095                           ;	ZCD Disable bit
  7096                           ;	ZCD = 0x1, unprogrammed default
  7097                           ;	PPSLOCK bit One-Way Set Enable bit
  7098                           ;	PPS1WAY = 0x1, unprogrammed default
  7099                           ;	Stack Full/Underflow Reset Enable bit
  7100                           ;	STVREN = 0x1, unprogrammed default
  7101                           ;	Debugger Enable bit
  7102                           ;	DEBUG = 0x1, unprogrammed default
  7103                           ;	Extended Instruction Set Enable bit
  7104                           ;	XINST = 0x1, unprogrammed default
  7105   300003                     	org	3145731
  7106   300003  FF                 	db	255
  7107                           
  7108                           ;Config register CONFIG3L @ 0x300004
  7109                           ;	WDT Period Select bits
  7110                           ;	WDTCPS = WDTCPS_31, Divider ratio 1:65536; software control of WDTPS
  7111                           ;	WDT operating mode
  7112                           ;	WDTE = OFF, WDT Disabled
  7113   300004                     	org	3145732
  7114   300004  9F                 	db	159
  7115                           
  7116                           ;Config register CONFIG3H @ 0x300005
  7117                           ;	unspecified, using default values
  7118                           ;	WDT Window Select bits
  7119                           ;	WDTCWS = 0x7, unprogrammed default
  7120                           ;	WDT input clock selector
  7121                           ;	WDTCCS = 0x7, unprogrammed default
  7122   300005                     	org	3145733
  7123   300005  FF                 	db	255
  7124                           
  7125                           ;Config register CONFIG4L @ 0x300006
  7126                           ;	unspecified, using default values
  7127                           ;	Write Protection Block 0
  7128                           ;	WRT0 = 0x1, unprogrammed default
  7129                           ;	Write Protection Block 1
  7130                           ;	WRT1 = 0x1, unprogrammed default
  7131                           ;	Write Protection Block 2
  7132                           ;	WRT2 = 0x1, unprogrammed default
  7133                           ;	Write Protection Block 3
  7134                           ;	WRT3 = 0x1, unprogrammed default
  7135                           ;	Write Protection Block 3
  7136                           ;	WRT4 = 0x1, unprogrammed default
  7137                           ;	Write Protection Block 3
  7138                           ;	WRT5 = 0x1, unprogrammed default
  7139                           ;	Write Protection Block 3
  7140                           ;	WRT6 = 0x1, unprogrammed default
  7141                           ;	Write Protection Block 3
  7142                           ;	WRT7 = 0x1, unprogrammed default
  7143   300006                     	org	3145734
  7144   300006  FF                 	db	255
  7145                           
  7146                           ;Config register CONFIG4H @ 0x300007
  7147                           ;	unspecified, using default values
  7148                           ;	Configuration Register Write Protection bit
  7149                           ;	WRTC = 0x1, unprogrammed default
  7150                           ;	Boot Block Write Protection bit
  7151                           ;	WRTB = 0x1, unprogrammed default
  7152                           ;	Data EEPROM Write Protection bit
  7153                           ;	WRTD = 0x1, unprogrammed default
  7154                           ;	Scanner Enable bit
  7155                           ;	SCANE = 0x1, unprogrammed default
  7156                           ;	Low Voltage Programming Enable bit
  7157                           ;	LVP = 0x1, unprogrammed default
  7158   300007                     	org	3145735
  7159   300007  FF                 	db	255
  7160                           
  7161                           ;Config register CONFIG5L @ 0x300008
  7162                           ;	unspecified, using default values
  7163                           ;	UserNVM Program Memory Code Protection bit
  7164                           ;	CP = 0x1, unprogrammed default
  7165                           ;	DataNVM Memory Code Protection bit
  7166                           ;	CPD = 0x1, unprogrammed default
  7167   300008                     	org	3145736
  7168   300008  FF                 	db	255
  7169                           
  7170                           ;Config register CONFIG5H @ 0x300009
  7171                           ;	unspecified, using default values
  7172   300009                     	org	3145737
  7173   300009  FF                 	db	255
  7174                           
  7175                           ;Config register CONFIG6L @ 0x30000A
  7176                           ;	unspecified, using default values
  7177                           ;	Table Read Protection Block 0
  7178                           ;	EBTR0 = 0x1, unprogrammed default
  7179                           ;	Table Read Protection Block 1
  7180                           ;	EBTR1 = 0x1, unprogrammed default
  7181                           ;	Table Read Protection Block 2
  7182                           ;	EBTR2 = 0x1, unprogrammed default
  7183                           ;	Table Read Protection Block 3
  7184                           ;	EBTR3 = 0x1, unprogrammed default
  7185                           ;	Table Read Protection Block 4
  7186                           ;	EBTR4 = 0x1, unprogrammed default
  7187                           ;	Table Read Protection Block 5
  7188                           ;	EBTR5 = 0x1, unprogrammed default
  7189                           ;	Table Read Protection Block 6
  7190                           ;	EBTR6 = 0x1, unprogrammed default
  7191                           ;	Table Read Protection Block 7
  7192                           ;	EBTR7 = 0x1, unprogrammed default
  7193   30000A                     	org	3145738
  7194   30000A  FF                 	db	255
  7195                           
  7196                           ;Config register CONFIG6H @ 0x30000B
  7197                           ;	unspecified, using default values
  7198                           ;	Boot Block Table Read Protection bit
  7199                           ;	EBTRB = 0x1, unprogrammed default
  7200   30000B                     	org	3145739
  7201   30000B  FF                 	db	255
  7202                           tosu	equ	0xFFF
  7203                           tosh	equ	0xFFE
  7204                           tosl	equ	0xFFD
  7205                           stkptr	equ	0xFFC
  7206                           pclatu	equ	0xFFB
  7207                           pclath	equ	0xFFA
  7208                           pcl	equ	0xFF9
  7209                           tblptru	equ	0xFF8
  7210                           tblptrh	equ	0xFF7
  7211                           tblptrl	equ	0xFF6
  7212                           tablat	equ	0xFF5
  7213                           prodh	equ	0xFF4
  7214                           prodl	equ	0xFF3
  7215                           indf0	equ	0xFEF
  7216                           postinc0	equ	0xFEE
  7217                           postdec0	equ	0xFED
  7218                           preinc0	equ	0xFEC
  7219                           plusw0	equ	0xFEB
  7220                           fsr0h	equ	0xFEA
  7221                           fsr0l	equ	0xFE9
  7222                           wreg	equ	0xFE8
  7223                           indf1	equ	0xFE7
  7224                           postinc1	equ	0xFE6
  7225                           postdec1	equ	0xFE5
  7226                           preinc1	equ	0xFE4
  7227                           plusw1	equ	0xFE3
  7228                           fsr1h	equ	0xFE2
  7229                           fsr1l	equ	0xFE1
  7230                           bsr	equ	0xFE0
  7231                           indf2	equ	0xFDF
  7232                           postinc2	equ	0xFDE
  7233                           postdec2	equ	0xFDD
  7234                           preinc2	equ	0xFDC
  7235                           plusw2	equ	0xFDB
  7236                           fsr2h	equ	0xFDA
  7237                           fsr2l	equ	0xFD9
  7238                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    0
    Data        8
    BSS         122
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     62      92
    BANK0           160      2     102
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          234      0       0

Pointer List with Targets:

    motor_init@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> motorR(BANK0[9]), 

    motor_init@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> motorL(BANK0[9]), 

    buggy_color_response@c	PTR struct colors size(2) Largest target is 20
		 -> color(COMRAM[20]), 

    READcolor@c	PTR struct colors size(2) Largest target is 20
		 -> color(COMRAM[20]), 

    movement_return@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> motorR(BANK0[9]), 

    movement_return@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> motorL(BANK0[9]), 

    movement@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> motorR(BANK0[9]), 

    movement@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> motorL(BANK0[9]), 

    reverse_pink@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> motorR(BANK0[9]), 

    reverse_pink@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> motorL(BANK0[9]), 

    reverse_yellow@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> motorR(BANK0[9]), 

    reverse_yellow@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> motorL(BANK0[9]), 

    space@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllhll[1]), CCPR2H(BITBIGSFRhhhllll[1]), 

    space@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllhll[1]), CCPR1H(BITBIGSFRhhhllll[1]), 

    space@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllhll[1]), CCPR2H(BITBIGSFRhhhllll[1]), 

    space@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllhll[1]), CCPR1H(BITBIGSFRhhhllll[1]), 

    space@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> motorR(BANK0[9]), 

    space@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> motorL(BANK0[9]), 

    right_45@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllhll[1]), CCPR2H(BITBIGSFRhhhllll[1]), 

    right_45@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllhll[1]), CCPR1H(BITBIGSFRhhhllll[1]), 

    right_45@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllhll[1]), CCPR2H(BITBIGSFRhhhllll[1]), 

    right_45@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllhll[1]), CCPR1H(BITBIGSFRhhhllll[1]), 

    right_45@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> motorR(BANK0[9]), 

    right_45@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> motorL(BANK0[9]), 

    left_45@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllhll[1]), CCPR2H(BITBIGSFRhhhllll[1]), 

    left_45@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllhll[1]), CCPR1H(BITBIGSFRhhhllll[1]), 

    left_45@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllhll[1]), CCPR2H(BITBIGSFRhhhllll[1]), 

    left_45@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllhll[1]), CCPR1H(BITBIGSFRhhhllll[1]), 

    left_45@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> motorR(BANK0[9]), 

    left_45@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> motorL(BANK0[9]), 

    stop@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllhll[1]), CCPR2H(BITBIGSFRhhhllll[1]), 

    stop@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllhll[1]), CCPR1H(BITBIGSFRhhhllll[1]), 

    stop@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> motorR(BANK0[9]), 

    stop@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllhll[1]), CCPR2H(BITBIGSFRhhhllll[1]), 

    stop@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllhll[1]), CCPR1H(BITBIGSFRhhhllll[1]), 

    stop@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> motorL(BANK0[9]), 

    reverse@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllhll[1]), CCPR2H(BITBIGSFRhhhllll[1]), 

    reverse@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllhll[1]), CCPR1H(BITBIGSFRhhhllll[1]), 

    reverse@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllhll[1]), CCPR2H(BITBIGSFRhhhllll[1]), 

    reverse@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllhll[1]), CCPR1H(BITBIGSFRhhhllll[1]), 

    reverse@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> motorR(BANK0[9]), 

    reverse@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> motorL(BANK0[9]), 

    forward@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllhll[1]), CCPR2H(BITBIGSFRhhhllll[1]), 

    forward@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllhll[1]), CCPR1H(BITBIGSFRhhhllll[1]), 

    forward@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllhll[1]), CCPR2H(BITBIGSFRhhhllll[1]), 

    forward@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllhll[1]), CCPR1H(BITBIGSFRhhhllll[1]), 

    forward@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> motorR(BANK0[9]), 

    forward@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> motorL(BANK0[9]), 

    setMotorPWM@m.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllhll[1]), CCPR2H(BITBIGSFRhhhllll[1]), 

    setMotorPWM@m.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllhll[1]), CCPR1H(BITBIGSFRhhhllll[1]), 

    setMotorPWM@m	PTR struct DC_motor size(2) Largest target is 11
		 -> motorR(BANK0[9]), motorL(BANK0[9]), 

    return_home@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> motorR(BANK0[9]), 

    return_home@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> motorL(BANK0[9]), 

    buggy_color_response@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> motorR(BANK0[9]), 

    buggy_color_response@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> motorL(BANK0[9]), 

    motorR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllhll[1]), CCPR2H(BITBIGSFRhhhllll[1]), 

    motorR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllhll[1]), CCPR1H(BITBIGSFRhhhllll[1]), 

    S236DC_motor$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllhll[1]), CCPR2H(BITBIGSFRhhhllll[1]), 

    motorL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllhll[1]), CCPR2H(BITBIGSFRhhhllll[1]), 

    S236DC_motor$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllhll[1]), CCPR1H(BITBIGSFRhhhllll[1]), 

    motorL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllhll[1]), CCPR1H(BITBIGSFRhhhllll[1]), 


Critical Paths under _main in COMRAM

    _main->_buggy_color_response
    _complete_initialisation->_color_click_init
    _color_click_init->_color_writetoaddr
    _color_writetoaddr->_I2C_2_Master_Write
    _buggy_color_response->_return_home
    _return_home->_movement_return
    _movement_return->_reverse_pink
    _movement_return->_reverse_yellow
    _reverse_yellow->_left_45
    _reverse_pink->_right_45
    _forward->_stop
    _movement->_left_45
    _movement->_right_45
    _space->_stop
    _right_45->_stop
    _reverse->_stop
    _left_45->_stop
    _stop->_setMotorPWM
    _setMotorPWM->___lwdiv
    ___lwdiv->___wmul
    _READcolor->___fldiv
    _color_read_Red->_I2C_2_Master_Read
    _color_read_Green->_I2C_2_Master_Read
    _color_read_Clear->_I2C_2_Master_Read
    _color_read_Blue->_I2C_2_Master_Read
    _I2C_2_Master_Write->_I2C_2_Master_Idle
    _I2C_2_Master_Stop->_I2C_2_Master_Idle
    _I2C_2_Master_Start->_I2C_2_Master_Idle
    _I2C_2_Master_RepStart->_I2C_2_Master_Idle
    _I2C_2_Master_Read->_I2C_2_Master_Idle
    ___fldiv->___xxtofl

Critical Paths under _LowISR in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _LowISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _LowISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _LowISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _LowISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _LowISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _LowISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _LowISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _LowISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _LowISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _LowISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _LowISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _LowISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _LowISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _LowISR in BANK13

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0  342174
                                              0 BANK0      2     2      0
               _buggy_color_response
            _complete_initialisation
                        _timer_reset
 ---------------------------------------------------------------------------------
 (1) _complete_initialisation                              0     0      0     544
                           _ADC_init
                  _I2C_2_Master_Init
                        _Timer0_init
                     _buggyLEDs_init
                   _color_click_init
                    _initDCmotorsPWM
                         _initUSART4
                    _interrupts_init
                         _motor_init
                         _ports_init
 ---------------------------------------------------------------------------------
 (2) _ports_init                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _motor_init                                           4     0      4     152
                                              2 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (2) _interrupts_init                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _initUSART4                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _initDCmotorsPWM                                      2     0      2      98
                                              2 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _color_click_init                                     1     1      0     294
                                              6 COMRAM     1     1      0
                  _I2C_2_Master_Init
                  _color_writetoaddr
 ---------------------------------------------------------------------------------
 (3) _color_writetoaddr                                    2     1      1     294
                                              4 COMRAM     2     1      1
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Init                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _buggyLEDs_init                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Timer0_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _buggy_color_response                                 8     2      6  341630
                                             54 COMRAM     8     2      6
                          _READcolor
                             ___flge
                            _forward
                           _movement
                    _movement_return
                        _return_home
                              _space
                               _stop
                        _timer_reset
 ---------------------------------------------------------------------------------
 (1) _timer_reset                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _return_home                                          6     2      4  137000
                                             48 COMRAM     6     2      4
                      _delay_ms_func
                            _forward
                    _movement_return
                            _reverse
                               _stop
 ---------------------------------------------------------------------------------
 (3) _movement_return                                      5     0      5  105445
                                             43 COMRAM     5     0      5
                            _left_45
                       _reverse_pink
                     _reverse_yellow
                           _right_45
                               _stop
 ---------------------------------------------------------------------------------
 (4) _reverse_yellow                                       6     2      4   34045
                                             37 COMRAM     6     2      4
                       _custom_delay
                            _left_45
                            _reverse
                               _stop
 ---------------------------------------------------------------------------------
 (4) _reverse_pink                                         6     2      4   34653
                                             37 COMRAM     6     2      4
                       _custom_delay
                            _reverse
                           _right_45
                               _stop
 ---------------------------------------------------------------------------------
 (3) _forward                                              5     1      4   11290
                                             27 COMRAM     5     1      4
                        _setMotorPWM
                               _stop
 ---------------------------------------------------------------------------------
 (3) _delay_ms_func                                        6     4      2     122
                                              2 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (2) _movement                                             7     2      5   61625
                                             37 COMRAM     7     2      5
                       _custom_delay
                            _left_45
                            _reverse
                           _right_45
                              _space
                               _stop
 ---------------------------------------------------------------------------------
 (2) _space                                                6     2      4   11138
                                             27 COMRAM     6     2      4
                        _setMotorPWM
                               _stop
 ---------------------------------------------------------------------------------
 (4) _right_45                                            10     3      7   14140
                                             27 COMRAM    10     3      7
                       _custom_delay
                        _setMotorPWM
                               _stop
 ---------------------------------------------------------------------------------
 (3) _reverse                                              5     1      4   11746
                                             27 COMRAM     5     1      4
                        _setMotorPWM
                               _stop
 ---------------------------------------------------------------------------------
 (5) _left_45                                             10     3      7   13532
                                             27 COMRAM    10     3      7
                       _custom_delay
                        _setMotorPWM
                               _stop
 ---------------------------------------------------------------------------------
 (2) _stop                                                 6     2      4    7937
                                             21 COMRAM     6     2      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (3) _setMotorPWM                                          6     4      2    2589
                                             15 COMRAM     6     4      2
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     355
                                              2 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              7     3      4     358
                                              8 COMRAM     7     3      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (5) _custom_delay                                         5     3      2     502
                                              2 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (2) ___flge                                              12     4      8    3222
                                              2 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (2) _READcolor                                            2     0      2    3085
                                             41 COMRAM     2     0      2
                            ___fldiv
                           ___xxtofl
                    _color_read_Blue
                   _color_read_Clear
                   _color_read_Green
                     _color_read_Red
 ---------------------------------------------------------------------------------
 (3) _color_read_Red                                       7     5      2     113
                                              6 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (3) _color_read_Green                                     7     5      2     113
                                              6 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (3) _color_read_Clear                                     7     5      2     113
                                              6 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (3) _color_read_Blue                                      7     5      2     113
                                              6 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (4) _I2C_2_Master_Write                                   1     1      0      22
                                              3 COMRAM     1     1      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (4) _I2C_2_Master_Stop                                    0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (4) _I2C_2_Master_Start                                   0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (4) _I2C_2_Master_RepStart                                0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (4) _I2C_2_Master_Read                                    3     3      0      45
                                              3 COMRAM     3     3      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (5) _I2C_2_Master_Idle                                    1     1      0       0
                                              2 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) ___xxtofl                                            14    10      4     778
                                              2 COMRAM    14    10      4
 ---------------------------------------------------------------------------------
 (3) ___fldiv                                             25    17      8    1703
                                             16 COMRAM    25    17      8
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _LowISR                                               2     2      0       0
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _buggy_color_response
     _READcolor
       ___fldiv
         ___xxtofl (ARG)
       ___xxtofl
       _color_read_Blue
         _I2C_2_Master_Read
           _I2C_2_Master_Idle
         _I2C_2_Master_RepStart
           _I2C_2_Master_Idle
         _I2C_2_Master_Start
           _I2C_2_Master_Idle
         _I2C_2_Master_Stop
           _I2C_2_Master_Idle
         _I2C_2_Master_Write
           _I2C_2_Master_Idle
       _color_read_Clear
         _I2C_2_Master_Read
         _I2C_2_Master_RepStart
         _I2C_2_Master_Start
         _I2C_2_Master_Stop
         _I2C_2_Master_Write
       _color_read_Green
         _I2C_2_Master_Read
         _I2C_2_Master_RepStart
         _I2C_2_Master_Start
         _I2C_2_Master_Stop
         _I2C_2_Master_Write
       _color_read_Red
         _I2C_2_Master_Read
         _I2C_2_Master_RepStart
         _I2C_2_Master_Start
         _I2C_2_Master_Stop
         _I2C_2_Master_Write
     ___flge
     _forward
       _setMotorPWM
         ___lwdiv
           ___wmul (ARG)
         ___wmul
       _stop
         _setMotorPWM
     _movement
       _custom_delay
       _left_45
         _custom_delay
         _setMotorPWM
         _stop
       _reverse
         _setMotorPWM
         _stop
       _right_45
         _custom_delay
         _setMotorPWM
         _stop
       _space
         _setMotorPWM
         _stop
       _stop
     _movement_return
       _left_45
       _reverse_pink
         _custom_delay
         _reverse
         _right_45
         _stop
       _reverse_yellow
         _custom_delay
         _left_45
         _reverse
         _stop
       _right_45
       _stop
     _return_home
       _delay_ms_func
       _forward
       _movement_return
       _reverse
       _stop
     _space
     _stop
     _timer_reset
   _complete_initialisation
     _ADC_init
     _I2C_2_Master_Init
     _Timer0_init
     _buggyLEDs_init
     _color_click_init
       _I2C_2_Master_Init
       _color_writetoaddr
         _I2C_2_Master_Start
         _I2C_2_Master_Stop
         _I2C_2_Master_Write
     _initDCmotorsPWM
     _initUSART4
     _interrupts_init
     _motor_init
     _ports_init
   _timer_reset

 _LowISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             DE9      0       0      66        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK13           EA      0       0      30        0.0%
BANK13              EA      0       0      31        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      2      66       5       63.7%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     3E      5C       1       97.9%
BITBIGSFRhlllhl     37      0       0      47        0.0%
BITBIGSFRhlllhh     31      0       0      45        0.0%
BITBIGSFRlllhll     2A      0       0      58        0.0%
BITBIGSFRlllll      26      0       0      64        0.0%
BITBIGSFRllhh       20      0       0      50        0.0%
BITBIGSFRlllhhh     1E      0       0      52        0.0%
BITBIGSFRhhhhlh     1B      0       0      33        0.0%
BITBIGSFRhhhlll     17      0       0      38        0.0%
BITBIGSFRhlllhh     14      0       0      42        0.0%
BITBIGSFRhhhhll     13      0       0      34        0.0%
BITBIGSFRlllhhh     11      0       0      53        0.0%
BITBIGSFRhhhlhh      E      0       0      35        0.0%
BITBIGSFRhhhhh       D      0       0      32        0.0%
BITBIGSFRllhl        C      0       0      51        0.0%
BITBIGSFRlllhll      9      0       0      61        0.0%
BITBIGSFRlllhll      9      0       0      60        0.0%
BITBIGSFRhlllll      8      0       0      48        0.0%
BITBIGSFRhlllhh      6      0       0      44        0.0%
BITBIGSFRllllh       6      0       0      63        0.0%
BITBIGSFRlllhlh      6      0       0      57        0.0%
BITBIGSFRlllhlh      5      0       0      56        0.0%
BITBIGSFRhhhlll      5      0       0      39        0.0%
BITBIGSFRhlllhh      3      0       0      43        0.0%
BITBIGSFRlllhll      3      0       0      59        0.0%
BITBIGSFRlllhhl      3      0       0      55        0.0%
BITBIGSFRhlllhl      2      0       0      46        0.0%
BITBIGSFRhhhllh      2      0       0      37        0.0%
BITBIGSFRhhhlhl      1      0       0      36        0.0%
BITBIGSFRlllhhh      1      0       0      54        0.0%
BITBIGSFRhllhl       1      0       0      41        0.0%
BITBIGSFRhlh         1      0       0      40        0.0%
BITBIGSFRlllhll      1      0       0      62        0.0%
BITBIGSFRlh          1      0       0      49        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      C2      65        0.0%
DATA                 0      0      C2       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.40 build 20220703182018 
Symbol Table                                                                                   Thu Mar 16 03:18:19 2023

                 _color_read_Red 1E9A                     ___fldiv@aexp 0029  
                   ___fldiv@bexp 0028                     ___fldiv@sign 0021  
                _color_read_Blue 1F8A                               l30 2188  
                             l33 21AE                               l42 22BC  
                             l27 2186                               l36 22C6  
                             l45 22B2                               l39 22D0  
                             l48 20A8                               bsr 000FE0  
            ___wmul@multiplicand 0005                 custom_delay@temp 0003  
               _color_read_Clear 1F3A                 _color_read_Green 1EEA  
        _complete_initialisation 2026                delay_ms_func@time 0003  
                            l121 1EE8                              l130 1F88  
                            l115 215C                              l124 1FD8  
                            l300 1B18                              l133 14EA  
                            l118 2234                              l127 1F38  
                            l160 20E8                              l400 1DD6  
                            l305 1BC8                              l154 1244  
                            l146 0702                              l316 173E  
                            l404 1DF2                              l157 20D2  
                            l341 1D5C                              l422 22A6  
                            l327 1614                              l335 1944  
                            l351 0D76                              l281 13B0  
                            l361 10D4                              l441 2254  
                            l185 2214                              l409 1E3C  
                            l338 1CDA                              l274 1C58  
                            l515 210A                              l291 1A2C  
                            l292 1A2E                              l444 2296  
                            l284 2024                              l518 2128  
                            l295 1AE6                              l287 19FC  
                            l472 2284                              l299 1B16  
                            l572 2066                              l469 21F4  
                            l587 226E                              l596 21D4  
                            l861 17FC                              l866 1842  
                            wreg 000FE8                    return_home@mL 0031  
                  return_home@mR 0033                             l3001 17CA  
                           l1251 0DCE                             l3003 17DC  
                           l1180 08FC                             l3005 17EA  
                           l2301 12CA                             l3101 0514  
                           l3021 007C                             l3013 0048  
                           l1254 0F2A                             l1094 1DD0  
                           l1191 09BA                             l1183 08C0  
                           l3007 183A                             l1087 1DC8  
                           l2303 12CE                             l2311 1B1A  
                           l3111 05BC                             l3103 0546  
                           l3031 00E0                             l3023 0090  
                           l3015 0054                             l1192 09A8  
                           l1265 0EC2                             l3009 1840  
                           l2305 1310                             l2321 1B44  
                           l2313 1B3A                             l2401 16DA  
                           l3121 062E                             l3105 0578  
                           l3113 05D4                             l3041 019E  
                           l3033 00F8                             l3025 00A8  
                           l3017 006A                             l1178 0A9C  
                           l1258 0E66                             l2307 132C  
                           l2331 1B88                             l2323 1B5C  
                           l2315 1B3C                             l2411 172A  
                           l2403 16F2                             l3131 0660  
                           l3123 0630                             l3115 0606  
                           l3107 05AA                             l3051 022C  
                           l3043 01A0                             l3035 012A  
                           l3027 00BC                             l3019 007A  
                           l1189 0942                             l2341 20EA  
                           l2309 1370                             l2333 1B96  
                           l2325 1B68                             l2405 16FE  
                           l2413 172C                             l2421 1520  
                           l2501 1D3C                             l3141 06CC  
                           l3133 0674                             l3125 0632  
                           l3117 061C                             l3109 05BA  
                           l3061 02DC                             l3053 022E  
                           l3037 015C                             l3045 01B8  
                           l3029 00D4                             l2343 20F6  
                           l2335 1BAE                             l2327 1B74  
                           l2407 1712                             l2351 1A30  
                           l2431 1566                             l2423 1522  
                           l2415 14EC                             l2503 1D48  
                           l3135 068C                             l3127 0634  
                           l3119 062C                             l3143 06E6  
                           l3071 036A                             l3063 02EC  
                           l3047 01EA                             l3055 0246  
                           l3039 018E                             l2511 2170  
                           l3151 2036                             l2521 1EE0  
                           l2345 2106                             l2281 1D88  
                           l2273 1D5E                             l2337 1BBA  
                           l2329 1B7C                             l2409 1728  
                           l2361 1A9A                             l2353 1A44  
                           l2441 15B0                             l2433 1572  
                           l2425 152A                             l2417 1500  
                           l2601 0F82                             l3137 06A0  
                           l3129 0648                             l3081 03F8  
                           l3073 037A                             l3065 02EE  
                           l3057 0278                             l3049 021C  
                           l3145 06EE                             l2513 2172  
                           l2505 215E                             l3161 205E  
                           l3153 203A                             l3241 1E18  
                           l2347 2188                             l2531 1EEA  
                           l2291 1DBC                             l2283 1D96  
                           l2275 1D66                             l2267 21B0  
                           l2339 1BC6                             l2371 1ADE  
                           l2363 1AA4                             l2355 1A54  
                           l2451 1600                             l2443 15C8  
                           l2435 157E                             l2427 1542  
                           l2419 1510                             l2611 1042  
                           l2603 0FB6                             l3139 06B4  
                           l3091 0486                             l3083 042A  
                           l3075 037C                             l3059 02AA  
                           l3067 0306                             l2515 2174  
                           l2507 2168                             l3163 2062  
                           l3155 204E                             l3147 2026  
                           l3243 1E1C                             l3235 1DD2  
                           l2701 08B0                             l2349 2198  
                           l2461 22CC                             l2525 1F8A  
                           l2533 1F30                             l2293 1DC2  
                           l2285 1D9C                             l2277 1D78  
                           l2269 21CC                             l2381 164A  
                           l2373 1AFE                             l2365 1ABC  
                           l2357 1A64                             l2445 15D4  
                           l2437 158A                             l2429 154E  
                           l2453 1602                             l2621 10C0  
                           l2613 1054                             l2605 0FC8  
                           l3093 04B8                             l3085 043A  
                           l3069 0338                             l3077 0394  
                           l2509 216E                             l2517 2218  
                           l3157 2056                             l3149 2032  
                           l3237 1DE4                             l2711 08FA  
                           l2703 08BE                             l2631 0710  
                           l2471 206A                             l2455 22BE  
                           l2463 22B4                             l2527 1FD0  
                           l2519 1E9A                             l2287 1DB2  
                           l2279 1D80                             l2295 1246  
                           l2391 1690                             l2383 164C  
                           l2375 1616                             l2367 1AC6  
                           l2359 1A82                             l2447 15E8  
                           l2439 1598                             l2623 20AA  
                           l2551 1998                             l2543 1946  
                           l2615 1088                             l2607 0FFC  
                           l3095 04EA                             l3087 043C  
                           l3079 03C6                             l3159 205A  
                           l3239 1E00                             l2721 0940  
                           l2713 090C                             l2705 08CA  
                           l2641 0750                             l2633 071E  
                           l2801 0ED6                             l2481 20A6  
                           l2473 206E                             l2457 22C2  
                           l2465 22B8                             l2537 1F3A  
                           l2289 1DBA                             l2297 1262  
                           l2393 169C                             l2385 1654  
                           l2377 162A                             l2369 1AD2  
                           l2449 15FE                             l2625 20B6  
                           l2561 19E8                             l2553 19B0  
                           l2545 195A                             l2617 109A  
                           l2609 100E                             l3097 04FA  
                           l3089 0454                             l2731 09A0  
                           l2715 0922                             l2723 0952  
                           l2707 08E8                             l2651 0776  
                           l2643 0752                             l2635 0720  
                           l2803 0EFA                             l2475 2076  
                           l2459 22C8                             l2467 22AA  
                           l2539 1F80                             l2299 12B6  
                           l2395 16A8                             l2387 166C  
                           l2379 163A                             l2571 185A  
                           l2627 20CE                             l2563 19F4  
                           l2555 19BA                             l2547 196A  
                           l2491 1CBA                             l2619 10AE  
                           l3099 04FC                             l2741 0A0E  
                           l2725 0960                             l2717 0928  
                           l2709 08EA                             l2661 07B6  
                           l2653 0784                             l2637 0730  
                           l2645 075A                             l2629 0704  
                           l2805 0F0A                             l2477 207E  
                           l2469 22AE                             l2397 16B4  
                           l2389 1678                             l2581 18C6  
                           l2573 186A                             l2565 1A14  
                           l2557 19D2                             l2549 197A  
                           l2493 1CC6                             l2485 1C5A  
                           l2901 11A0                             l2821 2152  
                           l2813 212A                             l2751 0A78  
                           l2735 09CA                             l2743 0A12  
                           l2727 0964                             l2719 0932  
                           l2671 07F6                             l2663 07B8  
                           l2655 0786                             l2647 076A  
                           l2639 0740                             l2807 0F18  
                           l2479 20A4                             l2823 13B2  
                           l2399 16C2                             l2591 192A  
                           l2575 1896                             l2583 18CE  
                           l2567 1844                             l2831 0AF6  
                           l2559 19DC                             l2495 1CDC  
                           l2487 1C8E                             l2911 120C  
                           l2903 11B4                             l2815 212E  
                           l2753 0A7C                             l2745 0A2C  
                           l2737 09D6                             l2729 0972  
                           l2681 0826                             l2673 07FE  
                           l2657 0796                             l2665 07C0  
                           l2649 0770                             l2809 0F1A  
                           l2593 1942                             l2585 18E6  
                           l2577 18AE                             l2569 1858  
                           l2841 0B92                             l2833 0B06  
                           l2825 0A9E                             l2497 1D10  
                           l2489 1CA6                             l2905 11CC  
                           l2913 1224                             l2817 2138  
                           l2921 2200                             l2755 0A8A  
                           l2747 0A42                             l2739 09E4  
                           l2691 0864                             l2683 0826  
                           l2675 0802                             l2667 07D0  
                           l2659 07A6                             l2771 0D98  
                           l2587 18FE                             l2579 18BA  
                           l2851 0C0C                             l2843 0BC6  
                           l2835 0B3A                             l2827 0AB2  
                           l2499 1D28                             l2595 0F2C  
                           l2915 1234                             l2907 11E0  
                           l2819 2148                             l2931 2212  
                           l2923 2202                             l2757 0A90  
                           l2749 0A5C                             l2693 0874  
                           l2669 07E6                             l2781 0E10  
                           l2773 0DDE                             l2589 1916  
                           l2861 0C7E                             l2853 0C24  
                           l2845 0BD8                             l2837 0B4C  
                           l2829 0ACA                             l2597 0F3C  
                           l2909 11F8                             l2917 2286  
                           l2941 1C28                             l2933 1BCA  
                           l2925 2204                             l2759 0A92  
                           l2695 0884                             l2687 083A  
                           l2679 0816                             l2791 0E98  
                           l2783 0E1C                             l2775 0DF4  
                           l2767 0D7A                             l2863 0C8A  
                           l2871 0CEA                             l2855 0C44  
                           l2847 0BEC                             l2839 0B80  
                           l2599 0F70                             l2951 1C4A  
                           l2943 1C32                             l2935 1BDA  
                           l2927 220E                             l2919 21F6  
                           l2697 088C                             l2689 0854  
                           l2793 0EA4                             l2785 0E4E  
                           l2769 0D8A                             l2873 0CFC  
                           l2865 0C9E                             l2849 0BF8  
                           l2857 0C58                             l2881 10DA  
                           l2953 1C4C                             l2945 1C34  
                           l2937 1C00                             l2929 2210  
                           l2961 1FF0                             l2699 089C  
                           l2795 0EB2                             l2787 0E50  
                           l2779 0E08                             l2875 0D30  
                           l2867 0CB6                             l2859 0C6A  
                           l2891 1144                             l2883 10FE  
                           l2971 223E                             l2955 1C56  
                           l2947 1C3E                             l2939 1C04  
                           l2963 200C                             l2797 0ED0  
                           l2789 0E5C                             l2877 0D42  
                           l2869 0CD6                             l2893 1158  
                           l2885 1100                             l2981 2256  
                           l2973 2248                             l2949 1C40  
                           l2965 2014                             l2957 1FDA  
                           l2799 0ED2                             l2991 1740  
                           l2895 1170                             l2887 1118  
                           l2879 10D6                             l2983 2260  
                           l2975 2252                             l2967 2298  
                           l2959 1FE8                             l2993 176E  
                           l2897 1184                             l2889 112C  
                           l2985 2268                             l2969 2236  
                           l2977 21D6                             l2995 177E  
                           l2899 119E                             l2987 226A  
                           l2979 2270                             l2997 17AC  
                           l2989 226C                             l2999 17BC  
                           u2000 0F0A                             u2001 0F06  
                           u2010 0F18                             u2011 0F14  
                           u1300 1D78                             u2020 0B06  
                           u2100 1244                             u1301 1D74  
                           u2021 0B02                             u2101 1240  
                           u2110 176E                             u1310 1D96  
                           u2030 0B4C                             u2111 176A  
                           u1311 1D92                             u2031 0B48  
                           u2120 17AC                             u1320 1DB2  
                           u1400 1ABC                             u2040 0B92  
                           u2200 01EA                             u2121 17A8  
                           u1321 1DAE                             u1401 1AB8  
                           u2041 0B8E                             u2201 01E6  
                           u2130 17CA                             u1330 1262  
                           u1410 1AFE                             u2050 0BD8  
                           u2210 021C                             u2131 17C6  
                           u1331 125E                             u1411 1AFA  
                           u2051 0BD4                             u2211 0218  
                           u2140 17EA                             u1340 132C  
                           u1420 1B16                             u1500 15B0  
                           u2060 0C6A                             u2300 0486  
                           u2220 0278                             u2141 17E6  
                           u1341 1328                             u1421 1B12  
                           u1501 15AC                             u2061 0C66  
                           u2301 0482                             u2221 0274  
                           u2150 183A                             u1350 1B96  
                           u1430 166C                             u1510 15C8  
                           u2070 0CFC                             u2310 04B8  
                           u2230 02AA                             u2151 1836  
                           u1351 1B92                             u1431 1668  
                           u1511 15C4                             u2071 0CF8  
                           u2311 04B4                             u2231 02A6  
                           u1360 2128                             u1440 1690  
                           u1520 1614                             u1600 18FE  
                           u2080 0D42                             u2320 04EA  
                           u2240 02DC                             u2160 006A  
                   _BAUD4CONbits 000EE9                             u1361 2124  
                           u1441 168C                             u1521 1610  
                           u1601 18FA                             u2081 0D3E  
                           u2321 04E6                             u2241 02D8  
                           u2161 0066                             u1370 2198  
                           u1530 2092                             u1450 16DA  
                           u1610 0F3C                             u2090 1234  
                           u2330 0546                             u2250 0338  
                           u2170 012A                             u1371 2194  
                           u1531 208A                             u1451 16D6  
                           u1611 0F38                             u2091 1230  
                           u2331 0542                             u2251 0334  
                           u2171 0126                             u1700 0730  
                           u1380 21AE                             u1460 16F2  
                           u1620 0F82                             u2340 0578  
                           u2260 036A                             u2180 015C  
                           u2500 1DF2                             u1701 072C  
                           u1381 21AA                             u1461 16EE  
                           u1621 0F7E                             u2341 0574  
                           u2261 0366                             u2181 0158  
                           u2501 1DEE                             u1710 0740  
                           u1470 173E                             u1390 1A9A  
                           u1550 19B0                             u1630 0FC8  
                           u2350 05AA                             u2270 03C6  
                           u2190 018E                             u2510 1E00  
                           u1711 073C                             u1471 173A  
                           u1391 1A96                             u1551 19AC  
                           u1631 0FC4                             u2351 05A6  
                           u2271 03C2                             u2191 018A  
                           u2511 1DFC                             u1800 090C  
                           u1720 0784                             u1480 1542  
                           u1560 19D2                             u1640 100E  
                           u2360 0606                             u2280 03F8  
                           u1801 0908                             u1721 0780  
                           u1481 153E                             u1561 19CE  
                           u1641 100A                             u2361 0602  
                           u2281 03F4                             u1810 0922  
                           u1730 0796                             u1490 1566  
                           u1570 1A14                             u1650 1054  
                           u2370 061C                             u2290 042A  
                           _T2PR 000FBC                             u1811 091E  
                           u1731 0792                             u1491 1562  
                           u1571 1A10                             u1651 1050  
                           u2371 0618                             u2291 0426  
                           u1900 0A5C                             u1820 0940  
                           u1740 07A6                             u1548 2094  
                           u1580 1A2C                             u1660 109A  
                           u1901 0A58                             u1821 093C  
                           u1741 07A2                             u1581 1A28  
                           u1661 1096                             u1910 0A8A  
                           u1830 0960                             u1750 07E6  
                           u1590 18E6                             u1670 10C0  
                           u1911 0A86                             u1831 095C  
                           u1751 07E2                             u1591 18E2  
                           u1671 10BC                             u2607 110A  
                           u2527 1E0C                             u1840 0972  
                           u1760 0826                             u1920 0D8A  
                           u1680 20E8                             u1841 096E  
                           u1761 0822                             u1921 0D86  
                           u1681 20E4                             u2617 1136  
                           u2537 213E                             u1850 09A0  
                           u1770 089C                             u1690 071E  
                           u1930 0D98                             u2490 1DE4  
                           u1851 099C                             u1771 0898  
                           u1691 071A                             u1931 0D94  
                           u2707 0ABC                             u2627 1162  
                           u2547 009A                             u2491 1DE0  
                           u1860 09B6                             u1780 08BE  
                           u1940 0DF4                             u1861 09B2  
                           u1781 08BA                             u1941 0DF0  
                           u2717 0AE8                             u2637 11BE  
                           u2557 00C6                             u1870 09CA  
                           u1790 08E8                             u1950 0E4A  
                           u1871 09C6                             u1791 08E4  
                           u1951 0E46                             u2807 16BA  
                           u2727 0C16                             u2647 11EA  
                           u2567 00EA                             u1880 09E4  
                           u1960 0E94                             u1881 09E0  
                           u1961 0E90                             u2817 171C  
                           u2737 0CA8                             u2657 1216  
                           u2577 0652                             u1890 0A2C  
                           u1970 0EB2                             u1891 0A28  
                           u1971 0EAE                             u2827 1B76  
                           u2747 18C8                             u2667 1C98  
                           u2587 067E                             u1980 0EC2  
                           u1981 0EBE                             u2837 20FC  
                           u2757 1908                             u2677 1D1A  
                           u2597 06BE                             u1990 0ED0  
                           u1991 0ECC                             u2767 1934  
                           u2687 19F6                             u2777 1590  
                           u2697 20C0                             u2787 15F2  
                           u2797 1AE0          __end_of_interrupts_init 22A8  
                _movement_return 0F2C                             _main 1DD2  
                           fsr2h 000FDA                             indf2 000FDF  
                           fsr1l 000FE1                             fsr2l 000FD9  
                           btemp 005D                             _stop 1B1A  
                           prodh 000FF4                             prodl 000FF3  
                           start 0044                 __end_of_ADC_init 2270  
                ___fldiv@new_exp 0022           __end_of_color_read_Red 1EEA  
                   ___param_bank 000000                            ?_main 0001  
                          _ADPCH 000F5F                  __end_of___fldiv 0A9E  
                          ?_stop 0016                  __end_of___lwdiv 1DD2  
                          i1l428 0038                            _TMR0H 000FD4  
                          _TMR0L 000FD3                     _square_timer 0057  
                   left_45@count 0020       __end_of_I2C_2_Master_Start 22C8  
     __end_of_I2C_2_Master_Write 22B4                  __end_of_left_45 1740  
                          _color 0043                  __end_of_forward 1A30  
                          _space 1844                            tablat 000FF5  
                __end_of_reverse 1B1A                            ttemp5 005E  
                          ttemp6 0061                            ttemp7 0065  
                          stop@i 001A                            status 000FD8  
                          wtemp8 005E          __end_of_color_read_Blue 1FDA  
          _I2C_2_Master_RepStart 22C8                   delay_ms_func@i 0007  
                ?_color_read_Red 0007                  __initialization 1E40  
                   __end_of_main 1E40                     __end_of_stop 1BCA  
               _color_upperbound 00C2        ??_complete_initialisation 0008  
              left_45@left_timer 0021                           ??_main 00C4  
                         ??_stop 001A                    __activetblptr 000000  
        __end_of_movement_return 10D6                     ?_setMotorPWM 0010  
                         _ADRESH 000F64                           _CCPR1H 000FAA  
                         _CCPR2H 000FA6                           _CCPR3H 000F25  
                         _CCPR4H 000F21                           ?_space 001C  
          __end_of_delay_ms_func 20EA                __end_of_READcolor 14EC  
                         _RC0PPS 000E62                           _RC4REG 000EE3  
                         _RE2PPS 000E74                           i1l2195 0022  
                         _RC7PPS 000E69                           _RD5PPS 000E6F  
                         i1l2197 0032                           i1l2199 0036  
                         _RE4PPS 000E76                           _RD6PPS 000E70  
                         _RG6PPS 000E88                 ?_interrupts_init 0001  
       __end_of_color_click_init 215E                           _RX4PPS 000E15  
                         _TX4REG 000EE4                 __end_of___xxtofl 0F2C  
                         _LowISR 0018                    ??_Timer0_init 0003  
                   _CCPTMRS0bits 000FAD                           ___flge 1740  
                         ___wmul 21B0                        ??___fldiv 0019  
                      ??___lwdiv 000D                 ??_buggyLEDs_init 0003  
                         clear_0 1E7E                           clear_1 1E8A  
                  ?_custom_delay 0003                           _motorL 00B9  
                         _motorR 00B0                           isa$std 000001  
                      ??_left_45 0023                 __end_of_right_45 1616  
                   __pdataCOMRAM 0057                        ??_forward 0020  
               __end_of_movement 0D78                           tblptrh 000FF7  
                         tblptrl 000FF6                           tblptru 000FF8  
                      ?_ADC_init 0001                        ??_reverse 0020  
                   ?_return_home 0031                           stop@mL 0016  
                         stop@mR 0018                     ?_timer_reset 0001  
              ??_initDCmotorsPWM 0005  __end_of_complete_initialisation 2068  
   __end_of_buggy_color_response 0704                       ___flge@ff1 0003  
                     ___flge@ff2 0007                     ___xxtofl@arg 000D  
                   ___xxtofl@exp 000C                     ___xxtofl@val 0003  
                     __accesstop 0060          __end_of__initialization 1E90  
       __end_of_color_read_Clear 1F8A         __end_of_color_read_Green 1F3A  
         ?_I2C_2_Master_RepStart 0001                    ___rparam_used 000001  
               ?_color_read_Blue 0007                   __pcstackCOMRAM 0001  
                   __pidataBANK0 22D8                   ??_custom_delay 0005  
                  __end_of_space 1946              __end_of_Timer0_init 2256  
                     ??_ADC_init 0003                 ?_movement_return 002C  
                        ??_space 0020                       _card_count 0042  
                     __pbssBANK0 0060                          ?_LowISR 0001  
              _color_writetoaddr 2216                     _T2CLKCONbits 000FBF  
                        ?___flge 0003               ?_color_writetoaddr 0005  
                        ?___wmul 0003              ??_color_writetoaddr 0006  
                      ?___xxtofl 0003                          _SP4BRGH 000EE6  
                        _SP4BRGL 000EE5                          _SSP2ADD 000ED6  
                        _SSP2BUF 000ED5           color_writetoaddr@value 0005  
               ??_color_read_Red 0009        __end_of_color_writetoaddr 2236  
                      _ADREFbits 000F58               _I2C_2_Master_Start 22BE  
                     _initUSART4 21F6               _I2C_2_Master_Write 22A8  
                      ?_right_45 001C                          __Hparam 0000  
                     _left_timer 005B                          __Lparam 0000  
              color_read_Red@tmp 000C                        ?_movement 0026  
                    _Timer0_init 2236                          ___fldiv 0704  
            ?_I2C_2_Master_Start 0001                          ___lwdiv 1D5E  
            ?_I2C_2_Master_Write 0001             _buggy_color_response 0048  
                        __pcinit 1E40                          __ramtop 0E00  
                        __ptext0 1DD2                          __ptext1 2026  
                        __ptext2 21D6                          __ptext3 1FDA  
                        __ptext4 2298                          __ptext5 21F6  
                        __ptext6 1BCA                          __ptext7 212A  
                        __ptext8 2216                          __ptext9 215E  
                        _left_45 1616                        _T2CONbits 000FBD  
                        _forward 1946                       ??___xxtofl 0007  
                  ?_reverse_pink 0026                        _T2HLTbits 000FBE  
                        _reverse 1A30                    right_45@count 0020  
           ??_I2C_2_Master_Start 0004             ??_I2C_2_Master_Write 0004  
           end_of_initialization 1E90             __end_of_custom_delay 212A  
              ?_color_click_init 0001                        _READcolor 13B2  
                     ??_right_45 0023               ??_color_click_init 0007  
                        space@mL 001C                          space@mR 001E  
                     ??_movement 002B                          postdec1 000FE5  
                        postdec2 000FDD                          postinc0 000FEE  
                        postinc2 000FDE                       _motor_init 1FDA  
          ?_buggy_color_response 0037                  _initDCmotorsPWM 1BCA  
                      _PORTFbits 000F8E               setMotorPWM@negDuty 0015  
                 ??_reverse_pink 002A                    ___xxtofl@sign 000B  
                      _TRISAbits 000F81               setMotorPWM@posDuty 0014  
                      _TRISCbits 000F83                        _TRISDbits 000F84  
                      _TRISEbits 000F85                        _TRISFbits 000F86  
                      _TRISGbits 000F87                        _TRISHbits 000F88  
                    ___fldiv@grs 0024                       _ports_init 21D6  
                    ___fldiv@rem 001D         color_writetoaddr@address 0006  
        ??_I2C_2_Master_RepStart 0004                      _CCP1CONbits 000FAB  
              ?_color_read_Clear 0007                      _CCP2CONbits 000FA7  
              ?_color_read_Green 0007                       ?_READcolor 002A  
                    _CCP3CONbits 000F26                      ?_initUSART4 0001  
                    _CCP4CONbits 000F22               ??_color_read_Clear 0009  
       ?_complete_initialisation 0001               ??_color_read_Green 0009  
                 __end_of_LowISR 0044                   __end_of___flge 1844  
                 __end_of___wmul 21D6                    __pidataCOMRAM 22D2  
            color_read_Clear@tmp 000C              start_initialization 1E40  
         buggy_color_response@mL 0037           buggy_color_response@mR 0039  
            color_read_Green@tmp 000C                         ??_LowISR 0001  
                 _reverse_yellow 1C5A          __end_of_initDCmotorsPWM 1C5A  
                       ??___flge 000B           ??_buggy_color_response 003D  
                       ??___wmul 0007                      ?_motor_init 0003  
                     READcolor@c 002A                      __pdataBANK0 00C2  
                    _card_memory 0088                        ___fldiv@a 0015  
                      ___fldiv@b 0011                      __pbssCOMRAM 003F  
                  __pcstackBANK0 00C4                      ?_ports_init 0001  
                  _delay_ms_func 20AA           __end_of_reverse_yellow 1CDC  
                    ??_READcolor 002C             __end_of_reverse_pink 1D5E  
               ___lwdiv@dividend 0009                     ?_Timer0_init 0001  
                       ?___fldiv 0011                         ?___lwdiv 0009  
                     right_45@mL 001C                       right_45@mR 001E  
                    __pintcodelo 0018                     _custom_delay 20EA  
           I2C_2_Master_Read@ack 0005                ??_interrupts_init 0003  
           I2C_2_Master_Read@tmp 0006                         ?_left_45 001C  
                       ?_forward 001C                _I2C_2_Master_Idle 2188  
              _I2C_2_Master_Init 215E                _I2C_2_Master_Read 2068  
              _I2C_2_Master_Stop 22B4                         _ADC_init 2256  
                       ?_reverse 001C               ?_I2C_2_Master_Idle 0001  
             ?_I2C_2_Master_Init 0001               ?_I2C_2_Master_Read 0001  
                  ??_setMotorPWM 0012               ?_I2C_2_Master_Stop 0001  
               ___lwdiv@quotient 000D         initDCmotorsPWM@PWMperiod 0003  
                 ?_delay_ms_func 0003              ??_I2C_2_Master_Idle 0003  
            ??_I2C_2_Master_Init 0003              ??_I2C_2_Master_Read 0004  
                 ___wmul@product 0007                         _LATAbits 000F79  
            ??_I2C_2_Master_Stop 0004                         _LATCbits 000F7B  
                       _LATDbits 000F7C                       movement@mL 0026  
                       _LATEbits 000F7D                       movement@mR 0028  
                       _LATFbits 000F7E                   reverse_pink@mL 0026  
                       _LATGbits 000F7F                   reverse_pink@mR 0028  
                       _LATHbits 000F80                  ?_reverse_yellow 0026  
                       _IPR0bits 000E1F                         _PIE0bits 000E29  
                       i1u115_20 0032                         i1u115_21 002E  
              movement_return@mL 002C                movement_return@mR 002E  
                       _PIR0bits 000E33                         _PIR4bits 000E37  
               ?_initDCmotorsPWM 0003                         _SSP2CON2 000EDA  
                       _SSP2STAT 000ED8                        _timer_val 003F  
                     _ADCON0bits 000F60        __end_of_I2C_2_Master_Idle 21B0  
      __end_of_I2C_2_Master_Init 2188        __end_of_I2C_2_Master_Read 20AA  
              ___wmul@multiplier 0003        __end_of_I2C_2_Master_Stop 22BE  
                   setMotorPWM@m 0010      I2C_2_Master_Write@data_byte 0004  
                      left_45@mL 001C                        left_45@mR 001E  
              ??_color_read_Blue 0009                    ??_return_home 0035  
                  ??_timer_reset 0003                        copy_data0 1E6C  
                  movement@count 002A    __end_of_I2C_2_Master_RepStart 22D2  
             color_read_Blue@tmp 000C              __end_of_setMotorPWM 13B2  
                   ??_initUSART4 0003            buggy_color_response@c 003B  
                       __Hrparam 0000                         __Lrparam 0000  
                      forward@mL 001C                        forward@mR 001E  
              ??_movement_return 0031                       _ANSELDbits 000EA7  
                     _ANSELFbits 000EB4                         ___xxtofl 0D78  
           movement_return@count 0030                       _T0CON0bits 000FD5  
                     _T0CON1bits 000FD6                   _buggyLEDs_init 2270  
                ___lwdiv@divisor 000B               __end_of_initUSART4 2216  
                ___lwdiv@counter 000F                  ??_delay_ms_func 0005  
                       __ptext10 2270                         __ptext11 2236  
                       __ptext20 20AA                         __ptext12 2256  
                       __ptext21 0A9E                         __ptext13 0048  
                       __ptext30 20EA                         __ptext22 1844  
                       __ptext14 2286                         __ptext31 1740  
                       __ptext23 14EC                         __ptext15 10D6  
                       __ptext40 22C8                         __ptext32 13B2  
                       __ptext24 1A30                         __ptext16 0F2C  
                       __ptext41 2068                         __ptext33 1E9A  
                       __ptext25 1616                         __ptext17 1C5A  
                       __ptext42 2188                         __ptext34 1EEA  
                       __ptext26 1B1A                         __ptext18 1CDC  
                       __ptext43 0D78                         __ptext35 1F3A  
                       __ptext27 1246                         __ptext19 1946  
                       __ptext44 0704                         __ptext36 1F8A  
                       __ptext28 21B0                         __ptext37 22A8  
                       __ptext29 1D5E                         __ptext38 22B4  
                       __ptext39 22BE                        right_45@i 0025  
                   _SSP2CON1bits 000ED9                     _SSP2CON2bits 000EDA  
            __end_of_return_home 1246              __end_of_timer_reset 2298  
                       _right_45 14EC                        reverse@mL 001C  
                      reverse@mR 001E                         _movement 0A9E  
                       isa$xinst 000000                       _RC4STAbits 000EE7  
                       int$flags 005D                     ??_motor_init 0007  
                       left_45@i 0025           __end_of_buggyLEDs_init 2286  
                     _INTCONbits 000FF2                     _reverse_pink 1CDC  
                   ??_ports_init 0003                      _setMotorPWM 1246  
                       intlevel1 0000               __end_of_motor_init 2026  
                    _right_timer 0059                 reverse_yellow@mL 0026  
               reverse_yellow@mR 0028                  _interrupts_init 2298  
                   _timer_memory 0060               __end_of_ports_init 21F6  
                   motor_init@mL 0003                     motor_init@mR 0005  
               _color_click_init 212A              right_45@right_timer 0021  
                ?_buggyLEDs_init 0001                       _SSP2DATPPS 000E1D  
                     _SSP2CLKPPS 000E1C                      _timer_index 0041  
                    _return_home 10D6                      _timer_reset 2286  
               ??_reverse_yellow 002A                       _TX4STAbits 000EE8  
                  custom_delay@i 0006  
