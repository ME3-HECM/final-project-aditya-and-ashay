

Microchip MPLAB XC8 Assembler V2.40 build 20220703182018 
                                                                                               Mon Mar 13 15:53:53 2023

Microchip MPLAB XC8 C Compiler v2.40 (Free license) build 20220703182018 Og1 
     1                           	processor	18F67K40
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     6                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     8                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1
    28                           	psect	text17,global,reloc=2,class=CODE,delta=1
    29                           	psect	text18,global,reloc=2,class=CODE,delta=1
    30                           	psect	text19,global,reloc=2,class=CODE,delta=1
    31                           	psect	text20,global,reloc=2,class=CODE,delta=1
    32                           	psect	text21,global,reloc=2,class=CODE,delta=1,group=1
    33                           	psect	text22,global,reloc=2,class=CODE,delta=1,group=1
    34                           	psect	text23,global,reloc=2,class=CODE,delta=1
    35                           	psect	text24,global,reloc=2,class=CODE,delta=1,group=1
    36                           	psect	text25,global,reloc=2,class=CODE,delta=1,group=1
    37                           	psect	text26,global,reloc=2,class=CODE,delta=1
    38                           	psect	text27,global,reloc=2,class=CODE,delta=1,group=1
    39                           	psect	text28,global,reloc=2,class=CODE,delta=1
    40                           	psect	text29,global,reloc=2,class=CODE,delta=1
    41                           	psect	text30,global,reloc=2,class=CODE,delta=1
    42                           	psect	text31,global,reloc=2,class=CODE,delta=1
    43                           	psect	text32,global,reloc=2,class=CODE,delta=1
    44                           	psect	text33,global,reloc=2,class=CODE,delta=1
    45                           	psect	text34,global,reloc=2,class=CODE,delta=1
    46                           	psect	text35,global,reloc=2,class=CODE,delta=1
    47                           	psect	text36,global,reloc=2,class=CODE,delta=1
    48                           	psect	text37,global,reloc=2,class=CODE,delta=1
    49                           	psect	text38,global,reloc=2,class=CODE,delta=1
    50                           	psect	text39,global,reloc=2,class=CODE,delta=1
    51                           	psect	text40,global,reloc=2,class=CODE,delta=1
    52                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    53                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    54                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    55                           	psect	text43,global,reloc=2,class=CODE,delta=1
    56                           	psect	text44,global,reloc=2,class=CODE,delta=1
    57                           	psect	text45,global,reloc=2,class=CODE,delta=1
    58                           	psect	text46,global,reloc=2,class=CODE,delta=1
    59                           	psect	text47,global,reloc=2,class=CODE,delta=1
    60                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    61                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    62                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    63                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    64                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    65   000000                     
    66                           ; Generated 06/04/2022 GMT
    67                           ; 
    68                           ; Copyright Â© 2022, Microchip Technology Inc. and its subsidiaries ("Microchip")
    69                           ; All rights reserved.
    70                           ; 
    71                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    72                           ; 
    73                           ; Redistribution and use in source and binary forms, with or without modification, are
    74                           ; permitted provided that the following conditions are met:
    75                           ; 
    76                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    77                           ;        conditions and the following disclaimer.
    78                           ; 
    79                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    80                           ;        of conditions and the following disclaimer in the documentation and/or other
    81                           ;        materials provided with the distribution. Publication is not required when
    82                           ;        this file is used in an embedded application.
    83                           ; 
    84                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    85                           ;        software without specific prior written permission.
    86                           ; 
    87                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    88                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    89                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    90                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    91                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    92                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    93                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    94                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    95                           ; 
    96                           ; 
    97                           ; Code-generator required, PIC18F67K40 Definitions
    98                           ; 
    99                           ; SFR Addresses
   100   000000                     _T0CON0bits	set	4053
   101   000000                     _T0CON1bits	set	4054
   102   000000                     _TRISBbits	set	3970
   103   000000                     _TRISAbits	set	3969
   104   000000                     _TRISFbits	set	3974
   105   000000                     _LATFbits	set	3966
   106   000000                     _LATDbits	set	3964
   107   000000                     _LATHbits	set	3968
   108   000000                     _LATGbits	set	3967
   109   000000                     _TRISGbits	set	3975
   110   000000                     _TRISEbits	set	3973
   111   000000                     _TX4REG	set	3812
   112   000000                     _RC4STAbits	set	3815
   113   000000                     _SP4BRGH	set	3814
   114   000000                     _SSP2CON2bits	set	3802
   115   000000                     _RX4PPS	set	3605
   116   000000                     _SSP2CLKPPS	set	3612
   117   000000                     _SSP2DATPPS	set	3613
   118   000000                     _ANSELDbits	set	3751
   119   000000                     _SSP2ADD	set	3798
   120   000000                     _SSP2CON1bits	set	3801
   121   000000                     _RC4REG	set	3811
   122   000000                     _SP4BRGL	set	3813
   123   000000                     _TX4STAbits	set	3816
   124   000000                     _BAUD4CONbits	set	3817
   125   000000                     _TRISCbits	set	3971
   126   000000                     _SSP2CON2	set	3802
   127   000000                     _TRISDbits	set	3972
   128   000000                     _SSP2STAT	set	3800
   129   000000                     _SSP2BUF	set	3797
   130   000000                     _IPR0bits	set	3615
   131   000000                     _PIE0bits	set	3625
   132   000000                     _PIE4bits	set	3629
   133   000000                     _PIR4bits	set	3639
   134   000000                     _RC0PPS	set	3682
   135   000000                     _RD5PPS	set	3695
   136   000000                     _RE2PPS	set	3700
   137   000000                     _RD6PPS	set	3696
   138   000000                     _RC7PPS	set	3689
   139   000000                     _LATCbits	set	3963
   140   000000                     _LATEbits	set	3965
   141   000000                     _CCPR4H	set	3873
   142   000000                     _CCPR3H	set	3877
   143   000000                     _PIR0bits	set	3635
   144   000000                     _TRISHbits	set	3976
   145   000000                     _T2PR	set	4028
   146   000000                     _T2CONbits	set	4029
   147   000000                     _CCPR2H	set	4006
   148   000000                     _CCPR1H	set	4010
   149   000000                     _RE4PPS	set	3702
   150   000000                     _RG6PPS	set	3720
   151   000000                     _ANSELBbits	set	3738
   152   000000                     _TMR0L	set	4051
   153   000000                     _TMR0H	set	4052
   154   000000                     _INTCONbits	set	4082
   155   000000                     _T2CLKCONbits	set	4031
   156   000000                     _T2HLTbits	set	4030
   157   000000                     _CCP1CONbits	set	4011
   158   000000                     _CCPTMRS0bits	set	4013
   159   000000                     _CCP2CONbits	set	4007
   160   000000                     _LATAbits	set	3961
   161   000000                     _CCP3CONbits	set	3878
   162   000000                     _CCP4CONbits	set	3874
   163                           
   164                           ; #config settings
   165                           
   166                           	psect	cinit
   167   001E10                     __pcinit:
   168                           	callstack 0
   169   001E10                     start_initialization:
   170                           	callstack 0
   171   001E10                     __initialization:
   172                           	callstack 0
   173                           
   174                           ; Clear objects allocated to BANK1 (60 bytes)
   175   001E10  EE01  F000         	lfsr	0,__pbssBANK1
   176   001E14  0E3C               	movlw	60
   177   001E16                     clear_0:
   178   001E16  6AEE               	clrf	postinc0,c
   179   001E18  06E8               	decf	wreg,f,c
   180   001E1A  E1FD               	bnz	clear_0
   181                           
   182                           ; Clear objects allocated to BANK0 (122 bytes)
   183   001E1C  EE00  F060         	lfsr	0,__pbssBANK0
   184   001E20  0E7A               	movlw	122
   185   001E22                     clear_1:
   186   001E22  6AEE               	clrf	postinc0,c
   187   001E24  06E8               	decf	wreg,f,c
   188   001E26  E1FD               	bnz	clear_1
   189                           
   190                           ; Clear objects allocated to COMRAM (29 bytes)
   191   001E28  EE00  F03D         	lfsr	0,__pbssCOMRAM
   192   001E2C  0E1D               	movlw	29
   193   001E2E                     clear_2:
   194   001E2E  6AEE               	clrf	postinc0,c
   195   001E30  06E8               	decf	wreg,f,c
   196   001E32  E1FD               	bnz	clear_2
   197   001E34                     end_of_initialization:
   198                           	callstack 0
   199   001E34                     __end_of__initialization:
   200                           	callstack 0
   201   001E34  905A               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   202   001E36  925A               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   203   001E38  0100               	movlb	0
   204   001E3A  EF80  F00D         	goto	_main	;jump to C main() function
   205                           
   206                           	psect	bssCOMRAM
   207   00003D                     __pbssCOMRAM:
   208                           	callstack 0
   209   00003D                     _color_upperbound:
   210                           	callstack 0
   211   00003D                     	ds	2
   212   00003F                     _T_flag:
   213                           	callstack 0
   214   00003F                     	ds	1
   215   000040                     _TxBufReadCnt:
   216                           	callstack 0
   217   000040                     	ds	1
   218   000041                     _TxBufWriteCnt:
   219                           	callstack 0
   220   000041                     	ds	1
   221   000042                     _RxBufReadCnt:
   222                           	callstack 0
   223   000042                     	ds	1
   224   000043                     _RxBufWriteCnt:
   225                           	callstack 0
   226   000043                     	ds	1
   227   000044                     _color:
   228                           	callstack 0
   229   000044                     	ds	20
   230   000058                     _timer_index:
   231                           	callstack 0
   232   000058                     	ds	1
   233   000059                     _card_count_index:
   234                           	callstack 0
   235   000059                     	ds	1
   236                           
   237                           	psect	bssBANK0
   238   000060                     __pbssBANK0:
   239                           	callstack 0
   240   000060                     _card_memory:
   241                           	callstack 0
   242   000060                     	ds	40
   243   000088                     _EUSART4RXbuf:
   244                           	callstack 0
   245   000088                     	ds	20
   246   00009C                     _color_lowerbound:
   247                           	callstack 0
   248   00009C                     	ds	2
   249   00009E                     _Int_flag:
   250                           	callstack 0
   251   00009E                     	ds	2
   252   0000A0                     _timer_memory:
   253                           	callstack 0
   254   0000A0                     	ds	40
   255   0000C8                     _motorR:
   256                           	callstack 0
   257   0000C8                     	ds	9
   258   0000D1                     _motorL:
   259                           	callstack 0
   260   0000D1                     	ds	9
   261                           
   262                           	psect	bssBANK1
   263   000100                     __pbssBANK1:
   264                           	callstack 0
   265   000100                     _EUSART4TXbuf:
   266                           	callstack 0
   267   000100                     	ds	60
   268                           
   269                           	psect	cstackBANK0
   270   0000DA                     __pcstackBANK0:
   271                           	callstack 0
   272   0000DA                     ??_buggy_color_response:
   273                           
   274                           ; 1 bytes @ 0x0
   275   0000DA                     	ds	2
   276   0000DC                     buggy_color_response@i:
   277                           	callstack 0
   278                           
   279                           ; 2 bytes @ 0x2
   280   0000DC                     	ds	2
   281                           
   282                           	psect	cstackCOMRAM
   283   000001                     __pcstackCOMRAM:
   284                           	callstack 0
   285   000001                     ??i2_I2C_2_Master_Idle:
   286   000001                     
   287                           ; 1 bytes @ 0x0
   288   000001                     	ds	1
   289   000002                     i2I2C_2_Master_Write@data_byte:
   290                           	callstack 0
   291                           
   292                           ; 1 bytes @ 0x1
   293   000002                     	ds	1
   294   000003                     ??_LowISR:
   295                           
   296                           ; 1 bytes @ 0x2
   297   000003                     	ds	3
   298   000006                     ??_I2C_2_Master_Idle:
   299   000006                     ?_get_timer_val:
   300                           	callstack 0
   301   000006                     ?___wmul:
   302                           	callstack 0
   303   000006                     ?___xxtofl:
   304                           	callstack 0
   305   000006                     initDCmotorsPWM@PWMperiod:
   306                           	callstack 0
   307   000006                     motor_init@mL:
   308                           	callstack 0
   309   000006                     card_append@card_count_index:
   310                           	callstack 0
   311   000006                     ___wmul@multiplier:
   312                           	callstack 0
   313   000006                     ___flge@ff1:
   314                           	callstack 0
   315   000006                     ___xxtofl@val:
   316                           	callstack 0
   317                           
   318                           ; 4 bytes @ 0x5
   319   000006                     	ds	1
   320   000007                     ??_I2C_2_Master_Read:
   321   000007                     I2C_2_Master_Write@data_byte:
   322                           	callstack 0
   323                           
   324                           ; 1 bytes @ 0x6
   325   000007                     	ds	1
   326   000008                     ??_get_timer_val:
   327   000008                     I2C_2_Master_Read@ack:
   328                           	callstack 0
   329   000008                     color_writetoaddr@value:
   330                           	callstack 0
   331   000008                     motor_init@mR:
   332                           	callstack 0
   333   000008                     card_append@card_memory:
   334                           	callstack 0
   335   000008                     ___wmul@multiplicand:
   336                           	callstack 0
   337                           
   338                           ; 2 bytes @ 0x7
   339   000008                     	ds	1
   340   000009                     I2C_2_Master_Read@tmp:
   341                           	callstack 0
   342   000009                     color_writetoaddr@address:
   343                           	callstack 0
   344                           
   345                           ; 1 bytes @ 0x8
   346   000009                     	ds	1
   347   00000A                     ??_card_append:
   348   00000A                     ??_color_click_init:
   349   00000A                     ??___xxtofl:
   350   00000A                     ?_color_read_Red:
   351                           	callstack 0
   352   00000A                     ?_color_read_Blue:
   353                           	callstack 0
   354   00000A                     ?_color_read_Green:
   355                           	callstack 0
   356   00000A                     ?_color_read_Clear:
   357                           	callstack 0
   358   00000A                     ___wmul@product:
   359                           	callstack 0
   360   00000A                     ___flge@ff2:
   361                           	callstack 0
   362                           
   363                           ; 4 bytes @ 0x9
   364   00000A                     	ds	2
   365   00000C                     ??_color_read_Red:
   366   00000C                     ??_color_read_Blue:
   367   00000C                     ??_color_read_Green:
   368   00000C                     ??_color_read_Clear:
   369   00000C                     ?___lwdiv:
   370                           	callstack 0
   371   00000C                     get_timer_val@timer_val:
   372                           	callstack 0
   373   00000C                     ___lwdiv@dividend:
   374                           	callstack 0
   375                           
   376                           ; 2 bytes @ 0xB
   377   00000C                     	ds	2
   378   00000E                     ??___flge:
   379   00000E                     card_append@temp:
   380                           	callstack 0
   381   00000E                     ___xxtofl@sign:
   382                           	callstack 0
   383   00000E                     timer_append@timer_index:
   384                           	callstack 0
   385   00000E                     ___lwdiv@divisor:
   386                           	callstack 0
   387                           
   388                           ; 2 bytes @ 0xD
   389   00000E                     	ds	1
   390   00000F                     ___xxtofl@exp:
   391                           	callstack 0
   392   00000F                     color_read_Red@tmp:
   393                           	callstack 0
   394   00000F                     color_read_Blue@tmp:
   395                           	callstack 0
   396   00000F                     color_read_Green@tmp:
   397                           	callstack 0
   398   00000F                     color_read_Clear@tmp:
   399                           	callstack 0
   400                           
   401                           ; 2 bytes @ 0xE
   402   00000F                     	ds	1
   403   000010                     ___lwdiv@counter:
   404                           	callstack 0
   405   000010                     timer_append@timer_memory:
   406                           	callstack 0
   407   000010                     ___xxtofl@arg:
   408                           	callstack 0
   409                           
   410                           ; 4 bytes @ 0xF
   411   000010                     	ds	1
   412   000011                     READcolor@c:
   413                           	callstack 0
   414   000011                     ___lwdiv@quotient:
   415                           	callstack 0
   416                           
   417                           ; 2 bytes @ 0x10
   418   000011                     	ds	1
   419   000012                     ??_timer_append:
   420                           
   421                           ; 1 bytes @ 0x11
   422   000012                     	ds	1
   423   000013                     setMotorPWM@m:
   424                           	callstack 0
   425                           
   426                           ; 2 bytes @ 0x12
   427   000013                     	ds	1
   428   000014                     ?___fldiv:
   429                           	callstack 0
   430   000014                     ___fldiv@b:
   431                           	callstack 0
   432                           
   433                           ; 4 bytes @ 0x13
   434   000014                     	ds	1
   435   000015                     ??_setMotorPWM:
   436                           
   437                           ; 1 bytes @ 0x14
   438   000015                     	ds	1
   439   000016                     timer_append@temp:
   440                           	callstack 0
   441                           
   442                           ; 1 bytes @ 0x15
   443   000016                     	ds	1
   444   000017                     setMotorPWM@posDuty:
   445                           	callstack 0
   446                           
   447                           ; 1 bytes @ 0x16
   448   000017                     	ds	1
   449   000018                     setMotorPWM@negDuty:
   450                           	callstack 0
   451   000018                     ___fldiv@a:
   452                           	callstack 0
   453                           
   454                           ; 4 bytes @ 0x17
   455   000018                     	ds	1
   456   000019                     stop@mL:
   457                           	callstack 0
   458                           
   459                           ; 2 bytes @ 0x18
   460   000019                     	ds	2
   461   00001B                     stop@mR:
   462                           	callstack 0
   463                           
   464                           ; 2 bytes @ 0x1A
   465   00001B                     	ds	1
   466   00001C                     ??___fldiv:
   467                           
   468                           ; 1 bytes @ 0x1B
   469   00001C                     	ds	1
   470   00001D                     stop@i:
   471                           	callstack 0
   472                           
   473                           ; 2 bytes @ 0x1C
   474   00001D                     	ds	2
   475   00001F                     forward@mL:
   476                           	callstack 0
   477   00001F                     reverse@mL:
   478                           	callstack 0
   479   00001F                     left_45@mL:
   480                           	callstack 0
   481   00001F                     right_45@mL:
   482                           	callstack 0
   483   00001F                     space@mL:
   484                           	callstack 0
   485                           
   486                           ; 2 bytes @ 0x1E
   487   00001F                     	ds	1
   488   000020                     ___fldiv@rem:
   489                           	callstack 0
   490                           
   491                           ; 4 bytes @ 0x1F
   492   000020                     	ds	1
   493   000021                     forward@mR:
   494                           	callstack 0
   495   000021                     reverse@mR:
   496                           	callstack 0
   497   000021                     left_45@mR:
   498                           	callstack 0
   499   000021                     right_45@mR:
   500                           	callstack 0
   501   000021                     space@mR:
   502                           	callstack 0
   503                           
   504                           ; 2 bytes @ 0x20
   505   000021                     	ds	2
   506   000023                     ??_space:
   507   000023                     left_45@count:
   508                           	callstack 0
   509   000023                     right_45@count:
   510                           	callstack 0
   511                           
   512                           ; 2 bytes @ 0x22
   513   000023                     	ds	1
   514   000024                     ___fldiv@sign:
   515                           	callstack 0
   516                           
   517                           ; 1 bytes @ 0x23
   518   000024                     	ds	1
   519   000025                     ??_left_45:
   520   000025                     ??_right_45:
   521   000025                     ___fldiv@new_exp:
   522                           	callstack 0
   523                           
   524                           ; 2 bytes @ 0x24
   525   000025                     	ds	2
   526   000027                     left_45@i:
   527                           	callstack 0
   528   000027                     right_45@i:
   529                           	callstack 0
   530   000027                     ___fldiv@grs:
   531                           	callstack 0
   532                           
   533                           ; 4 bytes @ 0x26
   534   000027                     	ds	2
   535   000029                     reverse_pink@mL:
   536                           	callstack 0
   537   000029                     reverse_yellow@mL:
   538                           	callstack 0
   539                           
   540                           ; 2 bytes @ 0x28
   541   000029                     	ds	2
   542   00002B                     ___fldiv@bexp:
   543                           	callstack 0
   544   00002B                     reverse_pink@mR:
   545                           	callstack 0
   546   00002B                     reverse_yellow@mR:
   547                           	callstack 0
   548                           
   549                           ; 2 bytes @ 0x2A
   550   00002B                     	ds	1
   551   00002C                     ___fldiv@aexp:
   552                           	callstack 0
   553                           
   554                           ; 1 bytes @ 0x2B
   555   00002C                     	ds	1
   556   00002D                     ??_reverse_pink:
   557   00002D                     ??_reverse_yellow:
   558   00002D                     colourcards_normaliseRGBC@c:
   559                           	callstack 0
   560                           
   561                           ; 2 bytes @ 0x2C
   562   00002D                     	ds	2
   563   00002F                     colourcards_normaliseRGBC@R:
   564                           	callstack 0
   565   00002F                     instructions@mL:
   566                           	callstack 0
   567                           
   568                           ; 2 bytes @ 0x2E
   569   00002F                     	ds	2
   570   000031                     colourcards_normaliseRGBC@G:
   571                           	callstack 0
   572   000031                     instructions@mR:
   573                           	callstack 0
   574                           
   575                           ; 2 bytes @ 0x30
   576   000031                     	ds	2
   577   000033                     colourcards_normaliseRGBC@B:
   578                           	callstack 0
   579   000033                     instructions@count:
   580                           	callstack 0
   581                           
   582                           ; 2 bytes @ 0x32
   583   000033                     	ds	2
   584   000035                     ??_instructions:
   585   000035                     colourcards_normaliseRGBC@C:
   586                           	callstack 0
   587                           
   588                           ; 2 bytes @ 0x34
   589   000035                     	ds	2
   590   000037                     buggy_color_response@mL:
   591                           	callstack 0
   592                           
   593                           ; 2 bytes @ 0x36
   594   000037                     	ds	2
   595   000039                     buggy_color_response@mR:
   596                           	callstack 0
   597                           
   598                           ; 2 bytes @ 0x38
   599   000039                     	ds	2
   600   00003B                     buggy_color_response@c:
   601                           	callstack 0
   602                           
   603                           ; 2 bytes @ 0x3A
   604   00003B                     	ds	2
   605   00003D                     
   606                           ; 1 bytes @ 0x3C
   607 ;;
   608 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   609 ;;
   610 ;; *************** function _main *****************
   611 ;; Defined at:
   612 ;;		line 18 in file "main.c"
   613 ;; Parameters:    Size  Location     Type
   614 ;;		None
   615 ;; Auto vars:     Size  Location     Type
   616 ;;		None
   617 ;; Return value:  Size  Location     Type
   618 ;;                  1    wreg      void 
   619 ;; Registers used:
   620 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   621 ;; Tracked objects:
   622 ;;		On entry : 0/0
   623 ;;		On exit  : 0/0
   624 ;;		Unchanged: 0/0
   625 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   626 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   627 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   628 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   629 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   630 ;;Total ram usage:        0 bytes
   631 ;; Hardware stack levels required when called: 12
   632 ;; This function calls:
   633 ;;		_Timer0_init
   634 ;;		_buggyLEDs_init
   635 ;;		_buggy_color_response
   636 ;;		_color_click_init
   637 ;;		_initDCmotorsPWM
   638 ;;		_initUSART4
   639 ;;		_motor_init
   640 ;; This function is called by:
   641 ;;		Startup code after reset
   642 ;; This function uses a non-reentrant model
   643 ;;
   644                           
   645                           	psect	text0
   646   001B00                     __ptext0:
   647                           	callstack 0
   648   001B00                     _main:
   649                           	callstack 19
   650   001B00                     
   651                           ;main.c: 20:     initDCmotorsPWM(99);
   652   001B00  0E00               	movlw	0
   653   001B02  6E07               	movwf	(initDCmotorsPWM@PWMperiod+1)^0,c
   654   001B04  0E63               	movlw	99
   655   001B06  6E06               	movwf	initDCmotorsPWM@PWMperiod^0,c
   656   001B08  EC8C  F00C         	call	_initDCmotorsPWM	;wreg free
   657   001B0C                     
   658                           ;main.c: 21:     motor_init(&motorL,&motorR);
   659   001B0C  0ED1               	movlw	low _motorL
   660   001B0E  6E06               	movwf	motor_init@mL^0,c
   661   001B10  0E00               	movlw	high _motorL
   662   001B12  6E07               	movwf	(motor_init@mL+1)^0,c
   663   001B14  0EC8               	movlw	low _motorR
   664   001B16  6E08               	movwf	motor_init@mR^0,c
   665   001B18  0E00               	movlw	high _motorR
   666   001B1A  6E09               	movwf	(motor_init@mR+1)^0,c
   667   001B1C  EC52  F00E         	call	_motor_init	;wreg free
   668   001B20                     
   669                           ;main.c: 22:     buggyLEDs_init();
   670   001B20  ECC3  F00F         	call	_buggyLEDs_init	;wreg free
   671   001B24                     
   672                           ;main.c: 23:     initUSART4();
   673   001B24  EC93  F00F         	call	_initUSART4	;wreg free
   674   001B28                     
   675                           ;main.c: 24:     color_click_init();
   676   001B28  ECD5  F00E         	call	_color_click_init	;wreg free
   677   001B2C                     
   678                           ;main.c: 25:     Timer0_init();
   679   001B2C  ECB3  F00F         	call	_Timer0_init	;wreg free
   680   001B30                     
   681                           ;main.c: 30:     TRISGbits.TRISG1 = 0;
   682   001B30  9287               	bcf	135,1,c	;volatile
   683   001B32                     
   684                           ;main.c: 31:     TRISAbits.TRISA4 = 0;
   685   001B32  9881               	bcf	129,4,c	;volatile
   686   001B34                     
   687                           ;main.c: 32:     TRISFbits.TRISF7 = 0;
   688   001B34  9E86               	bcf	134,7,c	;volatile
   689   001B36                     
   690                           ;main.c: 34:     LATGbits.LATG1 = 1;
   691   001B36  827F               	bsf	127,1,c	;volatile
   692   001B38                     
   693                           ;main.c: 35:     LATAbits.LATA4 = 1;
   694   001B38  8879               	bsf	121,4,c	;volatile
   695   001B3A                     
   696                           ;main.c: 36:     LATFbits.LATF7 = 1;
   697   001B3A  8E7E               	bsf	126,7,c	;volatile
   698   001B3C                     
   699                           ;main.c: 44:     TRISDbits.TRISD7 = 0;
   700   001B3C  9E84               	bcf	132,7,c	;volatile
   701   001B3E                     
   702                           ;main.c: 45:     LATDbits.LATD7 = 0;
   703   001B3E  9E7C               	bcf	124,7,c	;volatile
   704   001B40                     l3699:
   705                           
   706                           ;main.c: 55:        buggy_color_response(&motorL,&motorR,&color);
   707   001B40  0ED1               	movlw	low _motorL
   708   001B42  6E37               	movwf	buggy_color_response@mL^0,c
   709   001B44  0E00               	movlw	high _motorL
   710   001B46  6E38               	movwf	(buggy_color_response@mL+1)^0,c
   711   001B48  0EC8               	movlw	low _motorR
   712   001B4A  6E39               	movwf	buggy_color_response@mR^0,c
   713   001B4C  0E00               	movlw	high _motorR
   714   001B4E  6E3A               	movwf	(buggy_color_response@mR+1)^0,c
   715   001B50  0E44               	movlw	low _color
   716   001B52  6E3B               	movwf	buggy_color_response@c^0,c
   717   001B54  0E00               	movlw	high _color
   718   001B56  6E3C               	movwf	(buggy_color_response@c+1)^0,c
   719   001B58  EC2C  F000         	call	_buggy_color_response	;wreg free
   720   001B5C  EFA0  F00D         	goto	l3699
   721   001B60  EF2A  F000         	goto	start
   722   001B64                     __end_of_main:
   723                           	callstack 0
   724                           
   725 ;; *************** function _motor_init *****************
   726 ;; Defined at:
   727 ;;		line 94 in file "dc_motor.c"
   728 ;; Parameters:    Size  Location     Type
   729 ;;  mL              2    5[COMRAM] PTR struct DC_motor
   730 ;;		 -> motorL(9), 
   731 ;;  mR              2    7[COMRAM] PTR struct DC_motor
   732 ;;		 -> motorR(9), 
   733 ;; Auto vars:     Size  Location     Type
   734 ;;		None
   735 ;; Return value:  Size  Location     Type
   736 ;;                  1    wreg      void 
   737 ;; Registers used:
   738 ;;		wreg, status,2, status,0
   739 ;; Tracked objects:
   740 ;;		On entry : 0/0
   741 ;;		On exit  : 0/0
   742 ;;		Unchanged: 0/0
   743 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   744 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   745 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   746 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   747 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   748 ;;Total ram usage:        4 bytes
   749 ;; Hardware stack levels used: 1
   750 ;; Hardware stack levels required when called: 5
   751 ;; This function calls:
   752 ;;		Nothing
   753 ;; This function is called by:
   754 ;;		_main
   755 ;; This function uses a non-reentrant model
   756 ;;
   757                           
   758                           	psect	text1
   759   001CA4                     __ptext1:
   760                           	callstack 0
   761   001CA4                     _motor_init:
   762                           	callstack 25
   763   001CA4                     
   764                           ;dc_motor.c: 94: void motor_init(DC_motor *mL, DC_motor *mR);dc_motor.c: 95: {;dc_motor.
      +                          c: 96:     motorL.power=0;
   765   001CA4  0E00               	movlw	0
   766   001CA6  0100               	movlb	0	; () banked
   767   001CA8  6FD1               	movwf	_motorL& (0+255),b
   768                           
   769                           ;dc_motor.c: 97:     motorL.direction=1;
   770   001CAA  0E01               	movlw	1
   771   001CAC  6FD2               	movwf	(_motorL+1)& (0+255),b
   772                           
   773                           ;dc_motor.c: 98:     motorL.brakemode=1;
   774   001CAE  0E01               	movlw	1
   775   001CB0  6FD3               	movwf	(_motorL+2)& (0+255),b
   776   001CB2                     
   777                           ; BSR set to: 0
   778                           ;dc_motor.c: 99:     motorL.posDutyHighByte=(unsigned char *)(&CCPR1H);
   779   001CB2  0EAA               	movlw	170
   780   001CB4  6FD6               	movwf	(_motorL+5)& (0+255),b
   781   001CB6  0E0F               	movlw	15
   782   001CB8  6FD7               	movwf	(_motorL+6)& (0+255),b
   783   001CBA                     
   784                           ; BSR set to: 0
   785                           ;dc_motor.c: 100:     motorL.negDutyHighByte=(unsigned char *)(&CCPR2H);
   786   001CBA  0EA6               	movlw	166
   787   001CBC  6FD8               	movwf	(_motorL+7)& (0+255),b
   788   001CBE  0E0F               	movlw	15
   789   001CC0  6FD9               	movwf	(_motorL+8)& (0+255),b
   790                           
   791                           ;dc_motor.c: 101:     motorL.PWMperiod=99;
   792   001CC2  0E00               	movlw	0
   793   001CC4  6FD5               	movwf	(_motorL+4)& (0+255),b
   794   001CC6  0E63               	movlw	99
   795   001CC8  6FD4               	movwf	(_motorL+3)& (0+255),b
   796                           
   797                           ;dc_motor.c: 103:     motorR.power=0;
   798   001CCA  0E00               	movlw	0
   799   001CCC  6FC8               	movwf	_motorR& (0+255),b
   800                           
   801                           ;dc_motor.c: 104:     motorR.direction=1;
   802   001CCE  0E01               	movlw	1
   803   001CD0  6FC9               	movwf	(_motorR+1)& (0+255),b
   804                           
   805                           ;dc_motor.c: 105:     motorR.brakemode=1;
   806   001CD2  0E01               	movlw	1
   807   001CD4  6FCA               	movwf	(_motorR+2)& (0+255),b
   808   001CD6                     
   809                           ; BSR set to: 0
   810                           ;dc_motor.c: 106:     motorR.posDutyHighByte=(unsigned char *)(&CCPR3H);
   811   001CD6  0E25               	movlw	37
   812   001CD8  6FCD               	movwf	(_motorR+5)& (0+255),b
   813   001CDA  0E0F               	movlw	15
   814   001CDC  6FCE               	movwf	(_motorR+6)& (0+255),b
   815   001CDE                     
   816                           ; BSR set to: 0
   817                           ;dc_motor.c: 107:     motorR.negDutyHighByte=(unsigned char *)(&CCPR4H);
   818   001CDE  0E21               	movlw	33
   819   001CE0  6FCF               	movwf	(_motorR+7)& (0+255),b
   820   001CE2  0E0F               	movlw	15
   821   001CE4  6FD0               	movwf	(_motorR+8)& (0+255),b
   822                           
   823                           ;dc_motor.c: 108:     motorR.PWMperiod=99;
   824   001CE6  0E00               	movlw	0
   825   001CE8  6FCC               	movwf	(_motorR+4)& (0+255),b
   826   001CEA  0E63               	movlw	99
   827   001CEC  6FCB               	movwf	(_motorR+3)& (0+255),b
   828   001CEE                     
   829                           ; BSR set to: 0
   830   001CEE  0012               	return		;funcret
   831   001CF0                     __end_of_motor_init:
   832                           	callstack 0
   833                           
   834 ;; *************** function _initUSART4 *****************
   835 ;; Defined at:
   836 ;;		line 5 in file "serial.c"
   837 ;; Parameters:    Size  Location     Type
   838 ;;		None
   839 ;; Auto vars:     Size  Location     Type
   840 ;;		None
   841 ;; Return value:  Size  Location     Type
   842 ;;                  1    wreg      void 
   843 ;; Registers used:
   844 ;;		wreg, status,2
   845 ;; Tracked objects:
   846 ;;		On entry : 0/0
   847 ;;		On exit  : 0/0
   848 ;;		Unchanged: 0/0
   849 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   850 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   851 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   852 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   853 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   854 ;;Total ram usage:        0 bytes
   855 ;; Hardware stack levels used: 1
   856 ;; Hardware stack levels required when called: 5
   857 ;; This function calls:
   858 ;;		Nothing
   859 ;; This function is called by:
   860 ;;		_main
   861 ;; This function uses a non-reentrant model
   862 ;;
   863                           
   864                           	psect	text2
   865   001F26                     __ptext2:
   866                           	callstack 0
   867   001F26                     _initUSART4:
   868                           	callstack 25
   869   001F26                     
   870                           ;serial.c: 7:     RC0PPS = 0x12;
   871   001F26  0E12               	movlw	18
   872   001F28  010E               	movlb	14	; () banked
   873   001F2A  6F62               	movwf	98,b	;volatile
   874                           
   875                           ;serial.c: 8:     RX4PPS = 0x11;
   876   001F2C  0E11               	movlw	17
   877   001F2E  6F15               	movwf	21,b	;volatile
   878   001F30                     
   879                           ; BSR set to: 14
   880                           ;serial.c: 9:     TRISCbits.TRISC1 = 1;
   881   001F30  8283               	bsf	131,1,c	;volatile
   882   001F32                     
   883                           ; BSR set to: 14
   884                           ;serial.c: 12:     BAUD4CONbits.BRG16 = 0;
   885   001F32  97E9               	bcf	233,3,b	;volatile
   886   001F34                     
   887                           ; BSR set to: 14
   888                           ;serial.c: 13:     TX4STAbits.BRGH = 0;
   889   001F34  95E8               	bcf	232,2,b	;volatile
   890                           
   891                           ;serial.c: 14:     SP4BRGL = 51;
   892   001F36  0E33               	movlw	51
   893   001F38  6FE5               	movwf	229,b	;volatile
   894                           
   895                           ;serial.c: 15:     SP4BRGH = 0;
   896   001F3A  0E00               	movlw	0
   897   001F3C  6FE6               	movwf	230,b	;volatile
   898   001F3E                     
   899                           ; BSR set to: 14
   900                           ;serial.c: 17:     RC4STAbits.CREN = 1;
   901   001F3E  89E7               	bsf	231,4,b	;volatile
   902   001F40                     
   903                           ; BSR set to: 14
   904                           ;serial.c: 18:     TX4STAbits.TXEN = 1;
   905   001F40  8BE8               	bsf	232,5,b	;volatile
   906   001F42                     
   907                           ; BSR set to: 14
   908                           ;serial.c: 19:     RC4STAbits.SPEN = 1;
   909   001F42  8FE7               	bsf	231,7,b	;volatile
   910   001F44                     
   911                           ; BSR set to: 14
   912   001F44  0012               	return		;funcret
   913   001F46                     __end_of_initUSART4:
   914                           	callstack 0
   915                           
   916 ;; *************** function _initDCmotorsPWM *****************
   917 ;; Defined at:
   918 ;;		line 5 in file "dc_motor.c"
   919 ;; Parameters:    Size  Location     Type
   920 ;;  PWMperiod       2    5[COMRAM] unsigned int 
   921 ;; Auto vars:     Size  Location     Type
   922 ;;		None
   923 ;; Return value:  Size  Location     Type
   924 ;;                  1    wreg      void 
   925 ;; Registers used:
   926 ;;		wreg, status,2
   927 ;; Tracked objects:
   928 ;;		On entry : 0/0
   929 ;;		On exit  : 0/0
   930 ;;		Unchanged: 0/0
   931 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   932 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   933 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   934 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   935 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   936 ;;Total ram usage:        2 bytes
   937 ;; Hardware stack levels used: 1
   938 ;; Hardware stack levels required when called: 5
   939 ;; This function calls:
   940 ;;		Nothing
   941 ;; This function is called by:
   942 ;;		_main
   943 ;; This function uses a non-reentrant model
   944 ;;
   945                           
   946                           	psect	text3
   947   001918                     __ptext3:
   948                           	callstack 0
   949   001918                     _initDCmotorsPWM:
   950                           	callstack 25
   951   001918                     
   952                           ;dc_motor.c: 7:     TRISEbits.TRISE2 = 0;
   953   001918  9485               	bcf	133,2,c	;volatile
   954                           
   955                           ;dc_motor.c: 8:     TRISEbits.TRISE4 = 0;
   956   00191A  9885               	bcf	133,4,c	;volatile
   957                           
   958                           ;dc_motor.c: 9:     TRISCbits.TRISC7 = 0;
   959   00191C  9E83               	bcf	131,7,c	;volatile
   960                           
   961                           ;dc_motor.c: 10:     TRISGbits.TRISG6 = 0;
   962   00191E  9C87               	bcf	135,6,c	;volatile
   963                           
   964                           ;dc_motor.c: 12:     LATEbits.LATE2 = 0;
   965   001920  947D               	bcf	125,2,c	;volatile
   966                           
   967                           ;dc_motor.c: 13:     LATEbits.LATE4 = 0;
   968   001922  987D               	bcf	125,4,c	;volatile
   969                           
   970                           ;dc_motor.c: 14:     LATCbits.LATC7 = 0;
   971   001924  9E7B               	bcf	123,7,c	;volatile
   972                           
   973                           ;dc_motor.c: 15:     LATGbits.LATG6 = 0;
   974   001926  9C7F               	bcf	127,6,c	;volatile
   975   001928                     
   976                           ;dc_motor.c: 18:     RE2PPS=0x05;
   977   001928  0E05               	movlw	5
   978   00192A  010E               	movlb	14	; () banked
   979   00192C  6F74               	movwf	116,b	;volatile
   980                           
   981                           ;dc_motor.c: 19:     RE4PPS=0x06;
   982   00192E  0E06               	movlw	6
   983   001930  6F76               	movwf	118,b	;volatile
   984                           
   985                           ;dc_motor.c: 20:     RC7PPS=0x07;
   986   001932  0E07               	movlw	7
   987   001934  6F69               	movwf	105,b	;volatile
   988                           
   989                           ;dc_motor.c: 21:     RG6PPS=0x08;
   990   001936  0E08               	movlw	8
   991   001938  6F88               	movwf	136,b	;volatile
   992                           
   993                           ;dc_motor.c: 24:     T2CONbits.CKPS=0b100;
   994   00193A  50BD               	movf	189,w,c	;volatile
   995   00193C  0B8F               	andlw	-113
   996   00193E  0940               	iorlw	64
   997   001940  6EBD               	movwf	189,c	;volatile
   998                           
   999                           ;dc_motor.c: 25:     T2HLTbits.MODE=0b00000;
  1000   001942  0EE0               	movlw	-32
  1001   001944  16BE               	andwf	190,f,c	;volatile
  1002                           
  1003                           ;dc_motor.c: 26:     T2CLKCONbits.CS=0b0001;
  1004   001946  50BF               	movf	191,w,c	;volatile
  1005   001948  0BF0               	andlw	-16
  1006   00194A  0901               	iorlw	1
  1007   00194C  6EBF               	movwf	191,c	;volatile
  1008   00194E                     
  1009                           ; BSR set to: 14
  1010                           ;dc_motor.c: 30:     T2PR=PWMperiod;
  1011   00194E  C006  FFBC         	movff	initDCmotorsPWM@PWMperiod,4028	;volatile
  1012   001952                     
  1013                           ; BSR set to: 14
  1014                           ;dc_motor.c: 31:     T2CONbits.ON=1;
  1015   001952  8EBD               	bsf	189,7,c	;volatile
  1016                           
  1017                           ;dc_motor.c: 35:     CCPR1H=0;
  1018   001954  0E00               	movlw	0
  1019   001956  6EAA               	movwf	170,c	;volatile
  1020                           
  1021                           ;dc_motor.c: 36:     CCPR2H=0;
  1022   001958  0E00               	movlw	0
  1023   00195A  6EA6               	movwf	166,c	;volatile
  1024                           
  1025                           ;dc_motor.c: 37:     CCPR3H=0;
  1026   00195C  0E00               	movlw	0
  1027   00195E  010F               	movlb	15	; () banked
  1028   001960  6F25               	movwf	37,b	;volatile
  1029                           
  1030                           ;dc_motor.c: 38:     CCPR4H=0;
  1031   001962  0E00               	movlw	0
  1032   001964  6F21               	movwf	33,b	;volatile
  1033                           
  1034                           ;dc_motor.c: 41:     CCPTMRS0bits.C1TSEL=0;
  1035   001966  0EFC               	movlw	-4
  1036   001968  16AD               	andwf	173,f,c	;volatile
  1037                           
  1038                           ;dc_motor.c: 42:     CCPTMRS0bits.C2TSEL=0;
  1039   00196A  0EF3               	movlw	-13
  1040   00196C  16AD               	andwf	173,f,c	;volatile
  1041                           
  1042                           ;dc_motor.c: 43:     CCPTMRS0bits.C3TSEL=0;
  1043   00196E  0ECF               	movlw	-49
  1044   001970  16AD               	andwf	173,f,c	;volatile
  1045                           
  1046                           ;dc_motor.c: 44:     CCPTMRS0bits.C4TSEL=0;
  1047   001972  0E3F               	movlw	-193
  1048   001974  16AD               	andwf	173,f,c	;volatile
  1049   001976                     
  1050                           ; BSR set to: 15
  1051                           ;dc_motor.c: 47:     CCP1CONbits.FMT=1;
  1052   001976  88AB               	bsf	171,4,c	;volatile
  1053                           
  1054                           ;dc_motor.c: 48:     CCP1CONbits.CCP1MODE=0b1100;
  1055   001978  50AB               	movf	171,w,c	;volatile
  1056   00197A  0BF0               	andlw	-16
  1057   00197C  090C               	iorlw	12
  1058   00197E  6EAB               	movwf	171,c	;volatile
  1059   001980                     
  1060                           ; BSR set to: 15
  1061                           ;dc_motor.c: 49:     CCP1CONbits.EN=1;
  1062   001980  8EAB               	bsf	171,7,c	;volatile
  1063   001982                     
  1064                           ; BSR set to: 15
  1065                           ;dc_motor.c: 52:     CCP2CONbits.FMT=1;
  1066   001982  88A7               	bsf	167,4,c	;volatile
  1067                           
  1068                           ;dc_motor.c: 53:     CCP2CONbits.CCP2MODE=0b1100;
  1069   001984  50A7               	movf	167,w,c	;volatile
  1070   001986  0BF0               	andlw	-16
  1071   001988  090C               	iorlw	12
  1072   00198A  6EA7               	movwf	167,c	;volatile
  1073   00198C                     
  1074                           ; BSR set to: 15
  1075                           ;dc_motor.c: 54:     CCP2CONbits.EN=1;
  1076   00198C  8EA7               	bsf	167,7,c	;volatile
  1077   00198E                     
  1078                           ; BSR set to: 15
  1079                           ;dc_motor.c: 58:     CCP3CONbits.FMT=1;
  1080   00198E  8926               	bsf	38,4,b	;volatile
  1081                           
  1082                           ;dc_motor.c: 59:     CCP3CONbits.CCP3MODE=0b1100;
  1083   001990  5126               	movf	38,w,b	;volatile
  1084   001992  0BF0               	andlw	-16
  1085   001994  090C               	iorlw	12
  1086   001996  6F26               	movwf	38,b	;volatile
  1087   001998                     
  1088                           ; BSR set to: 15
  1089                           ;dc_motor.c: 60:     CCP3CONbits.EN=1;
  1090   001998  8F26               	bsf	38,7,b	;volatile
  1091   00199A                     
  1092                           ; BSR set to: 15
  1093                           ;dc_motor.c: 63:     CCP4CONbits.FMT=1;
  1094   00199A  8922               	bsf	34,4,b	;volatile
  1095                           
  1096                           ;dc_motor.c: 64:     CCP4CONbits.CCP4MODE=0b1100;
  1097   00199C  5122               	movf	34,w,b	;volatile
  1098   00199E  0BF0               	andlw	-16
  1099   0019A0  090C               	iorlw	12
  1100   0019A2  6F22               	movwf	34,b	;volatile
  1101   0019A4                     
  1102                           ; BSR set to: 15
  1103                           ;dc_motor.c: 65:     CCP4CONbits.EN=1;
  1104   0019A4  8F22               	bsf	34,7,b	;volatile
  1105   0019A6                     
  1106                           ; BSR set to: 15
  1107   0019A6  0012               	return		;funcret
  1108   0019A8                     __end_of_initDCmotorsPWM:
  1109                           	callstack 0
  1110                           
  1111 ;; *************** function _color_click_init *****************
  1112 ;; Defined at:
  1113 ;;		line 10 in file "color.c"
  1114 ;; Parameters:    Size  Location     Type
  1115 ;;		None
  1116 ;; Auto vars:     Size  Location     Type
  1117 ;;		None
  1118 ;; Return value:  Size  Location     Type
  1119 ;;                  1    wreg      void 
  1120 ;; Registers used:
  1121 ;;		wreg, status,2, status,0, cstack
  1122 ;; Tracked objects:
  1123 ;;		On entry : 0/0
  1124 ;;		On exit  : 0/0
  1125 ;;		Unchanged: 0/0
  1126 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1127 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1128 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1129 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1130 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1131 ;;Total ram usage:        1 bytes
  1132 ;; Hardware stack levels used: 1
  1133 ;; Hardware stack levels required when called: 8
  1134 ;; This function calls:
  1135 ;;		_I2C_2_Master_Init
  1136 ;;		_color_writetoaddr
  1137 ;; This function is called by:
  1138 ;;		_main
  1139 ;; This function uses a non-reentrant model
  1140 ;;
  1141                           
  1142                           	psect	text4
  1143   001DAA                     __ptext4:
  1144                           	callstack 0
  1145   001DAA                     _color_click_init:
  1146                           	callstack 22
  1147   001DAA                     
  1148                           ;color.c: 13:     I2C_2_Master_Init();
  1149   001DAA  EC1F  F00F         	call	_I2C_2_Master_Init	;wreg free
  1150   001DAE                     
  1151                           ;color.c: 15:   color_writetoaddr(0x00, 0x01);
  1152   001DAE  0E01               	movlw	1
  1153   001DB0  6E08               	movwf	color_writetoaddr@value^0,c
  1154   001DB2  0E00               	movlw	0
  1155   001DB4  ECA3  F00F         	call	_color_writetoaddr
  1156   001DB8                     
  1157                           ;color.c: 16:     _delay((unsigned long)((3)*(64000000/4000.0)));
  1158   001DB8  0E3F               	movlw	63
  1159   001DBA  6E0A               	movwf	??_color_click_init^0,c
  1160   001DBC  0E55               	movlw	85
  1161   001DBE                     u3127:
  1162   001DBE  2EE8               	decfsz	wreg,f,c
  1163   001DC0  D7FE               	bra	u3127
  1164   001DC2  2E0A               	decfsz	??_color_click_init^0,f,c
  1165   001DC4  D7FC               	bra	u3127
  1166   001DC6  F000               	nop	
  1167   001DC8                     
  1168                           ;color.c: 18:  color_writetoaddr(0x00, 0x03);
  1169   001DC8  0E03               	movlw	3
  1170   001DCA  6E08               	movwf	color_writetoaddr@value^0,c
  1171   001DCC  0E00               	movlw	0
  1172   001DCE  ECA3  F00F         	call	_color_writetoaddr
  1173   001DD2                     
  1174                           ;color.c: 20:  color_writetoaddr(0x01, 0xD5);
  1175   001DD2  0ED5               	movlw	213
  1176   001DD4  6E08               	movwf	color_writetoaddr@value^0,c
  1177   001DD6  0E01               	movlw	1
  1178   001DD8  ECA3  F00F         	call	_color_writetoaddr
  1179   001DDC  0012               	return		;funcret
  1180   001DDE                     __end_of_color_click_init:
  1181                           	callstack 0
  1182                           
  1183 ;; *************** function _color_writetoaddr *****************
  1184 ;; Defined at:
  1185 ;;		line 23 in file "color.c"
  1186 ;; Parameters:    Size  Location     Type
  1187 ;;  address         1    wreg     unsigned char 
  1188 ;;  value           1    7[COMRAM] unsigned char 
  1189 ;; Auto vars:     Size  Location     Type
  1190 ;;  address         1    8[COMRAM] unsigned char 
  1191 ;; Return value:  Size  Location     Type
  1192 ;;                  1    wreg      void 
  1193 ;; Registers used:
  1194 ;;		wreg, status,2, status,0, cstack
  1195 ;; Tracked objects:
  1196 ;;		On entry : 0/0
  1197 ;;		On exit  : 0/0
  1198 ;;		Unchanged: 0/0
  1199 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1200 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1201 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1202 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1203 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1204 ;;Total ram usage:        2 bytes
  1205 ;; Hardware stack levels used: 1
  1206 ;; Hardware stack levels required when called: 7
  1207 ;; This function calls:
  1208 ;;		_I2C_2_Master_Start
  1209 ;;		_I2C_2_Master_Stop
  1210 ;;		_I2C_2_Master_Write
  1211 ;; This function is called by:
  1212 ;;		_color_click_init
  1213 ;;		_colorclick_interrupts_init
  1214 ;; This function uses a non-reentrant model
  1215 ;;
  1216                           
  1217                           	psect	text5
  1218   001F46                     __ptext5:
  1219                           	callstack 0
  1220   001F46                     _color_writetoaddr:
  1221                           	callstack 22
  1222                           
  1223                           ;incstack = 0
  1224                           ;color_writetoaddr@address stored from wreg
  1225   001F46  6E09               	movwf	color_writetoaddr@address^0,c
  1226   001F48                     
  1227                           ;color.c: 24:     I2C_2_Master_Start();
  1228   001F48  ECEF  F00F         	call	_I2C_2_Master_Start	;wreg free
  1229                           
  1230                           ;color.c: 25:     I2C_2_Master_Write(0x52 | 0x00);
  1231   001F4C  0E52               	movlw	82
  1232   001F4E  ECD9  F00F         	call	_I2C_2_Master_Write
  1233                           
  1234                           ;color.c: 26:     I2C_2_Master_Write(0x80 | address);
  1235   001F52  5009               	movf	color_writetoaddr@address^0,w,c
  1236   001F54  0980               	iorlw	128
  1237   001F56  ECD9  F00F         	call	_I2C_2_Master_Write
  1238                           
  1239                           ;color.c: 27:     I2C_2_Master_Write(value);
  1240   001F5A  5008               	movf	color_writetoaddr@value^0,w,c
  1241   001F5C  ECD9  F00F         	call	_I2C_2_Master_Write
  1242                           
  1243                           ;color.c: 28:     I2C_2_Master_Stop();
  1244   001F60  ECEA  F00F         	call	_I2C_2_Master_Stop	;wreg free
  1245   001F64  0012               	return		;funcret
  1246   001F66                     __end_of_color_writetoaddr:
  1247                           	callstack 0
  1248                           
  1249 ;; *************** function _I2C_2_Master_Init *****************
  1250 ;; Defined at:
  1251 ;;		line 4 in file "i2c.c"
  1252 ;; Parameters:    Size  Location     Type
  1253 ;;		None
  1254 ;; Auto vars:     Size  Location     Type
  1255 ;;		None
  1256 ;; Return value:  Size  Location     Type
  1257 ;;                  1    wreg      void 
  1258 ;; Registers used:
  1259 ;;		wreg, status,2
  1260 ;; Tracked objects:
  1261 ;;		On entry : 0/0
  1262 ;;		On exit  : 0/0
  1263 ;;		Unchanged: 0/0
  1264 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1265 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1266 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1267 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1268 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1269 ;;Total ram usage:        0 bytes
  1270 ;; Hardware stack levels used: 1
  1271 ;; Hardware stack levels required when called: 5
  1272 ;; This function calls:
  1273 ;;		Nothing
  1274 ;; This function is called by:
  1275 ;;		_color_click_init
  1276 ;; This function uses a non-reentrant model
  1277 ;;
  1278                           
  1279                           	psect	text6
  1280   001E3E                     __ptext6:
  1281                           	callstack 0
  1282   001E3E                     _I2C_2_Master_Init:
  1283                           	callstack 24
  1284   001E3E                     
  1285                           ;i2c.c: 7:   SSP2CON1bits.SSPM= 0b1000;
  1286   001E3E  010E               	movlb	14	; () banked
  1287   001E40  51D9               	movf	217,w,b	;volatile
  1288   001E42  0BF0               	andlw	-16
  1289   001E44  0908               	iorlw	8
  1290   001E46  6FD9               	movwf	217,b	;volatile
  1291   001E48                     
  1292                           ; BSR set to: 14
  1293                           ;i2c.c: 8:   SSP2CON1bits.SSPEN = 1;
  1294   001E48  8BD9               	bsf	217,5,b	;volatile
  1295                           
  1296                           ;i2c.c: 9:   SSP2ADD = (64000000/(4*100000))-1;
  1297   001E4A  0E9F               	movlw	159
  1298   001E4C  6FD6               	movwf	214,b	;volatile
  1299   001E4E                     
  1300                           ; BSR set to: 14
  1301                           ;i2c.c: 12:   TRISDbits.TRISD5 = 1;
  1302   001E4E  8A84               	bsf	132,5,c	;volatile
  1303   001E50                     
  1304                           ; BSR set to: 14
  1305                           ;i2c.c: 13:   TRISDbits.TRISD6 = 1;
  1306   001E50  8C84               	bsf	132,6,c	;volatile
  1307   001E52                     
  1308                           ; BSR set to: 14
  1309                           ;i2c.c: 14:   ANSELDbits.ANSELD5=0;
  1310   001E52  9BA7               	bcf	167,5,b	;volatile
  1311   001E54                     
  1312                           ; BSR set to: 14
  1313                           ;i2c.c: 15:   ANSELDbits.ANSELD6=0;
  1314   001E54  9DA7               	bcf	167,6,b	;volatile
  1315                           
  1316                           ;i2c.c: 16:   SSP2DATPPS=0x1D;
  1317   001E56  0E1D               	movlw	29
  1318   001E58  6F1D               	movwf	29,b	;volatile
  1319                           
  1320                           ;i2c.c: 17:   SSP2CLKPPS=0x1E;
  1321   001E5A  0E1E               	movlw	30
  1322   001E5C  6F1C               	movwf	28,b	;volatile
  1323                           
  1324                           ;i2c.c: 18:   RD5PPS=0x1C;
  1325   001E5E  0E1C               	movlw	28
  1326   001E60  6F6F               	movwf	111,b	;volatile
  1327                           
  1328                           ;i2c.c: 19:   RD6PPS=0x1B;
  1329   001E62  0E1B               	movlw	27
  1330   001E64  6F70               	movwf	112,b	;volatile
  1331   001E66                     
  1332                           ; BSR set to: 14
  1333   001E66  0012               	return		;funcret
  1334   001E68                     __end_of_I2C_2_Master_Init:
  1335                           	callstack 0
  1336                           
  1337 ;; *************** function _buggy_color_response *****************
  1338 ;; Defined at:
  1339 ;;		line 103 in file "color.c"
  1340 ;; Parameters:    Size  Location     Type
  1341 ;;  mL              2   54[COMRAM] PTR struct DC_motor
  1342 ;;		 -> motorL(9), 
  1343 ;;  mR              2   56[COMRAM] PTR struct DC_motor
  1344 ;;		 -> motorR(9), 
  1345 ;;  c               2   58[COMRAM] PTR struct colors
  1346 ;;		 -> color(20), 
  1347 ;; Auto vars:     Size  Location     Type
  1348 ;;  i               2    2[BANK0 ] unsigned int 
  1349 ;; Return value:  Size  Location     Type
  1350 ;;                  1    wreg      void 
  1351 ;; Registers used:
  1352 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1353 ;; Tracked objects:
  1354 ;;		On entry : 0/0
  1355 ;;		On exit  : 0/0
  1356 ;;		Unchanged: 0/0
  1357 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1358 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1359 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1360 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1361 ;;      Totals:         6       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1362 ;;Total ram usage:       10 bytes
  1363 ;; Hardware stack levels used: 1
  1364 ;; Hardware stack levels required when called: 11
  1365 ;; This function calls:
  1366 ;;		_READcolor
  1367 ;;		___flge
  1368 ;;		_card_append
  1369 ;;		_colourcards_normaliseRGBC
  1370 ;;		_forward
  1371 ;;		_get_timer_val
  1372 ;;		_instructions
  1373 ;;		_stop
  1374 ;;		_timer_append
  1375 ;;		_timer_reset
  1376 ;; This function is called by:
  1377 ;;		_main
  1378 ;; This function uses a non-reentrant model
  1379 ;;
  1380                           
  1381                           	psect	text7
  1382   000058                     __ptext7:
  1383                           	callstack 0
  1384   000058                     _buggy_color_response:
  1385                           	callstack 19
  1386   000058                     
  1387                           ;color.c: 105:     READcolor(&color);
  1388   000058  0E44               	movlw	low _color
  1389   00005A  6E11               	movwf	READcolor@c^0,c
  1390   00005C  0E00               	movlw	high _color
  1391   00005E  6E12               	movwf	(READcolor@c+1)^0,c
  1392   000060  ECEF  F00E         	call	_READcolor	;wreg free
  1393                           
  1394                           ;color.c: 106:     colourcards_normaliseRGBC(&color);
  1395   000064  0E44               	movlw	low _color
  1396   000066  6E2D               	movwf	colourcards_normaliseRGBC@c^0,c
  1397   000068  0E00               	movlw	high _color
  1398   00006A  6E2E               	movwf	(colourcards_normaliseRGBC@c+1)^0,c
  1399   00006C  ECDF  F009         	call	_colourcards_normaliseRGBC	;wreg free
  1400   000070                     
  1401                           ;color.c: 108:     if (color.C > color_upperbound){
  1402   000070  504A               	movf	(_color+6)^0,w,c
  1403   000072  5C3D               	subwf	_color_upperbound^0,w,c
  1404   000074  504B               	movf	(_color+7)^0,w,c
  1405   000076  583E               	subwfb	(_color_upperbound+1)^0,w,c
  1406   000078  B0D8               	btfsc	status,0,c
  1407   00007A  EF41  F000         	goto	u2891
  1408   00007E  EF43  F000         	goto	u2890
  1409   000082                     u2891:
  1410   000082  EFA6  F003         	goto	l3669
  1411   000086                     u2890:
  1412   000086                     
  1413                           ;color.c: 109:         timer_append(get_timer_val(), &timer_index, &timer_memory);
  1414   000086  0E58               	movlw	low _timer_index
  1415   000088  6E0E               	movwf	timer_append@timer_index^0,c
  1416   00008A  0E00               	movlw	high _timer_index
  1417   00008C  6E0F               	movwf	(timer_append@timer_index+1)^0,c
  1418   00008E  0EA0               	movlw	low _timer_memory
  1419   000090  6E10               	movwf	timer_append@timer_memory^0,c
  1420   000092  0E00               	movlw	high _timer_memory
  1421   000094  6E11               	movwf	(timer_append@timer_memory+1)^0,c
  1422   000096  EC82  F00F         	call	_get_timer_val	;wreg free
  1423   00009A  5006               	movf	?_get_timer_val^0,w,c
  1424   00009C  EC99  F00E         	call	_timer_append
  1425   0000A0                     
  1426                           ;color.c: 110:         stop(mL,mR); _delay((unsigned long)((500)*(64000000/4000.0)));
  1427   0000A0  C037  F019         	movff	buggy_color_response@mL,stop@mL
  1428   0000A4  C038  F01A         	movff	buggy_color_response@mL+1,stop@mL+1
  1429   0000A8  C039  F01B         	movff	buggy_color_response@mR,stop@mR
  1430   0000AC  C03A  F01C         	movff	buggy_color_response@mR+1,stop@mR+1
  1431   0000B0  EC34  F00C         	call	_stop	;wreg free
  1432   0000B4  0E29               	movlw	41
  1433   0000B6  0100               	movlb	0	; () banked
  1434   0000B8  6FDB               	movwf	(??_buggy_color_response+1)& (0+255),b
  1435   0000BA  0E96               	movlw	150
  1436   0000BC  6FDA               	movwf	??_buggy_color_response& (0+255),b
  1437   0000BE  0E7F               	movlw	127
  1438   0000C0                     u3137:
  1439   0000C0  2EE8               	decfsz	wreg,f,c
  1440   0000C2  D7FE               	bra	u3137
  1441   0000C4  2FDA               	decfsz	??_buggy_color_response& (0+255),f,b
  1442   0000C6  D7FC               	bra	u3137
  1443   0000C8  2FDB               	decfsz	(??_buggy_color_response+1)& (0+255),f,b
  1444   0000CA  D7FA               	bra	u3137
  1445   0000CC                     
  1446                           ;color.c: 111:         READcolor(&color); colourcards_normaliseRGBC(&color); _delay((uns
      +                          igned long)((500)*(64000000/4000.0)));
  1447   0000CC  0E44               	movlw	low _color
  1448   0000CE  6E11               	movwf	READcolor@c^0,c
  1449   0000D0  0E00               	movlw	high _color
  1450   0000D2  6E12               	movwf	(READcolor@c+1)^0,c
  1451   0000D4  ECEF  F00E         	call	_READcolor	;wreg free
  1452   0000D8  0E44               	movlw	low _color
  1453   0000DA  6E2D               	movwf	colourcards_normaliseRGBC@c^0,c
  1454   0000DC  0E00               	movlw	high _color
  1455   0000DE  6E2E               	movwf	(colourcards_normaliseRGBC@c+1)^0,c
  1456   0000E0  ECDF  F009         	call	_colourcards_normaliseRGBC	;wreg free
  1457   0000E4  0E29               	movlw	41
  1458   0000E6  0100               	movlb	0	; () banked
  1459   0000E8  6FDB               	movwf	(??_buggy_color_response+1)& (0+255),b
  1460   0000EA  0E96               	movlw	150
  1461   0000EC  6FDA               	movwf	??_buggy_color_response& (0+255),b
  1462   0000EE  0E7F               	movlw	127
  1463   0000F0                     u3147:
  1464   0000F0  2EE8               	decfsz	wreg,f,c
  1465   0000F2  D7FE               	bra	u3147
  1466   0000F4  2FDA               	decfsz	??_buggy_color_response& (0+255),f,b
  1467   0000F6  D7FC               	bra	u3147
  1468   0000F8  2FDB               	decfsz	(??_buggy_color_response+1)& (0+255),f,b
  1469   0000FA  D7FA               	bra	u3147
  1470   0000FC                     
  1471                           ;color.c: 113:         if (color.R_norm > 0.77 && color.B_norm < 0.18 && color.G_norm < 
      +                          0.14){
  1472   0000FC  0EB8               	movlw	184
  1473   0000FE  6E06               	movwf	___flge@ff1^0,c
  1474   000100  0E1E               	movlw	30
  1475   000102  6E07               	movwf	(___flge@ff1+1)^0,c
  1476   000104  0E45               	movlw	69
  1477   000106  6E08               	movwf	(___flge@ff1+2)^0,c
  1478   000108  0E3F               	movlw	63
  1479   00010A  6E09               	movwf	(___flge@ff1+3)^0,c
  1480   00010C  C04C  F00A         	movff	_color+8,___flge@ff2
  1481   000110  C04D  F00B         	movff	_color+9,___flge@ff2+1
  1482   000114  C04E  F00C         	movff	_color+10,___flge@ff2+2
  1483   000118  C04F  F00D         	movff	_color+11,___flge@ff2+3
  1484   00011C  EC74  F00A         	call	___flge	;wreg free
  1485   000120  B0D8               	btfsc	status,0,c
  1486   000122  EF95  F000         	goto	u2901
  1487   000126  EF97  F000         	goto	u2900
  1488   00012A                     u2901:
  1489   00012A  EFE6  F000         	goto	l3589
  1490   00012E                     u2900:
  1491   00012E  C050  F006         	movff	_color+12,___flge@ff1
  1492   000132  C051  F007         	movff	_color+13,___flge@ff1+1
  1493   000136  C052  F008         	movff	_color+14,___flge@ff1+2
  1494   00013A  C053  F009         	movff	_color+15,___flge@ff1+3
  1495   00013E  0EEC               	movlw	236
  1496   000140  6E0A               	movwf	___flge@ff2^0,c
  1497   000142  0E51               	movlw	81
  1498   000144  6E0B               	movwf	(___flge@ff2+1)^0,c
  1499   000146  0E38               	movlw	56
  1500   000148  6E0C               	movwf	(___flge@ff2+2)^0,c
  1501   00014A  0E3E               	movlw	62
  1502   00014C  6E0D               	movwf	(___flge@ff2+3)^0,c
  1503   00014E  EC74  F00A         	call	___flge	;wreg free
  1504   000152  B0D8               	btfsc	status,0,c
  1505   000154  EFAE  F000         	goto	u2911
  1506   000158  EFB0  F000         	goto	u2910
  1507   00015C                     u2911:
  1508   00015C  EFE6  F000         	goto	l3589
  1509   000160                     u2910:
  1510   000160  C054  F006         	movff	_color+16,___flge@ff1
  1511   000164  C055  F007         	movff	_color+17,___flge@ff1+1
  1512   000168  C056  F008         	movff	_color+18,___flge@ff1+2
  1513   00016C  C057  F009         	movff	_color+19,___flge@ff1+3
  1514   000170  0E29               	movlw	41
  1515   000172  6E0A               	movwf	___flge@ff2^0,c
  1516   000174  0E5C               	movlw	92
  1517   000176  6E0B               	movwf	(___flge@ff2+1)^0,c
  1518   000178  0E0F               	movlw	15
  1519   00017A  6E0C               	movwf	(___flge@ff2+2)^0,c
  1520   00017C  0E3E               	movlw	62
  1521   00017E  6E0D               	movwf	(___flge@ff2+3)^0,c
  1522   000180  EC74  F00A         	call	___flge	;wreg free
  1523   000184  B0D8               	btfsc	status,0,c
  1524   000186  EFC7  F000         	goto	u2921
  1525   00018A  EFC9  F000         	goto	u2920
  1526   00018E                     u2921:
  1527   00018E  EFE6  F000         	goto	l3589
  1528   000192                     u2920:
  1529   000192                     
  1530                           ;color.c: 114:         card_append(2, &card_count_index, *card_memory);
  1531   000192  0E59               	movlw	low _card_count_index
  1532   000194  6E06               	movwf	card_append@card_count_index^0,c
  1533   000196  0E00               	movlw	high _card_count_index
  1534   000198  6E07               	movwf	(card_append@card_count_index+1)^0,c
  1535   00019A  0100               	movlb	0	; () banked
  1536   00019C  5160               	movf	_card_memory& (0+255),w,b
  1537   00019E  6FDA               	movwf	??_buggy_color_response& (0+255),b
  1538   0001A0  6BDB               	clrf	(??_buggy_color_response+1)& (0+255),b
  1539   0001A2  C0DA  F008         	movff	??_buggy_color_response,card_append@card_memory
  1540   0001A6  C0DB  F009         	movff	??_buggy_color_response+1,card_append@card_memory+1
  1541   0001AA  0E02               	movlw	2
  1542   0001AC  ECB7  F00E         	call	_card_append
  1543   0001B0                     
  1544                           ;color.c: 115:         instructions(mL,mR,1);
  1545   0001B0  C037  F02F         	movff	buggy_color_response@mL,instructions@mL
  1546   0001B4  C038  F030         	movff	buggy_color_response@mL+1,instructions@mL+1
  1547   0001B8  C039  F031         	movff	buggy_color_response@mR,instructions@mR
  1548   0001BC  C03A  F032         	movff	buggy_color_response@mR+1,instructions@mR+1
  1549   0001C0  0E00               	movlw	0
  1550   0001C2  6E34               	movwf	(instructions@count+1)^0,c
  1551   0001C4  0E01               	movlw	1
  1552   0001C6  6E33               	movwf	instructions@count^0,c
  1553   0001C8  EC7E  F005         	call	_instructions	;wreg free
  1554   0001CC                     l3589:
  1555                           
  1556                           ;color.c: 119:         if (color.B_norm < 0.25 && color.G_norm > 0.40) {
  1557   0001CC  C050  F006         	movff	_color+12,___flge@ff1
  1558   0001D0  C051  F007         	movff	_color+13,___flge@ff1+1
  1559   0001D4  C052  F008         	movff	_color+14,___flge@ff1+2
  1560   0001D8  C053  F009         	movff	_color+15,___flge@ff1+3
  1561   0001DC  0E00               	movlw	0
  1562   0001DE  6E0A               	movwf	___flge@ff2^0,c
  1563   0001E0  0E00               	movlw	0
  1564   0001E2  6E0B               	movwf	(___flge@ff2+1)^0,c
  1565   0001E4  0E80               	movlw	128
  1566   0001E6  6E0C               	movwf	(___flge@ff2+2)^0,c
  1567   0001E8  0E3E               	movlw	62
  1568   0001EA  6E0D               	movwf	(___flge@ff2+3)^0,c
  1569   0001EC  EC74  F00A         	call	___flge	;wreg free
  1570   0001F0  B0D8               	btfsc	status,0,c
  1571   0001F2  EFFD  F000         	goto	u2931
  1572   0001F6  EFFF  F000         	goto	u2930
  1573   0001FA                     u2931:
  1574   0001FA  EF35  F001         	goto	l3597
  1575   0001FE                     u2930:
  1576   0001FE  0ECD               	movlw	205
  1577   000200  6E06               	movwf	___flge@ff1^0,c
  1578   000202  0ECC               	movlw	204
  1579   000204  6E07               	movwf	(___flge@ff1+1)^0,c
  1580   000206  0ECC               	movlw	204
  1581   000208  6E08               	movwf	(___flge@ff1+2)^0,c
  1582   00020A  0E3E               	movlw	62
  1583   00020C  6E09               	movwf	(___flge@ff1+3)^0,c
  1584   00020E  C054  F00A         	movff	_color+16,___flge@ff2
  1585   000212  C055  F00B         	movff	_color+17,___flge@ff2+1
  1586   000216  C056  F00C         	movff	_color+18,___flge@ff2+2
  1587   00021A  C057  F00D         	movff	_color+19,___flge@ff2+3
  1588   00021E  EC74  F00A         	call	___flge	;wreg free
  1589   000222  B0D8               	btfsc	status,0,c
  1590   000224  EF16  F001         	goto	u2941
  1591   000228  EF18  F001         	goto	u2940
  1592   00022C                     u2941:
  1593   00022C  EF35  F001         	goto	l3597
  1594   000230                     u2940:
  1595   000230                     
  1596                           ;color.c: 120:         card_append(1, &card_count_index, *card_memory);
  1597   000230  0E59               	movlw	low _card_count_index
  1598   000232  6E06               	movwf	card_append@card_count_index^0,c
  1599   000234  0E00               	movlw	high _card_count_index
  1600   000236  6E07               	movwf	(card_append@card_count_index+1)^0,c
  1601   000238  0100               	movlb	0	; () banked
  1602   00023A  5160               	movf	_card_memory& (0+255),w,b
  1603   00023C  6FDA               	movwf	??_buggy_color_response& (0+255),b
  1604   00023E  6BDB               	clrf	(??_buggy_color_response+1)& (0+255),b
  1605   000240  C0DA  F008         	movff	??_buggy_color_response,card_append@card_memory
  1606   000244  C0DB  F009         	movff	??_buggy_color_response+1,card_append@card_memory+1
  1607   000248  0E01               	movlw	1
  1608   00024A  ECB7  F00E         	call	_card_append
  1609   00024E                     
  1610                           ;color.c: 121:         instructions(mL,mR,2);
  1611   00024E  C037  F02F         	movff	buggy_color_response@mL,instructions@mL
  1612   000252  C038  F030         	movff	buggy_color_response@mL+1,instructions@mL+1
  1613   000256  C039  F031         	movff	buggy_color_response@mR,instructions@mR
  1614   00025A  C03A  F032         	movff	buggy_color_response@mR+1,instructions@mR+1
  1615   00025E  0E00               	movlw	0
  1616   000260  6E34               	movwf	(instructions@count+1)^0,c
  1617   000262  0E02               	movlw	2
  1618   000264  6E33               	movwf	instructions@count^0,c
  1619   000266  EC7E  F005         	call	_instructions	;wreg free
  1620   00026A                     l3597:
  1621                           
  1622                           ;color.c: 125:         if (color.R_norm < 0.38 && color.B_norm > 0.32 && color.G_norm > 
      +                          0.34){
  1623   00026A  C04C  F006         	movff	_color+8,___flge@ff1
  1624   00026E  C04D  F007         	movff	_color+9,___flge@ff1+1
  1625   000272  C04E  F008         	movff	_color+10,___flge@ff1+2
  1626   000276  C04F  F009         	movff	_color+11,___flge@ff1+3
  1627   00027A  0E5C               	movlw	92
  1628   00027C  6E0A               	movwf	___flge@ff2^0,c
  1629   00027E  0E8F               	movlw	143
  1630   000280  6E0B               	movwf	(___flge@ff2+1)^0,c
  1631   000282  0EC2               	movlw	194
  1632   000284  6E0C               	movwf	(___flge@ff2+2)^0,c
  1633   000286  0E3E               	movlw	62
  1634   000288  6E0D               	movwf	(___flge@ff2+3)^0,c
  1635   00028A  EC74  F00A         	call	___flge	;wreg free
  1636   00028E  B0D8               	btfsc	status,0,c
  1637   000290  EF4C  F001         	goto	u2951
  1638   000294  EF4E  F001         	goto	u2950
  1639   000298                     u2951:
  1640   000298  EF9D  F001         	goto	l3607
  1641   00029C                     u2950:
  1642   00029C  0E0A               	movlw	10
  1643   00029E  6E06               	movwf	___flge@ff1^0,c
  1644   0002A0  0ED7               	movlw	215
  1645   0002A2  6E07               	movwf	(___flge@ff1+1)^0,c
  1646   0002A4  0EA3               	movlw	163
  1647   0002A6  6E08               	movwf	(___flge@ff1+2)^0,c
  1648   0002A8  0E3E               	movlw	62
  1649   0002AA  6E09               	movwf	(___flge@ff1+3)^0,c
  1650   0002AC  C050  F00A         	movff	_color+12,___flge@ff2
  1651   0002B0  C051  F00B         	movff	_color+13,___flge@ff2+1
  1652   0002B4  C052  F00C         	movff	_color+14,___flge@ff2+2
  1653   0002B8  C053  F00D         	movff	_color+15,___flge@ff2+3
  1654   0002BC  EC74  F00A         	call	___flge	;wreg free
  1655   0002C0  B0D8               	btfsc	status,0,c
  1656   0002C2  EF65  F001         	goto	u2961
  1657   0002C6  EF67  F001         	goto	u2960
  1658   0002CA                     u2961:
  1659   0002CA  EF9D  F001         	goto	l3607
  1660   0002CE                     u2960:
  1661   0002CE  0E7B               	movlw	123
  1662   0002D0  6E06               	movwf	___flge@ff1^0,c
  1663   0002D2  0E14               	movlw	20
  1664   0002D4  6E07               	movwf	(___flge@ff1+1)^0,c
  1665   0002D6  0EAE               	movlw	174
  1666   0002D8  6E08               	movwf	(___flge@ff1+2)^0,c
  1667   0002DA  0E3E               	movlw	62
  1668   0002DC  6E09               	movwf	(___flge@ff1+3)^0,c
  1669   0002DE  C054  F00A         	movff	_color+16,___flge@ff2
  1670   0002E2  C055  F00B         	movff	_color+17,___flge@ff2+1
  1671   0002E6  C056  F00C         	movff	_color+18,___flge@ff2+2
  1672   0002EA  C057  F00D         	movff	_color+19,___flge@ff2+3
  1673   0002EE  EC74  F00A         	call	___flge	;wreg free
  1674   0002F2  B0D8               	btfsc	status,0,c
  1675   0002F4  EF7E  F001         	goto	u2971
  1676   0002F8  EF80  F001         	goto	u2970
  1677   0002FC                     u2971:
  1678   0002FC  EF9D  F001         	goto	l3607
  1679   000300                     u2970:
  1680   000300                     
  1681                           ;color.c: 126:         card_append(3, &card_count_index, *card_memory);
  1682   000300  0E59               	movlw	low _card_count_index
  1683   000302  6E06               	movwf	card_append@card_count_index^0,c
  1684   000304  0E00               	movlw	high _card_count_index
  1685   000306  6E07               	movwf	(card_append@card_count_index+1)^0,c
  1686   000308  0100               	movlb	0	; () banked
  1687   00030A  5160               	movf	_card_memory& (0+255),w,b
  1688   00030C  6FDA               	movwf	??_buggy_color_response& (0+255),b
  1689   00030E  6BDB               	clrf	(??_buggy_color_response+1)& (0+255),b
  1690   000310  C0DA  F008         	movff	??_buggy_color_response,card_append@card_memory
  1691   000314  C0DB  F009         	movff	??_buggy_color_response+1,card_append@card_memory+1
  1692   000318  0E03               	movlw	3
  1693   00031A  ECB7  F00E         	call	_card_append
  1694   00031E                     
  1695                           ;color.c: 127:         instructions(mL,mR,3);
  1696   00031E  C037  F02F         	movff	buggy_color_response@mL,instructions@mL
  1697   000322  C038  F030         	movff	buggy_color_response@mL+1,instructions@mL+1
  1698   000326  C039  F031         	movff	buggy_color_response@mR,instructions@mR
  1699   00032A  C03A  F032         	movff	buggy_color_response@mR+1,instructions@mR+1
  1700   00032E  0E00               	movlw	0
  1701   000330  6E34               	movwf	(instructions@count+1)^0,c
  1702   000332  0E03               	movlw	3
  1703   000334  6E33               	movwf	instructions@count^0,c
  1704   000336  EC7E  F005         	call	_instructions	;wreg free
  1705   00033A                     l3607:
  1706                           
  1707                           ;color.c: 131:         if (color.R_norm > 0.52 && color.G_norm > 0.32){
  1708   00033A  0EB8               	movlw	184
  1709   00033C  6E06               	movwf	___flge@ff1^0,c
  1710   00033E  0E1E               	movlw	30
  1711   000340  6E07               	movwf	(___flge@ff1+1)^0,c
  1712   000342  0E05               	movlw	5
  1713   000344  6E08               	movwf	(___flge@ff1+2)^0,c
  1714   000346  0E3F               	movlw	63
  1715   000348  6E09               	movwf	(___flge@ff1+3)^0,c
  1716   00034A  C04C  F00A         	movff	_color+8,___flge@ff2
  1717   00034E  C04D  F00B         	movff	_color+9,___flge@ff2+1
  1718   000352  C04E  F00C         	movff	_color+10,___flge@ff2+2
  1719   000356  C04F  F00D         	movff	_color+11,___flge@ff2+3
  1720   00035A  EC74  F00A         	call	___flge	;wreg free
  1721   00035E  B0D8               	btfsc	status,0,c
  1722   000360  EFB4  F001         	goto	u2981
  1723   000364  EFB6  F001         	goto	u2980
  1724   000368                     u2981:
  1725   000368  EFEC  F001         	goto	l3615
  1726   00036C                     u2980:
  1727   00036C  0E0A               	movlw	10
  1728   00036E  6E06               	movwf	___flge@ff1^0,c
  1729   000370  0ED7               	movlw	215
  1730   000372  6E07               	movwf	(___flge@ff1+1)^0,c
  1731   000374  0EA3               	movlw	163
  1732   000376  6E08               	movwf	(___flge@ff1+2)^0,c
  1733   000378  0E3E               	movlw	62
  1734   00037A  6E09               	movwf	(___flge@ff1+3)^0,c
  1735   00037C  C054  F00A         	movff	_color+16,___flge@ff2
  1736   000380  C055  F00B         	movff	_color+17,___flge@ff2+1
  1737   000384  C056  F00C         	movff	_color+18,___flge@ff2+2
  1738   000388  C057  F00D         	movff	_color+19,___flge@ff2+3
  1739   00038C  EC74  F00A         	call	___flge	;wreg free
  1740   000390  B0D8               	btfsc	status,0,c
  1741   000392  EFCD  F001         	goto	u2991
  1742   000396  EFCF  F001         	goto	u2990
  1743   00039A                     u2991:
  1744   00039A  EFEC  F001         	goto	l3615
  1745   00039E                     u2990:
  1746   00039E                     
  1747                           ;color.c: 132:             card_append(9, &card_count_index, *card_memory);
  1748   00039E  0E59               	movlw	low _card_count_index
  1749   0003A0  6E06               	movwf	card_append@card_count_index^0,c
  1750   0003A2  0E00               	movlw	high _card_count_index
  1751   0003A4  6E07               	movwf	(card_append@card_count_index+1)^0,c
  1752   0003A6  0100               	movlb	0	; () banked
  1753   0003A8  5160               	movf	_card_memory& (0+255),w,b
  1754   0003AA  6FDA               	movwf	??_buggy_color_response& (0+255),b
  1755   0003AC  6BDB               	clrf	(??_buggy_color_response+1)& (0+255),b
  1756   0003AE  C0DA  F008         	movff	??_buggy_color_response,card_append@card_memory
  1757   0003B2  C0DB  F009         	movff	??_buggy_color_response+1,card_append@card_memory+1
  1758   0003B6  0E09               	movlw	9
  1759   0003B8  ECB7  F00E         	call	_card_append
  1760   0003BC                     
  1761                           ;color.c: 133:             instructions(mL,mR,4);
  1762   0003BC  C037  F02F         	movff	buggy_color_response@mL,instructions@mL
  1763   0003C0  C038  F030         	movff	buggy_color_response@mL+1,instructions@mL+1
  1764   0003C4  C039  F031         	movff	buggy_color_response@mR,instructions@mR
  1765   0003C8  C03A  F032         	movff	buggy_color_response@mR+1,instructions@mR+1
  1766   0003CC  0E00               	movlw	0
  1767   0003CE  6E34               	movwf	(instructions@count+1)^0,c
  1768   0003D0  0E04               	movlw	4
  1769   0003D2  6E33               	movwf	instructions@count^0,c
  1770   0003D4  EC7E  F005         	call	_instructions	;wreg free
  1771   0003D8                     l3615:
  1772                           
  1773                           ;color.c: 137:         if (color.R_norm > 0.50 && color.B_norm > 0.24 && color.G_norm < 
      +                          0.33){
  1774   0003D8  0E00               	movlw	0
  1775   0003DA  6E06               	movwf	___flge@ff1^0,c
  1776   0003DC  0E00               	movlw	0
  1777   0003DE  6E07               	movwf	(___flge@ff1+1)^0,c
  1778   0003E0  0E00               	movlw	0
  1779   0003E2  6E08               	movwf	(___flge@ff1+2)^0,c
  1780   0003E4  0E3F               	movlw	63
  1781   0003E6  6E09               	movwf	(___flge@ff1+3)^0,c
  1782   0003E8  C04C  F00A         	movff	_color+8,___flge@ff2
  1783   0003EC  C04D  F00B         	movff	_color+9,___flge@ff2+1
  1784   0003F0  C04E  F00C         	movff	_color+10,___flge@ff2+2
  1785   0003F4  C04F  F00D         	movff	_color+11,___flge@ff2+3
  1786   0003F8  EC74  F00A         	call	___flge	;wreg free
  1787   0003FC  B0D8               	btfsc	status,0,c
  1788   0003FE  EF03  F002         	goto	u3001
  1789   000402  EF05  F002         	goto	u3000
  1790   000406                     u3001:
  1791   000406  EF54  F002         	goto	l3625
  1792   00040A                     u3000:
  1793   00040A  0E8F               	movlw	143
  1794   00040C  6E06               	movwf	___flge@ff1^0,c
  1795   00040E  0EC2               	movlw	194
  1796   000410  6E07               	movwf	(___flge@ff1+1)^0,c
  1797   000412  0E75               	movlw	117
  1798   000414  6E08               	movwf	(___flge@ff1+2)^0,c
  1799   000416  0E3E               	movlw	62
  1800   000418  6E09               	movwf	(___flge@ff1+3)^0,c
  1801   00041A  C050  F00A         	movff	_color+12,___flge@ff2
  1802   00041E  C051  F00B         	movff	_color+13,___flge@ff2+1
  1803   000422  C052  F00C         	movff	_color+14,___flge@ff2+2
  1804   000426  C053  F00D         	movff	_color+15,___flge@ff2+3
  1805   00042A  EC74  F00A         	call	___flge	;wreg free
  1806   00042E  B0D8               	btfsc	status,0,c
  1807   000430  EF1C  F002         	goto	u3011
  1808   000434  EF1E  F002         	goto	u3010
  1809   000438                     u3011:
  1810   000438  EF54  F002         	goto	l3625
  1811   00043C                     u3010:
  1812   00043C  C054  F006         	movff	_color+16,___flge@ff1
  1813   000440  C055  F007         	movff	_color+17,___flge@ff1+1
  1814   000444  C056  F008         	movff	_color+18,___flge@ff1+2
  1815   000448  C057  F009         	movff	_color+19,___flge@ff1+3
  1816   00044C  0EC3               	movlw	195
  1817   00044E  6E0A               	movwf	___flge@ff2^0,c
  1818   000450  0EF5               	movlw	245
  1819   000452  6E0B               	movwf	(___flge@ff2+1)^0,c
  1820   000454  0EA8               	movlw	168
  1821   000456  6E0C               	movwf	(___flge@ff2+2)^0,c
  1822   000458  0E3E               	movlw	62
  1823   00045A  6E0D               	movwf	(___flge@ff2+3)^0,c
  1824   00045C  EC74  F00A         	call	___flge	;wreg free
  1825   000460  B0D8               	btfsc	status,0,c
  1826   000462  EF35  F002         	goto	u3021
  1827   000466  EF37  F002         	goto	u3020
  1828   00046A                     u3021:
  1829   00046A  EF54  F002         	goto	l3625
  1830   00046E                     u3020:
  1831   00046E                     
  1832                           ;color.c: 138:             card_append(10, &card_count_index, *card_memory);
  1833   00046E  0E59               	movlw	low _card_count_index
  1834   000470  6E06               	movwf	card_append@card_count_index^0,c
  1835   000472  0E00               	movlw	high _card_count_index
  1836   000474  6E07               	movwf	(card_append@card_count_index+1)^0,c
  1837   000476  0100               	movlb	0	; () banked
  1838   000478  5160               	movf	_card_memory& (0+255),w,b
  1839   00047A  6FDA               	movwf	??_buggy_color_response& (0+255),b
  1840   00047C  6BDB               	clrf	(??_buggy_color_response+1)& (0+255),b
  1841   00047E  C0DA  F008         	movff	??_buggy_color_response,card_append@card_memory
  1842   000482  C0DB  F009         	movff	??_buggy_color_response+1,card_append@card_memory+1
  1843   000486  0E0A               	movlw	10
  1844   000488  ECB7  F00E         	call	_card_append
  1845   00048C                     
  1846                           ;color.c: 139:             instructions(mL,mR,5);
  1847   00048C  C037  F02F         	movff	buggy_color_response@mL,instructions@mL
  1848   000490  C038  F030         	movff	buggy_color_response@mL+1,instructions@mL+1
  1849   000494  C039  F031         	movff	buggy_color_response@mR,instructions@mR
  1850   000498  C03A  F032         	movff	buggy_color_response@mR+1,instructions@mR+1
  1851   00049C  0E00               	movlw	0
  1852   00049E  6E34               	movwf	(instructions@count+1)^0,c
  1853   0004A0  0E05               	movlw	5
  1854   0004A2  6E33               	movwf	instructions@count^0,c
  1855   0004A4  EC7E  F005         	call	_instructions	;wreg free
  1856   0004A8                     l3625:
  1857                           
  1858                           ;color.c: 143:         if (color.R_norm > 0.60 && color.B_norm < 0.22 && color.G_norm > 
      +                          0.23){
  1859   0004A8  0E9A               	movlw	154
  1860   0004AA  6E06               	movwf	___flge@ff1^0,c
  1861   0004AC  0E99               	movlw	153
  1862   0004AE  6E07               	movwf	(___flge@ff1+1)^0,c
  1863   0004B0  0E19               	movlw	25
  1864   0004B2  6E08               	movwf	(___flge@ff1+2)^0,c
  1865   0004B4  0E3F               	movlw	63
  1866   0004B6  6E09               	movwf	(___flge@ff1+3)^0,c
  1867   0004B8  C04C  F00A         	movff	_color+8,___flge@ff2
  1868   0004BC  C04D  F00B         	movff	_color+9,___flge@ff2+1
  1869   0004C0  C04E  F00C         	movff	_color+10,___flge@ff2+2
  1870   0004C4  C04F  F00D         	movff	_color+11,___flge@ff2+3
  1871   0004C8  EC74  F00A         	call	___flge	;wreg free
  1872   0004CC  B0D8               	btfsc	status,0,c
  1873   0004CE  EF6B  F002         	goto	u3031
  1874   0004D2  EF6D  F002         	goto	u3030
  1875   0004D6                     u3031:
  1876   0004D6  EFBC  F002         	goto	l3635
  1877   0004DA                     u3030:
  1878   0004DA  C050  F006         	movff	_color+12,___flge@ff1
  1879   0004DE  C051  F007         	movff	_color+13,___flge@ff1+1
  1880   0004E2  C052  F008         	movff	_color+14,___flge@ff1+2
  1881   0004E6  C053  F009         	movff	_color+15,___flge@ff1+3
  1882   0004EA  0EAE               	movlw	174
  1883   0004EC  6E0A               	movwf	___flge@ff2^0,c
  1884   0004EE  0E47               	movlw	71
  1885   0004F0  6E0B               	movwf	(___flge@ff2+1)^0,c
  1886   0004F2  0E61               	movlw	97
  1887   0004F4  6E0C               	movwf	(___flge@ff2+2)^0,c
  1888   0004F6  0E3E               	movlw	62
  1889   0004F8  6E0D               	movwf	(___flge@ff2+3)^0,c
  1890   0004FA  EC74  F00A         	call	___flge	;wreg free
  1891   0004FE  B0D8               	btfsc	status,0,c
  1892   000500  EF84  F002         	goto	u3041
  1893   000504  EF86  F002         	goto	u3040
  1894   000508                     u3041:
  1895   000508  EFBC  F002         	goto	l3635
  1896   00050C                     u3040:
  1897   00050C  0E1F               	movlw	31
  1898   00050E  6E06               	movwf	___flge@ff1^0,c
  1899   000510  0E85               	movlw	133
  1900   000512  6E07               	movwf	(___flge@ff1+1)^0,c
  1901   000514  0E6B               	movlw	107
  1902   000516  6E08               	movwf	(___flge@ff1+2)^0,c
  1903   000518  0E3E               	movlw	62
  1904   00051A  6E09               	movwf	(___flge@ff1+3)^0,c
  1905   00051C  C054  F00A         	movff	_color+16,___flge@ff2
  1906   000520  C055  F00B         	movff	_color+17,___flge@ff2+1
  1907   000524  C056  F00C         	movff	_color+18,___flge@ff2+2
  1908   000528  C057  F00D         	movff	_color+19,___flge@ff2+3
  1909   00052C  EC74  F00A         	call	___flge	;wreg free
  1910   000530  B0D8               	btfsc	status,0,c
  1911   000532  EF9D  F002         	goto	u3051
  1912   000536  EF9F  F002         	goto	u3050
  1913   00053A                     u3051:
  1914   00053A  EFBC  F002         	goto	l3635
  1915   00053E                     u3050:
  1916   00053E                     
  1917                           ;color.c: 144:             card_append(7, &card_count_index, *card_memory);
  1918   00053E  0E59               	movlw	low _card_count_index
  1919   000540  6E06               	movwf	card_append@card_count_index^0,c
  1920   000542  0E00               	movlw	high _card_count_index
  1921   000544  6E07               	movwf	(card_append@card_count_index+1)^0,c
  1922   000546  0100               	movlb	0	; () banked
  1923   000548  5160               	movf	_card_memory& (0+255),w,b
  1924   00054A  6FDA               	movwf	??_buggy_color_response& (0+255),b
  1925   00054C  6BDB               	clrf	(??_buggy_color_response+1)& (0+255),b
  1926   00054E  C0DA  F008         	movff	??_buggy_color_response,card_append@card_memory
  1927   000552  C0DB  F009         	movff	??_buggy_color_response+1,card_append@card_memory+1
  1928   000556  0E07               	movlw	7
  1929   000558  ECB7  F00E         	call	_card_append
  1930   00055C                     
  1931                           ;color.c: 145:             instructions(mL,mR,6);
  1932   00055C  C037  F02F         	movff	buggy_color_response@mL,instructions@mL
  1933   000560  C038  F030         	movff	buggy_color_response@mL+1,instructions@mL+1
  1934   000564  C039  F031         	movff	buggy_color_response@mR,instructions@mR
  1935   000568  C03A  F032         	movff	buggy_color_response@mR+1,instructions@mR+1
  1936   00056C  0E00               	movlw	0
  1937   00056E  6E34               	movwf	(instructions@count+1)^0,c
  1938   000570  0E06               	movlw	6
  1939   000572  6E33               	movwf	instructions@count^0,c
  1940   000574  EC7E  F005         	call	_instructions	;wreg free
  1941   000578                     l3635:
  1942                           
  1943                           ;color.c: 149:         if (color.R_norm < 0.40 && color.B_norm > 0.30 && color.G_norm > 
      +                          0.4){
  1944   000578  C04C  F006         	movff	_color+8,___flge@ff1
  1945   00057C  C04D  F007         	movff	_color+9,___flge@ff1+1
  1946   000580  C04E  F008         	movff	_color+10,___flge@ff1+2
  1947   000584  C04F  F009         	movff	_color+11,___flge@ff1+3
  1948   000588  0ECD               	movlw	205
  1949   00058A  6E0A               	movwf	___flge@ff2^0,c
  1950   00058C  0ECC               	movlw	204
  1951   00058E  6E0B               	movwf	(___flge@ff2+1)^0,c
  1952   000590  0ECC               	movlw	204
  1953   000592  6E0C               	movwf	(___flge@ff2+2)^0,c
  1954   000594  0E3E               	movlw	62
  1955   000596  6E0D               	movwf	(___flge@ff2+3)^0,c
  1956   000598  EC74  F00A         	call	___flge	;wreg free
  1957   00059C  B0D8               	btfsc	status,0,c
  1958   00059E  EFD3  F002         	goto	u3061
  1959   0005A2  EFD5  F002         	goto	u3060
  1960   0005A6                     u3061:
  1961   0005A6  EF24  F003         	goto	l3645
  1962   0005AA                     u3060:
  1963   0005AA  0E9A               	movlw	154
  1964   0005AC  6E06               	movwf	___flge@ff1^0,c
  1965   0005AE  0E99               	movlw	153
  1966   0005B0  6E07               	movwf	(___flge@ff1+1)^0,c
  1967   0005B2  0E99               	movlw	153
  1968   0005B4  6E08               	movwf	(___flge@ff1+2)^0,c
  1969   0005B6  0E3E               	movlw	62
  1970   0005B8  6E09               	movwf	(___flge@ff1+3)^0,c
  1971   0005BA  C050  F00A         	movff	_color+12,___flge@ff2
  1972   0005BE  C051  F00B         	movff	_color+13,___flge@ff2+1
  1973   0005C2  C052  F00C         	movff	_color+14,___flge@ff2+2
  1974   0005C6  C053  F00D         	movff	_color+15,___flge@ff2+3
  1975   0005CA  EC74  F00A         	call	___flge	;wreg free
  1976   0005CE  B0D8               	btfsc	status,0,c
  1977   0005D0  EFEC  F002         	goto	u3071
  1978   0005D4  EFEE  F002         	goto	u3070
  1979   0005D8                     u3071:
  1980   0005D8  EF24  F003         	goto	l3645
  1981   0005DC                     u3070:
  1982   0005DC  0ECD               	movlw	205
  1983   0005DE  6E06               	movwf	___flge@ff1^0,c
  1984   0005E0  0ECC               	movlw	204
  1985   0005E2  6E07               	movwf	(___flge@ff1+1)^0,c
  1986   0005E4  0ECC               	movlw	204
  1987   0005E6  6E08               	movwf	(___flge@ff1+2)^0,c
  1988   0005E8  0E3E               	movlw	62
  1989   0005EA  6E09               	movwf	(___flge@ff1+3)^0,c
  1990   0005EC  C054  F00A         	movff	_color+16,___flge@ff2
  1991   0005F0  C055  F00B         	movff	_color+17,___flge@ff2+1
  1992   0005F4  C056  F00C         	movff	_color+18,___flge@ff2+2
  1993   0005F8  C057  F00D         	movff	_color+19,___flge@ff2+3
  1994   0005FC  EC74  F00A         	call	___flge	;wreg free
  1995   000600  B0D8               	btfsc	status,0,c
  1996   000602  EF05  F003         	goto	u3081
  1997   000606  EF07  F003         	goto	u3080
  1998   00060A                     u3081:
  1999   00060A  EF24  F003         	goto	l3645
  2000   00060E                     u3080:
  2001   00060E                     
  2002                           ;color.c: 150:             card_append(6, &card_count_index, *card_memory);
  2003   00060E  0E59               	movlw	low _card_count_index
  2004   000610  6E06               	movwf	card_append@card_count_index^0,c
  2005   000612  0E00               	movlw	high _card_count_index
  2006   000614  6E07               	movwf	(card_append@card_count_index+1)^0,c
  2007   000616  0100               	movlb	0	; () banked
  2008   000618  5160               	movf	_card_memory& (0+255),w,b
  2009   00061A  6FDA               	movwf	??_buggy_color_response& (0+255),b
  2010   00061C  6BDB               	clrf	(??_buggy_color_response+1)& (0+255),b
  2011   00061E  C0DA  F008         	movff	??_buggy_color_response,card_append@card_memory
  2012   000622  C0DB  F009         	movff	??_buggy_color_response+1,card_append@card_memory+1
  2013   000626  0E06               	movlw	6
  2014   000628  ECB7  F00E         	call	_card_append
  2015   00062C                     
  2016                           ;color.c: 151:             instructions(mL,mR,7);
  2017   00062C  C037  F02F         	movff	buggy_color_response@mL,instructions@mL
  2018   000630  C038  F030         	movff	buggy_color_response@mL+1,instructions@mL+1
  2019   000634  C039  F031         	movff	buggy_color_response@mR,instructions@mR
  2020   000638  C03A  F032         	movff	buggy_color_response@mR+1,instructions@mR+1
  2021   00063C  0E00               	movlw	0
  2022   00063E  6E34               	movwf	(instructions@count+1)^0,c
  2023   000640  0E07               	movlw	7
  2024   000642  6E33               	movwf	instructions@count^0,c
  2025   000644  EC7E  F005         	call	_instructions	;wreg free
  2026   000648                     l3645:
  2027                           
  2028                           ;color.c: 155:         if (color.R_norm < 0.5 && color.C > 16000){
  2029   000648  C04C  F006         	movff	_color+8,___flge@ff1
  2030   00064C  C04D  F007         	movff	_color+9,___flge@ff1+1
  2031   000650  C04E  F008         	movff	_color+10,___flge@ff1+2
  2032   000654  C04F  F009         	movff	_color+11,___flge@ff1+3
  2033   000658  0E00               	movlw	0
  2034   00065A  6E0A               	movwf	___flge@ff2^0,c
  2035   00065C  0E00               	movlw	0
  2036   00065E  6E0B               	movwf	(___flge@ff2+1)^0,c
  2037   000660  0E00               	movlw	0
  2038   000662  6E0C               	movwf	(___flge@ff2+2)^0,c
  2039   000664  0E3F               	movlw	63
  2040   000666  6E0D               	movwf	(___flge@ff2+3)^0,c
  2041   000668  EC74  F00A         	call	___flge	;wreg free
  2042   00066C  B0D8               	btfsc	status,0,c
  2043   00066E  EF3B  F003         	goto	u3091
  2044   000672  EF3D  F003         	goto	u3090
  2045   000676                     u3091:
  2046   000676  EFA2  F003         	goto	l3667
  2047   00067A                     u3090:
  2048   00067A  0E81               	movlw	129
  2049   00067C  5C4A               	subwf	(_color+6)^0,w,c
  2050   00067E  0E3E               	movlw	62
  2051   000680  584B               	subwfb	(_color+7)^0,w,c
  2052   000682  A0D8               	btfss	status,0,c
  2053   000684  EF46  F003         	goto	u3101
  2054   000688  EF48  F003         	goto	u3100
  2055   00068C                     u3101:
  2056   00068C  EFA2  F003         	goto	l3667
  2057   000690                     u3100:
  2058   000690                     
  2059                           ;color.c: 156:             instructions(mL,mR,3);
  2060   000690  C037  F02F         	movff	buggy_color_response@mL,instructions@mL
  2061   000694  C038  F030         	movff	buggy_color_response@mL+1,instructions@mL+1
  2062   000698  C039  F031         	movff	buggy_color_response@mR,instructions@mR
  2063   00069C  C03A  F032         	movff	buggy_color_response@mR+1,instructions@mR+1
  2064   0006A0  0E00               	movlw	0
  2065   0006A2  6E34               	movwf	(instructions@count+1)^0,c
  2066   0006A4  0E03               	movlw	3
  2067   0006A6  6E33               	movwf	instructions@count^0,c
  2068   0006A8  EC7E  F005         	call	_instructions	;wreg free
  2069   0006AC                     l3651:
  2070                           
  2071                           ;color.c: 160:                 forward(mL,mR);
  2072   0006AC  C037  F01F         	movff	buggy_color_response@mL,forward@mL
  2073   0006B0  C038  F020         	movff	buggy_color_response@mL+1,forward@mL+1
  2074   0006B4  C039  F021         	movff	buggy_color_response@mR,forward@mR
  2075   0006B8  C03A  F022         	movff	buggy_color_response@mR+1,forward@mR+1
  2076   0006BC  ECD5  F00B         	call	_forward	;wreg free
  2077   0006C0                     
  2078                           ;color.c: 161:                 unsigned int i;;color.c: 162:                 for (i=0; i
      +                           < timer_memory[timer_index-1]; i++) {_delay((unsigned long)((1)*(64000000/4000.0)));}
  2079   0006C0  0E00               	movlw	0
  2080   0006C2  0100               	movlb	0	; () banked
  2081   0006C4  6FDD               	movwf	(buggy_color_response@i+1)& (0+255),b
  2082   0006C6  0E00               	movlw	0
  2083   0006C8  6FDC               	movwf	buggy_color_response@i& (0+255),b
  2084   0006CA  EF73  F003         	goto	l3659
  2085   0006CE                     l3655:
  2086                           
  2087                           ; BSR set to: 0
  2088   0006CE  0E15               	movlw	21
  2089   0006D0  0100               	movlb	0	; () banked
  2090   0006D2  6FDA               	movwf	??_buggy_color_response& (0+255),b
  2091   0006D4  0EC6               	movlw	198
  2092   0006D6                     u3157:
  2093   0006D6  2EE8               	decfsz	wreg,f,c
  2094   0006D8  D7FE               	bra	u3157
  2095   0006DA  2FDA               	decfsz	??_buggy_color_response& (0+255),f,b
  2096   0006DC  D7FC               	bra	u3157
  2097   0006DE  F000               	nop	
  2098   0006E0  0100               	movlb	0	; () banked
  2099   0006E2  4BDC               	infsnz	buggy_color_response@i& (0+255),f,b
  2100   0006E4  2BDD               	incf	(buggy_color_response@i+1)& (0+255),f,b
  2101   0006E6                     l3659:
  2102                           
  2103                           ; BSR set to: 0
  2104   0006E6  0E9F               	movlw	low (_timer_memory+65535)
  2105   0006E8  2458               	addwf	_timer_index^0,w,c
  2106   0006EA  6ED9               	movwf	fsr2l,c
  2107   0006EC  6ADA               	clrf	fsr2h,c
  2108   0006EE  0E00               	movlw	high (_timer_memory+65535)
  2109   0006F0  22DA               	addwfc	fsr2h,f,c
  2110   0006F2  50DF               	movf	indf2,w,c
  2111   0006F4  6FDA               	movwf	??_buggy_color_response& (0+255),b
  2112   0006F6  6BDB               	clrf	(??_buggy_color_response+1)& (0+255),b
  2113   0006F8  51DA               	movf	??_buggy_color_response& (0+255),w,b
  2114   0006FA  5DDC               	subwf	buggy_color_response@i& (0+255),w,b
  2115   0006FC  51DB               	movf	(??_buggy_color_response+1)& (0+255),w,b
  2116   0006FE  59DD               	subwfb	(buggy_color_response@i+1)& (0+255),w,b
  2117   000700  A0D8               	btfss	status,0,c
  2118   000702  EF85  F003         	goto	u3111
  2119   000706  EF87  F003         	goto	u3110
  2120   00070A                     u3111:
  2121   00070A  EF67  F003         	goto	l3655
  2122   00070E                     u3110:
  2123   00070E                     
  2124                           ; BSR set to: 0
  2125                           ;color.c: 164:                 instructions(mL,mR,card_memory[card_count_index-1]);
  2126   00070E  C037  F02F         	movff	buggy_color_response@mL,instructions@mL
  2127   000712  C038  F030         	movff	buggy_color_response@mL+1,instructions@mL+1
  2128   000716  C039  F031         	movff	buggy_color_response@mR,instructions@mR
  2129   00071A  C03A  F032         	movff	buggy_color_response@mR+1,instructions@mR+1
  2130   00071E  0E5F               	movlw	low (_card_memory+65535)
  2131   000720  2459               	addwf	_card_count_index^0,w,c
  2132   000722  6ED9               	movwf	fsr2l,c
  2133   000724  6ADA               	clrf	fsr2h,c
  2134   000726  0E00               	movlw	high (_card_memory+65535)
  2135   000728  22DA               	addwfc	fsr2h,f,c
  2136   00072A  50DF               	movf	indf2,w,c
  2137   00072C  6FDA               	movwf	??_buggy_color_response& (0+255),b
  2138   00072E  51DA               	movf	??_buggy_color_response& (0+255),w,b
  2139   000730  6E33               	movwf	instructions@count^0,c
  2140   000732  6A34               	clrf	(instructions@count+1)^0,c
  2141   000734  EC7E  F005         	call	_instructions	;wreg free
  2142   000738                     
  2143                           ;color.c: 166:                 timer_index = timer_index - 1;
  2144   000738  0458               	decf	_timer_index^0,w,c
  2145   00073A  6E58               	movwf	_timer_index^0,c
  2146   00073C                     
  2147                           ;color.c: 167:                 card_count_index = card_count_index - 1;
  2148   00073C  0459               	decf	_card_count_index^0,w,c
  2149   00073E  6E59               	movwf	_card_count_index^0,c
  2150   000740  EF56  F003         	goto	l3651
  2151   000744                     l3667:
  2152                           
  2153                           ;color.c: 171:         timer_reset();
  2154   000744  ECE5  F00F         	call	_timer_reset	;wreg free
  2155                           
  2156                           ;color.c: 172:     }
  2157   000748  EFB0  F003         	goto	l140
  2158   00074C                     l3669:
  2159   00074C  C037  F01F         	movff	buggy_color_response@mL,forward@mL
  2160   000750  C038  F020         	movff	buggy_color_response@mL+1,forward@mL+1
  2161   000754  C039  F021         	movff	buggy_color_response@mR,forward@mR
  2162   000758  C03A  F022         	movff	buggy_color_response@mR+1,forward@mR+1
  2163   00075C  ECD5  F00B         	call	_forward	;wreg free
  2164   000760                     l140:
  2165   000760  0012               	return		;funcret
  2166   000762                     __end_of_buggy_color_response:
  2167                           	callstack 0
  2168                           
  2169 ;; *************** function _timer_reset *****************
  2170 ;; Defined at:
  2171 ;;		line 20 in file "timers.c"
  2172 ;; Parameters:    Size  Location     Type
  2173 ;;		None
  2174 ;; Auto vars:     Size  Location     Type
  2175 ;;		None
  2176 ;; Return value:  Size  Location     Type
  2177 ;;                  1    wreg      void 
  2178 ;; Registers used:
  2179 ;;		wreg, status,2
  2180 ;; Tracked objects:
  2181 ;;		On entry : 0/0
  2182 ;;		On exit  : 0/0
  2183 ;;		Unchanged: 0/0
  2184 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2185 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2186 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2187 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2188 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2189 ;;Total ram usage:        0 bytes
  2190 ;; Hardware stack levels used: 1
  2191 ;; Hardware stack levels required when called: 5
  2192 ;; This function calls:
  2193 ;;		Nothing
  2194 ;; This function is called by:
  2195 ;;		_buggy_color_response
  2196 ;; This function uses a non-reentrant model
  2197 ;;
  2198                           
  2199                           	psect	text8
  2200   001FCA                     __ptext8:
  2201                           	callstack 0
  2202   001FCA                     _timer_reset:
  2203                           	callstack 24
  2204   001FCA                     
  2205                           ;timers.c: 21:     TMR0H = 0;
  2206   001FCA  0E00               	movlw	0
  2207   001FCC  6ED4               	movwf	212,c	;volatile
  2208                           
  2209                           ;timers.c: 22:     TMR0L = 0;
  2210   001FCE  0E00               	movlw	0
  2211   001FD0  6ED3               	movwf	211,c	;volatile
  2212   001FD2  0012               	return		;funcret
  2213   001FD4                     __end_of_timer_reset:
  2214                           	callstack 0
  2215                           
  2216 ;; *************** function _timer_append *****************
  2217 ;; Defined at:
  2218 ;;		line 7 in file "memory.c"
  2219 ;; Parameters:    Size  Location     Type
  2220 ;;  temp            1    wreg     unsigned char 
  2221 ;;  timer_index     2   13[COMRAM] PTR int 
  2222 ;;		 -> timer_index(1), 
  2223 ;;  timer_memory    2   15[COMRAM] PTR int 
  2224 ;;		 -> timer_memory(40), 
  2225 ;; Auto vars:     Size  Location     Type
  2226 ;;  temp            1   21[COMRAM] unsigned char 
  2227 ;; Return value:  Size  Location     Type
  2228 ;;                  1    wreg      void 
  2229 ;; Registers used:
  2230 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2231 ;; Tracked objects:
  2232 ;;		On entry : 0/0
  2233 ;;		On exit  : 0/0
  2234 ;;		Unchanged: 0/0
  2235 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2236 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2237 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2238 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2239 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2240 ;;Total ram usage:        9 bytes
  2241 ;; Hardware stack levels used: 1
  2242 ;; Hardware stack levels required when called: 5
  2243 ;; This function calls:
  2244 ;;		Nothing
  2245 ;; This function is called by:
  2246 ;;		_buggy_color_response
  2247 ;; This function uses a non-reentrant model
  2248 ;;
  2249                           
  2250                           	psect	text9
  2251   001D32                     __ptext9:
  2252                           	callstack 0
  2253   001D32                     _timer_append:
  2254                           	callstack 24
  2255                           
  2256                           ;incstack = 0
  2257                           ;timer_append@temp stored from wreg
  2258   001D32  6E16               	movwf	timer_append@temp^0,c
  2259   001D34                     
  2260                           ;memory.c: 8:     timer_memory[(*timer_index)++] = temp;
  2261   001D34  5016               	movf	timer_append@temp^0,w,c
  2262   001D36  6E12               	movwf	??_timer_append^0,c
  2263   001D38  6A13               	clrf	(??_timer_append+1)^0,c
  2264   001D3A  C00E  FFD9         	movff	timer_append@timer_index,fsr2l
  2265   001D3E  C00F  FFDA         	movff	timer_append@timer_index+1,fsr2h
  2266   001D42  CFDF F014          	movff	indf2,??_timer_append+2
  2267   001D46  0E01               	movlw	1
  2268   001D48  26DE               	addwf	postinc2,f,c
  2269   001D4A  CFDF F015          	movff	indf2,??_timer_append+3
  2270   001D4E  0E00               	movlw	0
  2271   001D50  22DD               	addwfc	postdec2,f,c
  2272   001D52  90D8               	bcf	status,0,c
  2273   001D54  3614               	rlcf	(??_timer_append+2)^0,f,c
  2274   001D56  3615               	rlcf	(??_timer_append+3)^0,f,c
  2275   001D58  5014               	movf	(??_timer_append+2)^0,w,c
  2276   001D5A  2410               	addwf	timer_append@timer_memory^0,w,c
  2277   001D5C  6ED9               	movwf	fsr2l,c
  2278   001D5E  5015               	movf	(??_timer_append+3)^0,w,c
  2279   001D60  2011               	addwfc	(timer_append@timer_memory+1)^0,w,c
  2280   001D62  6EDA               	movwf	fsr2h,c
  2281   001D64  C012  FFDE         	movff	??_timer_append,postinc2
  2282   001D68  C013  FFDD         	movff	??_timer_append+1,postdec2
  2283   001D6C  0012               	return		;funcret
  2284   001D6E                     __end_of_timer_append:
  2285                           	callstack 0
  2286                           
  2287 ;; *************** function _instructions *****************
  2288 ;; Defined at:
  2289 ;;		line 273 in file "dc_motor.c"
  2290 ;; Parameters:    Size  Location     Type
  2291 ;;  mL              2   46[COMRAM] PTR struct DC_motor
  2292 ;;		 -> motorL(9), 
  2293 ;;  mR              2   48[COMRAM] PTR struct DC_motor
  2294 ;;		 -> motorR(9), 
  2295 ;;  count           2   50[COMRAM] int 
  2296 ;; Auto vars:     Size  Location     Type
  2297 ;;		None
  2298 ;; Return value:  Size  Location     Type
  2299 ;;                  1    wreg      void 
  2300 ;; Registers used:
  2301 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2302 ;; Tracked objects:
  2303 ;;		On entry : 0/0
  2304 ;;		On exit  : 0/0
  2305 ;;		Unchanged: 0/0
  2306 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2307 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2308 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2309 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2310 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2311 ;;Total ram usage:        8 bytes
  2312 ;; Hardware stack levels used: 1
  2313 ;; Hardware stack levels required when called: 10
  2314 ;; This function calls:
  2315 ;;		_left_45
  2316 ;;		_reverse
  2317 ;;		_reverse_pink
  2318 ;;		_reverse_yellow
  2319 ;;		_right_45
  2320 ;;		_space
  2321 ;;		_stop
  2322 ;; This function is called by:
  2323 ;;		_buggy_color_response
  2324 ;; This function uses a non-reentrant model
  2325 ;;
  2326                           
  2327                           	psect	text10
  2328   000AFC                     __ptext10:
  2329                           	callstack 0
  2330   000AFC                     _instructions:
  2331                           	callstack 19
  2332   000AFC                     
  2333                           ;dc_motor.c: 273: void instructions(DC_motor *mL, DC_motor *mR, int count);dc_motor.c: 2
      +                          74: {;dc_motor.c: 275:     space(mL,mR);
  2334   000AFC  C02F  F01F         	movff	instructions@mL,space@mL
  2335   000B00  C030  F020         	movff	instructions@mL+1,space@mL+1
  2336   000B04  C031  F021         	movff	instructions@mR,space@mR
  2337   000B08  C032  F022         	movff	instructions@mR+1,space@mR+1
  2338   000B0C  ECF6  F00A         	call	_space	;wreg free
  2339   000B10                     
  2340                           ;dc_motor.c: 276:     _delay((unsigned long)((500)*(64000000/4000.0)));
  2341   000B10  0E29               	movlw	41
  2342   000B12  6E36               	movwf	(??_instructions+1)^0,c
  2343   000B14  0E96               	movlw	150
  2344   000B16  6E35               	movwf	??_instructions^0,c
  2345   000B18  0E7F               	movlw	127
  2346   000B1A                     u3167:
  2347   000B1A  2EE8               	decfsz	wreg,f,c
  2348   000B1C  D7FE               	bra	u3167
  2349   000B1E  2E35               	decfsz	??_instructions^0,f,c
  2350   000B20  D7FC               	bra	u3167
  2351   000B22  2E36               	decfsz	(??_instructions+1)^0,f,c
  2352   000B24  D7FA               	bra	u3167
  2353   000B26  F000               	nop	
  2354   000B28                     
  2355                           ;dc_motor.c: 277:     stop(mL,mR);
  2356   000B28  C02F  F019         	movff	instructions@mL,stop@mL
  2357   000B2C  C030  F01A         	movff	instructions@mL+1,stop@mL+1
  2358   000B30  C031  F01B         	movff	instructions@mR,stop@mR
  2359   000B34  C032  F01C         	movff	instructions@mR+1,stop@mR+1
  2360   000B38  EC34  F00C         	call	_stop	;wreg free
  2361                           
  2362                           ;dc_motor.c: 278:     _delay((unsigned long)((500)*(64000000/4000.0)));
  2363   000B3C  0E29               	movlw	41
  2364   000B3E  6E36               	movwf	(??_instructions+1)^0,c
  2365   000B40  0E96               	movlw	150
  2366   000B42  6E35               	movwf	??_instructions^0,c
  2367   000B44  0E7F               	movlw	127
  2368   000B46                     u3177:
  2369   000B46  2EE8               	decfsz	wreg,f,c
  2370   000B48  D7FE               	bra	u3177
  2371   000B4A  2E35               	decfsz	??_instructions^0,f,c
  2372   000B4C  D7FC               	bra	u3177
  2373   000B4E  2E36               	decfsz	(??_instructions+1)^0,f,c
  2374   000B50  D7FA               	bra	u3177
  2375   000B52  F000               	nop	
  2376   000B54                     
  2377                           ;dc_motor.c: 280:     if (count == 1){right_45(mL,mR,2); stop(mL,mR);}
  2378   000B54  0433               	decf	instructions@count^0,w,c
  2379   000B56  1034               	iorwf	(instructions@count+1)^0,w,c
  2380   000B58  A4D8               	btfss	status,2,c
  2381   000B5A  EFB1  F005         	goto	u2731
  2382   000B5E  EFB3  F005         	goto	u2730
  2383   000B62                     u2731:
  2384   000B62  EFCB  F005         	goto	l3461
  2385   000B66                     u2730:
  2386   000B66  C02F  F01F         	movff	instructions@mL,right_45@mL
  2387   000B6A  C030  F020         	movff	instructions@mL+1,right_45@mL+1
  2388   000B6E  C031  F021         	movff	instructions@mR,right_45@mR
  2389   000B72  C032  F022         	movff	instructions@mR+1,right_45@mR+1
  2390   000B76  0E00               	movlw	0
  2391   000B78  6E24               	movwf	(right_45@count+1)^0,c
  2392   000B7A  0E02               	movlw	2
  2393   000B7C  6E23               	movwf	right_45@count^0,c
  2394   000B7E  EC48  F009         	call	_right_45	;wreg free
  2395   000B82  C02F  F019         	movff	instructions@mL,stop@mL
  2396   000B86  C030  F01A         	movff	instructions@mL+1,stop@mL+1
  2397   000B8A  C031  F01B         	movff	instructions@mR,stop@mR
  2398   000B8E  C032  F01C         	movff	instructions@mR+1,stop@mR+1
  2399   000B92  EC34  F00C         	call	_stop	;wreg free
  2400   000B96                     l3461:
  2401                           
  2402                           ;dc_motor.c: 281:     if (count == 2){left_45(mL,mR,2); stop(mL,mR);}
  2403   000B96  0E02               	movlw	2
  2404   000B98  1833               	xorwf	instructions@count^0,w,c
  2405   000B9A  1034               	iorwf	(instructions@count+1)^0,w,c
  2406   000B9C  A4D8               	btfss	status,2,c
  2407   000B9E  EFD3  F005         	goto	u2741
  2408   000BA2  EFD5  F005         	goto	u2740
  2409   000BA6                     u2741:
  2410   000BA6  EFED  F005         	goto	l3465
  2411   000BAA                     u2740:
  2412   000BAA  C02F  F01F         	movff	instructions@mL,left_45@mL
  2413   000BAE  C030  F020         	movff	instructions@mL+1,left_45@mL+1
  2414   000BB2  C031  F021         	movff	instructions@mR,left_45@mR
  2415   000BB6  C032  F022         	movff	instructions@mR+1,left_45@mR+1
  2416   000BBA  0E00               	movlw	0
  2417   000BBC  6E24               	movwf	(left_45@count+1)^0,c
  2418   000BBE  0E02               	movlw	2
  2419   000BC0  6E23               	movwf	left_45@count^0,c
  2420   000BC2  ECA8  F008         	call	_left_45	;wreg free
  2421   000BC6  C02F  F019         	movff	instructions@mL,stop@mL
  2422   000BCA  C030  F01A         	movff	instructions@mL+1,stop@mL+1
  2423   000BCE  C031  F01B         	movff	instructions@mR,stop@mR
  2424   000BD2  C032  F01C         	movff	instructions@mR+1,stop@mR+1
  2425   000BD6  EC34  F00C         	call	_stop	;wreg free
  2426   000BDA                     l3465:
  2427                           
  2428                           ;dc_motor.c: 282:     if (count == 3){right_45(mL,mR,4); stop(mL,mR);}
  2429   000BDA  0E03               	movlw	3
  2430   000BDC  1833               	xorwf	instructions@count^0,w,c
  2431   000BDE  1034               	iorwf	(instructions@count+1)^0,w,c
  2432   000BE0  A4D8               	btfss	status,2,c
  2433   000BE2  EFF5  F005         	goto	u2751
  2434   000BE6  EFF7  F005         	goto	u2750
  2435   000BEA                     u2751:
  2436   000BEA  EF0F  F006         	goto	l3469
  2437   000BEE                     u2750:
  2438   000BEE  C02F  F01F         	movff	instructions@mL,right_45@mL
  2439   000BF2  C030  F020         	movff	instructions@mL+1,right_45@mL+1
  2440   000BF6  C031  F021         	movff	instructions@mR,right_45@mR
  2441   000BFA  C032  F022         	movff	instructions@mR+1,right_45@mR+1
  2442   000BFE  0E00               	movlw	0
  2443   000C00  6E24               	movwf	(right_45@count+1)^0,c
  2444   000C02  0E04               	movlw	4
  2445   000C04  6E23               	movwf	right_45@count^0,c
  2446   000C06  EC48  F009         	call	_right_45	;wreg free
  2447   000C0A  C02F  F019         	movff	instructions@mL,stop@mL
  2448   000C0E  C030  F01A         	movff	instructions@mL+1,stop@mL+1
  2449   000C12  C031  F01B         	movff	instructions@mR,stop@mR
  2450   000C16  C032  F01C         	movff	instructions@mR+1,stop@mR+1
  2451   000C1A  EC34  F00C         	call	_stop	;wreg free
  2452   000C1E                     l3469:
  2453                           
  2454                           ;dc_motor.c: 283:     if (count == 4){reverse(mL,mR); _delay((unsigned long)((400)*(6400
      +                          0000/4000.0)));stop(mL,mR);_delay((unsigned long)((500)*(64000000/4000.0)));right_45(mL,
      +                          mR,2); stop(mL,mR);}
  2455   000C1E  0E04               	movlw	4
  2456   000C20  1833               	xorwf	instructions@count^0,w,c
  2457   000C22  1034               	iorwf	(instructions@count+1)^0,w,c
  2458   000C24  A4D8               	btfss	status,2,c
  2459   000C26  EF17  F006         	goto	u2761
  2460   000C2A  EF19  F006         	goto	u2760
  2461   000C2E                     u2761:
  2462   000C2E  EF5D  F006         	goto	l3481
  2463   000C32                     u2760:
  2464   000C32  C02F  F01F         	movff	instructions@mL,reverse@mL
  2465   000C36  C030  F020         	movff	instructions@mL+1,reverse@mL+1
  2466   000C3A  C031  F021         	movff	instructions@mR,reverse@mR
  2467   000C3E  C032  F022         	movff	instructions@mR+1,reverse@mR+1
  2468   000C42  EC76  F00B         	call	_reverse	;wreg free
  2469   000C46  0E21               	movlw	33
  2470   000C48  6E36               	movwf	(??_instructions+1)^0,c
  2471   000C4A  0E78               	movlw	120
  2472   000C4C  6E35               	movwf	??_instructions^0,c
  2473   000C4E  0E98               	movlw	152
  2474   000C50                     u3187:
  2475   000C50  2EE8               	decfsz	wreg,f,c
  2476   000C52  D7FE               	bra	u3187
  2477   000C54  2E35               	decfsz	??_instructions^0,f,c
  2478   000C56  D7FC               	bra	u3187
  2479   000C58  2E36               	decfsz	(??_instructions+1)^0,f,c
  2480   000C5A  D7FA               	bra	u3187
  2481   000C5C  D000               	nop2	
  2482   000C5E  C02F  F019         	movff	instructions@mL,stop@mL
  2483   000C62  C030  F01A         	movff	instructions@mL+1,stop@mL+1
  2484   000C66  C031  F01B         	movff	instructions@mR,stop@mR
  2485   000C6A  C032  F01C         	movff	instructions@mR+1,stop@mR+1
  2486   000C6E  EC34  F00C         	call	_stop	;wreg free
  2487   000C72  0E29               	movlw	41
  2488   000C74  6E36               	movwf	(??_instructions+1)^0,c
  2489   000C76  0E96               	movlw	150
  2490   000C78  6E35               	movwf	??_instructions^0,c
  2491   000C7A  0E7F               	movlw	127
  2492   000C7C                     u3197:
  2493   000C7C  2EE8               	decfsz	wreg,f,c
  2494   000C7E  D7FE               	bra	u3197
  2495   000C80  2E35               	decfsz	??_instructions^0,f,c
  2496   000C82  D7FC               	bra	u3197
  2497   000C84  2E36               	decfsz	(??_instructions+1)^0,f,c
  2498   000C86  D7FA               	bra	u3197
  2499   000C88  F000               	nop	
  2500   000C8A  C02F  F01F         	movff	instructions@mL,right_45@mL
  2501   000C8E  C030  F020         	movff	instructions@mL+1,right_45@mL+1
  2502   000C92  C031  F021         	movff	instructions@mR,right_45@mR
  2503   000C96  C032  F022         	movff	instructions@mR+1,right_45@mR+1
  2504   000C9A  0E00               	movlw	0
  2505   000C9C  6E24               	movwf	(right_45@count+1)^0,c
  2506   000C9E  0E02               	movlw	2
  2507   000CA0  6E23               	movwf	right_45@count^0,c
  2508   000CA2  EC48  F009         	call	_right_45	;wreg free
  2509   000CA6  C02F  F019         	movff	instructions@mL,stop@mL
  2510   000CAA  C030  F01A         	movff	instructions@mL+1,stop@mL+1
  2511   000CAE  C031  F01B         	movff	instructions@mR,stop@mR
  2512   000CB2  C032  F01C         	movff	instructions@mR+1,stop@mR+1
  2513   000CB6  EC34  F00C         	call	_stop	;wreg free
  2514   000CBA                     l3481:
  2515                           
  2516                           ;dc_motor.c: 284:     if (count == 5){reverse(mL,mR); _delay((unsigned long)((400)*(6400
      +                          0000/4000.0)));stop(mL,mR);_delay((unsigned long)((500)*(64000000/4000.0)));left_45(mL,m
      +                          R,2); stop(mL,mR);}
  2517   000CBA  0E05               	movlw	5
  2518   000CBC  1833               	xorwf	instructions@count^0,w,c
  2519   000CBE  1034               	iorwf	(instructions@count+1)^0,w,c
  2520   000CC0  A4D8               	btfss	status,2,c
  2521   000CC2  EF65  F006         	goto	u2771
  2522   000CC6  EF67  F006         	goto	u2770
  2523   000CCA                     u2771:
  2524   000CCA  EFAB  F006         	goto	l3493
  2525   000CCE                     u2770:
  2526   000CCE  C02F  F01F         	movff	instructions@mL,reverse@mL
  2527   000CD2  C030  F020         	movff	instructions@mL+1,reverse@mL+1
  2528   000CD6  C031  F021         	movff	instructions@mR,reverse@mR
  2529   000CDA  C032  F022         	movff	instructions@mR+1,reverse@mR+1
  2530   000CDE  EC76  F00B         	call	_reverse	;wreg free
  2531   000CE2  0E21               	movlw	33
  2532   000CE4  6E36               	movwf	(??_instructions+1)^0,c
  2533   000CE6  0E78               	movlw	120
  2534   000CE8  6E35               	movwf	??_instructions^0,c
  2535   000CEA  0E98               	movlw	152
  2536   000CEC                     u3207:
  2537   000CEC  2EE8               	decfsz	wreg,f,c
  2538   000CEE  D7FE               	bra	u3207
  2539   000CF0  2E35               	decfsz	??_instructions^0,f,c
  2540   000CF2  D7FC               	bra	u3207
  2541   000CF4  2E36               	decfsz	(??_instructions+1)^0,f,c
  2542   000CF6  D7FA               	bra	u3207
  2543   000CF8  D000               	nop2	
  2544   000CFA  C02F  F019         	movff	instructions@mL,stop@mL
  2545   000CFE  C030  F01A         	movff	instructions@mL+1,stop@mL+1
  2546   000D02  C031  F01B         	movff	instructions@mR,stop@mR
  2547   000D06  C032  F01C         	movff	instructions@mR+1,stop@mR+1
  2548   000D0A  EC34  F00C         	call	_stop	;wreg free
  2549   000D0E  0E29               	movlw	41
  2550   000D10  6E36               	movwf	(??_instructions+1)^0,c
  2551   000D12  0E96               	movlw	150
  2552   000D14  6E35               	movwf	??_instructions^0,c
  2553   000D16  0E7F               	movlw	127
  2554   000D18                     u3217:
  2555   000D18  2EE8               	decfsz	wreg,f,c
  2556   000D1A  D7FE               	bra	u3217
  2557   000D1C  2E35               	decfsz	??_instructions^0,f,c
  2558   000D1E  D7FC               	bra	u3217
  2559   000D20  2E36               	decfsz	(??_instructions+1)^0,f,c
  2560   000D22  D7FA               	bra	u3217
  2561   000D24  F000               	nop	
  2562   000D26  C02F  F01F         	movff	instructions@mL,left_45@mL
  2563   000D2A  C030  F020         	movff	instructions@mL+1,left_45@mL+1
  2564   000D2E  C031  F021         	movff	instructions@mR,left_45@mR
  2565   000D32  C032  F022         	movff	instructions@mR+1,left_45@mR+1
  2566   000D36  0E00               	movlw	0
  2567   000D38  6E24               	movwf	(left_45@count+1)^0,c
  2568   000D3A  0E02               	movlw	2
  2569   000D3C  6E23               	movwf	left_45@count^0,c
  2570   000D3E  ECA8  F008         	call	_left_45	;wreg free
  2571   000D42  C02F  F019         	movff	instructions@mL,stop@mL
  2572   000D46  C030  F01A         	movff	instructions@mL+1,stop@mL+1
  2573   000D4A  C031  F01B         	movff	instructions@mR,stop@mR
  2574   000D4E  C032  F01C         	movff	instructions@mR+1,stop@mR+1
  2575   000D52  EC34  F00C         	call	_stop	;wreg free
  2576   000D56                     l3493:
  2577                           
  2578                           ;dc_motor.c: 285:     if (count == 6){right_45(mL,mR,3); stop(mL,mR);}
  2579   000D56  0E06               	movlw	6
  2580   000D58  1833               	xorwf	instructions@count^0,w,c
  2581   000D5A  1034               	iorwf	(instructions@count+1)^0,w,c
  2582   000D5C  A4D8               	btfss	status,2,c
  2583   000D5E  EFB3  F006         	goto	u2781
  2584   000D62  EFB5  F006         	goto	u2780
  2585   000D66                     u2781:
  2586   000D66  EFCD  F006         	goto	l3497
  2587   000D6A                     u2780:
  2588   000D6A  C02F  F01F         	movff	instructions@mL,right_45@mL
  2589   000D6E  C030  F020         	movff	instructions@mL+1,right_45@mL+1
  2590   000D72  C031  F021         	movff	instructions@mR,right_45@mR
  2591   000D76  C032  F022         	movff	instructions@mR+1,right_45@mR+1
  2592   000D7A  0E00               	movlw	0
  2593   000D7C  6E24               	movwf	(right_45@count+1)^0,c
  2594   000D7E  0E03               	movlw	3
  2595   000D80  6E23               	movwf	right_45@count^0,c
  2596   000D82  EC48  F009         	call	_right_45	;wreg free
  2597   000D86  C02F  F019         	movff	instructions@mL,stop@mL
  2598   000D8A  C030  F01A         	movff	instructions@mL+1,stop@mL+1
  2599   000D8E  C031  F01B         	movff	instructions@mR,stop@mR
  2600   000D92  C032  F01C         	movff	instructions@mR+1,stop@mR+1
  2601   000D96  EC34  F00C         	call	_stop	;wreg free
  2602   000D9A                     l3497:
  2603                           
  2604                           ;dc_motor.c: 286:     if (count == 7){left_45(mL,mR,3); stop(mL,mR);}
  2605   000D9A  0E07               	movlw	7
  2606   000D9C  1833               	xorwf	instructions@count^0,w,c
  2607   000D9E  1034               	iorwf	(instructions@count+1)^0,w,c
  2608   000DA0  A4D8               	btfss	status,2,c
  2609   000DA2  EFD5  F006         	goto	u2791
  2610   000DA6  EFD7  F006         	goto	u2790
  2611   000DAA                     u2791:
  2612   000DAA  EFEF  F006         	goto	l3501
  2613   000DAE                     u2790:
  2614   000DAE  C02F  F01F         	movff	instructions@mL,left_45@mL
  2615   000DB2  C030  F020         	movff	instructions@mL+1,left_45@mL+1
  2616   000DB6  C031  F021         	movff	instructions@mR,left_45@mR
  2617   000DBA  C032  F022         	movff	instructions@mR+1,left_45@mR+1
  2618   000DBE  0E00               	movlw	0
  2619   000DC0  6E24               	movwf	(left_45@count+1)^0,c
  2620   000DC2  0E03               	movlw	3
  2621   000DC4  6E23               	movwf	left_45@count^0,c
  2622   000DC6  ECA8  F008         	call	_left_45	;wreg free
  2623   000DCA  C02F  F019         	movff	instructions@mL,stop@mL
  2624   000DCE  C030  F01A         	movff	instructions@mL+1,stop@mL+1
  2625   000DD2  C031  F01B         	movff	instructions@mR,stop@mR
  2626   000DD6  C032  F01C         	movff	instructions@mR+1,stop@mR+1
  2627   000DDA  EC34  F00C         	call	_stop	;wreg free
  2628   000DDE                     l3501:
  2629                           
  2630                           ;dc_motor.c: 288:     if (count == 9){reverse_yellow(mL,mR);}
  2631   000DDE  0E09               	movlw	9
  2632   000DE0  1833               	xorwf	instructions@count^0,w,c
  2633   000DE2  1034               	iorwf	(instructions@count+1)^0,w,c
  2634   000DE4  A4D8               	btfss	status,2,c
  2635   000DE6  EFF7  F006         	goto	u2801
  2636   000DEA  EFF9  F006         	goto	u2800
  2637   000DEE                     u2801:
  2638   000DEE  EF03  F007         	goto	l3505
  2639   000DF2                     u2800:
  2640   000DF2  C02F  F029         	movff	instructions@mL,reverse_yellow@mL
  2641   000DF6  C030  F02A         	movff	instructions@mL+1,reverse_yellow@mL+1
  2642   000DFA  C031  F02B         	movff	instructions@mR,reverse_yellow@mR
  2643   000DFE  C032  F02C         	movff	instructions@mR+1,reverse_yellow@mR+1
  2644   000E02  EC0E  F00D         	call	_reverse_yellow	;wreg free
  2645   000E06                     l3505:
  2646                           
  2647                           ;dc_motor.c: 289:     if (count == 10) {reverse_pink(mL,mR);}
  2648   000E06  0E0A               	movlw	10
  2649   000E08  1833               	xorwf	instructions@count^0,w,c
  2650   000E0A  1034               	iorwf	(instructions@count+1)^0,w,c
  2651   000E0C  A4D8               	btfss	status,2,c
  2652   000E0E  EF0B  F007         	goto	u2811
  2653   000E12  EF0D  F007         	goto	u2810
  2654   000E16                     u2811:
  2655   000E16  EF17  F007         	goto	l383
  2656   000E1A                     u2810:
  2657   000E1A  C02F  F029         	movff	instructions@mL,reverse_pink@mL
  2658   000E1E  C030  F02A         	movff	instructions@mL+1,reverse_pink@mL+1
  2659   000E22  C031  F02B         	movff	instructions@mR,reverse_pink@mR
  2660   000E26  C032  F02C         	movff	instructions@mR+1,reverse_pink@mR+1
  2661   000E2A  EC47  F00D         	call	_reverse_pink	;wreg free
  2662   000E2E                     l383:
  2663   000E2E  0012               	return		;funcret
  2664   000E30                     __end_of_instructions:
  2665                           	callstack 0
  2666                           
  2667 ;; *************** function _space *****************
  2668 ;; Defined at:
  2669 ;;		line 231 in file "dc_motor.c"
  2670 ;; Parameters:    Size  Location     Type
  2671 ;;  mL              2   30[COMRAM] PTR struct DC_motor
  2672 ;;		 -> motorL(9), 
  2673 ;;  mR              2   32[COMRAM] PTR struct DC_motor
  2674 ;;		 -> motorR(9), 
  2675 ;; Auto vars:     Size  Location     Type
  2676 ;;		None
  2677 ;; Return value:  Size  Location     Type
  2678 ;;                  1    wreg      void 
  2679 ;; Registers used:
  2680 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2681 ;; Tracked objects:
  2682 ;;		On entry : 0/0
  2683 ;;		On exit  : 0/0
  2684 ;;		Unchanged: 0/0
  2685 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2686 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2687 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2688 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2689 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2690 ;;Total ram usage:        6 bytes
  2691 ;; Hardware stack levels used: 1
  2692 ;; Hardware stack levels required when called: 8
  2693 ;; This function calls:
  2694 ;;		_setMotorPWM
  2695 ;;		_stop
  2696 ;; This function is called by:
  2697 ;;		_instructions
  2698 ;; This function uses a non-reentrant model
  2699 ;;
  2700                           
  2701                           	psect	text11
  2702   0015EC                     __ptext11:
  2703                           	callstack 0
  2704   0015EC                     _space:
  2705                           	callstack 20
  2706   0015EC                     
  2707                           ;dc_motor.c: 231: void space(DC_motor *mL, DC_motor *mR);dc_motor.c: 232: {;dc_motor.c: 
      +                          233:     stop(mL,mR);
  2708   0015EC  C01F  F019         	movff	space@mL,stop@mL
  2709   0015F0  C020  F01A         	movff	space@mL+1,stop@mL+1
  2710   0015F4  C021  F01B         	movff	space@mR,stop@mR
  2711   0015F8  C022  F01C         	movff	space@mR+1,stop@mR+1
  2712   0015FC  EC34  F00C         	call	_stop	;wreg free
  2713   001600                     
  2714                           ;dc_motor.c: 234:     LATHbits.LATH1 = 1;
  2715   001600  8280               	bsf	128,1,c	;volatile
  2716   001602                     
  2717                           ;dc_motor.c: 235:     mL-> direction = 0;
  2718   001602  EE20 F001          	lfsr	2,1
  2719   001606  501F               	movf	space@mL^0,w,c
  2720   001608  26D9               	addwf	fsr2l,f,c
  2721   00160A  5020               	movf	(space@mL+1)^0,w,c
  2722   00160C  22DA               	addwfc	fsr2h,f,c
  2723   00160E  0E00               	movlw	0
  2724   001610  6EDF               	movwf	indf2,c
  2725   001612                     
  2726                           ;dc_motor.c: 236:     mR-> direction = 0;
  2727   001612  EE20 F001          	lfsr	2,1
  2728   001616  5021               	movf	space@mR^0,w,c
  2729   001618  26D9               	addwf	fsr2l,f,c
  2730   00161A  5022               	movf	(space@mR+1)^0,w,c
  2731   00161C  22DA               	addwfc	fsr2h,f,c
  2732   00161E  0E00               	movlw	0
  2733   001620  6EDF               	movwf	indf2,c
  2734                           
  2735                           ;dc_motor.c: 237:     setMotorPWM(mR);
  2736   001622  C021  F013         	movff	space@mR,setMotorPWM@m
  2737   001626  C022  F014         	movff	space@mR+1,setMotorPWM@m+1
  2738   00162A  ECF2  F007         	call	_setMotorPWM	;wreg free
  2739                           
  2740                           ;dc_motor.c: 238:     setMotorPWM(mL);
  2741   00162E  C01F  F013         	movff	space@mL,setMotorPWM@m
  2742   001632  C020  F014         	movff	space@mL+1,setMotorPWM@m+1
  2743   001636  ECF2  F007         	call	_setMotorPWM	;wreg free
  2744                           
  2745                           ;dc_motor.c: 239:     while ((mL->power <40) && (mR->power <40)){
  2746   00163A  EF3B  F00B         	goto	l3225
  2747   00163E                     l3217:
  2748                           
  2749                           ;dc_motor.c: 240:         mL->power += 10;
  2750   00163E  C01F  FFD9         	movff	space@mL,fsr2l
  2751   001642  C020  FFDA         	movff	space@mL+1,fsr2h
  2752   001646  0E0A               	movlw	10
  2753   001648  26DF               	addwf	indf2,f,c
  2754                           
  2755                           ;dc_motor.c: 241:         mR->power += 10;
  2756   00164A  C021  FFD9         	movff	space@mR,fsr2l
  2757   00164E  C022  FFDA         	movff	space@mR+1,fsr2h
  2758   001652  0E0A               	movlw	10
  2759   001654  26DF               	addwf	indf2,f,c
  2760   001656                     
  2761                           ;dc_motor.c: 242:         setMotorPWM(mL);
  2762   001656  C01F  F013         	movff	space@mL,setMotorPWM@m
  2763   00165A  C020  F014         	movff	space@mL+1,setMotorPWM@m+1
  2764   00165E  ECF2  F007         	call	_setMotorPWM	;wreg free
  2765   001662                     
  2766                           ;dc_motor.c: 243:         setMotorPWM(mR);
  2767   001662  C021  F013         	movff	space@mR,setMotorPWM@m
  2768   001666  C022  F014         	movff	space@mR+1,setMotorPWM@m+1
  2769   00166A  ECF2  F007         	call	_setMotorPWM	;wreg free
  2770   00166E                     
  2771                           ;dc_motor.c: 244:         _delay((unsigned long)((20)*(64000000/4000000.0)));
  2772   00166E  0E6A               	movlw	106
  2773   001670                     u3227:
  2774   001670  2EE8               	decfsz	wreg,f,c
  2775   001672  D7FE               	bra	u3227
  2776   001674  D000               	nop2	
  2777   001676                     l3225:
  2778                           
  2779                           ;dc_motor.c: 239:     while ((mL->power <40) && (mR->power <40)){
  2780   001676  C01F  FFD9         	movff	space@mL,fsr2l
  2781   00167A  C020  FFDA         	movff	space@mL+1,fsr2h
  2782   00167E  0E28               	movlw	40
  2783   001680  60DF               	cpfslt	indf2,c
  2784   001682  EF45  F00B         	goto	u2381
  2785   001686  EF47  F00B         	goto	u2380
  2786   00168A                     u2381:
  2787   00168A  EF53  F00B         	goto	l3229
  2788   00168E                     u2380:
  2789   00168E  C021  FFD9         	movff	space@mR,fsr2l
  2790   001692  C022  FFDA         	movff	space@mR+1,fsr2h
  2791   001696  0E27               	movlw	39
  2792   001698  64DF               	cpfsgt	indf2,c
  2793   00169A  EF51  F00B         	goto	u2391
  2794   00169E  EF53  F00B         	goto	u2390
  2795   0016A2                     u2391:
  2796   0016A2  EF1F  F00B         	goto	l3217
  2797   0016A6                     u2390:
  2798   0016A6                     l3229:
  2799                           
  2800                           ;dc_motor.c: 246:     _delay((unsigned long)((300)*(64000000/4000.0)));
  2801   0016A6  0E19               	movlw	25
  2802   0016A8  6E24               	movwf	(??_space+1)^0,c
  2803   0016AA  0E5A               	movlw	90
  2804   0016AC  6E23               	movwf	??_space^0,c
  2805   0016AE  0EB2               	movlw	178
  2806   0016B0                     u3237:
  2807   0016B0  2EE8               	decfsz	wreg,f,c
  2808   0016B2  D7FE               	bra	u3237
  2809   0016B4  2E23               	decfsz	??_space^0,f,c
  2810   0016B6  D7FC               	bra	u3237
  2811   0016B8  2E24               	decfsz	(??_space+1)^0,f,c
  2812   0016BA  D7FA               	bra	u3237
  2813   0016BC                     
  2814                           ;dc_motor.c: 247:     stop(mL,mR);
  2815   0016BC  C01F  F019         	movff	space@mL,stop@mL
  2816   0016C0  C020  F01A         	movff	space@mL+1,stop@mL+1
  2817   0016C4  C021  F01B         	movff	space@mR,stop@mR
  2818   0016C8  C022  F01C         	movff	space@mR+1,stop@mR+1
  2819   0016CC  EC34  F00C         	call	_stop	;wreg free
  2820   0016D0                     
  2821                           ;dc_motor.c: 248:     _delay((unsigned long)((200)*(64000000/4000.0)));
  2822   0016D0  0E11               	movlw	17
  2823   0016D2  6E24               	movwf	(??_space+1)^0,c
  2824   0016D4  0E3C               	movlw	60
  2825   0016D6  6E23               	movwf	??_space^0,c
  2826   0016D8  0ECB               	movlw	203
  2827   0016DA                     u3247:
  2828   0016DA  2EE8               	decfsz	wreg,f,c
  2829   0016DC  D7FE               	bra	u3247
  2830   0016DE  2E23               	decfsz	??_space^0,f,c
  2831   0016E0  D7FC               	bra	u3247
  2832   0016E2  2E24               	decfsz	(??_space+1)^0,f,c
  2833   0016E4  D7FA               	bra	u3247
  2834   0016E6  F000               	nop	
  2835   0016E8                     
  2836                           ;dc_motor.c: 249:     LATHbits.LATH1 = 0;
  2837   0016E8  9280               	bcf	128,1,c	;volatile
  2838   0016EA  0012               	return		;funcret
  2839   0016EC                     __end_of_space:
  2840                           	callstack 0
  2841                           
  2842 ;; *************** function _reverse_yellow *****************
  2843 ;; Defined at:
  2844 ;;		line 263 in file "dc_motor.c"
  2845 ;; Parameters:    Size  Location     Type
  2846 ;;  mL              2   40[COMRAM] PTR struct DC_motor
  2847 ;;		 -> motorL(9), 
  2848 ;;  mR              2   42[COMRAM] PTR struct DC_motor
  2849 ;;		 -> motorR(9), 
  2850 ;; Auto vars:     Size  Location     Type
  2851 ;;		None
  2852 ;; Return value:  Size  Location     Type
  2853 ;;                  1    wreg      void 
  2854 ;; Registers used:
  2855 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2856 ;; Tracked objects:
  2857 ;;		On entry : 0/0
  2858 ;;		On exit  : 0/0
  2859 ;;		Unchanged: 0/0
  2860 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2861 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2862 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2863 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2864 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2865 ;;Total ram usage:        6 bytes
  2866 ;; Hardware stack levels used: 1
  2867 ;; Hardware stack levels required when called: 9
  2868 ;; This function calls:
  2869 ;;		_left_45
  2870 ;;		_reverse
  2871 ;;		_stop
  2872 ;; This function is called by:
  2873 ;;		_instructions
  2874 ;; This function uses a non-reentrant model
  2875 ;;
  2876                           
  2877                           	psect	text12
  2878   001A1C                     __ptext12:
  2879                           	callstack 0
  2880   001A1C                     _reverse_yellow:
  2881                           	callstack 19
  2882   001A1C                     
  2883                           ;dc_motor.c: 265:     left_45(mL,mR,2);
  2884   001A1C  C029  F01F         	movff	reverse_yellow@mL,left_45@mL
  2885   001A20  C02A  F020         	movff	reverse_yellow@mL+1,left_45@mL+1
  2886   001A24  C02B  F021         	movff	reverse_yellow@mR,left_45@mR
  2887   001A28  C02C  F022         	movff	reverse_yellow@mR+1,left_45@mR+1
  2888   001A2C  0E00               	movlw	0
  2889   001A2E  6E24               	movwf	(left_45@count+1)^0,c
  2890   001A30  0E02               	movlw	2
  2891   001A32  6E23               	movwf	left_45@count^0,c
  2892   001A34  ECA8  F008         	call	_left_45	;wreg free
  2893                           
  2894                           ;dc_motor.c: 266:     stop(mL,mR);
  2895   001A38  C029  F019         	movff	reverse_yellow@mL,stop@mL
  2896   001A3C  C02A  F01A         	movff	reverse_yellow@mL+1,stop@mL+1
  2897   001A40  C02B  F01B         	movff	reverse_yellow@mR,stop@mR
  2898   001A44  C02C  F01C         	movff	reverse_yellow@mR+1,stop@mR+1
  2899   001A48  EC34  F00C         	call	_stop	;wreg free
  2900                           
  2901                           ;dc_motor.c: 268:      reverse(mL,mR);
  2902   001A4C  C029  F01F         	movff	reverse_yellow@mL,reverse@mL
  2903   001A50  C02A  F020         	movff	reverse_yellow@mL+1,reverse@mL+1
  2904   001A54  C02B  F021         	movff	reverse_yellow@mR,reverse@mR
  2905   001A58  C02C  F022         	movff	reverse_yellow@mR+1,reverse@mR+1
  2906   001A5C  EC76  F00B         	call	_reverse	;wreg free
  2907   001A60                     
  2908                           ;dc_motor.c: 269:     _delay((unsigned long)((400)*(64000000/4000.0)));
  2909   001A60  0E21               	movlw	33
  2910   001A62  6E2E               	movwf	(??_reverse_yellow+1)^0,c
  2911   001A64  0E78               	movlw	120
  2912   001A66  6E2D               	movwf	??_reverse_yellow^0,c
  2913   001A68  0E98               	movlw	152
  2914   001A6A                     u3257:
  2915   001A6A  2EE8               	decfsz	wreg,f,c
  2916   001A6C  D7FE               	bra	u3257
  2917   001A6E  2E2D               	decfsz	??_reverse_yellow^0,f,c
  2918   001A70  D7FC               	bra	u3257
  2919   001A72  2E2E               	decfsz	(??_reverse_yellow+1)^0,f,c
  2920   001A74  D7FA               	bra	u3257
  2921   001A76  D000               	nop2	
  2922   001A78                     
  2923                           ;dc_motor.c: 270:     stop(mL,mR);
  2924   001A78  C029  F019         	movff	reverse_yellow@mL,stop@mL
  2925   001A7C  C02A  F01A         	movff	reverse_yellow@mL+1,stop@mL+1
  2926   001A80  C02B  F01B         	movff	reverse_yellow@mR,stop@mR
  2927   001A84  C02C  F01C         	movff	reverse_yellow@mR+1,stop@mR+1
  2928   001A88  EC34  F00C         	call	_stop	;wreg free
  2929   001A8C  0012               	return		;funcret
  2930   001A8E                     __end_of_reverse_yellow:
  2931                           	callstack 0
  2932                           
  2933 ;; *************** function _left_45 *****************
  2934 ;; Defined at:
  2935 ;;		line 187 in file "dc_motor.c"
  2936 ;; Parameters:    Size  Location     Type
  2937 ;;  mL              2   30[COMRAM] PTR struct DC_motor
  2938 ;;		 -> motorL(9), 
  2939 ;;  mR              2   32[COMRAM] PTR struct DC_motor
  2940 ;;		 -> motorR(9), 
  2941 ;;  count           2   34[COMRAM] int 
  2942 ;; Auto vars:     Size  Location     Type
  2943 ;;  i               2   38[COMRAM] int 
  2944 ;; Return value:  Size  Location     Type
  2945 ;;                  1    wreg      void 
  2946 ;; Registers used:
  2947 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2948 ;; Tracked objects:
  2949 ;;		On entry : 0/0
  2950 ;;		On exit  : 0/0
  2951 ;;		Unchanged: 0/0
  2952 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2953 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2954 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2955 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2956 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2957 ;;Total ram usage:       10 bytes
  2958 ;; Hardware stack levels used: 1
  2959 ;; Hardware stack levels required when called: 8
  2960 ;; This function calls:
  2961 ;;		_setMotorPWM
  2962 ;;		_stop
  2963 ;; This function is called by:
  2964 ;;		_reverse_yellow
  2965 ;;		_instructions
  2966 ;; This function uses a non-reentrant model
  2967 ;;
  2968                           
  2969                           	psect	text13
  2970   001150                     __ptext13:
  2971                           	callstack 0
  2972   001150                     _left_45:
  2973                           	callstack 19
  2974   001150                     
  2975                           ;dc_motor.c: 187: void left_45(DC_motor *mL, DC_motor *mR, int count);dc_motor.c: 188: {
      +                          ;dc_motor.c: 189:     stop(mL,mR);
  2976   001150  C01F  F019         	movff	left_45@mL,stop@mL
  2977   001154  C020  F01A         	movff	left_45@mL+1,stop@mL+1
  2978   001158  C021  F01B         	movff	left_45@mR,stop@mR
  2979   00115C  C022  F01C         	movff	left_45@mR+1,stop@mR+1
  2980   001160  EC34  F00C         	call	_stop	;wreg free
  2981   001164                     
  2982                           ;dc_motor.c: 190:     mL-> direction = 0;
  2983   001164  EE20 F001          	lfsr	2,1
  2984   001168  501F               	movf	left_45@mL^0,w,c
  2985   00116A  26D9               	addwf	fsr2l,f,c
  2986   00116C  5020               	movf	(left_45@mL+1)^0,w,c
  2987   00116E  22DA               	addwfc	fsr2h,f,c
  2988   001170  0E00               	movlw	0
  2989   001172  6EDF               	movwf	indf2,c
  2990   001174                     
  2991                           ;dc_motor.c: 191:     mR-> direction = 1;
  2992   001174  EE20 F001          	lfsr	2,1
  2993   001178  5021               	movf	left_45@mR^0,w,c
  2994   00117A  26D9               	addwf	fsr2l,f,c
  2995   00117C  5022               	movf	(left_45@mR+1)^0,w,c
  2996   00117E  22DA               	addwfc	fsr2h,f,c
  2997   001180  0E01               	movlw	1
  2998   001182  6EDF               	movwf	indf2,c
  2999   001184                     
  3000                           ;dc_motor.c: 192:     LATFbits.LATF0 = 1;
  3001   001184  807E               	bsf	126,0,c	;volatile
  3002   001186                     
  3003                           ;dc_motor.c: 193:     int i;;dc_motor.c: 194:     for (i = 0;i<count;i++){
  3004   001186  0E00               	movlw	0
  3005   001188  6E28               	movwf	(left_45@i+1)^0,c
  3006   00118A  0E00               	movlw	0
  3007   00118C  6E27               	movwf	left_45@i^0,c
  3008   00118E  EF38  F009         	goto	l3147
  3009   001192                     l3119:
  3010                           
  3011                           ;dc_motor.c: 196:         if (mL->power <= 30){mL->power += 10;}
  3012   001192  C01F  FFD9         	movff	left_45@mL,fsr2l
  3013   001196  C020  FFDA         	movff	left_45@mL+1,fsr2h
  3014   00119A  0E1F               	movlw	31
  3015   00119C  60DF               	cpfslt	indf2,c
  3016   00119E  EFD3  F008         	goto	u2281
  3017   0011A2  EFD5  F008         	goto	u2280
  3018   0011A6                     u2281:
  3019   0011A6  EFDB  F008         	goto	l3123
  3020   0011AA                     u2280:
  3021   0011AA  C01F  FFD9         	movff	left_45@mL,fsr2l
  3022   0011AE  C020  FFDA         	movff	left_45@mL+1,fsr2h
  3023   0011B2  0E0A               	movlw	10
  3024   0011B4  26DF               	addwf	indf2,f,c
  3025   0011B6                     l3123:
  3026                           
  3027                           ;dc_motor.c: 197:         if (mR->power <= 30){mR->power += 10;}
  3028   0011B6  C021  FFD9         	movff	left_45@mR,fsr2l
  3029   0011BA  C022  FFDA         	movff	left_45@mR+1,fsr2h
  3030   0011BE  0E1F               	movlw	31
  3031   0011C0  60DF               	cpfslt	indf2,c
  3032   0011C2  EFE5  F008         	goto	u2291
  3033   0011C6  EFE7  F008         	goto	u2290
  3034   0011CA                     u2291:
  3035   0011CA  EFED  F008         	goto	l3127
  3036   0011CE                     u2290:
  3037   0011CE  C021  FFD9         	movff	left_45@mR,fsr2l
  3038   0011D2  C022  FFDA         	movff	left_45@mR+1,fsr2h
  3039   0011D6  0E0A               	movlw	10
  3040   0011D8  26DF               	addwf	indf2,f,c
  3041   0011DA                     l3127:
  3042                           
  3043                           ;dc_motor.c: 198:         setMotorPWM(mL);
  3044   0011DA  C01F  F013         	movff	left_45@mL,setMotorPWM@m
  3045   0011DE  C020  F014         	movff	left_45@mL+1,setMotorPWM@m+1
  3046   0011E2  ECF2  F007         	call	_setMotorPWM	;wreg free
  3047   0011E6                     
  3048                           ;dc_motor.c: 199:         setMotorPWM(mR);
  3049   0011E6  C021  F013         	movff	left_45@mR,setMotorPWM@m
  3050   0011EA  C022  F014         	movff	left_45@mR+1,setMotorPWM@m+1
  3051   0011EE  ECF2  F007         	call	_setMotorPWM	;wreg free
  3052   0011F2                     
  3053                           ;dc_motor.c: 200:         _delay((unsigned long)((20)*(64000000/4000000.0)));
  3054   0011F2  0E6A               	movlw	106
  3055   0011F4                     u3267:
  3056   0011F4  2EE8               	decfsz	wreg,f,c
  3057   0011F6  D7FE               	bra	u3267
  3058   0011F8  D000               	nop2	
  3059   0011FA                     l3133:
  3060                           
  3061                           ;dc_motor.c: 195:     while ((mL->power <= 30) || (mR->power <= 30)){
  3062   0011FA  C01F  FFD9         	movff	left_45@mL,fsr2l
  3063   0011FE  C020  FFDA         	movff	left_45@mL+1,fsr2h
  3064   001202  0E1E               	movlw	30
  3065   001204  64DF               	cpfsgt	indf2,c
  3066   001206  EF07  F009         	goto	u2301
  3067   00120A  EF09  F009         	goto	u2300
  3068   00120E                     u2301:
  3069   00120E  EFC9  F008         	goto	l3119
  3070   001212                     u2300:
  3071   001212  C021  FFD9         	movff	left_45@mR,fsr2l
  3072   001216  C022  FFDA         	movff	left_45@mR+1,fsr2h
  3073   00121A  0E1E               	movlw	30
  3074   00121C  64DF               	cpfsgt	indf2,c
  3075   00121E  EF13  F009         	goto	u2311
  3076   001222  EF15  F009         	goto	u2310
  3077   001226                     u2311:
  3078   001226  EFC9  F008         	goto	l3119
  3079   00122A                     u2310:
  3080   00122A                     
  3081                           ;dc_motor.c: 202:     _delay((unsigned long)((230)*(64000000/4000.0)));
  3082   00122A  0E13               	movlw	19
  3083   00122C  6E26               	movwf	(??_left_45+1)^0,c
  3084   00122E  0EAC               	movlw	172
  3085   001230  6E25               	movwf	??_left_45^0,c
  3086   001232  0E2A               	movlw	42
  3087   001234                     u3277:
  3088   001234  2EE8               	decfsz	wreg,f,c
  3089   001236  D7FE               	bra	u3277
  3090   001238  2E25               	decfsz	??_left_45^0,f,c
  3091   00123A  D7FC               	bra	u3277
  3092   00123C  2E26               	decfsz	(??_left_45+1)^0,f,c
  3093   00123E  D7FA               	bra	u3277
  3094   001240                     
  3095                           ;dc_motor.c: 203:     stop(mL,mR);
  3096   001240  C01F  F019         	movff	left_45@mL,stop@mL
  3097   001244  C020  F01A         	movff	left_45@mL+1,stop@mL+1
  3098   001248  C021  F01B         	movff	left_45@mR,stop@mR
  3099   00124C  C022  F01C         	movff	left_45@mR+1,stop@mR+1
  3100   001250  EC34  F00C         	call	_stop	;wreg free
  3101   001254                     
  3102                           ;dc_motor.c: 204:     _delay((unsigned long)((150)*(64000000/4000.0)));
  3103   001254  0E0D               	movlw	13
  3104   001256  6E26               	movwf	(??_left_45+1)^0,c
  3105   001258  0E2D               	movlw	45
  3106   00125A  6E25               	movwf	??_left_45^0,c
  3107   00125C  0ED8               	movlw	216
  3108   00125E                     u3287:
  3109   00125E  2EE8               	decfsz	wreg,f,c
  3110   001260  D7FE               	bra	u3287
  3111   001262  2E25               	decfsz	??_left_45^0,f,c
  3112   001264  D7FC               	bra	u3287
  3113   001266  2E26               	decfsz	(??_left_45+1)^0,f,c
  3114   001268  D7FA               	bra	u3287
  3115   00126A                     
  3116                           ;dc_motor.c: 205:     LATFbits.LATF0 = 0;
  3117   00126A  907E               	bcf	126,0,c	;volatile
  3118   00126C                     
  3119                           ;dc_motor.c: 206:     }
  3120   00126C  4A27               	infsnz	left_45@i^0,f,c
  3121   00126E  2A28               	incf	(left_45@i+1)^0,f,c
  3122   001270                     l3147:
  3123   001270  5023               	movf	left_45@count^0,w,c
  3124   001272  5C27               	subwf	left_45@i^0,w,c
  3125   001274  5028               	movf	(left_45@i+1)^0,w,c
  3126   001276  0A80               	xorlw	128
  3127   001278  6E25               	movwf	??_left_45^0,c
  3128   00127A  5024               	movf	(left_45@count+1)^0,w,c
  3129   00127C  0A80               	xorlw	128
  3130   00127E  5825               	subwfb	??_left_45^0,w,c
  3131   001280  A0D8               	btfss	status,0,c
  3132   001282  EF45  F009         	goto	u2321
  3133   001286  EF47  F009         	goto	u2320
  3134   00128A                     u2321:
  3135   00128A  EFFD  F008         	goto	l3133
  3136   00128E                     u2320:
  3137   00128E  0012               	return		;funcret
  3138   001290                     __end_of_left_45:
  3139                           	callstack 0
  3140                           
  3141 ;; *************** function _reverse_pink *****************
  3142 ;; Defined at:
  3143 ;;		line 253 in file "dc_motor.c"
  3144 ;; Parameters:    Size  Location     Type
  3145 ;;  mL              2   40[COMRAM] PTR struct DC_motor
  3146 ;;		 -> motorL(9), 
  3147 ;;  mR              2   42[COMRAM] PTR struct DC_motor
  3148 ;;		 -> motorR(9), 
  3149 ;; Auto vars:     Size  Location     Type
  3150 ;;		None
  3151 ;; Return value:  Size  Location     Type
  3152 ;;                  1    wreg      void 
  3153 ;; Registers used:
  3154 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3155 ;; Tracked objects:
  3156 ;;		On entry : 0/0
  3157 ;;		On exit  : 0/0
  3158 ;;		Unchanged: 0/0
  3159 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3160 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3161 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3162 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3163 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3164 ;;Total ram usage:        6 bytes
  3165 ;; Hardware stack levels used: 1
  3166 ;; Hardware stack levels required when called: 9
  3167 ;; This function calls:
  3168 ;;		_reverse
  3169 ;;		_right_45
  3170 ;;		_stop
  3171 ;; This function is called by:
  3172 ;;		_instructions
  3173 ;; This function uses a non-reentrant model
  3174 ;;
  3175                           
  3176                           	psect	text14
  3177   001A8E                     __ptext14:
  3178                           	callstack 0
  3179   001A8E                     _reverse_pink:
  3180                           	callstack 19
  3181   001A8E                     
  3182                           ;dc_motor.c: 255:     right_45(mL,mR,2);
  3183   001A8E  C029  F01F         	movff	reverse_pink@mL,right_45@mL
  3184   001A92  C02A  F020         	movff	reverse_pink@mL+1,right_45@mL+1
  3185   001A96  C02B  F021         	movff	reverse_pink@mR,right_45@mR
  3186   001A9A  C02C  F022         	movff	reverse_pink@mR+1,right_45@mR+1
  3187   001A9E  0E00               	movlw	0
  3188   001AA0  6E24               	movwf	(right_45@count+1)^0,c
  3189   001AA2  0E02               	movlw	2
  3190   001AA4  6E23               	movwf	right_45@count^0,c
  3191   001AA6  EC48  F009         	call	_right_45	;wreg free
  3192                           
  3193                           ;dc_motor.c: 256:     stop(mL,mR);
  3194   001AAA  C029  F019         	movff	reverse_pink@mL,stop@mL
  3195   001AAE  C02A  F01A         	movff	reverse_pink@mL+1,stop@mL+1
  3196   001AB2  C02B  F01B         	movff	reverse_pink@mR,stop@mR
  3197   001AB6  C02C  F01C         	movff	reverse_pink@mR+1,stop@mR+1
  3198   001ABA  EC34  F00C         	call	_stop	;wreg free
  3199                           
  3200                           ;dc_motor.c: 258:      reverse(mL,mR);
  3201   001ABE  C029  F01F         	movff	reverse_pink@mL,reverse@mL
  3202   001AC2  C02A  F020         	movff	reverse_pink@mL+1,reverse@mL+1
  3203   001AC6  C02B  F021         	movff	reverse_pink@mR,reverse@mR
  3204   001ACA  C02C  F022         	movff	reverse_pink@mR+1,reverse@mR+1
  3205   001ACE  EC76  F00B         	call	_reverse	;wreg free
  3206   001AD2                     
  3207                           ;dc_motor.c: 259:     _delay((unsigned long)((400)*(64000000/4000.0)));
  3208   001AD2  0E21               	movlw	33
  3209   001AD4  6E2E               	movwf	(??_reverse_pink+1)^0,c
  3210   001AD6  0E78               	movlw	120
  3211   001AD8  6E2D               	movwf	??_reverse_pink^0,c
  3212   001ADA  0E98               	movlw	152
  3213   001ADC                     u3297:
  3214   001ADC  2EE8               	decfsz	wreg,f,c
  3215   001ADE  D7FE               	bra	u3297
  3216   001AE0  2E2D               	decfsz	??_reverse_pink^0,f,c
  3217   001AE2  D7FC               	bra	u3297
  3218   001AE4  2E2E               	decfsz	(??_reverse_pink+1)^0,f,c
  3219   001AE6  D7FA               	bra	u3297
  3220   001AE8  D000               	nop2	
  3221   001AEA                     
  3222                           ;dc_motor.c: 260:     stop(mL,mR);
  3223   001AEA  C029  F019         	movff	reverse_pink@mL,stop@mL
  3224   001AEE  C02A  F01A         	movff	reverse_pink@mL+1,stop@mL+1
  3225   001AF2  C02B  F01B         	movff	reverse_pink@mR,stop@mR
  3226   001AF6  C02C  F01C         	movff	reverse_pink@mR+1,stop@mR+1
  3227   001AFA  EC34  F00C         	call	_stop	;wreg free
  3228   001AFE  0012               	return		;funcret
  3229   001B00                     __end_of_reverse_pink:
  3230                           	callstack 0
  3231                           
  3232 ;; *************** function _right_45 *****************
  3233 ;; Defined at:
  3234 ;;		line 210 in file "dc_motor.c"
  3235 ;; Parameters:    Size  Location     Type
  3236 ;;  mL              2   30[COMRAM] PTR struct DC_motor
  3237 ;;		 -> motorL(9), 
  3238 ;;  mR              2   32[COMRAM] PTR struct DC_motor
  3239 ;;		 -> motorR(9), 
  3240 ;;  count           2   34[COMRAM] int 
  3241 ;; Auto vars:     Size  Location     Type
  3242 ;;  i               2   38[COMRAM] int 
  3243 ;; Return value:  Size  Location     Type
  3244 ;;                  1    wreg      void 
  3245 ;; Registers used:
  3246 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3247 ;; Tracked objects:
  3248 ;;		On entry : 0/0
  3249 ;;		On exit  : 0/0
  3250 ;;		Unchanged: 0/0
  3251 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3252 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3253 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3254 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3255 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3256 ;;Total ram usage:       10 bytes
  3257 ;; Hardware stack levels used: 1
  3258 ;; Hardware stack levels required when called: 8
  3259 ;; This function calls:
  3260 ;;		_setMotorPWM
  3261 ;;		_stop
  3262 ;; This function is called by:
  3263 ;;		_reverse_pink
  3264 ;;		_instructions
  3265 ;; This function uses a non-reentrant model
  3266 ;;
  3267                           
  3268                           	psect	text15
  3269   001290                     __ptext15:
  3270                           	callstack 0
  3271   001290                     _right_45:
  3272                           	callstack 20
  3273   001290                     
  3274                           ;dc_motor.c: 210: void right_45(DC_motor *mL, DC_motor *mR, int count);dc_motor.c: 211: 
      +                          {;dc_motor.c: 212:     mL-> direction = 1;
  3275   001290  EE20 F001          	lfsr	2,1
  3276   001294  501F               	movf	right_45@mL^0,w,c
  3277   001296  26D9               	addwf	fsr2l,f,c
  3278   001298  5020               	movf	(right_45@mL+1)^0,w,c
  3279   00129A  22DA               	addwfc	fsr2h,f,c
  3280   00129C  0E01               	movlw	1
  3281   00129E  6EDF               	movwf	indf2,c
  3282                           
  3283                           ;dc_motor.c: 213:     mR-> direction = 0;
  3284   0012A0  EE20 F001          	lfsr	2,1
  3285   0012A4  5021               	movf	right_45@mR^0,w,c
  3286   0012A6  26D9               	addwf	fsr2l,f,c
  3287   0012A8  5022               	movf	(right_45@mR+1)^0,w,c
  3288   0012AA  22DA               	addwfc	fsr2h,f,c
  3289   0012AC  0E00               	movlw	0
  3290   0012AE  6EDF               	movwf	indf2,c
  3291   0012B0                     
  3292                           ;dc_motor.c: 214:     LATHbits.LATH0 = 1;
  3293   0012B0  8080               	bsf	128,0,c	;volatile
  3294   0012B2                     
  3295                           ;dc_motor.c: 215:     int i;;dc_motor.c: 216:     for (i = 0;i<count;i++){
  3296   0012B2  0E00               	movlw	0
  3297   0012B4  6E28               	movwf	(right_45@i+1)^0,c
  3298   0012B6  0E00               	movlw	0
  3299   0012B8  6E27               	movwf	right_45@i^0,c
  3300   0012BA  EFCF  F009         	goto	l3183
  3301   0012BE                     l3155:
  3302                           
  3303                           ;dc_motor.c: 218:         if (mL->power <= 30){mL->power += 10;}
  3304   0012BE  C01F  FFD9         	movff	right_45@mL,fsr2l
  3305   0012C2  C020  FFDA         	movff	right_45@mL+1,fsr2h
  3306   0012C6  0E1F               	movlw	31
  3307   0012C8  60DF               	cpfslt	indf2,c
  3308   0012CA  EF69  F009         	goto	u2331
  3309   0012CE  EF6B  F009         	goto	u2330
  3310   0012D2                     u2331:
  3311   0012D2  EF71  F009         	goto	l3159
  3312   0012D6                     u2330:
  3313   0012D6  C01F  FFD9         	movff	right_45@mL,fsr2l
  3314   0012DA  C020  FFDA         	movff	right_45@mL+1,fsr2h
  3315   0012DE  0E0A               	movlw	10
  3316   0012E0  26DF               	addwf	indf2,f,c
  3317   0012E2                     l3159:
  3318                           
  3319                           ;dc_motor.c: 219:         if (mR->power <= 30){mR->power += 10;}
  3320   0012E2  C021  FFD9         	movff	right_45@mR,fsr2l
  3321   0012E6  C022  FFDA         	movff	right_45@mR+1,fsr2h
  3322   0012EA  0E1F               	movlw	31
  3323   0012EC  60DF               	cpfslt	indf2,c
  3324   0012EE  EF7B  F009         	goto	u2341
  3325   0012F2  EF7D  F009         	goto	u2340
  3326   0012F6                     u2341:
  3327   0012F6  EF83  F009         	goto	l3163
  3328   0012FA                     u2340:
  3329   0012FA  C021  FFD9         	movff	right_45@mR,fsr2l
  3330   0012FE  C022  FFDA         	movff	right_45@mR+1,fsr2h
  3331   001302  0E0A               	movlw	10
  3332   001304  26DF               	addwf	indf2,f,c
  3333   001306                     l3163:
  3334                           
  3335                           ;dc_motor.c: 220:         setMotorPWM(mL);
  3336   001306  C01F  F013         	movff	right_45@mL,setMotorPWM@m
  3337   00130A  C020  F014         	movff	right_45@mL+1,setMotorPWM@m+1
  3338   00130E  ECF2  F007         	call	_setMotorPWM	;wreg free
  3339   001312                     
  3340                           ;dc_motor.c: 221:         setMotorPWM(mR);
  3341   001312  C021  F013         	movff	right_45@mR,setMotorPWM@m
  3342   001316  C022  F014         	movff	right_45@mR+1,setMotorPWM@m+1
  3343   00131A  ECF2  F007         	call	_setMotorPWM	;wreg free
  3344   00131E                     
  3345                           ;dc_motor.c: 222:         _delay((unsigned long)((50)*(64000000/4000000.0)));
  3346   00131E  0EA0               	movlw	160
  3347   001320                     u3307:
  3348   001320  D000               	nop2	
  3349   001322  2EE8               	decfsz	wreg,f,c
  3350   001324  D7FD               	bra	u3307
  3351   001326                     l3169:
  3352                           
  3353                           ;dc_motor.c: 217:     while ((mL->power <= 30) || (mR->power <= 30)){
  3354   001326  C01F  FFD9         	movff	right_45@mL,fsr2l
  3355   00132A  C020  FFDA         	movff	right_45@mL+1,fsr2h
  3356   00132E  0E1E               	movlw	30
  3357   001330  64DF               	cpfsgt	indf2,c
  3358   001332  EF9D  F009         	goto	u2351
  3359   001336  EF9F  F009         	goto	u2350
  3360   00133A                     u2351:
  3361   00133A  EF5F  F009         	goto	l3155
  3362   00133E                     u2350:
  3363   00133E  C021  FFD9         	movff	right_45@mR,fsr2l
  3364   001342  C022  FFDA         	movff	right_45@mR+1,fsr2h
  3365   001346  0E1E               	movlw	30
  3366   001348  64DF               	cpfsgt	indf2,c
  3367   00134A  EFA9  F009         	goto	u2361
  3368   00134E  EFAB  F009         	goto	u2360
  3369   001352                     u2361:
  3370   001352  EF5F  F009         	goto	l3155
  3371   001356                     u2360:
  3372   001356                     
  3373                           ;dc_motor.c: 224:     _delay((unsigned long)((250)*(64000000/4000.0)));
  3374   001356  0E15               	movlw	21
  3375   001358  6E26               	movwf	(??_right_45+1)^0,c
  3376   00135A  0E4B               	movlw	75
  3377   00135C  6E25               	movwf	??_right_45^0,c
  3378   00135E  0EBE               	movlw	190
  3379   001360                     u3317:
  3380   001360  2EE8               	decfsz	wreg,f,c
  3381   001362  D7FE               	bra	u3317
  3382   001364  2E25               	decfsz	??_right_45^0,f,c
  3383   001366  D7FC               	bra	u3317
  3384   001368  2E26               	decfsz	(??_right_45+1)^0,f,c
  3385   00136A  D7FA               	bra	u3317
  3386   00136C  D000               	nop2	
  3387   00136E                     
  3388                           ;dc_motor.c: 225:     stop(mL,mR);
  3389   00136E  C01F  F019         	movff	right_45@mL,stop@mL
  3390   001372  C020  F01A         	movff	right_45@mL+1,stop@mL+1
  3391   001376  C021  F01B         	movff	right_45@mR,stop@mR
  3392   00137A  C022  F01C         	movff	right_45@mR+1,stop@mR+1
  3393   00137E  EC34  F00C         	call	_stop	;wreg free
  3394   001382                     
  3395                           ;dc_motor.c: 226:     _delay((unsigned long)((150)*(64000000/4000.0)));
  3396   001382  0E0D               	movlw	13
  3397   001384  6E26               	movwf	(??_right_45+1)^0,c
  3398   001386  0E2D               	movlw	45
  3399   001388  6E25               	movwf	??_right_45^0,c
  3400   00138A  0ED8               	movlw	216
  3401   00138C                     u3327:
  3402   00138C  2EE8               	decfsz	wreg,f,c
  3403   00138E  D7FE               	bra	u3327
  3404   001390  2E25               	decfsz	??_right_45^0,f,c
  3405   001392  D7FC               	bra	u3327
  3406   001394  2E26               	decfsz	(??_right_45+1)^0,f,c
  3407   001396  D7FA               	bra	u3327
  3408   001398                     
  3409                           ;dc_motor.c: 227:     LATHbits.LATH0 = 0;
  3410   001398  9080               	bcf	128,0,c	;volatile
  3411   00139A                     
  3412                           ;dc_motor.c: 228: }
  3413   00139A  4A27               	infsnz	right_45@i^0,f,c
  3414   00139C  2A28               	incf	(right_45@i+1)^0,f,c
  3415   00139E                     l3183:
  3416   00139E  5023               	movf	right_45@count^0,w,c
  3417   0013A0  5C27               	subwf	right_45@i^0,w,c
  3418   0013A2  5028               	movf	(right_45@i+1)^0,w,c
  3419   0013A4  0A80               	xorlw	128
  3420   0013A6  6E25               	movwf	??_right_45^0,c
  3421   0013A8  5024               	movf	(right_45@count+1)^0,w,c
  3422   0013AA  0A80               	xorlw	128
  3423   0013AC  5825               	subwfb	??_right_45^0,w,c
  3424   0013AE  A0D8               	btfss	status,0,c
  3425   0013B0  EFDC  F009         	goto	u2371
  3426   0013B4  EFDE  F009         	goto	u2370
  3427   0013B8                     u2371:
  3428   0013B8  EF93  F009         	goto	l3169
  3429   0013BC                     u2370:
  3430   0013BC  0012               	return		;funcret
  3431   0013BE                     __end_of_right_45:
  3432                           	callstack 0
  3433                           
  3434 ;; *************** function _reverse *****************
  3435 ;; Defined at:
  3436 ;;		line 146 in file "dc_motor.c"
  3437 ;; Parameters:    Size  Location     Type
  3438 ;;  mL              2   30[COMRAM] PTR struct DC_motor
  3439 ;;		 -> motorL(9), 
  3440 ;;  mR              2   32[COMRAM] PTR struct DC_motor
  3441 ;;		 -> motorR(9), 
  3442 ;; Auto vars:     Size  Location     Type
  3443 ;;		None
  3444 ;; Return value:  Size  Location     Type
  3445 ;;                  1    wreg      void 
  3446 ;; Registers used:
  3447 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3448 ;; Tracked objects:
  3449 ;;		On entry : 0/0
  3450 ;;		On exit  : 0/0
  3451 ;;		Unchanged: 0/0
  3452 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3453 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3454 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3455 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3456 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3457 ;;Total ram usage:        5 bytes
  3458 ;; Hardware stack levels used: 1
  3459 ;; Hardware stack levels required when called: 8
  3460 ;; This function calls:
  3461 ;;		_setMotorPWM
  3462 ;;		_stop
  3463 ;; This function is called by:
  3464 ;;		_reverse_pink
  3465 ;;		_reverse_yellow
  3466 ;;		_instructions
  3467 ;; This function uses a non-reentrant model
  3468 ;;
  3469                           
  3470                           	psect	text16
  3471   0016EC                     __ptext16:
  3472                           	callstack 0
  3473   0016EC                     _reverse:
  3474                           	callstack 19
  3475   0016EC                     
  3476                           ;dc_motor.c: 146: void reverse(DC_motor *mL, DC_motor *mR);dc_motor.c: 147: {;dc_motor.c
      +                          : 148:     stop(mL,mR);
  3477   0016EC  C01F  F019         	movff	reverse@mL,stop@mL
  3478   0016F0  C020  F01A         	movff	reverse@mL+1,stop@mL+1
  3479   0016F4  C021  F01B         	movff	reverse@mR,stop@mR
  3480   0016F8  C022  F01C         	movff	reverse@mR+1,stop@mR+1
  3481   0016FC  EC34  F00C         	call	_stop	;wreg free
  3482   001700                     
  3483                           ;dc_motor.c: 149:     mL-> direction = 0;
  3484   001700  EE20 F001          	lfsr	2,1
  3485   001704  501F               	movf	reverse@mL^0,w,c
  3486   001706  26D9               	addwf	fsr2l,f,c
  3487   001708  5020               	movf	(reverse@mL+1)^0,w,c
  3488   00170A  22DA               	addwfc	fsr2h,f,c
  3489   00170C  0E00               	movlw	0
  3490   00170E  6EDF               	movwf	indf2,c
  3491   001710                     
  3492                           ;dc_motor.c: 150:     mR-> direction = 0;
  3493   001710  EE20 F001          	lfsr	2,1
  3494   001714  5021               	movf	reverse@mR^0,w,c
  3495   001716  26D9               	addwf	fsr2l,f,c
  3496   001718  5022               	movf	(reverse@mR+1)^0,w,c
  3497   00171A  22DA               	addwfc	fsr2h,f,c
  3498   00171C  0E00               	movlw	0
  3499   00171E  6EDF               	movwf	indf2,c
  3500   001720                     
  3501                           ;dc_motor.c: 151:     LATHbits.LATH1 = 1;
  3502   001720  8280               	bsf	128,1,c	;volatile
  3503                           
  3504                           ;dc_motor.c: 152:     setMotorPWM(mR);
  3505   001722  C021  F013         	movff	reverse@mR,setMotorPWM@m
  3506   001726  C022  F014         	movff	reverse@mR+1,setMotorPWM@m+1
  3507   00172A  ECF2  F007         	call	_setMotorPWM	;wreg free
  3508                           
  3509                           ;dc_motor.c: 153:     setMotorPWM(mL);
  3510   00172E  C01F  F013         	movff	reverse@mL,setMotorPWM@m
  3511   001732  C020  F014         	movff	reverse@mL+1,setMotorPWM@m+1
  3512   001736  ECF2  F007         	call	_setMotorPWM	;wreg free
  3513                           
  3514                           ;dc_motor.c: 154:     while ((mL->power <40) && (mR->power <40)){
  3515   00173A  EFBB  F00B         	goto	l3105
  3516   00173E                     l3097:
  3517                           
  3518                           ;dc_motor.c: 155:         mL->power += 10;
  3519   00173E  C01F  FFD9         	movff	reverse@mL,fsr2l
  3520   001742  C020  FFDA         	movff	reverse@mL+1,fsr2h
  3521   001746  0E0A               	movlw	10
  3522   001748  26DF               	addwf	indf2,f,c
  3523                           
  3524                           ;dc_motor.c: 156:         mR->power += 10;
  3525   00174A  C021  FFD9         	movff	reverse@mR,fsr2l
  3526   00174E  C022  FFDA         	movff	reverse@mR+1,fsr2h
  3527   001752  0E0A               	movlw	10
  3528   001754  26DF               	addwf	indf2,f,c
  3529   001756                     
  3530                           ;dc_motor.c: 157:         setMotorPWM(mL);
  3531   001756  C01F  F013         	movff	reverse@mL,setMotorPWM@m
  3532   00175A  C020  F014         	movff	reverse@mL+1,setMotorPWM@m+1
  3533   00175E  ECF2  F007         	call	_setMotorPWM	;wreg free
  3534   001762                     
  3535                           ;dc_motor.c: 158:         setMotorPWM(mR);
  3536   001762  C021  F013         	movff	reverse@mR,setMotorPWM@m
  3537   001766  C022  F014         	movff	reverse@mR+1,setMotorPWM@m+1
  3538   00176A  ECF2  F007         	call	_setMotorPWM	;wreg free
  3539   00176E                     
  3540                           ;dc_motor.c: 159:         _delay((unsigned long)((20)*(64000000/4000000.0)));
  3541   00176E  0E6A               	movlw	106
  3542   001770                     u3337:
  3543   001770  2EE8               	decfsz	wreg,f,c
  3544   001772  D7FE               	bra	u3337
  3545   001774  D000               	nop2	
  3546   001776                     l3105:
  3547                           
  3548                           ;dc_motor.c: 154:     while ((mL->power <40) && (mR->power <40)){
  3549   001776  C01F  FFD9         	movff	reverse@mL,fsr2l
  3550   00177A  C020  FFDA         	movff	reverse@mL+1,fsr2h
  3551   00177E  0E28               	movlw	40
  3552   001780  60DF               	cpfslt	indf2,c
  3553   001782  EFC5  F00B         	goto	u2261
  3554   001786  EFC7  F00B         	goto	u2260
  3555   00178A                     u2261:
  3556   00178A  EFD3  F00B         	goto	l329
  3557   00178E                     u2260:
  3558   00178E  C021  FFD9         	movff	reverse@mR,fsr2l
  3559   001792  C022  FFDA         	movff	reverse@mR+1,fsr2h
  3560   001796  0E27               	movlw	39
  3561   001798  64DF               	cpfsgt	indf2,c
  3562   00179A  EFD1  F00B         	goto	u2271
  3563   00179E  EFD3  F00B         	goto	u2270
  3564   0017A2                     u2271:
  3565   0017A2  EF9F  F00B         	goto	l3097
  3566   0017A6                     u2270:
  3567   0017A6                     l329:
  3568                           
  3569                           ;dc_motor.c: 161:     LATHbits.LATH1 = 0;
  3570   0017A6  9280               	bcf	128,1,c	;volatile
  3571   0017A8  0012               	return		;funcret
  3572   0017AA                     __end_of_reverse:
  3573                           	callstack 0
  3574                           
  3575 ;; *************** function _get_timer_val *****************
  3576 ;; Defined at:
  3577 ;;		line 28 in file "timers.c"
  3578 ;; Parameters:    Size  Location     Type
  3579 ;;		None
  3580 ;; Auto vars:     Size  Location     Type
  3581 ;;  timer_val       2   11[COMRAM] unsigned int 
  3582 ;; Return value:  Size  Location     Type
  3583 ;;                  2    5[COMRAM] unsigned int 
  3584 ;; Registers used:
  3585 ;;		wreg, status,2, status,0
  3586 ;; Tracked objects:
  3587 ;;		On entry : 0/0
  3588 ;;		On exit  : 0/0
  3589 ;;		Unchanged: 0/0
  3590 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3591 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3592 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3593 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3594 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3595 ;;Total ram usage:        8 bytes
  3596 ;; Hardware stack levels used: 1
  3597 ;; Hardware stack levels required when called: 5
  3598 ;; This function calls:
  3599 ;;		Nothing
  3600 ;; This function is called by:
  3601 ;;		_buggy_color_response
  3602 ;; This function uses a non-reentrant model
  3603 ;;
  3604                           
  3605                           	psect	text17
  3606   001F04                     __ptext17:
  3607                           	callstack 0
  3608   001F04                     _get_timer_val:
  3609                           	callstack 24
  3610   001F04                     
  3611                           ;timers.c: 30:     unsigned int timer_val = TMR0L | (TMR0H << 8);
  3612   001F04  50D4               	movf	212,w,c	;volatile
  3613   001F06  6E09               	movwf	(??_get_timer_val+1)^0,c
  3614   001F08  6A08               	clrf	??_get_timer_val^0,c
  3615   001F0A  50D3               	movf	211,w,c	;volatile
  3616   001F0C  6E0A               	movwf	(??_get_timer_val+2)^0,c
  3617   001F0E  6A0B               	clrf	(??_get_timer_val+3)^0,c
  3618   001F10  5008               	movf	??_get_timer_val^0,w,c
  3619   001F12  100A               	iorwf	(??_get_timer_val+2)^0,w,c
  3620   001F14  6E0C               	movwf	get_timer_val@timer_val^0,c
  3621   001F16  5009               	movf	(??_get_timer_val+1)^0,w,c
  3622   001F18  100B               	iorwf	(??_get_timer_val+3)^0,w,c
  3623   001F1A  6E0D               	movwf	(get_timer_val@timer_val+1)^0,c
  3624   001F1C                     
  3625                           ;timers.c: 32:     return timer_val;
  3626   001F1C  C00C  F006         	movff	get_timer_val@timer_val,?_get_timer_val
  3627   001F20  C00D  F007         	movff	get_timer_val@timer_val+1,?_get_timer_val+1
  3628   001F24  0012               	return		;funcret
  3629   001F26                     __end_of_get_timer_val:
  3630                           	callstack 0
  3631                           
  3632 ;; *************** function _forward *****************
  3633 ;; Defined at:
  3634 ;;		line 128 in file "dc_motor.c"
  3635 ;; Parameters:    Size  Location     Type
  3636 ;;  mL              2   30[COMRAM] PTR struct DC_motor
  3637 ;;		 -> motorL(9), 
  3638 ;;  mR              2   32[COMRAM] PTR struct DC_motor
  3639 ;;		 -> motorR(9), 
  3640 ;; Auto vars:     Size  Location     Type
  3641 ;;		None
  3642 ;; Return value:  Size  Location     Type
  3643 ;;                  1    wreg      void 
  3644 ;; Registers used:
  3645 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3646 ;; Tracked objects:
  3647 ;;		On entry : 0/0
  3648 ;;		On exit  : 0/0
  3649 ;;		Unchanged: 0/0
  3650 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3651 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3652 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3653 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3654 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3655 ;;Total ram usage:        5 bytes
  3656 ;; Hardware stack levels used: 1
  3657 ;; Hardware stack levels required when called: 8
  3658 ;; This function calls:
  3659 ;;		_setMotorPWM
  3660 ;;		_stop
  3661 ;; This function is called by:
  3662 ;;		_buggy_color_response
  3663 ;; This function uses a non-reentrant model
  3664 ;;
  3665                           
  3666                           	psect	text18
  3667   0017AA                     __ptext18:
  3668                           	callstack 0
  3669   0017AA                     _forward:
  3670                           	callstack 21
  3671   0017AA                     
  3672                           ;dc_motor.c: 128: void forward(DC_motor *mL, DC_motor *mR);dc_motor.c: 129: {;dc_motor.c
      +                          : 130:     stop(mL,mR);
  3673   0017AA  C01F  F019         	movff	forward@mL,stop@mL
  3674   0017AE  C020  F01A         	movff	forward@mL+1,stop@mL+1
  3675   0017B2  C021  F01B         	movff	forward@mR,stop@mR
  3676   0017B6  C022  F01C         	movff	forward@mR+1,stop@mR+1
  3677   0017BA  EC34  F00C         	call	_stop	;wreg free
  3678   0017BE                     
  3679                           ;dc_motor.c: 131:     mL-> direction = 1;
  3680   0017BE  EE20 F001          	lfsr	2,1
  3681   0017C2  501F               	movf	forward@mL^0,w,c
  3682   0017C4  26D9               	addwf	fsr2l,f,c
  3683   0017C6  5020               	movf	(forward@mL+1)^0,w,c
  3684   0017C8  22DA               	addwfc	fsr2h,f,c
  3685   0017CA  0E01               	movlw	1
  3686   0017CC  6EDF               	movwf	indf2,c
  3687   0017CE                     
  3688                           ;dc_motor.c: 132:     mR-> direction = 1;
  3689   0017CE  EE20 F001          	lfsr	2,1
  3690   0017D2  5021               	movf	forward@mR^0,w,c
  3691   0017D4  26D9               	addwf	fsr2l,f,c
  3692   0017D6  5022               	movf	(forward@mR+1)^0,w,c
  3693   0017D8  22DA               	addwfc	fsr2h,f,c
  3694   0017DA  0E01               	movlw	1
  3695   0017DC  6EDF               	movwf	indf2,c
  3696   0017DE                     
  3697                           ;dc_motor.c: 133:     LATDbits.LATD3 = 1;
  3698   0017DE  867C               	bsf	124,3,c	;volatile
  3699                           
  3700                           ;dc_motor.c: 134:     setMotorPWM(mR);
  3701   0017E0  C021  F013         	movff	forward@mR,setMotorPWM@m
  3702   0017E4  C022  F014         	movff	forward@mR+1,setMotorPWM@m+1
  3703   0017E8  ECF2  F007         	call	_setMotorPWM	;wreg free
  3704                           
  3705                           ;dc_motor.c: 135:     setMotorPWM(mL);
  3706   0017EC  C01F  F013         	movff	forward@mL,setMotorPWM@m
  3707   0017F0  C020  F014         	movff	forward@mL+1,setMotorPWM@m+1
  3708   0017F4  ECF2  F007         	call	_setMotorPWM	;wreg free
  3709                           
  3710                           ;dc_motor.c: 136:     while ((mL->power <40) && (mR->power <40)){
  3711   0017F8  EF1A  F00C         	goto	l3525
  3712   0017FC                     l3517:
  3713                           
  3714                           ;dc_motor.c: 137:         mL->power += 10;
  3715   0017FC  C01F  FFD9         	movff	forward@mL,fsr2l
  3716   001800  C020  FFDA         	movff	forward@mL+1,fsr2h
  3717   001804  0E0A               	movlw	10
  3718   001806  26DF               	addwf	indf2,f,c
  3719                           
  3720                           ;dc_motor.c: 138:         mR->power += 10;
  3721   001808  C021  FFD9         	movff	forward@mR,fsr2l
  3722   00180C  C022  FFDA         	movff	forward@mR+1,fsr2h
  3723   001810  0E0A               	movlw	10
  3724   001812  26DF               	addwf	indf2,f,c
  3725   001814                     
  3726                           ;dc_motor.c: 139:         setMotorPWM(mL);
  3727   001814  C01F  F013         	movff	forward@mL,setMotorPWM@m
  3728   001818  C020  F014         	movff	forward@mL+1,setMotorPWM@m+1
  3729   00181C  ECF2  F007         	call	_setMotorPWM	;wreg free
  3730   001820                     
  3731                           ;dc_motor.c: 140:         setMotorPWM(mR);
  3732   001820  C021  F013         	movff	forward@mR,setMotorPWM@m
  3733   001824  C022  F014         	movff	forward@mR+1,setMotorPWM@m+1
  3734   001828  ECF2  F007         	call	_setMotorPWM	;wreg free
  3735   00182C                     
  3736                           ;dc_motor.c: 141:         _delay((unsigned long)((20)*(64000000/4000000.0)));
  3737   00182C  0E6A               	movlw	106
  3738   00182E                     u3347:
  3739   00182E  2EE8               	decfsz	wreg,f,c
  3740   001830  D7FE               	bra	u3347
  3741   001832  D000               	nop2	
  3742   001834                     l3525:
  3743                           
  3744                           ;dc_motor.c: 136:     while ((mL->power <40) && (mR->power <40)){
  3745   001834  C01F  FFD9         	movff	forward@mL,fsr2l
  3746   001838  C020  FFDA         	movff	forward@mL+1,fsr2h
  3747   00183C  0E28               	movlw	40
  3748   00183E  60DF               	cpfslt	indf2,c
  3749   001840  EF24  F00C         	goto	u2821
  3750   001844  EF26  F00C         	goto	u2820
  3751   001848                     u2821:
  3752   001848  EF32  F00C         	goto	l321
  3753   00184C                     u2820:
  3754   00184C  C021  FFD9         	movff	forward@mR,fsr2l
  3755   001850  C022  FFDA         	movff	forward@mR+1,fsr2h
  3756   001854  0E27               	movlw	39
  3757   001856  64DF               	cpfsgt	indf2,c
  3758   001858  EF30  F00C         	goto	u2831
  3759   00185C  EF32  F00C         	goto	u2830
  3760   001860                     u2831:
  3761   001860  EFFE  F00B         	goto	l3517
  3762   001864                     u2830:
  3763   001864                     l321:
  3764                           
  3765                           ;dc_motor.c: 143:     LATDbits.LATD3 = 0;
  3766   001864  967C               	bcf	124,3,c	;volatile
  3767   001866  0012               	return		;funcret
  3768   001868                     __end_of_forward:
  3769                           	callstack 0
  3770                           
  3771 ;; *************** function _stop *****************
  3772 ;; Defined at:
  3773 ;;		line 165 in file "dc_motor.c"
  3774 ;; Parameters:    Size  Location     Type
  3775 ;;  mL              2   24[COMRAM] PTR struct DC_motor
  3776 ;;		 -> motorL(9), 
  3777 ;;  mR              2   26[COMRAM] PTR struct DC_motor
  3778 ;;		 -> motorR(9), 
  3779 ;; Auto vars:     Size  Location     Type
  3780 ;;  i               2   28[COMRAM] int 
  3781 ;; Return value:  Size  Location     Type
  3782 ;;                  1    wreg      void 
  3783 ;; Registers used:
  3784 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3785 ;; Tracked objects:
  3786 ;;		On entry : 0/0
  3787 ;;		On exit  : 0/0
  3788 ;;		Unchanged: 0/0
  3789 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3790 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3791 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3792 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3793 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3794 ;;Total ram usage:        6 bytes
  3795 ;; Hardware stack levels used: 1
  3796 ;; Hardware stack levels required when called: 7
  3797 ;; This function calls:
  3798 ;;		_setMotorPWM
  3799 ;; This function is called by:
  3800 ;;		_buggy_color_response
  3801 ;;		_forward
  3802 ;;		_reverse
  3803 ;;		_left_45
  3804 ;;		_right_45
  3805 ;;		_space
  3806 ;;		_reverse_pink
  3807 ;;		_reverse_yellow
  3808 ;;		_instructions
  3809 ;; This function uses a non-reentrant model
  3810 ;;
  3811                           
  3812                           	psect	text19
  3813   001868                     __ptext19:
  3814                           	callstack 0
  3815   001868                     _stop:
  3816                           	callstack 22
  3817   001868                     
  3818                           ;dc_motor.c: 165: void stop(DC_motor *mL, DC_motor *mR);dc_motor.c: 166: {;dc_motor.c: 1
      +                          67:     mL->brakemode = 1;
  3819   001868  EE20 F002          	lfsr	2,2
  3820   00186C  5019               	movf	stop@mL^0,w,c
  3821   00186E  26D9               	addwf	fsr2l,f,c
  3822   001870  501A               	movf	(stop@mL+1)^0,w,c
  3823   001872  22DA               	addwfc	fsr2h,f,c
  3824   001874  0E01               	movlw	1
  3825   001876  6EDF               	movwf	indf2,c
  3826                           
  3827                           ;dc_motor.c: 168:     mR->brakemode = 1;
  3828   001878  EE20 F002          	lfsr	2,2
  3829   00187C  501B               	movf	stop@mR^0,w,c
  3830   00187E  26D9               	addwf	fsr2l,f,c
  3831   001880  501C               	movf	(stop@mR+1)^0,w,c
  3832   001882  22DA               	addwfc	fsr2h,f,c
  3833   001884  0E01               	movlw	1
  3834   001886  6EDF               	movwf	indf2,c
  3835   001888                     
  3836                           ;dc_motor.c: 169:     LATDbits.LATD4 = 1;
  3837   001888  887C               	bsf	124,4,c	;volatile
  3838   00188A                     
  3839                           ;dc_motor.c: 171:     for (int i = 70; i >= 0; i=i-10) {
  3840   00188A  0E00               	movlw	0
  3841   00188C  6E1E               	movwf	(stop@i+1)^0,c
  3842   00188E  0E46               	movlw	70
  3843   001890  6E1D               	movwf	stop@i^0,c
  3844   001892                     l3039:
  3845                           
  3846                           ;dc_motor.c: 172:         mL -> power = i;
  3847   001892  C019  FFD9         	movff	stop@mL,fsr2l
  3848   001896  C01A  FFDA         	movff	stop@mL+1,fsr2h
  3849   00189A  C01D  FFDF         	movff	stop@i,indf2
  3850                           
  3851                           ;dc_motor.c: 173:         mR -> power = i;
  3852   00189E  C01B  FFD9         	movff	stop@mR,fsr2l
  3853   0018A2  C01C  FFDA         	movff	stop@mR+1,fsr2h
  3854   0018A6  C01D  FFDF         	movff	stop@i,indf2
  3855   0018AA                     
  3856                           ;dc_motor.c: 174:         setMotorPWM(mL);
  3857   0018AA  C019  F013         	movff	stop@mL,setMotorPWM@m
  3858   0018AE  C01A  F014         	movff	stop@mL+1,setMotorPWM@m+1
  3859   0018B2  ECF2  F007         	call	_setMotorPWM	;wreg free
  3860   0018B6                     
  3861                           ;dc_motor.c: 175:         setMotorPWM(mR);
  3862   0018B6  C01B  F013         	movff	stop@mR,setMotorPWM@m
  3863   0018BA  C01C  F014         	movff	stop@mR+1,setMotorPWM@m+1
  3864   0018BE  ECF2  F007         	call	_setMotorPWM	;wreg free
  3865   0018C2                     
  3866                           ;dc_motor.c: 176:         _delay((unsigned long)((20)*(64000000/4000000.0)));
  3867   0018C2  0E6A               	movlw	106
  3868   0018C4                     u3357:
  3869   0018C4  2EE8               	decfsz	wreg,f,c
  3870   0018C6  D7FE               	bra	u3357
  3871   0018C8  D000               	nop2	
  3872   0018CA                     
  3873                           ;dc_motor.c: 177:     }
  3874   0018CA  0EF6               	movlw	246
  3875   0018CC  241D               	addwf	stop@i^0,w,c
  3876   0018CE  6E1D               	movwf	stop@i^0,c
  3877   0018D0  0EFF               	movlw	255
  3878   0018D2  201E               	addwfc	(stop@i+1)^0,w,c
  3879   0018D4  6E1E               	movwf	(stop@i+1)^0,c
  3880   0018D6  BE1E               	btfsc	(stop@i+1)^0,7,c
  3881   0018D8  EF72  F00C         	goto	u2230
  3882   0018DC  EF70  F00C         	goto	u2231
  3883   0018E0                     u2231:
  3884   0018E0  EF49  F00C         	goto	l3039
  3885   0018E4                     u2230:
  3886   0018E4                     
  3887                           ;dc_motor.c: 179:     mL->power = 0;
  3888   0018E4  C019  FFD9         	movff	stop@mL,fsr2l
  3889   0018E8  C01A  FFDA         	movff	stop@mL+1,fsr2h
  3890   0018EC  0E00               	movlw	0
  3891   0018EE  6EDF               	movwf	indf2,c
  3892                           
  3893                           ;dc_motor.c: 180:     mR->power = 0;
  3894   0018F0  C01B  FFD9         	movff	stop@mR,fsr2l
  3895   0018F4  C01C  FFDA         	movff	stop@mR+1,fsr2h
  3896   0018F8  0E00               	movlw	0
  3897   0018FA  6EDF               	movwf	indf2,c
  3898   0018FC                     
  3899                           ;dc_motor.c: 181:     setMotorPWM(mL);
  3900   0018FC  C019  F013         	movff	stop@mL,setMotorPWM@m
  3901   001900  C01A  F014         	movff	stop@mL+1,setMotorPWM@m+1
  3902   001904  ECF2  F007         	call	_setMotorPWM	;wreg free
  3903   001908                     
  3904                           ;dc_motor.c: 182:     setMotorPWM(mR);
  3905   001908  C01B  F013         	movff	stop@mR,setMotorPWM@m
  3906   00190C  C01C  F014         	movff	stop@mR+1,setMotorPWM@m+1
  3907   001910  ECF2  F007         	call	_setMotorPWM	;wreg free
  3908   001914                     
  3909                           ;dc_motor.c: 183:     LATDbits.LATD4 = 0;
  3910   001914  987C               	bcf	124,4,c	;volatile
  3911   001916  0012               	return		;funcret
  3912   001918                     __end_of_stop:
  3913                           	callstack 0
  3914                           
  3915 ;; *************** function _setMotorPWM *****************
  3916 ;; Defined at:
  3917 ;;		line 72 in file "dc_motor.c"
  3918 ;; Parameters:    Size  Location     Type
  3919 ;;  m               2   18[COMRAM] PTR struct DC_motor
  3920 ;;		 -> motorR(9), motorL(9), 
  3921 ;; Auto vars:     Size  Location     Type
  3922 ;;  negDuty         1   23[COMRAM] unsigned char 
  3923 ;;  posDuty         1   22[COMRAM] unsigned char 
  3924 ;; Return value:  Size  Location     Type
  3925 ;;                  1    wreg      void 
  3926 ;; Registers used:
  3927 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3928 ;; Tracked objects:
  3929 ;;		On entry : 0/0
  3930 ;;		On exit  : 0/0
  3931 ;;		Unchanged: 0/0
  3932 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3933 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3934 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3935 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3936 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3937 ;;Total ram usage:        6 bytes
  3938 ;; Hardware stack levels used: 1
  3939 ;; Hardware stack levels required when called: 6
  3940 ;; This function calls:
  3941 ;;		___lwdiv
  3942 ;;		___wmul
  3943 ;; This function is called by:
  3944 ;;		_forward
  3945 ;;		_reverse
  3946 ;;		_stop
  3947 ;;		_left_45
  3948 ;;		_right_45
  3949 ;;		_space
  3950 ;; This function uses a non-reentrant model
  3951 ;;
  3952                           
  3953                           	psect	text20
  3954   000FE4                     __ptext20:
  3955                           	callstack 0
  3956   000FE4                     _setMotorPWM:
  3957                           	callstack 22
  3958   000FE4                     
  3959                           ;dc_motor.c: 72: void setMotorPWM(DC_motor *m);dc_motor.c: 73: {;dc_motor.c: 74:     uns
      +                          igned char posDuty, negDuty;;dc_motor.c: 76:     if(m->brakemode) {
  3960   000FE4  EE20 F002          	lfsr	2,2
  3961   000FE8  5013               	movf	setMotorPWM@m^0,w,c
  3962   000FEA  26D9               	addwf	fsr2l,f,c
  3963   000FEC  5014               	movf	(setMotorPWM@m+1)^0,w,c
  3964   000FEE  22DA               	addwfc	fsr2h,f,c
  3965   000FF0  50DF               	movf	indf2,w,c
  3966   000FF2  B4D8               	btfsc	status,2,c
  3967   000FF4  EFFE  F007         	goto	u2191
  3968   000FF8  EF00  F008         	goto	u2190
  3969   000FFC                     u2191:
  3970   000FFC  EF34  F008         	goto	l3015
  3971   001000                     u2190:
  3972   001000                     
  3973                           ;dc_motor.c: 77:         posDuty = m->PWMperiod - ((unsigned int)(m->power)*(m->PWMperio
      +                          d))/100;
  3974   001000  C013  FFD9         	movff	setMotorPWM@m,fsr2l
  3975   001004  C014  FFDA         	movff	setMotorPWM@m+1,fsr2h
  3976   001008  50DF               	movf	indf2,w,c
  3977   00100A  6E15               	movwf	??_setMotorPWM^0,c
  3978   00100C  5015               	movf	??_setMotorPWM^0,w,c
  3979   00100E  6E06               	movwf	___wmul@multiplier^0,c
  3980   001010  6A07               	clrf	(___wmul@multiplier+1)^0,c
  3981   001012  EE20 F003          	lfsr	2,3
  3982   001016  5013               	movf	setMotorPWM@m^0,w,c
  3983   001018  26D9               	addwf	fsr2l,f,c
  3984   00101A  5014               	movf	(setMotorPWM@m+1)^0,w,c
  3985   00101C  22DA               	addwfc	fsr2h,f,c
  3986   00101E  CFDE F008          	movff	postinc2,___wmul@multiplicand
  3987   001022  CFDD F009          	movff	postdec2,___wmul@multiplicand+1
  3988   001026  EC5C  F00F         	call	___wmul	;wreg free
  3989   00102A  C006  F00C         	movff	?___wmul,___lwdiv@dividend
  3990   00102E  C007  F00D         	movff	?___wmul+1,___lwdiv@dividend+1
  3991   001032  0E00               	movlw	0
  3992   001034  6E0F               	movwf	(___lwdiv@divisor+1)^0,c
  3993   001036  0E64               	movlw	100
  3994   001038  6E0E               	movwf	___lwdiv@divisor^0,c
  3995   00103A  ECD4  F00C         	call	___lwdiv	;wreg free
  3996   00103E  EE20 F003          	lfsr	2,3
  3997   001042  5013               	movf	setMotorPWM@m^0,w,c
  3998   001044  26D9               	addwf	fsr2l,f,c
  3999   001046  5014               	movf	(setMotorPWM@m+1)^0,w,c
  4000   001048  22DA               	addwfc	fsr2h,f,c
  4001   00104A  50DF               	movf	indf2,w,c
  4002   00104C  6E16               	movwf	(??_setMotorPWM+1)^0,c
  4003   00104E  500C               	movf	?___lwdiv^0,w,c
  4004   001050  5C16               	subwf	(??_setMotorPWM+1)^0,w,c
  4005   001052  6E17               	movwf	setMotorPWM@posDuty^0,c
  4006   001054                     
  4007                           ;dc_motor.c: 78:         negDuty = m->PWMperiod;
  4008   001054  EE20 F003          	lfsr	2,3
  4009   001058  5013               	movf	setMotorPWM@m^0,w,c
  4010   00105A  26D9               	addwf	fsr2l,f,c
  4011   00105C  5014               	movf	(setMotorPWM@m+1)^0,w,c
  4012   00105E  22DA               	addwfc	fsr2h,f,c
  4013   001060  50DF               	movf	indf2,w,c
  4014   001062  6E18               	movwf	setMotorPWM@negDuty^0,c
  4015                           
  4016                           ;dc_motor.c: 79:     }
  4017   001064  EF57  F008         	goto	l3019
  4018   001068                     l3015:
  4019                           
  4020                           ;dc_motor.c: 81:         posDuty=0;
  4021   001068  0E00               	movlw	0
  4022   00106A  6E17               	movwf	setMotorPWM@posDuty^0,c
  4023   00106C                     
  4024                           ;dc_motor.c: 82:   negDuty=((unsigned int)(m->power)*(m->PWMperiod))/100;
  4025   00106C  C013  FFD9         	movff	setMotorPWM@m,fsr2l
  4026   001070  C014  FFDA         	movff	setMotorPWM@m+1,fsr2h
  4027   001074  50DF               	movf	indf2,w,c
  4028   001076  6E15               	movwf	??_setMotorPWM^0,c
  4029   001078  5015               	movf	??_setMotorPWM^0,w,c
  4030   00107A  6E06               	movwf	___wmul@multiplier^0,c
  4031   00107C  6A07               	clrf	(___wmul@multiplier+1)^0,c
  4032   00107E  EE20 F003          	lfsr	2,3
  4033   001082  5013               	movf	setMotorPWM@m^0,w,c
  4034   001084  26D9               	addwf	fsr2l,f,c
  4035   001086  5014               	movf	(setMotorPWM@m+1)^0,w,c
  4036   001088  22DA               	addwfc	fsr2h,f,c
  4037   00108A  CFDE F008          	movff	postinc2,___wmul@multiplicand
  4038   00108E  CFDD F009          	movff	postdec2,___wmul@multiplicand+1
  4039   001092  EC5C  F00F         	call	___wmul	;wreg free
  4040   001096  C006  F00C         	movff	?___wmul,___lwdiv@dividend
  4041   00109A  C007  F00D         	movff	?___wmul+1,___lwdiv@dividend+1
  4042   00109E  0E00               	movlw	0
  4043   0010A0  6E0F               	movwf	(___lwdiv@divisor+1)^0,c
  4044   0010A2  0E64               	movlw	100
  4045   0010A4  6E0E               	movwf	___lwdiv@divisor^0,c
  4046   0010A6  ECD4  F00C         	call	___lwdiv	;wreg free
  4047   0010AA  500C               	movf	?___lwdiv^0,w,c
  4048   0010AC  6E18               	movwf	setMotorPWM@negDuty^0,c
  4049   0010AE                     l3019:
  4050                           
  4051                           ;dc_motor.c: 85:     if (m->direction) {
  4052   0010AE  EE20 F001          	lfsr	2,1
  4053   0010B2  5013               	movf	setMotorPWM@m^0,w,c
  4054   0010B4  26D9               	addwf	fsr2l,f,c
  4055   0010B6  5014               	movf	(setMotorPWM@m+1)^0,w,c
  4056   0010B8  22DA               	addwfc	fsr2h,f,c
  4057   0010BA  50DF               	movf	indf2,w,c
  4058   0010BC  B4D8               	btfsc	status,2,c
  4059   0010BE  EF63  F008         	goto	u2201
  4060   0010C2  EF65  F008         	goto	u2200
  4061   0010C6                     u2201:
  4062   0010C6  EF87  F008         	goto	l3023
  4063   0010CA                     u2200:
  4064   0010CA                     
  4065                           ;dc_motor.c: 86:         *(m->posDutyHighByte)= posDuty;
  4066   0010CA  EE20 F005          	lfsr	2,5
  4067   0010CE  5013               	movf	setMotorPWM@m^0,w,c
  4068   0010D0  26D9               	addwf	fsr2l,f,c
  4069   0010D2  5014               	movf	(setMotorPWM@m+1)^0,w,c
  4070   0010D4  22DA               	addwfc	fsr2h,f,c
  4071   0010D6  CFDE F015          	movff	postinc2,??_setMotorPWM
  4072   0010DA  CFDD F016          	movff	postdec2,??_setMotorPWM+1
  4073   0010DE  C015  FFD9         	movff	??_setMotorPWM,fsr2l
  4074   0010E2  C016  FFDA         	movff	??_setMotorPWM+1,fsr2h
  4075   0010E6  C017  FFDF         	movff	setMotorPWM@posDuty,indf2
  4076                           
  4077                           ;dc_motor.c: 87:         *(m->negDutyHighByte)= negDuty;
  4078   0010EA  EE20 F007          	lfsr	2,7
  4079   0010EE  5013               	movf	setMotorPWM@m^0,w,c
  4080   0010F0  26D9               	addwf	fsr2l,f,c
  4081   0010F2  5014               	movf	(setMotorPWM@m+1)^0,w,c
  4082   0010F4  22DA               	addwfc	fsr2h,f,c
  4083   0010F6  CFDE F015          	movff	postinc2,??_setMotorPWM
  4084   0010FA  CFDD F016          	movff	postdec2,??_setMotorPWM+1
  4085   0010FE  C015  FFD9         	movff	??_setMotorPWM,fsr2l
  4086   001102  C016  FFDA         	movff	??_setMotorPWM+1,fsr2h
  4087   001106  C018  FFDF         	movff	setMotorPWM@negDuty,indf2
  4088                           
  4089                           ;dc_motor.c: 88:     } else {
  4090   00110A  EFA7  F008         	goto	l308
  4091   00110E                     l3023:
  4092                           
  4093                           ;dc_motor.c: 89:         *(m->posDutyHighByte)= negDuty;
  4094   00110E  EE20 F005          	lfsr	2,5
  4095   001112  5013               	movf	setMotorPWM@m^0,w,c
  4096   001114  26D9               	addwf	fsr2l,f,c
  4097   001116  5014               	movf	(setMotorPWM@m+1)^0,w,c
  4098   001118  22DA               	addwfc	fsr2h,f,c
  4099   00111A  CFDE F015          	movff	postinc2,??_setMotorPWM
  4100   00111E  CFDD F016          	movff	postdec2,??_setMotorPWM+1
  4101   001122  C015  FFD9         	movff	??_setMotorPWM,fsr2l
  4102   001126  C016  FFDA         	movff	??_setMotorPWM+1,fsr2h
  4103   00112A  C018  FFDF         	movff	setMotorPWM@negDuty,indf2
  4104                           
  4105                           ;dc_motor.c: 90:         *(m->negDutyHighByte)= posDuty;
  4106   00112E  EE20 F007          	lfsr	2,7
  4107   001132  5013               	movf	setMotorPWM@m^0,w,c
  4108   001134  26D9               	addwf	fsr2l,f,c
  4109   001136  5014               	movf	(setMotorPWM@m+1)^0,w,c
  4110   001138  22DA               	addwfc	fsr2h,f,c
  4111   00113A  CFDE F015          	movff	postinc2,??_setMotorPWM
  4112   00113E  CFDD F016          	movff	postdec2,??_setMotorPWM+1
  4113   001142  C015  FFD9         	movff	??_setMotorPWM,fsr2l
  4114   001146  C016  FFDA         	movff	??_setMotorPWM+1,fsr2h
  4115   00114A  C017  FFDF         	movff	setMotorPWM@posDuty,indf2
  4116   00114E                     l308:
  4117   00114E  0012               	return		;funcret
  4118   001150                     __end_of_setMotorPWM:
  4119                           	callstack 0
  4120                           
  4121 ;; *************** function ___wmul *****************
  4122 ;; Defined at:
  4123 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\Umul16.c"
  4124 ;; Parameters:    Size  Location     Type
  4125 ;;  multiplier      2    5[COMRAM] unsigned int 
  4126 ;;  multiplicand    2    7[COMRAM] unsigned int 
  4127 ;; Auto vars:     Size  Location     Type
  4128 ;;  product         2    9[COMRAM] unsigned int 
  4129 ;; Return value:  Size  Location     Type
  4130 ;;                  2    5[COMRAM] unsigned int 
  4131 ;; Registers used:
  4132 ;;		wreg, status,2, status,0, prodl, prodh
  4133 ;; Tracked objects:
  4134 ;;		On entry : 0/0
  4135 ;;		On exit  : 0/0
  4136 ;;		Unchanged: 0/0
  4137 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4138 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4139 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4140 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4141 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4142 ;;Total ram usage:        6 bytes
  4143 ;; Hardware stack levels used: 1
  4144 ;; Hardware stack levels required when called: 5
  4145 ;; This function calls:
  4146 ;;		Nothing
  4147 ;; This function is called by:
  4148 ;;		_setMotorPWM
  4149 ;; This function uses a non-reentrant model
  4150 ;;
  4151                           
  4152                           	psect	text21
  4153   001EB8                     __ptext21:
  4154                           	callstack 0
  4155   001EB8                     ___wmul:
  4156                           	callstack 22
  4157   001EB8  5006               	movf	___wmul@multiplier^0,w,c
  4158   001EBA  0208               	mulwf	___wmul@multiplicand^0,c
  4159   001EBC  CFF3 F00A          	movff	prodl,___wmul@product
  4160   001EC0  CFF4 F00B          	movff	prodh,___wmul@product+1
  4161   001EC4  5006               	movf	___wmul@multiplier^0,w,c
  4162   001EC6  0209               	mulwf	(___wmul@multiplicand+1)^0,c
  4163   001EC8  50F3               	movf	243,w,c
  4164   001ECA  260B               	addwf	(___wmul@product+1)^0,f,c
  4165   001ECC  5007               	movf	(___wmul@multiplier+1)^0,w,c
  4166   001ECE  0208               	mulwf	___wmul@multiplicand^0,c
  4167   001ED0  50F3               	movf	243,w,c
  4168   001ED2  260B               	addwf	(___wmul@product+1)^0,f,c
  4169   001ED4  C00A  F006         	movff	___wmul@product,?___wmul
  4170   001ED8  C00B  F007         	movff	___wmul@product+1,?___wmul+1
  4171   001EDC  0012               	return		;funcret
  4172   001EDE                     __end_of___wmul:
  4173                           	callstack 0
  4174                           
  4175 ;; *************** function ___lwdiv *****************
  4176 ;; Defined at:
  4177 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\lwdiv.c"
  4178 ;; Parameters:    Size  Location     Type
  4179 ;;  dividend        2   11[COMRAM] unsigned int 
  4180 ;;  divisor         2   13[COMRAM] unsigned int 
  4181 ;; Auto vars:     Size  Location     Type
  4182 ;;  quotient        2   16[COMRAM] unsigned int 
  4183 ;;  counter         1   15[COMRAM] unsigned char 
  4184 ;; Return value:  Size  Location     Type
  4185 ;;                  2   11[COMRAM] unsigned int 
  4186 ;; Registers used:
  4187 ;;		wreg, status,2, status,0
  4188 ;; Tracked objects:
  4189 ;;		On entry : 0/0
  4190 ;;		On exit  : 0/0
  4191 ;;		Unchanged: 0/0
  4192 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4193 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4194 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4195 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4196 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4197 ;;Total ram usage:        7 bytes
  4198 ;; Hardware stack levels used: 1
  4199 ;; Hardware stack levels required when called: 5
  4200 ;; This function calls:
  4201 ;;		Nothing
  4202 ;; This function is called by:
  4203 ;;		_setMotorPWM
  4204 ;; This function uses a non-reentrant model
  4205 ;;
  4206                           
  4207                           	psect	text22
  4208   0019A8                     __ptext22:
  4209                           	callstack 0
  4210   0019A8                     ___lwdiv:
  4211                           	callstack 22
  4212   0019A8  0E00               	movlw	0
  4213   0019AA  6E12               	movwf	(___lwdiv@quotient+1)^0,c
  4214   0019AC  0E00               	movlw	0
  4215   0019AE  6E11               	movwf	___lwdiv@quotient^0,c
  4216   0019B0  500E               	movf	___lwdiv@divisor^0,w,c
  4217   0019B2  100F               	iorwf	(___lwdiv@divisor+1)^0,w,c
  4218   0019B4  B4D8               	btfsc	status,2,c
  4219   0019B6  EFDF  F00C         	goto	u2161
  4220   0019BA  EFE1  F00C         	goto	u2160
  4221   0019BE                     u2161:
  4222   0019BE  EF09  F00D         	goto	l1033
  4223   0019C2                     u2160:
  4224   0019C2  0E01               	movlw	1
  4225   0019C4  6E10               	movwf	___lwdiv@counter^0,c
  4226   0019C6  EFE9  F00C         	goto	l2995
  4227   0019CA                     l2993:
  4228   0019CA  90D8               	bcf	status,0,c
  4229   0019CC  360E               	rlcf	___lwdiv@divisor^0,f,c
  4230   0019CE  360F               	rlcf	(___lwdiv@divisor+1)^0,f,c
  4231   0019D0  2A10               	incf	___lwdiv@counter^0,f,c
  4232   0019D2                     l2995:
  4233   0019D2  AE0F               	btfss	(___lwdiv@divisor+1)^0,7,c
  4234   0019D4  EFEE  F00C         	goto	u2171
  4235   0019D8  EFF0  F00C         	goto	u2170
  4236   0019DC                     u2171:
  4237   0019DC  EFE5  F00C         	goto	l2993
  4238   0019E0                     u2170:
  4239   0019E0                     l2997:
  4240   0019E0  90D8               	bcf	status,0,c
  4241   0019E2  3611               	rlcf	___lwdiv@quotient^0,f,c
  4242   0019E4  3612               	rlcf	(___lwdiv@quotient+1)^0,f,c
  4243   0019E6  500E               	movf	___lwdiv@divisor^0,w,c
  4244   0019E8  5C0C               	subwf	___lwdiv@dividend^0,w,c
  4245   0019EA  500F               	movf	(___lwdiv@divisor+1)^0,w,c
  4246   0019EC  580D               	subwfb	(___lwdiv@dividend+1)^0,w,c
  4247   0019EE  A0D8               	btfss	status,0,c
  4248   0019F0  EFFC  F00C         	goto	u2181
  4249   0019F4  EFFE  F00C         	goto	u2180
  4250   0019F8                     u2181:
  4251   0019F8  EF03  F00D         	goto	l3005
  4252   0019FC                     u2180:
  4253   0019FC  500E               	movf	___lwdiv@divisor^0,w,c
  4254   0019FE  5E0C               	subwf	___lwdiv@dividend^0,f,c
  4255   001A00  500F               	movf	(___lwdiv@divisor+1)^0,w,c
  4256   001A02  5A0D               	subwfb	(___lwdiv@dividend+1)^0,f,c
  4257   001A04  8011               	bsf	___lwdiv@quotient^0,0,c
  4258   001A06                     l3005:
  4259   001A06  90D8               	bcf	status,0,c
  4260   001A08  320F               	rrcf	(___lwdiv@divisor+1)^0,f,c
  4261   001A0A  320E               	rrcf	___lwdiv@divisor^0,f,c
  4262   001A0C  2E10               	decfsz	___lwdiv@counter^0,f,c
  4263   001A0E  EFF0  F00C         	goto	l2997
  4264   001A12                     l1033:
  4265   001A12  C011  F00C         	movff	___lwdiv@quotient,?___lwdiv
  4266   001A16  C012  F00D         	movff	___lwdiv@quotient+1,?___lwdiv+1
  4267   001A1A  0012               	return		;funcret
  4268   001A1C                     __end_of___lwdiv:
  4269                           	callstack 0
  4270                           
  4271 ;; *************** function _colourcards_normaliseRGBC *****************
  4272 ;; Defined at:
  4273 ;;		line 178 in file "color.c"
  4274 ;; Parameters:    Size  Location     Type
  4275 ;;  c               2   44[COMRAM] PTR struct colors
  4276 ;;		 -> color(20), 
  4277 ;; Auto vars:     Size  Location     Type
  4278 ;;  C               2   52[COMRAM] unsigned int 
  4279 ;;  B               2   50[COMRAM] unsigned int 
  4280 ;;  G               2   48[COMRAM] unsigned int 
  4281 ;;  R               2   46[COMRAM] unsigned int 
  4282 ;; Return value:  Size  Location     Type
  4283 ;;                  1    wreg      void 
  4284 ;; Registers used:
  4285 ;;		wreg, status,2, status,0, cstack
  4286 ;; Tracked objects:
  4287 ;;		On entry : 0/0
  4288 ;;		On exit  : 0/0
  4289 ;;		Unchanged: 0/0
  4290 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4291 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4292 ;;      Locals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4293 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4294 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4295 ;;Total ram usage:       10 bytes
  4296 ;; Hardware stack levels used: 1
  4297 ;; Hardware stack levels required when called: 6
  4298 ;; This function calls:
  4299 ;;		___fldiv
  4300 ;;		___xxtofl
  4301 ;; This function is called by:
  4302 ;;		_buggy_color_response
  4303 ;; This function uses a non-reentrant model
  4304 ;;
  4305                           
  4306                           	psect	text23
  4307   0013BE                     __ptext23:
  4308                           	callstack 0
  4309   0013BE                     _colourcards_normaliseRGBC:
  4310                           	callstack 23
  4311   0013BE                     
  4312                           ;color.c: 178: void colourcards_normaliseRGBC(colors *c);color.c: 179: {;color.c: 180:  
      +                             unsigned int R = color.R;
  4313   0013BE  C044  F02F         	movff	_color,colourcards_normaliseRGBC@R
  4314   0013C2  C045  F030         	movff	_color+1,colourcards_normaliseRGBC@R+1
  4315                           
  4316                           ;color.c: 181:     unsigned int G = color.G;
  4317   0013C6  C048  F031         	movff	_color+4,colourcards_normaliseRGBC@G
  4318   0013CA  C049  F032         	movff	_color+5,colourcards_normaliseRGBC@G+1
  4319                           
  4320                           ;color.c: 182:     unsigned int B = color.B;
  4321   0013CE  C046  F033         	movff	_color+2,colourcards_normaliseRGBC@B
  4322   0013D2  C047  F034         	movff	_color+3,colourcards_normaliseRGBC@B+1
  4323                           
  4324                           ;color.c: 183:     unsigned int C = color.C;
  4325   0013D6  C04A  F035         	movff	_color+6,colourcards_normaliseRGBC@C
  4326   0013DA  C04B  F036         	movff	_color+7,colourcards_normaliseRGBC@C+1
  4327   0013DE                     
  4328                           ;color.c: 185:     color.R_norm = (float)R/(float)C;
  4329   0013DE  C02F  F006         	movff	colourcards_normaliseRGBC@R,___xxtofl@val
  4330   0013E2  C030  F007         	movff	colourcards_normaliseRGBC@R+1,___xxtofl@val+1
  4331   0013E6  6A08               	clrf	(___xxtofl@val+2)^0,c
  4332   0013E8  6A09               	clrf	(___xxtofl@val+3)^0,c
  4333   0013EA  0E00               	movlw	0
  4334   0013EC  EC18  F007         	call	___xxtofl
  4335   0013F0  C006  F014         	movff	?___xxtofl,___fldiv@b
  4336   0013F4  C007  F015         	movff	?___xxtofl+1,___fldiv@b+1
  4337   0013F8  C008  F016         	movff	?___xxtofl+2,___fldiv@b+2
  4338   0013FC  C009  F017         	movff	?___xxtofl+3,___fldiv@b+3
  4339   001400  C035  F006         	movff	colourcards_normaliseRGBC@C,___xxtofl@val
  4340   001404  C036  F007         	movff	colourcards_normaliseRGBC@C+1,___xxtofl@val+1
  4341   001408  6A08               	clrf	(___xxtofl@val+2)^0,c
  4342   00140A  6A09               	clrf	(___xxtofl@val+3)^0,c
  4343   00140C  0E00               	movlw	0
  4344   00140E  EC18  F007         	call	___xxtofl
  4345   001412  C006  F018         	movff	?___xxtofl,___fldiv@a
  4346   001416  C007  F019         	movff	?___xxtofl+1,___fldiv@a+1
  4347   00141A  C008  F01A         	movff	?___xxtofl+2,___fldiv@a+2
  4348   00141E  C009  F01B         	movff	?___xxtofl+3,___fldiv@a+3
  4349   001422  ECB1  F003         	call	___fldiv	;wreg free
  4350   001426  C014  F04C         	movff	?___fldiv,_color+8
  4351   00142A  C015  F04D         	movff	?___fldiv+1,_color+9
  4352   00142E  C016  F04E         	movff	?___fldiv+2,_color+10
  4353   001432  C017  F04F         	movff	?___fldiv+3,_color+11
  4354                           
  4355                           ;color.c: 186:     color.G_norm = (float)G/(float)C;
  4356   001436  C031  F006         	movff	colourcards_normaliseRGBC@G,___xxtofl@val
  4357   00143A  C032  F007         	movff	colourcards_normaliseRGBC@G+1,___xxtofl@val+1
  4358   00143E  6A08               	clrf	(___xxtofl@val+2)^0,c
  4359   001440  6A09               	clrf	(___xxtofl@val+3)^0,c
  4360   001442  0E00               	movlw	0
  4361   001444  EC18  F007         	call	___xxtofl
  4362   001448  C006  F014         	movff	?___xxtofl,___fldiv@b
  4363   00144C  C007  F015         	movff	?___xxtofl+1,___fldiv@b+1
  4364   001450  C008  F016         	movff	?___xxtofl+2,___fldiv@b+2
  4365   001454  C009  F017         	movff	?___xxtofl+3,___fldiv@b+3
  4366   001458  C035  F006         	movff	colourcards_normaliseRGBC@C,___xxtofl@val
  4367   00145C  C036  F007         	movff	colourcards_normaliseRGBC@C+1,___xxtofl@val+1
  4368   001460  6A08               	clrf	(___xxtofl@val+2)^0,c
  4369   001462  6A09               	clrf	(___xxtofl@val+3)^0,c
  4370   001464  0E00               	movlw	0
  4371   001466  EC18  F007         	call	___xxtofl
  4372   00146A  C006  F018         	movff	?___xxtofl,___fldiv@a
  4373   00146E  C007  F019         	movff	?___xxtofl+1,___fldiv@a+1
  4374   001472  C008  F01A         	movff	?___xxtofl+2,___fldiv@a+2
  4375   001476  C009  F01B         	movff	?___xxtofl+3,___fldiv@a+3
  4376   00147A  ECB1  F003         	call	___fldiv	;wreg free
  4377   00147E  C014  F054         	movff	?___fldiv,_color+16
  4378   001482  C015  F055         	movff	?___fldiv+1,_color+17
  4379   001486  C016  F056         	movff	?___fldiv+2,_color+18
  4380   00148A  C017  F057         	movff	?___fldiv+3,_color+19
  4381                           
  4382                           ;color.c: 187:     color.B_norm = (float)B/(float)C;
  4383   00148E  C033  F006         	movff	colourcards_normaliseRGBC@B,___xxtofl@val
  4384   001492  C034  F007         	movff	colourcards_normaliseRGBC@B+1,___xxtofl@val+1
  4385   001496  6A08               	clrf	(___xxtofl@val+2)^0,c
  4386   001498  6A09               	clrf	(___xxtofl@val+3)^0,c
  4387   00149A  0E00               	movlw	0
  4388   00149C  EC18  F007         	call	___xxtofl
  4389   0014A0  C006  F014         	movff	?___xxtofl,___fldiv@b
  4390   0014A4  C007  F015         	movff	?___xxtofl+1,___fldiv@b+1
  4391   0014A8  C008  F016         	movff	?___xxtofl+2,___fldiv@b+2
  4392   0014AC  C009  F017         	movff	?___xxtofl+3,___fldiv@b+3
  4393   0014B0  C035  F006         	movff	colourcards_normaliseRGBC@C,___xxtofl@val
  4394   0014B4  C036  F007         	movff	colourcards_normaliseRGBC@C+1,___xxtofl@val+1
  4395   0014B8  6A08               	clrf	(___xxtofl@val+2)^0,c
  4396   0014BA  6A09               	clrf	(___xxtofl@val+3)^0,c
  4397   0014BC  0E00               	movlw	0
  4398   0014BE  EC18  F007         	call	___xxtofl
  4399   0014C2  C006  F018         	movff	?___xxtofl,___fldiv@a
  4400   0014C6  C007  F019         	movff	?___xxtofl+1,___fldiv@a+1
  4401   0014CA  C008  F01A         	movff	?___xxtofl+2,___fldiv@a+2
  4402   0014CE  C009  F01B         	movff	?___xxtofl+3,___fldiv@a+3
  4403   0014D2  ECB1  F003         	call	___fldiv	;wreg free
  4404   0014D6  C014  F050         	movff	?___fldiv,_color+12
  4405   0014DA  C015  F051         	movff	?___fldiv+1,_color+13
  4406   0014DE  C016  F052         	movff	?___fldiv+2,_color+14
  4407   0014E2  C017  F053         	movff	?___fldiv+3,_color+15
  4408   0014E6  0012               	return		;funcret
  4409   0014E8                     __end_of_colourcards_normaliseRGBC:
  4410                           	callstack 0
  4411                           
  4412 ;; *************** function ___xxtofl *****************
  4413 ;; Defined at:
  4414 ;;		line 10 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\xxtofl.c"
  4415 ;; Parameters:    Size  Location     Type
  4416 ;;  sign            1    wreg     unsigned char 
  4417 ;;  val             4    5[COMRAM] long 
  4418 ;; Auto vars:     Size  Location     Type
  4419 ;;  sign            1   13[COMRAM] unsigned char 
  4420 ;;  arg             4   15[COMRAM] unsigned long 
  4421 ;;  exp             1   14[COMRAM] unsigned char 
  4422 ;; Return value:  Size  Location     Type
  4423 ;;                  4    5[COMRAM] unsigned char 
  4424 ;; Registers used:
  4425 ;;		wreg, status,2, status,0
  4426 ;; Tracked objects:
  4427 ;;		On entry : 0/0
  4428 ;;		On exit  : 0/0
  4429 ;;		Unchanged: 0/0
  4430 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4431 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4432 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4433 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4434 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4435 ;;Total ram usage:       14 bytes
  4436 ;; Hardware stack levels used: 1
  4437 ;; Hardware stack levels required when called: 5
  4438 ;; This function calls:
  4439 ;;		Nothing
  4440 ;; This function is called by:
  4441 ;;		_colourcards_normaliseRGBC
  4442 ;; This function uses a non-reentrant model
  4443 ;;
  4444                           
  4445                           	psect	text24
  4446   000E30                     __ptext24:
  4447                           	callstack 0
  4448   000E30                     ___xxtofl:
  4449                           	callstack 23
  4450                           
  4451                           ;incstack = 0
  4452                           ;___xxtofl@sign stored from wreg
  4453   000E30  6E0E               	movwf	___xxtofl@sign^0,c
  4454   000E32  500E               	movf	___xxtofl@sign^0,w,c
  4455   000E34  B4D8               	btfsc	status,2,c
  4456   000E36  EF1F  F007         	goto	u2631
  4457   000E3A  EF21  F007         	goto	u2630
  4458   000E3E                     u2631:
  4459   000E3E  EF43  F007         	goto	l1197
  4460   000E42                     u2630:
  4461   000E42  BE09               	btfsc	(___xxtofl@val+3)^0,7,c
  4462   000E44  EF28  F007         	goto	u2640
  4463   000E48  EF26  F007         	goto	u2641
  4464   000E4C                     u2641:
  4465   000E4C  EF43  F007         	goto	l1197
  4466   000E50                     u2640:
  4467   000E50  C006  F00A         	movff	___xxtofl@val,??___xxtofl
  4468   000E54  C007  F00B         	movff	___xxtofl@val+1,??___xxtofl+1
  4469   000E58  C008  F00C         	movff	___xxtofl@val+2,??___xxtofl+2
  4470   000E5C  C009  F00D         	movff	___xxtofl@val+3,??___xxtofl+3
  4471   000E60  1E0A               	comf	??___xxtofl^0,f,c
  4472   000E62  1E0B               	comf	(??___xxtofl+1)^0,f,c
  4473   000E64  1E0C               	comf	(??___xxtofl+2)^0,f,c
  4474   000E66  1E0D               	comf	(??___xxtofl+3)^0,f,c
  4475   000E68  2A0A               	incf	??___xxtofl^0,f,c
  4476   000E6A  0E00               	movlw	0
  4477   000E6C  220B               	addwfc	(??___xxtofl+1)^0,f,c
  4478   000E6E  220C               	addwfc	(??___xxtofl+2)^0,f,c
  4479   000E70  220D               	addwfc	(??___xxtofl+3)^0,f,c
  4480   000E72  C00A  F010         	movff	??___xxtofl,___xxtofl@arg
  4481   000E76  C00B  F011         	movff	??___xxtofl+1,___xxtofl@arg+1
  4482   000E7A  C00C  F012         	movff	??___xxtofl+2,___xxtofl@arg+2
  4483   000E7E  C00D  F013         	movff	??___xxtofl+3,___xxtofl@arg+3
  4484   000E82  EF4B  F007         	goto	l3393
  4485   000E86                     l1197:
  4486   000E86  C006  F010         	movff	___xxtofl@val,___xxtofl@arg
  4487   000E8A  C007  F011         	movff	___xxtofl@val+1,___xxtofl@arg+1
  4488   000E8E  C008  F012         	movff	___xxtofl@val+2,___xxtofl@arg+2
  4489   000E92  C009  F013         	movff	___xxtofl@val+3,___xxtofl@arg+3
  4490   000E96                     l3393:
  4491   000E96  5006               	movf	___xxtofl@val^0,w,c
  4492   000E98  1007               	iorwf	(___xxtofl@val+1)^0,w,c
  4493   000E9A  1008               	iorwf	(___xxtofl@val+2)^0,w,c
  4494   000E9C  1009               	iorwf	(___xxtofl@val+3)^0,w,c
  4495   000E9E  A4D8               	btfss	status,2,c
  4496   000EA0  EF54  F007         	goto	u2651
  4497   000EA4  EF56  F007         	goto	u2650
  4498   000EA8                     u2651:
  4499   000EA8  EF60  F007         	goto	l3399
  4500   000EAC                     u2650:
  4501   000EAC  0E00               	movlw	0
  4502   000EAE  6E06               	movwf	?___xxtofl^0,c
  4503   000EB0  0E00               	movlw	0
  4504   000EB2  6E07               	movwf	(?___xxtofl+1)^0,c
  4505   000EB4  0E00               	movlw	0
  4506   000EB6  6E08               	movwf	(?___xxtofl+2)^0,c
  4507   000EB8  0E00               	movlw	0
  4508   000EBA  6E09               	movwf	(?___xxtofl+3)^0,c
  4509   000EBC  EFF1  F007         	goto	l1200
  4510   000EC0                     l3399:
  4511   000EC0  0E96               	movlw	150
  4512   000EC2  6E0F               	movwf	___xxtofl@exp^0,c
  4513   000EC4  EF6A  F007         	goto	l3403
  4514   000EC8                     l3401:
  4515   000EC8  2A0F               	incf	___xxtofl@exp^0,f,c
  4516   000ECA  90D8               	bcf	status,0,c
  4517   000ECC  3213               	rrcf	(___xxtofl@arg+3)^0,f,c
  4518   000ECE  3212               	rrcf	(___xxtofl@arg+2)^0,f,c
  4519   000ED0  3211               	rrcf	(___xxtofl@arg+1)^0,f,c
  4520   000ED2  3210               	rrcf	___xxtofl@arg^0,f,c
  4521   000ED4                     l3403:
  4522   000ED4  0E00               	movlw	0
  4523   000ED6  1410               	andwf	___xxtofl@arg^0,w,c
  4524   000ED8  6E0A               	movwf	??___xxtofl^0,c
  4525   000EDA  0E00               	movlw	0
  4526   000EDC  1411               	andwf	(___xxtofl@arg+1)^0,w,c
  4527   000EDE  6E0B               	movwf	(??___xxtofl+1)^0,c
  4528   000EE0  0E00               	movlw	0
  4529   000EE2  1412               	andwf	(___xxtofl@arg+2)^0,w,c
  4530   000EE4  6E0C               	movwf	(??___xxtofl+2)^0,c
  4531   000EE6  0EFE               	movlw	254
  4532   000EE8  1413               	andwf	(___xxtofl@arg+3)^0,w,c
  4533   000EEA  6E0D               	movwf	(??___xxtofl+3)^0,c
  4534   000EEC  500A               	movf	??___xxtofl^0,w,c
  4535   000EEE  100B               	iorwf	(??___xxtofl+1)^0,w,c
  4536   000EF0  100C               	iorwf	(??___xxtofl+2)^0,w,c
  4537   000EF2  100D               	iorwf	(??___xxtofl+3)^0,w,c
  4538   000EF4  A4D8               	btfss	status,2,c
  4539   000EF6  EF7F  F007         	goto	u2661
  4540   000EFA  EF81  F007         	goto	u2660
  4541   000EFE                     u2661:
  4542   000EFE  EF64  F007         	goto	l3401
  4543   000F02                     u2660:
  4544   000F02  EF8F  F007         	goto	l1204
  4545   000F06                     l3405:
  4546   000F06  2A0F               	incf	___xxtofl@exp^0,f,c
  4547   000F08  0E01               	movlw	1
  4548   000F0A  2610               	addwf	___xxtofl@arg^0,f,c
  4549   000F0C  0E00               	movlw	0
  4550   000F0E  2211               	addwfc	(___xxtofl@arg+1)^0,f,c
  4551   000F10  2212               	addwfc	(___xxtofl@arg+2)^0,f,c
  4552   000F12  2213               	addwfc	(___xxtofl@arg+3)^0,f,c
  4553   000F14  90D8               	bcf	status,0,c
  4554   000F16  3213               	rrcf	(___xxtofl@arg+3)^0,f,c
  4555   000F18  3212               	rrcf	(___xxtofl@arg+2)^0,f,c
  4556   000F1A  3211               	rrcf	(___xxtofl@arg+1)^0,f,c
  4557   000F1C  3210               	rrcf	___xxtofl@arg^0,f,c
  4558   000F1E                     l1204:
  4559   000F1E  0E00               	movlw	0
  4560   000F20  1410               	andwf	___xxtofl@arg^0,w,c
  4561   000F22  6E0A               	movwf	??___xxtofl^0,c
  4562   000F24  0E00               	movlw	0
  4563   000F26  1411               	andwf	(___xxtofl@arg+1)^0,w,c
  4564   000F28  6E0B               	movwf	(??___xxtofl+1)^0,c
  4565   000F2A  0E00               	movlw	0
  4566   000F2C  1412               	andwf	(___xxtofl@arg+2)^0,w,c
  4567   000F2E  6E0C               	movwf	(??___xxtofl+2)^0,c
  4568   000F30  0EFF               	movlw	255
  4569   000F32  1413               	andwf	(___xxtofl@arg+3)^0,w,c
  4570   000F34  6E0D               	movwf	(??___xxtofl+3)^0,c
  4571   000F36  500A               	movf	??___xxtofl^0,w,c
  4572   000F38  100B               	iorwf	(??___xxtofl+1)^0,w,c
  4573   000F3A  100C               	iorwf	(??___xxtofl+2)^0,w,c
  4574   000F3C  100D               	iorwf	(??___xxtofl+3)^0,w,c
  4575   000F3E  A4D8               	btfss	status,2,c
  4576   000F40  EFA4  F007         	goto	u2671
  4577   000F44  EFA6  F007         	goto	u2670
  4578   000F48                     u2671:
  4579   000F48  EF83  F007         	goto	l3405
  4580   000F4C                     u2670:
  4581   000F4C  EFAE  F007         	goto	l3413
  4582   000F50                     l3411:
  4583   000F50  060F               	decf	___xxtofl@exp^0,f,c
  4584   000F52  90D8               	bcf	status,0,c
  4585   000F54  3610               	rlcf	___xxtofl@arg^0,f,c
  4586   000F56  3611               	rlcf	(___xxtofl@arg+1)^0,f,c
  4587   000F58  3612               	rlcf	(___xxtofl@arg+2)^0,f,c
  4588   000F5A  3613               	rlcf	(___xxtofl@arg+3)^0,f,c
  4589   000F5C                     l3413:
  4590   000F5C  BE12               	btfsc	(___xxtofl@arg+2)^0,7,c
  4591   000F5E  EFB3  F007         	goto	u2681
  4592   000F62  EFB5  F007         	goto	u2680
  4593   000F66                     u2681:
  4594   000F66  EFBD  F007         	goto	l1211
  4595   000F6A                     u2680:
  4596   000F6A  0E02               	movlw	2
  4597   000F6C  600F               	cpfslt	___xxtofl@exp^0,c
  4598   000F6E  EFBB  F007         	goto	u2691
  4599   000F72  EFBD  F007         	goto	u2690
  4600   000F76                     u2691:
  4601   000F76  EFA8  F007         	goto	l3411
  4602   000F7A                     u2690:
  4603   000F7A                     l1211:
  4604   000F7A  B00F               	btfsc	___xxtofl@exp^0,0,c
  4605   000F7C  EFC2  F007         	goto	u2701
  4606   000F80  EFC4  F007         	goto	u2700
  4607   000F84                     u2701:
  4608   000F84  EFC5  F007         	goto	l3419
  4609   000F88                     u2700:
  4610   000F88  9E12               	bcf	(___xxtofl@arg+2)^0,7,c
  4611   000F8A                     l3419:
  4612   000F8A  90D8               	bcf	status,0,c
  4613   000F8C  320F               	rrcf	___xxtofl@exp^0,f,c
  4614   000F8E  C00F  F00A         	movff	___xxtofl@exp,??___xxtofl
  4615   000F92  6A0B               	clrf	(??___xxtofl+1)^0,c
  4616   000F94  6A0C               	clrf	(??___xxtofl+2)^0,c
  4617   000F96  6A0D               	clrf	(??___xxtofl+3)^0,c
  4618   000F98  C00A  F00D         	movff	??___xxtofl,??___xxtofl+3
  4619   000F9C  6A0C               	clrf	(??___xxtofl+2)^0,c
  4620   000F9E  6A0B               	clrf	(??___xxtofl+1)^0,c
  4621   000FA0  6A0A               	clrf	??___xxtofl^0,c
  4622   000FA2  500A               	movf	??___xxtofl^0,w,c
  4623   000FA4  1210               	iorwf	___xxtofl@arg^0,f,c
  4624   000FA6  500B               	movf	(??___xxtofl+1)^0,w,c
  4625   000FA8  1211               	iorwf	(___xxtofl@arg+1)^0,f,c
  4626   000FAA  500C               	movf	(??___xxtofl+2)^0,w,c
  4627   000FAC  1212               	iorwf	(___xxtofl@arg+2)^0,f,c
  4628   000FAE  500D               	movf	(??___xxtofl+3)^0,w,c
  4629   000FB0  1213               	iorwf	(___xxtofl@arg+3)^0,f,c
  4630   000FB2  500E               	movf	___xxtofl@sign^0,w,c
  4631   000FB4  B4D8               	btfsc	status,2,c
  4632   000FB6  EFDF  F007         	goto	u2711
  4633   000FBA  EFE1  F007         	goto	u2710
  4634   000FBE                     u2711:
  4635   000FBE  EFE9  F007         	goto	l3429
  4636   000FC2                     u2710:
  4637   000FC2  BE09               	btfsc	(___xxtofl@val+3)^0,7,c
  4638   000FC4  EFE8  F007         	goto	u2720
  4639   000FC8  EFE6  F007         	goto	u2721
  4640   000FCC                     u2721:
  4641   000FCC  EFE9  F007         	goto	l3429
  4642   000FD0                     u2720:
  4643   000FD0  8E13               	bsf	(___xxtofl@arg+3)^0,7,c
  4644   000FD2                     l3429:
  4645   000FD2  C010  F006         	movff	___xxtofl@arg,?___xxtofl
  4646   000FD6  C011  F007         	movff	___xxtofl@arg+1,?___xxtofl+1
  4647   000FDA  C012  F008         	movff	___xxtofl@arg+2,?___xxtofl+2
  4648   000FDE  C013  F009         	movff	___xxtofl@arg+3,?___xxtofl+3
  4649   000FE2                     l1200:
  4650   000FE2  0012               	return		;funcret
  4651   000FE4                     __end_of___xxtofl:
  4652                           	callstack 0
  4653                           
  4654 ;; *************** function ___fldiv *****************
  4655 ;; Defined at:
  4656 ;;		line 11 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\sprcdiv.c"
  4657 ;; Parameters:    Size  Location     Type
  4658 ;;  b               4   19[COMRAM] unsigned char 
  4659 ;;  a               4   23[COMRAM] unsigned char 
  4660 ;; Auto vars:     Size  Location     Type
  4661 ;;  grs             4   38[COMRAM] unsigned long 
  4662 ;;  rem             4   31[COMRAM] unsigned long 
  4663 ;;  new_exp         2   36[COMRAM] short 
  4664 ;;  aexp            1   43[COMRAM] unsigned char 
  4665 ;;  bexp            1   42[COMRAM] unsigned char 
  4666 ;;  sign            1   35[COMRAM] unsigned char 
  4667 ;; Return value:  Size  Location     Type
  4668 ;;                  4   19[COMRAM] unsigned char 
  4669 ;; Registers used:
  4670 ;;		wreg, status,2, status,0
  4671 ;; Tracked objects:
  4672 ;;		On entry : 0/0
  4673 ;;		On exit  : 0/0
  4674 ;;		Unchanged: 0/0
  4675 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4676 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4677 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4678 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4679 ;;      Totals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4680 ;;Total ram usage:       25 bytes
  4681 ;; Hardware stack levels used: 1
  4682 ;; Hardware stack levels required when called: 5
  4683 ;; This function calls:
  4684 ;;		Nothing
  4685 ;; This function is called by:
  4686 ;;		_colourcards_normaliseRGBC
  4687 ;; This function uses a non-reentrant model
  4688 ;;
  4689                           
  4690                           	psect	text25
  4691   000762                     __ptext25:
  4692                           	callstack 0
  4693   000762                     ___fldiv:
  4694                           	callstack 23
  4695   000762  5017               	movf	(___fldiv@b+3)^0,w,c
  4696   000764  0B80               	andlw	128
  4697   000766  6E24               	movwf	___fldiv@sign^0,c
  4698   000768  5017               	movf	(___fldiv@b+3)^0,w,c
  4699   00076A  2417               	addwf	(___fldiv@b+3)^0,w,c
  4700   00076C  6E2B               	movwf	___fldiv@bexp^0,c
  4701   00076E  AE16               	btfss	(___fldiv@b+2)^0,7,c
  4702   000770  EFBC  F003         	goto	u2401
  4703   000774  EFBE  F003         	goto	u2400
  4704   000778                     u2401:
  4705   000778  EFBF  F003         	goto	l3255
  4706   00077C                     u2400:
  4707   00077C  802B               	bsf	___fldiv@bexp^0,0,c
  4708   00077E                     l3255:
  4709   00077E  502B               	movf	___fldiv@bexp^0,w,c
  4710   000780  B4D8               	btfsc	status,2,c
  4711   000782  EFC5  F003         	goto	u2411
  4712   000786  EFC7  F003         	goto	u2410
  4713   00078A                     u2411:
  4714   00078A  EFDC  F003         	goto	l3265
  4715   00078E                     u2410:
  4716   00078E  282B               	incf	___fldiv@bexp^0,w,c
  4717   000790  A4D8               	btfss	status,2,c
  4718   000792  EFCD  F003         	goto	u2421
  4719   000796  EFCF  F003         	goto	u2420
  4720   00079A                     u2421:
  4721   00079A  EFD7  F003         	goto	l3261
  4722   00079E                     u2420:
  4723   00079E  0E00               	movlw	0
  4724   0007A0  6E14               	movwf	___fldiv@b^0,c
  4725   0007A2  0E00               	movlw	0
  4726   0007A4  6E15               	movwf	(___fldiv@b+1)^0,c
  4727   0007A6  0E00               	movlw	0
  4728   0007A8  6E16               	movwf	(___fldiv@b+2)^0,c
  4729   0007AA  0E00               	movlw	0
  4730   0007AC  6E17               	movwf	(___fldiv@b+3)^0,c
  4731   0007AE                     l3261:
  4732   0007AE  8E16               	bsf	(___fldiv@b+2)^0,7,c
  4733   0007B0  0E00               	movlw	0
  4734   0007B2  6E17               	movwf	(___fldiv@b+3)^0,c
  4735   0007B4  EFE4  F003         	goto	l3267
  4736   0007B8                     l3265:
  4737   0007B8  0E00               	movlw	0
  4738   0007BA  6E14               	movwf	___fldiv@b^0,c
  4739   0007BC  0E00               	movlw	0
  4740   0007BE  6E15               	movwf	(___fldiv@b+1)^0,c
  4741   0007C0  0E00               	movlw	0
  4742   0007C2  6E16               	movwf	(___fldiv@b+2)^0,c
  4743   0007C4  0E00               	movlw	0
  4744   0007C6  6E17               	movwf	(___fldiv@b+3)^0,c
  4745   0007C8                     l3267:
  4746   0007C8  501B               	movf	(___fldiv@a+3)^0,w,c
  4747   0007CA  0B80               	andlw	128
  4748   0007CC  1A24               	xorwf	___fldiv@sign^0,f,c
  4749   0007CE  501B               	movf	(___fldiv@a+3)^0,w,c
  4750   0007D0  241B               	addwf	(___fldiv@a+3)^0,w,c
  4751   0007D2  6E2C               	movwf	___fldiv@aexp^0,c
  4752   0007D4  AE1A               	btfss	(___fldiv@a+2)^0,7,c
  4753   0007D6  EFEF  F003         	goto	u2431
  4754   0007DA  EFF1  F003         	goto	u2430
  4755   0007DE                     u2431:
  4756   0007DE  EFF2  F003         	goto	l3275
  4757   0007E2                     u2430:
  4758   0007E2  802C               	bsf	___fldiv@aexp^0,0,c
  4759   0007E4                     l3275:
  4760   0007E4  502C               	movf	___fldiv@aexp^0,w,c
  4761   0007E6  B4D8               	btfsc	status,2,c
  4762   0007E8  EFF8  F003         	goto	u2441
  4763   0007EC  EFFA  F003         	goto	u2440
  4764   0007F0                     u2441:
  4765   0007F0  EF0F  F004         	goto	l3285
  4766   0007F4                     u2440:
  4767   0007F4  282C               	incf	___fldiv@aexp^0,w,c
  4768   0007F6  A4D8               	btfss	status,2,c
  4769   0007F8  EF00  F004         	goto	u2451
  4770   0007FC  EF02  F004         	goto	u2450
  4771   000800                     u2451:
  4772   000800  EF0A  F004         	goto	l3281
  4773   000804                     u2450:
  4774   000804  0E00               	movlw	0
  4775   000806  6E18               	movwf	___fldiv@a^0,c
  4776   000808  0E00               	movlw	0
  4777   00080A  6E19               	movwf	(___fldiv@a+1)^0,c
  4778   00080C  0E00               	movlw	0
  4779   00080E  6E1A               	movwf	(___fldiv@a+2)^0,c
  4780   000810  0E00               	movlw	0
  4781   000812  6E1B               	movwf	(___fldiv@a+3)^0,c
  4782   000814                     l3281:
  4783   000814  8E1A               	bsf	(___fldiv@a+2)^0,7,c
  4784   000816  0E00               	movlw	0
  4785   000818  6E1B               	movwf	(___fldiv@a+3)^0,c
  4786   00081A  EF17  F004         	goto	l3287
  4787   00081E                     l3285:
  4788   00081E  0E00               	movlw	0
  4789   000820  6E18               	movwf	___fldiv@a^0,c
  4790   000822  0E00               	movlw	0
  4791   000824  6E19               	movwf	(___fldiv@a+1)^0,c
  4792   000826  0E00               	movlw	0
  4793   000828  6E1A               	movwf	(___fldiv@a+2)^0,c
  4794   00082A  0E00               	movlw	0
  4795   00082C  6E1B               	movwf	(___fldiv@a+3)^0,c
  4796   00082E                     l3287:
  4797   00082E  5018               	movf	___fldiv@a^0,w,c
  4798   000830  1019               	iorwf	(___fldiv@a+1)^0,w,c
  4799   000832  101A               	iorwf	(___fldiv@a+2)^0,w,c
  4800   000834  101B               	iorwf	(___fldiv@a+3)^0,w,c
  4801   000836  A4D8               	btfss	status,2,c
  4802   000838  EF20  F004         	goto	u2461
  4803   00083C  EF22  F004         	goto	u2460
  4804   000840                     u2461:
  4805   000840  EF3A  F004         	goto	l3299
  4806   000844                     u2460:
  4807   000844  0E00               	movlw	0
  4808   000846  6E14               	movwf	___fldiv@b^0,c
  4809   000848  0E00               	movlw	0
  4810   00084A  6E15               	movwf	(___fldiv@b+1)^0,c
  4811   00084C  0E00               	movlw	0
  4812   00084E  6E16               	movwf	(___fldiv@b+2)^0,c
  4813   000850  0E00               	movlw	0
  4814   000852  6E17               	movwf	(___fldiv@b+3)^0,c
  4815   000854  0E80               	movlw	128
  4816   000856  1216               	iorwf	(___fldiv@b+2)^0,f,c
  4817   000858  0E7F               	movlw	127
  4818   00085A  1217               	iorwf	(___fldiv@b+3)^0,f,c
  4819   00085C                     l3293:
  4820   00085C  5024               	movf	___fldiv@sign^0,w,c
  4821   00085E  1217               	iorwf	(___fldiv@b+3)^0,f,c
  4822   000860  C014  F014         	movff	___fldiv@b,?___fldiv
  4823   000864  C015  F015         	movff	___fldiv@b+1,?___fldiv+1
  4824   000868  C016  F016         	movff	___fldiv@b+2,?___fldiv+2
  4825   00086C  C017  F017         	movff	___fldiv@b+3,?___fldiv+3
  4826   000870  EF7D  F005         	goto	l1124
  4827   000874                     l3299:
  4828   000874  502B               	movf	___fldiv@bexp^0,w,c
  4829   000876  A4D8               	btfss	status,2,c
  4830   000878  EF40  F004         	goto	u2471
  4831   00087C  EF42  F004         	goto	u2470
  4832   000880                     u2471:
  4833   000880  EF4C  F004         	goto	l3307
  4834   000884                     u2470:
  4835   000884  0E00               	movlw	0
  4836   000886  6E14               	movwf	?___fldiv^0,c
  4837   000888  0E00               	movlw	0
  4838   00088A  6E15               	movwf	(?___fldiv+1)^0,c
  4839   00088C  0E00               	movlw	0
  4840   00088E  6E16               	movwf	(?___fldiv+2)^0,c
  4841   000890  0E00               	movlw	0
  4842   000892  6E17               	movwf	(?___fldiv+3)^0,c
  4843   000894  EF7D  F005         	goto	l1124
  4844   000898                     l3307:
  4845   000898  502C               	movf	___fldiv@aexp^0,w,c
  4846   00089A  C02B  F01C         	movff	___fldiv@bexp,??___fldiv
  4847   00089E  6A1D               	clrf	(??___fldiv+1)^0,c
  4848   0008A0  5E1C               	subwf	??___fldiv^0,f,c
  4849   0008A2  0E00               	movlw	0
  4850   0008A4  5A1D               	subwfb	(??___fldiv+1)^0,f,c
  4851   0008A6  0E7F               	movlw	127
  4852   0008A8  241C               	addwf	??___fldiv^0,w,c
  4853   0008AA  6E25               	movwf	___fldiv@new_exp^0,c
  4854   0008AC  0E00               	movlw	0
  4855   0008AE  201D               	addwfc	(??___fldiv+1)^0,w,c
  4856   0008B0  6E26               	movwf	(___fldiv@new_exp+1)^0,c
  4857   0008B2  C014  F020         	movff	___fldiv@b,___fldiv@rem
  4858   0008B6  C015  F021         	movff	___fldiv@b+1,___fldiv@rem+1
  4859   0008BA  C016  F022         	movff	___fldiv@b+2,___fldiv@rem+2
  4860   0008BE  C017  F023         	movff	___fldiv@b+3,___fldiv@rem+3
  4861   0008C2  0E00               	movlw	0
  4862   0008C4  6E14               	movwf	___fldiv@b^0,c
  4863   0008C6  0E00               	movlw	0
  4864   0008C8  6E15               	movwf	(___fldiv@b+1)^0,c
  4865   0008CA  0E00               	movlw	0
  4866   0008CC  6E16               	movwf	(___fldiv@b+2)^0,c
  4867   0008CE  0E00               	movlw	0
  4868   0008D0  6E17               	movwf	(___fldiv@b+3)^0,c
  4869   0008D2  0E00               	movlw	0
  4870   0008D4  6E27               	movwf	___fldiv@grs^0,c
  4871   0008D6  0E00               	movlw	0
  4872   0008D8  6E28               	movwf	(___fldiv@grs+1)^0,c
  4873   0008DA  0E00               	movlw	0
  4874   0008DC  6E29               	movwf	(___fldiv@grs+2)^0,c
  4875   0008DE  0E00               	movlw	0
  4876   0008E0  6E2A               	movwf	(___fldiv@grs+3)^0,c
  4877   0008E2  0E00               	movlw	0
  4878   0008E4  6E2C               	movwf	___fldiv@aexp^0,c
  4879   0008E6  EFAD  F004         	goto	l1126
  4880   0008EA                     l3317:
  4881   0008EA  502C               	movf	___fldiv@aexp^0,w,c
  4882   0008EC  B4D8               	btfsc	status,2,c
  4883   0008EE  EF7B  F004         	goto	u2481
  4884   0008F2  EF7D  F004         	goto	u2480
  4885   0008F6                     u2481:
  4886   0008F6  EF94  F004         	goto	l3325
  4887   0008FA                     u2480:
  4888   0008FA  90D8               	bcf	status,0,c
  4889   0008FC  3620               	rlcf	___fldiv@rem^0,f,c
  4890   0008FE  3621               	rlcf	(___fldiv@rem+1)^0,f,c
  4891   000900  3622               	rlcf	(___fldiv@rem+2)^0,f,c
  4892   000902  3623               	rlcf	(___fldiv@rem+3)^0,f,c
  4893   000904  90D8               	bcf	status,0,c
  4894   000906  3614               	rlcf	___fldiv@b^0,f,c
  4895   000908  3615               	rlcf	(___fldiv@b+1)^0,f,c
  4896   00090A  3616               	rlcf	(___fldiv@b+2)^0,f,c
  4897   00090C  3617               	rlcf	(___fldiv@b+3)^0,f,c
  4898   00090E  AE2A               	btfss	(___fldiv@grs+3)^0,7,c
  4899   000910  EF8C  F004         	goto	u2491
  4900   000914  EF8E  F004         	goto	u2490
  4901   000918                     u2491:
  4902   000918  EF8F  F004         	goto	l1129
  4903   00091C                     u2490:
  4904   00091C  8014               	bsf	___fldiv@b^0,0,c
  4905   00091E                     l1129:
  4906   00091E  90D8               	bcf	status,0,c
  4907   000920  3627               	rlcf	___fldiv@grs^0,f,c
  4908   000922  3628               	rlcf	(___fldiv@grs+1)^0,f,c
  4909   000924  3629               	rlcf	(___fldiv@grs+2)^0,f,c
  4910   000926  362A               	rlcf	(___fldiv@grs+3)^0,f,c
  4911   000928                     l3325:
  4912   000928  5018               	movf	___fldiv@a^0,w,c
  4913   00092A  5C20               	subwf	___fldiv@rem^0,w,c
  4914   00092C  5019               	movf	(___fldiv@a+1)^0,w,c
  4915   00092E  5821               	subwfb	(___fldiv@rem+1)^0,w,c
  4916   000930  501A               	movf	(___fldiv@a+2)^0,w,c
  4917   000932  5822               	subwfb	(___fldiv@rem+2)^0,w,c
  4918   000934  501B               	movf	(___fldiv@a+3)^0,w,c
  4919   000936  5823               	subwfb	(___fldiv@rem+3)^0,w,c
  4920   000938  A0D8               	btfss	status,0,c
  4921   00093A  EFA1  F004         	goto	u2501
  4922   00093E  EFA3  F004         	goto	u2500
  4923   000942                     u2501:
  4924   000942  EFAC  F004         	goto	l3331
  4925   000946                     u2500:
  4926   000946  8C2A               	bsf	(___fldiv@grs+3)^0,6,c
  4927   000948  5018               	movf	___fldiv@a^0,w,c
  4928   00094A  5E20               	subwf	___fldiv@rem^0,f,c
  4929   00094C  5019               	movf	(___fldiv@a+1)^0,w,c
  4930   00094E  5A21               	subwfb	(___fldiv@rem+1)^0,f,c
  4931   000950  501A               	movf	(___fldiv@a+2)^0,w,c
  4932   000952  5A22               	subwfb	(___fldiv@rem+2)^0,f,c
  4933   000954  501B               	movf	(___fldiv@a+3)^0,w,c
  4934   000956  5A23               	subwfb	(___fldiv@rem+3)^0,f,c
  4935   000958                     l3331:
  4936   000958  2A2C               	incf	___fldiv@aexp^0,f,c
  4937   00095A                     l1126:
  4938   00095A  0E19               	movlw	25
  4939   00095C  642C               	cpfsgt	___fldiv@aexp^0,c
  4940   00095E  EFB3  F004         	goto	u2511
  4941   000962  EFB5  F004         	goto	u2510
  4942   000966                     u2511:
  4943   000966  EF75  F004         	goto	l3317
  4944   00096A                     u2510:
  4945   00096A  5020               	movf	___fldiv@rem^0,w,c
  4946   00096C  1021               	iorwf	(___fldiv@rem+1)^0,w,c
  4947   00096E  1022               	iorwf	(___fldiv@rem+2)^0,w,c
  4948   000970  1023               	iorwf	(___fldiv@rem+3)^0,w,c
  4949   000972  B4D8               	btfsc	status,2,c
  4950   000974  EFBE  F004         	goto	u2521
  4951   000978  EFC0  F004         	goto	u2520
  4952   00097C                     u2521:
  4953   00097C  EFD8  F004         	goto	l3343
  4954   000980                     u2520:
  4955   000980  8027               	bsf	___fldiv@grs^0,0,c
  4956   000982  EFD8  F004         	goto	l3343
  4957   000986                     l3337:
  4958   000986  90D8               	bcf	status,0,c
  4959   000988  3614               	rlcf	___fldiv@b^0,f,c
  4960   00098A  3615               	rlcf	(___fldiv@b+1)^0,f,c
  4961   00098C  3616               	rlcf	(___fldiv@b+2)^0,f,c
  4962   00098E  3617               	rlcf	(___fldiv@b+3)^0,f,c
  4963   000990  AE2A               	btfss	(___fldiv@grs+3)^0,7,c
  4964   000992  EFCD  F004         	goto	u2531
  4965   000996  EFCF  F004         	goto	u2530
  4966   00099A                     u2531:
  4967   00099A  EFD0  F004         	goto	l1135
  4968   00099E                     u2530:
  4969   00099E  8014               	bsf	___fldiv@b^0,0,c
  4970   0009A0                     l1135:
  4971   0009A0  90D8               	bcf	status,0,c
  4972   0009A2  3627               	rlcf	___fldiv@grs^0,f,c
  4973   0009A4  3628               	rlcf	(___fldiv@grs+1)^0,f,c
  4974   0009A6  3629               	rlcf	(___fldiv@grs+2)^0,f,c
  4975   0009A8  362A               	rlcf	(___fldiv@grs+3)^0,f,c
  4976   0009AA  0625               	decf	___fldiv@new_exp^0,f,c
  4977   0009AC  A0D8               	btfss	status,0,c
  4978   0009AE  0626               	decf	(___fldiv@new_exp+1)^0,f,c
  4979   0009B0                     l3343:
  4980   0009B0  AE16               	btfss	(___fldiv@b+2)^0,7,c
  4981   0009B2  EFDD  F004         	goto	u2541
  4982   0009B6  EFDF  F004         	goto	u2540
  4983   0009BA                     u2541:
  4984   0009BA  EFC3  F004         	goto	l3337
  4985   0009BE                     u2540:
  4986   0009BE  0E00               	movlw	0
  4987   0009C0  6E2C               	movwf	___fldiv@aexp^0,c
  4988   0009C2  AE2A               	btfss	(___fldiv@grs+3)^0,7,c
  4989   0009C4  EFE6  F004         	goto	u2551
  4990   0009C8  EFE8  F004         	goto	u2550
  4991   0009CC                     u2551:
  4992   0009CC  EF0C  F005         	goto	l1137
  4993   0009D0                     u2550:
  4994   0009D0  0EFF               	movlw	255
  4995   0009D2  1427               	andwf	___fldiv@grs^0,w,c
  4996   0009D4  6E1C               	movwf	??___fldiv^0,c
  4997   0009D6  0EFF               	movlw	255
  4998   0009D8  1428               	andwf	(___fldiv@grs+1)^0,w,c
  4999   0009DA  6E1D               	movwf	(??___fldiv+1)^0,c
  5000   0009DC  0EFF               	movlw	255
  5001   0009DE  1429               	andwf	(___fldiv@grs+2)^0,w,c
  5002   0009E0  6E1E               	movwf	(??___fldiv+2)^0,c
  5003   0009E2  0E7F               	movlw	127
  5004   0009E4  142A               	andwf	(___fldiv@grs+3)^0,w,c
  5005   0009E6  6E1F               	movwf	(??___fldiv+3)^0,c
  5006   0009E8  501C               	movf	??___fldiv^0,w,c
  5007   0009EA  101D               	iorwf	(??___fldiv+1)^0,w,c
  5008   0009EC  101E               	iorwf	(??___fldiv+2)^0,w,c
  5009   0009EE  101F               	iorwf	(??___fldiv+3)^0,w,c
  5010   0009F0  B4D8               	btfsc	status,2,c
  5011   0009F2  EFFD  F004         	goto	u2561
  5012   0009F6  EFFF  F004         	goto	u2560
  5013   0009FA                     u2561:
  5014   0009FA  EF03  F005         	goto	l1138
  5015   0009FE                     u2560:
  5016   0009FE                     l3351:
  5017   0009FE  0E01               	movlw	1
  5018   000A00  6E2C               	movwf	___fldiv@aexp^0,c
  5019   000A02  EF0C  F005         	goto	l1137
  5020   000A06                     l1138:
  5021   000A06  A014               	btfss	___fldiv@b^0,0,c
  5022   000A08  EF08  F005         	goto	u2571
  5023   000A0C  EF0A  F005         	goto	u2570
  5024   000A10                     u2571:
  5025   000A10  EF0C  F005         	goto	l1137
  5026   000A14                     u2570:
  5027   000A14  EFFF  F004         	goto	l3351
  5028   000A18                     l1137:
  5029   000A18  502C               	movf	___fldiv@aexp^0,w,c
  5030   000A1A  B4D8               	btfsc	status,2,c
  5031   000A1C  EF12  F005         	goto	u2581
  5032   000A20  EF14  F005         	goto	u2580
  5033   000A24                     u2581:
  5034   000A24  EF38  F005         	goto	l3363
  5035   000A28                     u2580:
  5036   000A28  0E01               	movlw	1
  5037   000A2A  2614               	addwf	___fldiv@b^0,f,c
  5038   000A2C  0E00               	movlw	0
  5039   000A2E  2215               	addwfc	(___fldiv@b+1)^0,f,c
  5040   000A30  2216               	addwfc	(___fldiv@b+2)^0,f,c
  5041   000A32  2217               	addwfc	(___fldiv@b+3)^0,f,c
  5042   000A34  A017               	btfss	(___fldiv@b+3)^0,0,c
  5043   000A36  EF1F  F005         	goto	u2591
  5044   000A3A  EF21  F005         	goto	u2590
  5045   000A3E                     u2591:
  5046   000A3E  EF38  F005         	goto	l3363
  5047   000A42                     u2590:
  5048   000A42  C014  F01C         	movff	___fldiv@b,??___fldiv
  5049   000A46  C015  F01D         	movff	___fldiv@b+1,??___fldiv+1
  5050   000A4A  C016  F01E         	movff	___fldiv@b+2,??___fldiv+2
  5051   000A4E  C017  F01F         	movff	___fldiv@b+3,??___fldiv+3
  5052   000A52  341F               	rlcf	(??___fldiv+3)^0,w,c
  5053   000A54  321F               	rrcf	(??___fldiv+3)^0,f,c
  5054   000A56  321E               	rrcf	(??___fldiv+2)^0,f,c
  5055   000A58  321D               	rrcf	(??___fldiv+1)^0,f,c
  5056   000A5A  321C               	rrcf	??___fldiv^0,f,c
  5057   000A5C  C01C  F014         	movff	??___fldiv,___fldiv@b
  5058   000A60  C01D  F015         	movff	??___fldiv+1,___fldiv@b+1
  5059   000A64  C01E  F016         	movff	??___fldiv+2,___fldiv@b+2
  5060   000A68  C01F  F017         	movff	??___fldiv+3,___fldiv@b+3
  5061   000A6C  4A25               	infsnz	___fldiv@new_exp^0,f,c
  5062   000A6E  2A26               	incf	(___fldiv@new_exp+1)^0,f,c
  5063   000A70                     l3363:
  5064   000A70  BE26               	btfsc	(___fldiv@new_exp+1)^0,7,c
  5065   000A72  EF43  F005         	goto	u2601
  5066   000A76  5026               	movf	(___fldiv@new_exp+1)^0,w,c
  5067   000A78  E108               	bnz	u2600
  5068   000A7A  2825               	incf	___fldiv@new_exp^0,w,c
  5069   000A7C  A0D8               	btfss	status,0,c
  5070   000A7E  EF43  F005         	goto	u2601
  5071   000A82  EF45  F005         	goto	u2600
  5072   000A86                     u2601:
  5073   000A86  EF50  F005         	goto	l3367
  5074   000A8A                     u2600:
  5075   000A8A  0E00               	movlw	0
  5076   000A8C  6E26               	movwf	(___fldiv@new_exp+1)^0,c
  5077   000A8E  6825               	setf	___fldiv@new_exp^0,c
  5078   000A90  0E00               	movlw	0
  5079   000A92  6E14               	movwf	___fldiv@b^0,c
  5080   000A94  0E00               	movlw	0
  5081   000A96  6E15               	movwf	(___fldiv@b+1)^0,c
  5082   000A98  0E00               	movlw	0
  5083   000A9A  6E16               	movwf	(___fldiv@b+2)^0,c
  5084   000A9C  0E00               	movlw	0
  5085   000A9E  6E17               	movwf	(___fldiv@b+3)^0,c
  5086   000AA0                     l3367:
  5087   000AA0  BE26               	btfsc	(___fldiv@new_exp+1)^0,7,c
  5088   000AA2  EF5D  F005         	goto	u2610
  5089   000AA6  5026               	movf	(___fldiv@new_exp+1)^0,w,c
  5090   000AA8  E106               	bnz	u2611
  5091   000AAA  0425               	decf	___fldiv@new_exp^0,w,c
  5092   000AAC  B0D8               	btfsc	status,0,c
  5093   000AAE  EF5B  F005         	goto	u2611
  5094   000AB2  EF5D  F005         	goto	u2610
  5095   000AB6                     u2611:
  5096   000AB6  EF6B  F005         	goto	l3371
  5097   000ABA                     u2610:
  5098   000ABA  0E00               	movlw	0
  5099   000ABC  6E26               	movwf	(___fldiv@new_exp+1)^0,c
  5100   000ABE  0E00               	movlw	0
  5101   000AC0  6E25               	movwf	___fldiv@new_exp^0,c
  5102   000AC2  0E00               	movlw	0
  5103   000AC4  6E14               	movwf	___fldiv@b^0,c
  5104   000AC6  0E00               	movlw	0
  5105   000AC8  6E15               	movwf	(___fldiv@b+1)^0,c
  5106   000ACA  0E00               	movlw	0
  5107   000ACC  6E16               	movwf	(___fldiv@b+2)^0,c
  5108   000ACE  0E00               	movlw	0
  5109   000AD0  6E17               	movwf	(___fldiv@b+3)^0,c
  5110   000AD2  0E00               	movlw	0
  5111   000AD4  6E24               	movwf	___fldiv@sign^0,c
  5112   000AD6                     l3371:
  5113   000AD6  C025  F02B         	movff	___fldiv@new_exp,___fldiv@bexp
  5114   000ADA  A02B               	btfss	___fldiv@bexp^0,0,c
  5115   000ADC  EF72  F005         	goto	u2621
  5116   000AE0  EF74  F005         	goto	u2620
  5117   000AE4                     u2621:
  5118   000AE4  EF77  F005         	goto	l3377
  5119   000AE8                     u2620:
  5120   000AE8  8E16               	bsf	(___fldiv@b+2)^0,7,c
  5121   000AEA  EF78  F005         	goto	l3379
  5122   000AEE                     l3377:
  5123   000AEE  9E16               	bcf	(___fldiv@b+2)^0,7,c
  5124   000AF0                     l3379:
  5125   000AF0  90D8               	bcf	status,0,c
  5126   000AF2  302B               	rrcf	___fldiv@bexp^0,w,c
  5127   000AF4  6E17               	movwf	(___fldiv@b+3)^0,c
  5128   000AF6  EF2E  F004         	goto	l3293
  5129   000AFA                     l1124:
  5130   000AFA  0012               	return		;funcret
  5131   000AFC                     __end_of___fldiv:
  5132                           	callstack 0
  5133                           
  5134 ;; *************** function _card_append *****************
  5135 ;; Defined at:
  5136 ;;		line 3 in file "memory.c"
  5137 ;; Parameters:    Size  Location     Type
  5138 ;;  temp            1    wreg     unsigned char 
  5139 ;;  card_count_i    2    5[COMRAM] PTR int 
  5140 ;;		 -> card_count_index(1), 
  5141 ;;  card_memory     2    7[COMRAM] PTR int 
  5142 ;;		 -> RAM(3561), 
  5143 ;; Auto vars:     Size  Location     Type
  5144 ;;  temp            1   13[COMRAM] unsigned char 
  5145 ;; Return value:  Size  Location     Type
  5146 ;;                  1    wreg      void 
  5147 ;; Registers used:
  5148 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5149 ;; Tracked objects:
  5150 ;;		On entry : 0/0
  5151 ;;		On exit  : 0/0
  5152 ;;		Unchanged: 0/0
  5153 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5154 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5155 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5156 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5157 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5158 ;;Total ram usage:        9 bytes
  5159 ;; Hardware stack levels used: 1
  5160 ;; Hardware stack levels required when called: 5
  5161 ;; This function calls:
  5162 ;;		Nothing
  5163 ;; This function is called by:
  5164 ;;		_buggy_color_response
  5165 ;; This function uses a non-reentrant model
  5166 ;;
  5167                           
  5168                           	psect	text26
  5169   001D6E                     __ptext26:
  5170                           	callstack 0
  5171   001D6E                     _card_append:
  5172                           	callstack 24
  5173                           
  5174                           ;incstack = 0
  5175                           ;card_append@temp stored from wreg
  5176   001D6E  6E0E               	movwf	card_append@temp^0,c
  5177   001D70                     
  5178                           ;memory.c: 4:     card_memory[(*card_count_index)++] = temp;
  5179   001D70  500E               	movf	card_append@temp^0,w,c
  5180   001D72  6E0A               	movwf	??_card_append^0,c
  5181   001D74  6A0B               	clrf	(??_card_append+1)^0,c
  5182   001D76  C006  FFD9         	movff	card_append@card_count_index,fsr2l
  5183   001D7A  C007  FFDA         	movff	card_append@card_count_index+1,fsr2h
  5184   001D7E  CFDF F00C          	movff	indf2,??_card_append+2
  5185   001D82  0E01               	movlw	1
  5186   001D84  26DE               	addwf	postinc2,f,c
  5187   001D86  CFDF F00D          	movff	indf2,??_card_append+3
  5188   001D8A  0E00               	movlw	0
  5189   001D8C  22DD               	addwfc	postdec2,f,c
  5190   001D8E  90D8               	bcf	status,0,c
  5191   001D90  360C               	rlcf	(??_card_append+2)^0,f,c
  5192   001D92  360D               	rlcf	(??_card_append+3)^0,f,c
  5193   001D94  500C               	movf	(??_card_append+2)^0,w,c
  5194   001D96  2408               	addwf	card_append@card_memory^0,w,c
  5195   001D98  6ED9               	movwf	fsr2l,c
  5196   001D9A  500D               	movf	(??_card_append+3)^0,w,c
  5197   001D9C  2009               	addwfc	(card_append@card_memory+1)^0,w,c
  5198   001D9E  6EDA               	movwf	fsr2h,c
  5199   001DA0  C00A  FFDE         	movff	??_card_append,postinc2
  5200   001DA4  C00B  FFDD         	movff	??_card_append+1,postdec2
  5201   001DA8  0012               	return		;funcret
  5202   001DAA                     __end_of_card_append:
  5203                           	callstack 0
  5204                           
  5205 ;; *************** function ___flge *****************
  5206 ;; Defined at:
  5207 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\flge.c"
  5208 ;; Parameters:    Size  Location     Type
  5209 ;;  ff1             4    5[COMRAM] void 
  5210 ;;  ff2             4    9[COMRAM] void 
  5211 ;; Auto vars:     Size  Location     Type
  5212 ;;		None
  5213 ;; Return value:  Size  Location     Type
  5214 ;;		None               void
  5215 ;; Registers used:
  5216 ;;		wreg, status,2, status,0
  5217 ;; Tracked objects:
  5218 ;;		On entry : 0/0
  5219 ;;		On exit  : 0/0
  5220 ;;		Unchanged: 0/0
  5221 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5222 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5223 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5224 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5225 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5226 ;;Total ram usage:       12 bytes
  5227 ;; Hardware stack levels used: 1
  5228 ;; Hardware stack levels required when called: 5
  5229 ;; This function calls:
  5230 ;;		Nothing
  5231 ;; This function is called by:
  5232 ;;		_buggy_color_response
  5233 ;; This function uses a non-reentrant model
  5234 ;;
  5235                           
  5236                           	psect	text27
  5237   0014E8                     __ptext27:
  5238                           	callstack 0
  5239   0014E8                     ___flge:
  5240                           	callstack 24
  5241   0014E8  0E00               	movlw	0
  5242   0014EA  1406               	andwf	___flge@ff1^0,w,c
  5243   0014EC  6E0E               	movwf	??___flge^0,c
  5244   0014EE  0E00               	movlw	0
  5245   0014F0  1407               	andwf	(___flge@ff1+1)^0,w,c
  5246   0014F2  6E0F               	movwf	(??___flge+1)^0,c
  5247   0014F4  0E80               	movlw	128
  5248   0014F6  1408               	andwf	(___flge@ff1+2)^0,w,c
  5249   0014F8  6E10               	movwf	(??___flge+2)^0,c
  5250   0014FA  0E7F               	movlw	127
  5251   0014FC  1409               	andwf	(___flge@ff1+3)^0,w,c
  5252   0014FE  6E11               	movwf	(??___flge+3)^0,c
  5253   001500  500E               	movf	??___flge^0,w,c
  5254   001502  100F               	iorwf	(??___flge+1)^0,w,c
  5255   001504  1010               	iorwf	(??___flge+2)^0,w,c
  5256   001506  1011               	iorwf	(??___flge+3)^0,w,c
  5257   001508  A4D8               	btfss	status,2,c
  5258   00150A  EF89  F00A         	goto	u2841
  5259   00150E  EF8B  F00A         	goto	u2840
  5260   001512                     u2841:
  5261   001512  EF93  F00A         	goto	l3535
  5262   001516                     u2840:
  5263   001516  0E00               	movlw	0
  5264   001518  6E06               	movwf	___flge@ff1^0,c
  5265   00151A  0E00               	movlw	0
  5266   00151C  6E07               	movwf	(___flge@ff1+1)^0,c
  5267   00151E  0E00               	movlw	0
  5268   001520  6E08               	movwf	(___flge@ff1+2)^0,c
  5269   001522  0E00               	movlw	0
  5270   001524  6E09               	movwf	(___flge@ff1+3)^0,c
  5271   001526                     l3535:
  5272   001526  0E00               	movlw	0
  5273   001528  140A               	andwf	___flge@ff2^0,w,c
  5274   00152A  6E0E               	movwf	??___flge^0,c
  5275   00152C  0E00               	movlw	0
  5276   00152E  140B               	andwf	(___flge@ff2+1)^0,w,c
  5277   001530  6E0F               	movwf	(??___flge+1)^0,c
  5278   001532  0E80               	movlw	128
  5279   001534  140C               	andwf	(___flge@ff2+2)^0,w,c
  5280   001536  6E10               	movwf	(??___flge+2)^0,c
  5281   001538  0E7F               	movlw	127
  5282   00153A  140D               	andwf	(___flge@ff2+3)^0,w,c
  5283   00153C  6E11               	movwf	(??___flge+3)^0,c
  5284   00153E  500E               	movf	??___flge^0,w,c
  5285   001540  100F               	iorwf	(??___flge+1)^0,w,c
  5286   001542  1010               	iorwf	(??___flge+2)^0,w,c
  5287   001544  1011               	iorwf	(??___flge+3)^0,w,c
  5288   001546  A4D8               	btfss	status,2,c
  5289   001548  EFA8  F00A         	goto	u2851
  5290   00154C  EFAA  F00A         	goto	u2850
  5291   001550                     u2851:
  5292   001550  EFB2  F00A         	goto	l3539
  5293   001554                     u2850:
  5294   001554  0E00               	movlw	0
  5295   001556  6E0A               	movwf	___flge@ff2^0,c
  5296   001558  0E00               	movlw	0
  5297   00155A  6E0B               	movwf	(___flge@ff2+1)^0,c
  5298   00155C  0E00               	movlw	0
  5299   00155E  6E0C               	movwf	(___flge@ff2+2)^0,c
  5300   001560  0E00               	movlw	0
  5301   001562  6E0D               	movwf	(___flge@ff2+3)^0,c
  5302   001564                     l3539:
  5303   001564  AE09               	btfss	(___flge@ff1+3)^0,7,c
  5304   001566  EFB7  F00A         	goto	u2861
  5305   00156A  EFB9  F00A         	goto	u2860
  5306   00156E                     u2861:
  5307   00156E  EFC2  F00A         	goto	l3543
  5308   001572                     u2860:
  5309   001572  6C06               	negf	___flge@ff1^0,c
  5310   001574  1E07               	comf	(___flge@ff1+1)^0,f,c
  5311   001576  B0D8               	btfsc	status,0,c
  5312   001578  2A07               	incf	(___flge@ff1+1)^0,f,c
  5313   00157A  1E08               	comf	(___flge@ff1+2)^0,f,c
  5314   00157C  B0D8               	btfsc	status,0,c
  5315   00157E  2A08               	incf	(___flge@ff1+2)^0,f,c
  5316   001580  0E80               	movlw	128
  5317   001582  5609               	subfwb	(___flge@ff1+3)^0,f,c
  5318   001584                     l3543:
  5319   001584  AE0D               	btfss	(___flge@ff2+3)^0,7,c
  5320   001586  EFC7  F00A         	goto	u2871
  5321   00158A  EFC9  F00A         	goto	u2870
  5322   00158E                     u2871:
  5323   00158E  EFD2  F00A         	goto	l807
  5324   001592                     u2870:
  5325   001592  6C0A               	negf	___flge@ff2^0,c
  5326   001594  1E0B               	comf	(___flge@ff2+1)^0,f,c
  5327   001596  B0D8               	btfsc	status,0,c
  5328   001598  2A0B               	incf	(___flge@ff2+1)^0,f,c
  5329   00159A  1E0C               	comf	(___flge@ff2+2)^0,f,c
  5330   00159C  B0D8               	btfsc	status,0,c
  5331   00159E  2A0C               	incf	(___flge@ff2+2)^0,f,c
  5332   0015A0  0E80               	movlw	128
  5333   0015A2  560D               	subfwb	(___flge@ff2+3)^0,f,c
  5334   0015A4                     l807:
  5335   0015A4  0E00               	movlw	0
  5336   0015A6  1A06               	xorwf	___flge@ff1^0,f,c
  5337   0015A8  0E00               	movlw	0
  5338   0015AA  1A07               	xorwf	(___flge@ff1+1)^0,f,c
  5339   0015AC  0E00               	movlw	0
  5340   0015AE  1A08               	xorwf	(___flge@ff1+2)^0,f,c
  5341   0015B0  0E80               	movlw	128
  5342   0015B2  1A09               	xorwf	(___flge@ff1+3)^0,f,c
  5343   0015B4  0E00               	movlw	0
  5344   0015B6  1A0A               	xorwf	___flge@ff2^0,f,c
  5345   0015B8  0E00               	movlw	0
  5346   0015BA  1A0B               	xorwf	(___flge@ff2+1)^0,f,c
  5347   0015BC  0E00               	movlw	0
  5348   0015BE  1A0C               	xorwf	(___flge@ff2+2)^0,f,c
  5349   0015C0  0E80               	movlw	128
  5350   0015C2  1A0D               	xorwf	(___flge@ff2+3)^0,f,c
  5351   0015C4  500A               	movf	___flge@ff2^0,w,c
  5352   0015C6  5C06               	subwf	___flge@ff1^0,w,c
  5353   0015C8  500B               	movf	(___flge@ff2+1)^0,w,c
  5354   0015CA  5807               	subwfb	(___flge@ff1+1)^0,w,c
  5355   0015CC  500C               	movf	(___flge@ff2+2)^0,w,c
  5356   0015CE  5808               	subwfb	(___flge@ff1+2)^0,w,c
  5357   0015D0  500D               	movf	(___flge@ff2+3)^0,w,c
  5358   0015D2  5809               	subwfb	(___flge@ff1+3)^0,w,c
  5359   0015D4  B0D8               	btfsc	status,0,c
  5360   0015D6  EFEF  F00A         	goto	u2881
  5361   0015DA  EFF1  F00A         	goto	u2880
  5362   0015DE                     u2881:
  5363   0015DE  EFF4  F00A         	goto	l3549
  5364   0015E2                     u2880:
  5365   0015E2  90D8               	bcf	status,0,c
  5366   0015E4  EFF5  F00A         	goto	l812
  5367   0015E8                     l3549:
  5368   0015E8  80D8               	bsf	status,0,c
  5369   0015EA                     l812:
  5370   0015EA  0012               	return		;funcret
  5371   0015EC                     __end_of___flge:
  5372                           	callstack 0
  5373                           
  5374 ;; *************** function _READcolor *****************
  5375 ;; Defined at:
  5376 ;;		line 91 in file "color.c"
  5377 ;; Parameters:    Size  Location     Type
  5378 ;;  c               2   16[COMRAM] PTR struct colors
  5379 ;;		 -> color(20), 
  5380 ;; Auto vars:     Size  Location     Type
  5381 ;;		None
  5382 ;; Return value:  Size  Location     Type
  5383 ;;                  1    wreg      void 
  5384 ;; Registers used:
  5385 ;;		wreg, status,2, status,0, cstack
  5386 ;; Tracked objects:
  5387 ;;		On entry : 0/0
  5388 ;;		On exit  : 0/0
  5389 ;;		Unchanged: 0/0
  5390 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5391 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5392 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5393 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5394 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5395 ;;Total ram usage:        2 bytes
  5396 ;; Hardware stack levels used: 1
  5397 ;; Hardware stack levels required when called: 8
  5398 ;; This function calls:
  5399 ;;		_color_read_Blue
  5400 ;;		_color_read_Clear
  5401 ;;		_color_read_Green
  5402 ;;		_color_read_Red
  5403 ;; This function is called by:
  5404 ;;		_buggy_color_response
  5405 ;; This function uses a non-reentrant model
  5406 ;;
  5407                           
  5408                           	psect	text28
  5409   001DDE                     __ptext28:
  5410                           	callstack 0
  5411   001DDE                     _READcolor:
  5412                           	callstack 21
  5413   001DDE                     
  5414                           ;color.c: 93:     color.R = color_read_Red();
  5415   001DDE  ECB2  F00D         	call	_color_read_Red	;wreg free
  5416   001DE2  C00A  F044         	movff	?_color_read_Red,_color
  5417   001DE6  C00B  F045         	movff	?_color_read_Red+1,_color+1
  5418                           
  5419                           ;color.c: 94:     color.B = color_read_Blue();
  5420   001DEA  EC2A  F00E         	call	_color_read_Blue	;wreg free
  5421   001DEE  C00A  F046         	movff	?_color_read_Blue,_color+2
  5422   001DF2  C00B  F047         	movff	?_color_read_Blue+1,_color+3
  5423                           
  5424                           ;color.c: 95:     color.G = color_read_Green();
  5425   001DF6  ECDA  F00D         	call	_color_read_Green	;wreg free
  5426   001DFA  C00A  F048         	movff	?_color_read_Green,_color+4
  5427   001DFE  C00B  F049         	movff	?_color_read_Green+1,_color+5
  5428                           
  5429                           ;color.c: 96:     color.C = color_read_Clear();
  5430   001E02  EC02  F00E         	call	_color_read_Clear	;wreg free
  5431   001E06  C00A  F04A         	movff	?_color_read_Clear,_color+6
  5432   001E0A  C00B  F04B         	movff	?_color_read_Clear+1,_color+7
  5433   001E0E  0012               	return		;funcret
  5434   001E10                     __end_of_READcolor:
  5435                           	callstack 0
  5436                           
  5437 ;; *************** function _color_read_Red *****************
  5438 ;; Defined at:
  5439 ;;		line 31 in file "color.c"
  5440 ;; Parameters:    Size  Location     Type
  5441 ;;		None
  5442 ;; Auto vars:     Size  Location     Type
  5443 ;;  tmp             2   14[COMRAM] unsigned int 
  5444 ;; Return value:  Size  Location     Type
  5445 ;;                  2    9[COMRAM] unsigned int 
  5446 ;; Registers used:
  5447 ;;		wreg, status,2, status,0, cstack
  5448 ;; Tracked objects:
  5449 ;;		On entry : 0/0
  5450 ;;		On exit  : 0/0
  5451 ;;		Unchanged: 0/0
  5452 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5453 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5454 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5455 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5456 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5457 ;;Total ram usage:        7 bytes
  5458 ;; Hardware stack levels used: 1
  5459 ;; Hardware stack levels required when called: 7
  5460 ;; This function calls:
  5461 ;;		_I2C_2_Master_Read
  5462 ;;		_I2C_2_Master_RepStart
  5463 ;;		_I2C_2_Master_Start
  5464 ;;		_I2C_2_Master_Stop
  5465 ;;		_I2C_2_Master_Write
  5466 ;; This function is called by:
  5467 ;;		_READcolor
  5468 ;; This function uses a non-reentrant model
  5469 ;;
  5470                           
  5471                           	psect	text29
  5472   001B64                     __ptext29:
  5473                           	callstack 0
  5474   001B64                     _color_read_Red:
  5475                           	callstack 21
  5476   001B64                     
  5477                           ;color.c: 33:  unsigned int tmp;;color.c: 34:  I2C_2_Master_Start();
  5478   001B64  ECEF  F00F         	call	_I2C_2_Master_Start	;wreg free
  5479                           
  5480                           ;color.c: 35:  I2C_2_Master_Write(0x52 | 0x00);
  5481   001B68  0E52               	movlw	82
  5482   001B6A  ECD9  F00F         	call	_I2C_2_Master_Write
  5483                           
  5484                           ;color.c: 37:  I2C_2_Master_Write(0xA0 | 0x16);
  5485   001B6E  0EB6               	movlw	182
  5486   001B70  ECD9  F00F         	call	_I2C_2_Master_Write
  5487                           
  5488                           ;color.c: 38:  I2C_2_Master_RepStart();
  5489   001B74  ECF4  F00F         	call	_I2C_2_Master_RepStart	;wreg free
  5490                           
  5491                           ;color.c: 39:  I2C_2_Master_Write(0x52 | 0x01);
  5492   001B78  0E53               	movlw	83
  5493   001B7A  ECD9  F00F         	call	_I2C_2_Master_Write
  5494                           
  5495                           ;color.c: 40:  tmp=I2C_2_Master_Read(1);
  5496   001B7E  0E01               	movlw	1
  5497   001B80  EC78  F00E         	call	_I2C_2_Master_Read
  5498   001B84  6E0C               	movwf	??_color_read_Red^0,c
  5499   001B86  500C               	movf	??_color_read_Red^0,w,c
  5500   001B88  6E0F               	movwf	color_read_Red@tmp^0,c
  5501   001B8A  6A10               	clrf	(color_read_Red@tmp+1)^0,c
  5502                           
  5503                           ;color.c: 41:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  5504   001B8C  0E00               	movlw	0
  5505   001B8E  EC78  F00E         	call	_I2C_2_Master_Read
  5506   001B92  6E0C               	movwf	??_color_read_Red^0,c
  5507   001B94  500C               	movf	??_color_read_Red^0,w,c
  5508   001B96  6E0E               	movwf	(??_color_read_Red+2)^0,c
  5509   001B98  6A0D               	clrf	(??_color_read_Red+1)^0,c
  5510   001B9A  500F               	movf	color_read_Red@tmp^0,w,c
  5511   001B9C  100D               	iorwf	(??_color_read_Red+1)^0,w,c
  5512   001B9E  6E0F               	movwf	color_read_Red@tmp^0,c
  5513   001BA0  5010               	movf	(color_read_Red@tmp+1)^0,w,c
  5514   001BA2  100E               	iorwf	(??_color_read_Red+2)^0,w,c
  5515   001BA4  6E10               	movwf	(color_read_Red@tmp+1)^0,c
  5516                           
  5517                           ;color.c: 42:  I2C_2_Master_Stop();
  5518   001BA6  ECEA  F00F         	call	_I2C_2_Master_Stop	;wreg free
  5519   001BAA                     
  5520                           ;color.c: 43:  return tmp;
  5521   001BAA  C00F  F00A         	movff	color_read_Red@tmp,?_color_read_Red
  5522   001BAE  C010  F00B         	movff	color_read_Red@tmp+1,?_color_read_Red+1
  5523   001BB2  0012               	return		;funcret
  5524   001BB4                     __end_of_color_read_Red:
  5525                           	callstack 0
  5526                           
  5527 ;; *************** function _color_read_Green *****************
  5528 ;; Defined at:
  5529 ;;		line 61 in file "color.c"
  5530 ;; Parameters:    Size  Location     Type
  5531 ;;		None
  5532 ;; Auto vars:     Size  Location     Type
  5533 ;;  tmp             2   14[COMRAM] unsigned int 
  5534 ;; Return value:  Size  Location     Type
  5535 ;;                  2    9[COMRAM] unsigned int 
  5536 ;; Registers used:
  5537 ;;		wreg, status,2, status,0, cstack
  5538 ;; Tracked objects:
  5539 ;;		On entry : 0/0
  5540 ;;		On exit  : 0/0
  5541 ;;		Unchanged: 0/0
  5542 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5543 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5544 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5545 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5546 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5547 ;;Total ram usage:        7 bytes
  5548 ;; Hardware stack levels used: 1
  5549 ;; Hardware stack levels required when called: 7
  5550 ;; This function calls:
  5551 ;;		_I2C_2_Master_Read
  5552 ;;		_I2C_2_Master_RepStart
  5553 ;;		_I2C_2_Master_Start
  5554 ;;		_I2C_2_Master_Stop
  5555 ;;		_I2C_2_Master_Write
  5556 ;; This function is called by:
  5557 ;;		_READcolor
  5558 ;; This function uses a non-reentrant model
  5559 ;;
  5560                           
  5561                           	psect	text30
  5562   001BB4                     __ptext30:
  5563                           	callstack 0
  5564   001BB4                     _color_read_Green:
  5565                           	callstack 21
  5566   001BB4                     
  5567                           ;color.c: 63:  unsigned int tmp;;color.c: 64:  I2C_2_Master_Start();
  5568   001BB4  ECEF  F00F         	call	_I2C_2_Master_Start	;wreg free
  5569                           
  5570                           ;color.c: 65:  I2C_2_Master_Write(0x52 | 0x00);
  5571   001BB8  0E52               	movlw	82
  5572   001BBA  ECD9  F00F         	call	_I2C_2_Master_Write
  5573                           
  5574                           ;color.c: 67:  I2C_2_Master_Write(0xA0 | 0x18);
  5575   001BBE  0EB8               	movlw	184
  5576   001BC0  ECD9  F00F         	call	_I2C_2_Master_Write
  5577                           
  5578                           ;color.c: 68:  I2C_2_Master_RepStart();
  5579   001BC4  ECF4  F00F         	call	_I2C_2_Master_RepStart	;wreg free
  5580                           
  5581                           ;color.c: 69:  I2C_2_Master_Write(0x52 | 0x01);
  5582   001BC8  0E53               	movlw	83
  5583   001BCA  ECD9  F00F         	call	_I2C_2_Master_Write
  5584                           
  5585                           ;color.c: 70:  tmp=I2C_2_Master_Read(1);
  5586   001BCE  0E01               	movlw	1
  5587   001BD0  EC78  F00E         	call	_I2C_2_Master_Read
  5588   001BD4  6E0C               	movwf	??_color_read_Green^0,c
  5589   001BD6  500C               	movf	??_color_read_Green^0,w,c
  5590   001BD8  6E0F               	movwf	color_read_Green@tmp^0,c
  5591   001BDA  6A10               	clrf	(color_read_Green@tmp+1)^0,c
  5592                           
  5593                           ;color.c: 71:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  5594   001BDC  0E00               	movlw	0
  5595   001BDE  EC78  F00E         	call	_I2C_2_Master_Read
  5596   001BE2  6E0C               	movwf	??_color_read_Green^0,c
  5597   001BE4  500C               	movf	??_color_read_Green^0,w,c
  5598   001BE6  6E0E               	movwf	(??_color_read_Green+2)^0,c
  5599   001BE8  6A0D               	clrf	(??_color_read_Green+1)^0,c
  5600   001BEA  500F               	movf	color_read_Green@tmp^0,w,c
  5601   001BEC  100D               	iorwf	(??_color_read_Green+1)^0,w,c
  5602   001BEE  6E0F               	movwf	color_read_Green@tmp^0,c
  5603   001BF0  5010               	movf	(color_read_Green@tmp+1)^0,w,c
  5604   001BF2  100E               	iorwf	(??_color_read_Green+2)^0,w,c
  5605   001BF4  6E10               	movwf	(color_read_Green@tmp+1)^0,c
  5606                           
  5607                           ;color.c: 72:  I2C_2_Master_Stop();
  5608   001BF6  ECEA  F00F         	call	_I2C_2_Master_Stop	;wreg free
  5609   001BFA                     
  5610                           ;color.c: 73:  return tmp;
  5611   001BFA  C00F  F00A         	movff	color_read_Green@tmp,?_color_read_Green
  5612   001BFE  C010  F00B         	movff	color_read_Green@tmp+1,?_color_read_Green+1
  5613   001C02  0012               	return		;funcret
  5614   001C04                     __end_of_color_read_Green:
  5615                           	callstack 0
  5616                           
  5617 ;; *************** function _color_read_Clear *****************
  5618 ;; Defined at:
  5619 ;;		line 76 in file "color.c"
  5620 ;; Parameters:    Size  Location     Type
  5621 ;;		None
  5622 ;; Auto vars:     Size  Location     Type
  5623 ;;  tmp             2   14[COMRAM] unsigned int 
  5624 ;; Return value:  Size  Location     Type
  5625 ;;                  2    9[COMRAM] unsigned int 
  5626 ;; Registers used:
  5627 ;;		wreg, status,2, status,0, cstack
  5628 ;; Tracked objects:
  5629 ;;		On entry : 0/0
  5630 ;;		On exit  : 0/0
  5631 ;;		Unchanged: 0/0
  5632 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5633 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5634 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5635 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5636 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5637 ;;Total ram usage:        7 bytes
  5638 ;; Hardware stack levels used: 1
  5639 ;; Hardware stack levels required when called: 7
  5640 ;; This function calls:
  5641 ;;		_I2C_2_Master_Read
  5642 ;;		_I2C_2_Master_RepStart
  5643 ;;		_I2C_2_Master_Start
  5644 ;;		_I2C_2_Master_Stop
  5645 ;;		_I2C_2_Master_Write
  5646 ;; This function is called by:
  5647 ;;		_READcolor
  5648 ;; This function uses a non-reentrant model
  5649 ;;
  5650                           
  5651                           	psect	text31
  5652   001C04                     __ptext31:
  5653                           	callstack 0
  5654   001C04                     _color_read_Clear:
  5655                           	callstack 21
  5656   001C04                     
  5657                           ;color.c: 78:  unsigned int tmp;;color.c: 79:  I2C_2_Master_Start();
  5658   001C04  ECEF  F00F         	call	_I2C_2_Master_Start	;wreg free
  5659                           
  5660                           ;color.c: 80:  I2C_2_Master_Write(0x52 | 0x00);
  5661   001C08  0E52               	movlw	82
  5662   001C0A  ECD9  F00F         	call	_I2C_2_Master_Write
  5663                           
  5664                           ;color.c: 82:  I2C_2_Master_Write(0xA0 | 0x14);
  5665   001C0E  0EB4               	movlw	180
  5666   001C10  ECD9  F00F         	call	_I2C_2_Master_Write
  5667                           
  5668                           ;color.c: 83:  I2C_2_Master_RepStart();
  5669   001C14  ECF4  F00F         	call	_I2C_2_Master_RepStart	;wreg free
  5670                           
  5671                           ;color.c: 84:  I2C_2_Master_Write(0x52 | 0x01);
  5672   001C18  0E53               	movlw	83
  5673   001C1A  ECD9  F00F         	call	_I2C_2_Master_Write
  5674                           
  5675                           ;color.c: 85:  tmp=I2C_2_Master_Read(1);
  5676   001C1E  0E01               	movlw	1
  5677   001C20  EC78  F00E         	call	_I2C_2_Master_Read
  5678   001C24  6E0C               	movwf	??_color_read_Clear^0,c
  5679   001C26  500C               	movf	??_color_read_Clear^0,w,c
  5680   001C28  6E0F               	movwf	color_read_Clear@tmp^0,c
  5681   001C2A  6A10               	clrf	(color_read_Clear@tmp+1)^0,c
  5682                           
  5683                           ;color.c: 86:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  5684   001C2C  0E00               	movlw	0
  5685   001C2E  EC78  F00E         	call	_I2C_2_Master_Read
  5686   001C32  6E0C               	movwf	??_color_read_Clear^0,c
  5687   001C34  500C               	movf	??_color_read_Clear^0,w,c
  5688   001C36  6E0E               	movwf	(??_color_read_Clear+2)^0,c
  5689   001C38  6A0D               	clrf	(??_color_read_Clear+1)^0,c
  5690   001C3A  500F               	movf	color_read_Clear@tmp^0,w,c
  5691   001C3C  100D               	iorwf	(??_color_read_Clear+1)^0,w,c
  5692   001C3E  6E0F               	movwf	color_read_Clear@tmp^0,c
  5693   001C40  5010               	movf	(color_read_Clear@tmp+1)^0,w,c
  5694   001C42  100E               	iorwf	(??_color_read_Clear+2)^0,w,c
  5695   001C44  6E10               	movwf	(color_read_Clear@tmp+1)^0,c
  5696                           
  5697                           ;color.c: 87:  I2C_2_Master_Stop();
  5698   001C46  ECEA  F00F         	call	_I2C_2_Master_Stop	;wreg free
  5699   001C4A                     
  5700                           ;color.c: 88:  return tmp;
  5701   001C4A  C00F  F00A         	movff	color_read_Clear@tmp,?_color_read_Clear
  5702   001C4E  C010  F00B         	movff	color_read_Clear@tmp+1,?_color_read_Clear+1
  5703   001C52  0012               	return		;funcret
  5704   001C54                     __end_of_color_read_Clear:
  5705                           	callstack 0
  5706                           
  5707 ;; *************** function _color_read_Blue *****************
  5708 ;; Defined at:
  5709 ;;		line 46 in file "color.c"
  5710 ;; Parameters:    Size  Location     Type
  5711 ;;		None
  5712 ;; Auto vars:     Size  Location     Type
  5713 ;;  tmp             2   14[COMRAM] unsigned int 
  5714 ;; Return value:  Size  Location     Type
  5715 ;;                  2    9[COMRAM] unsigned int 
  5716 ;; Registers used:
  5717 ;;		wreg, status,2, status,0, cstack
  5718 ;; Tracked objects:
  5719 ;;		On entry : 0/0
  5720 ;;		On exit  : 0/0
  5721 ;;		Unchanged: 0/0
  5722 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5723 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5724 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5725 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5726 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5727 ;;Total ram usage:        7 bytes
  5728 ;; Hardware stack levels used: 1
  5729 ;; Hardware stack levels required when called: 7
  5730 ;; This function calls:
  5731 ;;		_I2C_2_Master_Read
  5732 ;;		_I2C_2_Master_RepStart
  5733 ;;		_I2C_2_Master_Start
  5734 ;;		_I2C_2_Master_Stop
  5735 ;;		_I2C_2_Master_Write
  5736 ;; This function is called by:
  5737 ;;		_READcolor
  5738 ;; This function uses a non-reentrant model
  5739 ;;
  5740                           
  5741                           	psect	text32
  5742   001C54                     __ptext32:
  5743                           	callstack 0
  5744   001C54                     _color_read_Blue:
  5745                           	callstack 21
  5746   001C54                     
  5747                           ;color.c: 48:  unsigned int tmp;;color.c: 49:  I2C_2_Master_Start();
  5748   001C54  ECEF  F00F         	call	_I2C_2_Master_Start	;wreg free
  5749                           
  5750                           ;color.c: 50:  I2C_2_Master_Write(0x52 | 0x00);
  5751   001C58  0E52               	movlw	82
  5752   001C5A  ECD9  F00F         	call	_I2C_2_Master_Write
  5753                           
  5754                           ;color.c: 52:  I2C_2_Master_Write(0xA0 | 0x1A);
  5755   001C5E  0EBA               	movlw	186
  5756   001C60  ECD9  F00F         	call	_I2C_2_Master_Write
  5757                           
  5758                           ;color.c: 53:  I2C_2_Master_RepStart();
  5759   001C64  ECF4  F00F         	call	_I2C_2_Master_RepStart	;wreg free
  5760                           
  5761                           ;color.c: 54:  I2C_2_Master_Write(0x52 | 0x01);
  5762   001C68  0E53               	movlw	83
  5763   001C6A  ECD9  F00F         	call	_I2C_2_Master_Write
  5764                           
  5765                           ;color.c: 55:  tmp=I2C_2_Master_Read(1);
  5766   001C6E  0E01               	movlw	1
  5767   001C70  EC78  F00E         	call	_I2C_2_Master_Read
  5768   001C74  6E0C               	movwf	??_color_read_Blue^0,c
  5769   001C76  500C               	movf	??_color_read_Blue^0,w,c
  5770   001C78  6E0F               	movwf	color_read_Blue@tmp^0,c
  5771   001C7A  6A10               	clrf	(color_read_Blue@tmp+1)^0,c
  5772                           
  5773                           ;color.c: 56:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  5774   001C7C  0E00               	movlw	0
  5775   001C7E  EC78  F00E         	call	_I2C_2_Master_Read
  5776   001C82  6E0C               	movwf	??_color_read_Blue^0,c
  5777   001C84  500C               	movf	??_color_read_Blue^0,w,c
  5778   001C86  6E0E               	movwf	(??_color_read_Blue+2)^0,c
  5779   001C88  6A0D               	clrf	(??_color_read_Blue+1)^0,c
  5780   001C8A  500F               	movf	color_read_Blue@tmp^0,w,c
  5781   001C8C  100D               	iorwf	(??_color_read_Blue+1)^0,w,c
  5782   001C8E  6E0F               	movwf	color_read_Blue@tmp^0,c
  5783   001C90  5010               	movf	(color_read_Blue@tmp+1)^0,w,c
  5784   001C92  100E               	iorwf	(??_color_read_Blue+2)^0,w,c
  5785   001C94  6E10               	movwf	(color_read_Blue@tmp+1)^0,c
  5786                           
  5787                           ;color.c: 57:  I2C_2_Master_Stop();
  5788   001C96  ECEA  F00F         	call	_I2C_2_Master_Stop	;wreg free
  5789   001C9A                     
  5790                           ;color.c: 58:  return tmp;
  5791   001C9A  C00F  F00A         	movff	color_read_Blue@tmp,?_color_read_Blue
  5792   001C9E  C010  F00B         	movff	color_read_Blue@tmp+1,?_color_read_Blue+1
  5793   001CA2  0012               	return		;funcret
  5794   001CA4                     __end_of_color_read_Blue:
  5795                           	callstack 0
  5796                           
  5797 ;; *************** function _I2C_2_Master_Write *****************
  5798 ;; Defined at:
  5799 ;;		line 45 in file "i2c.c"
  5800 ;; Parameters:    Size  Location     Type
  5801 ;;  data_byte       1    wreg     unsigned char 
  5802 ;; Auto vars:     Size  Location     Type
  5803 ;;  data_byte       1    6[COMRAM] unsigned char 
  5804 ;; Return value:  Size  Location     Type
  5805 ;;                  1    wreg      void 
  5806 ;; Registers used:
  5807 ;;		wreg, status,2, status,0, cstack
  5808 ;; Tracked objects:
  5809 ;;		On entry : 0/0
  5810 ;;		On exit  : 0/0
  5811 ;;		Unchanged: 0/0
  5812 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5813 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5814 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5815 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5816 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5817 ;;Total ram usage:        1 bytes
  5818 ;; Hardware stack levels used: 1
  5819 ;; Hardware stack levels required when called: 6
  5820 ;; This function calls:
  5821 ;;		_I2C_2_Master_Idle
  5822 ;; This function is called by:
  5823 ;;		_color_writetoaddr
  5824 ;;		_color_read_Red
  5825 ;;		_color_read_Blue
  5826 ;;		_color_read_Green
  5827 ;;		_color_read_Clear
  5828 ;; This function uses a non-reentrant model
  5829 ;;
  5830                           
  5831                           	psect	text33
  5832   001FB2                     __ptext33:
  5833                           	callstack 0
  5834   001FB2                     _I2C_2_Master_Write:
  5835                           	callstack 22
  5836                           
  5837                           ;incstack = 0
  5838                           ;I2C_2_Master_Write@data_byte stored from wreg
  5839   001FB2  6E07               	movwf	I2C_2_Master_Write@data_byte^0,c
  5840   001FB4                     
  5841                           ;i2c.c: 45: void I2C_2_Master_Write(unsigned char data_byte);i2c.c: 46: {;i2c.c: 47:   I
      +                          2C_2_Master_Idle();
  5842   001FB4  EC34  F00F         	call	_I2C_2_Master_Idle	;wreg free
  5843   001FB8                     
  5844                           ;i2c.c: 48:   SSP2BUF = data_byte;
  5845   001FB8  C007  FED5         	movff	I2C_2_Master_Write@data_byte,3797	;volatile
  5846   001FBC  0012               	return		;funcret
  5847   001FBE                     __end_of_I2C_2_Master_Write:
  5848                           	callstack 0
  5849                           
  5850 ;; *************** function _I2C_2_Master_Stop *****************
  5851 ;; Defined at:
  5852 ;;		line 39 in file "i2c.c"
  5853 ;; Parameters:    Size  Location     Type
  5854 ;;		None
  5855 ;; Auto vars:     Size  Location     Type
  5856 ;;		None
  5857 ;; Return value:  Size  Location     Type
  5858 ;;                  1    wreg      void 
  5859 ;; Registers used:
  5860 ;;		wreg, status,2, status,0, cstack
  5861 ;; Tracked objects:
  5862 ;;		On entry : 0/0
  5863 ;;		On exit  : 0/0
  5864 ;;		Unchanged: 0/0
  5865 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5866 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5867 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5868 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5869 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5870 ;;Total ram usage:        0 bytes
  5871 ;; Hardware stack levels used: 1
  5872 ;; Hardware stack levels required when called: 6
  5873 ;; This function calls:
  5874 ;;		_I2C_2_Master_Idle
  5875 ;; This function is called by:
  5876 ;;		_color_writetoaddr
  5877 ;;		_color_read_Red
  5878 ;;		_color_read_Blue
  5879 ;;		_color_read_Green
  5880 ;;		_color_read_Clear
  5881 ;; This function uses a non-reentrant model
  5882 ;;
  5883                           
  5884                           	psect	text34
  5885   001FD4                     __ptext34:
  5886                           	callstack 0
  5887   001FD4                     _I2C_2_Master_Stop:
  5888                           	callstack 22
  5889   001FD4                     
  5890                           ;i2c.c: 41:   I2C_2_Master_Idle();
  5891   001FD4  EC34  F00F         	call	_I2C_2_Master_Idle	;wreg free
  5892   001FD8                     
  5893                           ;i2c.c: 42:   SSP2CON2bits.PEN = 1;
  5894   001FD8  010E               	movlb	14	; () banked
  5895   001FDA  85DA               	bsf	218,2,b	;volatile
  5896   001FDC                     
  5897                           ; BSR set to: 14
  5898   001FDC  0012               	return		;funcret
  5899   001FDE                     __end_of_I2C_2_Master_Stop:
  5900                           	callstack 0
  5901                           
  5902 ;; *************** function _I2C_2_Master_Start *****************
  5903 ;; Defined at:
  5904 ;;		line 27 in file "i2c.c"
  5905 ;; Parameters:    Size  Location     Type
  5906 ;;		None
  5907 ;; Auto vars:     Size  Location     Type
  5908 ;;		None
  5909 ;; Return value:  Size  Location     Type
  5910 ;;                  1    wreg      void 
  5911 ;; Registers used:
  5912 ;;		wreg, status,2, status,0, cstack
  5913 ;; Tracked objects:
  5914 ;;		On entry : 0/0
  5915 ;;		On exit  : 0/0
  5916 ;;		Unchanged: 0/0
  5917 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5918 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5919 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5920 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5921 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5922 ;;Total ram usage:        0 bytes
  5923 ;; Hardware stack levels used: 1
  5924 ;; Hardware stack levels required when called: 6
  5925 ;; This function calls:
  5926 ;;		_I2C_2_Master_Idle
  5927 ;; This function is called by:
  5928 ;;		_color_writetoaddr
  5929 ;;		_color_read_Red
  5930 ;;		_color_read_Blue
  5931 ;;		_color_read_Green
  5932 ;;		_color_read_Clear
  5933 ;; This function uses a non-reentrant model
  5934 ;;
  5935                           
  5936                           	psect	text35
  5937   001FDE                     __ptext35:
  5938                           	callstack 0
  5939   001FDE                     _I2C_2_Master_Start:
  5940                           	callstack 22
  5941   001FDE                     
  5942                           ;i2c.c: 29:   I2C_2_Master_Idle();
  5943   001FDE  EC34  F00F         	call	_I2C_2_Master_Idle	;wreg free
  5944   001FE2                     
  5945                           ;i2c.c: 30:   SSP2CON2bits.SEN = 1;
  5946   001FE2  010E               	movlb	14	; () banked
  5947   001FE4  81DA               	bsf	218,0,b	;volatile
  5948   001FE6                     
  5949                           ; BSR set to: 14
  5950   001FE6  0012               	return		;funcret
  5951   001FE8                     __end_of_I2C_2_Master_Start:
  5952                           	callstack 0
  5953                           
  5954 ;; *************** function _I2C_2_Master_RepStart *****************
  5955 ;; Defined at:
  5956 ;;		line 33 in file "i2c.c"
  5957 ;; Parameters:    Size  Location     Type
  5958 ;;		None
  5959 ;; Auto vars:     Size  Location     Type
  5960 ;;		None
  5961 ;; Return value:  Size  Location     Type
  5962 ;;                  1    wreg      void 
  5963 ;; Registers used:
  5964 ;;		wreg, status,2, status,0, cstack
  5965 ;; Tracked objects:
  5966 ;;		On entry : 0/0
  5967 ;;		On exit  : 0/0
  5968 ;;		Unchanged: 0/0
  5969 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5970 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5971 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5972 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5973 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5974 ;;Total ram usage:        0 bytes
  5975 ;; Hardware stack levels used: 1
  5976 ;; Hardware stack levels required when called: 6
  5977 ;; This function calls:
  5978 ;;		_I2C_2_Master_Idle
  5979 ;; This function is called by:
  5980 ;;		_color_read_Red
  5981 ;;		_color_read_Blue
  5982 ;;		_color_read_Green
  5983 ;;		_color_read_Clear
  5984 ;; This function uses a non-reentrant model
  5985 ;;
  5986                           
  5987                           	psect	text36
  5988   001FE8                     __ptext36:
  5989                           	callstack 0
  5990   001FE8                     _I2C_2_Master_RepStart:
  5991                           	callstack 21
  5992   001FE8                     
  5993                           ;i2c.c: 35:   I2C_2_Master_Idle();
  5994   001FE8  EC34  F00F         	call	_I2C_2_Master_Idle	;wreg free
  5995   001FEC                     
  5996                           ;i2c.c: 36:   SSP2CON2bits.RSEN = 1;
  5997   001FEC  010E               	movlb	14	; () banked
  5998   001FEE  83DA               	bsf	218,1,b	;volatile
  5999   001FF0                     
  6000                           ; BSR set to: 14
  6001   001FF0  0012               	return		;funcret
  6002   001FF2                     __end_of_I2C_2_Master_RepStart:
  6003                           	callstack 0
  6004                           
  6005 ;; *************** function _I2C_2_Master_Read *****************
  6006 ;; Defined at:
  6007 ;;		line 51 in file "i2c.c"
  6008 ;; Parameters:    Size  Location     Type
  6009 ;;  ack             1    wreg     unsigned char 
  6010 ;; Auto vars:     Size  Location     Type
  6011 ;;  ack             1    7[COMRAM] unsigned char 
  6012 ;;  tmp             1    8[COMRAM] unsigned char 
  6013 ;; Return value:  Size  Location     Type
  6014 ;;                  1    wreg      unsigned char 
  6015 ;; Registers used:
  6016 ;;		wreg, status,2, status,0, cstack
  6017 ;; Tracked objects:
  6018 ;;		On entry : 0/0
  6019 ;;		On exit  : 0/0
  6020 ;;		Unchanged: 0/0
  6021 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6022 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6023 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6024 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6025 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6026 ;;Total ram usage:        3 bytes
  6027 ;; Hardware stack levels used: 1
  6028 ;; Hardware stack levels required when called: 6
  6029 ;; This function calls:
  6030 ;;		_I2C_2_Master_Idle
  6031 ;; This function is called by:
  6032 ;;		_color_read_Red
  6033 ;;		_color_read_Blue
  6034 ;;		_color_read_Green
  6035 ;;		_color_read_Clear
  6036 ;; This function uses a non-reentrant model
  6037 ;;
  6038                           
  6039                           	psect	text37
  6040   001CF0                     __ptext37:
  6041                           	callstack 0
  6042   001CF0                     _I2C_2_Master_Read:
  6043                           	callstack 21
  6044                           
  6045                           ; BSR set to: 14
  6046                           ;incstack = 0
  6047                           ;I2C_2_Master_Read@ack stored from wreg
  6048   001CF0  6E08               	movwf	I2C_2_Master_Read@ack^0,c
  6049   001CF2                     
  6050                           ;i2c.c: 51: unsigned char I2C_2_Master_Read(unsigned char ack);i2c.c: 52: {;i2c.c: 53:  
      +                           unsigned char tmp;;i2c.c: 54:   I2C_2_Master_Idle();
  6051   001CF2  EC34  F00F         	call	_I2C_2_Master_Idle	;wreg free
  6052   001CF6                     
  6053                           ;i2c.c: 55:   SSP2CON2bits.RCEN = 1;
  6054   001CF6  010E               	movlb	14	; () banked
  6055   001CF8  87DA               	bsf	218,3,b	;volatile
  6056                           
  6057                           ;i2c.c: 56:   I2C_2_Master_Idle();
  6058   001CFA  EC34  F00F         	call	_I2C_2_Master_Idle	;wreg free
  6059   001CFE                     
  6060                           ;i2c.c: 57:   tmp = SSP2BUF;
  6061   001CFE  CED5 F009          	movff	3797,I2C_2_Master_Read@tmp	;volatile
  6062                           
  6063                           ;i2c.c: 58:   I2C_2_Master_Idle();
  6064   001D02  EC34  F00F         	call	_I2C_2_Master_Idle	;wreg free
  6065   001D06                     
  6066                           ;i2c.c: 59:   SSP2CON2bits.ACKDT = !ack;
  6067   001D06  5008               	movf	I2C_2_Master_Read@ack^0,w,c
  6068   001D08  B4D8               	btfsc	status,2,c
  6069   001D0A  EF89  F00E         	goto	u2241
  6070   001D0E  EF8D  F00E         	goto	u2240
  6071   001D12                     u2241:
  6072   001D12  6A07               	clrf	??_I2C_2_Master_Read^0,c
  6073   001D14  2A07               	incf	??_I2C_2_Master_Read^0,f,c
  6074   001D16  EF8E  F00E         	goto	u2258
  6075   001D1A                     u2240:
  6076   001D1A  6A07               	clrf	??_I2C_2_Master_Read^0,c
  6077   001D1C                     u2258:
  6078   001D1C  3A07               	swapf	??_I2C_2_Master_Read^0,f,c
  6079   001D1E  4607               	rlncf	??_I2C_2_Master_Read^0,f,c
  6080   001D20  010E               	movlb	14	; () banked
  6081   001D22  51DA               	movf	218,w,b	;volatile
  6082   001D24  1807               	xorwf	??_I2C_2_Master_Read^0,w,c
  6083   001D26  0BDF               	andlw	-33
  6084   001D28  1807               	xorwf	??_I2C_2_Master_Read^0,w,c
  6085   001D2A  6FDA               	movwf	218,b	;volatile
  6086   001D2C                     
  6087                           ; BSR set to: 14
  6088                           ;i2c.c: 60:   SSP2CON2bits.ACKEN = 1;
  6089   001D2C  89DA               	bsf	218,4,b	;volatile
  6090   001D2E                     
  6091                           ; BSR set to: 14
  6092                           ;i2c.c: 61:   return tmp;
  6093   001D2E  5009               	movf	I2C_2_Master_Read@tmp^0,w,c
  6094   001D30                     
  6095                           ; BSR set to: 14
  6096   001D30  0012               	return		;funcret
  6097   001D32                     __end_of_I2C_2_Master_Read:
  6098                           	callstack 0
  6099                           
  6100 ;; *************** function _I2C_2_Master_Idle *****************
  6101 ;; Defined at:
  6102 ;;		line 22 in file "i2c.c"
  6103 ;; Parameters:    Size  Location     Type
  6104 ;;		None
  6105 ;; Auto vars:     Size  Location     Type
  6106 ;;		None
  6107 ;; Return value:  Size  Location     Type
  6108 ;;                  1    wreg      void 
  6109 ;; Registers used:
  6110 ;;		wreg, status,2, status,0
  6111 ;; Tracked objects:
  6112 ;;		On entry : 0/0
  6113 ;;		On exit  : 0/0
  6114 ;;		Unchanged: 0/0
  6115 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6116 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6117 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6118 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6119 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6120 ;;Total ram usage:        1 bytes
  6121 ;; Hardware stack levels used: 1
  6122 ;; Hardware stack levels required when called: 5
  6123 ;; This function calls:
  6124 ;;		Nothing
  6125 ;; This function is called by:
  6126 ;;		_I2C_2_Master_Start
  6127 ;;		_I2C_2_Master_RepStart
  6128 ;;		_I2C_2_Master_Stop
  6129 ;;		_I2C_2_Master_Write
  6130 ;;		_I2C_2_Master_Read
  6131 ;; This function uses a non-reentrant model
  6132 ;;
  6133                           
  6134                           	psect	text38
  6135   001E68                     __ptext38:
  6136                           	callstack 0
  6137   001E68                     _I2C_2_Master_Idle:
  6138                           	callstack 22
  6139   001E68                     l30:
  6140   001E68  010E               	movlb	14	; () banked
  6141   001E6A  B5D8               	btfsc	216,2,b	;volatile
  6142   001E6C  EF3A  F00F         	goto	u2211
  6143   001E70  EF3C  F00F         	goto	u2210
  6144   001E74                     u2211:
  6145   001E74  EF34  F00F         	goto	l30
  6146   001E78                     u2210:
  6147   001E78                     
  6148                           ; BSR set to: 14
  6149   001E78  CEDA F006          	movff	3802,??_I2C_2_Master_Idle	;volatile
  6150   001E7C  0E1F               	movlw	31
  6151   001E7E  1606               	andwf	??_I2C_2_Master_Idle^0,f,c
  6152   001E80  A4D8               	btfss	status,2,c
  6153   001E82  EF45  F00F         	goto	u2221
  6154   001E86  EF47  F00F         	goto	u2220
  6155   001E8A                     u2221:
  6156   001E8A  EF34  F00F         	goto	l30
  6157   001E8E                     u2220:
  6158   001E8E                     
  6159                           ; BSR set to: 14
  6160   001E8E  0012               	return		;funcret
  6161   001E90                     __end_of_I2C_2_Master_Idle:
  6162                           	callstack 0
  6163                           
  6164 ;; *************** function _buggyLEDs_init *****************
  6165 ;; Defined at:
  6166 ;;		line 113 in file "dc_motor.c"
  6167 ;; Parameters:    Size  Location     Type
  6168 ;;		None
  6169 ;; Auto vars:     Size  Location     Type
  6170 ;;		None
  6171 ;; Return value:  Size  Location     Type
  6172 ;;                  1    wreg      void 
  6173 ;; Registers used:
  6174 ;;		None
  6175 ;; Tracked objects:
  6176 ;;		On entry : 0/0
  6177 ;;		On exit  : 0/0
  6178 ;;		Unchanged: 0/0
  6179 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6180 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6181 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6182 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6183 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6184 ;;Total ram usage:        0 bytes
  6185 ;; Hardware stack levels used: 1
  6186 ;; Hardware stack levels required when called: 5
  6187 ;; This function calls:
  6188 ;;		Nothing
  6189 ;; This function is called by:
  6190 ;;		_main
  6191 ;; This function uses a non-reentrant model
  6192 ;;
  6193                           
  6194                           	psect	text39
  6195   001F86                     __ptext39:
  6196                           	callstack 0
  6197   001F86                     _buggyLEDs_init:
  6198                           	callstack 25
  6199   001F86                     
  6200                           ;dc_motor.c: 114:     LATHbits.LATH1 = 0;
  6201   001F86  9280               	bcf	128,1,c	;volatile
  6202                           
  6203                           ;dc_motor.c: 115:     LATDbits.LATD3 = 0;
  6204   001F88  967C               	bcf	124,3,c	;volatile
  6205                           
  6206                           ;dc_motor.c: 116:     LATDbits.LATD4 = 0;
  6207   001F8A  987C               	bcf	124,4,c	;volatile
  6208                           
  6209                           ;dc_motor.c: 117:     LATFbits.LATF0 = 0;
  6210   001F8C  907E               	bcf	126,0,c	;volatile
  6211                           
  6212                           ;dc_motor.c: 118:     LATHbits.LATH0 = 0;
  6213   001F8E  9080               	bcf	128,0,c	;volatile
  6214                           
  6215                           ;dc_motor.c: 120:     TRISHbits.TRISH1 = 0;
  6216   001F90  9288               	bcf	136,1,c	;volatile
  6217                           
  6218                           ;dc_motor.c: 121:     TRISDbits.TRISD3 = 0;
  6219   001F92  9684               	bcf	132,3,c	;volatile
  6220                           
  6221                           ;dc_motor.c: 122:     TRISDbits.TRISD4 = 0;
  6222   001F94  9884               	bcf	132,4,c	;volatile
  6223                           
  6224                           ;dc_motor.c: 123:     TRISFbits.TRISF0 = 0;
  6225   001F96  9086               	bcf	134,0,c	;volatile
  6226                           
  6227                           ;dc_motor.c: 124:     TRISHbits.TRISH0 = 0;
  6228   001F98  9088               	bcf	136,0,c	;volatile
  6229   001F9A  0012               	return		;funcret
  6230   001F9C                     __end_of_buggyLEDs_init:
  6231                           	callstack 0
  6232                           
  6233 ;; *************** function _Timer0_init *****************
  6234 ;; Defined at:
  6235 ;;		line 7 in file "timers.c"
  6236 ;; Parameters:    Size  Location     Type
  6237 ;;		None
  6238 ;; Auto vars:     Size  Location     Type
  6239 ;;		None
  6240 ;; Return value:  Size  Location     Type
  6241 ;;                  1    wreg      void 
  6242 ;; Registers used:
  6243 ;;		wreg, status,2
  6244 ;; Tracked objects:
  6245 ;;		On entry : 0/0
  6246 ;;		On exit  : 0/0
  6247 ;;		Unchanged: 0/0
  6248 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6249 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6250 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6251 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6252 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6253 ;;Total ram usage:        0 bytes
  6254 ;; Hardware stack levels used: 1
  6255 ;; Hardware stack levels required when called: 5
  6256 ;; This function calls:
  6257 ;;		Nothing
  6258 ;; This function is called by:
  6259 ;;		_main
  6260 ;; This function uses a non-reentrant model
  6261 ;;
  6262                           
  6263                           	psect	text40
  6264   001F66                     __ptext40:
  6265                           	callstack 0
  6266   001F66                     _Timer0_init:
  6267                           	callstack 25
  6268   001F66                     
  6269                           ;timers.c: 9:     T0CON1bits.T0CS=0b010;
  6270   001F66  50D6               	movf	214,w,c	;volatile
  6271   001F68  0B1F               	andlw	-225
  6272   001F6A  0940               	iorlw	64
  6273   001F6C  6ED6               	movwf	214,c	;volatile
  6274   001F6E                     
  6275                           ;timers.c: 10:     T0CON1bits.T0ASYNC=1;
  6276   001F6E  88D6               	bsf	214,4,c	;volatile
  6277                           
  6278                           ;timers.c: 11:     T0CON1bits.T0CKPS=0b1110;
  6279   001F70  50D6               	movf	214,w,c	;volatile
  6280   001F72  0BF0               	andlw	-16
  6281   001F74  090E               	iorlw	14
  6282   001F76  6ED6               	movwf	214,c	;volatile
  6283   001F78                     
  6284                           ;timers.c: 12:     T0CON0bits.T016BIT=1;
  6285   001F78  88D5               	bsf	213,4,c	;volatile
  6286                           
  6287                           ;timers.c: 14:     TMR0H=0;
  6288   001F7A  0E00               	movlw	0
  6289   001F7C  6ED4               	movwf	212,c	;volatile
  6290                           
  6291                           ;timers.c: 15:     TMR0L=0;
  6292   001F7E  0E00               	movlw	0
  6293   001F80  6ED3               	movwf	211,c	;volatile
  6294   001F82                     
  6295                           ;timers.c: 17:     T0CON0bits.T0EN=1;
  6296   001F82  8ED5               	bsf	213,7,c	;volatile
  6297   001F84  0012               	return		;funcret
  6298   001F86                     __end_of_Timer0_init:
  6299                           	callstack 0
  6300                           
  6301 ;; *************** function _LowISR *****************
  6302 ;; Defined at:
  6303 ;;		line 58 in file "interrupts.c"
  6304 ;; Parameters:    Size  Location     Type
  6305 ;;		None
  6306 ;; Auto vars:     Size  Location     Type
  6307 ;;		None
  6308 ;; Return value:  Size  Location     Type
  6309 ;;                  1    wreg      void 
  6310 ;; Registers used:
  6311 ;;		wreg, status,2
  6312 ;; Tracked objects:
  6313 ;;		On entry : 0/0
  6314 ;;		On exit  : 0/0
  6315 ;;		Unchanged: 0/0
  6316 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6317 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6318 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6319 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6320 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6321 ;;Total ram usage:        3 bytes
  6322 ;; Hardware stack levels used: 1
  6323 ;; Hardware stack levels required when called: 4
  6324 ;; This function calls:
  6325 ;;		Nothing
  6326 ;; This function is called by:
  6327 ;;		Interrupt level 1
  6328 ;; This function uses a non-reentrant model
  6329 ;;
  6330                           
  6331                           	psect	intcodelo
  6332   000018                     __pintcodelo:
  6333                           	callstack 0
  6334   000018                     _LowISR:
  6335                           	callstack 19
  6336                           
  6337                           ;incstack = 0
  6338   000018  805A               	bsf	int$flags,0,c	;set compiler interrupt flag (level 1)
  6339   00001A  CFD8 F003          	movff	status,??_LowISR
  6340   00001E  CFE8 F004          	movff	wreg,??_LowISR+1
  6341   000022  CFE0 F005          	movff	bsr,??_LowISR+2
  6342   000026                     
  6343                           ;interrupts.c: 60:     if (PIR0bits.TMR0IF) {
  6344   000026  010E               	movlb	14	; () banked
  6345   000028  AB33               	btfss	51,5,b	;volatile
  6346   00002A  EF19  F000         	goto	i1u111_21
  6347   00002E  EF1B  F000         	goto	i1u111_20
  6348   000032                     i1u111_21:
  6349   000032  EF22  F000         	goto	i1l516
  6350   000036                     i1u111_20:
  6351   000036                     
  6352                           ; BSR set to: 14
  6353                           ;interrupts.c: 61:         T_flag = 1;
  6354   000036  0E01               	movlw	1
  6355   000038  6E3F               	movwf	_T_flag^0,c
  6356                           
  6357                           ;interrupts.c: 62:         TMR0H=0;
  6358   00003A  0E00               	movlw	0
  6359   00003C  6ED4               	movwf	212,c	;volatile
  6360                           
  6361                           ;interrupts.c: 63:         TMR0L=0;
  6362   00003E  0E00               	movlw	0
  6363   000040  6ED3               	movwf	211,c	;volatile
  6364   000042                     
  6365                           ; BSR set to: 14
  6366                           ;interrupts.c: 64:         PIR0bits.TMR0IF = 0;
  6367   000042  9B33               	bcf	51,5,b	;volatile
  6368   000044                     i1l516:
  6369                           
  6370                           ; BSR set to: 14
  6371   000044  C005  FFE0         	movff	??_LowISR+2,bsr
  6372   000048  C004  FFE8         	movff	??_LowISR+1,wreg
  6373   00004C  C003  FFD8         	movff	??_LowISR,status
  6374   000050  905A               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  6375   000052  0010               	retfie	
  6376   000054                     __end_of_LowISR:
  6377                           	callstack 0
  6378                           
  6379 ;; *************** function _HighISR *****************
  6380 ;; Defined at:
  6381 ;;		line 49 in file "interrupts.c"
  6382 ;; Parameters:    Size  Location     Type
  6383 ;;		None
  6384 ;; Auto vars:     Size  Location     Type
  6385 ;;		None
  6386 ;; Return value:  Size  Location     Type
  6387 ;;                  1    wreg      void 
  6388 ;; Registers used:
  6389 ;;		wreg, status,2, status,0, cstack
  6390 ;; Tracked objects:
  6391 ;;		On entry : 0/0
  6392 ;;		On exit  : 0/0
  6393 ;;		Unchanged: 0/0
  6394 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6395 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6396 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6397 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6398 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6399 ;;Total ram usage:        0 bytes
  6400 ;; Hardware stack levels used: 1
  6401 ;; Hardware stack levels required when called: 3
  6402 ;; This function calls:
  6403 ;;		_interrupts_clear
  6404 ;; This function is called by:
  6405 ;;		Interrupt level 2
  6406 ;; This function uses a non-reentrant model
  6407 ;;
  6408                           
  6409                           	psect	intcode
  6410   000008                     __pintcode:
  6411                           	callstack 0
  6412   000008                     _HighISR:
  6413                           	callstack 19
  6414                           
  6415                           ; BSR set to: 14
  6416                           ;incstack = 0
  6417   000008  825A               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  6418   00000A  EF6F  F00F         	goto	int_func
  6419                           
  6420                           	psect	intcode_body
  6421   001EDE                     __pintcode_body:
  6422                           	callstack 19
  6423   001EDE                     int_func:
  6424                           	callstack 19
  6425   001EDE                     
  6426                           ;interrupts.c: 50:    if (PIR0bits.INT0IF) {
  6427   001EDE  010E               	movlb	14	; () banked
  6428   001EE0  A133               	btfss	51,0,b	;volatile
  6429   001EE2  EF75  F00F         	goto	i2u215_41
  6430   001EE6  EF77  F00F         	goto	i2u215_40
  6431   001EEA                     i2u215_41:
  6432   001EEA  EF80  F00F         	goto	i2l508
  6433   001EEE                     i2u215_40:
  6434   001EEE                     
  6435                           ; BSR set to: 14
  6436                           ;interrupts.c: 51:        Int_flag = 1;
  6437   001EEE  0E00               	movlw	0
  6438   001EF0  0100               	movlb	0	; () banked
  6439   001EF2  6F9F               	movwf	(_Int_flag+1)& (0+255),b
  6440   001EF4  0E01               	movlw	1
  6441   001EF6  6F9E               	movwf	_Int_flag& (0+255),b
  6442   001EF8                     
  6443                           ; BSR set to: 0
  6444                           ;interrupts.c: 52:        interrupts_clear();
  6445   001EF8  ECCE  F00F         	call	_interrupts_clear	;wreg free
  6446   001EFC                     
  6447                           ;interrupts.c: 53:        PIR0bits.INT0IF = 0;
  6448   001EFC  010E               	movlb	14	; () banked
  6449   001EFE  9133               	bcf	51,0,b	;volatile
  6450   001F00                     i2l508:
  6451                           
  6452                           ; BSR set to: 14
  6453   001F00  925A               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  6454   001F02  0011               	retfie		f
  6455   001F04                     __end_of_HighISR:
  6456                           	callstack 0
  6457                           
  6458 ;; *************** function _interrupts_clear *****************
  6459 ;; Defined at:
  6460 ;;		line 42 in file "interrupts.c"
  6461 ;; Parameters:    Size  Location     Type
  6462 ;;		None
  6463 ;; Auto vars:     Size  Location     Type
  6464 ;;		None
  6465 ;; Return value:  Size  Location     Type
  6466 ;;                  1    wreg      void 
  6467 ;; Registers used:
  6468 ;;		wreg, status,2, status,0, cstack
  6469 ;; Tracked objects:
  6470 ;;		On entry : 0/0
  6471 ;;		On exit  : 0/0
  6472 ;;		Unchanged: 0/0
  6473 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6474 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6475 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6476 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6477 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6478 ;;Total ram usage:        0 bytes
  6479 ;; Hardware stack levels used: 1
  6480 ;; Hardware stack levels required when called: 2
  6481 ;; This function calls:
  6482 ;;		i2_I2C_2_Master_Start
  6483 ;;		i2_I2C_2_Master_Stop
  6484 ;;		i2_I2C_2_Master_Write
  6485 ;; This function is called by:
  6486 ;;		_HighISR
  6487 ;; This function uses a non-reentrant model
  6488 ;;
  6489                           
  6490                           	psect	text43
  6491   001F9C                     __ptext43:
  6492                           	callstack 0
  6493   001F9C                     _interrupts_clear:
  6494                           	callstack 19
  6495   001F9C                     
  6496                           ;interrupts.c: 43:     I2C_2_Master_Start();
  6497   001F9C  ECFE  F00F         	call	i2_I2C_2_Master_Start	;wreg free
  6498                           
  6499                           ;interrupts.c: 44:     I2C_2_Master_Write(0x52 | 0x00);
  6500   001FA0  0E52               	movlw	82
  6501   001FA2  ECDF  F00F         	call	i2_I2C_2_Master_Write
  6502                           
  6503                           ;interrupts.c: 45:     I2C_2_Master_Write(0b11100110);
  6504   001FA6  0EE6               	movlw	230
  6505   001FA8  ECDF  F00F         	call	i2_I2C_2_Master_Write
  6506                           
  6507                           ;interrupts.c: 46:     I2C_2_Master_Stop();
  6508   001FAC  ECF9  F00F         	call	i2_I2C_2_Master_Stop	;wreg free
  6509   001FB0  0012               	return		;funcret
  6510   001FB2                     __end_of_interrupts_clear:
  6511                           	callstack 0
  6512                           
  6513 ;; *************** function i2_I2C_2_Master_Write *****************
  6514 ;; Defined at:
  6515 ;;		line 45 in file "i2c.c"
  6516 ;; Parameters:    Size  Location     Type
  6517 ;;  data_byte       1    wreg     unsigned char 
  6518 ;; Auto vars:     Size  Location     Type
  6519 ;;  data_byte       1    1[COMRAM] unsigned char 
  6520 ;; Return value:  Size  Location     Type
  6521 ;;                  1    wreg      void 
  6522 ;; Registers used:
  6523 ;;		wreg, status,2, status,0, cstack
  6524 ;; Tracked objects:
  6525 ;;		On entry : 0/0
  6526 ;;		On exit  : 0/0
  6527 ;;		Unchanged: 0/0
  6528 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6529 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6530 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6531 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6532 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6533 ;;Total ram usage:        1 bytes
  6534 ;; Hardware stack levels used: 1
  6535 ;; Hardware stack levels required when called: 1
  6536 ;; This function calls:
  6537 ;;		i2_I2C_2_Master_Idle
  6538 ;; This function is called by:
  6539 ;;		_interrupts_clear
  6540 ;; This function uses a non-reentrant model
  6541 ;;
  6542                           
  6543                           	psect	text44
  6544   001FBE                     __ptext44:
  6545                           	callstack 0
  6546   001FBE                     i2_I2C_2_Master_Write:
  6547                           	callstack 19
  6548                           
  6549                           ;incstack = 0
  6550                           ;i2I2C_2_Master_Write@data_byte stored from wreg
  6551   001FBE  6E02               	movwf	i2I2C_2_Master_Write@data_byte^0,c
  6552   001FC0                     
  6553                           ;i2c.c: 45: void I2C_2_Master_Write(unsigned char data_byte);i2c.c: 46: {;i2c.c: 47:   I
      +                          2C_2_Master_Idle();
  6554   001FC0  EC48  F00F         	call	i2_I2C_2_Master_Idle	;wreg free
  6555   001FC4                     
  6556                           ;i2c.c: 48:   SSP2BUF = data_byte;
  6557   001FC4  C002  FED5         	movff	i2I2C_2_Master_Write@data_byte,3797	;volatile
  6558   001FC8  0012               	return		;funcret
  6559   001FCA                     __end_ofi2_I2C_2_Master_Write:
  6560                           	callstack 0
  6561                           
  6562 ;; *************** function i2_I2C_2_Master_Stop *****************
  6563 ;; Defined at:
  6564 ;;		line 39 in file "i2c.c"
  6565 ;; Parameters:    Size  Location     Type
  6566 ;;		None
  6567 ;; Auto vars:     Size  Location     Type
  6568 ;;		None
  6569 ;; Return value:  Size  Location     Type
  6570 ;;                  1    wreg      void 
  6571 ;; Registers used:
  6572 ;;		wreg, status,2, status,0, cstack
  6573 ;; Tracked objects:
  6574 ;;		On entry : 0/0
  6575 ;;		On exit  : 0/0
  6576 ;;		Unchanged: 0/0
  6577 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6578 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6579 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6580 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6581 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6582 ;;Total ram usage:        0 bytes
  6583 ;; Hardware stack levels used: 1
  6584 ;; Hardware stack levels required when called: 1
  6585 ;; This function calls:
  6586 ;;		i2_I2C_2_Master_Idle
  6587 ;; This function is called by:
  6588 ;;		_interrupts_clear
  6589 ;; This function uses a non-reentrant model
  6590 ;;
  6591                           
  6592                           	psect	text45
  6593   001FF2                     __ptext45:
  6594                           	callstack 0
  6595   001FF2                     i2_I2C_2_Master_Stop:
  6596                           	callstack 19
  6597   001FF2                     
  6598                           ;i2c.c: 41:   I2C_2_Master_Idle();
  6599   001FF2  EC48  F00F         	call	i2_I2C_2_Master_Idle	;wreg free
  6600   001FF6                     
  6601                           ;i2c.c: 42:   SSP2CON2bits.PEN = 1;
  6602   001FF6  010E               	movlb	14	; () banked
  6603   001FF8  85DA               	bsf	218,2,b	;volatile
  6604   001FFA                     
  6605                           ; BSR set to: 14
  6606   001FFA  0012               	return		;funcret
  6607   001FFC                     __end_ofi2_I2C_2_Master_Stop:
  6608                           	callstack 0
  6609                           
  6610 ;; *************** function i2_I2C_2_Master_Start *****************
  6611 ;; Defined at:
  6612 ;;		line 27 in file "i2c.c"
  6613 ;; Parameters:    Size  Location     Type
  6614 ;;		None
  6615 ;; Auto vars:     Size  Location     Type
  6616 ;;		None
  6617 ;; Return value:  Size  Location     Type
  6618 ;;                  1    wreg      void 
  6619 ;; Registers used:
  6620 ;;		wreg, status,2, status,0, cstack
  6621 ;; Tracked objects:
  6622 ;;		On entry : 0/0
  6623 ;;		On exit  : 0/0
  6624 ;;		Unchanged: 0/0
  6625 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6626 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6627 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6628 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6629 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6630 ;;Total ram usage:        0 bytes
  6631 ;; Hardware stack levels used: 1
  6632 ;; Hardware stack levels required when called: 1
  6633 ;; This function calls:
  6634 ;;		i2_I2C_2_Master_Idle
  6635 ;; This function is called by:
  6636 ;;		_interrupts_clear
  6637 ;; This function uses a non-reentrant model
  6638 ;;
  6639                           
  6640                           	psect	text46
  6641   001FFC                     __ptext46:
  6642                           	callstack 0
  6643   001FFC                     i2_I2C_2_Master_Start:
  6644                           	callstack 19
  6645   001FFC                     
  6646                           ;i2c.c: 29:   I2C_2_Master_Idle();
  6647   001FFC  EC48  F00F         	call	i2_I2C_2_Master_Idle	;wreg free
  6648   002000                     
  6649                           ;i2c.c: 30:   SSP2CON2bits.SEN = 1;
  6650   002000  010E               	movlb	14	; () banked
  6651   002002  81DA               	bsf	218,0,b	;volatile
  6652   002004                     
  6653                           ; BSR set to: 14
  6654   002004  0012               	return		;funcret
  6655   002006                     __end_ofi2_I2C_2_Master_Start:
  6656                           	callstack 0
  6657                           
  6658 ;; *************** function i2_I2C_2_Master_Idle *****************
  6659 ;; Defined at:
  6660 ;;		line 22 in file "i2c.c"
  6661 ;; Parameters:    Size  Location     Type
  6662 ;;		None
  6663 ;; Auto vars:     Size  Location     Type
  6664 ;;		None
  6665 ;; Return value:  Size  Location     Type
  6666 ;;                  1    wreg      void 
  6667 ;; Registers used:
  6668 ;;		wreg, status,2, status,0
  6669 ;; Tracked objects:
  6670 ;;		On entry : 0/0
  6671 ;;		On exit  : 0/0
  6672 ;;		Unchanged: 0/0
  6673 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6674 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6675 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6676 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6677 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6678 ;;Total ram usage:        1 bytes
  6679 ;; Hardware stack levels used: 1
  6680 ;; This function calls:
  6681 ;;		Nothing
  6682 ;; This function is called by:
  6683 ;;		i2_I2C_2_Master_Start
  6684 ;;		i2_I2C_2_Master_Stop
  6685 ;;		i2_I2C_2_Master_Write
  6686 ;; This function uses a non-reentrant model
  6687 ;;
  6688                           
  6689                           	psect	text47
  6690   001E90                     __ptext47:
  6691                           	callstack 0
  6692   001E90                     i2_I2C_2_Master_Idle:
  6693                           	callstack 19
  6694   001E90                     i2l30:
  6695   001E90  010E               	movlb	14	; () banked
  6696   001E92  B5D8               	btfsc	216,2,b	;volatile
  6697   001E94  EF4E  F00F         	goto	i2u169_41
  6698   001E98  EF50  F00F         	goto	i2u169_40
  6699   001E9C                     i2u169_41:
  6700   001E9C  EF48  F00F         	goto	i2l30
  6701   001EA0                     i2u169_40:
  6702   001EA0                     
  6703                           ; BSR set to: 14
  6704   001EA0  CEDA F001          	movff	3802,??i2_I2C_2_Master_Idle	;volatile
  6705   001EA4  0E1F               	movlw	31
  6706   001EA6  1601               	andwf	??i2_I2C_2_Master_Idle^0,f,c
  6707   001EA8  A4D8               	btfss	status,2,c
  6708   001EAA  EF59  F00F         	goto	i2u170_41
  6709   001EAE  EF5B  F00F         	goto	i2u170_40
  6710   001EB2                     i2u170_41:
  6711   001EB2  EF48  F00F         	goto	i2l30
  6712   001EB6                     i2u170_40:
  6713   001EB6                     
  6714                           ; BSR set to: 14
  6715   001EB6  0012               	return		;funcret
  6716   001EB8                     __end_ofi2_I2C_2_Master_Idle:
  6717                           	callstack 0
  6718   000000                     
  6719                           	psect	rparam
  6720   000000                     
  6721                           	psect	temp
  6722   00005A                     btemp:
  6723                           	callstack 0
  6724   00005A                     	ds	1
  6725   000000                     int$flags	set	btemp
  6726   000000                     wtemp8	set	btemp+1
  6727   000000                     ttemp5	set	btemp+1
  6728   000000                     ttemp6	set	btemp+4
  6729   000000                     ttemp7	set	btemp+8
  6730                           
  6731                           	psect	idloc
  6732                           
  6733                           ;Config register IDLOC0 @ 0x200000
  6734                           ;	unspecified, using default values
  6735   200000                     	org	2097152
  6736   200000  0FFF               	dw	4095
  6737                           
  6738                           ;Config register IDLOC1 @ 0x200002
  6739                           ;	unspecified, using default values
  6740   200002                     	org	2097154
  6741   200002  0FFF               	dw	4095
  6742                           
  6743                           ;Config register IDLOC2 @ 0x200004
  6744                           ;	unspecified, using default values
  6745   200004                     	org	2097156
  6746   200004  0FFF               	dw	4095
  6747                           
  6748                           ;Config register IDLOC3 @ 0x200006
  6749                           ;	unspecified, using default values
  6750   200006                     	org	2097158
  6751   200006  0FFF               	dw	4095
  6752                           
  6753                           ;Config register IDLOC4 @ 0x200008
  6754                           ;	unspecified, using default values
  6755   200008                     	org	2097160
  6756   200008  0FFF               	dw	4095
  6757                           
  6758                           ;Config register IDLOC5 @ 0x20000A
  6759                           ;	unspecified, using default values
  6760   20000A                     	org	2097162
  6761   20000A  0FFF               	dw	4095
  6762                           
  6763                           ;Config register IDLOC6 @ 0x20000C
  6764                           ;	unspecified, using default values
  6765   20000C                     	org	2097164
  6766   20000C  0FFF               	dw	4095
  6767                           
  6768                           ;Config register IDLOC7 @ 0x20000E
  6769                           ;	unspecified, using default values
  6770   20000E                     	org	2097166
  6771   20000E  0FFF               	dw	4095
  6772                           
  6773                           	psect	config
  6774                           
  6775                           ;Config register CONFIG1L @ 0x300000
  6776                           ;	External Oscillator mode Selection bits
  6777                           ;	FEXTOSC = HS, HS (crystal oscillator) above 8 MHz; PFM set to high power
  6778                           ;	Power-up default value for COSC bits
  6779                           ;	RSTOSC = EXTOSC_4PLL, EXTOSC with 4x PLL, with EXTOSC operating per FEXTOSC bits
  6780   300000                     	org	3145728
  6781   300000  AA                 	db	170
  6782                           
  6783                           ;Config register CONFIG1H @ 0x300001
  6784                           ;	unspecified, using default values
  6785                           ;	Clock Out Enable bit
  6786                           ;	CLKOUTEN = 0x1, unprogrammed default
  6787                           ;	Clock Switch Enable bit
  6788                           ;	CSWEN = 0x1, unprogrammed default
  6789                           ;	Fail-Safe Clock Monitor Enable bit
  6790                           ;	FCMEN = 0x1, unprogrammed default
  6791   300001                     	org	3145729
  6792   300001  FF                 	db	255
  6793                           
  6794                           ;Config register CONFIG2L @ 0x300002
  6795                           ;	unspecified, using default values
  6796                           ;	Master Clear Enable bit
  6797                           ;	MCLRE = 0x1, unprogrammed default
  6798                           ;	Power-up Timer Enable bit
  6799                           ;	PWRTE = 0x1, unprogrammed default
  6800                           ;	Low-power BOR enable bit
  6801                           ;	LPBOREN = 0x1, unprogrammed default
  6802                           ;	Brown-out Reset Enable bits
  6803                           ;	BOREN = 0x3, unprogrammed default
  6804   300002                     	org	3145730
  6805   300002  FF                 	db	255
  6806                           
  6807                           ;Config register CONFIG2H @ 0x300003
  6808                           ;	unspecified, using default values
  6809                           ;	Brown Out Reset Voltage selection bits
  6810                           ;	BORV = 0x3, unprogrammed default
  6811                           ;	ZCD Disable bit
  6812                           ;	ZCD = 0x1, unprogrammed default
  6813                           ;	PPSLOCK bit One-Way Set Enable bit
  6814                           ;	PPS1WAY = 0x1, unprogrammed default
  6815                           ;	Stack Full/Underflow Reset Enable bit
  6816                           ;	STVREN = 0x1, unprogrammed default
  6817                           ;	Debugger Enable bit
  6818                           ;	DEBUG = 0x1, unprogrammed default
  6819                           ;	Extended Instruction Set Enable bit
  6820                           ;	XINST = 0x1, unprogrammed default
  6821   300003                     	org	3145731
  6822   300003  FF                 	db	255
  6823                           
  6824                           ;Config register CONFIG3L @ 0x300004
  6825                           ;	WDT Period Select bits
  6826                           ;	WDTCPS = WDTCPS_31, Divider ratio 1:65536; software control of WDTPS
  6827                           ;	WDT operating mode
  6828                           ;	WDTE = OFF, WDT Disabled
  6829   300004                     	org	3145732
  6830   300004  9F                 	db	159
  6831                           
  6832                           ;Config register CONFIG3H @ 0x300005
  6833                           ;	unspecified, using default values
  6834                           ;	WDT Window Select bits
  6835                           ;	WDTCWS = 0x7, unprogrammed default
  6836                           ;	WDT input clock selector
  6837                           ;	WDTCCS = 0x7, unprogrammed default
  6838   300005                     	org	3145733
  6839   300005  FF                 	db	255
  6840                           
  6841                           ;Config register CONFIG4L @ 0x300006
  6842                           ;	unspecified, using default values
  6843                           ;	Write Protection Block 0
  6844                           ;	WRT0 = 0x1, unprogrammed default
  6845                           ;	Write Protection Block 1
  6846                           ;	WRT1 = 0x1, unprogrammed default
  6847                           ;	Write Protection Block 2
  6848                           ;	WRT2 = 0x1, unprogrammed default
  6849                           ;	Write Protection Block 3
  6850                           ;	WRT3 = 0x1, unprogrammed default
  6851                           ;	Write Protection Block 3
  6852                           ;	WRT4 = 0x1, unprogrammed default
  6853                           ;	Write Protection Block 3
  6854                           ;	WRT5 = 0x1, unprogrammed default
  6855                           ;	Write Protection Block 3
  6856                           ;	WRT6 = 0x1, unprogrammed default
  6857                           ;	Write Protection Block 3
  6858                           ;	WRT7 = 0x1, unprogrammed default
  6859   300006                     	org	3145734
  6860   300006  FF                 	db	255
  6861                           
  6862                           ;Config register CONFIG4H @ 0x300007
  6863                           ;	unspecified, using default values
  6864                           ;	Configuration Register Write Protection bit
  6865                           ;	WRTC = 0x1, unprogrammed default
  6866                           ;	Boot Block Write Protection bit
  6867                           ;	WRTB = 0x1, unprogrammed default
  6868                           ;	Data EEPROM Write Protection bit
  6869                           ;	WRTD = 0x1, unprogrammed default
  6870                           ;	Scanner Enable bit
  6871                           ;	SCANE = 0x1, unprogrammed default
  6872                           ;	Low Voltage Programming Enable bit
  6873                           ;	LVP = 0x1, unprogrammed default
  6874   300007                     	org	3145735
  6875   300007  FF                 	db	255
  6876                           
  6877                           ;Config register CONFIG5L @ 0x300008
  6878                           ;	unspecified, using default values
  6879                           ;	UserNVM Program Memory Code Protection bit
  6880                           ;	CP = 0x1, unprogrammed default
  6881                           ;	DataNVM Memory Code Protection bit
  6882                           ;	CPD = 0x1, unprogrammed default
  6883   300008                     	org	3145736
  6884   300008  FF                 	db	255
  6885                           
  6886                           ;Config register CONFIG5H @ 0x300009
  6887                           ;	unspecified, using default values
  6888   300009                     	org	3145737
  6889   300009  FF                 	db	255
  6890                           
  6891                           ;Config register CONFIG6L @ 0x30000A
  6892                           ;	unspecified, using default values
  6893                           ;	Table Read Protection Block 0
  6894                           ;	EBTR0 = 0x1, unprogrammed default
  6895                           ;	Table Read Protection Block 1
  6896                           ;	EBTR1 = 0x1, unprogrammed default
  6897                           ;	Table Read Protection Block 2
  6898                           ;	EBTR2 = 0x1, unprogrammed default
  6899                           ;	Table Read Protection Block 3
  6900                           ;	EBTR3 = 0x1, unprogrammed default
  6901                           ;	Table Read Protection Block 4
  6902                           ;	EBTR4 = 0x1, unprogrammed default
  6903                           ;	Table Read Protection Block 5
  6904                           ;	EBTR5 = 0x1, unprogrammed default
  6905                           ;	Table Read Protection Block 6
  6906                           ;	EBTR6 = 0x1, unprogrammed default
  6907                           ;	Table Read Protection Block 7
  6908                           ;	EBTR7 = 0x1, unprogrammed default
  6909   30000A                     	org	3145738
  6910   30000A  FF                 	db	255
  6911                           
  6912                           ;Config register CONFIG6H @ 0x30000B
  6913                           ;	unspecified, using default values
  6914                           ;	Boot Block Table Read Protection bit
  6915                           ;	EBTRB = 0x1, unprogrammed default
  6916   30000B                     	org	3145739
  6917   30000B  FF                 	db	255
  6918                           tosu	equ	0xFFF
  6919                           tosh	equ	0xFFE
  6920                           tosl	equ	0xFFD
  6921                           stkptr	equ	0xFFC
  6922                           pclatu	equ	0xFFB
  6923                           pclath	equ	0xFFA
  6924                           pcl	equ	0xFF9
  6925                           tblptru	equ	0xFF8
  6926                           tblptrh	equ	0xFF7
  6927                           tblptrl	equ	0xFF6
  6928                           tablat	equ	0xFF5
  6929                           prodh	equ	0xFF4
  6930                           prodl	equ	0xFF3
  6931                           indf0	equ	0xFEF
  6932                           postinc0	equ	0xFEE
  6933                           postdec0	equ	0xFED
  6934                           preinc0	equ	0xFEC
  6935                           plusw0	equ	0xFEB
  6936                           fsr0h	equ	0xFEA
  6937                           fsr0l	equ	0xFE9
  6938                           wreg	equ	0xFE8
  6939                           indf1	equ	0xFE7
  6940                           postinc1	equ	0xFE6
  6941                           postdec1	equ	0xFE5
  6942                           preinc1	equ	0xFE4
  6943                           plusw1	equ	0xFE3
  6944                           fsr1h	equ	0xFE2
  6945                           fsr1l	equ	0xFE1
  6946                           bsr	equ	0xFE0
  6947                           indf2	equ	0xFDF
  6948                           postinc2	equ	0xFDE
  6949                           postdec2	equ	0xFDD
  6950                           preinc2	equ	0xFDC
  6951                           plusw2	equ	0xFDB
  6952                           fsr2h	equ	0xFDA
  6953                           fsr2l	equ	0xFD9
  6954                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         211
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     60      89
    BANK0           160      4     126
    BANK1           256      0      60
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          234      0       0

Pointer List with Targets:

    buggy_color_response@c	PTR struct colors size(2) Largest target is 20
		 -> color(COMRAM[20]), 

    motor_init@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> motorR(BANK0[9]), 

    motor_init@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> motorL(BANK0[9]), 

    colourcards_normaliseRGBC@c	PTR struct colors size(2) Largest target is 20
		 -> color(COMRAM[20]), 

    READcolor@c	PTR struct colors size(2) Largest target is 20
		 -> color(COMRAM[20]), 

    timer_append@timer_index	PTR int  size(2) Largest target is 1
		 -> timer_index(COMRAM[1]), 

    timer_append@timer_memory	PTR int  size(2) Largest target is 40
		 -> timer_memory(BANK0[40]), 

    card_append@card_count_index	PTR int  size(2) Largest target is 1
		 -> card_count_index(COMRAM[1]), 

    card_append@card_memory	PTR int  size(2) Largest target is 3561
		 -> RAM(DATA[3561]), 

    instructions@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> motorR(BANK0[9]), 

    instructions@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> motorL(BANK0[9]), 

    reverse_yellow@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> motorR(BANK0[9]), 

    reverse_yellow@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> motorL(BANK0[9]), 

    reverse_pink@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> motorR(BANK0[9]), 

    reverse_pink@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> motorL(BANK0[9]), 

    space@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlhllll[1]), CCPR2H(BITBIGSFRhhhlll[1]), 

    space@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlhllll[1]), CCPR1H(BITBIGSFRhhhlll[1]), 

    space@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlhllll[1]), CCPR2H(BITBIGSFRhhhlll[1]), 

    space@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlhllll[1]), CCPR1H(BITBIGSFRhhhlll[1]), 

    space@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> motorR(BANK0[9]), 

    space@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> motorL(BANK0[9]), 

    right_45@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlhllll[1]), CCPR2H(BITBIGSFRhhhlll[1]), 

    right_45@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlhllll[1]), CCPR1H(BITBIGSFRhhhlll[1]), 

    right_45@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> motorR(BANK0[9]), 

    right_45@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlhllll[1]), CCPR2H(BITBIGSFRhhhlll[1]), 

    right_45@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlhllll[1]), CCPR1H(BITBIGSFRhhhlll[1]), 

    right_45@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> motorL(BANK0[9]), 

    left_45@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlhllll[1]), CCPR2H(BITBIGSFRhhhlll[1]), 

    left_45@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlhllll[1]), CCPR1H(BITBIGSFRhhhlll[1]), 

    left_45@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlhllll[1]), CCPR2H(BITBIGSFRhhhlll[1]), 

    left_45@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlhllll[1]), CCPR1H(BITBIGSFRhhhlll[1]), 

    left_45@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> motorR(BANK0[9]), 

    left_45@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> motorL(BANK0[9]), 

    stop@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlhllll[1]), CCPR2H(BITBIGSFRhhhlll[1]), 

    stop@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlhllll[1]), CCPR1H(BITBIGSFRhhhlll[1]), 

    stop@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> motorR(BANK0[9]), 

    stop@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlhllll[1]), CCPR2H(BITBIGSFRhhhlll[1]), 

    stop@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlhllll[1]), CCPR1H(BITBIGSFRhhhlll[1]), 

    stop@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> motorL(BANK0[9]), 

    reverse@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlhllll[1]), CCPR2H(BITBIGSFRhhhlll[1]), 

    reverse@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlhllll[1]), CCPR1H(BITBIGSFRhhhlll[1]), 

    reverse@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlhllll[1]), CCPR2H(BITBIGSFRhhhlll[1]), 

    reverse@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlhllll[1]), CCPR1H(BITBIGSFRhhhlll[1]), 

    reverse@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> motorR(BANK0[9]), 

    reverse@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> motorL(BANK0[9]), 

    forward@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlhllll[1]), CCPR2H(BITBIGSFRhhhlll[1]), 

    forward@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlhllll[1]), CCPR1H(BITBIGSFRhhhlll[1]), 

    forward@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlhllll[1]), CCPR2H(BITBIGSFRhhhlll[1]), 

    forward@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlhllll[1]), CCPR1H(BITBIGSFRhhhlll[1]), 

    forward@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> motorR(BANK0[9]), 

    forward@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> motorL(BANK0[9]), 

    setMotorPWM@m.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlhllll[1]), CCPR2H(BITBIGSFRhhhlll[1]), 

    setMotorPWM@m.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlhllll[1]), CCPR1H(BITBIGSFRhhhlll[1]), 

    setMotorPWM@m	PTR struct DC_motor size(2) Largest target is 11
		 -> motorR(BANK0[9]), motorL(BANK0[9]), 

    buggy_color_response@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> motorR(BANK0[9]), 

    buggy_color_response@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> motorL(BANK0[9]), 

    motorR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlhllll[1]), CCPR2H(BITBIGSFRhhhlll[1]), 

    motorR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlhllll[1]), CCPR1H(BITBIGSFRhhhlll[1]), 

    S236DC_motor$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlhllll[1]), CCPR2H(BITBIGSFRhhhlll[1]), 

    motorL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlhllll[1]), CCPR2H(BITBIGSFRhhhlll[1]), 

    S236DC_motor$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlhllll[1]), CCPR1H(BITBIGSFRhhhlll[1]), 

    motorL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlhllll[1]), CCPR1H(BITBIGSFRhhhlll[1]), 


Critical Paths under _main in COMRAM

    _main->_buggy_color_response
    _color_click_init->_color_writetoaddr
    _color_writetoaddr->_I2C_2_Master_Write
    _buggy_color_response->_colourcards_normaliseRGBC
    _buggy_color_response->_instructions
    _timer_append->_get_timer_val
    _instructions->_reverse_pink
    _instructions->_reverse_yellow
    _space->_stop
    _reverse_yellow->_left_45
    _left_45->_stop
    _reverse_pink->_right_45
    _right_45->_stop
    _reverse->_stop
    _forward->_stop
    _stop->_setMotorPWM
    _setMotorPWM->___lwdiv
    ___lwdiv->___wmul
    _colourcards_normaliseRGBC->___fldiv
    ___fldiv->___xxtofl
    _READcolor->_color_read_Blue
    _READcolor->_color_read_Clear
    _READcolor->_color_read_Green
    _READcolor->_color_read_Red
    _color_read_Red->_I2C_2_Master_Read
    _color_read_Green->_I2C_2_Master_Read
    _color_read_Clear->_I2C_2_Master_Read
    _color_read_Blue->_I2C_2_Master_Read
    _I2C_2_Master_Write->_I2C_2_Master_Idle
    _I2C_2_Master_Stop->_I2C_2_Master_Idle
    _I2C_2_Master_Start->_I2C_2_Master_Idle
    _I2C_2_Master_RepStart->_I2C_2_Master_Idle
    _I2C_2_Master_Read->_I2C_2_Master_Idle

Critical Paths under _LowISR in COMRAM

    None.

Critical Paths under _HighISR in COMRAM

    _interrupts_clear->i2_I2C_2_Master_Write
    i2_I2C_2_Master_Write->i2_I2C_2_Master_Idle
    i2_I2C_2_Master_Stop->i2_I2C_2_Master_Idle
    i2_I2C_2_Master_Start->i2_I2C_2_Master_Idle

Critical Paths under _main in BANK0

    _main->_buggy_color_response

Critical Paths under _LowISR in BANK0

    None.

Critical Paths under _HighISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _LowISR in BANK1

    None.

Critical Paths under _HighISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _LowISR in BANK2

    None.

Critical Paths under _HighISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _LowISR in BANK3

    None.

Critical Paths under _HighISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _LowISR in BANK4

    None.

Critical Paths under _HighISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _LowISR in BANK5

    None.

Critical Paths under _HighISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _LowISR in BANK6

    None.

Critical Paths under _HighISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _LowISR in BANK7

    None.

Critical Paths under _HighISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _LowISR in BANK8

    None.

Critical Paths under _HighISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _LowISR in BANK9

    None.

Critical Paths under _HighISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _LowISR in BANK10

    None.

Critical Paths under _HighISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _LowISR in BANK11

    None.

Critical Paths under _HighISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _LowISR in BANK12

    None.

Critical Paths under _HighISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _LowISR in BANK13

    None.

Critical Paths under _HighISR in BANK13

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  157963
                        _Timer0_init
                     _buggyLEDs_init
               _buggy_color_response
                   _color_click_init
                    _initDCmotorsPWM
                         _initUSART4
                         _motor_init
 ---------------------------------------------------------------------------------
 (1) _motor_init                                           4     0      4     152
                                              5 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (1) _initUSART4                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initDCmotorsPWM                                      2     0      2      98
                                              5 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _color_click_init                                     1     1      0     903
                                              9 COMRAM     1     1      0
                  _I2C_2_Master_Init
                  _color_writetoaddr
 ---------------------------------------------------------------------------------
 (2) _color_writetoaddr                                    2     1      1     903
                                              7 COMRAM     2     1      1
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Init                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _buggy_color_response                                10     4      6  156810
                                             54 COMRAM     6     0      6
                                              0 BANK0      4     4      0
                          _READcolor
                             ___flge
                        _card_append
          _colourcards_normaliseRGBC
                            _forward
                      _get_timer_val
                       _instructions
                               _stop
                       _timer_append
                        _timer_reset
 ---------------------------------------------------------------------------------
 (2) _timer_reset                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _timer_append                                         9     5      4     273
                                             13 COMRAM     9     5      4
                      _get_timer_val (ARG)
 ---------------------------------------------------------------------------------
 (2) _instructions                                         8     2      6  126263
                                             46 COMRAM     8     2      6
                            _left_45
                            _reverse
                       _reverse_pink
                     _reverse_yellow
                           _right_45
                              _space
                               _stop
 ---------------------------------------------------------------------------------
 (3) _space                                                6     2      4   11567
                                             30 COMRAM     6     2      4
                        _setMotorPWM
                               _stop
 ---------------------------------------------------------------------------------
 (3) _reverse_yellow                                       6     2      4   32700
                                             40 COMRAM     6     2      4
                            _left_45
                            _reverse
                               _stop
 ---------------------------------------------------------------------------------
 (4) _left_45                                             10     4      6   12535
                                             30 COMRAM    10     4      6
                        _setMotorPWM
                               _stop
 ---------------------------------------------------------------------------------
 (3) _reverse_pink                                         6     2      4   32908
                                             40 COMRAM     6     2      4
                            _reverse
                           _right_45
                               _stop
 ---------------------------------------------------------------------------------
 (3) _right_45                                            10     4      6   12743
                                             30 COMRAM    10     4      6
                        _setMotorPWM
                               _stop
 ---------------------------------------------------------------------------------
 (4) _reverse                                              5     1      4   12045
                                             30 COMRAM     5     1      4
                        _setMotorPWM
                               _stop
 ---------------------------------------------------------------------------------
 (2) _get_timer_val                                        8     6      2      34
                                              5 COMRAM     8     6      2
 ---------------------------------------------------------------------------------
 (2) _forward                                              5     1      4   11685
                                             30 COMRAM     5     1      4
                        _setMotorPWM
                               _stop
 ---------------------------------------------------------------------------------
 (2) _stop                                                 6     2      4    7692
                                             24 COMRAM     6     2      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (3) _setMotorPWM                                          6     4      2    3261
                                             18 COMRAM     6     4      2
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     472
                                              5 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              7     3      4     481
                                             11 COMRAM     7     3      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) _colourcards_normaliseRGBC                           10     8      2    3757
                                             44 COMRAM    10     8      2
                            ___fldiv
                           ___xxtofl
 ---------------------------------------------------------------------------------
 (3) ___xxtofl                                            14    10      4    1016
                                              5 COMRAM    14    10      4
 ---------------------------------------------------------------------------------
 (3) ___fldiv                                             25    17      8    2363
                                             19 COMRAM    25    17      8
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (2) _card_append                                          9     5      4    1353
                                              5 COMRAM     9     5      4
 ---------------------------------------------------------------------------------
 (2) ___flge                                              12     4      8    3866
                                              5 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (2) _READcolor                                            2     0      2     836
                                             16 COMRAM     2     0      2
                    _color_read_Blue
                   _color_read_Clear
                   _color_read_Green
                     _color_read_Red
 ---------------------------------------------------------------------------------
 (3) _color_read_Red                                       7     5      2     164
                                              9 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (3) _color_read_Green                                     7     5      2     164
                                              9 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (3) _color_read_Clear                                     7     5      2     164
                                              9 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (3) _color_read_Blue                                      7     5      2     164
                                              9 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Write                                   1     1      0      31
                                              6 COMRAM     1     1      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Stop                                    0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Start                                   0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (4) _I2C_2_Master_RepStart                                0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (4) _I2C_2_Master_Read                                    3     3      0      65
                                              6 COMRAM     3     3      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (4) _I2C_2_Master_Idle                                    1     1      0       0
                                              5 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _buggyLEDs_init                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Timer0_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _LowISR                                               3     3      0       0
                                              2 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _HighISR                                              0     0      0      22
                   _interrupts_clear
 ---------------------------------------------------------------------------------
 (10) _interrupts_clear                                    0     0      0      22
               i2_I2C_2_Master_Start
                i2_I2C_2_Master_Stop
               i2_I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (11) i2_I2C_2_Master_Write                                1     1      0      22
                                              1 COMRAM     1     1      0
                i2_I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (11) i2_I2C_2_Master_Stop                                 0     0      0       0
                i2_I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (11) i2_I2C_2_Master_Start                                0     0      0       0
                i2_I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (12) i2_I2C_2_Master_Idle                                 1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Timer0_init
   _buggyLEDs_init
   _buggy_color_response
     _READcolor
       _color_read_Blue
         _I2C_2_Master_Read
           _I2C_2_Master_Idle
         _I2C_2_Master_RepStart
           _I2C_2_Master_Idle
         _I2C_2_Master_Start
           _I2C_2_Master_Idle
         _I2C_2_Master_Stop
           _I2C_2_Master_Idle
         _I2C_2_Master_Write
           _I2C_2_Master_Idle
       _color_read_Clear
         _I2C_2_Master_Read
         _I2C_2_Master_RepStart
         _I2C_2_Master_Start
         _I2C_2_Master_Stop
         _I2C_2_Master_Write
       _color_read_Green
         _I2C_2_Master_Read
         _I2C_2_Master_RepStart
         _I2C_2_Master_Start
         _I2C_2_Master_Stop
         _I2C_2_Master_Write
       _color_read_Red
         _I2C_2_Master_Read
         _I2C_2_Master_RepStart
         _I2C_2_Master_Start
         _I2C_2_Master_Stop
         _I2C_2_Master_Write
     ___flge
     _card_append
     _colourcards_normaliseRGBC
       ___fldiv
         ___xxtofl (ARG)
       ___xxtofl
     _forward
       _setMotorPWM
         ___lwdiv
           ___wmul (ARG)
         ___wmul
       _stop
         _setMotorPWM
     _get_timer_val
     _instructions
       _left_45
         _setMotorPWM
         _stop
       _reverse
         _setMotorPWM
         _stop
       _reverse_pink
         _reverse
         _right_45
           _setMotorPWM
           _stop
         _stop
       _reverse_yellow
         _left_45
         _reverse
         _stop
       _right_45
       _space
         _setMotorPWM
         _stop
       _stop
     _stop
     _timer_append
       _get_timer_val (ARG)
     _timer_reset
   _color_click_init
     _I2C_2_Master_Init
     _color_writetoaddr
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
   _initDCmotorsPWM
   _initUSART4
   _motor_init

 _LowISR (ROOT)

 _HighISR (ROOT)
   _interrupts_clear
     i2_I2C_2_Master_Start
       i2_I2C_2_Master_Idle
     i2_I2C_2_Master_Stop
       i2_I2C_2_Master_Idle
     i2_I2C_2_Master_Write
       i2_I2C_2_Master_Idle

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             DE9      0       0      62        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      3C       7       23.4%
BITBANK13           EA      0       0      30        0.0%
BANK13              EA      0       0      31        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      4      7E       5       78.8%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     3C      59       1       94.7%
BITBIGSFRhlhllh     52      0       0      40        0.0%
BITBIGSFRhlhlll     37      0       0      42        0.0%
BITBIGSFRllh        2D      0       0      45        0.0%
BITBIGSFRlllhll     2A      0       0      53        0.0%
BITBIGSFRlllll      26      0       0      60        0.0%
BITBIGSFRhhhlll     1D      0       0      38        0.0%
BITBIGSFRhhhhlh     1B      0       0      33        0.0%
BITBIGSFRhhhhll     13      0       0      34        0.0%
BITBIGSFRlllhhh     11      0       0      47        0.0%
BITBIGSFRlllhhh     11      0       0      48        0.0%
BITBIGSFRhhhlhh      E      0       0      35        0.0%
BITBIGSFRhhhhh       D      0       0      32        0.0%
BITBIGSFRlllhhh      C      0       0      46        0.0%
BITBIGSFRlllhll      9      0       0      57        0.0%
BITBIGSFRhllll       8      0       0      43        0.0%
BITBIGSFRllllh       6      0       0      59        0.0%
BITBIGSFRlllhlh      6      0       0      52        0.0%
BITBIGSFRlllhlh      5      0       0      51        0.0%
BITBIGSFRlllhll      5      0       0      55        0.0%
BITBIGSFRlllhll      3      0       0      54        0.0%
BITBIGSFRlllhll      3      0       0      56        0.0%
BITBIGSFRlllhhl      3      0       0      50        0.0%
BITBIGSFRhlhlll      2      0       0      41        0.0%
BITBIGSFRhhhllh      2      0       0      37        0.0%
BITBIGSFRhlhllh      1      0       0      39        0.0%
BITBIGSFRhhhlhl      1      0       0      36        0.0%
BITBIGSFRlllhhh      1      0       0      49        0.0%
BITBIGSFRlllhll      1      0       0      58        0.0%
BITBIGSFRlh          1      0       0      44        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     113      61        0.0%
DATA                 0      0     113       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.40 build 20220703182018 
Symbol Table                                                                                   Mon Mar 13 15:53:53 2023

                   _color_read_Red 1B64                       ___fldiv@aexp 002C  
                     ___fldiv@bexp 002B                       ___fldiv@sign 0024  
                  _color_read_Blue 1C54                                 l30 1E68  
                               l33 1E8E                                 l42 1FDC  
                               l27 1E66                                 l36 1FE6  
                               l45 1FBC                                 l39 1FF0  
                               l48 1D30                                 bsr 000FE0  
              ___wmul@multiplicand 0008                   _color_read_Clear 1C04  
                 _color_read_Green 1BB4                                l103 1DDC  
                              l112 1CA2                                l121 1E0E  
                              l106 1F64                                l115 1C02  
                              l140 0760                                l109 1BB2  
                              l301 19A6                                l118 1C52  
                              l143 14E6                                l311 1CEE  
                              l321 1864                                l314 1F9A  
                              l322 1866                                l330 17A8  
                              l308 114E                                l182 1F44  
                              l335 1916                                l329 17A6  
                              l346 128E                                l522 1D6C  
                              l371 1A8C                                l533 1F84  
                              l357 13BC                                l365 16EA  
                              l542 1EDC                                l519 1DA8  
                              l383 0E2E                                l368 1AFE  
                              l536 1FD2                                l539 1F24  
                              l812 15EA                                l807 15A4  
                   ?_get_timer_val 0006                                wreg 000FE8  
                             l1200 0FE2                               l1040 1A1A  
                             l1033 1A12                               l1211 0F7A  
                             l1124 0AFA                               l1204 0F1E  
                             l1126 095A                               l1135 09A0  
                             l1137 0A18                               l1129 091E  
                             l3001 19FC                               l1138 0A06  
                             l3003 1A04                               l3011 1000  
                             l3005 1A06                               l3021 10CA  
                             l3013 1054                               l3101 1762  
                             l3007 1A0C                               l3023 110E  
                             l3015 1068                               l3031 1888  
                             l3103 176E                               l3111 1164  
                             l3025 1E68                               l3017 106C  
                             l3009 0FE4                               l3041 18AA  
                             l3033 188A                               l3105 1776  
                             l3121 11AA                               l3113 1174  
                             l3027 1E78                               l3203 1C04  
                             l3019 10AE                               l3051 18E4  
                             l3043 18B6                               l3107 178E  
                             l3131 11F2                               l3123 11B6  
                             l3115 1184                               l3211 1600  
                             l3061 1FE2                               l3205 1C4A  
                             l3301 0884                               l1197 0E86  
                             l3053 18FC                               l3045 18C2  
                             l3029 1868                               l3141 1254  
                             l3133 11FA                               l3125 11CE  
                             l3117 1186                               l3109 1150  
                             l3221 1662                               l3213 1602  
                             l3063 1FE8                               l3071 1FB4  
                             l3311 08C2                               l3303 0884  
                             l3055 1908                               l3047 18CA  
                             l3039 1892                               l3151 12B0  
                             l3143 126A                               l3135 1212  
                             l3127 11DA                               l3119 1192  
                             l3231 16BC                               l3223 166E  
                             l3215 1612                               l3081 1D06  
                             l3065 1FEC                               l3073 1FB8  
                             l3321 090E                               l3313 08D2  
                             l3401 0EC8                               l3057 1914  
                             l3049 18D6                               l3161 12FA  
                             l3153 12B2                               l3241 1AEA  
                             l3145 126C                               l3137 122A  
                             l3129 11E6                               l3233 16D0  
                             l3217 163E                               l3225 1676  
                             l3209 15EC                               l3083 1D2C  
                             l3075 1CF2                               l3059 1FDE  
                             l3067 1FD4                               l3331 0958  
                             l3323 091C                               l3315 08E2  
                             l3307 0898                               l3251 076E  
                             l3411 0F50                               l3403 0ED4  
                             l3091 1700                               l3171 133E  
                             l3163 1306                               l3155 12BE  
                             l3139 1240                               l3147 1270  
                             l3243 1A1C                               l3235 16E8  
                             l3227 168E                               l3219 1656  
                             l3085 1D2E                               l3077 1CF6  
                             l3069 1FD8                               l3341 099E  
                             l3333 096A                               l3325 0928  
                             l3317 08EA                               l3309 08B2  
                             l3261 07AE                               l3253 077C  
                             l3421 0F8E                               l3413 0F5C  
                             l3405 0F06                               l3093 1710  
                             l3181 139A                               l3173 1356  
                             l3165 1312                               l3157 12D6  
                             l3149 1290                               l3237 1A8E  
                             l3245 1A60                               l3229 16A6  
                             l3501 0DDE                               l3079 1CFE  
                             l3191 1C54                               l3351 09FE  
                             l3335 0980                               l3343 09B0  
                             l3327 0946                               l3319 08FA  
                             l3271 07D4                               l3263 07B0  
                             l3255 077E                               l3423 0FB2  
                             l3415 0F6A                               l3407 0F08  
                             l3511 17BE                               l3095 1720  
                             l3175 136E                               l3167 131E  
                             l3159 12E2                               l3183 139E  
                             l3239 1AD2                               l3247 1A78  
                             l3503 0DF2                               l3193 1C9A  
                             l3185 1B64                               l3361 0A6C  
                             l3345 09BE                               l3337 0986  
                             l3329 0948                               l3281 0814  
                             l3273 07E2                               l3257 078E  
                             l3265 07B8                               l3249 0762  
                             l3425 0FC2                               l3417 0F88  
                             l3409 0F14                               l3521 1820  
                             l3513 17CE                               l3441 1F04  
                             l3097 173E                               l3089 16EC  
                             l3177 1382                               l3169 1326  
                             l3505 0E06                               l3601 02CE  
                             l3433 1F48                               l3187 1BAA  
                             l3435 1DDE                               l3531 14E8  
                             l3371 0AD6                               l3355 0A28  
                             l3363 0A70                               l3347 09C2  
                             l3339 0990                               l3291 0854  
                             l3283 0816                               l3275 07E4  
                             l3267 07C8                               l3259 079E  
                             l3427 0FD0                               l3419 0F8A  
                             l3523 182C                               l3515 17DE  
                             l3443 1F1C                               l3099 1756  
                             l3179 1398                               l3507 0E1A  
                             l3451 0AFC                               l3611 039E  
                             l3603 0300                               l2571 1E3E  
                             l3197 1BB4                               l3541 1572  
                             l3533 1516                               l3373 0ADA  
                             l3365 0A8A                               l3357 0A34  
                             l3349 09D0                               l3293 085C  
                             l3277 07F4                               l3285 081E  
                             l3269 07CE                               l3429 0FD2  
                             l3437 13BE                               l3517 17FC  
                             l3525 1834                               l3509 17AA  
                             l3461 0B96                               l3453 0B10  
                             l3621 046E                               l3613 03BC  
                             l3605 031E                               l2581 1E54  
                             l2573 1E48                               l3199 1BFA  
                             l3543 1584                               l3535 1526  
                             l3375 0AE8                               l3367 0AA0  
                             l3359 0A42                               l3295 0860  
                             l3287 082E                               l3279 0804  
                             l3391 0E50                               l3439 13DE  
                             l3527 184C                               l3519 1814  
                             l3471 0C32                               l3463 0BAA  
                             l3455 0B28                               l3447 1D34  
                             l3631 053E                               l3623 048C  
                             l3615 03D8                               l3607 033A  
                             l2575 1E4E                               l3545 1592  
                             l3537 1554                               l3449 1D70  
                             l3377 0AEE                               l3369 0ABA  
                             l3289 0844                               l3393 0E96  
                             l3473 0C46                               l3481 0CBA  
                             l3465 0BDA                               l3457 0B54  
                             l3529 1FCA                               l3641 060E  
                             l3633 055C                               l3617 040A  
                             l3625 04A8                               l3609 036C  
                             l2577 1E50                               l3561 1DD2  
                             l3553 1DAA                               l2841 1F3E  
                             l2833 1F26                               l3547 15E2  
                             l3539 1564                               l3379 0AF0  
                             l3299 0874                               l3395 0EAC  
                             l3387 0E32                               l3491 0D42  
                             l3483 0CCE                               l3475 0C5E  
                             l3467 0BEE                               l3459 0B66  
                             l3651 06AC                               l3643 062C  
                             l3627 04DA                               l3635 0578  
                             l3619 043C                               l3571 00B4  
                             l3563 0058                               l2579 1E52  
                             l3555 1DAE                               l2843 1F40  
                             l2835 1F30                               l3549 15E8  
                             l3389 0E42                               l3485 0CE2  
                             l3493 0D56                               l3477 0C8A  
                             l3469 0C1E                               l3661 070E  
                             l3653 06C0                               l3637 05AA  
                             l3645 0648                               l3629 050C  
                             l3581 012E                               l3573 00CC  
                             l3565 0070                               l3557 1DB8  
                             l2861 1952                               l2845 1F42  
                             l2837 1F32                               l3399 0EC0  
                             l3495 0D6A                               l3487 0CFA  
                             l3479 0CA6                               l3663 0738  
                             l3655 06CE                               l3647 067A  
                             l3639 05DC                               l3591 01FE  
                             l3583 0160                               l3575 00D8  
                             l3567 0086                               l3559 1DC8  
                             l2871 198E                               l2863 1976  
                             l2855 1918                               l2839 1F34  
                             l3671 1B00                               l3497 0D9A  
                             l3489 0D26                               l3665 073C  
                             l3657 06E0                               l3649 0690  
                             l3593 0230                               l3585 0192  
                             l3577 00E4                               l3569 00A0  
                             l2873 1998                               l2865 1980  
                             l2857 1928                               l2881 1CB2  
                             l3681 1B2C                               l3673 1B0C  
                             l2891 1F66                               l3499 0DAE  
                             l3659 06E6                               l3667 0744  
                             l3595 024E                               l3587 01B0  
                             l3579 00FC                               l2875 199A  
                             l2867 1982                               l2859 194E  
                             l2883 1CBA                               l3691 1B38  
                             l3683 1B30                               l3675 1B20  
                             l2893 1F6E                               l2981 1EB8  
                             l3597 026A                               l3589 01CC  
                             l3669 074C                               l2877 19A4  
                             l2869 198C                               l2885 1CD6  
                             l3693 1B3A                               l3685 1B32  
                             l3677 1B24                               l2895 1F78  
                             l2991 19C2                               l2983 1ED4  
                             l3599 029C                               l2887 1CDE  
                             l2879 1CA4                               l3695 1B3C  
                             l3687 1B34                               l3679 1B28  
                             l2897 1F82                               l2889 1F86  
                             l2993 19CA                               l3697 1B3E  
                             l3689 1B36                               l2995 19D2  
                             l2987 19A8                               l3699 1B40  
                             l2997 19E0                               l2989 19B0  
                             l2999 19E6                               u2200 10CA  
                             u3000 040A                               u2201 10C6  
                             u3001 0406                               u2210 1E78  
                             u3010 043C                               u2211 1E74  
                             u3011 0438                               u2220 1E8E  
                             u2300 1212                               u3100 0690  
                             u3020 046E                               u2221 1E8A  
                             u2301 120E                               u3101 068C  
                             u3021 046A                               u2230 18E4  
                             u2310 122A                               u3110 070E  
                             u3030 04DA                               u2231 18E0  
                             u2311 1226                               u3111 070A  
                             u3031 04D6                               u2240 1D1A  
                             u2400 077C                               u2160 19C2  
                             u2320 128E                               u3040 050C  
                     _BAUD4CONbits 000EE9                               u2241 1D12  
                             u2401 0778                               u2161 19BE  
                             u2321 128A                               u3041 0508  
                             u2410 078E                               u2170 19E0  
                             u2330 12D6                               u3050 053E  
                             u2411 078A                               u2171 19DC  
                             u2331 12D2                               u3051 053A  
                             u2500 0946                               u2420 079E  
                             u2180 19FC                               u2260 178E  
                             u2340 12FA                               u3060 05AA  
                             u2501 0942                               u2421 079A  
                             u2181 19F8                               u2261 178A  
                             u2341 12F6                               u3061 05A6  
                             u2510 096A                               u2430 07E2  
                             u2190 1000                               u2270 17A6  
                             u2350 133E                               u3070 05DC  
                             u2511 0966                               u2431 07DE  
                             u2191 0FFC                               u2271 17A2  
                             u2351 133A                               u3207 0CEC  
                             u3071 05D8                               u3127 1DBE  
                             u2600 0A8A                               u2520 0980  
                             u2440 07F4                               u2360 1356  
                             u2280 11AA                               u3080 060E  
                             u2601 0A86                               u2521 097C  
                             u2441 07F0                               u2361 1352  
                             u2281 11A6                               u3217 0D18  
                             u3081 060A                               u3137 00C0  
                             u2258 1D1C                               u2610 0ABA  
                             u2530 099E                               u2450 0804  
                             u2370 13BC                               u2290 11CE  
                             u3090 067A                               _T2PR 000FBC  
                             u2611 0AB6                               u2531 099A  
                             u2451 0800                               u2371 13B8  
                             u3307 1320                               u2291 11CA  
                             u3227 1670                               u3091 0676  
                             u3147 00F0                               u2620 0AE8  
                             u2540 09BE                               u2460 0844  
                             u2700 0F88                               u2380 168E  
                             u2621 0AE4                               u2541 09BA  
                             u2461 0840                               u2701 0F84  
                             u3317 1360                               u3237 16B0  
                             u2381 168A                               u3157 06D6  
                             u2550 09D0                               u2470 0884  
                             u2710 0FC2                               u2630 0E42  
                             u2390 16A6                               u2551 09CC  
                             u2471 0880                               u2711 0FBE  
                             u2631 0E3E                               u3327 138C  
                             u3247 16DA                               u2391 16A2  
                             u3167 0B1A                               u2560 09FE  
                             u2480 08FA                               u2720 0FD0  
                             u2640 0E50                               u2800 0DF2  
                             u2561 09FA                               u2481 08F6  
                             u2721 0FCC                               u2641 0E4C  
                             u3337 1770                               u3257 1A6A  
                             u2801 0DEE                               u3177 0B46  
                             u2570 0A14                               u2490 091C  
                             u2650 0EAC                               u2810 0E1A  
                             u2730 0B66                               u2571 0A10  
                             u2491 0918                               u2651 0EA8  
                             u3347 182E                               u3267 11F4  
                             u2811 0E16                               u3187 0C50  
                             u2731 0B62                               u2580 0A28  
                             u2660 0F02                               u2820 184C  
                             u2740 0BAA                               u2900 012E  
                             u2581 0A24                               u2661 0EFE  
                             u3357 18C4                               u2821 1848  
                             u3277 1234                               u3197 0C7C  
                             u2741 0BA6                               u2901 012A  
                             u2590 0A42                               u2670 0F4C  
                             u2830 1864                               u2750 0BEE  
                             u2910 0160                               u2591 0A3E  
                             u2671 0F48                               u2831 1860  
                             u3287 125E                               u2751 0BEA  
                             u2911 015C                               u2840 1516  
                             u2680 0F6A                               u2760 0C32  
                             u2920 0192                               u2841 1512  
                             u2681 0F66                               u3297 1ADC  
                             u2761 0C2E                               u2921 018E  
                             u2850 1554                               u2690 0F7A  
                             u2770 0CCE                               u2930 01FE  
                             u2851 1550                               u2691 0F76  
                             u2771 0CCA                               u2931 01FA  
                             u2860 1572                               u2780 0D6A  
                             u2940 0230                               u2861 156E  
                             u2781 0D66                               u2941 022C  
                             u2870 1592                               u2790 0DAE  
                             u2950 029C                               u2871 158E  
                             u2791 0DAA                               u2951 0298  
                             u2880 15E2                               u2960 02CE  
                             u2881 15DE                               u2961 02CA  
                             u2970 0300                               u2890 0086  
                             u2971 02FC                               u2891 0082  
                             u2980 036C                               u2981 0368  
                             i2l30 1E90                               u2990 039E  
                             u2991 039A                               i2l33 1EB6  
                             i2l42 1FFA                               i2l36 2004  
                             i2l45 1FC8                               _main 1B00  
                             fsr2h 000FDA                               indf2 000FDF  
                             fsr2l 000FD9                               btemp 005A  
                             _stop 1868                               prodh 000FF4  
                             prodl 000FF3                               start 0054  
                  ___fldiv@new_exp 0025             __end_of_color_read_Red 1BB4  
                  __end_of_HighISR 1F04                       ___param_bank 000000  
                 _color_lowerbound 009C                              ?_main 0001  
                  __end_of___fldiv 0AFC                              ?_stop 0019  
                  __end_of___lwdiv 1A1C                              i1l516 0044  
                            i2l502 1FB0                              i2l508 1F00  
                            _TMR0H 000FD4                              _TMR0L 000FD3  
         __end_of_interrupts_clear 1FB2                       left_45@count 0023  
       __end_of_I2C_2_Master_Start 1FE8         __end_of_I2C_2_Master_Write 1FBE  
                  __end_of_left_45 1290                              _color 0044  
                  __end_of_forward 1868                              _space 15EC  
                  __end_of_reverse 17AA                              ttemp5 005B  
                            ttemp6 005E                              ttemp7 0062  
                            stop@i 001D                              status 000FD8  
                            wtemp8 005B            __end_of_color_read_Blue 1CA4  
            _I2C_2_Master_RepStart 1FE8                    ?_color_read_Red 000A  
                  __initialization 1E10                       __end_of_main 1B64  
                     __end_of_stop 1918                   _color_upperbound 003D  
                           ??_main 003D                    ??_get_timer_val 0008  
                           ??_stop 001D                      __activetblptr 000000  
           card_append@card_memory 0008                       ?_setMotorPWM 0013  
                           _CCPR1H 000FAA                             _CCPR2H 000FA6  
                           _CCPR3H 000F25                             _CCPR4H 000F21  
                 timer_append@temp 0016                             ?_space 001F  
                __end_of_READcolor 1E10                             _RC0PPS 000E62  
                           _RC4REG 000EE3                             i1l2111 0036  
                           i1l2113 0042                             i1l2109 0026  
                           _RE2PPS 000E74                             _RC7PPS 000E69  
                           _RD5PPS 000E6F                             _RE4PPS 000E76  
                           _RD6PPS 000E70                             i2l2703 1FFC  
                           i2l2711 1FC0                             i2l2705 2000  
                           i2l2713 1FC4                             i2l2707 1FF2  
                           i2l2709 1FF6                             i2l2567 1E90  
                           i2l2569 1EA0                             _RG6PPS 000E88  
                           i2l2973 1EDE                             i2l2975 1EEE  
                           i2l2977 1EF8                             i2l2899 1F9C  
                           i2l2979 1EFC                          ??_HighISR 0003  
         __end_of_color_click_init 1DDE                             _RX4PPS 000E15  
                           _TX4REG 000EE4                   __end_of___xxtofl 0FE4  
                           _LowISR 0018                             _T_flag 003F  
                    ??_Timer0_init 0006                       _CCPTMRS0bits 000FAD  
                           ___flge 14E8                             ___wmul 1EB8  
                        ??___fldiv 001C                          ??___lwdiv 0010  
                 ??_buggyLEDs_init 0006                             clear_0 1E16  
                           clear_1 1E22                             clear_2 1E2E  
                           _motorL 00D1                             _motorR 00C8  
                           isa$std 000001  __end_of_colourcards_normaliseRGBC 14E8  
                        ??_left_45 0025                   __end_of_right_45 13BE  
                        ??_forward 0023                          ??_reverse 0023  
                           stop@mL 0019                             stop@mR 001B  
                     ?_timer_reset 0001                  ??_initDCmotorsPWM 0008  
     __end_of_buggy_color_response 0762                         ___flge@ff1 0006  
                       ___flge@ff2 000A                       ___xxtofl@arg 0010  
                     ___xxtofl@exp 000F                       ___xxtofl@val 0006  
                       __accesstop 0060            __end_of__initialization 1E34  
         __end_of_color_read_Clear 1C54           __end_of_color_read_Green 1C04  
           ?_I2C_2_Master_RepStart 0001                      ___rparam_used 000001  
                 ?_color_read_Blue 000A                     __pcstackCOMRAM 0001  
                    __end_of_space 16EC                __end_of_Timer0_init 1F86  
                          ??_space 0023                         __pbssBANK0 0060  
                       __pbssBANK1 0100                      ?_instructions 002F  
                          ?_LowISR 0001                  _color_writetoaddr 1F46  
                     _T2CLKCONbits 000FBF                            ?___flge 0006  
               ?_color_writetoaddr 0008                            ?___wmul 0006  
          timer_append@timer_index 000E                ??_color_writetoaddr 0009  
                        ?___xxtofl 0006                            _SP4BRGH 000EE6  
                          _SP4BRGL 000EE5                  ?_interrupts_clear 0001  
           get_timer_val@timer_val 000C                            _SSP2ADD 000ED6  
                          _SSP2BUF 000ED5                 ??_interrupts_clear 0003  
           color_writetoaddr@value 0008                   ??_color_read_Red 000C  
                          _HighISR 0008                     ??_instructions 0035  
        __end_of_color_writetoaddr 1F66                 _I2C_2_Master_Start 1FDE  
                       _initUSART4 1F26                i2_I2C_2_Master_Idle 1E90  
               _I2C_2_Master_Write 1FB2                          ?_right_45 001F  
                          __Hparam 0000                i2_I2C_2_Master_Stop 1FF2  
                          __Lparam 0000                  color_read_Red@tmp 000F  
                      _Timer0_init 1F66                            ___fldiv 0762  
              ?_I2C_2_Master_Start 0001                            ___lwdiv 19A8  
              ?_I2C_2_Master_Write 0001               _buggy_color_response 0058  
                    ??_card_append 000A                            __pcinit 1E10  
                          __ramtop 0E00                            __ptext0 1B00  
                          __ptext1 1CA4                            __ptext2 1F26  
                          __ptext3 1918                            __ptext4 1DAA  
                          __ptext5 1F46                            __ptext6 1E3E  
                          __ptext7 0058                            __ptext8 1FCA  
                          __ptext9 1D32                            _left_45 1150  
             ?i2_I2C_2_Master_Idle 0001                          _T2CONbits 000FBD  
                          _forward 17AA                         ??___xxtofl 000A  
             ?i2_I2C_2_Master_Stop 0001                      ?_reverse_pink 0029  
                        _T2HLTbits 000FBE                            _reverse 16EC  
                    right_45@count 0023                      _RxBufWriteCnt 0043  
             ??_I2C_2_Master_Start 0007               ??_I2C_2_Master_Write 0007  
                   __pintcode_body 1EDE               end_of_initialization 1E34  
                          int_func 1EDE                  ?_color_click_init 0001  
                        _READcolor 1DDE                         ??_right_45 0025  
               ??_color_click_init 000A                            space@mL 001F  
                          space@mR 0021                      ?_timer_append 000E  
                          postdec2 000FDD                            postinc0 000FEE  
                          postinc2 000FDE                         _motor_init 1CA4  
            ?_buggy_color_response 0037                    _initDCmotorsPWM 1918  
               setMotorPWM@negDuty 0018              ??i2_I2C_2_Master_Idle 0001  
            ??i2_I2C_2_Master_Stop 0002                     ??_reverse_pink 002D  
            __end_of_get_timer_val 1F26                      ___xxtofl@sign 000E  
                        _TRISAbits 000F81                 setMotorPWM@posDuty 0017  
                        _TRISBbits 000F82                          _TRISCbits 000F83  
              __end_of_card_append 1DAA                          _TRISDbits 000F84  
                        _TRISEbits 000F85                          _TRISFbits 000F86  
                        _TRISGbits 000F87                          _TRISHbits 000F88  
                      ___fldiv@grs 0027                        ___fldiv@rem 0020  
         color_writetoaddr@address 0009            ??_I2C_2_Master_RepStart 0007  
                      _CCP1CONbits 000FAB                  ?_color_read_Clear 000A  
                     _EUSART4RXbuf 0088                       _EUSART4TXbuf 0100  
                      _CCP2CONbits 000FA7                  ?_color_read_Green 000A  
                       ?_READcolor 0011                        _CCP3CONbits 000F26  
                      ?_initUSART4 0001                        _CCP4CONbits 000F22  
               ??_color_read_Clear 000C                 ??_color_read_Green 000C  
                   ??_timer_append 0012                     __end_of_LowISR 0054  
                   __end_of___flge 15EC                     __end_of___wmul 1EDE  
             __end_of_instructions 0E30         ?_colourcards_normaliseRGBC 002D  
              color_read_Clear@tmp 000F                start_initialization 1E10  
                    _TxBufWriteCnt 0041             buggy_color_response@mL 0037  
           buggy_color_response@mR 0039                color_read_Green@tmp 000F  
                         ??_LowISR 0003                     _reverse_yellow 1A1C  
          __end_of_initDCmotorsPWM 19A8         colourcards_normaliseRGBC@B 0033  
       colourcards_normaliseRGBC@C 0035         colourcards_normaliseRGBC@G 0031  
       colourcards_normaliseRGBC@R 002F         colourcards_normaliseRGBC@c 002D  
                         ??___flge 000E             ??_buggy_color_response 00DA  
                         ??___wmul 000A                        ?_motor_init 0006  
                       READcolor@c 0011      i2I2C_2_Master_Write@data_byte 0002  
                      _card_append 1D6E                        _card_memory 0060  
     __end_ofi2_I2C_2_Master_Start 2006       __end_ofi2_I2C_2_Master_Write 1FCA  
                        ___fldiv@a 0018                          ___fldiv@b 0014  
                      __pbssCOMRAM 003D                      __pcstackBANK0 00DA  
                         ?_HighISR 0001             __end_of_reverse_yellow 1A8E  
                      ??_READcolor 0013               __end_of_reverse_pink 1B00  
                 ___lwdiv@dividend 000C                       ?_Timer0_init 0001  
                        __pintcode 0008                           ?___fldiv 0014  
                         ?___lwdiv 000C                         right_45@mL 001F  
                       right_45@mR 0021                        __pintcodelo 0018  
         timer_append@timer_memory 0010               I2C_2_Master_Read@ack 0008  
             I2C_2_Master_Read@tmp 0009                           ?_left_45 001F  
                         ?_forward 001F                  _I2C_2_Master_Idle 1E68  
                _I2C_2_Master_Init 1E3E                  _I2C_2_Master_Read 1CF0  
                _I2C_2_Master_Stop 1FD4                       _RxBufReadCnt 0042  
                         ?_reverse 001F                 ?_I2C_2_Master_Idle 0001  
             __end_of_timer_append 1D6E                 ?_I2C_2_Master_Init 0001  
               ?_I2C_2_Master_Read 0001                      ??_setMotorPWM 0015  
               ?_I2C_2_Master_Stop 0001                   ___lwdiv@quotient 0011  
         initDCmotorsPWM@PWMperiod 0006                ??_I2C_2_Master_Idle 0006  
              ??_I2C_2_Master_Init 0006                ??_I2C_2_Master_Read 0007  
                   ___wmul@product 000A                           _LATAbits 000F79  
              ??_I2C_2_Master_Stop 0007                           _LATCbits 000F7B  
                         _LATDbits 000F7C                           _LATEbits 000F7D  
                         _LATFbits 000F7E                     reverse_pink@mL 0029  
                         _LATGbits 000F7F                     reverse_pink@mR 002B  
                         _LATHbits 000F80                    ?_reverse_yellow 0029  
                         _IPR0bits 000E1F                           _PIE0bits 000E29  
                         _PIE4bits 000E2D                           i1u111_20 0036  
                         i1u111_21 0032                           i2u215_40 1EEE  
                         i2u215_41 1EEA                           i2u170_40 1EB6  
                         i2u170_41 1EB2                           _PIR0bits 000E33  
                         i2u169_40 1EA0                           i2u169_41 1E9C  
                         _PIR4bits 000E37                   ?_initDCmotorsPWM 0006  
                         _SSP2CON2 000EDA                           _SSP2STAT 000ED8  
        __end_of_I2C_2_Master_Idle 1E90          __end_of_I2C_2_Master_Init 1E68  
        __end_of_I2C_2_Master_Read 1D32                  ___wmul@multiplier 0006  
        __end_of_I2C_2_Master_Stop 1FDE                       setMotorPWM@m 0013  
      I2C_2_Master_Write@data_byte 0007                          left_45@mL 001F  
                        left_45@mR 0021                  ??_color_read_Blue 000C  
                     _TxBufReadCnt 0040                      ??_timer_reset 0006  
    __end_of_I2C_2_Master_RepStart 1FF2                 color_read_Blue@tmp 000F  
                         _Int_flag 009E                __end_of_setMotorPWM 1150  
                     _instructions 0AFC                       ??_initUSART4 0006  
             i2_I2C_2_Master_Start 1FFC              buggy_color_response@c 003B  
            buggy_color_response@i 00DC               i2_I2C_2_Master_Write 1FBE  
                         __Hrparam 0000                           __Lrparam 0000  
      card_append@card_count_index 0006                          forward@mL 001F  
                        forward@mR 0021        __end_ofi2_I2C_2_Master_Idle 1EB8  
      __end_ofi2_I2C_2_Master_Stop 1FFC                   _card_count_index 0059  
                  card_append@temp 000E                         _ANSELBbits 000E9A  
                       _ANSELDbits 000EA7        ??_colourcards_normaliseRGBC 002F  
                         ___xxtofl 0E30                         _T0CON0bits 000FD5  
                       _T0CON1bits 000FD6                     _buggyLEDs_init 1F86  
                  ___lwdiv@divisor 000E                 __end_of_initUSART4 1F46  
                  ___lwdiv@counter 0010                           __ptext10 0AFC  
                         __ptext11 15EC                           __ptext20 0FE4  
                         __ptext12 1A1C                           __ptext21 1EB8  
                         __ptext13 1150                           __ptext30 1BB4  
                         __ptext22 19A8                           __ptext14 1A8E  
                         __ptext31 1C04                           __ptext23 13BE  
                         __ptext15 1290                           __ptext40 1F66  
                         __ptext32 1C54                           __ptext24 0E30  
                         __ptext16 16EC                           __ptext33 1FB2  
                         __ptext25 0762                           __ptext17 1F04  
                         __ptext34 1FD4                           __ptext26 1D6E  
                         __ptext18 17AA                           __ptext43 1F9C  
                         __ptext35 1FDE                           __ptext27 14E8  
                         __ptext19 1868                           __ptext44 1FBE  
                         __ptext36 1FE8                           __ptext28 1DDE  
                         __ptext45 1FF2                           __ptext37 1CF0  
                         __ptext29 1B64                           __ptext46 1FFC  
                         __ptext38 1E68                           __ptext47 1E90  
                         __ptext39 1F86                          right_45@i 0027  
                     _SSP2CON1bits 000ED9                       _SSP2CON2bits 000EDA  
              __end_of_timer_reset 1FD4              ?i2_I2C_2_Master_Start 0001  
            ?i2_I2C_2_Master_Write 0001                     instructions@mL 002F  
                   instructions@mR 0031                   _interrupts_clear 1F9C  
                         _right_45 1290                          reverse@mL 001F  
                        reverse@mR 0021                  instructions@count 0033  
                         isa$xinst 000000                         _RC4STAbits 000EE7  
                         int$flags 005A                       ??_motor_init 000A  
                         left_45@i 0027                       ?_card_append 0006  
           __end_of_buggyLEDs_init 1F9C                         _INTCONbits 000FF2  
                     _reverse_pink 1A8E                        _setMotorPWM 0FE4  
                         intlevel1 0000                           intlevel2 0000  
               __end_of_motor_init 1CF0          _colourcards_normaliseRGBC 13BE  
                 reverse_yellow@mL 0029                   reverse_yellow@mR 002B  
                     _timer_append 1D32                       _timer_memory 00A0  
                     motor_init@mL 0006                       motor_init@mR 0008  
                 _color_click_init 1DAA                    ?_buggyLEDs_init 0001  
                       _SSP2DATPPS 000E1D                         _SSP2CLKPPS 000E1C  
                    _get_timer_val 1F04                        _timer_index 0058  
                      _timer_reset 1FCA                   ??_reverse_yellow 002D  
                       _TX4STAbits 000EE8             ??i2_I2C_2_Master_Start 0002  
           ??i2_I2C_2_Master_Write 0002  
