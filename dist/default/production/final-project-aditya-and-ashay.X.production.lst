

Microchip MPLAB XC8 Assembler V2.40 build 20220703182018 
                                                                                               Thu Mar 16 03:10:37 2023

Microchip MPLAB XC8 C Compiler v2.40 (Free license) build 20220703182018 Og1 
     1                           	processor	18F67K40
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1,group=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1,group=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1,group=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1
    47                           	psect	text33,global,reloc=2,class=CODE,delta=1
    48                           	psect	text34,global,reloc=2,class=CODE,delta=1
    49                           	psect	text35,global,reloc=2,class=CODE,delta=1
    50                           	psect	text36,global,reloc=2,class=CODE,delta=1
    51                           	psect	text37,global,reloc=2,class=CODE,delta=1
    52                           	psect	text38,global,reloc=2,class=CODE,delta=1
    53                           	psect	text39,global,reloc=2,class=CODE,delta=1
    54                           	psect	text40,global,reloc=2,class=CODE,delta=1
    55                           	psect	text41,global,reloc=2,class=CODE,delta=1
    56                           	psect	text42,global,reloc=2,class=CODE,delta=1
    57                           	psect	text43,global,reloc=2,class=CODE,delta=1,group=1
    58                           	psect	text44,global,reloc=2,class=CODE,delta=1,group=1
    59                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    60                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    61                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    62                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    63                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    64                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    65   000000                     
    66                           ; Generated 06/04/2022 GMT
    67                           ; 
    68                           ; Copyright Â© 2022, Microchip Technology Inc. and its subsidiaries ("Microchip")
    69                           ; All rights reserved.
    70                           ; 
    71                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    72                           ; 
    73                           ; Redistribution and use in source and binary forms, with or without modification, are
    74                           ; permitted provided that the following conditions are met:
    75                           ; 
    76                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    77                           ;        conditions and the following disclaimer.
    78                           ; 
    79                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    80                           ;        of conditions and the following disclaimer in the documentation and/or other
    81                           ;        materials provided with the distribution. Publication is not required when
    82                           ;        this file is used in an embedded application.
    83                           ; 
    84                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    85                           ;        software without specific prior written permission.
    86                           ; 
    87                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    88                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    89                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    90                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    91                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    92                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    93                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    94                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    95                           ; 
    96                           ; 
    97                           ; Code-generator required, PIC18F67K40 Definitions
    98                           ; 
    99                           ; SFR Addresses
   100   000000                     
   101                           	psect	idataCOMRAM
   102   0023A6                     __pidataCOMRAM:
   103                           	callstack 0
   104                           
   105                           ;initializer for _right_timer
   106   0023A6  0060               	dw	96
   107                           
   108                           ;initializer for _left_timer
   109   0023A8  0062               	dw	98
   110                           
   111                           	psect	idataBANK0
   112   0023AA                     __pidataBANK0:
   113                           	callstack 0
   114                           
   115                           ;initializer for _color_upperbound
   116   0023AA  09C4               	dw	2500
   117   000000                     _TRISFbits	set	3974
   118   000000                     _LATDbits	set	3964
   119   000000                     _TRISGbits	set	3975
   120   000000                     _TRISEbits	set	3973
   121   000000                     _TX4REG	set	3812
   122   000000                     _RC4STAbits	set	3815
   123   000000                     _SP4BRGH	set	3814
   124   000000                     _SSP2CON2bits	set	3802
   125   000000                     _RX4PPS	set	3605
   126   000000                     _SSP2CLKPPS	set	3612
   127   000000                     _SSP2DATPPS	set	3613
   128   000000                     _ANSELDbits	set	3751
   129   000000                     _SSP2ADD	set	3798
   130   000000                     _SSP2CON1bits	set	3801
   131   000000                     _RC4REG	set	3811
   132   000000                     _SP4BRGL	set	3813
   133   000000                     _TX4STAbits	set	3816
   134   000000                     _BAUD4CONbits	set	3817
   135   000000                     _LATAbits	set	3961
   136   000000                     _LATGbits	set	3967
   137   000000                     _SSP2CON2	set	3802
   138   000000                     _TRISDbits	set	3972
   139   000000                     _SSP2STAT	set	3800
   140   000000                     _ANSELFbits	set	3764
   141   000000                     _SSP2BUF	set	3797
   142   000000                     _IPR0bits	set	3615
   143   000000                     _PIE0bits	set	3625
   144   000000                     _PIR4bits	set	3639
   145   000000                     _RC0PPS	set	3682
   146   000000                     _RD5PPS	set	3695
   147   000000                     _RE2PPS	set	3700
   148   000000                     _RD6PPS	set	3696
   149   000000                     _TRISAbits	set	3969
   150   000000                     _LATHbits	set	3968
   151   000000                     _TRISCbits	set	3971
   152   000000                     _LATCbits	set	3963
   153   000000                     _LATEbits	set	3965
   154   000000                     _LATFbits	set	3966
   155   000000                     _RC7PPS	set	3689
   156   000000                     _CCPR4H	set	3873
   157   000000                     _CCPR3H	set	3877
   158   000000                     _TRISHbits	set	3976
   159   000000                     _PORTFbits	set	3982
   160   000000                     _T2PR	set	4028
   161   000000                     _T2CONbits	set	4029
   162   000000                     _CCPR2H	set	4006
   163   000000                     _CCPR1H	set	4010
   164   000000                     _RE4PPS	set	3702
   165   000000                     _RG6PPS	set	3720
   166   000000                     _TMR0L	set	4051
   167   000000                     _TMR0H	set	4052
   168   000000                     _T0CON0bits	set	4053
   169   000000                     _T0CON1bits	set	4054
   170   000000                     _INTCONbits	set	4082
   171   000000                     _T2CLKCONbits	set	4031
   172   000000                     _T2HLTbits	set	4030
   173   000000                     _CCP1CONbits	set	4011
   174   000000                     _CCPTMRS0bits	set	4013
   175   000000                     _CCP2CONbits	set	4007
   176   000000                     _ADREFbits	set	3928
   177   000000                     _CCP3CONbits	set	3878
   178   000000                     _CCP4CONbits	set	3874
   179   000000                     _PIR0bits	set	3635
   180   000000                     _ADPCH	set	3935
   181   000000                     _ADRESH	set	3940
   182   000000                     _ADCON0bits	set	3936
   183                           
   184                           ; #config settings
   185                           
   186                           	psect	cinit
   187   001F12                     __pcinit:
   188                           	callstack 0
   189   001F12                     start_initialization:
   190                           	callstack 0
   191   001F12                     __initialization:
   192                           	callstack 0
   193                           
   194                           ; Initialize objects allocated to BANK0 (2 bytes)
   195                           ; load TBLPTR registers with __pidataBANK0
   196   001F12  0EAA               	movlw	low __pidataBANK0
   197   001F14  6EF6               	movwf	tblptrl,c
   198   001F16  0E23               	movlw	high __pidataBANK0
   199   001F18  6EF7               	movwf	tblptrh,c
   200   001F1A  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   201   001F1C  6EF8               	movwf	tblptru,c
   202   001F1E  0009               	tblrd		*+	;fetch initializer
   203   001F20  CFF5 F0C4          	movff	tablat,__pdataBANK0
   204   001F24  0009               	tblrd		*+	;fetch initializer
   205   001F26  CFF5 F0C5          	movff	tablat,__pdataBANK0+1
   206                           
   207                           ; Initialize objects allocated to COMRAM (4 bytes)
   208                           ; load TBLPTR registers with __pidataCOMRAM
   209   001F2A  0EA6               	movlw	low __pidataCOMRAM
   210   001F2C  6EF6               	movwf	tblptrl,c
   211   001F2E  0E23               	movlw	high __pidataCOMRAM
   212   001F30  6EF7               	movwf	tblptrh,c
   213   001F32  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   214   001F34  6EF8               	movwf	tblptru,c
   215   001F36  EE00  F058         	lfsr	0,__pdataCOMRAM
   216   001F3A  EE10 F004          	lfsr	1,4
   217   001F3E                     copy_data0:
   218   001F3E  0009               	tblrd		*+
   219   001F40  CFF5 FFEE          	movff	tablat,postinc0
   220   001F44  50E5               	movf	postdec1,w,c
   221   001F46  50E1               	movf	fsr1l,w,c
   222   001F48  E1FA               	bnz	copy_data0
   223                           
   224                           ; Clear objects allocated to BANK0 (100 bytes)
   225   001F4A  EE00  F060         	lfsr	0,__pbssBANK0
   226   001F4E  0E64               	movlw	100
   227   001F50                     clear_0:
   228   001F50  6AEE               	clrf	postinc0,c
   229   001F52  06E8               	decf	wreg,f,c
   230   001F54  E1FD               	bnz	clear_0
   231                           
   232                           ; Clear objects allocated to COMRAM (22 bytes)
   233   001F56  EE00  F042         	lfsr	0,__pbssCOMRAM
   234   001F5A  0E16               	movlw	22
   235   001F5C                     clear_1:
   236   001F5C  6AEE               	clrf	postinc0,c
   237   001F5E  06E8               	decf	wreg,f,c
   238   001F60  E1FD               	bnz	clear_1
   239   001F62                     end_of_initialization:
   240                           	callstack 0
   241   001F62                     __end_of__initialization:
   242                           	callstack 0
   243   001F62  905C               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   244   001F64  925C               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   245   001F66  0100               	movlb	0
   246   001F68  EF52  F00F         	goto	_main	;jump to C main() function
   247                           
   248                           	psect	bssCOMRAM
   249   000042                     __pbssCOMRAM:
   250                           	callstack 0
   251   000042                     _timer_index:
   252                           	callstack 0
   253   000042                     	ds	1
   254   000043                     _card_count:
   255                           	callstack 0
   256   000043                     	ds	1
   257   000044                     _color:
   258                           	callstack 0
   259   000044                     	ds	20
   260                           
   261                           	psect	dataCOMRAM
   262   000058                     __pdataCOMRAM:
   263                           	callstack 0
   264   000058                     _right_timer:
   265                           	callstack 0
   266   000058                     	ds	2
   267   00005A                     _left_timer:
   268                           	callstack 0
   269   00005A                     	ds	2
   270                           
   271                           	psect	bssBANK0
   272   000060                     __pbssBANK0:
   273                           	callstack 0
   274   000060                     _timer_memory:
   275                           	callstack 0
   276   000060                     	ds	40
   277   000088                     _card_memory:
   278                           	callstack 0
   279   000088                     	ds	40
   280   0000B0                     _timer_val:
   281                           	callstack 0
   282   0000B0                     	ds	2
   283   0000B2                     _motorR:
   284                           	callstack 0
   285   0000B2                     	ds	9
   286   0000BB                     _motorL:
   287                           	callstack 0
   288   0000BB                     	ds	9
   289                           
   290                           	psect	dataBANK0
   291   0000C4                     __pdataBANK0:
   292                           	callstack 0
   293   0000C4                     _color_upperbound:
   294                           	callstack 0
   295   0000C4                     	ds	2
   296                           
   297                           	psect	cstackBANK0
   298   0000C6                     __pcstackBANK0:
   299                           	callstack 0
   300   0000C6                     ??_main:
   301                           
   302                           ; 1 bytes @ 0x0
   303   0000C6                     	ds	2
   304                           
   305                           	psect	cstackCOMRAM
   306   000001                     __pcstackCOMRAM:
   307                           	callstack 0
   308   000001                     ??_LowISR:
   309   000001                     
   310                           ; 1 bytes @ 0x0
   311   000001                     	ds	2
   312   000003                     ??_I2C_2_Master_Idle:
   313   000003                     ?___wmul:
   314                           	callstack 0
   315   000003                     ?___xxtofl:
   316                           	callstack 0
   317   000003                     delay_ms_func@time:
   318                           	callstack 0
   319   000003                     initDCmotorsPWM@PWMperiod:
   320                           	callstack 0
   321   000003                     motor_init@mL:
   322                           	callstack 0
   323   000003                     custom_delay@temp:
   324                           	callstack 0
   325   000003                     ___wmul@multiplier:
   326                           	callstack 0
   327   000003                     ___flge@ff1:
   328                           	callstack 0
   329   000003                     ___xxtofl@val:
   330                           	callstack 0
   331                           
   332                           ; 4 bytes @ 0x2
   333   000003                     	ds	1
   334   000004                     ??_I2C_2_Master_Read:
   335   000004                     I2C_2_Master_Write@data_byte:
   336                           	callstack 0
   337                           
   338                           ; 1 bytes @ 0x3
   339   000004                     	ds	1
   340   000005                     ??_delay_ms_func:
   341   000005                     ??_custom_delay:
   342   000005                     I2C_2_Master_Read@ack:
   343                           	callstack 0
   344   000005                     color_writetoaddr@value:
   345                           	callstack 0
   346   000005                     motor_init@mR:
   347                           	callstack 0
   348   000005                     ___wmul@multiplicand:
   349                           	callstack 0
   350                           
   351                           ; 2 bytes @ 0x4
   352   000005                     	ds	1
   353   000006                     I2C_2_Master_Read@tmp:
   354                           	callstack 0
   355   000006                     color_writetoaddr@address:
   356                           	callstack 0
   357   000006                     custom_delay@i:
   358                           	callstack 0
   359                           
   360                           ; 2 bytes @ 0x5
   361   000006                     	ds	1
   362   000007                     ??_color_click_init:
   363   000007                     ??___xxtofl:
   364   000007                     ?_color_read_Red:
   365                           	callstack 0
   366   000007                     ?_color_read_Blue:
   367                           	callstack 0
   368   000007                     ?_color_read_Green:
   369                           	callstack 0
   370   000007                     ?_color_read_Clear:
   371                           	callstack 0
   372   000007                     delay_ms_func@i:
   373                           	callstack 0
   374   000007                     ___wmul@product:
   375                           	callstack 0
   376   000007                     ___flge@ff2:
   377                           	callstack 0
   378                           
   379                           ; 4 bytes @ 0x6
   380   000007                     	ds	1
   381   000008                     
   382                           ; 1 bytes @ 0x7
   383   000008                     	ds	1
   384   000009                     ??_color_read_Red:
   385   000009                     ??_color_read_Blue:
   386   000009                     ??_color_read_Green:
   387   000009                     ??_color_read_Clear:
   388   000009                     ?___lwdiv:
   389                           	callstack 0
   390   000009                     ___lwdiv@dividend:
   391                           	callstack 0
   392                           
   393                           ; 2 bytes @ 0x8
   394   000009                     	ds	2
   395   00000B                     ??___flge:
   396   00000B                     ___xxtofl@sign:
   397                           	callstack 0
   398   00000B                     ___lwdiv@divisor:
   399                           	callstack 0
   400                           
   401                           ; 2 bytes @ 0xA
   402   00000B                     	ds	1
   403   00000C                     ___xxtofl@exp:
   404                           	callstack 0
   405   00000C                     color_read_Red@tmp:
   406                           	callstack 0
   407   00000C                     color_read_Blue@tmp:
   408                           	callstack 0
   409   00000C                     color_read_Green@tmp:
   410                           	callstack 0
   411   00000C                     color_read_Clear@tmp:
   412                           	callstack 0
   413                           
   414                           ; 2 bytes @ 0xB
   415   00000C                     	ds	1
   416   00000D                     ___lwdiv@quotient:
   417                           	callstack 0
   418   00000D                     ___xxtofl@arg:
   419                           	callstack 0
   420                           
   421                           ; 4 bytes @ 0xC
   422   00000D                     	ds	2
   423   00000F                     ___lwdiv@counter:
   424                           	callstack 0
   425                           
   426                           ; 1 bytes @ 0xE
   427   00000F                     	ds	1
   428   000010                     setMotorPWM@m:
   429                           	callstack 0
   430                           
   431                           ; 2 bytes @ 0xF
   432   000010                     	ds	1
   433   000011                     ?___fldiv:
   434                           	callstack 0
   435   000011                     ___fldiv@b:
   436                           	callstack 0
   437                           
   438                           ; 4 bytes @ 0x10
   439   000011                     	ds	1
   440   000012                     ??_setMotorPWM:
   441                           
   442                           ; 1 bytes @ 0x11
   443   000012                     	ds	2
   444   000014                     setMotorPWM@posDuty:
   445                           	callstack 0
   446                           
   447                           ; 1 bytes @ 0x13
   448   000014                     	ds	1
   449   000015                     setMotorPWM@negDuty:
   450                           	callstack 0
   451   000015                     ___fldiv@a:
   452                           	callstack 0
   453                           
   454                           ; 4 bytes @ 0x14
   455   000015                     	ds	1
   456   000016                     stop@mL:
   457                           	callstack 0
   458                           
   459                           ; 2 bytes @ 0x15
   460   000016                     	ds	2
   461   000018                     stop@mR:
   462                           	callstack 0
   463                           
   464                           ; 2 bytes @ 0x17
   465   000018                     	ds	1
   466   000019                     ??___fldiv:
   467                           
   468                           ; 1 bytes @ 0x18
   469   000019                     	ds	1
   470   00001A                     stop@i:
   471                           	callstack 0
   472                           
   473                           ; 2 bytes @ 0x19
   474   00001A                     	ds	2
   475   00001C                     forward@mL:
   476                           	callstack 0
   477   00001C                     reverse@mL:
   478                           	callstack 0
   479   00001C                     left_45@mL:
   480                           	callstack 0
   481   00001C                     right_45@mL:
   482                           	callstack 0
   483   00001C                     space@mL:
   484                           	callstack 0
   485                           
   486                           ; 2 bytes @ 0x1B
   487   00001C                     	ds	1
   488   00001D                     ___fldiv@rem:
   489                           	callstack 0
   490                           
   491                           ; 4 bytes @ 0x1C
   492   00001D                     	ds	1
   493   00001E                     forward@mR:
   494                           	callstack 0
   495   00001E                     reverse@mR:
   496                           	callstack 0
   497   00001E                     left_45@mR:
   498                           	callstack 0
   499   00001E                     right_45@mR:
   500                           	callstack 0
   501   00001E                     space@mR:
   502                           	callstack 0
   503                           
   504                           ; 2 bytes @ 0x1D
   505   00001E                     	ds	2
   506   000020                     ??_space:
   507   000020                     left_45@count:
   508                           	callstack 0
   509   000020                     right_45@count:
   510                           	callstack 0
   511                           
   512                           ; 2 bytes @ 0x1F
   513   000020                     	ds	1
   514   000021                     ___fldiv@sign:
   515                           	callstack 0
   516                           
   517                           ; 1 bytes @ 0x20
   518   000021                     	ds	1
   519   000022                     left_45@left_timer:
   520                           	callstack 0
   521   000022                     right_45@right_timer:
   522                           	callstack 0
   523   000022                     ___fldiv@new_exp:
   524                           	callstack 0
   525                           
   526                           ; 2 bytes @ 0x21
   527   000022                     	ds	2
   528   000024                     ??_left_45:
   529   000024                     ??_right_45:
   530   000024                     ___fldiv@grs:
   531                           	callstack 0
   532                           
   533                           ; 4 bytes @ 0x23
   534   000024                     	ds	2
   535   000026                     left_45@i:
   536                           	callstack 0
   537   000026                     right_45@i:
   538                           	callstack 0
   539                           
   540                           ; 2 bytes @ 0x25
   541   000026                     	ds	2
   542   000028                     ___fldiv@bexp:
   543                           	callstack 0
   544   000028                     reverse_yellow@mL:
   545                           	callstack 0
   546   000028                     reverse_pink@mL:
   547                           	callstack 0
   548   000028                     movement@mL:
   549                           	callstack 0
   550                           
   551                           ; 2 bytes @ 0x27
   552   000028                     	ds	1
   553   000029                     ___fldiv@aexp:
   554                           	callstack 0
   555                           
   556                           ; 1 bytes @ 0x28
   557   000029                     	ds	1
   558   00002A                     READcolor@c:
   559                           	callstack 0
   560   00002A                     reverse_yellow@mR:
   561                           	callstack 0
   562   00002A                     reverse_pink@mR:
   563                           	callstack 0
   564   00002A                     movement@mR:
   565                           	callstack 0
   566                           
   567                           ; 2 bytes @ 0x29
   568   00002A                     	ds	2
   569   00002C                     ??_reverse_yellow:
   570   00002C                     ??_reverse_pink:
   571   00002C                     movement@count:
   572                           	callstack 0
   573                           
   574                           ; 2 bytes @ 0x2B
   575   00002C                     	ds	2
   576   00002E                     ??_movement:
   577   00002E                     movement_return@mL:
   578                           	callstack 0
   579                           
   580                           ; 2 bytes @ 0x2D
   581   00002E                     	ds	2
   582   000030                     movement_return@mR:
   583                           	callstack 0
   584                           
   585                           ; 2 bytes @ 0x2F
   586   000030                     	ds	2
   587   000032                     movement_return@count:
   588                           	callstack 0
   589                           
   590                           ; 2 bytes @ 0x31
   591   000032                     	ds	2
   592   000034                     return_home@mL:
   593                           	callstack 0
   594                           
   595                           ; 2 bytes @ 0x33
   596   000034                     	ds	2
   597   000036                     return_home@mR:
   598                           	callstack 0
   599                           
   600                           ; 2 bytes @ 0x35
   601   000036                     	ds	2
   602   000038                     ??_return_home:
   603                           
   604                           ; 1 bytes @ 0x37
   605   000038                     	ds	2
   606   00003A                     buggy_color_response@mL:
   607                           	callstack 0
   608                           
   609                           ; 2 bytes @ 0x39
   610   00003A                     	ds	2
   611   00003C                     buggy_color_response@mR:
   612                           	callstack 0
   613                           
   614                           ; 2 bytes @ 0x3B
   615   00003C                     	ds	2
   616   00003E                     buggy_color_response@c:
   617                           	callstack 0
   618                           
   619                           ; 2 bytes @ 0x3D
   620   00003E                     	ds	2
   621   000040                     ??_buggy_color_response:
   622                           
   623                           ; 1 bytes @ 0x3F
   624   000040                     	ds	2
   625                           
   626 ;;
   627 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   628 ;;
   629 ;; *************** function _main *****************
   630 ;; Defined at:
   631 ;;		line 19 in file "main.c"
   632 ;; Parameters:    Size  Location     Type
   633 ;;		None
   634 ;; Auto vars:     Size  Location     Type
   635 ;;		None
   636 ;; Return value:  Size  Location     Type
   637 ;;                  1    wreg      void 
   638 ;; Registers used:
   639 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   640 ;; Tracked objects:
   641 ;;		On entry : 0/0
   642 ;;		On exit  : 0/0
   643 ;;		Unchanged: 0/0
   644 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   645 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   646 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   647 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   648 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   649 ;;Total ram usage:        2 bytes
   650 ;; Hardware stack levels required when called: 9
   651 ;; This function calls:
   652 ;;		_buggy_color_response
   653 ;;		_complete_initialisation
   654 ;;		_timer_reset
   655 ;; This function is called by:
   656 ;;		Startup code after reset
   657 ;; This function uses a non-reentrant model
   658 ;;
   659                           
   660                           	psect	text0
   661   001EA4                     __ptext0:
   662                           	callstack 0
   663   001EA4                     _main:
   664                           	callstack 22
   665   001EA4                     
   666                           ;main.c: 21:     complete_initialisation();
   667   001EA4  EC7C  F010         	call	_complete_initialisation	;wreg free
   668   001EA8                     l394:
   669   001EA8  A48E               	btfss	142,2,c	;volatile
   670   001EAA  EF59  F00F         	goto	u2501
   671   001EAE  EF5B  F00F         	goto	u2500
   672   001EB2                     u2501:
   673   001EB2  EF62  F00F         	goto	l398
   674   001EB6                     u2500:
   675   001EB6  B68E               	btfsc	142,3,c	;volatile
   676   001EB8  EF60  F00F         	goto	u2511
   677   001EBC  EF62  F00F         	goto	u2510
   678   001EC0                     u2511:
   679   001EC0  EF54  F00F         	goto	l394
   680   001EC4                     u2510:
   681   001EC4                     l398:
   682                           
   683                           ;main.c: 27:     if (!PORTFbits.RF3){_delay((unsigned long)((500)*(64000000/4000.0)));ti
      +                          mer_reset();
   684   001EC4  B68E               	btfsc	142,3,c	;volatile
   685   001EC6  EF67  F00F         	goto	u2521
   686   001ECA  EF69  F00F         	goto	u2520
   687   001ECE                     u2521:
   688   001ECE  EF87  F00F         	goto	l403
   689   001ED2                     u2520:
   690   001ED2  0E29               	movlw	41
   691   001ED4  0100               	movlb	0	; () banked
   692   001ED6  6FC7               	movwf	(??_main+1)& (0+255),b
   693   001ED8  0E96               	movlw	150
   694   001EDA  6FC6               	movwf	??_main& (0+255),b
   695   001EDC  0E7F               	movlw	127
   696   001EDE                     u2537:
   697   001EDE  2EE8               	decfsz	wreg,f,c
   698   001EE0  D7FE               	bra	u2537
   699   001EE2  2FC6               	decfsz	??_main& (0+255),f,b
   700   001EE4  D7FC               	bra	u2537
   701   001EE6  2FC7               	decfsz	(??_main+1)& (0+255),f,b
   702   001EE8  D7FA               	bra	u2537
   703   001EEA  ECAC  F011         	call	_timer_reset	;wreg free
   704   001EEE                     l3223:
   705                           
   706                           ;main.c: 29:         buggy_color_response(&motorL,&motorR,&color);
   707   001EEE  0EBB               	movlw	low _motorL
   708   001EF0  6E3A               	movwf	buggy_color_response@mL^0,c
   709   001EF2  0E00               	movlw	high _motorL
   710   001EF4  6E3B               	movwf	(buggy_color_response@mL+1)^0,c
   711   001EF6  0EB2               	movlw	low _motorR
   712   001EF8  6E3C               	movwf	buggy_color_response@mR^0,c
   713   001EFA  0E00               	movlw	high _motorR
   714   001EFC  6E3D               	movwf	(buggy_color_response@mR+1)^0,c
   715   001EFE  0E44               	movlw	low _color
   716   001F00  6E3E               	movwf	buggy_color_response@c^0,c
   717   001F02  0E00               	movlw	high _color
   718   001F04  6E3F               	movwf	(buggy_color_response@c+1)^0,c
   719   001F06  EC26  F000         	call	_buggy_color_response	;wreg free
   720   001F0A  EF77  F00F         	goto	l3223
   721   001F0E                     l403:
   722   001F0E  EF24  F000         	goto	start
   723   001F12                     __end_of_main:
   724                           	callstack 0
   725                           
   726 ;; *************** function _complete_initialisation *****************
   727 ;; Defined at:
   728 ;;		line 16 in file "initialisation.c"
   729 ;; Parameters:    Size  Location     Type
   730 ;;		None
   731 ;; Auto vars:     Size  Location     Type
   732 ;;		None
   733 ;; Return value:  Size  Location     Type
   734 ;;                  1    wreg      void 
   735 ;; Registers used:
   736 ;;		wreg, status,2, status,0, cstack
   737 ;; Tracked objects:
   738 ;;		On entry : 0/0
   739 ;;		On exit  : 0/0
   740 ;;		Unchanged: 0/0
   741 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   742 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   743 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   744 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   745 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   746 ;;Total ram usage:        0 bytes
   747 ;; Hardware stack levels used: 1
   748 ;; Hardware stack levels required when called: 5
   749 ;; This function calls:
   750 ;;		_ADC_init
   751 ;;		_I2C_2_Master_Init
   752 ;;		_Timer0_init
   753 ;;		_buggyLEDs_init
   754 ;;		_color_click_init
   755 ;;		_initDCmotorsPWM
   756 ;;		_initUSART4
   757 ;;		_interrupts_init
   758 ;;		_motor_init
   759 ;;		_ports_init
   760 ;; This function is called by:
   761 ;;		_main
   762 ;; This function uses a non-reentrant model
   763 ;;
   764                           
   765                           	psect	text1
   766   0020F8                     __ptext1:
   767                           	callstack 0
   768   0020F8                     _complete_initialisation:
   769                           	callstack 25
   770   0020F8                     
   771                           ;initialisation.c: 18:     initDCmotorsPWM(99);
   772   0020F8  0E00               	movlw	0
   773   0020FA  6E04               	movwf	(initDCmotorsPWM@PWMperiod+1)^0,c
   774   0020FC  0E63               	movlw	99
   775   0020FE  6E03               	movwf	initDCmotorsPWM@PWMperiod^0,c
   776   002100  ECD0  F00E         	call	_initDCmotorsPWM	;wreg free
   777   002104                     
   778                           ;initialisation.c: 19:     buggyLEDs_init();
   779   002104  ECA1  F011         	call	_buggyLEDs_init	;wreg free
   780   002108                     
   781                           ;initialisation.c: 20:     ports_init();
   782   002108  EC54  F011         	call	_ports_init	;wreg free
   783   00210C                     
   784                           ;initialisation.c: 21:     motor_init(&motorL,&motorR);
   785   00210C  0EBB               	movlw	low _motorL
   786   00210E  6E03               	movwf	motor_init@mL^0,c
   787   002110  0E00               	movlw	high _motorL
   788   002112  6E04               	movwf	(motor_init@mL+1)^0,c
   789   002114  0EB2               	movlw	low _motorR
   790   002116  6E05               	movwf	motor_init@mR^0,c
   791   002118  0E00               	movlw	high _motorR
   792   00211A  6E06               	movwf	(motor_init@mR+1)^0,c
   793   00211C  EC56  F010         	call	_motor_init	;wreg free
   794   002120                     
   795                           ;initialisation.c: 22:     I2C_2_Master_Init();
   796   002120  EC18  F011         	call	_I2C_2_Master_Init	;wreg free
   797                           
   798                           ;initialisation.c: 23:     color_click_init();
   799   002124  ECFE  F010         	call	_color_click_init	;wreg free
   800   002128                     
   801                           ;initialisation.c: 24:     Timer0_init();
   802   002128  EC84  F011         	call	_Timer0_init	;wreg free
   803   00212C                     
   804                           ;initialisation.c: 25:     interrupts_init();
   805   00212C  ECB6  F011         	call	_interrupts_init	;wreg free
   806   002130                     
   807                           ;initialisation.c: 26:     initUSART4();
   808   002130  EC64  F011         	call	_initUSART4	;wreg free
   809   002134                     
   810                           ;initialisation.c: 27:     ADC_init();
   811   002134  EC94  F011         	call	_ADC_init	;wreg free
   812   002138  0012               	return		;funcret
   813   00213A                     __end_of_complete_initialisation:
   814                           	callstack 0
   815                           
   816 ;; *************** function _ports_init *****************
   817 ;; Defined at:
   818 ;;		line 8 in file "lights_buttons.c"
   819 ;; Parameters:    Size  Location     Type
   820 ;;		None
   821 ;; Auto vars:     Size  Location     Type
   822 ;;		None
   823 ;; Return value:  Size  Location     Type
   824 ;;                  1    wreg      void 
   825 ;; Registers used:
   826 ;;		None
   827 ;; Tracked objects:
   828 ;;		On entry : 0/0
   829 ;;		On exit  : 0/0
   830 ;;		Unchanged: 0/0
   831 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   832 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   833 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   834 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   835 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   836 ;;Total ram usage:        0 bytes
   837 ;; Hardware stack levels used: 1
   838 ;; Hardware stack levels required when called: 1
   839 ;; This function calls:
   840 ;;		Nothing
   841 ;; This function is called by:
   842 ;;		_complete_initialisation
   843 ;; This function uses a non-reentrant model
   844 ;;
   845                           
   846                           	psect	text2
   847   0022A8                     __ptext2:
   848                           	callstack 0
   849   0022A8                     _ports_init:
   850                           	callstack 28
   851   0022A8                     
   852                           ;lights_buttons.c: 10:     TRISGbits.TRISG1 = 0;
   853   0022A8  9287               	bcf	135,1,c	;volatile
   854                           
   855                           ;lights_buttons.c: 11:     TRISAbits.TRISA4 = 0;
   856   0022AA  9881               	bcf	129,4,c	;volatile
   857                           
   858                           ;lights_buttons.c: 12:     TRISFbits.TRISF7 = 0;
   859   0022AC  9E86               	bcf	134,7,c	;volatile
   860                           
   861                           ;lights_buttons.c: 14:     LATGbits.LATG1 = 1;
   862   0022AE  827F               	bsf	127,1,c	;volatile
   863                           
   864                           ;lights_buttons.c: 15:     LATAbits.LATA4 = 1;
   865   0022B0  8879               	bsf	121,4,c	;volatile
   866                           
   867                           ;lights_buttons.c: 16:     LATFbits.LATF7 = 1;
   868   0022B2  8E7E               	bsf	126,7,c	;volatile
   869                           
   870                           ;lights_buttons.c: 18:     TRISFbits.TRISF2=1;
   871   0022B4  8486               	bsf	134,2,c	;volatile
   872                           
   873                           ;lights_buttons.c: 19:     ANSELFbits.ANSELF2=0;
   874   0022B6  010E               	movlb	14	; () banked
   875   0022B8  95B4               	bcf	180,2,b	;volatile
   876                           
   877                           ;lights_buttons.c: 21:     TRISFbits.TRISF3= 1;
   878   0022BA  8686               	bsf	134,3,c	;volatile
   879                           
   880                           ;lights_buttons.c: 22:     ANSELFbits.ANSELF3 = 0;
   881   0022BC  97B4               	bcf	180,3,b	;volatile
   882                           
   883                           ;lights_buttons.c: 24:     TRISDbits.TRISD7 = 0;
   884   0022BE  9E84               	bcf	132,7,c	;volatile
   885                           
   886                           ;lights_buttons.c: 25:     LATDbits.LATD7 = 0;
   887   0022C0  9E7C               	bcf	124,7,c	;volatile
   888                           
   889                           ;lights_buttons.c: 27:     TRISHbits.TRISH3 = 0;
   890   0022C2  9688               	bcf	136,3,c	;volatile
   891                           
   892                           ;lights_buttons.c: 28:     LATHbits.LATH3 = 0;
   893   0022C4  9680               	bcf	128,3,c	;volatile
   894   0022C6                     
   895                           ; BSR set to: 14
   896   0022C6  0012               	return		;funcret
   897   0022C8                     __end_of_ports_init:
   898                           	callstack 0
   899                           
   900 ;; *************** function _motor_init *****************
   901 ;; Defined at:
   902 ;;		line 104 in file "dc_motor.c"
   903 ;; Parameters:    Size  Location     Type
   904 ;;  mL              2    2[COMRAM] PTR struct DC_motor
   905 ;;		 -> motorL(9), 
   906 ;;  mR              2    4[COMRAM] PTR struct DC_motor
   907 ;;		 -> motorR(9), 
   908 ;; Auto vars:     Size  Location     Type
   909 ;;		None
   910 ;; Return value:  Size  Location     Type
   911 ;;                  1    wreg      void 
   912 ;; Registers used:
   913 ;;		wreg, status,2, status,0
   914 ;; Tracked objects:
   915 ;;		On entry : 0/0
   916 ;;		On exit  : 0/0
   917 ;;		Unchanged: 0/0
   918 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   919 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   920 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   921 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   922 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   923 ;;Total ram usage:        4 bytes
   924 ;; Hardware stack levels used: 1
   925 ;; Hardware stack levels required when called: 1
   926 ;; This function calls:
   927 ;;		Nothing
   928 ;; This function is called by:
   929 ;;		_complete_initialisation
   930 ;; This function uses a non-reentrant model
   931 ;;
   932                           
   933                           	psect	text3
   934   0020AC                     __ptext3:
   935                           	callstack 0
   936   0020AC                     _motor_init:
   937                           	callstack 28
   938   0020AC                     
   939                           ;dc_motor.c: 104: void motor_init(DC_motor *mL, DC_motor *mR);dc_motor.c: 105: {;dc_moto
      +                          r.c: 106:     motorL.power=0;
   940   0020AC  0E00               	movlw	0
   941   0020AE  0100               	movlb	0	; () banked
   942   0020B0  6FBB               	movwf	_motorL& (0+255),b
   943                           
   944                           ;dc_motor.c: 107:     motorL.direction=1;
   945   0020B2  0E01               	movlw	1
   946   0020B4  6FBC               	movwf	(_motorL+1)& (0+255),b
   947                           
   948                           ;dc_motor.c: 108:     motorL.brakemode=1;
   949   0020B6  0E01               	movlw	1
   950   0020B8  6FBD               	movwf	(_motorL+2)& (0+255),b
   951   0020BA                     
   952                           ; BSR set to: 0
   953                           ;dc_motor.c: 109:     motorL.posDutyHighByte=(unsigned char *)(&CCPR1H);
   954   0020BA  0EAA               	movlw	170
   955   0020BC  6FC0               	movwf	(_motorL+5)& (0+255),b
   956   0020BE  0E0F               	movlw	15
   957   0020C0  6FC1               	movwf	(_motorL+6)& (0+255),b
   958   0020C2                     
   959                           ; BSR set to: 0
   960                           ;dc_motor.c: 110:     motorL.negDutyHighByte=(unsigned char *)(&CCPR2H);
   961   0020C2  0EA6               	movlw	166
   962   0020C4  6FC2               	movwf	(_motorL+7)& (0+255),b
   963   0020C6  0E0F               	movlw	15
   964   0020C8  6FC3               	movwf	(_motorL+8)& (0+255),b
   965                           
   966                           ;dc_motor.c: 111:     motorL.PWMperiod=99;
   967   0020CA  0E00               	movlw	0
   968   0020CC  6FBF               	movwf	(_motorL+4)& (0+255),b
   969   0020CE  0E63               	movlw	99
   970   0020D0  6FBE               	movwf	(_motorL+3)& (0+255),b
   971                           
   972                           ;dc_motor.c: 113:     motorR.power=0;
   973   0020D2  0E00               	movlw	0
   974   0020D4  6FB2               	movwf	_motorR& (0+255),b
   975                           
   976                           ;dc_motor.c: 114:     motorR.direction=1;
   977   0020D6  0E01               	movlw	1
   978   0020D8  6FB3               	movwf	(_motorR+1)& (0+255),b
   979                           
   980                           ;dc_motor.c: 115:     motorR.brakemode=1;
   981   0020DA  0E01               	movlw	1
   982   0020DC  6FB4               	movwf	(_motorR+2)& (0+255),b
   983   0020DE                     
   984                           ; BSR set to: 0
   985                           ;dc_motor.c: 116:     motorR.posDutyHighByte=(unsigned char *)(&CCPR3H);
   986   0020DE  0E25               	movlw	37
   987   0020E0  6FB7               	movwf	(_motorR+5)& (0+255),b
   988   0020E2  0E0F               	movlw	15
   989   0020E4  6FB8               	movwf	(_motorR+6)& (0+255),b
   990   0020E6                     
   991                           ; BSR set to: 0
   992                           ;dc_motor.c: 117:     motorR.negDutyHighByte=(unsigned char *)(&CCPR4H);
   993   0020E6  0E21               	movlw	33
   994   0020E8  6FB9               	movwf	(_motorR+7)& (0+255),b
   995   0020EA  0E0F               	movlw	15
   996   0020EC  6FBA               	movwf	(_motorR+8)& (0+255),b
   997                           
   998                           ;dc_motor.c: 118:     motorR.PWMperiod=99;
   999   0020EE  0E00               	movlw	0
  1000   0020F0  6FB6               	movwf	(_motorR+4)& (0+255),b
  1001   0020F2  0E63               	movlw	99
  1002   0020F4  6FB5               	movwf	(_motorR+3)& (0+255),b
  1003   0020F6                     
  1004                           ; BSR set to: 0
  1005   0020F6  0012               	return		;funcret
  1006   0020F8                     __end_of_motor_init:
  1007                           	callstack 0
  1008                           
  1009 ;; *************** function _interrupts_init *****************
  1010 ;; Defined at:
  1011 ;;		line 9 in file "interrupts.c"
  1012 ;; Parameters:    Size  Location     Type
  1013 ;;		None
  1014 ;; Auto vars:     Size  Location     Type
  1015 ;;		None
  1016 ;; Return value:  Size  Location     Type
  1017 ;;                  1    wreg      void 
  1018 ;; Registers used:
  1019 ;;		None
  1020 ;; Tracked objects:
  1021 ;;		On entry : 0/0
  1022 ;;		On exit  : 0/0
  1023 ;;		Unchanged: 0/0
  1024 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1025 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1026 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1027 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1028 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1029 ;;Total ram usage:        0 bytes
  1030 ;; Hardware stack levels used: 1
  1031 ;; Hardware stack levels required when called: 1
  1032 ;; This function calls:
  1033 ;;		Nothing
  1034 ;; This function is called by:
  1035 ;;		_complete_initialisation
  1036 ;; This function uses a non-reentrant model
  1037 ;;
  1038                           
  1039                           	psect	text4
  1040   00236C                     __ptext4:
  1041                           	callstack 0
  1042   00236C                     _interrupts_init:
  1043                           	callstack 28
  1044   00236C                     
  1045                           ;interrupts.c: 11:     PIE0bits.TMR0IE = 1;
  1046   00236C  010E               	movlb	14	; () banked
  1047   00236E  8B29               	bsf	41,5,b	;volatile
  1048                           
  1049                           ;interrupts.c: 12:     PIR0bits.TMR0IF = 0;
  1050   002370  9B33               	bcf	51,5,b	;volatile
  1051                           
  1052                           ;interrupts.c: 13:     IPR0bits.TMR0IP = 0;
  1053   002372  9B1F               	bcf	31,5,b	;volatile
  1054                           
  1055                           ;interrupts.c: 15:     INTCONbits.IPEN = 1;
  1056   002374  8AF2               	bsf	242,5,c	;volatile
  1057                           
  1058                           ;interrupts.c: 16:     INTCONbits.PEIE = 1;
  1059   002376  8CF2               	bsf	242,6,c	;volatile
  1060                           
  1061                           ;interrupts.c: 17:     INTCONbits.GIE = 1;
  1062   002378  8EF2               	bsf	242,7,c	;volatile
  1063   00237A                     
  1064                           ; BSR set to: 14
  1065   00237A  0012               	return		;funcret
  1066   00237C                     __end_of_interrupts_init:
  1067                           	callstack 0
  1068                           
  1069 ;; *************** function _initUSART4 *****************
  1070 ;; Defined at:
  1071 ;;		line 7 in file "serial.c"
  1072 ;; Parameters:    Size  Location     Type
  1073 ;;		None
  1074 ;; Auto vars:     Size  Location     Type
  1075 ;;		None
  1076 ;; Return value:  Size  Location     Type
  1077 ;;                  1    wreg      void 
  1078 ;; Registers used:
  1079 ;;		wreg, status,2
  1080 ;; Tracked objects:
  1081 ;;		On entry : 0/0
  1082 ;;		On exit  : 0/0
  1083 ;;		Unchanged: 0/0
  1084 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1085 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1086 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1087 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1088 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1089 ;;Total ram usage:        0 bytes
  1090 ;; Hardware stack levels used: 1
  1091 ;; Hardware stack levels required when called: 1
  1092 ;; This function calls:
  1093 ;;		Nothing
  1094 ;; This function is called by:
  1095 ;;		_complete_initialisation
  1096 ;; This function uses a non-reentrant model
  1097 ;;
  1098                           
  1099                           	psect	text5
  1100   0022C8                     __ptext5:
  1101                           	callstack 0
  1102   0022C8                     _initUSART4:
  1103                           	callstack 28
  1104   0022C8                     
  1105                           ;serial.c: 9:     RC0PPS = 0x12;
  1106   0022C8  0E12               	movlw	18
  1107   0022CA  010E               	movlb	14	; () banked
  1108   0022CC  6F62               	movwf	98,b	;volatile
  1109                           
  1110                           ;serial.c: 10:     RX4PPS = 0x11;
  1111   0022CE  0E11               	movlw	17
  1112   0022D0  6F15               	movwf	21,b	;volatile
  1113   0022D2                     
  1114                           ; BSR set to: 14
  1115                           ;serial.c: 11:     TRISCbits.TRISC1 = 1;
  1116   0022D2  8283               	bsf	131,1,c	;volatile
  1117   0022D4                     
  1118                           ; BSR set to: 14
  1119                           ;serial.c: 14:     BAUD4CONbits.BRG16 = 0;
  1120   0022D4  97E9               	bcf	233,3,b	;volatile
  1121   0022D6                     
  1122                           ; BSR set to: 14
  1123                           ;serial.c: 15:     TX4STAbits.BRGH = 0;
  1124   0022D6  95E8               	bcf	232,2,b	;volatile
  1125                           
  1126                           ;serial.c: 16:     SP4BRGL = 51;
  1127   0022D8  0E33               	movlw	51
  1128   0022DA  6FE5               	movwf	229,b	;volatile
  1129                           
  1130                           ;serial.c: 17:     SP4BRGH = 0;
  1131   0022DC  0E00               	movlw	0
  1132   0022DE  6FE6               	movwf	230,b	;volatile
  1133   0022E0                     
  1134                           ; BSR set to: 14
  1135                           ;serial.c: 19:     RC4STAbits.CREN = 1;
  1136   0022E0  89E7               	bsf	231,4,b	;volatile
  1137   0022E2                     
  1138                           ; BSR set to: 14
  1139                           ;serial.c: 20:     TX4STAbits.TXEN = 1;
  1140   0022E2  8BE8               	bsf	232,5,b	;volatile
  1141   0022E4                     
  1142                           ; BSR set to: 14
  1143                           ;serial.c: 21:     RC4STAbits.SPEN = 1;
  1144   0022E4  8FE7               	bsf	231,7,b	;volatile
  1145   0022E6                     
  1146                           ; BSR set to: 14
  1147   0022E6  0012               	return		;funcret
  1148   0022E8                     __end_of_initUSART4:
  1149                           	callstack 0
  1150                           
  1151 ;; *************** function _initDCmotorsPWM *****************
  1152 ;; Defined at:
  1153 ;;		line 11 in file "dc_motor.c"
  1154 ;; Parameters:    Size  Location     Type
  1155 ;;  PWMperiod       2    2[COMRAM] unsigned int 
  1156 ;; Auto vars:     Size  Location     Type
  1157 ;;		None
  1158 ;; Return value:  Size  Location     Type
  1159 ;;                  1    wreg      void 
  1160 ;; Registers used:
  1161 ;;		wreg, status,2
  1162 ;; Tracked objects:
  1163 ;;		On entry : 0/0
  1164 ;;		On exit  : 0/0
  1165 ;;		Unchanged: 0/0
  1166 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1167 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1168 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1169 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1170 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1171 ;;Total ram usage:        2 bytes
  1172 ;; Hardware stack levels used: 1
  1173 ;; Hardware stack levels required when called: 1
  1174 ;; This function calls:
  1175 ;;		Nothing
  1176 ;; This function is called by:
  1177 ;;		_complete_initialisation
  1178 ;; This function uses a non-reentrant model
  1179 ;;
  1180                           
  1181                           	psect	text6
  1182   001DA0                     __ptext6:
  1183                           	callstack 0
  1184   001DA0                     _initDCmotorsPWM:
  1185                           	callstack 28
  1186   001DA0                     
  1187                           ;dc_motor.c: 13:     TRISEbits.TRISE2 = 0;
  1188   001DA0  9485               	bcf	133,2,c	;volatile
  1189                           
  1190                           ;dc_motor.c: 14:     TRISEbits.TRISE4 = 0;
  1191   001DA2  9885               	bcf	133,4,c	;volatile
  1192                           
  1193                           ;dc_motor.c: 15:     TRISCbits.TRISC7 = 0;
  1194   001DA4  9E83               	bcf	131,7,c	;volatile
  1195                           
  1196                           ;dc_motor.c: 16:     TRISGbits.TRISG6 = 0;
  1197   001DA6  9C87               	bcf	135,6,c	;volatile
  1198                           
  1199                           ;dc_motor.c: 18:     LATEbits.LATE2 = 0;
  1200   001DA8  947D               	bcf	125,2,c	;volatile
  1201                           
  1202                           ;dc_motor.c: 19:     LATEbits.LATE4 = 0;
  1203   001DAA  987D               	bcf	125,4,c	;volatile
  1204                           
  1205                           ;dc_motor.c: 20:     LATCbits.LATC7 = 0;
  1206   001DAC  9E7B               	bcf	123,7,c	;volatile
  1207                           
  1208                           ;dc_motor.c: 21:     LATGbits.LATG6 = 0;
  1209   001DAE  9C7F               	bcf	127,6,c	;volatile
  1210   001DB0                     
  1211                           ;dc_motor.c: 24:     RE2PPS=0x05;
  1212   001DB0  0E05               	movlw	5
  1213   001DB2  010E               	movlb	14	; () banked
  1214   001DB4  6F74               	movwf	116,b	;volatile
  1215                           
  1216                           ;dc_motor.c: 25:     RE4PPS=0x06;
  1217   001DB6  0E06               	movlw	6
  1218   001DB8  6F76               	movwf	118,b	;volatile
  1219                           
  1220                           ;dc_motor.c: 26:     RC7PPS=0x07;
  1221   001DBA  0E07               	movlw	7
  1222   001DBC  6F69               	movwf	105,b	;volatile
  1223                           
  1224                           ;dc_motor.c: 27:     RG6PPS=0x08;
  1225   001DBE  0E08               	movlw	8
  1226   001DC0  6F88               	movwf	136,b	;volatile
  1227                           
  1228                           ;dc_motor.c: 30:     T2CONbits.CKPS=0b100;
  1229   001DC2  50BD               	movf	189,w,c	;volatile
  1230   001DC4  0B8F               	andlw	-113
  1231   001DC6  0940               	iorlw	64
  1232   001DC8  6EBD               	movwf	189,c	;volatile
  1233                           
  1234                           ;dc_motor.c: 31:     T2HLTbits.MODE=0b00000;
  1235   001DCA  0EE0               	movlw	-32
  1236   001DCC  16BE               	andwf	190,f,c	;volatile
  1237                           
  1238                           ;dc_motor.c: 32:     T2CLKCONbits.CS=0b0001;
  1239   001DCE  50BF               	movf	191,w,c	;volatile
  1240   001DD0  0BF0               	andlw	-16
  1241   001DD2  0901               	iorlw	1
  1242   001DD4  6EBF               	movwf	191,c	;volatile
  1243   001DD6                     
  1244                           ; BSR set to: 14
  1245                           ;dc_motor.c: 36:     T2PR=PWMperiod;
  1246   001DD6  C003  FFBC         	movff	initDCmotorsPWM@PWMperiod,4028	;volatile
  1247   001DDA                     
  1248                           ; BSR set to: 14
  1249                           ;dc_motor.c: 37:     T2CONbits.ON=1;
  1250   001DDA  8EBD               	bsf	189,7,c	;volatile
  1251                           
  1252                           ;dc_motor.c: 41:     CCPR1H=0;
  1253   001DDC  0E00               	movlw	0
  1254   001DDE  6EAA               	movwf	170,c	;volatile
  1255                           
  1256                           ;dc_motor.c: 42:     CCPR2H=0;
  1257   001DE0  0E00               	movlw	0
  1258   001DE2  6EA6               	movwf	166,c	;volatile
  1259                           
  1260                           ;dc_motor.c: 43:     CCPR3H=0;
  1261   001DE4  0E00               	movlw	0
  1262   001DE6  010F               	movlb	15	; () banked
  1263   001DE8  6F25               	movwf	37,b	;volatile
  1264                           
  1265                           ;dc_motor.c: 44:     CCPR4H=0;
  1266   001DEA  0E00               	movlw	0
  1267   001DEC  6F21               	movwf	33,b	;volatile
  1268                           
  1269                           ;dc_motor.c: 47:     CCPTMRS0bits.C1TSEL=0;
  1270   001DEE  0EFC               	movlw	-4
  1271   001DF0  16AD               	andwf	173,f,c	;volatile
  1272                           
  1273                           ;dc_motor.c: 48:     CCPTMRS0bits.C2TSEL=0;
  1274   001DF2  0EF3               	movlw	-13
  1275   001DF4  16AD               	andwf	173,f,c	;volatile
  1276                           
  1277                           ;dc_motor.c: 49:     CCPTMRS0bits.C3TSEL=0;
  1278   001DF6  0ECF               	movlw	-49
  1279   001DF8  16AD               	andwf	173,f,c	;volatile
  1280                           
  1281                           ;dc_motor.c: 50:     CCPTMRS0bits.C4TSEL=0;
  1282   001DFA  0E3F               	movlw	-193
  1283   001DFC  16AD               	andwf	173,f,c	;volatile
  1284   001DFE                     
  1285                           ; BSR set to: 15
  1286                           ;dc_motor.c: 53:     CCP1CONbits.FMT=1;
  1287   001DFE  88AB               	bsf	171,4,c	;volatile
  1288                           
  1289                           ;dc_motor.c: 54:     CCP1CONbits.CCP1MODE=0b1100;
  1290   001E00  50AB               	movf	171,w,c	;volatile
  1291   001E02  0BF0               	andlw	-16
  1292   001E04  090C               	iorlw	12
  1293   001E06  6EAB               	movwf	171,c	;volatile
  1294   001E08                     
  1295                           ; BSR set to: 15
  1296                           ;dc_motor.c: 55:     CCP1CONbits.EN=1;
  1297   001E08  8EAB               	bsf	171,7,c	;volatile
  1298   001E0A                     
  1299                           ; BSR set to: 15
  1300                           ;dc_motor.c: 58:     CCP2CONbits.FMT=1;
  1301   001E0A  88A7               	bsf	167,4,c	;volatile
  1302                           
  1303                           ;dc_motor.c: 59:     CCP2CONbits.CCP2MODE=0b1100;
  1304   001E0C  50A7               	movf	167,w,c	;volatile
  1305   001E0E  0BF0               	andlw	-16
  1306   001E10  090C               	iorlw	12
  1307   001E12  6EA7               	movwf	167,c	;volatile
  1308   001E14                     
  1309                           ; BSR set to: 15
  1310                           ;dc_motor.c: 60:     CCP2CONbits.EN=1;
  1311   001E14  8EA7               	bsf	167,7,c	;volatile
  1312   001E16                     
  1313                           ; BSR set to: 15
  1314                           ;dc_motor.c: 64:     CCP3CONbits.FMT=1;
  1315   001E16  8926               	bsf	38,4,b	;volatile
  1316                           
  1317                           ;dc_motor.c: 65:     CCP3CONbits.CCP3MODE=0b1100;
  1318   001E18  5126               	movf	38,w,b	;volatile
  1319   001E1A  0BF0               	andlw	-16
  1320   001E1C  090C               	iorlw	12
  1321   001E1E  6F26               	movwf	38,b	;volatile
  1322   001E20                     
  1323                           ; BSR set to: 15
  1324                           ;dc_motor.c: 66:     CCP3CONbits.EN=1;
  1325   001E20  8F26               	bsf	38,7,b	;volatile
  1326   001E22                     
  1327                           ; BSR set to: 15
  1328                           ;dc_motor.c: 69:     CCP4CONbits.FMT=1;
  1329   001E22  8922               	bsf	34,4,b	;volatile
  1330                           
  1331                           ;dc_motor.c: 70:     CCP4CONbits.CCP4MODE=0b1100;
  1332   001E24  5122               	movf	34,w,b	;volatile
  1333   001E26  0BF0               	andlw	-16
  1334   001E28  090C               	iorlw	12
  1335   001E2A  6F22               	movwf	34,b	;volatile
  1336   001E2C                     
  1337                           ; BSR set to: 15
  1338                           ;dc_motor.c: 71:     CCP4CONbits.EN=1;
  1339   001E2C  8F22               	bsf	34,7,b	;volatile
  1340   001E2E                     
  1341                           ; BSR set to: 15
  1342   001E2E  0012               	return		;funcret
  1343   001E30                     __end_of_initDCmotorsPWM:
  1344                           	callstack 0
  1345                           
  1346 ;; *************** function _color_click_init *****************
  1347 ;; Defined at:
  1348 ;;		line 13 in file "color.c"
  1349 ;; Parameters:    Size  Location     Type
  1350 ;;		None
  1351 ;; Auto vars:     Size  Location     Type
  1352 ;;		None
  1353 ;; Return value:  Size  Location     Type
  1354 ;;                  1    wreg      void 
  1355 ;; Registers used:
  1356 ;;		wreg, status,2, status,0, cstack
  1357 ;; Tracked objects:
  1358 ;;		On entry : 0/0
  1359 ;;		On exit  : 0/0
  1360 ;;		Unchanged: 0/0
  1361 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1362 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1363 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1364 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1365 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1366 ;;Total ram usage:        1 bytes
  1367 ;; Hardware stack levels used: 1
  1368 ;; Hardware stack levels required when called: 4
  1369 ;; This function calls:
  1370 ;;		_I2C_2_Master_Init
  1371 ;;		_color_writetoaddr
  1372 ;; This function is called by:
  1373 ;;		_complete_initialisation
  1374 ;; This function uses a non-reentrant model
  1375 ;;
  1376                           
  1377                           	psect	text7
  1378   0021FC                     __ptext7:
  1379                           	callstack 0
  1380   0021FC                     _color_click_init:
  1381                           	callstack 25
  1382   0021FC                     
  1383                           ;color.c: 16:     I2C_2_Master_Init();
  1384   0021FC  EC18  F011         	call	_I2C_2_Master_Init	;wreg free
  1385   002200                     
  1386                           ;color.c: 18:   color_writetoaddr(0x00, 0x01);
  1387   002200  0E01               	movlw	1
  1388   002202  6E05               	movwf	color_writetoaddr@value^0,c
  1389   002204  0E00               	movlw	0
  1390   002206  EC74  F011         	call	_color_writetoaddr
  1391   00220A                     
  1392                           ;color.c: 19:     _delay((unsigned long)((3)*(64000000/4000.0)));
  1393   00220A  0E3F               	movlw	63
  1394   00220C  6E07               	movwf	??_color_click_init^0,c
  1395   00220E  0E55               	movlw	85
  1396   002210                     u2547:
  1397   002210  2EE8               	decfsz	wreg,f,c
  1398   002212  D7FE               	bra	u2547
  1399   002214  2E07               	decfsz	??_color_click_init^0,f,c
  1400   002216  D7FC               	bra	u2547
  1401   002218  F000               	nop	
  1402   00221A                     
  1403                           ;color.c: 21:  color_writetoaddr(0x00, 0x03);
  1404   00221A  0E03               	movlw	3
  1405   00221C  6E05               	movwf	color_writetoaddr@value^0,c
  1406   00221E  0E00               	movlw	0
  1407   002220  EC74  F011         	call	_color_writetoaddr
  1408   002224                     
  1409                           ;color.c: 23:  color_writetoaddr(0x01, 0xD5);
  1410   002224  0ED5               	movlw	213
  1411   002226  6E05               	movwf	color_writetoaddr@value^0,c
  1412   002228  0E01               	movlw	1
  1413   00222A  EC74  F011         	call	_color_writetoaddr
  1414   00222E  0012               	return		;funcret
  1415   002230                     __end_of_color_click_init:
  1416                           	callstack 0
  1417                           
  1418 ;; *************** function _color_writetoaddr *****************
  1419 ;; Defined at:
  1420 ;;		line 28 in file "color.c"
  1421 ;; Parameters:    Size  Location     Type
  1422 ;;  address         1    wreg     unsigned char 
  1423 ;;  value           1    4[COMRAM] unsigned char 
  1424 ;; Auto vars:     Size  Location     Type
  1425 ;;  address         1    5[COMRAM] unsigned char 
  1426 ;; Return value:  Size  Location     Type
  1427 ;;                  1    wreg      void 
  1428 ;; Registers used:
  1429 ;;		wreg, status,2, status,0, cstack
  1430 ;; Tracked objects:
  1431 ;;		On entry : 0/0
  1432 ;;		On exit  : 0/0
  1433 ;;		Unchanged: 0/0
  1434 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1435 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1436 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1437 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1438 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1439 ;;Total ram usage:        2 bytes
  1440 ;; Hardware stack levels used: 1
  1441 ;; Hardware stack levels required when called: 3
  1442 ;; This function calls:
  1443 ;;		_I2C_2_Master_Start
  1444 ;;		_I2C_2_Master_Stop
  1445 ;;		_I2C_2_Master_Write
  1446 ;; This function is called by:
  1447 ;;		_color_click_init
  1448 ;; This function uses a non-reentrant model
  1449 ;;
  1450                           
  1451                           	psect	text8
  1452   0022E8                     __ptext8:
  1453                           	callstack 0
  1454   0022E8                     _color_writetoaddr:
  1455                           	callstack 25
  1456                           
  1457                           ;incstack = 0
  1458                           ;color_writetoaddr@address stored from wreg
  1459   0022E8  6E06               	movwf	color_writetoaddr@address^0,c
  1460   0022EA                     
  1461                           ;color.c: 29:     I2C_2_Master_Start();
  1462   0022EA  ECC9  F011         	call	_I2C_2_Master_Start	;wreg free
  1463                           
  1464                           ;color.c: 30:     I2C_2_Master_Write(0x52 | 0x00);
  1465   0022EE  0E52               	movlw	82
  1466   0022F0  ECBE  F011         	call	_I2C_2_Master_Write
  1467                           
  1468                           ;color.c: 31:     I2C_2_Master_Write(0x80 | address);
  1469   0022F4  5006               	movf	color_writetoaddr@address^0,w,c
  1470   0022F6  0980               	iorlw	128
  1471   0022F8  ECBE  F011         	call	_I2C_2_Master_Write
  1472                           
  1473                           ;color.c: 32:     I2C_2_Master_Write(value);
  1474   0022FC  5005               	movf	color_writetoaddr@value^0,w,c
  1475   0022FE  ECBE  F011         	call	_I2C_2_Master_Write
  1476                           
  1477                           ;color.c: 33:     I2C_2_Master_Stop();
  1478   002302  ECC4  F011         	call	_I2C_2_Master_Stop	;wreg free
  1479   002306  0012               	return		;funcret
  1480   002308                     __end_of_color_writetoaddr:
  1481                           	callstack 0
  1482                           
  1483 ;; *************** function _I2C_2_Master_Init *****************
  1484 ;; Defined at:
  1485 ;;		line 7 in file "i2c.c"
  1486 ;; Parameters:    Size  Location     Type
  1487 ;;		None
  1488 ;; Auto vars:     Size  Location     Type
  1489 ;;		None
  1490 ;; Return value:  Size  Location     Type
  1491 ;;                  1    wreg      void 
  1492 ;; Registers used:
  1493 ;;		wreg, status,2
  1494 ;; Tracked objects:
  1495 ;;		On entry : 0/0
  1496 ;;		On exit  : 0/0
  1497 ;;		Unchanged: 0/0
  1498 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1499 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1500 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1501 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1502 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1503 ;;Total ram usage:        0 bytes
  1504 ;; Hardware stack levels used: 1
  1505 ;; Hardware stack levels required when called: 1
  1506 ;; This function calls:
  1507 ;;		Nothing
  1508 ;; This function is called by:
  1509 ;;		_color_click_init
  1510 ;;		_complete_initialisation
  1511 ;; This function uses a non-reentrant model
  1512 ;;
  1513                           
  1514                           	psect	text9
  1515   002230                     __ptext9:
  1516                           	callstack 0
  1517   002230                     _I2C_2_Master_Init:
  1518                           	callstack 27
  1519   002230                     
  1520                           ;i2c.c: 10:   SSP2CON1bits.SSPM= 0b1000;
  1521   002230  010E               	movlb	14	; () banked
  1522   002232  51D9               	movf	217,w,b	;volatile
  1523   002234  0BF0               	andlw	-16
  1524   002236  0908               	iorlw	8
  1525   002238  6FD9               	movwf	217,b	;volatile
  1526   00223A                     
  1527                           ; BSR set to: 14
  1528                           ;i2c.c: 11:   SSP2CON1bits.SSPEN = 1;
  1529   00223A  8BD9               	bsf	217,5,b	;volatile
  1530                           
  1531                           ;i2c.c: 12:   SSP2ADD = (64000000/(4*100000))-1;
  1532   00223C  0E9F               	movlw	159
  1533   00223E  6FD6               	movwf	214,b	;volatile
  1534   002240                     
  1535                           ; BSR set to: 14
  1536                           ;i2c.c: 15:   TRISDbits.TRISD5 = 1;
  1537   002240  8A84               	bsf	132,5,c	;volatile
  1538   002242                     
  1539                           ; BSR set to: 14
  1540                           ;i2c.c: 16:   TRISDbits.TRISD6 = 1;
  1541   002242  8C84               	bsf	132,6,c	;volatile
  1542   002244                     
  1543                           ; BSR set to: 14
  1544                           ;i2c.c: 17:   ANSELDbits.ANSELD5=0;
  1545   002244  9BA7               	bcf	167,5,b	;volatile
  1546   002246                     
  1547                           ; BSR set to: 14
  1548                           ;i2c.c: 18:   ANSELDbits.ANSELD6=0;
  1549   002246  9DA7               	bcf	167,6,b	;volatile
  1550                           
  1551                           ;i2c.c: 19:   SSP2DATPPS=0x1D;
  1552   002248  0E1D               	movlw	29
  1553   00224A  6F1D               	movwf	29,b	;volatile
  1554                           
  1555                           ;i2c.c: 20:   SSP2CLKPPS=0x1E;
  1556   00224C  0E1E               	movlw	30
  1557   00224E  6F1C               	movwf	28,b	;volatile
  1558                           
  1559                           ;i2c.c: 21:   RD5PPS=0x1C;
  1560   002250  0E1C               	movlw	28
  1561   002252  6F6F               	movwf	111,b	;volatile
  1562                           
  1563                           ;i2c.c: 22:   RD6PPS=0x1B;
  1564   002254  0E1B               	movlw	27
  1565   002256  6F70               	movwf	112,b	;volatile
  1566   002258                     
  1567                           ; BSR set to: 14
  1568   002258  0012               	return		;funcret
  1569   00225A                     __end_of_I2C_2_Master_Init:
  1570                           	callstack 0
  1571                           
  1572 ;; *************** function _buggyLEDs_init *****************
  1573 ;; Defined at:
  1574 ;;		line 34 in file "lights_buttons.c"
  1575 ;; Parameters:    Size  Location     Type
  1576 ;;		None
  1577 ;; Auto vars:     Size  Location     Type
  1578 ;;		None
  1579 ;; Return value:  Size  Location     Type
  1580 ;;                  1    wreg      void 
  1581 ;; Registers used:
  1582 ;;		None
  1583 ;; Tracked objects:
  1584 ;;		On entry : 0/0
  1585 ;;		On exit  : 0/0
  1586 ;;		Unchanged: 0/0
  1587 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1588 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1589 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1590 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1591 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1592 ;;Total ram usage:        0 bytes
  1593 ;; Hardware stack levels used: 1
  1594 ;; Hardware stack levels required when called: 1
  1595 ;; This function calls:
  1596 ;;		Nothing
  1597 ;; This function is called by:
  1598 ;;		_complete_initialisation
  1599 ;; This function uses a non-reentrant model
  1600 ;;
  1601                           
  1602                           	psect	text10
  1603   002342                     __ptext10:
  1604                           	callstack 0
  1605   002342                     _buggyLEDs_init:
  1606                           	callstack 28
  1607   002342                     
  1608                           ;lights_buttons.c: 35:     LATHbits.LATH1 = 0;
  1609   002342  9280               	bcf	128,1,c	;volatile
  1610                           
  1611                           ;lights_buttons.c: 36:     LATDbits.LATD3 = 0;
  1612   002344  967C               	bcf	124,3,c	;volatile
  1613                           
  1614                           ;lights_buttons.c: 37:     LATDbits.LATD4 = 0;
  1615   002346  987C               	bcf	124,4,c	;volatile
  1616                           
  1617                           ;lights_buttons.c: 38:     LATFbits.LATF0 = 0;
  1618   002348  907E               	bcf	126,0,c	;volatile
  1619                           
  1620                           ;lights_buttons.c: 39:     LATHbits.LATH0 = 0;
  1621   00234A  9080               	bcf	128,0,c	;volatile
  1622                           
  1623                           ;lights_buttons.c: 41:     TRISHbits.TRISH1 = 0;
  1624   00234C  9288               	bcf	136,1,c	;volatile
  1625                           
  1626                           ;lights_buttons.c: 42:     TRISDbits.TRISD3 = 0;
  1627   00234E  9684               	bcf	132,3,c	;volatile
  1628                           
  1629                           ;lights_buttons.c: 43:     TRISDbits.TRISD4 = 0;
  1630   002350  9884               	bcf	132,4,c	;volatile
  1631                           
  1632                           ;lights_buttons.c: 44:     TRISFbits.TRISF0 = 0;
  1633   002352  9086               	bcf	134,0,c	;volatile
  1634                           
  1635                           ;lights_buttons.c: 45:     TRISHbits.TRISH0 = 0;
  1636   002354  9088               	bcf	136,0,c	;volatile
  1637   002356  0012               	return		;funcret
  1638   002358                     __end_of_buggyLEDs_init:
  1639                           	callstack 0
  1640                           
  1641 ;; *************** function _Timer0_init *****************
  1642 ;; Defined at:
  1643 ;;		line 8 in file "timers.c"
  1644 ;; Parameters:    Size  Location     Type
  1645 ;;		None
  1646 ;; Auto vars:     Size  Location     Type
  1647 ;;		None
  1648 ;; Return value:  Size  Location     Type
  1649 ;;                  1    wreg      void 
  1650 ;; Registers used:
  1651 ;;		wreg, status,2
  1652 ;; Tracked objects:
  1653 ;;		On entry : 0/0
  1654 ;;		On exit  : 0/0
  1655 ;;		Unchanged: 0/0
  1656 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1657 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1658 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1659 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1660 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1661 ;;Total ram usage:        0 bytes
  1662 ;; Hardware stack levels used: 1
  1663 ;; Hardware stack levels required when called: 1
  1664 ;; This function calls:
  1665 ;;		Nothing
  1666 ;; This function is called by:
  1667 ;;		_complete_initialisation
  1668 ;; This function uses a non-reentrant model
  1669 ;;
  1670                           
  1671                           	psect	text11
  1672   002308                     __ptext11:
  1673                           	callstack 0
  1674   002308                     _Timer0_init:
  1675                           	callstack 28
  1676   002308                     
  1677                           ;timers.c: 10:     T0CON1bits.T0CS=0b010;
  1678   002308  50D6               	movf	214,w,c	;volatile
  1679   00230A  0B1F               	andlw	-225
  1680   00230C  0940               	iorlw	64
  1681   00230E  6ED6               	movwf	214,c	;volatile
  1682   002310                     
  1683                           ;timers.c: 11:     T0CON1bits.T0ASYNC=1;
  1684   002310  88D6               	bsf	214,4,c	;volatile
  1685                           
  1686                           ;timers.c: 12:     T0CON1bits.T0CKPS=0b0101;
  1687   002312  50D6               	movf	214,w,c	;volatile
  1688   002314  0BF0               	andlw	-16
  1689   002316  0905               	iorlw	5
  1690   002318  6ED6               	movwf	214,c	;volatile
  1691   00231A                     
  1692                           ;timers.c: 13:     T0CON0bits.T016BIT=1;
  1693   00231A  88D5               	bsf	213,4,c	;volatile
  1694                           
  1695                           ;timers.c: 16:     TMR0H=0;
  1696   00231C  0E00               	movlw	0
  1697   00231E  6ED4               	movwf	212,c	;volatile
  1698                           
  1699                           ;timers.c: 17:     TMR0L=0b00100011;
  1700   002320  0E23               	movlw	35
  1701   002322  6ED3               	movwf	211,c	;volatile
  1702   002324                     
  1703                           ;timers.c: 18:     T0CON0bits.T0EN=1;
  1704   002324  8ED5               	bsf	213,7,c	;volatile
  1705   002326  0012               	return		;funcret
  1706   002328                     __end_of_Timer0_init:
  1707                           	callstack 0
  1708                           
  1709 ;; *************** function _ADC_init *****************
  1710 ;; Defined at:
  1711 ;;		line 8 in file "ADC.c"
  1712 ;; Parameters:    Size  Location     Type
  1713 ;;		None
  1714 ;; Auto vars:     Size  Location     Type
  1715 ;;		None
  1716 ;; Return value:  Size  Location     Type
  1717 ;;                  1    wreg      void 
  1718 ;; Registers used:
  1719 ;;		wreg, status,2
  1720 ;; Tracked objects:
  1721 ;;		On entry : 0/0
  1722 ;;		On exit  : 0/0
  1723 ;;		Unchanged: 0/0
  1724 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1725 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1726 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1727 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1728 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1729 ;;Total ram usage:        0 bytes
  1730 ;; Hardware stack levels used: 1
  1731 ;; Hardware stack levels required when called: 1
  1732 ;; This function calls:
  1733 ;;		Nothing
  1734 ;; This function is called by:
  1735 ;;		_complete_initialisation
  1736 ;; This function uses a non-reentrant model
  1737 ;;
  1738                           
  1739                           	psect	text12
  1740   002328                     __ptext12:
  1741                           	callstack 0
  1742   002328                     _ADC_init:
  1743                           	callstack 28
  1744   002328                     
  1745                           ;ADC.c: 10:     TRISFbits.TRISF6=1;
  1746   002328  8C86               	bsf	134,6,c	;volatile
  1747                           
  1748                           ;ADC.c: 11:     ANSELFbits.ANSELF6=1;
  1749   00232A  010E               	movlb	14	; () banked
  1750   00232C  8DB4               	bsf	180,6,b	;volatile
  1751                           
  1752                           ;ADC.c: 13:     ADREFbits.ADNREF = 0;
  1753   00232E  010F               	movlb	15	; () banked
  1754   002330  9958               	bcf	88,4,b	;volatile
  1755   002332                     
  1756                           ; BSR set to: 15
  1757                           ;ADC.c: 14:     ADREFbits.ADPREF = 0b00;
  1758   002332  0EFC               	movlw	-4
  1759   002334  1758               	andwf	88,f,b	;volatile
  1760                           
  1761                           ;ADC.c: 15:     ADPCH=0b101110;
  1762   002336  0E2E               	movlw	46
  1763   002338  6F5F               	movwf	95,b	;volatile
  1764   00233A                     
  1765                           ; BSR set to: 15
  1766                           ;ADC.c: 16:     ADCON0bits.ADFM = 0;
  1767   00233A  9460               	bcf	96,2,c	;volatile
  1768   00233C                     
  1769                           ; BSR set to: 15
  1770                           ;ADC.c: 17:     ADCON0bits.ADCS = 1;
  1771   00233C  8860               	bsf	96,4,c	;volatile
  1772   00233E                     
  1773                           ; BSR set to: 15
  1774                           ;ADC.c: 18:     ADCON0bits.ADON = 1;
  1775   00233E  8E60               	bsf	96,7,c	;volatile
  1776   002340                     
  1777                           ; BSR set to: 15
  1778   002340  0012               	return		;funcret
  1779   002342                     __end_of_ADC_init:
  1780                           	callstack 0
  1781                           
  1782 ;; *************** function _buggy_color_response *****************
  1783 ;; Defined at:
  1784 ;;		line 128 in file "color.c"
  1785 ;; Parameters:    Size  Location     Type
  1786 ;;  mL              2   57[COMRAM] PTR struct DC_motor
  1787 ;;		 -> motorL(9), 
  1788 ;;  mR              2   59[COMRAM] PTR struct DC_motor
  1789 ;;		 -> motorR(9), 
  1790 ;;  c               2   61[COMRAM] PTR struct colors
  1791 ;;		 -> color(20), 
  1792 ;; Auto vars:     Size  Location     Type
  1793 ;;		None
  1794 ;; Return value:  Size  Location     Type
  1795 ;;                  1    wreg      void 
  1796 ;; Registers used:
  1797 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1798 ;; Tracked objects:
  1799 ;;		On entry : 0/0
  1800 ;;		On exit  : 0/0
  1801 ;;		Unchanged: 0/0
  1802 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1803 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1804 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1805 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1806 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1807 ;;Total ram usage:        8 bytes
  1808 ;; Hardware stack levels used: 1
  1809 ;; Hardware stack levels required when called: 8
  1810 ;; This function calls:
  1811 ;;		_READcolor
  1812 ;;		___flge
  1813 ;;		_forward
  1814 ;;		_movement
  1815 ;;		_movement_return
  1816 ;;		_return_home
  1817 ;;		_space
  1818 ;;		_stop
  1819 ;;		_timer_reset
  1820 ;; This function is called by:
  1821 ;;		_main
  1822 ;; This function uses a non-reentrant model
  1823 ;;
  1824                           
  1825                           	psect	text13
  1826   00004C                     __ptext13:
  1827                           	callstack 0
  1828   00004C                     _buggy_color_response:
  1829                           	callstack 22
  1830   00004C                     
  1831                           ;color.c: 130:     READcolor(&color);
  1832   00004C  0E44               	movlw	low _color
  1833   00004E  6E2A               	movwf	READcolor@c^0,c
  1834   000050  0E00               	movlw	high _color
  1835   000052  6E2B               	movwf	(READcolor@c+1)^0,c
  1836   000054  EC5C  F00B         	call	_READcolor	;wreg free
  1837   000058  0EC5               	movlw	197
  1838   00005A  5C4A               	subwf	(_color+6)^0,w,c
  1839   00005C  0E09               	movlw	9
  1840   00005E  584B               	subwfb	(_color+7)^0,w,c
  1841   000060  A0D8               	btfss	status,0,c
  1842   000062  EF35  F000         	goto	u2161
  1843   000066  EF37  F000         	goto	u2160
  1844   00006A                     u2161:
  1845   00006A  EF89  F003         	goto	l3119
  1846   00006E                     u2160:
  1847   00006E                     
  1848                           ;color.c: 133:         timer_memory[timer_index] = timer_val;
  1849   00006E  0E60               	movlw	low _timer_memory
  1850   000070  2442               	addwf	_timer_index^0,w,c
  1851   000072  6ED9               	movwf	fsr2l,c
  1852   000074  6ADA               	clrf	fsr2h,c
  1853   000076  0E00               	movlw	high _timer_memory
  1854   000078  22DA               	addwfc	fsr2h,f,c
  1855   00007A  C0B0  FFDF         	movff	_timer_val,indf2
  1856   00007E                     
  1857                           ;color.c: 134:         timer_index ++;
  1858   00007E  2A42               	incf	_timer_index^0,f,c
  1859   000080                     
  1860                           ;color.c: 135:         forward(mL,mR);
  1861   000080  C03A  F01C         	movff	buggy_color_response@mL,forward@mL
  1862   000084  C03B  F01D         	movff	buggy_color_response@mL+1,forward@mL+1
  1863   000088  C03C  F01E         	movff	buggy_color_response@mR,forward@mR
  1864   00008C  C03D  F01F         	movff	buggy_color_response@mR+1,forward@mR+1
  1865   000090  ECFC  F00C         	call	_forward	;wreg free
  1866   000094                     
  1867                           ;color.c: 136:         _delay((unsigned long)((50)*(64000000/4000.0)));
  1868   000094  0E05               	movlw	5
  1869   000096  6E41               	movwf	(??_buggy_color_response+1)^0,c
  1870   000098  0E0F               	movlw	15
  1871   00009A  6E40               	movwf	??_buggy_color_response^0,c
  1872   00009C  0EF1               	movlw	241
  1873   00009E                     u2557:
  1874   00009E  2EE8               	decfsz	wreg,f,c
  1875   0000A0  D7FE               	bra	u2557
  1876   0000A2  2E40               	decfsz	??_buggy_color_response^0,f,c
  1877   0000A4  D7FC               	bra	u2557
  1878   0000A6  2E41               	decfsz	(??_buggy_color_response+1)^0,f,c
  1879   0000A8  D7FA               	bra	u2557
  1880   0000AA  F000               	nop	
  1881   0000AC                     
  1882                           ;color.c: 137:         stop(mL,mR); _delay((unsigned long)((500)*(64000000/4000.0)));
  1883   0000AC  C03A  F016         	movff	buggy_color_response@mL,stop@mL
  1884   0000B0  C03B  F017         	movff	buggy_color_response@mL+1,stop@mL+1
  1885   0000B4  C03C  F018         	movff	buggy_color_response@mR,stop@mR
  1886   0000B8  C03D  F019         	movff	buggy_color_response@mR+1,stop@mR+1
  1887   0000BC  ECE6  F00D         	call	_stop	;wreg free
  1888   0000C0  0E29               	movlw	41
  1889   0000C2  6E41               	movwf	(??_buggy_color_response+1)^0,c
  1890   0000C4  0E96               	movlw	150
  1891   0000C6  6E40               	movwf	??_buggy_color_response^0,c
  1892   0000C8  0E7F               	movlw	127
  1893   0000CA                     u2567:
  1894   0000CA  2EE8               	decfsz	wreg,f,c
  1895   0000CC  D7FE               	bra	u2567
  1896   0000CE  2E40               	decfsz	??_buggy_color_response^0,f,c
  1897   0000D0  D7FC               	bra	u2567
  1898   0000D2  2E41               	decfsz	(??_buggy_color_response+1)^0,f,c
  1899   0000D4  D7FA               	bra	u2567
  1900   0000D6  F000               	nop	
  1901   0000D8                     
  1902                           ;color.c: 138:         READcolor(&color); _delay((unsigned long)((500)*(64000000/4000.0)
      +                          ));
  1903   0000D8  0E44               	movlw	low _color
  1904   0000DA  6E2A               	movwf	READcolor@c^0,c
  1905   0000DC  0E00               	movlw	high _color
  1906   0000DE  6E2B               	movwf	(READcolor@c+1)^0,c
  1907   0000E0  EC5C  F00B         	call	_READcolor	;wreg free
  1908   0000E4  0E29               	movlw	41
  1909   0000E6  6E41               	movwf	(??_buggy_color_response+1)^0,c
  1910   0000E8  0E96               	movlw	150
  1911   0000EA  6E40               	movwf	??_buggy_color_response^0,c
  1912   0000EC  0E7F               	movlw	127
  1913   0000EE                     u2577:
  1914   0000EE  2EE8               	decfsz	wreg,f,c
  1915   0000F0  D7FE               	bra	u2577
  1916   0000F2  2E40               	decfsz	??_buggy_color_response^0,f,c
  1917   0000F4  D7FC               	bra	u2577
  1918   0000F6  2E41               	decfsz	(??_buggy_color_response+1)^0,f,c
  1919   0000F8  D7FA               	bra	u2577
  1920   0000FA  F000               	nop	
  1921   0000FC                     
  1922                           ;color.c: 140:         if (color.R_norm > 0.77 && color.B_norm < 0.18 && color.G_norm < 
      +                          0.14){
  1923   0000FC  0EB8               	movlw	184
  1924   0000FE  6E03               	movwf	___flge@ff1^0,c
  1925   000100  0E1E               	movlw	30
  1926   000102  6E04               	movwf	(___flge@ff1+1)^0,c
  1927   000104  0E45               	movlw	69
  1928   000106  6E05               	movwf	(___flge@ff1+2)^0,c
  1929   000108  0E3F               	movlw	63
  1930   00010A  6E06               	movwf	(___flge@ff1+3)^0,c
  1931   00010C  C04C  F007         	movff	_color+8,___flge@ff2
  1932   000110  C04D  F008         	movff	_color+9,___flge@ff2+1
  1933   000114  C04E  F009         	movff	_color+10,___flge@ff2+2
  1934   000118  C04F  F00A         	movff	_color+11,___flge@ff2+3
  1935   00011C  ECF9  F00B         	call	___flge	;wreg free
  1936   000120  B0D8               	btfsc	status,0,c
  1937   000122  EF95  F000         	goto	u2171
  1938   000126  EF97  F000         	goto	u2170
  1939   00012A                     u2171:
  1940   00012A  EFE0  F000         	goto	l3019
  1941   00012E                     u2170:
  1942   00012E  C050  F003         	movff	_color+12,___flge@ff1
  1943   000132  C051  F004         	movff	_color+13,___flge@ff1+1
  1944   000136  C052  F005         	movff	_color+14,___flge@ff1+2
  1945   00013A  C053  F006         	movff	_color+15,___flge@ff1+3
  1946   00013E  0EEC               	movlw	236
  1947   000140  6E07               	movwf	___flge@ff2^0,c
  1948   000142  0E51               	movlw	81
  1949   000144  6E08               	movwf	(___flge@ff2+1)^0,c
  1950   000146  0E38               	movlw	56
  1951   000148  6E09               	movwf	(___flge@ff2+2)^0,c
  1952   00014A  0E3E               	movlw	62
  1953   00014C  6E0A               	movwf	(___flge@ff2+3)^0,c
  1954   00014E  ECF9  F00B         	call	___flge	;wreg free
  1955   000152  B0D8               	btfsc	status,0,c
  1956   000154  EFAE  F000         	goto	u2181
  1957   000158  EFB0  F000         	goto	u2180
  1958   00015C                     u2181:
  1959   00015C  EFE0  F000         	goto	l3019
  1960   000160                     u2180:
  1961   000160  C054  F003         	movff	_color+16,___flge@ff1
  1962   000164  C055  F004         	movff	_color+17,___flge@ff1+1
  1963   000168  C056  F005         	movff	_color+18,___flge@ff1+2
  1964   00016C  C057  F006         	movff	_color+19,___flge@ff1+3
  1965   000170  0E29               	movlw	41
  1966   000172  6E07               	movwf	___flge@ff2^0,c
  1967   000174  0E5C               	movlw	92
  1968   000176  6E08               	movwf	(___flge@ff2+1)^0,c
  1969   000178  0E0F               	movlw	15
  1970   00017A  6E09               	movwf	(___flge@ff2+2)^0,c
  1971   00017C  0E3E               	movlw	62
  1972   00017E  6E0A               	movwf	(___flge@ff2+3)^0,c
  1973   000180  ECF9  F00B         	call	___flge	;wreg free
  1974   000184  B0D8               	btfsc	status,0,c
  1975   000186  EFC7  F000         	goto	u2191
  1976   00018A  EFC9  F000         	goto	u2190
  1977   00018E                     u2191:
  1978   00018E  EFE0  F000         	goto	l3019
  1979   000192                     u2190:
  1980   000192                     
  1981                           ;color.c: 141:             card_memory[card_count] = 2;
  1982   000192  0E88               	movlw	low _card_memory
  1983   000194  2443               	addwf	_card_count^0,w,c
  1984   000196  6ED9               	movwf	fsr2l,c
  1985   000198  6ADA               	clrf	fsr2h,c
  1986   00019A  0E00               	movlw	high _card_memory
  1987   00019C  22DA               	addwfc	fsr2h,f,c
  1988   00019E  0E02               	movlw	2
  1989   0001A0  6EDF               	movwf	indf2,c
  1990   0001A2                     
  1991                           ;color.c: 142:             card_count ++;
  1992   0001A2  2A43               	incf	_card_count^0,f,c
  1993   0001A4                     
  1994                           ;color.c: 143:             movement(mL,mR,1);
  1995   0001A4  C03A  F028         	movff	buggy_color_response@mL,movement@mL
  1996   0001A8  C03B  F029         	movff	buggy_color_response@mL+1,movement@mL+1
  1997   0001AC  C03C  F02A         	movff	buggy_color_response@mR,movement@mR
  1998   0001B0  C03D  F02B         	movff	buggy_color_response@mR+1,movement@mR+1
  1999   0001B4  0E00               	movlw	0
  2000   0001B6  6E2D               	movwf	(movement@count+1)^0,c
  2001   0001B8  0E01               	movlw	1
  2002   0001BA  6E2C               	movwf	movement@count^0,c
  2003   0001BC  EC61  F005         	call	_movement	;wreg free
  2004   0001C0                     l3019:
  2005                           
  2006                           ;color.c: 147:         if (color.B_norm < 0.25 && color.G_norm > 0.40) {
  2007   0001C0  C050  F003         	movff	_color+12,___flge@ff1
  2008   0001C4  C051  F004         	movff	_color+13,___flge@ff1+1
  2009   0001C8  C052  F005         	movff	_color+14,___flge@ff1+2
  2010   0001CC  C053  F006         	movff	_color+15,___flge@ff1+3
  2011   0001D0  0E00               	movlw	0
  2012   0001D2  6E07               	movwf	___flge@ff2^0,c
  2013   0001D4  0E00               	movlw	0
  2014   0001D6  6E08               	movwf	(___flge@ff2+1)^0,c
  2015   0001D8  0E80               	movlw	128
  2016   0001DA  6E09               	movwf	(___flge@ff2+2)^0,c
  2017   0001DC  0E3E               	movlw	62
  2018   0001DE  6E0A               	movwf	(___flge@ff2+3)^0,c
  2019   0001E0  ECF9  F00B         	call	___flge	;wreg free
  2020   0001E4  B0D8               	btfsc	status,0,c
  2021   0001E6  EFF7  F000         	goto	u2201
  2022   0001EA  EFF9  F000         	goto	u2200
  2023   0001EE                     u2201:
  2024   0001EE  EF29  F001         	goto	l3029
  2025   0001F2                     u2200:
  2026   0001F2  0ECD               	movlw	205
  2027   0001F4  6E03               	movwf	___flge@ff1^0,c
  2028   0001F6  0ECC               	movlw	204
  2029   0001F8  6E04               	movwf	(___flge@ff1+1)^0,c
  2030   0001FA  0ECC               	movlw	204
  2031   0001FC  6E05               	movwf	(___flge@ff1+2)^0,c
  2032   0001FE  0E3E               	movlw	62
  2033   000200  6E06               	movwf	(___flge@ff1+3)^0,c
  2034   000202  C054  F007         	movff	_color+16,___flge@ff2
  2035   000206  C055  F008         	movff	_color+17,___flge@ff2+1
  2036   00020A  C056  F009         	movff	_color+18,___flge@ff2+2
  2037   00020E  C057  F00A         	movff	_color+19,___flge@ff2+3
  2038   000212  ECF9  F00B         	call	___flge	;wreg free
  2039   000216  B0D8               	btfsc	status,0,c
  2040   000218  EF10  F001         	goto	u2211
  2041   00021C  EF12  F001         	goto	u2210
  2042   000220                     u2211:
  2043   000220  EF29  F001         	goto	l3029
  2044   000224                     u2210:
  2045   000224                     
  2046                           ;color.c: 148:             card_memory[card_count] = 1;
  2047   000224  0E88               	movlw	low _card_memory
  2048   000226  2443               	addwf	_card_count^0,w,c
  2049   000228  6ED9               	movwf	fsr2l,c
  2050   00022A  6ADA               	clrf	fsr2h,c
  2051   00022C  0E00               	movlw	high _card_memory
  2052   00022E  22DA               	addwfc	fsr2h,f,c
  2053   000230  0E01               	movlw	1
  2054   000232  6EDF               	movwf	indf2,c
  2055   000234                     
  2056                           ;color.c: 149:             card_count ++;
  2057   000234  2A43               	incf	_card_count^0,f,c
  2058   000236                     
  2059                           ;color.c: 150:             movement(mL,mR,2);
  2060   000236  C03A  F028         	movff	buggy_color_response@mL,movement@mL
  2061   00023A  C03B  F029         	movff	buggy_color_response@mL+1,movement@mL+1
  2062   00023E  C03C  F02A         	movff	buggy_color_response@mR,movement@mR
  2063   000242  C03D  F02B         	movff	buggy_color_response@mR+1,movement@mR+1
  2064   000246  0E00               	movlw	0
  2065   000248  6E2D               	movwf	(movement@count+1)^0,c
  2066   00024A  0E02               	movlw	2
  2067   00024C  6E2C               	movwf	movement@count^0,c
  2068   00024E  EC61  F005         	call	_movement	;wreg free
  2069   000252                     l3029:
  2070                           
  2071                           ;color.c: 154:         if (color.R_norm < 0.38 && color.B_norm > 0.32 && color.G_norm > 
      +                          0.34){
  2072   000252  C04C  F003         	movff	_color+8,___flge@ff1
  2073   000256  C04D  F004         	movff	_color+9,___flge@ff1+1
  2074   00025A  C04E  F005         	movff	_color+10,___flge@ff1+2
  2075   00025E  C04F  F006         	movff	_color+11,___flge@ff1+3
  2076   000262  0E5C               	movlw	92
  2077   000264  6E07               	movwf	___flge@ff2^0,c
  2078   000266  0E8F               	movlw	143
  2079   000268  6E08               	movwf	(___flge@ff2+1)^0,c
  2080   00026A  0EC2               	movlw	194
  2081   00026C  6E09               	movwf	(___flge@ff2+2)^0,c
  2082   00026E  0E3E               	movlw	62
  2083   000270  6E0A               	movwf	(___flge@ff2+3)^0,c
  2084   000272  ECF9  F00B         	call	___flge	;wreg free
  2085   000276  B0D8               	btfsc	status,0,c
  2086   000278  EF40  F001         	goto	u2221
  2087   00027C  EF42  F001         	goto	u2220
  2088   000280                     u2221:
  2089   000280  EF8B  F001         	goto	l3041
  2090   000284                     u2220:
  2091   000284  0E0A               	movlw	10
  2092   000286  6E03               	movwf	___flge@ff1^0,c
  2093   000288  0ED7               	movlw	215
  2094   00028A  6E04               	movwf	(___flge@ff1+1)^0,c
  2095   00028C  0EA3               	movlw	163
  2096   00028E  6E05               	movwf	(___flge@ff1+2)^0,c
  2097   000290  0E3E               	movlw	62
  2098   000292  6E06               	movwf	(___flge@ff1+3)^0,c
  2099   000294  C050  F007         	movff	_color+12,___flge@ff2
  2100   000298  C051  F008         	movff	_color+13,___flge@ff2+1
  2101   00029C  C052  F009         	movff	_color+14,___flge@ff2+2
  2102   0002A0  C053  F00A         	movff	_color+15,___flge@ff2+3
  2103   0002A4  ECF9  F00B         	call	___flge	;wreg free
  2104   0002A8  B0D8               	btfsc	status,0,c
  2105   0002AA  EF59  F001         	goto	u2231
  2106   0002AE  EF5B  F001         	goto	u2230
  2107   0002B2                     u2231:
  2108   0002B2  EF8B  F001         	goto	l3041
  2109   0002B6                     u2230:
  2110   0002B6  0E7B               	movlw	123
  2111   0002B8  6E03               	movwf	___flge@ff1^0,c
  2112   0002BA  0E14               	movlw	20
  2113   0002BC  6E04               	movwf	(___flge@ff1+1)^0,c
  2114   0002BE  0EAE               	movlw	174
  2115   0002C0  6E05               	movwf	(___flge@ff1+2)^0,c
  2116   0002C2  0E3E               	movlw	62
  2117   0002C4  6E06               	movwf	(___flge@ff1+3)^0,c
  2118   0002C6  C054  F007         	movff	_color+16,___flge@ff2
  2119   0002CA  C055  F008         	movff	_color+17,___flge@ff2+1
  2120   0002CE  C056  F009         	movff	_color+18,___flge@ff2+2
  2121   0002D2  C057  F00A         	movff	_color+19,___flge@ff2+3
  2122   0002D6  ECF9  F00B         	call	___flge	;wreg free
  2123   0002DA  B0D8               	btfsc	status,0,c
  2124   0002DC  EF72  F001         	goto	u2241
  2125   0002E0  EF74  F001         	goto	u2240
  2126   0002E4                     u2241:
  2127   0002E4  EF8B  F001         	goto	l3041
  2128   0002E8                     u2240:
  2129   0002E8                     
  2130                           ;color.c: 155:             card_memory[card_count] = 3;
  2131   0002E8  0E88               	movlw	low _card_memory
  2132   0002EA  2443               	addwf	_card_count^0,w,c
  2133   0002EC  6ED9               	movwf	fsr2l,c
  2134   0002EE  6ADA               	clrf	fsr2h,c
  2135   0002F0  0E00               	movlw	high _card_memory
  2136   0002F2  22DA               	addwfc	fsr2h,f,c
  2137   0002F4  0E03               	movlw	3
  2138   0002F6  6EDF               	movwf	indf2,c
  2139   0002F8                     
  2140                           ;color.c: 156:             card_count ++;
  2141   0002F8  2A43               	incf	_card_count^0,f,c
  2142   0002FA                     
  2143                           ;color.c: 157:             movement(mL,mR,3);
  2144   0002FA  C03A  F028         	movff	buggy_color_response@mL,movement@mL
  2145   0002FE  C03B  F029         	movff	buggy_color_response@mL+1,movement@mL+1
  2146   000302  C03C  F02A         	movff	buggy_color_response@mR,movement@mR
  2147   000306  C03D  F02B         	movff	buggy_color_response@mR+1,movement@mR+1
  2148   00030A  0E00               	movlw	0
  2149   00030C  6E2D               	movwf	(movement@count+1)^0,c
  2150   00030E  0E03               	movlw	3
  2151   000310  6E2C               	movwf	movement@count^0,c
  2152   000312  EC61  F005         	call	_movement	;wreg free
  2153   000316                     l3041:
  2154                           
  2155                           ;color.c: 161:         if (color.R_norm > 0.52 && color.G_norm > 0.32){
  2156   000316  0EB8               	movlw	184
  2157   000318  6E03               	movwf	___flge@ff1^0,c
  2158   00031A  0E1E               	movlw	30
  2159   00031C  6E04               	movwf	(___flge@ff1+1)^0,c
  2160   00031E  0E05               	movlw	5
  2161   000320  6E05               	movwf	(___flge@ff1+2)^0,c
  2162   000322  0E3F               	movlw	63
  2163   000324  6E06               	movwf	(___flge@ff1+3)^0,c
  2164   000326  C04C  F007         	movff	_color+8,___flge@ff2
  2165   00032A  C04D  F008         	movff	_color+9,___flge@ff2+1
  2166   00032E  C04E  F009         	movff	_color+10,___flge@ff2+2
  2167   000332  C04F  F00A         	movff	_color+11,___flge@ff2+3
  2168   000336  ECF9  F00B         	call	___flge	;wreg free
  2169   00033A  B0D8               	btfsc	status,0,c
  2170   00033C  EFA2  F001         	goto	u2251
  2171   000340  EFA4  F001         	goto	u2250
  2172   000344                     u2251:
  2173   000344  EFD4  F001         	goto	l3051
  2174   000348                     u2250:
  2175   000348  0E0A               	movlw	10
  2176   00034A  6E03               	movwf	___flge@ff1^0,c
  2177   00034C  0ED7               	movlw	215
  2178   00034E  6E04               	movwf	(___flge@ff1+1)^0,c
  2179   000350  0EA3               	movlw	163
  2180   000352  6E05               	movwf	(___flge@ff1+2)^0,c
  2181   000354  0E3E               	movlw	62
  2182   000356  6E06               	movwf	(___flge@ff1+3)^0,c
  2183   000358  C054  F007         	movff	_color+16,___flge@ff2
  2184   00035C  C055  F008         	movff	_color+17,___flge@ff2+1
  2185   000360  C056  F009         	movff	_color+18,___flge@ff2+2
  2186   000364  C057  F00A         	movff	_color+19,___flge@ff2+3
  2187   000368  ECF9  F00B         	call	___flge	;wreg free
  2188   00036C  B0D8               	btfsc	status,0,c
  2189   00036E  EFBB  F001         	goto	u2261
  2190   000372  EFBD  F001         	goto	u2260
  2191   000376                     u2261:
  2192   000376  EFD4  F001         	goto	l3051
  2193   00037A                     u2260:
  2194   00037A                     
  2195                           ;color.c: 162:             card_memory[card_count] = 9;
  2196   00037A  0E88               	movlw	low _card_memory
  2197   00037C  2443               	addwf	_card_count^0,w,c
  2198   00037E  6ED9               	movwf	fsr2l,c
  2199   000380  6ADA               	clrf	fsr2h,c
  2200   000382  0E00               	movlw	high _card_memory
  2201   000384  22DA               	addwfc	fsr2h,f,c
  2202   000386  0E09               	movlw	9
  2203   000388  6EDF               	movwf	indf2,c
  2204   00038A                     
  2205                           ;color.c: 163:             card_count ++;
  2206   00038A  2A43               	incf	_card_count^0,f,c
  2207   00038C                     
  2208                           ;color.c: 164:             movement(mL,mR,4);
  2209   00038C  C03A  F028         	movff	buggy_color_response@mL,movement@mL
  2210   000390  C03B  F029         	movff	buggy_color_response@mL+1,movement@mL+1
  2211   000394  C03C  F02A         	movff	buggy_color_response@mR,movement@mR
  2212   000398  C03D  F02B         	movff	buggy_color_response@mR+1,movement@mR+1
  2213   00039C  0E00               	movlw	0
  2214   00039E  6E2D               	movwf	(movement@count+1)^0,c
  2215   0003A0  0E04               	movlw	4
  2216   0003A2  6E2C               	movwf	movement@count^0,c
  2217   0003A4  EC61  F005         	call	_movement	;wreg free
  2218   0003A8                     l3051:
  2219                           
  2220                           ;color.c: 168:         if (color.R_norm > 0.50 && color.B_norm > 0.24 && color.G_norm < 
      +                          0.33){
  2221   0003A8  0E00               	movlw	0
  2222   0003AA  6E03               	movwf	___flge@ff1^0,c
  2223   0003AC  0E00               	movlw	0
  2224   0003AE  6E04               	movwf	(___flge@ff1+1)^0,c
  2225   0003B0  0E00               	movlw	0
  2226   0003B2  6E05               	movwf	(___flge@ff1+2)^0,c
  2227   0003B4  0E3F               	movlw	63
  2228   0003B6  6E06               	movwf	(___flge@ff1+3)^0,c
  2229   0003B8  C04C  F007         	movff	_color+8,___flge@ff2
  2230   0003BC  C04D  F008         	movff	_color+9,___flge@ff2+1
  2231   0003C0  C04E  F009         	movff	_color+10,___flge@ff2+2
  2232   0003C4  C04F  F00A         	movff	_color+11,___flge@ff2+3
  2233   0003C8  ECF9  F00B         	call	___flge	;wreg free
  2234   0003CC  B0D8               	btfsc	status,0,c
  2235   0003CE  EFEB  F001         	goto	u2271
  2236   0003D2  EFED  F001         	goto	u2270
  2237   0003D6                     u2271:
  2238   0003D6  EF36  F002         	goto	l3063
  2239   0003DA                     u2270:
  2240   0003DA  0E8F               	movlw	143
  2241   0003DC  6E03               	movwf	___flge@ff1^0,c
  2242   0003DE  0EC2               	movlw	194
  2243   0003E0  6E04               	movwf	(___flge@ff1+1)^0,c
  2244   0003E2  0E75               	movlw	117
  2245   0003E4  6E05               	movwf	(___flge@ff1+2)^0,c
  2246   0003E6  0E3E               	movlw	62
  2247   0003E8  6E06               	movwf	(___flge@ff1+3)^0,c
  2248   0003EA  C050  F007         	movff	_color+12,___flge@ff2
  2249   0003EE  C051  F008         	movff	_color+13,___flge@ff2+1
  2250   0003F2  C052  F009         	movff	_color+14,___flge@ff2+2
  2251   0003F6  C053  F00A         	movff	_color+15,___flge@ff2+3
  2252   0003FA  ECF9  F00B         	call	___flge	;wreg free
  2253   0003FE  B0D8               	btfsc	status,0,c
  2254   000400  EF04  F002         	goto	u2281
  2255   000404  EF06  F002         	goto	u2280
  2256   000408                     u2281:
  2257   000408  EF36  F002         	goto	l3063
  2258   00040C                     u2280:
  2259   00040C  C054  F003         	movff	_color+16,___flge@ff1
  2260   000410  C055  F004         	movff	_color+17,___flge@ff1+1
  2261   000414  C056  F005         	movff	_color+18,___flge@ff1+2
  2262   000418  C057  F006         	movff	_color+19,___flge@ff1+3
  2263   00041C  0EC3               	movlw	195
  2264   00041E  6E07               	movwf	___flge@ff2^0,c
  2265   000420  0EF5               	movlw	245
  2266   000422  6E08               	movwf	(___flge@ff2+1)^0,c
  2267   000424  0EA8               	movlw	168
  2268   000426  6E09               	movwf	(___flge@ff2+2)^0,c
  2269   000428  0E3E               	movlw	62
  2270   00042A  6E0A               	movwf	(___flge@ff2+3)^0,c
  2271   00042C  ECF9  F00B         	call	___flge	;wreg free
  2272   000430  B0D8               	btfsc	status,0,c
  2273   000432  EF1D  F002         	goto	u2291
  2274   000436  EF1F  F002         	goto	u2290
  2275   00043A                     u2291:
  2276   00043A  EF36  F002         	goto	l3063
  2277   00043E                     u2290:
  2278   00043E                     
  2279                           ;color.c: 169:             card_memory[card_count] = 10;
  2280   00043E  0E88               	movlw	low _card_memory
  2281   000440  2443               	addwf	_card_count^0,w,c
  2282   000442  6ED9               	movwf	fsr2l,c
  2283   000444  6ADA               	clrf	fsr2h,c
  2284   000446  0E00               	movlw	high _card_memory
  2285   000448  22DA               	addwfc	fsr2h,f,c
  2286   00044A  0E0A               	movlw	10
  2287   00044C  6EDF               	movwf	indf2,c
  2288   00044E                     
  2289                           ;color.c: 170:             card_count ++;
  2290   00044E  2A43               	incf	_card_count^0,f,c
  2291   000450                     
  2292                           ;color.c: 171:             movement(mL,mR,5);
  2293   000450  C03A  F028         	movff	buggy_color_response@mL,movement@mL
  2294   000454  C03B  F029         	movff	buggy_color_response@mL+1,movement@mL+1
  2295   000458  C03C  F02A         	movff	buggy_color_response@mR,movement@mR
  2296   00045C  C03D  F02B         	movff	buggy_color_response@mR+1,movement@mR+1
  2297   000460  0E00               	movlw	0
  2298   000462  6E2D               	movwf	(movement@count+1)^0,c
  2299   000464  0E05               	movlw	5
  2300   000466  6E2C               	movwf	movement@count^0,c
  2301   000468  EC61  F005         	call	_movement	;wreg free
  2302   00046C                     l3063:
  2303                           
  2304                           ;color.c: 175:         if (color.R_norm > 0.60 && color.B_norm < 0.22 && color.G_norm > 
      +                          0.23){
  2305   00046C  0E9A               	movlw	154
  2306   00046E  6E03               	movwf	___flge@ff1^0,c
  2307   000470  0E99               	movlw	153
  2308   000472  6E04               	movwf	(___flge@ff1+1)^0,c
  2309   000474  0E19               	movlw	25
  2310   000476  6E05               	movwf	(___flge@ff1+2)^0,c
  2311   000478  0E3F               	movlw	63
  2312   00047A  6E06               	movwf	(___flge@ff1+3)^0,c
  2313   00047C  C04C  F007         	movff	_color+8,___flge@ff2
  2314   000480  C04D  F008         	movff	_color+9,___flge@ff2+1
  2315   000484  C04E  F009         	movff	_color+10,___flge@ff2+2
  2316   000488  C04F  F00A         	movff	_color+11,___flge@ff2+3
  2317   00048C  ECF9  F00B         	call	___flge	;wreg free
  2318   000490  B0D8               	btfsc	status,0,c
  2319   000492  EF4D  F002         	goto	u2301
  2320   000496  EF4F  F002         	goto	u2300
  2321   00049A                     u2301:
  2322   00049A  EF98  F002         	goto	l3075
  2323   00049E                     u2300:
  2324   00049E  C050  F003         	movff	_color+12,___flge@ff1
  2325   0004A2  C051  F004         	movff	_color+13,___flge@ff1+1
  2326   0004A6  C052  F005         	movff	_color+14,___flge@ff1+2
  2327   0004AA  C053  F006         	movff	_color+15,___flge@ff1+3
  2328   0004AE  0EAE               	movlw	174
  2329   0004B0  6E07               	movwf	___flge@ff2^0,c
  2330   0004B2  0E47               	movlw	71
  2331   0004B4  6E08               	movwf	(___flge@ff2+1)^0,c
  2332   0004B6  0E61               	movlw	97
  2333   0004B8  6E09               	movwf	(___flge@ff2+2)^0,c
  2334   0004BA  0E3E               	movlw	62
  2335   0004BC  6E0A               	movwf	(___flge@ff2+3)^0,c
  2336   0004BE  ECF9  F00B         	call	___flge	;wreg free
  2337   0004C2  B0D8               	btfsc	status,0,c
  2338   0004C4  EF66  F002         	goto	u2311
  2339   0004C8  EF68  F002         	goto	u2310
  2340   0004CC                     u2311:
  2341   0004CC  EF98  F002         	goto	l3075
  2342   0004D0                     u2310:
  2343   0004D0  0E1F               	movlw	31
  2344   0004D2  6E03               	movwf	___flge@ff1^0,c
  2345   0004D4  0E85               	movlw	133
  2346   0004D6  6E04               	movwf	(___flge@ff1+1)^0,c
  2347   0004D8  0E6B               	movlw	107
  2348   0004DA  6E05               	movwf	(___flge@ff1+2)^0,c
  2349   0004DC  0E3E               	movlw	62
  2350   0004DE  6E06               	movwf	(___flge@ff1+3)^0,c
  2351   0004E0  C054  F007         	movff	_color+16,___flge@ff2
  2352   0004E4  C055  F008         	movff	_color+17,___flge@ff2+1
  2353   0004E8  C056  F009         	movff	_color+18,___flge@ff2+2
  2354   0004EC  C057  F00A         	movff	_color+19,___flge@ff2+3
  2355   0004F0  ECF9  F00B         	call	___flge	;wreg free
  2356   0004F4  B0D8               	btfsc	status,0,c
  2357   0004F6  EF7F  F002         	goto	u2321
  2358   0004FA  EF81  F002         	goto	u2320
  2359   0004FE                     u2321:
  2360   0004FE  EF98  F002         	goto	l3075
  2361   000502                     u2320:
  2362   000502                     
  2363                           ;color.c: 176:             card_memory[card_count] = 7;
  2364   000502  0E88               	movlw	low _card_memory
  2365   000504  2443               	addwf	_card_count^0,w,c
  2366   000506  6ED9               	movwf	fsr2l,c
  2367   000508  6ADA               	clrf	fsr2h,c
  2368   00050A  0E00               	movlw	high _card_memory
  2369   00050C  22DA               	addwfc	fsr2h,f,c
  2370   00050E  0E07               	movlw	7
  2371   000510  6EDF               	movwf	indf2,c
  2372   000512                     
  2373                           ;color.c: 177:             card_count ++;
  2374   000512  2A43               	incf	_card_count^0,f,c
  2375   000514                     
  2376                           ;color.c: 178:             movement(mL,mR,6);
  2377   000514  C03A  F028         	movff	buggy_color_response@mL,movement@mL
  2378   000518  C03B  F029         	movff	buggy_color_response@mL+1,movement@mL+1
  2379   00051C  C03C  F02A         	movff	buggy_color_response@mR,movement@mR
  2380   000520  C03D  F02B         	movff	buggy_color_response@mR+1,movement@mR+1
  2381   000524  0E00               	movlw	0
  2382   000526  6E2D               	movwf	(movement@count+1)^0,c
  2383   000528  0E06               	movlw	6
  2384   00052A  6E2C               	movwf	movement@count^0,c
  2385   00052C  EC61  F005         	call	_movement	;wreg free
  2386   000530                     l3075:
  2387                           
  2388                           ;color.c: 182:         if (color.R_norm < 0.40 && color.B_norm > 0.30 && color.G_norm > 
      +                          0.4){
  2389   000530  C04C  F003         	movff	_color+8,___flge@ff1
  2390   000534  C04D  F004         	movff	_color+9,___flge@ff1+1
  2391   000538  C04E  F005         	movff	_color+10,___flge@ff1+2
  2392   00053C  C04F  F006         	movff	_color+11,___flge@ff1+3
  2393   000540  0ECD               	movlw	205
  2394   000542  6E07               	movwf	___flge@ff2^0,c
  2395   000544  0ECC               	movlw	204
  2396   000546  6E08               	movwf	(___flge@ff2+1)^0,c
  2397   000548  0ECC               	movlw	204
  2398   00054A  6E09               	movwf	(___flge@ff2+2)^0,c
  2399   00054C  0E3E               	movlw	62
  2400   00054E  6E0A               	movwf	(___flge@ff2+3)^0,c
  2401   000550  ECF9  F00B         	call	___flge	;wreg free
  2402   000554  B0D8               	btfsc	status,0,c
  2403   000556  EFAF  F002         	goto	u2331
  2404   00055A  EFB1  F002         	goto	u2330
  2405   00055E                     u2331:
  2406   00055E  EFFA  F002         	goto	l3087
  2407   000562                     u2330:
  2408   000562  0E9A               	movlw	154
  2409   000564  6E03               	movwf	___flge@ff1^0,c
  2410   000566  0E99               	movlw	153
  2411   000568  6E04               	movwf	(___flge@ff1+1)^0,c
  2412   00056A  0E99               	movlw	153
  2413   00056C  6E05               	movwf	(___flge@ff1+2)^0,c
  2414   00056E  0E3E               	movlw	62
  2415   000570  6E06               	movwf	(___flge@ff1+3)^0,c
  2416   000572  C050  F007         	movff	_color+12,___flge@ff2
  2417   000576  C051  F008         	movff	_color+13,___flge@ff2+1
  2418   00057A  C052  F009         	movff	_color+14,___flge@ff2+2
  2419   00057E  C053  F00A         	movff	_color+15,___flge@ff2+3
  2420   000582  ECF9  F00B         	call	___flge	;wreg free
  2421   000586  B0D8               	btfsc	status,0,c
  2422   000588  EFC8  F002         	goto	u2341
  2423   00058C  EFCA  F002         	goto	u2340
  2424   000590                     u2341:
  2425   000590  EFFA  F002         	goto	l3087
  2426   000594                     u2340:
  2427   000594  0ECD               	movlw	205
  2428   000596  6E03               	movwf	___flge@ff1^0,c
  2429   000598  0ECC               	movlw	204
  2430   00059A  6E04               	movwf	(___flge@ff1+1)^0,c
  2431   00059C  0ECC               	movlw	204
  2432   00059E  6E05               	movwf	(___flge@ff1+2)^0,c
  2433   0005A0  0E3E               	movlw	62
  2434   0005A2  6E06               	movwf	(___flge@ff1+3)^0,c
  2435   0005A4  C054  F007         	movff	_color+16,___flge@ff2
  2436   0005A8  C055  F008         	movff	_color+17,___flge@ff2+1
  2437   0005AC  C056  F009         	movff	_color+18,___flge@ff2+2
  2438   0005B0  C057  F00A         	movff	_color+19,___flge@ff2+3
  2439   0005B4  ECF9  F00B         	call	___flge	;wreg free
  2440   0005B8  B0D8               	btfsc	status,0,c
  2441   0005BA  EFE1  F002         	goto	u2351
  2442   0005BE  EFE3  F002         	goto	u2350
  2443   0005C2                     u2351:
  2444   0005C2  EFFA  F002         	goto	l3087
  2445   0005C6                     u2350:
  2446   0005C6                     
  2447                           ;color.c: 183:             card_memory[card_count] = 6;
  2448   0005C6  0E88               	movlw	low _card_memory
  2449   0005C8  2443               	addwf	_card_count^0,w,c
  2450   0005CA  6ED9               	movwf	fsr2l,c
  2451   0005CC  6ADA               	clrf	fsr2h,c
  2452   0005CE  0E00               	movlw	high _card_memory
  2453   0005D0  22DA               	addwfc	fsr2h,f,c
  2454   0005D2  0E06               	movlw	6
  2455   0005D4  6EDF               	movwf	indf2,c
  2456   0005D6                     
  2457                           ;color.c: 184:             card_count ++;
  2458   0005D6  2A43               	incf	_card_count^0,f,c
  2459   0005D8                     
  2460                           ;color.c: 185:             movement(mL,mR,7);
  2461   0005D8  C03A  F028         	movff	buggy_color_response@mL,movement@mL
  2462   0005DC  C03B  F029         	movff	buggy_color_response@mL+1,movement@mL+1
  2463   0005E0  C03C  F02A         	movff	buggy_color_response@mR,movement@mR
  2464   0005E4  C03D  F02B         	movff	buggy_color_response@mR+1,movement@mR+1
  2465   0005E8  0E00               	movlw	0
  2466   0005EA  6E2D               	movwf	(movement@count+1)^0,c
  2467   0005EC  0E07               	movlw	7
  2468   0005EE  6E2C               	movwf	movement@count^0,c
  2469   0005F0  EC61  F005         	call	_movement	;wreg free
  2470   0005F4                     l3087:
  2471                           
  2472                           ;color.c: 189:         if (color.R_norm < 0.5 && color.C > 16000 ){
  2473   0005F4  C04C  F003         	movff	_color+8,___flge@ff1
  2474   0005F8  C04D  F004         	movff	_color+9,___flge@ff1+1
  2475   0005FC  C04E  F005         	movff	_color+10,___flge@ff1+2
  2476   000600  C04F  F006         	movff	_color+11,___flge@ff1+3
  2477   000604  0E00               	movlw	0
  2478   000606  6E07               	movwf	___flge@ff2^0,c
  2479   000608  0E00               	movlw	0
  2480   00060A  6E08               	movwf	(___flge@ff2+1)^0,c
  2481   00060C  0E00               	movlw	0
  2482   00060E  6E09               	movwf	(___flge@ff2+2)^0,c
  2483   000610  0E3F               	movlw	63
  2484   000612  6E0A               	movwf	(___flge@ff2+3)^0,c
  2485   000614  ECF9  F00B         	call	___flge	;wreg free
  2486   000618  B0D8               	btfsc	status,0,c
  2487   00061A  EF11  F003         	goto	u2361
  2488   00061E  EF13  F003         	goto	u2360
  2489   000622                     u2361:
  2490   000622  EF85  F003         	goto	l3117
  2491   000626                     u2360:
  2492   000626  0E81               	movlw	129
  2493   000628  5C4A               	subwf	(_color+6)^0,w,c
  2494   00062A  0E3E               	movlw	62
  2495   00062C  584B               	subwfb	(_color+7)^0,w,c
  2496   00062E  A0D8               	btfss	status,0,c
  2497   000630  EF1C  F003         	goto	u2371
  2498   000634  EF1E  F003         	goto	u2370
  2499   000638                     u2371:
  2500   000638  EF85  F003         	goto	l3117
  2501   00063C                     u2370:
  2502   00063C                     
  2503                           ;color.c: 192:             card_memory[card_count] = 3;
  2504   00063C  0E88               	movlw	low _card_memory
  2505   00063E  2443               	addwf	_card_count^0,w,c
  2506   000640  6ED9               	movwf	fsr2l,c
  2507   000642  6ADA               	clrf	fsr2h,c
  2508   000644  0E00               	movlw	high _card_memory
  2509   000646  22DA               	addwfc	fsr2h,f,c
  2510   000648  0E03               	movlw	3
  2511   00064A  6EDF               	movwf	indf2,c
  2512   00064C                     
  2513                           ;color.c: 193:             card_count ++;
  2514   00064C  2A43               	incf	_card_count^0,f,c
  2515   00064E                     
  2516                           ;color.c: 195:             LATGbits.LATG1 = 0;
  2517   00064E  927F               	bcf	127,1,c	;volatile
  2518   000650                     
  2519                           ;color.c: 196:             LATAbits.LATA4 = 0;
  2520   000650  9879               	bcf	121,4,c	;volatile
  2521   000652                     
  2522                           ;color.c: 197:             LATFbits.LATF7 = 0;
  2523   000652  9E7E               	bcf	126,7,c	;volatile
  2524   000654                     
  2525                           ;color.c: 199:             space(mL,mR);
  2526   000654  C03A  F01C         	movff	buggy_color_response@mL,space@mL
  2527   000658  C03B  F01D         	movff	buggy_color_response@mL+1,space@mL+1
  2528   00065C  C03C  F01E         	movff	buggy_color_response@mR,space@mR
  2529   000660  C03D  F01F         	movff	buggy_color_response@mR+1,space@mR+1
  2530   000664  EC7B  F00C         	call	_space	;wreg free
  2531   000668                     
  2532                           ;color.c: 200:             _delay((unsigned long)((500)*(64000000/4000.0)));
  2533   000668  0E29               	movlw	41
  2534   00066A  6E41               	movwf	(??_buggy_color_response+1)^0,c
  2535   00066C  0E96               	movlw	150
  2536   00066E  6E40               	movwf	??_buggy_color_response^0,c
  2537   000670  0E7F               	movlw	127
  2538   000672                     u2587:
  2539   000672  2EE8               	decfsz	wreg,f,c
  2540   000674  D7FE               	bra	u2587
  2541   000676  2E40               	decfsz	??_buggy_color_response^0,f,c
  2542   000678  D7FC               	bra	u2587
  2543   00067A  2E41               	decfsz	(??_buggy_color_response+1)^0,f,c
  2544   00067C  D7FA               	bra	u2587
  2545   00067E  F000               	nop	
  2546   000680                     
  2547                           ;color.c: 201:             stop(mL,mR);
  2548   000680  C03A  F016         	movff	buggy_color_response@mL,stop@mL
  2549   000684  C03B  F017         	movff	buggy_color_response@mL+1,stop@mL+1
  2550   000688  C03C  F018         	movff	buggy_color_response@mR,stop@mR
  2551   00068C  C03D  F019         	movff	buggy_color_response@mR+1,stop@mR+1
  2552   000690  ECE6  F00D         	call	_stop	;wreg free
  2553   000694                     
  2554                           ;color.c: 202:             _delay((unsigned long)((500)*(64000000/4000.0)));
  2555   000694  0E29               	movlw	41
  2556   000696  6E41               	movwf	(??_buggy_color_response+1)^0,c
  2557   000698  0E96               	movlw	150
  2558   00069A  6E40               	movwf	??_buggy_color_response^0,c
  2559   00069C  0E7F               	movlw	127
  2560   00069E                     u2597:
  2561   00069E  2EE8               	decfsz	wreg,f,c
  2562   0006A0  D7FE               	bra	u2597
  2563   0006A2  2E40               	decfsz	??_buggy_color_response^0,f,c
  2564   0006A4  D7FC               	bra	u2597
  2565   0006A6  2E41               	decfsz	(??_buggy_color_response+1)^0,f,c
  2566   0006A8  D7FA               	bra	u2597
  2567   0006AA  F000               	nop	
  2568   0006AC                     
  2569                           ;color.c: 204:             return_home(mL,mR);
  2570   0006AC  C03A  F034         	movff	buggy_color_response@mL,return_home@mL
  2571   0006B0  C03B  F035         	movff	buggy_color_response@mL+1,return_home@mL+1
  2572   0006B4  C03C  F036         	movff	buggy_color_response@mR,return_home@mR
  2573   0006B8  C03D  F037         	movff	buggy_color_response@mR+1,return_home@mR+1
  2574   0006BC  ECAF  F008         	call	_return_home	;wreg free
  2575   0006C0                     
  2576                           ;color.c: 206:             stop(mL,mR);
  2577   0006C0  C03A  F016         	movff	buggy_color_response@mL,stop@mL
  2578   0006C4  C03B  F017         	movff	buggy_color_response@mL+1,stop@mL+1
  2579   0006C8  C03C  F018         	movff	buggy_color_response@mR,stop@mR
  2580   0006CC  C03D  F019         	movff	buggy_color_response@mR+1,stop@mR+1
  2581   0006D0  ECE6  F00D         	call	_stop	;wreg free
  2582   0006D4                     
  2583                           ;color.c: 207:             _delay((unsigned long)((500)*(64000000/4000.0)));
  2584   0006D4  0E29               	movlw	41
  2585   0006D6  6E41               	movwf	(??_buggy_color_response+1)^0,c
  2586   0006D8  0E96               	movlw	150
  2587   0006DA  6E40               	movwf	??_buggy_color_response^0,c
  2588   0006DC  0E7F               	movlw	127
  2589   0006DE                     u2607:
  2590   0006DE  2EE8               	decfsz	wreg,f,c
  2591   0006E0  D7FE               	bra	u2607
  2592   0006E2  2E40               	decfsz	??_buggy_color_response^0,f,c
  2593   0006E4  D7FC               	bra	u2607
  2594   0006E6  2E41               	decfsz	(??_buggy_color_response+1)^0,f,c
  2595   0006E8  D7FA               	bra	u2607
  2596   0006EA  F000               	nop	
  2597   0006EC                     
  2598                           ;color.c: 209:             movement_return(mL,mR,3);
  2599   0006EC  C03A  F02E         	movff	buggy_color_response@mL,movement_return@mL
  2600   0006F0  C03B  F02F         	movff	buggy_color_response@mL+1,movement_return@mL+1
  2601   0006F4  C03C  F030         	movff	buggy_color_response@mR,movement_return@mR
  2602   0006F8  C03D  F031         	movff	buggy_color_response@mR+1,movement_return@mR+1
  2603   0006FC  0E00               	movlw	0
  2604   0006FE  6E33               	movwf	(movement_return@count+1)^0,c
  2605   000700  0E03               	movlw	3
  2606   000702  6E32               	movwf	movement_return@count^0,c
  2607   000704  ECEF  F006         	call	_movement_return	;wreg free
  2608   000708  0003               	sleep		;# 
  2609   00070A                     l3117:
  2610                           
  2611                           ;color.c: 213:         timer_reset();
  2612   00070A  ECAC  F011         	call	_timer_reset	;wreg free
  2613                           
  2614                           ;color.c: 214:     }
  2615   00070E  EF93  F003         	goto	l144
  2616   000712                     l3119:
  2617   000712  C03A  F01C         	movff	buggy_color_response@mL,forward@mL
  2618   000716  C03B  F01D         	movff	buggy_color_response@mL+1,forward@mL+1
  2619   00071A  C03C  F01E         	movff	buggy_color_response@mR,forward@mR
  2620   00071E  C03D  F01F         	movff	buggy_color_response@mR+1,forward@mR+1
  2621   000722  ECFC  F00C         	call	_forward	;wreg free
  2622   000726                     l144:
  2623   000726  0012               	return		;funcret
  2624   000728                     __end_of_buggy_color_response:
  2625                           	callstack 0
  2626                           
  2627 ;; *************** function _timer_reset *****************
  2628 ;; Defined at:
  2629 ;;		line 25 in file "timers.c"
  2630 ;; Parameters:    Size  Location     Type
  2631 ;;		None
  2632 ;; Auto vars:     Size  Location     Type
  2633 ;;		None
  2634 ;; Return value:  Size  Location     Type
  2635 ;;                  1    wreg      void 
  2636 ;; Registers used:
  2637 ;;		wreg, status,2
  2638 ;; Tracked objects:
  2639 ;;		On entry : 0/0
  2640 ;;		On exit  : 0/0
  2641 ;;		Unchanged: 0/0
  2642 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2643 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2644 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2645 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2646 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2647 ;;Total ram usage:        0 bytes
  2648 ;; Hardware stack levels used: 1
  2649 ;; Hardware stack levels required when called: 1
  2650 ;; This function calls:
  2651 ;;		Nothing
  2652 ;; This function is called by:
  2653 ;;		_buggy_color_response
  2654 ;;		_main
  2655 ;; This function uses a non-reentrant model
  2656 ;;
  2657                           
  2658                           	psect	text14
  2659   002358                     __ptext14:
  2660                           	callstack 0
  2661   002358                     _timer_reset:
  2662                           	callstack 29
  2663   002358                     
  2664                           ;timers.c: 26:     timer_val = 0;
  2665   002358  0E00               	movlw	0
  2666   00235A  0100               	movlb	0	; () banked
  2667   00235C  6FB1               	movwf	(_timer_val+1)& (0+255),b
  2668   00235E  0E00               	movlw	0
  2669   002360  6FB0               	movwf	_timer_val& (0+255),b
  2670                           
  2671                           ;timers.c: 27:     TMR0H=0;
  2672   002362  0E00               	movlw	0
  2673   002364  6ED4               	movwf	212,c	;volatile
  2674                           
  2675                           ;timers.c: 28:     TMR0L=0b00100011;
  2676   002366  0E23               	movlw	35
  2677   002368  6ED3               	movwf	211,c	;volatile
  2678   00236A                     
  2679                           ; BSR set to: 0
  2680   00236A  0012               	return		;funcret
  2681   00236C                     __end_of_timer_reset:
  2682                           	callstack 0
  2683                           
  2684 ;; *************** function _return_home *****************
  2685 ;; Defined at:
  2686 ;;		line 248 in file "color.c"
  2687 ;; Parameters:    Size  Location     Type
  2688 ;;  mL              2   51[COMRAM] PTR struct DC_motor
  2689 ;;		 -> motorL(9), 
  2690 ;;  mR              2   53[COMRAM] PTR struct DC_motor
  2691 ;;		 -> motorR(9), 
  2692 ;; Auto vars:     Size  Location     Type
  2693 ;;		None
  2694 ;; Return value:  Size  Location     Type
  2695 ;;                  1    wreg      void 
  2696 ;; Registers used:
  2697 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2698 ;; Tracked objects:
  2699 ;;		On entry : 0/0
  2700 ;;		On exit  : 0/0
  2701 ;;		Unchanged: 0/0
  2702 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2703 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2704 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2705 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2706 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2707 ;;Total ram usage:        6 bytes
  2708 ;; Hardware stack levels used: 1
  2709 ;; Hardware stack levels required when called: 7
  2710 ;; This function calls:
  2711 ;;		_delay_ms_func
  2712 ;;		_forward
  2713 ;;		_movement_return
  2714 ;;		_reverse
  2715 ;;		_stop
  2716 ;; This function is called by:
  2717 ;;		_buggy_color_response
  2718 ;; This function uses a non-reentrant model
  2719 ;;
  2720                           
  2721                           	psect	text15
  2722   00115E                     __ptext15:
  2723                           	callstack 0
  2724   00115E                     _return_home:
  2725                           	callstack 22
  2726   00115E                     
  2727                           ;color.c: 249:     while(timer_index > 0 && card_count > 0 ) {
  2728   00115E  EF59  F009         	goto	l2887
  2729   001162                     l2855:
  2730                           
  2731                           ;color.c: 251:         movement_return(mL,mR,card_memory[card_count-1]);
  2732   001162  C034  F02E         	movff	return_home@mL,movement_return@mL
  2733   001166  C035  F02F         	movff	return_home@mL+1,movement_return@mL+1
  2734   00116A  C036  F030         	movff	return_home@mR,movement_return@mR
  2735   00116E  C037  F031         	movff	return_home@mR+1,movement_return@mR+1
  2736   001172  0E87               	movlw	low (_card_memory+65535)
  2737   001174  2443               	addwf	_card_count^0,w,c
  2738   001176  6ED9               	movwf	fsr2l,c
  2739   001178  6ADA               	clrf	fsr2h,c
  2740   00117A  0E00               	movlw	high (_card_memory+65535)
  2741   00117C  22DA               	addwfc	fsr2h,f,c
  2742   00117E  50DF               	movf	indf2,w,c
  2743   001180  6E38               	movwf	??_return_home^0,c
  2744   001182  5038               	movf	??_return_home^0,w,c
  2745   001184  6E32               	movwf	movement_return@count^0,c
  2746   001186  6A33               	clrf	(movement_return@count+1)^0,c
  2747   001188  ECEF  F006         	call	_movement_return	;wreg free
  2748   00118C                     
  2749                           ;color.c: 252:         card_count--;
  2750   00118C  0643               	decf	_card_count^0,f,c
  2751   00118E                     
  2752                           ;color.c: 253:         _delay((unsigned long)((250)*(64000000/4000.0)));
  2753   00118E  0E15               	movlw	21
  2754   001190  6E39               	movwf	(??_return_home+1)^0,c
  2755   001192  0E4B               	movlw	75
  2756   001194  6E38               	movwf	??_return_home^0,c
  2757   001196  0EBE               	movlw	190
  2758   001198                     u2617:
  2759   001198  2EE8               	decfsz	wreg,f,c
  2760   00119A  D7FE               	bra	u2617
  2761   00119C  2E38               	decfsz	??_return_home^0,f,c
  2762   00119E  D7FC               	bra	u2617
  2763   0011A0  2E39               	decfsz	(??_return_home+1)^0,f,c
  2764   0011A2  D7FA               	bra	u2617
  2765   0011A4  D000               	nop2	
  2766   0011A6                     
  2767                           ;color.c: 254:         reverse(mL,mR);
  2768   0011A6  C034  F01C         	movff	return_home@mL,reverse@mL
  2769   0011AA  C035  F01D         	movff	return_home@mL+1,reverse@mL+1
  2770   0011AE  C036  F01E         	movff	return_home@mR,reverse@mR
  2771   0011B2  C037  F01F         	movff	return_home@mR+1,reverse@mR+1
  2772   0011B6  EC71  F00D         	call	_reverse	;wreg free
  2773   0011BA                     
  2774                           ;color.c: 255:         _delay((unsigned long)((500)*(64000000/4000.0)));
  2775   0011BA  0E29               	movlw	41
  2776   0011BC  6E39               	movwf	(??_return_home+1)^0,c
  2777   0011BE  0E96               	movlw	150
  2778   0011C0  6E38               	movwf	??_return_home^0,c
  2779   0011C2  0E7F               	movlw	127
  2780   0011C4                     u2627:
  2781   0011C4  2EE8               	decfsz	wreg,f,c
  2782   0011C6  D7FE               	bra	u2627
  2783   0011C8  2E38               	decfsz	??_return_home^0,f,c
  2784   0011CA  D7FC               	bra	u2627
  2785   0011CC  2E39               	decfsz	(??_return_home+1)^0,f,c
  2786   0011CE  D7FA               	bra	u2627
  2787   0011D0  F000               	nop	
  2788   0011D2                     
  2789                           ;color.c: 256:         stop(mL,mR);
  2790   0011D2  C034  F016         	movff	return_home@mL,stop@mL
  2791   0011D6  C035  F017         	movff	return_home@mL+1,stop@mL+1
  2792   0011DA  C036  F018         	movff	return_home@mR,stop@mR
  2793   0011DE  C037  F019         	movff	return_home@mR+1,stop@mR+1
  2794   0011E2  ECE6  F00D         	call	_stop	;wreg free
  2795   0011E6                     
  2796                           ;color.c: 257:         _delay((unsigned long)((500)*(64000000/4000.0)));
  2797   0011E6  0E29               	movlw	41
  2798   0011E8  6E39               	movwf	(??_return_home+1)^0,c
  2799   0011EA  0E96               	movlw	150
  2800   0011EC  6E38               	movwf	??_return_home^0,c
  2801   0011EE  0E7F               	movlw	127
  2802   0011F0                     u2637:
  2803   0011F0  2EE8               	decfsz	wreg,f,c
  2804   0011F2  D7FE               	bra	u2637
  2805   0011F4  2E38               	decfsz	??_return_home^0,f,c
  2806   0011F6  D7FC               	bra	u2637
  2807   0011F8  2E39               	decfsz	(??_return_home+1)^0,f,c
  2808   0011FA  D7FA               	bra	u2637
  2809   0011FC  F000               	nop	
  2810   0011FE                     
  2811                           ;color.c: 258:         forward(mL,mR);
  2812   0011FE  C034  F01C         	movff	return_home@mL,forward@mL
  2813   001202  C035  F01D         	movff	return_home@mL+1,forward@mL+1
  2814   001206  C036  F01E         	movff	return_home@mR,forward@mR
  2815   00120A  C037  F01F         	movff	return_home@mR+1,forward@mR+1
  2816   00120E  ECFC  F00C         	call	_forward	;wreg free
  2817   001212                     
  2818                           ;color.c: 259:         delay_ms_func(timer_memory[timer_index-1]);
  2819   001212  0E5F               	movlw	low (_timer_memory+65535)
  2820   001214  2442               	addwf	_timer_index^0,w,c
  2821   001216  6ED9               	movwf	fsr2l,c
  2822   001218  6ADA               	clrf	fsr2h,c
  2823   00121A  0E00               	movlw	high (_timer_memory+65535)
  2824   00121C  22DA               	addwfc	fsr2h,f,c
  2825   00121E  50DF               	movf	indf2,w,c
  2826   001220  6E38               	movwf	??_return_home^0,c
  2827   001222  5038               	movf	??_return_home^0,w,c
  2828   001224  6E03               	movwf	delay_ms_func@time^0,c
  2829   001226  6A04               	clrf	(delay_ms_func@time+1)^0,c
  2830   001228  ECBE  F010         	call	_delay_ms_func	;wreg free
  2831   00122C                     
  2832                           ;color.c: 260:         timer_index--;
  2833   00122C  0642               	decf	_timer_index^0,f,c
  2834   00122E                     
  2835                           ;color.c: 261:         stop(mL,mR);
  2836   00122E  C034  F016         	movff	return_home@mL,stop@mL
  2837   001232  C035  F017         	movff	return_home@mL+1,stop@mL+1
  2838   001236  C036  F018         	movff	return_home@mR,stop@mR
  2839   00123A  C037  F019         	movff	return_home@mR+1,stop@mR+1
  2840   00123E  ECE6  F00D         	call	_stop	;wreg free
  2841   001242                     
  2842                           ;color.c: 262:         _delay((unsigned long)((200)*(64000000/4000.0)));
  2843   001242  0E11               	movlw	17
  2844   001244  6E39               	movwf	(??_return_home+1)^0,c
  2845   001246  0E3C               	movlw	60
  2846   001248  6E38               	movwf	??_return_home^0,c
  2847   00124A  0ECB               	movlw	203
  2848   00124C                     u2647:
  2849   00124C  2EE8               	decfsz	wreg,f,c
  2850   00124E  D7FE               	bra	u2647
  2851   001250  2E38               	decfsz	??_return_home^0,f,c
  2852   001252  D7FC               	bra	u2647
  2853   001254  2E39               	decfsz	(??_return_home+1)^0,f,c
  2854   001256  D7FA               	bra	u2647
  2855   001258  F000               	nop	
  2856   00125A                     
  2857                           ;color.c: 263:          reverse(mL,mR);
  2858   00125A  C034  F01C         	movff	return_home@mL,reverse@mL
  2859   00125E  C035  F01D         	movff	return_home@mL+1,reverse@mL+1
  2860   001262  C036  F01E         	movff	return_home@mR,reverse@mR
  2861   001266  C037  F01F         	movff	return_home@mR+1,reverse@mR+1
  2862   00126A  EC71  F00D         	call	_reverse	;wreg free
  2863   00126E                     
  2864                           ;color.c: 264:         _delay((unsigned long)((100)*(64000000/4000.0)));
  2865   00126E  0E09               	movlw	9
  2866   001270  6E39               	movwf	(??_return_home+1)^0,c
  2867   001272  0E1E               	movlw	30
  2868   001274  6E38               	movwf	??_return_home^0,c
  2869   001276  0EE4               	movlw	228
  2870   001278                     u2657:
  2871   001278  2EE8               	decfsz	wreg,f,c
  2872   00127A  D7FE               	bra	u2657
  2873   00127C  2E38               	decfsz	??_return_home^0,f,c
  2874   00127E  D7FC               	bra	u2657
  2875   001280  2E39               	decfsz	(??_return_home+1)^0,f,c
  2876   001282  D7FA               	bra	u2657
  2877   001284  D000               	nop2	
  2878   001286                     
  2879                           ;color.c: 265:         stop(mL,mR);
  2880   001286  C034  F016         	movff	return_home@mL,stop@mL
  2881   00128A  C035  F017         	movff	return_home@mL+1,stop@mL+1
  2882   00128E  C036  F018         	movff	return_home@mR,stop@mR
  2883   001292  C037  F019         	movff	return_home@mR+1,stop@mR+1
  2884   001296  ECE6  F00D         	call	_stop	;wreg free
  2885   00129A                     
  2886                           ;color.c: 266:         _delay((unsigned long)((250)*(64000000/4000.0)));
  2887   00129A  0E15               	movlw	21
  2888   00129C  6E39               	movwf	(??_return_home+1)^0,c
  2889   00129E  0E4B               	movlw	75
  2890   0012A0  6E38               	movwf	??_return_home^0,c
  2891   0012A2  0EBE               	movlw	190
  2892   0012A4                     u2667:
  2893   0012A4  2EE8               	decfsz	wreg,f,c
  2894   0012A6  D7FE               	bra	u2667
  2895   0012A8  2E38               	decfsz	??_return_home^0,f,c
  2896   0012AA  D7FC               	bra	u2667
  2897   0012AC  2E39               	decfsz	(??_return_home+1)^0,f,c
  2898   0012AE  D7FA               	bra	u2667
  2899   0012B0  D000               	nop2	
  2900   0012B2                     l2887:
  2901                           
  2902                           ;color.c: 249:     while(timer_index > 0 && card_count > 0 ) {
  2903   0012B2  5042               	movf	_timer_index^0,w,c
  2904   0012B4  B4D8               	btfsc	status,2,c
  2905   0012B6  EF5F  F009         	goto	u2091
  2906   0012BA  EF61  F009         	goto	u2090
  2907   0012BE                     u2091:
  2908   0012BE  EF69  F009         	goto	l152
  2909   0012C2                     u2090:
  2910   0012C2  5043               	movf	_card_count^0,w,c
  2911   0012C4  A4D8               	btfss	status,2,c
  2912   0012C6  EF67  F009         	goto	u2101
  2913   0012CA  EF69  F009         	goto	u2100
  2914   0012CE                     u2101:
  2915   0012CE  EFB1  F008         	goto	l2855
  2916   0012D2                     u2100:
  2917   0012D2                     l152:
  2918   0012D2  0012               	return		;funcret
  2919   0012D4                     __end_of_return_home:
  2920                           	callstack 0
  2921                           
  2922 ;; *************** function _movement_return *****************
  2923 ;; Defined at:
  2924 ;;		line 324 in file "dc_motor.c"
  2925 ;; Parameters:    Size  Location     Type
  2926 ;;  mL              2   45[COMRAM] PTR struct DC_motor
  2927 ;;		 -> motorL(9), 
  2928 ;;  mR              2   47[COMRAM] PTR struct DC_motor
  2929 ;;		 -> motorR(9), 
  2930 ;;  count           2   49[COMRAM] int 
  2931 ;; Auto vars:     Size  Location     Type
  2932 ;;		None
  2933 ;; Return value:  Size  Location     Type
  2934 ;;                  1    wreg      void 
  2935 ;; Registers used:
  2936 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2937 ;; Tracked objects:
  2938 ;;		On entry : 0/0
  2939 ;;		On exit  : 0/0
  2940 ;;		Unchanged: 0/0
  2941 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2942 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2943 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2944 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2945 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2946 ;;Total ram usage:        6 bytes
  2947 ;; Hardware stack levels used: 1
  2948 ;; Hardware stack levels required when called: 6
  2949 ;; This function calls:
  2950 ;;		_left_45
  2951 ;;		_reverse_pink
  2952 ;;		_reverse_yellow
  2953 ;;		_right_45
  2954 ;;		_stop
  2955 ;; This function is called by:
  2956 ;;		_buggy_color_response
  2957 ;;		_return_home
  2958 ;; This function uses a non-reentrant model
  2959 ;;
  2960                           
  2961                           	psect	text16
  2962   000DDE                     __ptext16:
  2963                           	callstack 0
  2964   000DDE                     _movement_return:
  2965                           	callstack 22
  2966   000DDE                     
  2967                           ;dc_motor.c: 324: void movement_return(DC_motor *mL, DC_motor *mR, int count);dc_motor.c
      +                          : 325: {;dc_motor.c: 327:     if (count == 1){right_45(mL,mR,2,right_timer); stop(mL,mR)
      +                          ;}
  2968   000DDE  0432               	decf	movement_return@count^0,w,c
  2969   000DE0  1033               	iorwf	(movement_return@count+1)^0,w,c
  2970   000DE2  A4D8               	btfss	status,2,c
  2971   000DE4  EFF6  F006         	goto	u1611
  2972   000DE8  EFF8  F006         	goto	u1610
  2973   000DEC                     u1611:
  2974   000DEC  EF14  F007         	goto	l2577
  2975   000DF0                     u1610:
  2976   000DF0  C02E  F01C         	movff	movement_return@mL,right_45@mL
  2977   000DF4  C02F  F01D         	movff	movement_return@mL+1,right_45@mL+1
  2978   000DF8  C030  F01E         	movff	movement_return@mR,right_45@mR
  2979   000DFC  C031  F01F         	movff	movement_return@mR+1,right_45@mR+1
  2980   000E00  0E00               	movlw	0
  2981   000E02  6E21               	movwf	(right_45@count+1)^0,c
  2982   000E04  0E02               	movlw	2
  2983   000E06  6E20               	movwf	right_45@count^0,c
  2984   000E08  C058  F022         	movff	_right_timer,right_45@right_timer
  2985   000E0C  C059  F023         	movff	_right_timer+1,right_45@right_timer+1
  2986   000E10  EC20  F00A         	call	_right_45	;wreg free
  2987   000E14  C02E  F016         	movff	movement_return@mL,stop@mL
  2988   000E18  C02F  F017         	movff	movement_return@mL+1,stop@mL+1
  2989   000E1C  C030  F018         	movff	movement_return@mR,stop@mR
  2990   000E20  C031  F019         	movff	movement_return@mR+1,stop@mR+1
  2991   000E24  ECE6  F00D         	call	_stop	;wreg free
  2992   000E28                     l2577:
  2993                           
  2994                           ;dc_motor.c: 328:     if (count == 2){left_45(mL,mR,2,left_timer); stop(mL,mR);}
  2995   000E28  0E02               	movlw	2
  2996   000E2A  1832               	xorwf	movement_return@count^0,w,c
  2997   000E2C  1033               	iorwf	(movement_return@count+1)^0,w,c
  2998   000E2E  A4D8               	btfss	status,2,c
  2999   000E30  EF1C  F007         	goto	u1621
  3000   000E34  EF1E  F007         	goto	u1620
  3001   000E38                     u1621:
  3002   000E38  EF3A  F007         	goto	l2581
  3003   000E3C                     u1620:
  3004   000E3C  C02E  F01C         	movff	movement_return@mL,left_45@mL
  3005   000E40  C02F  F01D         	movff	movement_return@mL+1,left_45@mL+1
  3006   000E44  C030  F01E         	movff	movement_return@mR,left_45@mR
  3007   000E48  C031  F01F         	movff	movement_return@mR+1,left_45@mR+1
  3008   000E4C  0E00               	movlw	0
  3009   000E4E  6E21               	movwf	(left_45@count+1)^0,c
  3010   000E50  0E02               	movlw	2
  3011   000E52  6E20               	movwf	left_45@count^0,c
  3012   000E54  C05A  F022         	movff	_left_timer,left_45@left_timer
  3013   000E58  C05B  F023         	movff	_left_timer+1,left_45@left_timer+1
  3014   000E5C  ECBE  F00A         	call	_left_45	;wreg free
  3015   000E60  C02E  F016         	movff	movement_return@mL,stop@mL
  3016   000E64  C02F  F017         	movff	movement_return@mL+1,stop@mL+1
  3017   000E68  C030  F018         	movff	movement_return@mR,stop@mR
  3018   000E6C  C031  F019         	movff	movement_return@mR+1,stop@mR+1
  3019   000E70  ECE6  F00D         	call	_stop	;wreg free
  3020   000E74                     l2581:
  3021                           
  3022                           ;dc_motor.c: 329:     if (count == 3){right_45(mL,mR,4,right_timer); stop(mL,mR);}
  3023   000E74  0E03               	movlw	3
  3024   000E76  1832               	xorwf	movement_return@count^0,w,c
  3025   000E78  1033               	iorwf	(movement_return@count+1)^0,w,c
  3026   000E7A  A4D8               	btfss	status,2,c
  3027   000E7C  EF42  F007         	goto	u1631
  3028   000E80  EF44  F007         	goto	u1630
  3029   000E84                     u1631:
  3030   000E84  EF60  F007         	goto	l2585
  3031   000E88                     u1630:
  3032   000E88  C02E  F01C         	movff	movement_return@mL,right_45@mL
  3033   000E8C  C02F  F01D         	movff	movement_return@mL+1,right_45@mL+1
  3034   000E90  C030  F01E         	movff	movement_return@mR,right_45@mR
  3035   000E94  C031  F01F         	movff	movement_return@mR+1,right_45@mR+1
  3036   000E98  0E00               	movlw	0
  3037   000E9A  6E21               	movwf	(right_45@count+1)^0,c
  3038   000E9C  0E04               	movlw	4
  3039   000E9E  6E20               	movwf	right_45@count^0,c
  3040   000EA0  C058  F022         	movff	_right_timer,right_45@right_timer
  3041   000EA4  C059  F023         	movff	_right_timer+1,right_45@right_timer+1
  3042   000EA8  EC20  F00A         	call	_right_45	;wreg free
  3043   000EAC  C02E  F016         	movff	movement_return@mL,stop@mL
  3044   000EB0  C02F  F017         	movff	movement_return@mL+1,stop@mL+1
  3045   000EB4  C030  F018         	movff	movement_return@mR,stop@mR
  3046   000EB8  C031  F019         	movff	movement_return@mR+1,stop@mR+1
  3047   000EBC  ECE6  F00D         	call	_stop	;wreg free
  3048   000EC0                     l2585:
  3049                           
  3050                           ;dc_motor.c: 330:     if (count == 6){right_45(mL,mR,3,right_timer); stop(mL,mR);}
  3051   000EC0  0E06               	movlw	6
  3052   000EC2  1832               	xorwf	movement_return@count^0,w,c
  3053   000EC4  1033               	iorwf	(movement_return@count+1)^0,w,c
  3054   000EC6  A4D8               	btfss	status,2,c
  3055   000EC8  EF68  F007         	goto	u1641
  3056   000ECC  EF6A  F007         	goto	u1640
  3057   000ED0                     u1641:
  3058   000ED0  EF86  F007         	goto	l2589
  3059   000ED4                     u1640:
  3060   000ED4  C02E  F01C         	movff	movement_return@mL,right_45@mL
  3061   000ED8  C02F  F01D         	movff	movement_return@mL+1,right_45@mL+1
  3062   000EDC  C030  F01E         	movff	movement_return@mR,right_45@mR
  3063   000EE0  C031  F01F         	movff	movement_return@mR+1,right_45@mR+1
  3064   000EE4  0E00               	movlw	0
  3065   000EE6  6E21               	movwf	(right_45@count+1)^0,c
  3066   000EE8  0E03               	movlw	3
  3067   000EEA  6E20               	movwf	right_45@count^0,c
  3068   000EEC  C058  F022         	movff	_right_timer,right_45@right_timer
  3069   000EF0  C059  F023         	movff	_right_timer+1,right_45@right_timer+1
  3070   000EF4  EC20  F00A         	call	_right_45	;wreg free
  3071   000EF8  C02E  F016         	movff	movement_return@mL,stop@mL
  3072   000EFC  C02F  F017         	movff	movement_return@mL+1,stop@mL+1
  3073   000F00  C030  F018         	movff	movement_return@mR,stop@mR
  3074   000F04  C031  F019         	movff	movement_return@mR+1,stop@mR+1
  3075   000F08  ECE6  F00D         	call	_stop	;wreg free
  3076   000F0C                     l2589:
  3077                           
  3078                           ;dc_motor.c: 331:     if (count == 7){left_45(mL,mR,3,right_timer); stop(mL,mR);}
  3079   000F0C  0E07               	movlw	7
  3080   000F0E  1832               	xorwf	movement_return@count^0,w,c
  3081   000F10  1033               	iorwf	(movement_return@count+1)^0,w,c
  3082   000F12  A4D8               	btfss	status,2,c
  3083   000F14  EF8E  F007         	goto	u1651
  3084   000F18  EF90  F007         	goto	u1650
  3085   000F1C                     u1651:
  3086   000F1C  EFAC  F007         	goto	l2593
  3087   000F20                     u1650:
  3088   000F20  C02E  F01C         	movff	movement_return@mL,left_45@mL
  3089   000F24  C02F  F01D         	movff	movement_return@mL+1,left_45@mL+1
  3090   000F28  C030  F01E         	movff	movement_return@mR,left_45@mR
  3091   000F2C  C031  F01F         	movff	movement_return@mR+1,left_45@mR+1
  3092   000F30  0E00               	movlw	0
  3093   000F32  6E21               	movwf	(left_45@count+1)^0,c
  3094   000F34  0E03               	movlw	3
  3095   000F36  6E20               	movwf	left_45@count^0,c
  3096   000F38  C058  F022         	movff	_right_timer,left_45@left_timer
  3097   000F3C  C059  F023         	movff	_right_timer+1,left_45@left_timer+1
  3098   000F40  ECBE  F00A         	call	_left_45	;wreg free
  3099   000F44  C02E  F016         	movff	movement_return@mL,stop@mL
  3100   000F48  C02F  F017         	movff	movement_return@mL+1,stop@mL+1
  3101   000F4C  C030  F018         	movff	movement_return@mR,stop@mR
  3102   000F50  C031  F019         	movff	movement_return@mR+1,stop@mR+1
  3103   000F54  ECE6  F00D         	call	_stop	;wreg free
  3104   000F58                     l2593:
  3105                           
  3106                           ;dc_motor.c: 333:     if (count == 9){reverse_yellow(mL,mR);}
  3107   000F58  0E09               	movlw	9
  3108   000F5A  1832               	xorwf	movement_return@count^0,w,c
  3109   000F5C  1033               	iorwf	(movement_return@count+1)^0,w,c
  3110   000F5E  A4D8               	btfss	status,2,c
  3111   000F60  EFB4  F007         	goto	u1661
  3112   000F64  EFB6  F007         	goto	u1660
  3113   000F68                     u1661:
  3114   000F68  EFC0  F007         	goto	l2597
  3115   000F6C                     u1660:
  3116   000F6C  C02E  F028         	movff	movement_return@mL,reverse_yellow@mL
  3117   000F70  C02F  F029         	movff	movement_return@mL+1,reverse_yellow@mL+1
  3118   000F74  C030  F02A         	movff	movement_return@mR,reverse_yellow@mR
  3119   000F78  C031  F02B         	movff	movement_return@mR+1,reverse_yellow@mR+1
  3120   000F7C  EC3E  F00E         	call	_reverse_yellow	;wreg free
  3121   000F80                     l2597:
  3122                           
  3123                           ;dc_motor.c: 334:     if (count == 10) {reverse_pink(mL,mR);}
  3124   000F80  0E0A               	movlw	10
  3125   000F82  1832               	xorwf	movement_return@count^0,w,c
  3126   000F84  1033               	iorwf	(movement_return@count+1)^0,w,c
  3127   000F86  A4D8               	btfss	status,2,c
  3128   000F88  EFC8  F007         	goto	u1671
  3129   000F8C  EFCA  F007         	goto	u1670
  3130   000F90                     u1671:
  3131   000F90  EFD4  F007         	goto	l357
  3132   000F94                     u1670:
  3133   000F94  C02E  F028         	movff	movement_return@mL,reverse_pink@mL
  3134   000F98  C02F  F029         	movff	movement_return@mL+1,reverse_pink@mL+1
  3135   000F9C  C030  F02A         	movff	movement_return@mR,reverse_pink@mR
  3136   000FA0  C031  F02B         	movff	movement_return@mR+1,reverse_pink@mR+1
  3137   000FA4  EC87  F00E         	call	_reverse_pink	;wreg free
  3138   000FA8                     l357:
  3139   000FA8  0012               	return		;funcret
  3140   000FAA                     __end_of_movement_return:
  3141                           	callstack 0
  3142                           
  3143 ;; *************** function _reverse_yellow *****************
  3144 ;; Defined at:
  3145 ;;		line 272 in file "dc_motor.c"
  3146 ;; Parameters:    Size  Location     Type
  3147 ;;  mL              2   39[COMRAM] PTR struct DC_motor
  3148 ;;		 -> motorL(9), 
  3149 ;;  mR              2   41[COMRAM] PTR struct DC_motor
  3150 ;;		 -> motorR(9), 
  3151 ;; Auto vars:     Size  Location     Type
  3152 ;;		None
  3153 ;; Return value:  Size  Location     Type
  3154 ;;                  1    wreg      void 
  3155 ;; Registers used:
  3156 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3157 ;; Tracked objects:
  3158 ;;		On entry : 0/0
  3159 ;;		On exit  : 0/0
  3160 ;;		Unchanged: 0/0
  3161 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3162 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3163 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3164 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3165 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3166 ;;Total ram usage:        6 bytes
  3167 ;; Hardware stack levels used: 1
  3168 ;; Hardware stack levels required when called: 5
  3169 ;; This function calls:
  3170 ;;		_left_45
  3171 ;;		_reverse
  3172 ;;		_stop
  3173 ;; This function is called by:
  3174 ;;		_movement_return
  3175 ;; This function uses a non-reentrant model
  3176 ;;
  3177                           
  3178                           	psect	text17
  3179   001C7C                     __ptext17:
  3180                           	callstack 0
  3181   001C7C                     _reverse_yellow:
  3182                           	callstack 22
  3183   001C7C                     
  3184                           ;dc_motor.c: 274:     left_45(mL,mR,2,left_timer);
  3185   001C7C  C028  F01C         	movff	reverse_yellow@mL,left_45@mL
  3186   001C80  C029  F01D         	movff	reverse_yellow@mL+1,left_45@mL+1
  3187   001C84  C02A  F01E         	movff	reverse_yellow@mR,left_45@mR
  3188   001C88  C02B  F01F         	movff	reverse_yellow@mR+1,left_45@mR+1
  3189   001C8C  0E00               	movlw	0
  3190   001C8E  6E21               	movwf	(left_45@count+1)^0,c
  3191   001C90  0E02               	movlw	2
  3192   001C92  6E20               	movwf	left_45@count^0,c
  3193   001C94  C05A  F022         	movff	_left_timer,left_45@left_timer
  3194   001C98  C05B  F023         	movff	_left_timer+1,left_45@left_timer+1
  3195   001C9C  ECBE  F00A         	call	_left_45	;wreg free
  3196                           
  3197                           ;dc_motor.c: 275:     stop(mL,mR);
  3198   001CA0  C028  F016         	movff	reverse_yellow@mL,stop@mL
  3199   001CA4  C029  F017         	movff	reverse_yellow@mL+1,stop@mL+1
  3200   001CA8  C02A  F018         	movff	reverse_yellow@mR,stop@mR
  3201   001CAC  C02B  F019         	movff	reverse_yellow@mR+1,stop@mR+1
  3202   001CB0  ECE6  F00D         	call	_stop	;wreg free
  3203   001CB4                     
  3204                           ;dc_motor.c: 276:     _delay((unsigned long)((200)*(64000000/4000.0)));
  3205   001CB4  0E11               	movlw	17
  3206   001CB6  6E2D               	movwf	(??_reverse_yellow+1)^0,c
  3207   001CB8  0E3C               	movlw	60
  3208   001CBA  6E2C               	movwf	??_reverse_yellow^0,c
  3209   001CBC  0ECB               	movlw	203
  3210   001CBE                     u2677:
  3211   001CBE  2EE8               	decfsz	wreg,f,c
  3212   001CC0  D7FE               	bra	u2677
  3213   001CC2  2E2C               	decfsz	??_reverse_yellow^0,f,c
  3214   001CC4  D7FC               	bra	u2677
  3215   001CC6  2E2D               	decfsz	(??_reverse_yellow+1)^0,f,c
  3216   001CC8  D7FA               	bra	u2677
  3217   001CCA  F000               	nop	
  3218   001CCC                     
  3219                           ;dc_motor.c: 278:      reverse(mL,mR);
  3220   001CCC  C028  F01C         	movff	reverse_yellow@mL,reverse@mL
  3221   001CD0  C029  F01D         	movff	reverse_yellow@mL+1,reverse@mL+1
  3222   001CD4  C02A  F01E         	movff	reverse_yellow@mR,reverse@mR
  3223   001CD8  C02B  F01F         	movff	reverse_yellow@mR+1,reverse@mR+1
  3224   001CDC  EC71  F00D         	call	_reverse	;wreg free
  3225                           
  3226                           ;dc_motor.c: 279:     _delay((unsigned long)((900)*(64000000/4000.0)));
  3227   001CE0  0E4A               	movlw	74
  3228   001CE2  6E2D               	movwf	(??_reverse_yellow+1)^0,c
  3229   001CE4  0E0E               	movlw	14
  3230   001CE6  6E2C               	movwf	??_reverse_yellow^0,c
  3231   001CE8  0E19               	movlw	25
  3232   001CEA                     u2687:
  3233   001CEA  2EE8               	decfsz	wreg,f,c
  3234   001CEC  D7FE               	bra	u2687
  3235   001CEE  2E2C               	decfsz	??_reverse_yellow^0,f,c
  3236   001CF0  D7FC               	bra	u2687
  3237   001CF2  2E2D               	decfsz	(??_reverse_yellow+1)^0,f,c
  3238   001CF4  D7FA               	bra	u2687
  3239   001CF6  F000               	nop	
  3240   001CF8                     
  3241                           ;dc_motor.c: 280:     stop(mL,mR);
  3242   001CF8  C028  F016         	movff	reverse_yellow@mL,stop@mL
  3243   001CFC  C029  F017         	movff	reverse_yellow@mL+1,stop@mL+1
  3244   001D00  C02A  F018         	movff	reverse_yellow@mR,stop@mR
  3245   001D04  C02B  F019         	movff	reverse_yellow@mR+1,stop@mR+1
  3246   001D08  ECE6  F00D         	call	_stop	;wreg free
  3247   001D0C  0012               	return		;funcret
  3248   001D0E                     __end_of_reverse_yellow:
  3249                           	callstack 0
  3250                           
  3251 ;; *************** function _reverse_pink *****************
  3252 ;; Defined at:
  3253 ;;		line 286 in file "dc_motor.c"
  3254 ;; Parameters:    Size  Location     Type
  3255 ;;  mL              2   39[COMRAM] PTR struct DC_motor
  3256 ;;		 -> motorL(9), 
  3257 ;;  mR              2   41[COMRAM] PTR struct DC_motor
  3258 ;;		 -> motorR(9), 
  3259 ;; Auto vars:     Size  Location     Type
  3260 ;;		None
  3261 ;; Return value:  Size  Location     Type
  3262 ;;                  1    wreg      void 
  3263 ;; Registers used:
  3264 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3265 ;; Tracked objects:
  3266 ;;		On entry : 0/0
  3267 ;;		On exit  : 0/0
  3268 ;;		Unchanged: 0/0
  3269 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3270 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3271 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3272 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3273 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3274 ;;Total ram usage:        6 bytes
  3275 ;; Hardware stack levels used: 1
  3276 ;; Hardware stack levels required when called: 5
  3277 ;; This function calls:
  3278 ;;		_reverse
  3279 ;;		_right_45
  3280 ;;		_stop
  3281 ;; This function is called by:
  3282 ;;		_movement_return
  3283 ;; This function uses a non-reentrant model
  3284 ;;
  3285                           
  3286                           	psect	text18
  3287   001D0E                     __ptext18:
  3288                           	callstack 0
  3289   001D0E                     _reverse_pink:
  3290                           	callstack 22
  3291   001D0E                     
  3292                           ;dc_motor.c: 288:     right_45(mL,mR,2,right_timer);
  3293   001D0E  C028  F01C         	movff	reverse_pink@mL,right_45@mL
  3294   001D12  C029  F01D         	movff	reverse_pink@mL+1,right_45@mL+1
  3295   001D16  C02A  F01E         	movff	reverse_pink@mR,right_45@mR
  3296   001D1A  C02B  F01F         	movff	reverse_pink@mR+1,right_45@mR+1
  3297   001D1E  0E00               	movlw	0
  3298   001D20  6E21               	movwf	(right_45@count+1)^0,c
  3299   001D22  0E02               	movlw	2
  3300   001D24  6E20               	movwf	right_45@count^0,c
  3301   001D26  C058  F022         	movff	_right_timer,right_45@right_timer
  3302   001D2A  C059  F023         	movff	_right_timer+1,right_45@right_timer+1
  3303   001D2E  EC20  F00A         	call	_right_45	;wreg free
  3304                           
  3305                           ;dc_motor.c: 289:     stop(mL,mR);
  3306   001D32  C028  F016         	movff	reverse_pink@mL,stop@mL
  3307   001D36  C029  F017         	movff	reverse_pink@mL+1,stop@mL+1
  3308   001D3A  C02A  F018         	movff	reverse_pink@mR,stop@mR
  3309   001D3E  C02B  F019         	movff	reverse_pink@mR+1,stop@mR+1
  3310   001D42  ECE6  F00D         	call	_stop	;wreg free
  3311   001D46                     
  3312                           ;dc_motor.c: 290:     _delay((unsigned long)((200)*(64000000/4000.0)));
  3313   001D46  0E11               	movlw	17
  3314   001D48  6E2D               	movwf	(??_reverse_pink+1)^0,c
  3315   001D4A  0E3C               	movlw	60
  3316   001D4C  6E2C               	movwf	??_reverse_pink^0,c
  3317   001D4E  0ECB               	movlw	203
  3318   001D50                     u2697:
  3319   001D50  2EE8               	decfsz	wreg,f,c
  3320   001D52  D7FE               	bra	u2697
  3321   001D54  2E2C               	decfsz	??_reverse_pink^0,f,c
  3322   001D56  D7FC               	bra	u2697
  3323   001D58  2E2D               	decfsz	(??_reverse_pink+1)^0,f,c
  3324   001D5A  D7FA               	bra	u2697
  3325   001D5C  F000               	nop	
  3326   001D5E                     
  3327                           ;dc_motor.c: 292:     reverse(mL,mR);
  3328   001D5E  C028  F01C         	movff	reverse_pink@mL,reverse@mL
  3329   001D62  C029  F01D         	movff	reverse_pink@mL+1,reverse@mL+1
  3330   001D66  C02A  F01E         	movff	reverse_pink@mR,reverse@mR
  3331   001D6A  C02B  F01F         	movff	reverse_pink@mR+1,reverse@mR+1
  3332   001D6E  EC71  F00D         	call	_reverse	;wreg free
  3333                           
  3334                           ;dc_motor.c: 293:     _delay((unsigned long)((900)*(64000000/4000.0)));
  3335   001D72  0E4A               	movlw	74
  3336   001D74  6E2D               	movwf	(??_reverse_pink+1)^0,c
  3337   001D76  0E0E               	movlw	14
  3338   001D78  6E2C               	movwf	??_reverse_pink^0,c
  3339   001D7A  0E19               	movlw	25
  3340   001D7C                     u2707:
  3341   001D7C  2EE8               	decfsz	wreg,f,c
  3342   001D7E  D7FE               	bra	u2707
  3343   001D80  2E2C               	decfsz	??_reverse_pink^0,f,c
  3344   001D82  D7FC               	bra	u2707
  3345   001D84  2E2D               	decfsz	(??_reverse_pink+1)^0,f,c
  3346   001D86  D7FA               	bra	u2707
  3347   001D88  F000               	nop	
  3348   001D8A                     
  3349                           ;dc_motor.c: 294:     stop(mL,mR);
  3350   001D8A  C028  F016         	movff	reverse_pink@mL,stop@mL
  3351   001D8E  C029  F017         	movff	reverse_pink@mL+1,stop@mL+1
  3352   001D92  C02A  F018         	movff	reverse_pink@mR,stop@mR
  3353   001D96  C02B  F019         	movff	reverse_pink@mR+1,stop@mR+1
  3354   001D9A  ECE6  F00D         	call	_stop	;wreg free
  3355   001D9E  0012               	return		;funcret
  3356   001DA0                     __end_of_reverse_pink:
  3357                           	callstack 0
  3358                           
  3359 ;; *************** function _forward *****************
  3360 ;; Defined at:
  3361 ;;		line 127 in file "dc_motor.c"
  3362 ;; Parameters:    Size  Location     Type
  3363 ;;  mL              2   27[COMRAM] PTR struct DC_motor
  3364 ;;		 -> motorL(9), 
  3365 ;;  mR              2   29[COMRAM] PTR struct DC_motor
  3366 ;;		 -> motorR(9), 
  3367 ;; Auto vars:     Size  Location     Type
  3368 ;;		None
  3369 ;; Return value:  Size  Location     Type
  3370 ;;                  1    wreg      void 
  3371 ;; Registers used:
  3372 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3373 ;; Tracked objects:
  3374 ;;		On entry : 0/0
  3375 ;;		On exit  : 0/0
  3376 ;;		Unchanged: 0/0
  3377 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3378 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3379 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3380 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3381 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3382 ;;Total ram usage:        5 bytes
  3383 ;; Hardware stack levels used: 1
  3384 ;; Hardware stack levels required when called: 4
  3385 ;; This function calls:
  3386 ;;		_setMotorPWM
  3387 ;;		_stop
  3388 ;; This function is called by:
  3389 ;;		_buggy_color_response
  3390 ;;		_return_home
  3391 ;; This function uses a non-reentrant model
  3392 ;;
  3393                           
  3394                           	psect	text19
  3395   0019F8                     __ptext19:
  3396                           	callstack 0
  3397   0019F8                     _forward:
  3398                           	callstack 24
  3399   0019F8                     
  3400                           ;dc_motor.c: 127: void forward(DC_motor *mL, DC_motor *mR);dc_motor.c: 128: {;dc_motor.c
      +                          : 129:     stop(mL,mR);
  3401   0019F8  C01C  F016         	movff	forward@mL,stop@mL
  3402   0019FC  C01D  F017         	movff	forward@mL+1,stop@mL+1
  3403   001A00  C01E  F018         	movff	forward@mR,stop@mR
  3404   001A04  C01F  F019         	movff	forward@mR+1,stop@mR+1
  3405   001A08  ECE6  F00D         	call	_stop	;wreg free
  3406   001A0C                     
  3407                           ;dc_motor.c: 130:     mL-> direction = 1;
  3408   001A0C  EE20 F001          	lfsr	2,1
  3409   001A10  501C               	movf	forward@mL^0,w,c
  3410   001A12  26D9               	addwf	fsr2l,f,c
  3411   001A14  501D               	movf	(forward@mL+1)^0,w,c
  3412   001A16  22DA               	addwfc	fsr2h,f,c
  3413   001A18  0E01               	movlw	1
  3414   001A1A  6EDF               	movwf	indf2,c
  3415   001A1C                     
  3416                           ;dc_motor.c: 131:     mR-> direction = 1;
  3417   001A1C  EE20 F001          	lfsr	2,1
  3418   001A20  501E               	movf	forward@mR^0,w,c
  3419   001A22  26D9               	addwf	fsr2l,f,c
  3420   001A24  501F               	movf	(forward@mR+1)^0,w,c
  3421   001A26  22DA               	addwfc	fsr2h,f,c
  3422   001A28  0E01               	movlw	1
  3423   001A2A  6EDF               	movwf	indf2,c
  3424   001A2C                     
  3425                           ;dc_motor.c: 132:     LATDbits.LATD3 = 1;
  3426   001A2C  867C               	bsf	124,3,c	;volatile
  3427                           
  3428                           ;dc_motor.c: 133:     setMotorPWM(mR);
  3429   001A2E  C01E  F010         	movff	forward@mR,setMotorPWM@m
  3430   001A32  C01F  F011         	movff	forward@mR+1,setMotorPWM@m+1
  3431   001A36  EC6A  F009         	call	_setMotorPWM	;wreg free
  3432                           
  3433                           ;dc_motor.c: 134:     setMotorPWM(mL);
  3434   001A3A  C01C  F010         	movff	forward@mL,setMotorPWM@m
  3435   001A3E  C01D  F011         	movff	forward@mL+1,setMotorPWM@m+1
  3436   001A42  EC6A  F009         	call	_setMotorPWM	;wreg free
  3437                           
  3438                           ;dc_motor.c: 135:     while ((mL->power <= 50) || (mR->power <= 55)){
  3439   001A46  EF57  F00D         	goto	l283
  3440   001A4A                     l2529:
  3441                           
  3442                           ;dc_motor.c: 136:         if (mL->power <= 50){mL->power += 1;}
  3443   001A4A  C01C  FFD9         	movff	forward@mL,fsr2l
  3444   001A4E  C01D  FFDA         	movff	forward@mL+1,fsr2h
  3445   001A52  0E33               	movlw	51
  3446   001A54  60DF               	cpfslt	indf2,c
  3447   001A56  EF2F  F00D         	goto	u1551
  3448   001A5A  EF31  F00D         	goto	u1550
  3449   001A5E                     u1551:
  3450   001A5E  EF36  F00D         	goto	l2533
  3451   001A62                     u1550:
  3452   001A62  C01C  FFD9         	movff	forward@mL,fsr2l
  3453   001A66  C01D  FFDA         	movff	forward@mL+1,fsr2h
  3454   001A6A  2ADF               	incf	indf2,f,c
  3455   001A6C                     l2533:
  3456                           
  3457                           ;dc_motor.c: 137:         if (mR->power <= 55){mR->power += 1;}
  3458   001A6C  C01E  FFD9         	movff	forward@mR,fsr2l
  3459   001A70  C01F  FFDA         	movff	forward@mR+1,fsr2h
  3460   001A74  0E38               	movlw	56
  3461   001A76  60DF               	cpfslt	indf2,c
  3462   001A78  EF40  F00D         	goto	u1561
  3463   001A7C  EF42  F00D         	goto	u1560
  3464   001A80                     u1561:
  3465   001A80  EF47  F00D         	goto	l2537
  3466   001A84                     u1560:
  3467   001A84  C01E  FFD9         	movff	forward@mR,fsr2l
  3468   001A88  C01F  FFDA         	movff	forward@mR+1,fsr2h
  3469   001A8C  2ADF               	incf	indf2,f,c
  3470   001A8E                     l2537:
  3471                           
  3472                           ;dc_motor.c: 138:         setMotorPWM(mL);
  3473   001A8E  C01C  F010         	movff	forward@mL,setMotorPWM@m
  3474   001A92  C01D  F011         	movff	forward@mL+1,setMotorPWM@m+1
  3475   001A96  EC6A  F009         	call	_setMotorPWM	;wreg free
  3476   001A9A                     
  3477                           ;dc_motor.c: 139:         setMotorPWM(mR);
  3478   001A9A  C01E  F010         	movff	forward@mR,setMotorPWM@m
  3479   001A9E  C01F  F011         	movff	forward@mR+1,setMotorPWM@m+1
  3480   001AA2  EC6A  F009         	call	_setMotorPWM	;wreg free
  3481   001AA6                     
  3482                           ;dc_motor.c: 140:         _delay((unsigned long)((5)*(64000000/4000000.0)));
  3483   001AA6  0E1A               	movlw	26
  3484   001AA8                     u2717:
  3485   001AA8  2EE8               	decfsz	wreg,f,c
  3486   001AAA  D7FE               	bra	u2717
  3487   001AAC  D000               	nop2	
  3488   001AAE                     l283:
  3489                           
  3490                           ;dc_motor.c: 135:     while ((mL->power <= 50) || (mR->power <= 55)){
  3491   001AAE  C01C  FFD9         	movff	forward@mL,fsr2l
  3492   001AB2  C01D  FFDA         	movff	forward@mL+1,fsr2h
  3493   001AB6  0E32               	movlw	50
  3494   001AB8  64DF               	cpfsgt	indf2,c
  3495   001ABA  EF61  F00D         	goto	u1571
  3496   001ABE  EF63  F00D         	goto	u1570
  3497   001AC2                     u1571:
  3498   001AC2  EF25  F00D         	goto	l2529
  3499   001AC6                     u1570:
  3500   001AC6  C01E  FFD9         	movff	forward@mR,fsr2l
  3501   001ACA  C01F  FFDA         	movff	forward@mR+1,fsr2h
  3502   001ACE  0E37               	movlw	55
  3503   001AD0  64DF               	cpfsgt	indf2,c
  3504   001AD2  EF6D  F00D         	goto	u1581
  3505   001AD6  EF6F  F00D         	goto	u1580
  3506   001ADA                     u1581:
  3507   001ADA  EF25  F00D         	goto	l2529
  3508   001ADE                     u1580:
  3509   001ADE                     
  3510                           ;dc_motor.c: 142:     LATDbits.LATD3 = 0;
  3511   001ADE  967C               	bcf	124,3,c	;volatile
  3512   001AE0  0012               	return		;funcret
  3513   001AE2                     __end_of_forward:
  3514                           	callstack 0
  3515                           
  3516 ;; *************** function _delay_ms_func *****************
  3517 ;; Defined at:
  3518 ;;		line 275 in file "color.c"
  3519 ;; Parameters:    Size  Location     Type
  3520 ;;  time            2    2[COMRAM] unsigned int 
  3521 ;; Auto vars:     Size  Location     Type
  3522 ;;  i               2    6[COMRAM] unsigned int 
  3523 ;; Return value:  Size  Location     Type
  3524 ;;                  1    wreg      void 
  3525 ;; Registers used:
  3526 ;;		wreg, status,2, status,0
  3527 ;; Tracked objects:
  3528 ;;		On entry : 0/0
  3529 ;;		On exit  : 0/0
  3530 ;;		Unchanged: 0/0
  3531 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3532 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3533 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3534 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3535 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3536 ;;Total ram usage:        6 bytes
  3537 ;; Hardware stack levels used: 1
  3538 ;; Hardware stack levels required when called: 1
  3539 ;; This function calls:
  3540 ;;		Nothing
  3541 ;; This function is called by:
  3542 ;;		_return_home
  3543 ;; This function uses a non-reentrant model
  3544 ;;
  3545                           
  3546                           	psect	text20
  3547   00217C                     __ptext20:
  3548                           	callstack 0
  3549   00217C                     _delay_ms_func:
  3550                           	callstack 27
  3551   00217C                     
  3552                           ;color.c: 276:     unsigned int i;;color.c: 277:     for (i=0; i < time; i++) {_delay((u
      +                          nsigned long)((131)*(64000000/4000.0)));}
  3553   00217C  0E00               	movlw	0
  3554   00217E  6E08               	movwf	(delay_ms_func@i+1)^0,c
  3555   002180  0E00               	movlw	0
  3556   002182  6E07               	movwf	delay_ms_func@i^0,c
  3557   002184  EFD2  F010         	goto	l155
  3558   002188                     l2603:
  3559   002188  0E0B               	movlw	11
  3560   00218A  6E06               	movwf	(??_delay_ms_func+1)^0,c
  3561   00218C  0EA3               	movlw	163
  3562   00218E  6E05               	movwf	??_delay_ms_func^0,c
  3563   002190  0E0A               	movlw	10
  3564   002192                     u2727:
  3565   002192  2EE8               	decfsz	wreg,f,c
  3566   002194  D7FE               	bra	u2727
  3567   002196  2E05               	decfsz	??_delay_ms_func^0,f,c
  3568   002198  D7FC               	bra	u2727
  3569   00219A  2E06               	decfsz	(??_delay_ms_func+1)^0,f,c
  3570   00219C  D7FA               	bra	u2727
  3571   00219E  D000               	nop2	
  3572   0021A0  4A07               	infsnz	delay_ms_func@i^0,f,c
  3573   0021A2  2A08               	incf	(delay_ms_func@i+1)^0,f,c
  3574   0021A4                     l155:
  3575   0021A4  5003               	movf	delay_ms_func@time^0,w,c
  3576   0021A6  5C07               	subwf	delay_ms_func@i^0,w,c
  3577   0021A8  5004               	movf	(delay_ms_func@time+1)^0,w,c
  3578   0021AA  5808               	subwfb	(delay_ms_func@i+1)^0,w,c
  3579   0021AC  A0D8               	btfss	status,0,c
  3580   0021AE  EFDB  F010         	goto	u1681
  3581   0021B2  EFDD  F010         	goto	u1680
  3582   0021B6                     u1681:
  3583   0021B6  EFC4  F010         	goto	l2603
  3584   0021BA                     u1680:
  3585   0021BA  0012               	return		;funcret
  3586   0021BC                     __end_of_delay_ms_func:
  3587                           	callstack 0
  3588                           
  3589 ;; *************** function _movement *****************
  3590 ;; Defined at:
  3591 ;;		line 302 in file "dc_motor.c"
  3592 ;; Parameters:    Size  Location     Type
  3593 ;;  mL              2   39[COMRAM] PTR struct DC_motor
  3594 ;;		 -> motorL(9), 
  3595 ;;  mR              2   41[COMRAM] PTR struct DC_motor
  3596 ;;		 -> motorR(9), 
  3597 ;;  count           2   43[COMRAM] int 
  3598 ;; Auto vars:     Size  Location     Type
  3599 ;;		None
  3600 ;; Return value:  Size  Location     Type
  3601 ;;                  1    wreg      void 
  3602 ;; Registers used:
  3603 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3604 ;; Tracked objects:
  3605 ;;		On entry : 0/0
  3606 ;;		On exit  : 0/0
  3607 ;;		Unchanged: 0/0
  3608 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3609 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3610 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3611 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3612 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3613 ;;Total ram usage:        8 bytes
  3614 ;; Hardware stack levels used: 1
  3615 ;; Hardware stack levels required when called: 5
  3616 ;; This function calls:
  3617 ;;		_left_45
  3618 ;;		_reverse
  3619 ;;		_right_45
  3620 ;;		_space
  3621 ;;		_stop
  3622 ;; This function is called by:
  3623 ;;		_buggy_color_response
  3624 ;; This function uses a non-reentrant model
  3625 ;;
  3626                           
  3627                           	psect	text21
  3628   000AC2                     __ptext21:
  3629                           	callstack 0
  3630   000AC2                     _movement:
  3631                           	callstack 24
  3632   000AC2                     
  3633                           ;dc_motor.c: 302: void movement(DC_motor *mL, DC_motor *mR, int count);dc_motor.c: 303: 
      +                          {;dc_motor.c: 304:     space(mL,mR);
  3634   000AC2  C028  F01C         	movff	movement@mL,space@mL
  3635   000AC6  C029  F01D         	movff	movement@mL+1,space@mL+1
  3636   000ACA  C02A  F01E         	movff	movement@mR,space@mR
  3637   000ACE  C02B  F01F         	movff	movement@mR+1,space@mR+1
  3638   000AD2  EC7B  F00C         	call	_space	;wreg free
  3639   000AD6                     
  3640                           ;dc_motor.c: 305:     _delay((unsigned long)((500)*(64000000/4000.0)));
  3641   000AD6  0E29               	movlw	41
  3642   000AD8  6E2F               	movwf	(??_movement+1)^0,c
  3643   000ADA  0E96               	movlw	150
  3644   000ADC  6E2E               	movwf	??_movement^0,c
  3645   000ADE  0E7F               	movlw	127
  3646   000AE0                     u2737:
  3647   000AE0  2EE8               	decfsz	wreg,f,c
  3648   000AE2  D7FE               	bra	u2737
  3649   000AE4  2E2E               	decfsz	??_movement^0,f,c
  3650   000AE6  D7FC               	bra	u2737
  3651   000AE8  2E2F               	decfsz	(??_movement+1)^0,f,c
  3652   000AEA  D7FA               	bra	u2737
  3653   000AEC  F000               	nop	
  3654   000AEE                     
  3655                           ;dc_motor.c: 306:     stop(mL,mR);
  3656   000AEE  C028  F016         	movff	movement@mL,stop@mL
  3657   000AF2  C029  F017         	movff	movement@mL+1,stop@mL+1
  3658   000AF6  C02A  F018         	movff	movement@mR,stop@mR
  3659   000AFA  C02B  F019         	movff	movement@mR+1,stop@mR+1
  3660   000AFE  ECE6  F00D         	call	_stop	;wreg free
  3661                           
  3662                           ;dc_motor.c: 307:     _delay((unsigned long)((500)*(64000000/4000.0)));
  3663   000B02  0E29               	movlw	41
  3664   000B04  6E2F               	movwf	(??_movement+1)^0,c
  3665   000B06  0E96               	movlw	150
  3666   000B08  6E2E               	movwf	??_movement^0,c
  3667   000B0A  0E7F               	movlw	127
  3668   000B0C                     u2747:
  3669   000B0C  2EE8               	decfsz	wreg,f,c
  3670   000B0E  D7FE               	bra	u2747
  3671   000B10  2E2E               	decfsz	??_movement^0,f,c
  3672   000B12  D7FC               	bra	u2747
  3673   000B14  2E2F               	decfsz	(??_movement+1)^0,f,c
  3674   000B16  D7FA               	bra	u2747
  3675   000B18  F000               	nop	
  3676   000B1A                     
  3677                           ;dc_motor.c: 309:     if (count == 1){right_45(mL,mR,2,right_timer); stop(mL,mR);}
  3678   000B1A  042C               	decf	movement@count^0,w,c
  3679   000B1C  102D               	iorwf	(movement@count+1)^0,w,c
  3680   000B1E  A4D8               	btfss	status,2,c
  3681   000B20  EF94  F005         	goto	u2021
  3682   000B24  EF96  F005         	goto	u2020
  3683   000B28                     u2021:
  3684   000B28  EFB2  F005         	goto	l2813
  3685   000B2C                     u2020:
  3686   000B2C  C028  F01C         	movff	movement@mL,right_45@mL
  3687   000B30  C029  F01D         	movff	movement@mL+1,right_45@mL+1
  3688   000B34  C02A  F01E         	movff	movement@mR,right_45@mR
  3689   000B38  C02B  F01F         	movff	movement@mR+1,right_45@mR+1
  3690   000B3C  0E00               	movlw	0
  3691   000B3E  6E21               	movwf	(right_45@count+1)^0,c
  3692   000B40  0E02               	movlw	2
  3693   000B42  6E20               	movwf	right_45@count^0,c
  3694   000B44  C058  F022         	movff	_right_timer,right_45@right_timer
  3695   000B48  C059  F023         	movff	_right_timer+1,right_45@right_timer+1
  3696   000B4C  EC20  F00A         	call	_right_45	;wreg free
  3697   000B50  C028  F016         	movff	movement@mL,stop@mL
  3698   000B54  C029  F017         	movff	movement@mL+1,stop@mL+1
  3699   000B58  C02A  F018         	movff	movement@mR,stop@mR
  3700   000B5C  C02B  F019         	movff	movement@mR+1,stop@mR+1
  3701   000B60  ECE6  F00D         	call	_stop	;wreg free
  3702   000B64                     l2813:
  3703                           
  3704                           ;dc_motor.c: 310:     if (count == 2){left_45(mL,mR,2,left_timer); stop(mL,mR);}
  3705   000B64  0E02               	movlw	2
  3706   000B66  182C               	xorwf	movement@count^0,w,c
  3707   000B68  102D               	iorwf	(movement@count+1)^0,w,c
  3708   000B6A  A4D8               	btfss	status,2,c
  3709   000B6C  EFBA  F005         	goto	u2031
  3710   000B70  EFBC  F005         	goto	u2030
  3711   000B74                     u2031:
  3712   000B74  EFD8  F005         	goto	l2817
  3713   000B78                     u2030:
  3714   000B78  C028  F01C         	movff	movement@mL,left_45@mL
  3715   000B7C  C029  F01D         	movff	movement@mL+1,left_45@mL+1
  3716   000B80  C02A  F01E         	movff	movement@mR,left_45@mR
  3717   000B84  C02B  F01F         	movff	movement@mR+1,left_45@mR+1
  3718   000B88  0E00               	movlw	0
  3719   000B8A  6E21               	movwf	(left_45@count+1)^0,c
  3720   000B8C  0E02               	movlw	2
  3721   000B8E  6E20               	movwf	left_45@count^0,c
  3722   000B90  C05A  F022         	movff	_left_timer,left_45@left_timer
  3723   000B94  C05B  F023         	movff	_left_timer+1,left_45@left_timer+1
  3724   000B98  ECBE  F00A         	call	_left_45	;wreg free
  3725   000B9C  C028  F016         	movff	movement@mL,stop@mL
  3726   000BA0  C029  F017         	movff	movement@mL+1,stop@mL+1
  3727   000BA4  C02A  F018         	movff	movement@mR,stop@mR
  3728   000BA8  C02B  F019         	movff	movement@mR+1,stop@mR+1
  3729   000BAC  ECE6  F00D         	call	_stop	;wreg free
  3730   000BB0                     l2817:
  3731                           
  3732                           ;dc_motor.c: 311:     if (count == 3){right_45(mL,mR,4,right_timer); stop(mL,mR);}
  3733   000BB0  0E03               	movlw	3
  3734   000BB2  182C               	xorwf	movement@count^0,w,c
  3735   000BB4  102D               	iorwf	(movement@count+1)^0,w,c
  3736   000BB6  A4D8               	btfss	status,2,c
  3737   000BB8  EFE0  F005         	goto	u2041
  3738   000BBC  EFE2  F005         	goto	u2040
  3739   000BC0                     u2041:
  3740   000BC0  EFFE  F005         	goto	l2821
  3741   000BC4                     u2040:
  3742   000BC4  C028  F01C         	movff	movement@mL,right_45@mL
  3743   000BC8  C029  F01D         	movff	movement@mL+1,right_45@mL+1
  3744   000BCC  C02A  F01E         	movff	movement@mR,right_45@mR
  3745   000BD0  C02B  F01F         	movff	movement@mR+1,right_45@mR+1
  3746   000BD4  0E00               	movlw	0
  3747   000BD6  6E21               	movwf	(right_45@count+1)^0,c
  3748   000BD8  0E04               	movlw	4
  3749   000BDA  6E20               	movwf	right_45@count^0,c
  3750   000BDC  C058  F022         	movff	_right_timer,right_45@right_timer
  3751   000BE0  C059  F023         	movff	_right_timer+1,right_45@right_timer+1
  3752   000BE4  EC20  F00A         	call	_right_45	;wreg free
  3753   000BE8  C028  F016         	movff	movement@mL,stop@mL
  3754   000BEC  C029  F017         	movff	movement@mL+1,stop@mL+1
  3755   000BF0  C02A  F018         	movff	movement@mR,stop@mR
  3756   000BF4  C02B  F019         	movff	movement@mR+1,stop@mR+1
  3757   000BF8  ECE6  F00D         	call	_stop	;wreg free
  3758   000BFC                     l2821:
  3759                           
  3760                           ;dc_motor.c: 312:     if (count == 4){reverse(mL,mR); _delay((unsigned long)((900)*(6400
      +                          0000/4000.0)));;stop(mL,mR);_delay((unsigned long)((500)*(64000000/4000.0)));right_45(mL
      +                          ,mR,2,right_timer); stop(mL,mR);}
  3761   000BFC  0E04               	movlw	4
  3762   000BFE  182C               	xorwf	movement@count^0,w,c
  3763   000C00  102D               	iorwf	(movement@count+1)^0,w,c
  3764   000C02  A4D8               	btfss	status,2,c
  3765   000C04  EF06  F006         	goto	u2051
  3766   000C08  EF08  F006         	goto	u2050
  3767   000C0C                     u2051:
  3768   000C0C  EF50  F006         	goto	l2833
  3769   000C10                     u2050:
  3770   000C10  C028  F01C         	movff	movement@mL,reverse@mL
  3771   000C14  C029  F01D         	movff	movement@mL+1,reverse@mL+1
  3772   000C18  C02A  F01E         	movff	movement@mR,reverse@mR
  3773   000C1C  C02B  F01F         	movff	movement@mR+1,reverse@mR+1
  3774   000C20  EC71  F00D         	call	_reverse	;wreg free
  3775   000C24  0E4A               	movlw	74
  3776   000C26  6E2F               	movwf	(??_movement+1)^0,c
  3777   000C28  0E0E               	movlw	14
  3778   000C2A  6E2E               	movwf	??_movement^0,c
  3779   000C2C  0E19               	movlw	25
  3780   000C2E                     u2757:
  3781   000C2E  2EE8               	decfsz	wreg,f,c
  3782   000C30  D7FE               	bra	u2757
  3783   000C32  2E2E               	decfsz	??_movement^0,f,c
  3784   000C34  D7FC               	bra	u2757
  3785   000C36  2E2F               	decfsz	(??_movement+1)^0,f,c
  3786   000C38  D7FA               	bra	u2757
  3787   000C3A  F000               	nop	
  3788   000C3C  C028  F016         	movff	movement@mL,stop@mL
  3789   000C40  C029  F017         	movff	movement@mL+1,stop@mL+1
  3790   000C44  C02A  F018         	movff	movement@mR,stop@mR
  3791   000C48  C02B  F019         	movff	movement@mR+1,stop@mR+1
  3792   000C4C  ECE6  F00D         	call	_stop	;wreg free
  3793   000C50  0E29               	movlw	41
  3794   000C52  6E2F               	movwf	(??_movement+1)^0,c
  3795   000C54  0E96               	movlw	150
  3796   000C56  6E2E               	movwf	??_movement^0,c
  3797   000C58  0E7F               	movlw	127
  3798   000C5A                     u2767:
  3799   000C5A  2EE8               	decfsz	wreg,f,c
  3800   000C5C  D7FE               	bra	u2767
  3801   000C5E  2E2E               	decfsz	??_movement^0,f,c
  3802   000C60  D7FC               	bra	u2767
  3803   000C62  2E2F               	decfsz	(??_movement+1)^0,f,c
  3804   000C64  D7FA               	bra	u2767
  3805   000C66  F000               	nop	
  3806   000C68  C028  F01C         	movff	movement@mL,right_45@mL
  3807   000C6C  C029  F01D         	movff	movement@mL+1,right_45@mL+1
  3808   000C70  C02A  F01E         	movff	movement@mR,right_45@mR
  3809   000C74  C02B  F01F         	movff	movement@mR+1,right_45@mR+1
  3810   000C78  0E00               	movlw	0
  3811   000C7A  6E21               	movwf	(right_45@count+1)^0,c
  3812   000C7C  0E02               	movlw	2
  3813   000C7E  6E20               	movwf	right_45@count^0,c
  3814   000C80  C058  F022         	movff	_right_timer,right_45@right_timer
  3815   000C84  C059  F023         	movff	_right_timer+1,right_45@right_timer+1
  3816   000C88  EC20  F00A         	call	_right_45	;wreg free
  3817   000C8C  C028  F016         	movff	movement@mL,stop@mL
  3818   000C90  C029  F017         	movff	movement@mL+1,stop@mL+1
  3819   000C94  C02A  F018         	movff	movement@mR,stop@mR
  3820   000C98  C02B  F019         	movff	movement@mR+1,stop@mR+1
  3821   000C9C  ECE6  F00D         	call	_stop	;wreg free
  3822   000CA0                     l2833:
  3823                           
  3824                           ;dc_motor.c: 313:     if (count == 5){reverse(mL,mR); _delay((unsigned long)((900)*(6400
      +                          0000/4000.0)));;stop(mL,mR);_delay((unsigned long)((500)*(64000000/4000.0)));left_45(mL,
      +                          mR,2,left_timer); stop(mL,mR);}
  3825   000CA0  0E05               	movlw	5
  3826   000CA2  182C               	xorwf	movement@count^0,w,c
  3827   000CA4  102D               	iorwf	(movement@count+1)^0,w,c
  3828   000CA6  A4D8               	btfss	status,2,c
  3829   000CA8  EF58  F006         	goto	u2061
  3830   000CAC  EF5A  F006         	goto	u2060
  3831   000CB0                     u2061:
  3832   000CB0  EFA2  F006         	goto	l2845
  3833   000CB4                     u2060:
  3834   000CB4  C028  F01C         	movff	movement@mL,reverse@mL
  3835   000CB8  C029  F01D         	movff	movement@mL+1,reverse@mL+1
  3836   000CBC  C02A  F01E         	movff	movement@mR,reverse@mR
  3837   000CC0  C02B  F01F         	movff	movement@mR+1,reverse@mR+1
  3838   000CC4  EC71  F00D         	call	_reverse	;wreg free
  3839   000CC8  0E4A               	movlw	74
  3840   000CCA  6E2F               	movwf	(??_movement+1)^0,c
  3841   000CCC  0E0E               	movlw	14
  3842   000CCE  6E2E               	movwf	??_movement^0,c
  3843   000CD0  0E19               	movlw	25
  3844   000CD2                     u2777:
  3845   000CD2  2EE8               	decfsz	wreg,f,c
  3846   000CD4  D7FE               	bra	u2777
  3847   000CD6  2E2E               	decfsz	??_movement^0,f,c
  3848   000CD8  D7FC               	bra	u2777
  3849   000CDA  2E2F               	decfsz	(??_movement+1)^0,f,c
  3850   000CDC  D7FA               	bra	u2777
  3851   000CDE  F000               	nop	
  3852   000CE0  C028  F016         	movff	movement@mL,stop@mL
  3853   000CE4  C029  F017         	movff	movement@mL+1,stop@mL+1
  3854   000CE8  C02A  F018         	movff	movement@mR,stop@mR
  3855   000CEC  C02B  F019         	movff	movement@mR+1,stop@mR+1
  3856   000CF0  ECE6  F00D         	call	_stop	;wreg free
  3857   000CF4  0E29               	movlw	41
  3858   000CF6  6E2F               	movwf	(??_movement+1)^0,c
  3859   000CF8  0E96               	movlw	150
  3860   000CFA  6E2E               	movwf	??_movement^0,c
  3861   000CFC  0E7F               	movlw	127
  3862   000CFE                     u2787:
  3863   000CFE  2EE8               	decfsz	wreg,f,c
  3864   000D00  D7FE               	bra	u2787
  3865   000D02  2E2E               	decfsz	??_movement^0,f,c
  3866   000D04  D7FC               	bra	u2787
  3867   000D06  2E2F               	decfsz	(??_movement+1)^0,f,c
  3868   000D08  D7FA               	bra	u2787
  3869   000D0A  F000               	nop	
  3870   000D0C  C028  F01C         	movff	movement@mL,left_45@mL
  3871   000D10  C029  F01D         	movff	movement@mL+1,left_45@mL+1
  3872   000D14  C02A  F01E         	movff	movement@mR,left_45@mR
  3873   000D18  C02B  F01F         	movff	movement@mR+1,left_45@mR+1
  3874   000D1C  0E00               	movlw	0
  3875   000D1E  6E21               	movwf	(left_45@count+1)^0,c
  3876   000D20  0E02               	movlw	2
  3877   000D22  6E20               	movwf	left_45@count^0,c
  3878   000D24  C05A  F022         	movff	_left_timer,left_45@left_timer
  3879   000D28  C05B  F023         	movff	_left_timer+1,left_45@left_timer+1
  3880   000D2C  ECBE  F00A         	call	_left_45	;wreg free
  3881   000D30  C028  F016         	movff	movement@mL,stop@mL
  3882   000D34  C029  F017         	movff	movement@mL+1,stop@mL+1
  3883   000D38  C02A  F018         	movff	movement@mR,stop@mR
  3884   000D3C  C02B  F019         	movff	movement@mR+1,stop@mR+1
  3885   000D40  ECE6  F00D         	call	_stop	;wreg free
  3886   000D44                     l2845:
  3887                           
  3888                           ;dc_motor.c: 314:     if (count == 6){right_45(mL,mR,3,right_timer); stop(mL,mR);}
  3889   000D44  0E06               	movlw	6
  3890   000D46  182C               	xorwf	movement@count^0,w,c
  3891   000D48  102D               	iorwf	(movement@count+1)^0,w,c
  3892   000D4A  A4D8               	btfss	status,2,c
  3893   000D4C  EFAA  F006         	goto	u2071
  3894   000D50  EFAC  F006         	goto	u2070
  3895   000D54                     u2071:
  3896   000D54  EFC8  F006         	goto	l2849
  3897   000D58                     u2070:
  3898   000D58  C028  F01C         	movff	movement@mL,right_45@mL
  3899   000D5C  C029  F01D         	movff	movement@mL+1,right_45@mL+1
  3900   000D60  C02A  F01E         	movff	movement@mR,right_45@mR
  3901   000D64  C02B  F01F         	movff	movement@mR+1,right_45@mR+1
  3902   000D68  0E00               	movlw	0
  3903   000D6A  6E21               	movwf	(right_45@count+1)^0,c
  3904   000D6C  0E03               	movlw	3
  3905   000D6E  6E20               	movwf	right_45@count^0,c
  3906   000D70  C058  F022         	movff	_right_timer,right_45@right_timer
  3907   000D74  C059  F023         	movff	_right_timer+1,right_45@right_timer+1
  3908   000D78  EC20  F00A         	call	_right_45	;wreg free
  3909   000D7C  C028  F016         	movff	movement@mL,stop@mL
  3910   000D80  C029  F017         	movff	movement@mL+1,stop@mL+1
  3911   000D84  C02A  F018         	movff	movement@mR,stop@mR
  3912   000D88  C02B  F019         	movff	movement@mR+1,stop@mR+1
  3913   000D8C  ECE6  F00D         	call	_stop	;wreg free
  3914   000D90                     l2849:
  3915                           
  3916                           ;dc_motor.c: 315:     if (count == 7){left_45(mL,mR,3,left_timer); stop(mL,mR);}
  3917   000D90  0E07               	movlw	7
  3918   000D92  182C               	xorwf	movement@count^0,w,c
  3919   000D94  102D               	iorwf	(movement@count+1)^0,w,c
  3920   000D96  A4D8               	btfss	status,2,c
  3921   000D98  EFD0  F006         	goto	u2081
  3922   000D9C  EFD2  F006         	goto	u2080
  3923   000DA0                     u2081:
  3924   000DA0  EFEE  F006         	goto	l347
  3925   000DA4                     u2080:
  3926   000DA4  C028  F01C         	movff	movement@mL,left_45@mL
  3927   000DA8  C029  F01D         	movff	movement@mL+1,left_45@mL+1
  3928   000DAC  C02A  F01E         	movff	movement@mR,left_45@mR
  3929   000DB0  C02B  F01F         	movff	movement@mR+1,left_45@mR+1
  3930   000DB4  0E00               	movlw	0
  3931   000DB6  6E21               	movwf	(left_45@count+1)^0,c
  3932   000DB8  0E03               	movlw	3
  3933   000DBA  6E20               	movwf	left_45@count^0,c
  3934   000DBC  C05A  F022         	movff	_left_timer,left_45@left_timer
  3935   000DC0  C05B  F023         	movff	_left_timer+1,left_45@left_timer+1
  3936   000DC4  ECBE  F00A         	call	_left_45	;wreg free
  3937   000DC8  C028  F016         	movff	movement@mL,stop@mL
  3938   000DCC  C029  F017         	movff	movement@mL+1,stop@mL+1
  3939   000DD0  C02A  F018         	movff	movement@mR,stop@mR
  3940   000DD4  C02B  F019         	movff	movement@mR+1,stop@mR+1
  3941   000DD8  ECE6  F00D         	call	_stop	;wreg free
  3942   000DDC                     l347:
  3943   000DDC  0012               	return		;funcret
  3944   000DDE                     __end_of_movement:
  3945                           	callstack 0
  3946                           
  3947 ;; *************** function _space *****************
  3948 ;; Defined at:
  3949 ;;		line 247 in file "dc_motor.c"
  3950 ;; Parameters:    Size  Location     Type
  3951 ;;  mL              2   27[COMRAM] PTR struct DC_motor
  3952 ;;		 -> motorL(9), 
  3953 ;;  mR              2   29[COMRAM] PTR struct DC_motor
  3954 ;;		 -> motorR(9), 
  3955 ;; Auto vars:     Size  Location     Type
  3956 ;;		None
  3957 ;; Return value:  Size  Location     Type
  3958 ;;                  1    wreg      void 
  3959 ;; Registers used:
  3960 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3961 ;; Tracked objects:
  3962 ;;		On entry : 0/0
  3963 ;;		On exit  : 0/0
  3964 ;;		Unchanged: 0/0
  3965 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3966 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3967 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3968 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3969 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3970 ;;Total ram usage:        6 bytes
  3971 ;; Hardware stack levels used: 1
  3972 ;; Hardware stack levels required when called: 4
  3973 ;; This function calls:
  3974 ;;		_setMotorPWM
  3975 ;;		_stop
  3976 ;; This function is called by:
  3977 ;;		_buggy_color_response
  3978 ;;		_movement
  3979 ;; This function uses a non-reentrant model
  3980 ;;
  3981                           
  3982                           	psect	text22
  3983   0018F6                     __ptext22:
  3984                           	callstack 0
  3985   0018F6                     _space:
  3986                           	callstack 25
  3987   0018F6                     
  3988                           ;dc_motor.c: 247: void space(DC_motor *mL, DC_motor *mR);dc_motor.c: 248: {;dc_motor.c: 
      +                          249:     stop(mL,mR);
  3989   0018F6  C01C  F016         	movff	space@mL,stop@mL
  3990   0018FA  C01D  F017         	movff	space@mL+1,stop@mL+1
  3991   0018FE  C01E  F018         	movff	space@mR,stop@mR
  3992   001902  C01F  F019         	movff	space@mR+1,stop@mR+1
  3993   001906  ECE6  F00D         	call	_stop	;wreg free
  3994   00190A                     
  3995                           ;dc_motor.c: 250:     LATHbits.LATH1 = 1;
  3996   00190A  8280               	bsf	128,1,c	;volatile
  3997   00190C                     
  3998                           ;dc_motor.c: 251:     mL-> direction = 0;
  3999   00190C  EE20 F001          	lfsr	2,1
  4000   001910  501C               	movf	space@mL^0,w,c
  4001   001912  26D9               	addwf	fsr2l,f,c
  4002   001914  501D               	movf	(space@mL+1)^0,w,c
  4003   001916  22DA               	addwfc	fsr2h,f,c
  4004   001918  0E00               	movlw	0
  4005   00191A  6EDF               	movwf	indf2,c
  4006   00191C                     
  4007                           ;dc_motor.c: 252:     mR-> direction = 0;
  4008   00191C  EE20 F001          	lfsr	2,1
  4009   001920  501E               	movf	space@mR^0,w,c
  4010   001922  26D9               	addwf	fsr2l,f,c
  4011   001924  501F               	movf	(space@mR+1)^0,w,c
  4012   001926  22DA               	addwfc	fsr2h,f,c
  4013   001928  0E00               	movlw	0
  4014   00192A  6EDF               	movwf	indf2,c
  4015                           
  4016                           ;dc_motor.c: 253:     setMotorPWM(mR);
  4017   00192C  C01E  F010         	movff	space@mR,setMotorPWM@m
  4018   001930  C01F  F011         	movff	space@mR+1,setMotorPWM@m+1
  4019   001934  EC6A  F009         	call	_setMotorPWM	;wreg free
  4020                           
  4021                           ;dc_motor.c: 254:     setMotorPWM(mL);
  4022   001938  C01C  F010         	movff	space@mL,setMotorPWM@m
  4023   00193C  C01D  F011         	movff	space@mL+1,setMotorPWM@m+1
  4024   001940  EC6A  F009         	call	_setMotorPWM	;wreg free
  4025                           
  4026                           ;dc_motor.c: 255:     while ((mL->power <30) && (mR->power <30)){
  4027   001944  EFC0  F00C         	goto	l2561
  4028   001948                     l2553:
  4029                           
  4030                           ;dc_motor.c: 256:         mL->power += 10;
  4031   001948  C01C  FFD9         	movff	space@mL,fsr2l
  4032   00194C  C01D  FFDA         	movff	space@mL+1,fsr2h
  4033   001950  0E0A               	movlw	10
  4034   001952  26DF               	addwf	indf2,f,c
  4035                           
  4036                           ;dc_motor.c: 257:         mR->power += 10;
  4037   001954  C01E  FFD9         	movff	space@mR,fsr2l
  4038   001958  C01F  FFDA         	movff	space@mR+1,fsr2h
  4039   00195C  0E0A               	movlw	10
  4040   00195E  26DF               	addwf	indf2,f,c
  4041   001960                     
  4042                           ;dc_motor.c: 258:         setMotorPWM(mL);
  4043   001960  C01C  F010         	movff	space@mL,setMotorPWM@m
  4044   001964  C01D  F011         	movff	space@mL+1,setMotorPWM@m+1
  4045   001968  EC6A  F009         	call	_setMotorPWM	;wreg free
  4046   00196C                     
  4047                           ;dc_motor.c: 259:         setMotorPWM(mR);
  4048   00196C  C01E  F010         	movff	space@mR,setMotorPWM@m
  4049   001970  C01F  F011         	movff	space@mR+1,setMotorPWM@m+1
  4050   001974  EC6A  F009         	call	_setMotorPWM	;wreg free
  4051   001978                     
  4052                           ;dc_motor.c: 260:         _delay((unsigned long)((20)*(64000000/4000000.0)));
  4053   001978  0E6A               	movlw	106
  4054   00197A                     u2797:
  4055   00197A  2EE8               	decfsz	wreg,f,c
  4056   00197C  D7FE               	bra	u2797
  4057   00197E  D000               	nop2	
  4058   001980                     l2561:
  4059                           
  4060                           ;dc_motor.c: 255:     while ((mL->power <30) && (mR->power <30)){
  4061   001980  C01C  FFD9         	movff	space@mL,fsr2l
  4062   001984  C01D  FFDA         	movff	space@mL+1,fsr2h
  4063   001988  0E1E               	movlw	30
  4064   00198A  60DF               	cpfslt	indf2,c
  4065   00198C  EFCA  F00C         	goto	u1591
  4066   001990  EFCC  F00C         	goto	u1590
  4067   001994                     u1591:
  4068   001994  EFD8  F00C         	goto	l2565
  4069   001998                     u1590:
  4070   001998  C01E  FFD9         	movff	space@mR,fsr2l
  4071   00199C  C01F  FFDA         	movff	space@mR+1,fsr2h
  4072   0019A0  0E1D               	movlw	29
  4073   0019A2  64DF               	cpfsgt	indf2,c
  4074   0019A4  EFD6  F00C         	goto	u1601
  4075   0019A8  EFD8  F00C         	goto	u1600
  4076   0019AC                     u1601:
  4077   0019AC  EFA4  F00C         	goto	l2553
  4078   0019B0                     u1600:
  4079   0019B0                     l2565:
  4080                           
  4081                           ;dc_motor.c: 262:     _delay((unsigned long)((350)*(64000000/4000.0)));
  4082   0019B0  0E1D               	movlw	29
  4083   0019B2  6E21               	movwf	(??_space+1)^0,c
  4084   0019B4  0E69               	movlw	105
  4085   0019B6  6E20               	movwf	??_space^0,c
  4086   0019B8  0EA5               	movlw	165
  4087   0019BA                     u2807:
  4088   0019BA  2EE8               	decfsz	wreg,f,c
  4089   0019BC  D7FE               	bra	u2807
  4090   0019BE  2E20               	decfsz	??_space^0,f,c
  4091   0019C0  D7FC               	bra	u2807
  4092   0019C2  2E21               	decfsz	(??_space+1)^0,f,c
  4093   0019C4  D7FA               	bra	u2807
  4094   0019C6  F000               	nop	
  4095   0019C8                     
  4096                           ;dc_motor.c: 263:     stop(mL,mR);
  4097   0019C8  C01C  F016         	movff	space@mL,stop@mL
  4098   0019CC  C01D  F017         	movff	space@mL+1,stop@mL+1
  4099   0019D0  C01E  F018         	movff	space@mR,stop@mR
  4100   0019D4  C01F  F019         	movff	space@mR+1,stop@mR+1
  4101   0019D8  ECE6  F00D         	call	_stop	;wreg free
  4102   0019DC                     
  4103                           ;dc_motor.c: 264:     _delay((unsigned long)((200)*(64000000/4000.0)));
  4104   0019DC  0E11               	movlw	17
  4105   0019DE  6E21               	movwf	(??_space+1)^0,c
  4106   0019E0  0E3C               	movlw	60
  4107   0019E2  6E20               	movwf	??_space^0,c
  4108   0019E4  0ECB               	movlw	203
  4109   0019E6                     u2817:
  4110   0019E6  2EE8               	decfsz	wreg,f,c
  4111   0019E8  D7FE               	bra	u2817
  4112   0019EA  2E20               	decfsz	??_space^0,f,c
  4113   0019EC  D7FC               	bra	u2817
  4114   0019EE  2E21               	decfsz	(??_space+1)^0,f,c
  4115   0019F0  D7FA               	bra	u2817
  4116   0019F2  F000               	nop	
  4117   0019F4                     
  4118                           ;dc_motor.c: 265:     LATHbits.LATH1 = 0;
  4119   0019F4  9280               	bcf	128,1,c	;volatile
  4120   0019F6  0012               	return		;funcret
  4121   0019F8                     __end_of_space:
  4122                           	callstack 0
  4123                           
  4124 ;; *************** function _right_45 *****************
  4125 ;; Defined at:
  4126 ;;		line 222 in file "dc_motor.c"
  4127 ;; Parameters:    Size  Location     Type
  4128 ;;  mL              2   27[COMRAM] PTR struct DC_motor
  4129 ;;		 -> motorL(9), 
  4130 ;;  mR              2   29[COMRAM] PTR struct DC_motor
  4131 ;;		 -> motorR(9), 
  4132 ;;  count           2   31[COMRAM] int 
  4133 ;;  right_timer     2   33[COMRAM] int 
  4134 ;; Auto vars:     Size  Location     Type
  4135 ;;  i               2   37[COMRAM] int 
  4136 ;; Return value:  Size  Location     Type
  4137 ;;                  1    wreg      void 
  4138 ;; Registers used:
  4139 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4140 ;; Tracked objects:
  4141 ;;		On entry : 0/0
  4142 ;;		On exit  : 0/0
  4143 ;;		Unchanged: 0/0
  4144 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4145 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4146 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4147 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4148 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4149 ;;Total ram usage:       12 bytes
  4150 ;; Hardware stack levels used: 1
  4151 ;; Hardware stack levels required when called: 4
  4152 ;; This function calls:
  4153 ;;		_custom_delay
  4154 ;;		_setMotorPWM
  4155 ;;		_stop
  4156 ;; This function is called by:
  4157 ;;		_reverse_pink
  4158 ;;		_movement
  4159 ;;		_movement_return
  4160 ;;		_right_turn_calibration
  4161 ;; This function uses a non-reentrant model
  4162 ;;
  4163                           
  4164                           	psect	text23
  4165   001440                     __ptext23:
  4166                           	callstack 0
  4167   001440                     _right_45:
  4168                           	callstack 23
  4169   001440                     
  4170                           ;dc_motor.c: 222: void right_45(DC_motor *mL, DC_motor *mR, int count, int right_timer);
      +                          dc_motor.c: 223: {;dc_motor.c: 224:     stop(mL,mR);
  4171   001440  C01C  F016         	movff	right_45@mL,stop@mL
  4172   001444  C01D  F017         	movff	right_45@mL+1,stop@mL+1
  4173   001448  C01E  F018         	movff	right_45@mR,stop@mR
  4174   00144C  C01F  F019         	movff	right_45@mR+1,stop@mR+1
  4175   001450  ECE6  F00D         	call	_stop	;wreg free
  4176   001454                     
  4177                           ;dc_motor.c: 225:     mL-> direction = 1;
  4178   001454  EE20 F001          	lfsr	2,1
  4179   001458  501C               	movf	right_45@mL^0,w,c
  4180   00145A  26D9               	addwf	fsr2l,f,c
  4181   00145C  501D               	movf	(right_45@mL+1)^0,w,c
  4182   00145E  22DA               	addwfc	fsr2h,f,c
  4183   001460  0E01               	movlw	1
  4184   001462  6EDF               	movwf	indf2,c
  4185   001464                     
  4186                           ;dc_motor.c: 226:     mR-> direction = 0;
  4187   001464  EE20 F001          	lfsr	2,1
  4188   001468  501E               	movf	right_45@mR^0,w,c
  4189   00146A  26D9               	addwf	fsr2l,f,c
  4190   00146C  501F               	movf	(right_45@mR+1)^0,w,c
  4191   00146E  22DA               	addwfc	fsr2h,f,c
  4192   001470  0E00               	movlw	0
  4193   001472  6EDF               	movwf	indf2,c
  4194   001474                     
  4195                           ;dc_motor.c: 227:     LATHbits.LATH0 = 1;
  4196   001474  8080               	bsf	128,0,c	;volatile
  4197   001476                     
  4198                           ;dc_motor.c: 228:     int i;;dc_motor.c: 229:     for (i = 0;i<count;i++){
  4199   001476  0E00               	movlw	0
  4200   001478  6E27               	movwf	(right_45@i+1)^0,c
  4201   00147A  0E00               	movlw	0
  4202   00147C  6E26               	movwf	right_45@i^0,c
  4203   00147E  EFAE  F00A         	goto	l2435
  4204   001482                     l2407:
  4205                           
  4206                           ;dc_motor.c: 231:         if (mL->power <= 50){mL->power += 10;}
  4207   001482  C01C  FFD9         	movff	right_45@mL,fsr2l
  4208   001486  C01D  FFDA         	movff	right_45@mL+1,fsr2h
  4209   00148A  0E33               	movlw	51
  4210   00148C  60DF               	cpfslt	indf2,c
  4211   00148E  EF4B  F00A         	goto	u1481
  4212   001492  EF4D  F00A         	goto	u1480
  4213   001496                     u1481:
  4214   001496  EF53  F00A         	goto	l2411
  4215   00149A                     u1480:
  4216   00149A  C01C  FFD9         	movff	right_45@mL,fsr2l
  4217   00149E  C01D  FFDA         	movff	right_45@mL+1,fsr2h
  4218   0014A2  0E0A               	movlw	10
  4219   0014A4  26DF               	addwf	indf2,f,c
  4220   0014A6                     l2411:
  4221                           
  4222                           ;dc_motor.c: 232:         if (mR->power <= 50){mR->power += 10;}
  4223   0014A6  C01E  FFD9         	movff	right_45@mR,fsr2l
  4224   0014AA  C01F  FFDA         	movff	right_45@mR+1,fsr2h
  4225   0014AE  0E33               	movlw	51
  4226   0014B0  60DF               	cpfslt	indf2,c
  4227   0014B2  EF5D  F00A         	goto	u1491
  4228   0014B6  EF5F  F00A         	goto	u1490
  4229   0014BA                     u1491:
  4230   0014BA  EF65  F00A         	goto	l2415
  4231   0014BE                     u1490:
  4232   0014BE  C01E  FFD9         	movff	right_45@mR,fsr2l
  4233   0014C2  C01F  FFDA         	movff	right_45@mR+1,fsr2h
  4234   0014C6  0E0A               	movlw	10
  4235   0014C8  26DF               	addwf	indf2,f,c
  4236   0014CA                     l2415:
  4237                           
  4238                           ;dc_motor.c: 233:         setMotorPWM(mL);
  4239   0014CA  C01C  F010         	movff	right_45@mL,setMotorPWM@m
  4240   0014CE  C01D  F011         	movff	right_45@mL+1,setMotorPWM@m+1
  4241   0014D2  EC6A  F009         	call	_setMotorPWM	;wreg free
  4242   0014D6                     
  4243                           ;dc_motor.c: 234:         setMotorPWM(mR);
  4244   0014D6  C01E  F010         	movff	right_45@mR,setMotorPWM@m
  4245   0014DA  C01F  F011         	movff	right_45@mR+1,setMotorPWM@m+1
  4246   0014DE  EC6A  F009         	call	_setMotorPWM	;wreg free
  4247   0014E2                     
  4248                           ;dc_motor.c: 235:         _delay((unsigned long)((10)*(64000000/4000.0)));
  4249   0014E2  0ED0               	movlw	208
  4250   0014E4  6E24               	movwf	??_right_45^0,c
  4251   0014E6  0ECA               	movlw	202
  4252   0014E8                     u2827:
  4253   0014E8  2EE8               	decfsz	wreg,f,c
  4254   0014EA  D7FE               	bra	u2827
  4255   0014EC  2E24               	decfsz	??_right_45^0,f,c
  4256   0014EE  D7FC               	bra	u2827
  4257   0014F0                     l2421:
  4258                           
  4259                           ;dc_motor.c: 230:     while ((mL->power <= 50) || (mR->power <= 50)){
  4260   0014F0  C01C  FFD9         	movff	right_45@mL,fsr2l
  4261   0014F4  C01D  FFDA         	movff	right_45@mL+1,fsr2h
  4262   0014F8  0E32               	movlw	50
  4263   0014FA  64DF               	cpfsgt	indf2,c
  4264   0014FC  EF82  F00A         	goto	u1501
  4265   001500  EF84  F00A         	goto	u1500
  4266   001504                     u1501:
  4267   001504  EF41  F00A         	goto	l2407
  4268   001508                     u1500:
  4269   001508  C01E  FFD9         	movff	right_45@mR,fsr2l
  4270   00150C  C01F  FFDA         	movff	right_45@mR+1,fsr2h
  4271   001510  0E32               	movlw	50
  4272   001512  64DF               	cpfsgt	indf2,c
  4273   001514  EF8E  F00A         	goto	u1511
  4274   001518  EF90  F00A         	goto	u1510
  4275   00151C                     u1511:
  4276   00151C  EF41  F00A         	goto	l2407
  4277   001520                     u1510:
  4278   001520                     
  4279                           ;dc_motor.c: 237:     custom_delay(right_timer);
  4280   001520  C022  F003         	movff	right_45@right_timer,custom_delay@temp
  4281   001524  C023  F004         	movff	right_45@right_timer+1,custom_delay@temp+1
  4282   001528  ECDE  F010         	call	_custom_delay	;wreg free
  4283   00152C                     
  4284                           ;dc_motor.c: 238:     stop(mL,mR);
  4285   00152C  C01C  F016         	movff	right_45@mL,stop@mL
  4286   001530  C01D  F017         	movff	right_45@mL+1,stop@mL+1
  4287   001534  C01E  F018         	movff	right_45@mR,stop@mR
  4288   001538  C01F  F019         	movff	right_45@mR+1,stop@mR+1
  4289   00153C  ECE6  F00D         	call	_stop	;wreg free
  4290   001540                     
  4291                           ;dc_motor.c: 239:     _delay((unsigned long)((150)*(64000000/4000.0)));
  4292   001540  0E0D               	movlw	13
  4293   001542  6E25               	movwf	(??_right_45+1)^0,c
  4294   001544  0E2D               	movlw	45
  4295   001546  6E24               	movwf	??_right_45^0,c
  4296   001548  0ED8               	movlw	216
  4297   00154A                     u2837:
  4298   00154A  2EE8               	decfsz	wreg,f,c
  4299   00154C  D7FE               	bra	u2837
  4300   00154E  2E24               	decfsz	??_right_45^0,f,c
  4301   001550  D7FC               	bra	u2837
  4302   001552  2E25               	decfsz	(??_right_45+1)^0,f,c
  4303   001554  D7FA               	bra	u2837
  4304   001556                     
  4305                           ;dc_motor.c: 240:     LATHbits.LATH0 = 0;
  4306   001556  9080               	bcf	128,0,c	;volatile
  4307   001558                     
  4308                           ;dc_motor.c: 241:     }
  4309   001558  4A26               	infsnz	right_45@i^0,f,c
  4310   00155A  2A27               	incf	(right_45@i+1)^0,f,c
  4311   00155C                     l2435:
  4312   00155C  5020               	movf	right_45@count^0,w,c
  4313   00155E  5C26               	subwf	right_45@i^0,w,c
  4314   001560  5027               	movf	(right_45@i+1)^0,w,c
  4315   001562  0A80               	xorlw	128
  4316   001564  6E24               	movwf	??_right_45^0,c
  4317   001566  5021               	movf	(right_45@count+1)^0,w,c
  4318   001568  0A80               	xorlw	128
  4319   00156A  5824               	subwfb	??_right_45^0,w,c
  4320   00156C  A0D8               	btfss	status,0,c
  4321   00156E  EFBB  F00A         	goto	u1521
  4322   001572  EFBD  F00A         	goto	u1520
  4323   001576                     u1521:
  4324   001576  EF78  F00A         	goto	l2421
  4325   00157A                     u1520:
  4326   00157A  0012               	return		;funcret
  4327   00157C                     __end_of_right_45:
  4328                           	callstack 0
  4329                           
  4330 ;; *************** function _reverse *****************
  4331 ;; Defined at:
  4332 ;;		line 148 in file "dc_motor.c"
  4333 ;; Parameters:    Size  Location     Type
  4334 ;;  mL              2   27[COMRAM] PTR struct DC_motor
  4335 ;;		 -> motorL(9), 
  4336 ;;  mR              2   29[COMRAM] PTR struct DC_motor
  4337 ;;		 -> motorR(9), 
  4338 ;; Auto vars:     Size  Location     Type
  4339 ;;		None
  4340 ;; Return value:  Size  Location     Type
  4341 ;;                  1    wreg      void 
  4342 ;; Registers used:
  4343 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4344 ;; Tracked objects:
  4345 ;;		On entry : 0/0
  4346 ;;		On exit  : 0/0
  4347 ;;		Unchanged: 0/0
  4348 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4349 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4350 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4351 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4352 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4353 ;;Total ram usage:        5 bytes
  4354 ;; Hardware stack levels used: 1
  4355 ;; Hardware stack levels required when called: 4
  4356 ;; This function calls:
  4357 ;;		_setMotorPWM
  4358 ;;		_stop
  4359 ;; This function is called by:
  4360 ;;		_return_home
  4361 ;;		_reverse_yellow
  4362 ;;		_reverse_pink
  4363 ;;		_movement
  4364 ;; This function uses a non-reentrant model
  4365 ;;
  4366                           
  4367                           	psect	text24
  4368   001AE2                     __ptext24:
  4369                           	callstack 0
  4370   001AE2                     _reverse:
  4371                           	callstack 24
  4372   001AE2                     
  4373                           ;dc_motor.c: 148: void reverse(DC_motor *mL, DC_motor *mR);dc_motor.c: 149: {;dc_motor.c
      +                          : 150:     stop(mL,mR);
  4374   001AE2  C01C  F016         	movff	reverse@mL,stop@mL
  4375   001AE6  C01D  F017         	movff	reverse@mL+1,stop@mL+1
  4376   001AEA  C01E  F018         	movff	reverse@mR,stop@mR
  4377   001AEE  C01F  F019         	movff	reverse@mR+1,stop@mR+1
  4378   001AF2  ECE6  F00D         	call	_stop	;wreg free
  4379   001AF6                     
  4380                           ;dc_motor.c: 151:     mL-> direction = 0;
  4381   001AF6  EE20 F001          	lfsr	2,1
  4382   001AFA  501C               	movf	reverse@mL^0,w,c
  4383   001AFC  26D9               	addwf	fsr2l,f,c
  4384   001AFE  501D               	movf	(reverse@mL+1)^0,w,c
  4385   001B00  22DA               	addwfc	fsr2h,f,c
  4386   001B02  0E00               	movlw	0
  4387   001B04  6EDF               	movwf	indf2,c
  4388   001B06                     
  4389                           ;dc_motor.c: 152:     mR-> direction = 0;
  4390   001B06  EE20 F001          	lfsr	2,1
  4391   001B0A  501E               	movf	reverse@mR^0,w,c
  4392   001B0C  26D9               	addwf	fsr2l,f,c
  4393   001B0E  501F               	movf	(reverse@mR+1)^0,w,c
  4394   001B10  22DA               	addwfc	fsr2h,f,c
  4395   001B12  0E00               	movlw	0
  4396   001B14  6EDF               	movwf	indf2,c
  4397   001B16                     
  4398                           ;dc_motor.c: 153:     LATHbits.LATH1 = 1;
  4399   001B16  8280               	bsf	128,1,c	;volatile
  4400                           
  4401                           ;dc_motor.c: 154:     setMotorPWM(mR);
  4402   001B18  C01E  F010         	movff	reverse@mR,setMotorPWM@m
  4403   001B1C  C01F  F011         	movff	reverse@mR+1,setMotorPWM@m+1
  4404   001B20  EC6A  F009         	call	_setMotorPWM	;wreg free
  4405                           
  4406                           ;dc_motor.c: 155:     setMotorPWM(mL);
  4407   001B24  C01C  F010         	movff	reverse@mL,setMotorPWM@m
  4408   001B28  C01D  F011         	movff	reverse@mL+1,setMotorPWM@m+1
  4409   001B2C  EC6A  F009         	call	_setMotorPWM	;wreg free
  4410                           
  4411                           ;dc_motor.c: 156:     while ((mL->power <= 50) || (mR->power <= 55)){
  4412   001B30  EFCC  F00D         	goto	l291
  4413   001B34                     l2341:
  4414                           
  4415                           ;dc_motor.c: 157:         if (mL->power <= 50){mL->power += 1;}
  4416   001B34  C01C  FFD9         	movff	reverse@mL,fsr2l
  4417   001B38  C01D  FFDA         	movff	reverse@mL+1,fsr2h
  4418   001B3C  0E33               	movlw	51
  4419   001B3E  60DF               	cpfslt	indf2,c
  4420   001B40  EFA4  F00D         	goto	u1391
  4421   001B44  EFA6  F00D         	goto	u1390
  4422   001B48                     u1391:
  4423   001B48  EFAB  F00D         	goto	l2345
  4424   001B4C                     u1390:
  4425   001B4C  C01C  FFD9         	movff	reverse@mL,fsr2l
  4426   001B50  C01D  FFDA         	movff	reverse@mL+1,fsr2h
  4427   001B54  2ADF               	incf	indf2,f,c
  4428   001B56                     l2345:
  4429                           
  4430                           ;dc_motor.c: 158:         if (mR->power <= 55){mR->power += 1;}
  4431   001B56  C01E  FFD9         	movff	reverse@mR,fsr2l
  4432   001B5A  C01F  FFDA         	movff	reverse@mR+1,fsr2h
  4433   001B5E  0E38               	movlw	56
  4434   001B60  60DF               	cpfslt	indf2,c
  4435   001B62  EFB5  F00D         	goto	u1401
  4436   001B66  EFB7  F00D         	goto	u1400
  4437   001B6A                     u1401:
  4438   001B6A  EFBC  F00D         	goto	l2349
  4439   001B6E                     u1400:
  4440   001B6E  C01E  FFD9         	movff	reverse@mR,fsr2l
  4441   001B72  C01F  FFDA         	movff	reverse@mR+1,fsr2h
  4442   001B76  2ADF               	incf	indf2,f,c
  4443   001B78                     l2349:
  4444                           
  4445                           ;dc_motor.c: 159:         setMotorPWM(mL);
  4446   001B78  C01C  F010         	movff	reverse@mL,setMotorPWM@m
  4447   001B7C  C01D  F011         	movff	reverse@mL+1,setMotorPWM@m+1
  4448   001B80  EC6A  F009         	call	_setMotorPWM	;wreg free
  4449   001B84                     
  4450                           ;dc_motor.c: 160:         setMotorPWM(mR);
  4451   001B84  C01E  F010         	movff	reverse@mR,setMotorPWM@m
  4452   001B88  C01F  F011         	movff	reverse@mR+1,setMotorPWM@m+1
  4453   001B8C  EC6A  F009         	call	_setMotorPWM	;wreg free
  4454   001B90                     
  4455                           ;dc_motor.c: 161:         _delay((unsigned long)((5)*(64000000/4000000.0)));
  4456   001B90  0E1A               	movlw	26
  4457   001B92                     u2847:
  4458   001B92  2EE8               	decfsz	wreg,f,c
  4459   001B94  D7FE               	bra	u2847
  4460   001B96  D000               	nop2	
  4461   001B98                     l291:
  4462                           
  4463                           ;dc_motor.c: 156:     while ((mL->power <= 50) || (mR->power <= 55)){
  4464   001B98  C01C  FFD9         	movff	reverse@mL,fsr2l
  4465   001B9C  C01D  FFDA         	movff	reverse@mL+1,fsr2h
  4466   001BA0  0E32               	movlw	50
  4467   001BA2  64DF               	cpfsgt	indf2,c
  4468   001BA4  EFD6  F00D         	goto	u1411
  4469   001BA8  EFD8  F00D         	goto	u1410
  4470   001BAC                     u1411:
  4471   001BAC  EF9A  F00D         	goto	l2341
  4472   001BB0                     u1410:
  4473   001BB0  C01E  FFD9         	movff	reverse@mR,fsr2l
  4474   001BB4  C01F  FFDA         	movff	reverse@mR+1,fsr2h
  4475   001BB8  0E37               	movlw	55
  4476   001BBA  64DF               	cpfsgt	indf2,c
  4477   001BBC  EFE2  F00D         	goto	u1421
  4478   001BC0  EFE4  F00D         	goto	u1420
  4479   001BC4                     u1421:
  4480   001BC4  EF9A  F00D         	goto	l2341
  4481   001BC8                     u1420:
  4482   001BC8                     
  4483                           ;dc_motor.c: 163:     LATHbits.LATH1 = 0;
  4484   001BC8  9280               	bcf	128,1,c	;volatile
  4485   001BCA  0012               	return		;funcret
  4486   001BCC                     __end_of_reverse:
  4487                           	callstack 0
  4488                           
  4489 ;; *************** function _left_45 *****************
  4490 ;; Defined at:
  4491 ;;		line 195 in file "dc_motor.c"
  4492 ;; Parameters:    Size  Location     Type
  4493 ;;  mL              2   27[COMRAM] PTR struct DC_motor
  4494 ;;		 -> motorL(9), 
  4495 ;;  mR              2   29[COMRAM] PTR struct DC_motor
  4496 ;;		 -> motorR(9), 
  4497 ;;  count           2   31[COMRAM] int 
  4498 ;;  left_timer      2   33[COMRAM] int 
  4499 ;; Auto vars:     Size  Location     Type
  4500 ;;  i               2   37[COMRAM] int 
  4501 ;; Return value:  Size  Location     Type
  4502 ;;                  1    wreg      void 
  4503 ;; Registers used:
  4504 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4505 ;; Tracked objects:
  4506 ;;		On entry : 0/0
  4507 ;;		On exit  : 0/0
  4508 ;;		Unchanged: 0/0
  4509 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4510 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4511 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4512 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4513 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4514 ;;Total ram usage:       12 bytes
  4515 ;; Hardware stack levels used: 1
  4516 ;; Hardware stack levels required when called: 4
  4517 ;; This function calls:
  4518 ;;		_custom_delay
  4519 ;;		_setMotorPWM
  4520 ;;		_stop
  4521 ;; This function is called by:
  4522 ;;		_reverse_yellow
  4523 ;;		_movement
  4524 ;;		_movement_return
  4525 ;;		_left_turn_calibration
  4526 ;; This function uses a non-reentrant model
  4527 ;;
  4528                           
  4529                           	psect	text25
  4530   00157C                     __ptext25:
  4531                           	callstack 0
  4532   00157C                     _left_45:
  4533                           	callstack 22
  4534   00157C                     
  4535                           ;dc_motor.c: 195: void left_45(DC_motor *mL, DC_motor *mR, int count, int left_timer);dc
      +                          _motor.c: 196: {;dc_motor.c: 197:     stop(mL,mR);
  4536   00157C  C01C  F016         	movff	left_45@mL,stop@mL
  4537   001580  C01D  F017         	movff	left_45@mL+1,stop@mL+1
  4538   001584  C01E  F018         	movff	left_45@mR,stop@mR
  4539   001588  C01F  F019         	movff	left_45@mR+1,stop@mR+1
  4540   00158C  ECE6  F00D         	call	_stop	;wreg free
  4541   001590                     
  4542                           ;dc_motor.c: 198:     mL-> direction = 0;
  4543   001590  EE20 F001          	lfsr	2,1
  4544   001594  501C               	movf	left_45@mL^0,w,c
  4545   001596  26D9               	addwf	fsr2l,f,c
  4546   001598  501D               	movf	(left_45@mL+1)^0,w,c
  4547   00159A  22DA               	addwfc	fsr2h,f,c
  4548   00159C  0E00               	movlw	0
  4549   00159E  6EDF               	movwf	indf2,c
  4550   0015A0                     
  4551                           ;dc_motor.c: 199:     mR-> direction = 1;
  4552   0015A0  EE20 F001          	lfsr	2,1
  4553   0015A4  501E               	movf	left_45@mR^0,w,c
  4554   0015A6  26D9               	addwf	fsr2l,f,c
  4555   0015A8  501F               	movf	(left_45@mR+1)^0,w,c
  4556   0015AA  22DA               	addwfc	fsr2h,f,c
  4557   0015AC  0E01               	movlw	1
  4558   0015AE  6EDF               	movwf	indf2,c
  4559   0015B0                     
  4560                           ;dc_motor.c: 200:     LATFbits.LATF0 = 1;
  4561   0015B0  807E               	bsf	126,0,c	;volatile
  4562   0015B2                     
  4563                           ;dc_motor.c: 201:     int i;;dc_motor.c: 202:     for (i = 0;i<count;i++){
  4564   0015B2  0E00               	movlw	0
  4565   0015B4  6E27               	movwf	(left_45@i+1)^0,c
  4566   0015B6  0E00               	movlw	0
  4567   0015B8  6E26               	movwf	left_45@i^0,c
  4568   0015BA  EF4C  F00B         	goto	l2395
  4569   0015BE                     l2367:
  4570                           
  4571                           ;dc_motor.c: 204:         if (mL->power <= 50){mL->power += 10;}
  4572   0015BE  C01C  FFD9         	movff	left_45@mL,fsr2l
  4573   0015C2  C01D  FFDA         	movff	left_45@mL+1,fsr2h
  4574   0015C6  0E33               	movlw	51
  4575   0015C8  60DF               	cpfslt	indf2,c
  4576   0015CA  EFE9  F00A         	goto	u1431
  4577   0015CE  EFEB  F00A         	goto	u1430
  4578   0015D2                     u1431:
  4579   0015D2  EFF1  F00A         	goto	l2371
  4580   0015D6                     u1430:
  4581   0015D6  C01C  FFD9         	movff	left_45@mL,fsr2l
  4582   0015DA  C01D  FFDA         	movff	left_45@mL+1,fsr2h
  4583   0015DE  0E0A               	movlw	10
  4584   0015E0  26DF               	addwf	indf2,f,c
  4585   0015E2                     l2371:
  4586                           
  4587                           ;dc_motor.c: 205:         if (mR->power <= 50){mR->power += 10;}
  4588   0015E2  C01E  FFD9         	movff	left_45@mR,fsr2l
  4589   0015E6  C01F  FFDA         	movff	left_45@mR+1,fsr2h
  4590   0015EA  0E33               	movlw	51
  4591   0015EC  60DF               	cpfslt	indf2,c
  4592   0015EE  EFFB  F00A         	goto	u1441
  4593   0015F2  EFFD  F00A         	goto	u1440
  4594   0015F6                     u1441:
  4595   0015F6  EF03  F00B         	goto	l2375
  4596   0015FA                     u1440:
  4597   0015FA  C01E  FFD9         	movff	left_45@mR,fsr2l
  4598   0015FE  C01F  FFDA         	movff	left_45@mR+1,fsr2h
  4599   001602  0E0A               	movlw	10
  4600   001604  26DF               	addwf	indf2,f,c
  4601   001606                     l2375:
  4602                           
  4603                           ;dc_motor.c: 206:         setMotorPWM(mL);
  4604   001606  C01C  F010         	movff	left_45@mL,setMotorPWM@m
  4605   00160A  C01D  F011         	movff	left_45@mL+1,setMotorPWM@m+1
  4606   00160E  EC6A  F009         	call	_setMotorPWM	;wreg free
  4607   001612                     
  4608                           ;dc_motor.c: 207:         setMotorPWM(mR);
  4609   001612  C01E  F010         	movff	left_45@mR,setMotorPWM@m
  4610   001616  C01F  F011         	movff	left_45@mR+1,setMotorPWM@m+1
  4611   00161A  EC6A  F009         	call	_setMotorPWM	;wreg free
  4612   00161E                     
  4613                           ;dc_motor.c: 208:         _delay((unsigned long)((10)*(64000000/4000.0)));
  4614   00161E  0ED0               	movlw	208
  4615   001620  6E24               	movwf	??_left_45^0,c
  4616   001622  0ECA               	movlw	202
  4617   001624                     u2857:
  4618   001624  2EE8               	decfsz	wreg,f,c
  4619   001626  D7FE               	bra	u2857
  4620   001628  2E24               	decfsz	??_left_45^0,f,c
  4621   00162A  D7FC               	bra	u2857
  4622   00162C                     l2381:
  4623                           
  4624                           ;dc_motor.c: 203:     while ((mL->power <= 50) || (mR->power <= 50)){
  4625   00162C  C01C  FFD9         	movff	left_45@mL,fsr2l
  4626   001630  C01D  FFDA         	movff	left_45@mL+1,fsr2h
  4627   001634  0E32               	movlw	50
  4628   001636  64DF               	cpfsgt	indf2,c
  4629   001638  EF20  F00B         	goto	u1451
  4630   00163C  EF22  F00B         	goto	u1450
  4631   001640                     u1451:
  4632   001640  EFDF  F00A         	goto	l2367
  4633   001644                     u1450:
  4634   001644  C01E  FFD9         	movff	left_45@mR,fsr2l
  4635   001648  C01F  FFDA         	movff	left_45@mR+1,fsr2h
  4636   00164C  0E32               	movlw	50
  4637   00164E  64DF               	cpfsgt	indf2,c
  4638   001650  EF2C  F00B         	goto	u1461
  4639   001654  EF2E  F00B         	goto	u1460
  4640   001658                     u1461:
  4641   001658  EFDF  F00A         	goto	l2367
  4642   00165C                     u1460:
  4643   00165C                     
  4644                           ;dc_motor.c: 210:     custom_delay(left_timer);
  4645   00165C  C022  F003         	movff	left_45@left_timer,custom_delay@temp
  4646   001660  C023  F004         	movff	left_45@left_timer+1,custom_delay@temp+1
  4647   001664  ECDE  F010         	call	_custom_delay	;wreg free
  4648   001668                     
  4649                           ;dc_motor.c: 211:     stop(mL,mR);
  4650   001668  C01C  F016         	movff	left_45@mL,stop@mL
  4651   00166C  C01D  F017         	movff	left_45@mL+1,stop@mL+1
  4652   001670  C01E  F018         	movff	left_45@mR,stop@mR
  4653   001674  C01F  F019         	movff	left_45@mR+1,stop@mR+1
  4654   001678  ECE6  F00D         	call	_stop	;wreg free
  4655   00167C                     
  4656                           ;dc_motor.c: 212:     _delay((unsigned long)((150)*(64000000/4000.0)));
  4657   00167C  0E0D               	movlw	13
  4658   00167E  6E25               	movwf	(??_left_45+1)^0,c
  4659   001680  0E2D               	movlw	45
  4660   001682  6E24               	movwf	??_left_45^0,c
  4661   001684  0ED8               	movlw	216
  4662   001686                     u2867:
  4663   001686  2EE8               	decfsz	wreg,f,c
  4664   001688  D7FE               	bra	u2867
  4665   00168A  2E24               	decfsz	??_left_45^0,f,c
  4666   00168C  D7FC               	bra	u2867
  4667   00168E  2E25               	decfsz	(??_left_45+1)^0,f,c
  4668   001690  D7FA               	bra	u2867
  4669   001692                     
  4670                           ;dc_motor.c: 213:     LATFbits.LATF0 = 0;
  4671   001692  907E               	bcf	126,0,c	;volatile
  4672   001694                     
  4673                           ;dc_motor.c: 214:     }
  4674   001694  4A26               	infsnz	left_45@i^0,f,c
  4675   001696  2A27               	incf	(left_45@i+1)^0,f,c
  4676   001698                     l2395:
  4677   001698  5020               	movf	left_45@count^0,w,c
  4678   00169A  5C26               	subwf	left_45@i^0,w,c
  4679   00169C  5027               	movf	(left_45@i+1)^0,w,c
  4680   00169E  0A80               	xorlw	128
  4681   0016A0  6E24               	movwf	??_left_45^0,c
  4682   0016A2  5021               	movf	(left_45@count+1)^0,w,c
  4683   0016A4  0A80               	xorlw	128
  4684   0016A6  5824               	subwfb	??_left_45^0,w,c
  4685   0016A8  A0D8               	btfss	status,0,c
  4686   0016AA  EF59  F00B         	goto	u1471
  4687   0016AE  EF5B  F00B         	goto	u1470
  4688   0016B2                     u1471:
  4689   0016B2  EF16  F00B         	goto	l2381
  4690   0016B6                     u1470:
  4691   0016B6  0012               	return		;funcret
  4692   0016B8                     __end_of_left_45:
  4693                           	callstack 0
  4694                           
  4695 ;; *************** function _stop *****************
  4696 ;; Defined at:
  4697 ;;		line 169 in file "dc_motor.c"
  4698 ;; Parameters:    Size  Location     Type
  4699 ;;  mL              2   21[COMRAM] PTR struct DC_motor
  4700 ;;		 -> motorL(9), 
  4701 ;;  mR              2   23[COMRAM] PTR struct DC_motor
  4702 ;;		 -> motorR(9), 
  4703 ;; Auto vars:     Size  Location     Type
  4704 ;;  i               2   25[COMRAM] int 
  4705 ;; Return value:  Size  Location     Type
  4706 ;;                  1    wreg      void 
  4707 ;; Registers used:
  4708 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4709 ;; Tracked objects:
  4710 ;;		On entry : 0/0
  4711 ;;		On exit  : 0/0
  4712 ;;		Unchanged: 0/0
  4713 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4714 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4715 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4716 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4717 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4718 ;;Total ram usage:        6 bytes
  4719 ;; Hardware stack levels used: 1
  4720 ;; Hardware stack levels required when called: 3
  4721 ;; This function calls:
  4722 ;;		_setMotorPWM
  4723 ;; This function is called by:
  4724 ;;		_buggy_color_response
  4725 ;;		_return_home
  4726 ;;		_forward
  4727 ;;		_reverse
  4728 ;;		_left_45
  4729 ;;		_right_45
  4730 ;;		_space
  4731 ;;		_reverse_yellow
  4732 ;;		_reverse_pink
  4733 ;;		_movement
  4734 ;;		_movement_return
  4735 ;; This function uses a non-reentrant model
  4736 ;;
  4737                           
  4738                           	psect	text26
  4739   001BCC                     __ptext26:
  4740                           	callstack 0
  4741   001BCC                     _stop:
  4742                           	callstack 26
  4743   001BCC                     
  4744                           ;dc_motor.c: 169: void stop(DC_motor *mL, DC_motor *mR);dc_motor.c: 170: {;dc_motor.c: 1
      +                          71:     mL->brakemode = 1;
  4745   001BCC  EE20 F002          	lfsr	2,2
  4746   001BD0  5016               	movf	stop@mL^0,w,c
  4747   001BD2  26D9               	addwf	fsr2l,f,c
  4748   001BD4  5017               	movf	(stop@mL+1)^0,w,c
  4749   001BD6  22DA               	addwfc	fsr2h,f,c
  4750   001BD8  0E01               	movlw	1
  4751   001BDA  6EDF               	movwf	indf2,c
  4752                           
  4753                           ;dc_motor.c: 172:     mR->brakemode = 1;
  4754   001BDC  EE20 F002          	lfsr	2,2
  4755   001BE0  5018               	movf	stop@mR^0,w,c
  4756   001BE2  26D9               	addwf	fsr2l,f,c
  4757   001BE4  5019               	movf	(stop@mR+1)^0,w,c
  4758   001BE6  22DA               	addwfc	fsr2h,f,c
  4759   001BE8  0E01               	movlw	1
  4760   001BEA  6EDF               	movwf	indf2,c
  4761   001BEC                     
  4762                           ;dc_motor.c: 173:     LATDbits.LATD4 = 1;
  4763   001BEC  887C               	bsf	124,4,c	;volatile
  4764   001BEE                     
  4765                           ;dc_motor.c: 175:     for (int i = 70; i >= 0; i=i-10) {
  4766   001BEE  0E00               	movlw	0
  4767   001BF0  6E1B               	movwf	(stop@i+1)^0,c
  4768   001BF2  0E46               	movlw	70
  4769   001BF4  6E1A               	movwf	stop@i^0,c
  4770   001BF6                     l2303:
  4771                           
  4772                           ;dc_motor.c: 176:         mL -> power = i;
  4773   001BF6  C016  FFD9         	movff	stop@mL,fsr2l
  4774   001BFA  C017  FFDA         	movff	stop@mL+1,fsr2h
  4775   001BFE  C01A  FFDF         	movff	stop@i,indf2
  4776                           
  4777                           ;dc_motor.c: 177:         mR -> power = i;
  4778   001C02  C018  FFD9         	movff	stop@mR,fsr2l
  4779   001C06  C019  FFDA         	movff	stop@mR+1,fsr2h
  4780   001C0A  C01A  FFDF         	movff	stop@i,indf2
  4781   001C0E                     
  4782                           ;dc_motor.c: 178:         setMotorPWM(mL);
  4783   001C0E  C016  F010         	movff	stop@mL,setMotorPWM@m
  4784   001C12  C017  F011         	movff	stop@mL+1,setMotorPWM@m+1
  4785   001C16  EC6A  F009         	call	_setMotorPWM	;wreg free
  4786   001C1A                     
  4787                           ;dc_motor.c: 179:         setMotorPWM(mR);
  4788   001C1A  C018  F010         	movff	stop@mR,setMotorPWM@m
  4789   001C1E  C019  F011         	movff	stop@mR+1,setMotorPWM@m+1
  4790   001C22  EC6A  F009         	call	_setMotorPWM	;wreg free
  4791   001C26                     
  4792                           ;dc_motor.c: 180:         _delay((unsigned long)((20)*(64000000/4000000.0)));
  4793   001C26  0E6A               	movlw	106
  4794   001C28                     u2877:
  4795   001C28  2EE8               	decfsz	wreg,f,c
  4796   001C2A  D7FE               	bra	u2877
  4797   001C2C  D000               	nop2	
  4798   001C2E                     
  4799                           ;dc_motor.c: 181:     }
  4800   001C2E  0EF6               	movlw	246
  4801   001C30  241A               	addwf	stop@i^0,w,c
  4802   001C32  6E1A               	movwf	stop@i^0,c
  4803   001C34  0EFF               	movlw	255
  4804   001C36  201B               	addwfc	(stop@i+1)^0,w,c
  4805   001C38  6E1B               	movwf	(stop@i+1)^0,c
  4806   001C3A  BE1B               	btfsc	(stop@i+1)^0,7,c
  4807   001C3C  EF24  F00E         	goto	u1350
  4808   001C40  EF22  F00E         	goto	u1351
  4809   001C44                     u1351:
  4810   001C44  EFFB  F00D         	goto	l2303
  4811   001C48                     u1350:
  4812   001C48                     
  4813                           ;dc_motor.c: 183:     mL->power = 0;
  4814   001C48  C016  FFD9         	movff	stop@mL,fsr2l
  4815   001C4C  C017  FFDA         	movff	stop@mL+1,fsr2h
  4816   001C50  0E00               	movlw	0
  4817   001C52  6EDF               	movwf	indf2,c
  4818                           
  4819                           ;dc_motor.c: 184:     mR->power = 0;
  4820   001C54  C018  FFD9         	movff	stop@mR,fsr2l
  4821   001C58  C019  FFDA         	movff	stop@mR+1,fsr2h
  4822   001C5C  0E00               	movlw	0
  4823   001C5E  6EDF               	movwf	indf2,c
  4824   001C60                     
  4825                           ;dc_motor.c: 185:     setMotorPWM(mL);
  4826   001C60  C016  F010         	movff	stop@mL,setMotorPWM@m
  4827   001C64  C017  F011         	movff	stop@mL+1,setMotorPWM@m+1
  4828   001C68  EC6A  F009         	call	_setMotorPWM	;wreg free
  4829   001C6C                     
  4830                           ;dc_motor.c: 186:     setMotorPWM(mR);
  4831   001C6C  C018  F010         	movff	stop@mR,setMotorPWM@m
  4832   001C70  C019  F011         	movff	stop@mR+1,setMotorPWM@m+1
  4833   001C74  EC6A  F009         	call	_setMotorPWM	;wreg free
  4834   001C78                     
  4835                           ;dc_motor.c: 187:     LATDbits.LATD4 = 0;
  4836   001C78  987C               	bcf	124,4,c	;volatile
  4837   001C7A  0012               	return		;funcret
  4838   001C7C                     __end_of_stop:
  4839                           	callstack 0
  4840                           
  4841 ;; *************** function _setMotorPWM *****************
  4842 ;; Defined at:
  4843 ;;		line 78 in file "dc_motor.c"
  4844 ;; Parameters:    Size  Location     Type
  4845 ;;  m               2   15[COMRAM] PTR struct DC_motor
  4846 ;;		 -> motorR(9), motorL(9), 
  4847 ;; Auto vars:     Size  Location     Type
  4848 ;;  negDuty         1   20[COMRAM] unsigned char 
  4849 ;;  posDuty         1   19[COMRAM] unsigned char 
  4850 ;; Return value:  Size  Location     Type
  4851 ;;                  1    wreg      void 
  4852 ;; Registers used:
  4853 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4854 ;; Tracked objects:
  4855 ;;		On entry : 0/0
  4856 ;;		On exit  : 0/0
  4857 ;;		Unchanged: 0/0
  4858 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4859 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4860 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4861 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4862 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4863 ;;Total ram usage:        6 bytes
  4864 ;; Hardware stack levels used: 1
  4865 ;; Hardware stack levels required when called: 2
  4866 ;; This function calls:
  4867 ;;		___lwdiv
  4868 ;;		___wmul
  4869 ;; This function is called by:
  4870 ;;		_forward
  4871 ;;		_reverse
  4872 ;;		_stop
  4873 ;;		_left_45
  4874 ;;		_right_45
  4875 ;;		_space
  4876 ;; This function uses a non-reentrant model
  4877 ;;
  4878                           
  4879                           	psect	text27
  4880   0012D4                     __ptext27:
  4881                           	callstack 0
  4882   0012D4                     _setMotorPWM:
  4883                           	callstack 26
  4884   0012D4                     
  4885                           ;dc_motor.c: 78: void setMotorPWM(DC_motor *m);dc_motor.c: 79: {;dc_motor.c: 80:     uns
      +                          igned char posDuty, negDuty;;dc_motor.c: 82:     if(m->brakemode) {
  4886   0012D4  EE20 F002          	lfsr	2,2
  4887   0012D8  5010               	movf	setMotorPWM@m^0,w,c
  4888   0012DA  26D9               	addwf	fsr2l,f,c
  4889   0012DC  5011               	movf	(setMotorPWM@m+1)^0,w,c
  4890   0012DE  22DA               	addwfc	fsr2h,f,c
  4891   0012E0  50DF               	movf	indf2,w,c
  4892   0012E2  B4D8               	btfsc	status,2,c
  4893   0012E4  EF76  F009         	goto	u1331
  4894   0012E8  EF78  F009         	goto	u1330
  4895   0012EC                     u1331:
  4896   0012EC  EFAC  F009         	goto	l2283
  4897   0012F0                     u1330:
  4898   0012F0                     
  4899                           ;dc_motor.c: 83:         posDuty = m->PWMperiod - ((unsigned int)(m->power)*(m->PWMperio
      +                          d))/100;
  4900   0012F0  C010  FFD9         	movff	setMotorPWM@m,fsr2l
  4901   0012F4  C011  FFDA         	movff	setMotorPWM@m+1,fsr2h
  4902   0012F8  50DF               	movf	indf2,w,c
  4903   0012FA  6E12               	movwf	??_setMotorPWM^0,c
  4904   0012FC  5012               	movf	??_setMotorPWM^0,w,c
  4905   0012FE  6E03               	movwf	___wmul@multiplier^0,c
  4906   001300  6A04               	clrf	(___wmul@multiplier+1)^0,c
  4907   001302  EE20 F003          	lfsr	2,3
  4908   001306  5010               	movf	setMotorPWM@m^0,w,c
  4909   001308  26D9               	addwf	fsr2l,f,c
  4910   00130A  5011               	movf	(setMotorPWM@m+1)^0,w,c
  4911   00130C  22DA               	addwfc	fsr2h,f,c
  4912   00130E  CFDE F005          	movff	postinc2,___wmul@multiplicand
  4913   001312  CFDD F006          	movff	postdec2,___wmul@multiplicand+1
  4914   001316  EC41  F011         	call	___wmul	;wreg free
  4915   00131A  C003  F009         	movff	?___wmul,___lwdiv@dividend
  4916   00131E  C004  F00A         	movff	?___wmul+1,___lwdiv@dividend+1
  4917   001322  0E00               	movlw	0
  4918   001324  6E0C               	movwf	(___lwdiv@divisor+1)^0,c
  4919   001326  0E64               	movlw	100
  4920   001328  6E0B               	movwf	___lwdiv@divisor^0,c
  4921   00132A  EC18  F00F         	call	___lwdiv	;wreg free
  4922   00132E  EE20 F003          	lfsr	2,3
  4923   001332  5010               	movf	setMotorPWM@m^0,w,c
  4924   001334  26D9               	addwf	fsr2l,f,c
  4925   001336  5011               	movf	(setMotorPWM@m+1)^0,w,c
  4926   001338  22DA               	addwfc	fsr2h,f,c
  4927   00133A  50DF               	movf	indf2,w,c
  4928   00133C  6E13               	movwf	(??_setMotorPWM+1)^0,c
  4929   00133E  5009               	movf	?___lwdiv^0,w,c
  4930   001340  5C13               	subwf	(??_setMotorPWM+1)^0,w,c
  4931   001342  6E14               	movwf	setMotorPWM@posDuty^0,c
  4932   001344                     
  4933                           ;dc_motor.c: 84:         negDuty = m->PWMperiod;
  4934   001344  EE20 F003          	lfsr	2,3
  4935   001348  5010               	movf	setMotorPWM@m^0,w,c
  4936   00134A  26D9               	addwf	fsr2l,f,c
  4937   00134C  5011               	movf	(setMotorPWM@m+1)^0,w,c
  4938   00134E  22DA               	addwfc	fsr2h,f,c
  4939   001350  50DF               	movf	indf2,w,c
  4940   001352  6E15               	movwf	setMotorPWM@negDuty^0,c
  4941                           
  4942                           ;dc_motor.c: 85:     }
  4943   001354  EFCF  F009         	goto	l2287
  4944   001358                     l2283:
  4945                           
  4946                           ;dc_motor.c: 87:         posDuty=0;
  4947   001358  0E00               	movlw	0
  4948   00135A  6E14               	movwf	setMotorPWM@posDuty^0,c
  4949   00135C                     
  4950                           ;dc_motor.c: 88:   negDuty=((unsigned int)(m->power)*(m->PWMperiod))/100;
  4951   00135C  C010  FFD9         	movff	setMotorPWM@m,fsr2l
  4952   001360  C011  FFDA         	movff	setMotorPWM@m+1,fsr2h
  4953   001364  50DF               	movf	indf2,w,c
  4954   001366  6E12               	movwf	??_setMotorPWM^0,c
  4955   001368  5012               	movf	??_setMotorPWM^0,w,c
  4956   00136A  6E03               	movwf	___wmul@multiplier^0,c
  4957   00136C  6A04               	clrf	(___wmul@multiplier+1)^0,c
  4958   00136E  EE20 F003          	lfsr	2,3
  4959   001372  5010               	movf	setMotorPWM@m^0,w,c
  4960   001374  26D9               	addwf	fsr2l,f,c
  4961   001376  5011               	movf	(setMotorPWM@m+1)^0,w,c
  4962   001378  22DA               	addwfc	fsr2h,f,c
  4963   00137A  CFDE F005          	movff	postinc2,___wmul@multiplicand
  4964   00137E  CFDD F006          	movff	postdec2,___wmul@multiplicand+1
  4965   001382  EC41  F011         	call	___wmul	;wreg free
  4966   001386  C003  F009         	movff	?___wmul,___lwdiv@dividend
  4967   00138A  C004  F00A         	movff	?___wmul+1,___lwdiv@dividend+1
  4968   00138E  0E00               	movlw	0
  4969   001390  6E0C               	movwf	(___lwdiv@divisor+1)^0,c
  4970   001392  0E64               	movlw	100
  4971   001394  6E0B               	movwf	___lwdiv@divisor^0,c
  4972   001396  EC18  F00F         	call	___lwdiv	;wreg free
  4973   00139A  5009               	movf	?___lwdiv^0,w,c
  4974   00139C  6E15               	movwf	setMotorPWM@negDuty^0,c
  4975   00139E                     l2287:
  4976                           
  4977                           ;dc_motor.c: 91:     if (m->direction) {
  4978   00139E  EE20 F001          	lfsr	2,1
  4979   0013A2  5010               	movf	setMotorPWM@m^0,w,c
  4980   0013A4  26D9               	addwf	fsr2l,f,c
  4981   0013A6  5011               	movf	(setMotorPWM@m+1)^0,w,c
  4982   0013A8  22DA               	addwfc	fsr2h,f,c
  4983   0013AA  50DF               	movf	indf2,w,c
  4984   0013AC  B4D8               	btfsc	status,2,c
  4985   0013AE  EFDB  F009         	goto	u1341
  4986   0013B2  EFDD  F009         	goto	u1340
  4987   0013B6                     u1341:
  4988   0013B6  EFFF  F009         	goto	l2291
  4989   0013BA                     u1340:
  4990   0013BA                     
  4991                           ;dc_motor.c: 92:         *(m->posDutyHighByte)= posDuty;
  4992   0013BA  EE20 F005          	lfsr	2,5
  4993   0013BE  5010               	movf	setMotorPWM@m^0,w,c
  4994   0013C0  26D9               	addwf	fsr2l,f,c
  4995   0013C2  5011               	movf	(setMotorPWM@m+1)^0,w,c
  4996   0013C4  22DA               	addwfc	fsr2h,f,c
  4997   0013C6  CFDE F012          	movff	postinc2,??_setMotorPWM
  4998   0013CA  CFDD F013          	movff	postdec2,??_setMotorPWM+1
  4999   0013CE  C012  FFD9         	movff	??_setMotorPWM,fsr2l
  5000   0013D2  C013  FFDA         	movff	??_setMotorPWM+1,fsr2h
  5001   0013D6  C014  FFDF         	movff	setMotorPWM@posDuty,indf2
  5002                           
  5003                           ;dc_motor.c: 93:         *(m->negDutyHighByte)= negDuty;
  5004   0013DA  EE20 F007          	lfsr	2,7
  5005   0013DE  5010               	movf	setMotorPWM@m^0,w,c
  5006   0013E0  26D9               	addwf	fsr2l,f,c
  5007   0013E2  5011               	movf	(setMotorPWM@m+1)^0,w,c
  5008   0013E4  22DA               	addwfc	fsr2h,f,c
  5009   0013E6  CFDE F012          	movff	postinc2,??_setMotorPWM
  5010   0013EA  CFDD F013          	movff	postdec2,??_setMotorPWM+1
  5011   0013EE  C012  FFD9         	movff	??_setMotorPWM,fsr2l
  5012   0013F2  C013  FFDA         	movff	??_setMotorPWM+1,fsr2h
  5013   0013F6  C015  FFDF         	movff	setMotorPWM@negDuty,indf2
  5014                           
  5015                           ;dc_motor.c: 94:     } else {
  5016   0013FA  EF1F  F00A         	goto	l277
  5017   0013FE                     l2291:
  5018                           
  5019                           ;dc_motor.c: 95:         *(m->posDutyHighByte)= negDuty;
  5020   0013FE  EE20 F005          	lfsr	2,5
  5021   001402  5010               	movf	setMotorPWM@m^0,w,c
  5022   001404  26D9               	addwf	fsr2l,f,c
  5023   001406  5011               	movf	(setMotorPWM@m+1)^0,w,c
  5024   001408  22DA               	addwfc	fsr2h,f,c
  5025   00140A  CFDE F012          	movff	postinc2,??_setMotorPWM
  5026   00140E  CFDD F013          	movff	postdec2,??_setMotorPWM+1
  5027   001412  C012  FFD9         	movff	??_setMotorPWM,fsr2l
  5028   001416  C013  FFDA         	movff	??_setMotorPWM+1,fsr2h
  5029   00141A  C015  FFDF         	movff	setMotorPWM@negDuty,indf2
  5030                           
  5031                           ;dc_motor.c: 96:         *(m->negDutyHighByte)= posDuty;
  5032   00141E  EE20 F007          	lfsr	2,7
  5033   001422  5010               	movf	setMotorPWM@m^0,w,c
  5034   001424  26D9               	addwf	fsr2l,f,c
  5035   001426  5011               	movf	(setMotorPWM@m+1)^0,w,c
  5036   001428  22DA               	addwfc	fsr2h,f,c
  5037   00142A  CFDE F012          	movff	postinc2,??_setMotorPWM
  5038   00142E  CFDD F013          	movff	postdec2,??_setMotorPWM+1
  5039   001432  C012  FFD9         	movff	??_setMotorPWM,fsr2l
  5040   001436  C013  FFDA         	movff	??_setMotorPWM+1,fsr2h
  5041   00143A  C014  FFDF         	movff	setMotorPWM@posDuty,indf2
  5042   00143E                     l277:
  5043   00143E  0012               	return		;funcret
  5044   001440                     __end_of_setMotorPWM:
  5045                           	callstack 0
  5046                           
  5047 ;; *************** function ___wmul *****************
  5048 ;; Defined at:
  5049 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\Umul16.c"
  5050 ;; Parameters:    Size  Location     Type
  5051 ;;  multiplier      2    2[COMRAM] unsigned int 
  5052 ;;  multiplicand    2    4[COMRAM] unsigned int 
  5053 ;; Auto vars:     Size  Location     Type
  5054 ;;  product         2    6[COMRAM] unsigned int 
  5055 ;; Return value:  Size  Location     Type
  5056 ;;                  2    2[COMRAM] unsigned int 
  5057 ;; Registers used:
  5058 ;;		wreg, status,2, status,0, prodl, prodh
  5059 ;; Tracked objects:
  5060 ;;		On entry : 0/0
  5061 ;;		On exit  : 0/0
  5062 ;;		Unchanged: 0/0
  5063 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5064 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5065 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5066 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5067 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5068 ;;Total ram usage:        6 bytes
  5069 ;; Hardware stack levels used: 1
  5070 ;; Hardware stack levels required when called: 1
  5071 ;; This function calls:
  5072 ;;		Nothing
  5073 ;; This function is called by:
  5074 ;;		_setMotorPWM
  5075 ;; This function uses a non-reentrant model
  5076 ;;
  5077                           
  5078                           	psect	text28
  5079   002282                     __ptext28:
  5080                           	callstack 0
  5081   002282                     ___wmul:
  5082                           	callstack 26
  5083   002282  5003               	movf	___wmul@multiplier^0,w,c
  5084   002284  0205               	mulwf	___wmul@multiplicand^0,c
  5085   002286  CFF3 F007          	movff	prodl,___wmul@product
  5086   00228A  CFF4 F008          	movff	prodh,___wmul@product+1
  5087   00228E  5003               	movf	___wmul@multiplier^0,w,c
  5088   002290  0206               	mulwf	(___wmul@multiplicand+1)^0,c
  5089   002292  50F3               	movf	243,w,c
  5090   002294  2608               	addwf	(___wmul@product+1)^0,f,c
  5091   002296  5004               	movf	(___wmul@multiplier+1)^0,w,c
  5092   002298  0205               	mulwf	___wmul@multiplicand^0,c
  5093   00229A  50F3               	movf	243,w,c
  5094   00229C  2608               	addwf	(___wmul@product+1)^0,f,c
  5095   00229E  C007  F003         	movff	___wmul@product,?___wmul
  5096   0022A2  C008  F004         	movff	___wmul@product+1,?___wmul+1
  5097   0022A6  0012               	return		;funcret
  5098   0022A8                     __end_of___wmul:
  5099                           	callstack 0
  5100                           
  5101 ;; *************** function ___lwdiv *****************
  5102 ;; Defined at:
  5103 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\lwdiv.c"
  5104 ;; Parameters:    Size  Location     Type
  5105 ;;  dividend        2    8[COMRAM] unsigned int 
  5106 ;;  divisor         2   10[COMRAM] unsigned int 
  5107 ;; Auto vars:     Size  Location     Type
  5108 ;;  quotient        2   12[COMRAM] unsigned int 
  5109 ;;  counter         1   14[COMRAM] unsigned char 
  5110 ;; Return value:  Size  Location     Type
  5111 ;;                  2    8[COMRAM] unsigned int 
  5112 ;; Registers used:
  5113 ;;		wreg, status,2, status,0
  5114 ;; Tracked objects:
  5115 ;;		On entry : 0/0
  5116 ;;		On exit  : 0/0
  5117 ;;		Unchanged: 0/0
  5118 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5119 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5120 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5121 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5122 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5123 ;;Total ram usage:        7 bytes
  5124 ;; Hardware stack levels used: 1
  5125 ;; Hardware stack levels required when called: 1
  5126 ;; This function calls:
  5127 ;;		Nothing
  5128 ;; This function is called by:
  5129 ;;		_setMotorPWM
  5130 ;; This function uses a non-reentrant model
  5131 ;;
  5132                           
  5133                           	psect	text29
  5134   001E30                     __ptext29:
  5135                           	callstack 0
  5136   001E30                     ___lwdiv:
  5137                           	callstack 26
  5138   001E30  0E00               	movlw	0
  5139   001E32  6E0E               	movwf	(___lwdiv@quotient+1)^0,c
  5140   001E34  0E00               	movlw	0
  5141   001E36  6E0D               	movwf	___lwdiv@quotient^0,c
  5142   001E38  500B               	movf	___lwdiv@divisor^0,w,c
  5143   001E3A  100C               	iorwf	(___lwdiv@divisor+1)^0,w,c
  5144   001E3C  B4D8               	btfsc	status,2,c
  5145   001E3E  EF23  F00F         	goto	u1301
  5146   001E42  EF25  F00F         	goto	u1300
  5147   001E46                     u1301:
  5148   001E46  EF4D  F00F         	goto	l1077
  5149   001E4A                     u1300:
  5150   001E4A  0E01               	movlw	1
  5151   001E4C  6E0F               	movwf	___lwdiv@counter^0,c
  5152   001E4E  EF2D  F00F         	goto	l2263
  5153   001E52                     l2261:
  5154   001E52  90D8               	bcf	status,0,c
  5155   001E54  360B               	rlcf	___lwdiv@divisor^0,f,c
  5156   001E56  360C               	rlcf	(___lwdiv@divisor+1)^0,f,c
  5157   001E58  2A0F               	incf	___lwdiv@counter^0,f,c
  5158   001E5A                     l2263:
  5159   001E5A  AE0C               	btfss	(___lwdiv@divisor+1)^0,7,c
  5160   001E5C  EF32  F00F         	goto	u1311
  5161   001E60  EF34  F00F         	goto	u1310
  5162   001E64                     u1311:
  5163   001E64  EF29  F00F         	goto	l2261
  5164   001E68                     u1310:
  5165   001E68                     l2265:
  5166   001E68  90D8               	bcf	status,0,c
  5167   001E6A  360D               	rlcf	___lwdiv@quotient^0,f,c
  5168   001E6C  360E               	rlcf	(___lwdiv@quotient+1)^0,f,c
  5169   001E6E  500B               	movf	___lwdiv@divisor^0,w,c
  5170   001E70  5C09               	subwf	___lwdiv@dividend^0,w,c
  5171   001E72  500C               	movf	(___lwdiv@divisor+1)^0,w,c
  5172   001E74  580A               	subwfb	(___lwdiv@dividend+1)^0,w,c
  5173   001E76  A0D8               	btfss	status,0,c
  5174   001E78  EF40  F00F         	goto	u1321
  5175   001E7C  EF42  F00F         	goto	u1320
  5176   001E80                     u1321:
  5177   001E80  EF47  F00F         	goto	l2273
  5178   001E84                     u1320:
  5179   001E84  500B               	movf	___lwdiv@divisor^0,w,c
  5180   001E86  5E09               	subwf	___lwdiv@dividend^0,f,c
  5181   001E88  500C               	movf	(___lwdiv@divisor+1)^0,w,c
  5182   001E8A  5A0A               	subwfb	(___lwdiv@dividend+1)^0,f,c
  5183   001E8C  800D               	bsf	___lwdiv@quotient^0,0,c
  5184   001E8E                     l2273:
  5185   001E8E  90D8               	bcf	status,0,c
  5186   001E90  320C               	rrcf	(___lwdiv@divisor+1)^0,f,c
  5187   001E92  320B               	rrcf	___lwdiv@divisor^0,f,c
  5188   001E94  2E0F               	decfsz	___lwdiv@counter^0,f,c
  5189   001E96  EF34  F00F         	goto	l2265
  5190   001E9A                     l1077:
  5191   001E9A  C00D  F009         	movff	___lwdiv@quotient,?___lwdiv
  5192   001E9E  C00E  F00A         	movff	___lwdiv@quotient+1,?___lwdiv+1
  5193   001EA2  0012               	return		;funcret
  5194   001EA4                     __end_of___lwdiv:
  5195                           	callstack 0
  5196                           
  5197 ;; *************** function _custom_delay *****************
  5198 ;; Defined at:
  5199 ;;		line 37 in file "calibration.c"
  5200 ;; Parameters:    Size  Location     Type
  5201 ;;  temp            2    2[COMRAM] int 
  5202 ;; Auto vars:     Size  Location     Type
  5203 ;;  i               2    5[COMRAM] int 
  5204 ;; Return value:  Size  Location     Type
  5205 ;;                  1    wreg      void 
  5206 ;; Registers used:
  5207 ;;		wreg, status,2, status,0
  5208 ;; Tracked objects:
  5209 ;;		On entry : 0/0
  5210 ;;		On exit  : 0/0
  5211 ;;		Unchanged: 0/0
  5212 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5213 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5214 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5215 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5216 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5217 ;;Total ram usage:        5 bytes
  5218 ;; Hardware stack levels used: 1
  5219 ;; Hardware stack levels required when called: 1
  5220 ;; This function calls:
  5221 ;;		Nothing
  5222 ;; This function is called by:
  5223 ;;		_left_45
  5224 ;;		_right_45
  5225 ;; This function uses a non-reentrant model
  5226 ;;
  5227                           
  5228                           	psect	text30
  5229   0021BC                     __ptext30:
  5230                           	callstack 0
  5231   0021BC                     _custom_delay:
  5232                           	callstack 25
  5233   0021BC                     
  5234                           ;calibration.c: 38: int i;;calibration.c: 39: for (i = 0; i < temp; i++){_delay((unsigne
      +                          d long)((1)*(64000000/4000.0)));}
  5235   0021BC  0E00               	movlw	0
  5236   0021BE  6E07               	movwf	(custom_delay@i+1)^0,c
  5237   0021C0  0E00               	movlw	0
  5238   0021C2  6E06               	movwf	custom_delay@i^0,c
  5239   0021C4  EFEE  F010         	goto	l507
  5240   0021C8                     l2325:
  5241   0021C8  0E15               	movlw	21
  5242   0021CA  6E05               	movwf	??_custom_delay^0,c
  5243   0021CC  0EC6               	movlw	198
  5244   0021CE                     u2887:
  5245   0021CE  2EE8               	decfsz	wreg,f,c
  5246   0021D0  D7FE               	bra	u2887
  5247   0021D2  2E05               	decfsz	??_custom_delay^0,f,c
  5248   0021D4  D7FC               	bra	u2887
  5249   0021D6  D000               	nop2	
  5250   0021D8  4A06               	infsnz	custom_delay@i^0,f,c
  5251   0021DA  2A07               	incf	(custom_delay@i+1)^0,f,c
  5252   0021DC                     l507:
  5253   0021DC  5003               	movf	custom_delay@temp^0,w,c
  5254   0021DE  5C06               	subwf	custom_delay@i^0,w,c
  5255   0021E0  5007               	movf	(custom_delay@i+1)^0,w,c
  5256   0021E2  0A80               	xorlw	128
  5257   0021E4  6E05               	movwf	??_custom_delay^0,c
  5258   0021E6  5004               	movf	(custom_delay@temp+1)^0,w,c
  5259   0021E8  0A80               	xorlw	128
  5260   0021EA  5805               	subwfb	??_custom_delay^0,w,c
  5261   0021EC  A0D8               	btfss	status,0,c
  5262   0021EE  EFFB  F010         	goto	u1361
  5263   0021F2  EFFD  F010         	goto	u1360
  5264   0021F6                     u1361:
  5265   0021F6  EFE4  F010         	goto	l2325
  5266   0021FA                     u1360:
  5267   0021FA  0012               	return		;funcret
  5268   0021FC                     __end_of_custom_delay:
  5269                           	callstack 0
  5270                           
  5271 ;; *************** function ___flge *****************
  5272 ;; Defined at:
  5273 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\flge.c"
  5274 ;; Parameters:    Size  Location     Type
  5275 ;;  ff1             4    2[COMRAM] void 
  5276 ;;  ff2             4    6[COMRAM] void 
  5277 ;; Auto vars:     Size  Location     Type
  5278 ;;		None
  5279 ;; Return value:  Size  Location     Type
  5280 ;;		None               void
  5281 ;; Registers used:
  5282 ;;		wreg, status,2, status,0
  5283 ;; Tracked objects:
  5284 ;;		On entry : 0/0
  5285 ;;		On exit  : 0/0
  5286 ;;		Unchanged: 0/0
  5287 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5288 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5289 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5290 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5291 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5292 ;;Total ram usage:       12 bytes
  5293 ;; Hardware stack levels used: 1
  5294 ;; Hardware stack levels required when called: 1
  5295 ;; This function calls:
  5296 ;;		Nothing
  5297 ;; This function is called by:
  5298 ;;		_buggy_color_response
  5299 ;; This function uses a non-reentrant model
  5300 ;;
  5301                           
  5302                           	psect	text31
  5303   0017F2                     __ptext31:
  5304                           	callstack 0
  5305   0017F2                     ___flge:
  5306                           	callstack 28
  5307   0017F2  0E00               	movlw	0
  5308   0017F4  1403               	andwf	___flge@ff1^0,w,c
  5309   0017F6  6E0B               	movwf	??___flge^0,c
  5310   0017F8  0E00               	movlw	0
  5311   0017FA  1404               	andwf	(___flge@ff1+1)^0,w,c
  5312   0017FC  6E0C               	movwf	(??___flge+1)^0,c
  5313   0017FE  0E80               	movlw	128
  5314   001800  1405               	andwf	(___flge@ff1+2)^0,w,c
  5315   001802  6E0D               	movwf	(??___flge+2)^0,c
  5316   001804  0E7F               	movlw	127
  5317   001806  1406               	andwf	(___flge@ff1+3)^0,w,c
  5318   001808  6E0E               	movwf	(??___flge+3)^0,c
  5319   00180A  500B               	movf	??___flge^0,w,c
  5320   00180C  100C               	iorwf	(??___flge+1)^0,w,c
  5321   00180E  100D               	iorwf	(??___flge+2)^0,w,c
  5322   001810  100E               	iorwf	(??___flge+3)^0,w,c
  5323   001812  A4D8               	btfss	status,2,c
  5324   001814  EF0E  F00C         	goto	u2111
  5325   001818  EF10  F00C         	goto	u2110
  5326   00181C                     u2111:
  5327   00181C  EF18  F00C         	goto	l2969
  5328   001820                     u2110:
  5329   001820  0E00               	movlw	0
  5330   001822  6E03               	movwf	___flge@ff1^0,c
  5331   001824  0E00               	movlw	0
  5332   001826  6E04               	movwf	(___flge@ff1+1)^0,c
  5333   001828  0E00               	movlw	0
  5334   00182A  6E05               	movwf	(___flge@ff1+2)^0,c
  5335   00182C  0E00               	movlw	0
  5336   00182E  6E06               	movwf	(___flge@ff1+3)^0,c
  5337   001830                     l2969:
  5338   001830  0E00               	movlw	0
  5339   001832  1407               	andwf	___flge@ff2^0,w,c
  5340   001834  6E0B               	movwf	??___flge^0,c
  5341   001836  0E00               	movlw	0
  5342   001838  1408               	andwf	(___flge@ff2+1)^0,w,c
  5343   00183A  6E0C               	movwf	(??___flge+1)^0,c
  5344   00183C  0E80               	movlw	128
  5345   00183E  1409               	andwf	(___flge@ff2+2)^0,w,c
  5346   001840  6E0D               	movwf	(??___flge+2)^0,c
  5347   001842  0E7F               	movlw	127
  5348   001844  140A               	andwf	(___flge@ff2+3)^0,w,c
  5349   001846  6E0E               	movwf	(??___flge+3)^0,c
  5350   001848  500B               	movf	??___flge^0,w,c
  5351   00184A  100C               	iorwf	(??___flge+1)^0,w,c
  5352   00184C  100D               	iorwf	(??___flge+2)^0,w,c
  5353   00184E  100E               	iorwf	(??___flge+3)^0,w,c
  5354   001850  A4D8               	btfss	status,2,c
  5355   001852  EF2D  F00C         	goto	u2121
  5356   001856  EF2F  F00C         	goto	u2120
  5357   00185A                     u2121:
  5358   00185A  EF37  F00C         	goto	l2973
  5359   00185E                     u2120:
  5360   00185E  0E00               	movlw	0
  5361   001860  6E07               	movwf	___flge@ff2^0,c
  5362   001862  0E00               	movlw	0
  5363   001864  6E08               	movwf	(___flge@ff2+1)^0,c
  5364   001866  0E00               	movlw	0
  5365   001868  6E09               	movwf	(___flge@ff2+2)^0,c
  5366   00186A  0E00               	movlw	0
  5367   00186C  6E0A               	movwf	(___flge@ff2+3)^0,c
  5368   00186E                     l2973:
  5369   00186E  AE06               	btfss	(___flge@ff1+3)^0,7,c
  5370   001870  EF3C  F00C         	goto	u2131
  5371   001874  EF3E  F00C         	goto	u2130
  5372   001878                     u2131:
  5373   001878  EF47  F00C         	goto	l2977
  5374   00187C                     u2130:
  5375   00187C  6C03               	negf	___flge@ff1^0,c
  5376   00187E  1E04               	comf	(___flge@ff1+1)^0,f,c
  5377   001880  B0D8               	btfsc	status,0,c
  5378   001882  2A04               	incf	(___flge@ff1+1)^0,f,c
  5379   001884  1E05               	comf	(___flge@ff1+2)^0,f,c
  5380   001886  B0D8               	btfsc	status,0,c
  5381   001888  2A05               	incf	(___flge@ff1+2)^0,f,c
  5382   00188A  0E80               	movlw	128
  5383   00188C  5606               	subfwb	(___flge@ff1+3)^0,f,c
  5384   00188E                     l2977:
  5385   00188E  AE0A               	btfss	(___flge@ff2+3)^0,7,c
  5386   001890  EF4C  F00C         	goto	u2141
  5387   001894  EF4E  F00C         	goto	u2140
  5388   001898                     u2141:
  5389   001898  EF57  F00C         	goto	l851
  5390   00189C                     u2140:
  5391   00189C  6C07               	negf	___flge@ff2^0,c
  5392   00189E  1E08               	comf	(___flge@ff2+1)^0,f,c
  5393   0018A0  B0D8               	btfsc	status,0,c
  5394   0018A2  2A08               	incf	(___flge@ff2+1)^0,f,c
  5395   0018A4  1E09               	comf	(___flge@ff2+2)^0,f,c
  5396   0018A6  B0D8               	btfsc	status,0,c
  5397   0018A8  2A09               	incf	(___flge@ff2+2)^0,f,c
  5398   0018AA  0E80               	movlw	128
  5399   0018AC  560A               	subfwb	(___flge@ff2+3)^0,f,c
  5400   0018AE                     l851:
  5401   0018AE  0E00               	movlw	0
  5402   0018B0  1A03               	xorwf	___flge@ff1^0,f,c
  5403   0018B2  0E00               	movlw	0
  5404   0018B4  1A04               	xorwf	(___flge@ff1+1)^0,f,c
  5405   0018B6  0E00               	movlw	0
  5406   0018B8  1A05               	xorwf	(___flge@ff1+2)^0,f,c
  5407   0018BA  0E80               	movlw	128
  5408   0018BC  1A06               	xorwf	(___flge@ff1+3)^0,f,c
  5409   0018BE  0E00               	movlw	0
  5410   0018C0  1A07               	xorwf	___flge@ff2^0,f,c
  5411   0018C2  0E00               	movlw	0
  5412   0018C4  1A08               	xorwf	(___flge@ff2+1)^0,f,c
  5413   0018C6  0E00               	movlw	0
  5414   0018C8  1A09               	xorwf	(___flge@ff2+2)^0,f,c
  5415   0018CA  0E80               	movlw	128
  5416   0018CC  1A0A               	xorwf	(___flge@ff2+3)^0,f,c
  5417   0018CE  5007               	movf	___flge@ff2^0,w,c
  5418   0018D0  5C03               	subwf	___flge@ff1^0,w,c
  5419   0018D2  5008               	movf	(___flge@ff2+1)^0,w,c
  5420   0018D4  5804               	subwfb	(___flge@ff1+1)^0,w,c
  5421   0018D6  5009               	movf	(___flge@ff2+2)^0,w,c
  5422   0018D8  5805               	subwfb	(___flge@ff1+2)^0,w,c
  5423   0018DA  500A               	movf	(___flge@ff2+3)^0,w,c
  5424   0018DC  5806               	subwfb	(___flge@ff1+3)^0,w,c
  5425   0018DE  B0D8               	btfsc	status,0,c
  5426   0018E0  EF74  F00C         	goto	u2151
  5427   0018E4  EF76  F00C         	goto	u2150
  5428   0018E8                     u2151:
  5429   0018E8  EF79  F00C         	goto	l2983
  5430   0018EC                     u2150:
  5431   0018EC  90D8               	bcf	status,0,c
  5432   0018EE  EF7A  F00C         	goto	l856
  5433   0018F2                     l2983:
  5434   0018F2  80D8               	bsf	status,0,c
  5435   0018F4                     l856:
  5436   0018F4  0012               	return		;funcret
  5437   0018F6                     __end_of___flge:
  5438                           	callstack 0
  5439                           
  5440 ;; *************** function _READcolor *****************
  5441 ;; Defined at:
  5442 ;;		line 112 in file "color.c"
  5443 ;; Parameters:    Size  Location     Type
  5444 ;;  c               2   41[COMRAM] PTR struct colors
  5445 ;;		 -> color(20), 
  5446 ;; Auto vars:     Size  Location     Type
  5447 ;;		None
  5448 ;; Return value:  Size  Location     Type
  5449 ;;                  1    wreg      void 
  5450 ;; Registers used:
  5451 ;;		wreg, status,2, status,0, cstack
  5452 ;; Tracked objects:
  5453 ;;		On entry : 0/0
  5454 ;;		On exit  : 0/0
  5455 ;;		Unchanged: 0/0
  5456 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5457 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5458 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5459 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5460 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5461 ;;Total ram usage:        2 bytes
  5462 ;; Hardware stack levels used: 1
  5463 ;; Hardware stack levels required when called: 4
  5464 ;; This function calls:
  5465 ;;		___fldiv
  5466 ;;		___xxtofl
  5467 ;;		_color_read_Blue
  5468 ;;		_color_read_Clear
  5469 ;;		_color_read_Green
  5470 ;;		_color_read_Red
  5471 ;; This function is called by:
  5472 ;;		_buggy_color_response
  5473 ;; This function uses a non-reentrant model
  5474 ;;
  5475                           
  5476                           	psect	text32
  5477   0016B8                     __ptext32:
  5478                           	callstack 0
  5479   0016B8                     _READcolor:
  5480                           	callstack 25
  5481   0016B8                     
  5482                           ;color.c: 114:     color.R = color_read_Red();
  5483   0016B8  ECB6  F00F         	call	_color_read_Red	;wreg free
  5484   0016BC  C007  F044         	movff	?_color_read_Red,_color
  5485   0016C0  C008  F045         	movff	?_color_read_Red+1,_color+1
  5486                           
  5487                           ;color.c: 115:     color.B = color_read_Blue();
  5488   0016C4  EC2E  F010         	call	_color_read_Blue	;wreg free
  5489   0016C8  C007  F046         	movff	?_color_read_Blue,_color+2
  5490   0016CC  C008  F047         	movff	?_color_read_Blue+1,_color+3
  5491                           
  5492                           ;color.c: 116:     color.G = color_read_Green();
  5493   0016D0  ECDE  F00F         	call	_color_read_Green	;wreg free
  5494   0016D4  C007  F048         	movff	?_color_read_Green,_color+4
  5495   0016D8  C008  F049         	movff	?_color_read_Green+1,_color+5
  5496                           
  5497                           ;color.c: 117:     color.C = color_read_Clear();
  5498   0016DC  EC06  F010         	call	_color_read_Clear	;wreg free
  5499   0016E0  C007  F04A         	movff	?_color_read_Clear,_color+6
  5500   0016E4  C008  F04B         	movff	?_color_read_Clear+1,_color+7
  5501                           
  5502                           ;color.c: 119:     color.R_norm = (float)color.R / (float)color.C;
  5503   0016E8  C044  F003         	movff	_color,___xxtofl@val
  5504   0016EC  C045  F004         	movff	_color+1,___xxtofl@val+1
  5505   0016F0  6A05               	clrf	(___xxtofl@val+2)^0,c
  5506   0016F2  6A06               	clrf	(___xxtofl@val+3)^0,c
  5507   0016F4  0E00               	movlw	0
  5508   0016F6  ECD5  F007         	call	___xxtofl
  5509   0016FA  C003  F011         	movff	?___xxtofl,___fldiv@b
  5510   0016FE  C004  F012         	movff	?___xxtofl+1,___fldiv@b+1
  5511   001702  C005  F013         	movff	?___xxtofl+2,___fldiv@b+2
  5512   001706  C006  F014         	movff	?___xxtofl+3,___fldiv@b+3
  5513   00170A  C04A  F003         	movff	_color+6,___xxtofl@val
  5514   00170E  C04B  F004         	movff	_color+7,___xxtofl@val+1
  5515   001712  6A05               	clrf	(___xxtofl@val+2)^0,c
  5516   001714  6A06               	clrf	(___xxtofl@val+3)^0,c
  5517   001716  0E00               	movlw	0
  5518   001718  ECD5  F007         	call	___xxtofl
  5519   00171C  C003  F015         	movff	?___xxtofl,___fldiv@a
  5520   001720  C004  F016         	movff	?___xxtofl+1,___fldiv@a+1
  5521   001724  C005  F017         	movff	?___xxtofl+2,___fldiv@a+2
  5522   001728  C006  F018         	movff	?___xxtofl+3,___fldiv@a+3
  5523   00172C  EC94  F003         	call	___fldiv	;wreg free
  5524   001730  C011  F04C         	movff	?___fldiv,_color+8
  5525   001734  C012  F04D         	movff	?___fldiv+1,_color+9
  5526   001738  C013  F04E         	movff	?___fldiv+2,_color+10
  5527   00173C  C014  F04F         	movff	?___fldiv+3,_color+11
  5528                           
  5529                           ;color.c: 120:     color.B_norm = (float)color.B / (float)color.C;
  5530   001740  C046  F003         	movff	_color+2,___xxtofl@val
  5531   001744  C047  F004         	movff	_color+3,___xxtofl@val+1
  5532   001748  6A05               	clrf	(___xxtofl@val+2)^0,c
  5533   00174A  6A06               	clrf	(___xxtofl@val+3)^0,c
  5534   00174C  0E00               	movlw	0
  5535   00174E  ECD5  F007         	call	___xxtofl
  5536   001752  C003  F011         	movff	?___xxtofl,___fldiv@b
  5537   001756  C004  F012         	movff	?___xxtofl+1,___fldiv@b+1
  5538   00175A  C005  F013         	movff	?___xxtofl+2,___fldiv@b+2
  5539   00175E  C006  F014         	movff	?___xxtofl+3,___fldiv@b+3
  5540   001762  C04A  F003         	movff	_color+6,___xxtofl@val
  5541   001766  C04B  F004         	movff	_color+7,___xxtofl@val+1
  5542   00176A  6A05               	clrf	(___xxtofl@val+2)^0,c
  5543   00176C  6A06               	clrf	(___xxtofl@val+3)^0,c
  5544   00176E  0E00               	movlw	0
  5545   001770  ECD5  F007         	call	___xxtofl
  5546   001774  C003  F015         	movff	?___xxtofl,___fldiv@a
  5547   001778  C004  F016         	movff	?___xxtofl+1,___fldiv@a+1
  5548   00177C  C005  F017         	movff	?___xxtofl+2,___fldiv@a+2
  5549   001780  C006  F018         	movff	?___xxtofl+3,___fldiv@a+3
  5550   001784  EC94  F003         	call	___fldiv	;wreg free
  5551   001788  C011  F050         	movff	?___fldiv,_color+12
  5552   00178C  C012  F051         	movff	?___fldiv+1,_color+13
  5553   001790  C013  F052         	movff	?___fldiv+2,_color+14
  5554   001794  C014  F053         	movff	?___fldiv+3,_color+15
  5555                           
  5556                           ;color.c: 121:     color.G_norm = (float)color.G / (float)color.C;
  5557   001798  C048  F003         	movff	_color+4,___xxtofl@val
  5558   00179C  C049  F004         	movff	_color+5,___xxtofl@val+1
  5559   0017A0  6A05               	clrf	(___xxtofl@val+2)^0,c
  5560   0017A2  6A06               	clrf	(___xxtofl@val+3)^0,c
  5561   0017A4  0E00               	movlw	0
  5562   0017A6  ECD5  F007         	call	___xxtofl
  5563   0017AA  C003  F011         	movff	?___xxtofl,___fldiv@b
  5564   0017AE  C004  F012         	movff	?___xxtofl+1,___fldiv@b+1
  5565   0017B2  C005  F013         	movff	?___xxtofl+2,___fldiv@b+2
  5566   0017B6  C006  F014         	movff	?___xxtofl+3,___fldiv@b+3
  5567   0017BA  C04A  F003         	movff	_color+6,___xxtofl@val
  5568   0017BE  C04B  F004         	movff	_color+7,___xxtofl@val+1
  5569   0017C2  6A05               	clrf	(___xxtofl@val+2)^0,c
  5570   0017C4  6A06               	clrf	(___xxtofl@val+3)^0,c
  5571   0017C6  0E00               	movlw	0
  5572   0017C8  ECD5  F007         	call	___xxtofl
  5573   0017CC  C003  F015         	movff	?___xxtofl,___fldiv@a
  5574   0017D0  C004  F016         	movff	?___xxtofl+1,___fldiv@a+1
  5575   0017D4  C005  F017         	movff	?___xxtofl+2,___fldiv@a+2
  5576   0017D8  C006  F018         	movff	?___xxtofl+3,___fldiv@a+3
  5577   0017DC  EC94  F003         	call	___fldiv	;wreg free
  5578   0017E0  C011  F054         	movff	?___fldiv,_color+16
  5579   0017E4  C012  F055         	movff	?___fldiv+1,_color+17
  5580   0017E8  C013  F056         	movff	?___fldiv+2,_color+18
  5581   0017EC  C014  F057         	movff	?___fldiv+3,_color+19
  5582   0017F0  0012               	return		;funcret
  5583   0017F2                     __end_of_READcolor:
  5584                           	callstack 0
  5585                           
  5586 ;; *************** function _color_read_Red *****************
  5587 ;; Defined at:
  5588 ;;		line 39 in file "color.c"
  5589 ;; Parameters:    Size  Location     Type
  5590 ;;		None
  5591 ;; Auto vars:     Size  Location     Type
  5592 ;;  tmp             2   11[COMRAM] unsigned int 
  5593 ;; Return value:  Size  Location     Type
  5594 ;;                  2    6[COMRAM] unsigned int 
  5595 ;; Registers used:
  5596 ;;		wreg, status,2, status,0, cstack
  5597 ;; Tracked objects:
  5598 ;;		On entry : 0/0
  5599 ;;		On exit  : 0/0
  5600 ;;		Unchanged: 0/0
  5601 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5602 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5603 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5604 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5605 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5606 ;;Total ram usage:        7 bytes
  5607 ;; Hardware stack levels used: 1
  5608 ;; Hardware stack levels required when called: 3
  5609 ;; This function calls:
  5610 ;;		_I2C_2_Master_Read
  5611 ;;		_I2C_2_Master_RepStart
  5612 ;;		_I2C_2_Master_Start
  5613 ;;		_I2C_2_Master_Stop
  5614 ;;		_I2C_2_Master_Write
  5615 ;; This function is called by:
  5616 ;;		_READcolor
  5617 ;; This function uses a non-reentrant model
  5618 ;;
  5619                           
  5620                           	psect	text33
  5621   001F6C                     __ptext33:
  5622                           	callstack 0
  5623   001F6C                     _color_read_Red:
  5624                           	callstack 25
  5625   001F6C                     
  5626                           ;color.c: 41:  unsigned int tmp;;color.c: 42:  I2C_2_Master_Start();
  5627   001F6C  ECC9  F011         	call	_I2C_2_Master_Start	;wreg free
  5628                           
  5629                           ;color.c: 43:  I2C_2_Master_Write(0x52 | 0x00);
  5630   001F70  0E52               	movlw	82
  5631   001F72  ECBE  F011         	call	_I2C_2_Master_Write
  5632                           
  5633                           ;color.c: 45:  I2C_2_Master_Write(0xA0 | 0x16);
  5634   001F76  0EB6               	movlw	182
  5635   001F78  ECBE  F011         	call	_I2C_2_Master_Write
  5636                           
  5637                           ;color.c: 46:  I2C_2_Master_RepStart();
  5638   001F7C  ECCE  F011         	call	_I2C_2_Master_RepStart	;wreg free
  5639                           
  5640                           ;color.c: 47:  I2C_2_Master_Write(0x52 | 0x01);
  5641   001F80  0E53               	movlw	83
  5642   001F82  ECBE  F011         	call	_I2C_2_Master_Write
  5643                           
  5644                           ;color.c: 48:  tmp=I2C_2_Master_Read(1);
  5645   001F86  0E01               	movlw	1
  5646   001F88  EC9D  F010         	call	_I2C_2_Master_Read
  5647   001F8C  6E09               	movwf	??_color_read_Red^0,c
  5648   001F8E  5009               	movf	??_color_read_Red^0,w,c
  5649   001F90  6E0C               	movwf	color_read_Red@tmp^0,c
  5650   001F92  6A0D               	clrf	(color_read_Red@tmp+1)^0,c
  5651                           
  5652                           ;color.c: 49:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  5653   001F94  0E00               	movlw	0
  5654   001F96  EC9D  F010         	call	_I2C_2_Master_Read
  5655   001F9A  6E09               	movwf	??_color_read_Red^0,c
  5656   001F9C  5009               	movf	??_color_read_Red^0,w,c
  5657   001F9E  6E0B               	movwf	(??_color_read_Red+2)^0,c
  5658   001FA0  6A0A               	clrf	(??_color_read_Red+1)^0,c
  5659   001FA2  500C               	movf	color_read_Red@tmp^0,w,c
  5660   001FA4  100A               	iorwf	(??_color_read_Red+1)^0,w,c
  5661   001FA6  6E0C               	movwf	color_read_Red@tmp^0,c
  5662   001FA8  500D               	movf	(color_read_Red@tmp+1)^0,w,c
  5663   001FAA  100B               	iorwf	(??_color_read_Red+2)^0,w,c
  5664   001FAC  6E0D               	movwf	(color_read_Red@tmp+1)^0,c
  5665                           
  5666                           ;color.c: 50:  I2C_2_Master_Stop();
  5667   001FAE  ECC4  F011         	call	_I2C_2_Master_Stop	;wreg free
  5668   001FB2                     
  5669                           ;color.c: 51:  return tmp;
  5670   001FB2  C00C  F007         	movff	color_read_Red@tmp,?_color_read_Red
  5671   001FB6  C00D  F008         	movff	color_read_Red@tmp+1,?_color_read_Red+1
  5672   001FBA  0012               	return		;funcret
  5673   001FBC                     __end_of_color_read_Red:
  5674                           	callstack 0
  5675                           
  5676 ;; *************** function _color_read_Green *****************
  5677 ;; Defined at:
  5678 ;;		line 75 in file "color.c"
  5679 ;; Parameters:    Size  Location     Type
  5680 ;;		None
  5681 ;; Auto vars:     Size  Location     Type
  5682 ;;  tmp             2   11[COMRAM] unsigned int 
  5683 ;; Return value:  Size  Location     Type
  5684 ;;                  2    6[COMRAM] unsigned int 
  5685 ;; Registers used:
  5686 ;;		wreg, status,2, status,0, cstack
  5687 ;; Tracked objects:
  5688 ;;		On entry : 0/0
  5689 ;;		On exit  : 0/0
  5690 ;;		Unchanged: 0/0
  5691 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5692 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5693 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5694 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5695 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5696 ;;Total ram usage:        7 bytes
  5697 ;; Hardware stack levels used: 1
  5698 ;; Hardware stack levels required when called: 3
  5699 ;; This function calls:
  5700 ;;		_I2C_2_Master_Read
  5701 ;;		_I2C_2_Master_RepStart
  5702 ;;		_I2C_2_Master_Start
  5703 ;;		_I2C_2_Master_Stop
  5704 ;;		_I2C_2_Master_Write
  5705 ;; This function is called by:
  5706 ;;		_READcolor
  5707 ;; This function uses a non-reentrant model
  5708 ;;
  5709                           
  5710                           	psect	text34
  5711   001FBC                     __ptext34:
  5712                           	callstack 0
  5713   001FBC                     _color_read_Green:
  5714                           	callstack 25
  5715   001FBC                     
  5716                           ;color.c: 77:  unsigned int tmp;;color.c: 78:  I2C_2_Master_Start();
  5717   001FBC  ECC9  F011         	call	_I2C_2_Master_Start	;wreg free
  5718                           
  5719                           ;color.c: 79:  I2C_2_Master_Write(0x52 | 0x00);
  5720   001FC0  0E52               	movlw	82
  5721   001FC2  ECBE  F011         	call	_I2C_2_Master_Write
  5722                           
  5723                           ;color.c: 81:  I2C_2_Master_Write(0xA0 | 0x18);
  5724   001FC6  0EB8               	movlw	184
  5725   001FC8  ECBE  F011         	call	_I2C_2_Master_Write
  5726                           
  5727                           ;color.c: 82:  I2C_2_Master_RepStart();
  5728   001FCC  ECCE  F011         	call	_I2C_2_Master_RepStart	;wreg free
  5729                           
  5730                           ;color.c: 83:  I2C_2_Master_Write(0x52 | 0x01);
  5731   001FD0  0E53               	movlw	83
  5732   001FD2  ECBE  F011         	call	_I2C_2_Master_Write
  5733                           
  5734                           ;color.c: 84:  tmp=I2C_2_Master_Read(1);
  5735   001FD6  0E01               	movlw	1
  5736   001FD8  EC9D  F010         	call	_I2C_2_Master_Read
  5737   001FDC  6E09               	movwf	??_color_read_Green^0,c
  5738   001FDE  5009               	movf	??_color_read_Green^0,w,c
  5739   001FE0  6E0C               	movwf	color_read_Green@tmp^0,c
  5740   001FE2  6A0D               	clrf	(color_read_Green@tmp+1)^0,c
  5741                           
  5742                           ;color.c: 85:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  5743   001FE4  0E00               	movlw	0
  5744   001FE6  EC9D  F010         	call	_I2C_2_Master_Read
  5745   001FEA  6E09               	movwf	??_color_read_Green^0,c
  5746   001FEC  5009               	movf	??_color_read_Green^0,w,c
  5747   001FEE  6E0B               	movwf	(??_color_read_Green+2)^0,c
  5748   001FF0  6A0A               	clrf	(??_color_read_Green+1)^0,c
  5749   001FF2  500C               	movf	color_read_Green@tmp^0,w,c
  5750   001FF4  100A               	iorwf	(??_color_read_Green+1)^0,w,c
  5751   001FF6  6E0C               	movwf	color_read_Green@tmp^0,c
  5752   001FF8  500D               	movf	(color_read_Green@tmp+1)^0,w,c
  5753   001FFA  100B               	iorwf	(??_color_read_Green+2)^0,w,c
  5754   001FFC  6E0D               	movwf	(color_read_Green@tmp+1)^0,c
  5755                           
  5756                           ;color.c: 86:  I2C_2_Master_Stop();
  5757   001FFE  ECC4  F011         	call	_I2C_2_Master_Stop	;wreg free
  5758   002002                     
  5759                           ;color.c: 87:  return tmp;
  5760   002002  C00C  F007         	movff	color_read_Green@tmp,?_color_read_Green
  5761   002006  C00D  F008         	movff	color_read_Green@tmp+1,?_color_read_Green+1
  5762   00200A  0012               	return		;funcret
  5763   00200C                     __end_of_color_read_Green:
  5764                           	callstack 0
  5765                           
  5766 ;; *************** function _color_read_Clear *****************
  5767 ;; Defined at:
  5768 ;;		line 93 in file "color.c"
  5769 ;; Parameters:    Size  Location     Type
  5770 ;;		None
  5771 ;; Auto vars:     Size  Location     Type
  5772 ;;  tmp             2   11[COMRAM] unsigned int 
  5773 ;; Return value:  Size  Location     Type
  5774 ;;                  2    6[COMRAM] unsigned int 
  5775 ;; Registers used:
  5776 ;;		wreg, status,2, status,0, cstack
  5777 ;; Tracked objects:
  5778 ;;		On entry : 0/0
  5779 ;;		On exit  : 0/0
  5780 ;;		Unchanged: 0/0
  5781 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5782 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5783 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5784 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5785 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5786 ;;Total ram usage:        7 bytes
  5787 ;; Hardware stack levels used: 1
  5788 ;; Hardware stack levels required when called: 3
  5789 ;; This function calls:
  5790 ;;		_I2C_2_Master_Read
  5791 ;;		_I2C_2_Master_RepStart
  5792 ;;		_I2C_2_Master_Start
  5793 ;;		_I2C_2_Master_Stop
  5794 ;;		_I2C_2_Master_Write
  5795 ;; This function is called by:
  5796 ;;		_READcolor
  5797 ;; This function uses a non-reentrant model
  5798 ;;
  5799                           
  5800                           	psect	text35
  5801   00200C                     __ptext35:
  5802                           	callstack 0
  5803   00200C                     _color_read_Clear:
  5804                           	callstack 25
  5805   00200C                     
  5806                           ;color.c: 95:  unsigned int tmp;;color.c: 96:  I2C_2_Master_Start();
  5807   00200C  ECC9  F011         	call	_I2C_2_Master_Start	;wreg free
  5808                           
  5809                           ;color.c: 97:  I2C_2_Master_Write(0x52 | 0x00);
  5810   002010  0E52               	movlw	82
  5811   002012  ECBE  F011         	call	_I2C_2_Master_Write
  5812                           
  5813                           ;color.c: 99:  I2C_2_Master_Write(0xA0 | 0x14);
  5814   002016  0EB4               	movlw	180
  5815   002018  ECBE  F011         	call	_I2C_2_Master_Write
  5816                           
  5817                           ;color.c: 100:  I2C_2_Master_RepStart();
  5818   00201C  ECCE  F011         	call	_I2C_2_Master_RepStart	;wreg free
  5819                           
  5820                           ;color.c: 101:  I2C_2_Master_Write(0x52 | 0x01);
  5821   002020  0E53               	movlw	83
  5822   002022  ECBE  F011         	call	_I2C_2_Master_Write
  5823                           
  5824                           ;color.c: 102:  tmp=I2C_2_Master_Read(1);
  5825   002026  0E01               	movlw	1
  5826   002028  EC9D  F010         	call	_I2C_2_Master_Read
  5827   00202C  6E09               	movwf	??_color_read_Clear^0,c
  5828   00202E  5009               	movf	??_color_read_Clear^0,w,c
  5829   002030  6E0C               	movwf	color_read_Clear@tmp^0,c
  5830   002032  6A0D               	clrf	(color_read_Clear@tmp+1)^0,c
  5831                           
  5832                           ;color.c: 103:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  5833   002034  0E00               	movlw	0
  5834   002036  EC9D  F010         	call	_I2C_2_Master_Read
  5835   00203A  6E09               	movwf	??_color_read_Clear^0,c
  5836   00203C  5009               	movf	??_color_read_Clear^0,w,c
  5837   00203E  6E0B               	movwf	(??_color_read_Clear+2)^0,c
  5838   002040  6A0A               	clrf	(??_color_read_Clear+1)^0,c
  5839   002042  500C               	movf	color_read_Clear@tmp^0,w,c
  5840   002044  100A               	iorwf	(??_color_read_Clear+1)^0,w,c
  5841   002046  6E0C               	movwf	color_read_Clear@tmp^0,c
  5842   002048  500D               	movf	(color_read_Clear@tmp+1)^0,w,c
  5843   00204A  100B               	iorwf	(??_color_read_Clear+2)^0,w,c
  5844   00204C  6E0D               	movwf	(color_read_Clear@tmp+1)^0,c
  5845                           
  5846                           ;color.c: 104:  I2C_2_Master_Stop();
  5847   00204E  ECC4  F011         	call	_I2C_2_Master_Stop	;wreg free
  5848   002052                     
  5849                           ;color.c: 105:  return tmp;
  5850   002052  C00C  F007         	movff	color_read_Clear@tmp,?_color_read_Clear
  5851   002056  C00D  F008         	movff	color_read_Clear@tmp+1,?_color_read_Clear+1
  5852   00205A  0012               	return		;funcret
  5853   00205C                     __end_of_color_read_Clear:
  5854                           	callstack 0
  5855                           
  5856 ;; *************** function _color_read_Blue *****************
  5857 ;; Defined at:
  5858 ;;		line 57 in file "color.c"
  5859 ;; Parameters:    Size  Location     Type
  5860 ;;		None
  5861 ;; Auto vars:     Size  Location     Type
  5862 ;;  tmp             2   11[COMRAM] unsigned int 
  5863 ;; Return value:  Size  Location     Type
  5864 ;;                  2    6[COMRAM] unsigned int 
  5865 ;; Registers used:
  5866 ;;		wreg, status,2, status,0, cstack
  5867 ;; Tracked objects:
  5868 ;;		On entry : 0/0
  5869 ;;		On exit  : 0/0
  5870 ;;		Unchanged: 0/0
  5871 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5872 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5873 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5874 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5875 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5876 ;;Total ram usage:        7 bytes
  5877 ;; Hardware stack levels used: 1
  5878 ;; Hardware stack levels required when called: 3
  5879 ;; This function calls:
  5880 ;;		_I2C_2_Master_Read
  5881 ;;		_I2C_2_Master_RepStart
  5882 ;;		_I2C_2_Master_Start
  5883 ;;		_I2C_2_Master_Stop
  5884 ;;		_I2C_2_Master_Write
  5885 ;; This function is called by:
  5886 ;;		_READcolor
  5887 ;; This function uses a non-reentrant model
  5888 ;;
  5889                           
  5890                           	psect	text36
  5891   00205C                     __ptext36:
  5892                           	callstack 0
  5893   00205C                     _color_read_Blue:
  5894                           	callstack 25
  5895   00205C                     
  5896                           ;color.c: 59:  unsigned int tmp;;color.c: 60:  I2C_2_Master_Start();
  5897   00205C  ECC9  F011         	call	_I2C_2_Master_Start	;wreg free
  5898                           
  5899                           ;color.c: 61:  I2C_2_Master_Write(0x52 | 0x00);
  5900   002060  0E52               	movlw	82
  5901   002062  ECBE  F011         	call	_I2C_2_Master_Write
  5902                           
  5903                           ;color.c: 63:  I2C_2_Master_Write(0xA0 | 0x1A);
  5904   002066  0EBA               	movlw	186
  5905   002068  ECBE  F011         	call	_I2C_2_Master_Write
  5906                           
  5907                           ;color.c: 64:  I2C_2_Master_RepStart();
  5908   00206C  ECCE  F011         	call	_I2C_2_Master_RepStart	;wreg free
  5909                           
  5910                           ;color.c: 65:  I2C_2_Master_Write(0x52 | 0x01);
  5911   002070  0E53               	movlw	83
  5912   002072  ECBE  F011         	call	_I2C_2_Master_Write
  5913                           
  5914                           ;color.c: 66:  tmp=I2C_2_Master_Read(1);
  5915   002076  0E01               	movlw	1
  5916   002078  EC9D  F010         	call	_I2C_2_Master_Read
  5917   00207C  6E09               	movwf	??_color_read_Blue^0,c
  5918   00207E  5009               	movf	??_color_read_Blue^0,w,c
  5919   002080  6E0C               	movwf	color_read_Blue@tmp^0,c
  5920   002082  6A0D               	clrf	(color_read_Blue@tmp+1)^0,c
  5921                           
  5922                           ;color.c: 67:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  5923   002084  0E00               	movlw	0
  5924   002086  EC9D  F010         	call	_I2C_2_Master_Read
  5925   00208A  6E09               	movwf	??_color_read_Blue^0,c
  5926   00208C  5009               	movf	??_color_read_Blue^0,w,c
  5927   00208E  6E0B               	movwf	(??_color_read_Blue+2)^0,c
  5928   002090  6A0A               	clrf	(??_color_read_Blue+1)^0,c
  5929   002092  500C               	movf	color_read_Blue@tmp^0,w,c
  5930   002094  100A               	iorwf	(??_color_read_Blue+1)^0,w,c
  5931   002096  6E0C               	movwf	color_read_Blue@tmp^0,c
  5932   002098  500D               	movf	(color_read_Blue@tmp+1)^0,w,c
  5933   00209A  100B               	iorwf	(??_color_read_Blue+2)^0,w,c
  5934   00209C  6E0D               	movwf	(color_read_Blue@tmp+1)^0,c
  5935                           
  5936                           ;color.c: 68:  I2C_2_Master_Stop();
  5937   00209E  ECC4  F011         	call	_I2C_2_Master_Stop	;wreg free
  5938   0020A2                     
  5939                           ;color.c: 69:  return tmp;
  5940   0020A2  C00C  F007         	movff	color_read_Blue@tmp,?_color_read_Blue
  5941   0020A6  C00D  F008         	movff	color_read_Blue@tmp+1,?_color_read_Blue+1
  5942   0020AA  0012               	return		;funcret
  5943   0020AC                     __end_of_color_read_Blue:
  5944                           	callstack 0
  5945                           
  5946 ;; *************** function _I2C_2_Master_Write *****************
  5947 ;; Defined at:
  5948 ;;		line 63 in file "i2c.c"
  5949 ;; Parameters:    Size  Location     Type
  5950 ;;  data_byte       1    wreg     unsigned char 
  5951 ;; Auto vars:     Size  Location     Type
  5952 ;;  data_byte       1    3[COMRAM] unsigned char 
  5953 ;; Return value:  Size  Location     Type
  5954 ;;                  1    wreg      void 
  5955 ;; Registers used:
  5956 ;;		wreg, status,2, status,0, cstack
  5957 ;; Tracked objects:
  5958 ;;		On entry : 0/0
  5959 ;;		On exit  : 0/0
  5960 ;;		Unchanged: 0/0
  5961 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5962 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5963 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5964 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5965 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5966 ;;Total ram usage:        1 bytes
  5967 ;; Hardware stack levels used: 1
  5968 ;; Hardware stack levels required when called: 2
  5969 ;; This function calls:
  5970 ;;		_I2C_2_Master_Idle
  5971 ;; This function is called by:
  5972 ;;		_color_writetoaddr
  5973 ;;		_color_read_Red
  5974 ;;		_color_read_Blue
  5975 ;;		_color_read_Green
  5976 ;;		_color_read_Clear
  5977 ;; This function uses a non-reentrant model
  5978 ;;
  5979                           
  5980                           	psect	text37
  5981   00237C                     __ptext37:
  5982                           	callstack 0
  5983   00237C                     _I2C_2_Master_Write:
  5984                           	callstack 25
  5985                           
  5986                           ;incstack = 0
  5987                           ;I2C_2_Master_Write@data_byte stored from wreg
  5988   00237C  6E04               	movwf	I2C_2_Master_Write@data_byte^0,c
  5989   00237E                     
  5990                           ;i2c.c: 63: void I2C_2_Master_Write(unsigned char data_byte);i2c.c: 64: {;i2c.c: 65:   I
      +                          2C_2_Master_Idle();
  5991   00237E  EC2D  F011         	call	_I2C_2_Master_Idle	;wreg free
  5992   002382                     
  5993                           ;i2c.c: 66:   SSP2BUF = data_byte;
  5994   002382  C004  FED5         	movff	I2C_2_Master_Write@data_byte,3797	;volatile
  5995   002386  0012               	return		;funcret
  5996   002388                     __end_of_I2C_2_Master_Write:
  5997                           	callstack 0
  5998                           
  5999 ;; *************** function _I2C_2_Master_Stop *****************
  6000 ;; Defined at:
  6001 ;;		line 54 in file "i2c.c"
  6002 ;; Parameters:    Size  Location     Type
  6003 ;;		None
  6004 ;; Auto vars:     Size  Location     Type
  6005 ;;		None
  6006 ;; Return value:  Size  Location     Type
  6007 ;;                  1    wreg      void 
  6008 ;; Registers used:
  6009 ;;		wreg, status,2, status,0, cstack
  6010 ;; Tracked objects:
  6011 ;;		On entry : 0/0
  6012 ;;		On exit  : 0/0
  6013 ;;		Unchanged: 0/0
  6014 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6015 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6016 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6017 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6018 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6019 ;;Total ram usage:        0 bytes
  6020 ;; Hardware stack levels used: 1
  6021 ;; Hardware stack levels required when called: 2
  6022 ;; This function calls:
  6023 ;;		_I2C_2_Master_Idle
  6024 ;; This function is called by:
  6025 ;;		_color_writetoaddr
  6026 ;;		_color_read_Red
  6027 ;;		_color_read_Blue
  6028 ;;		_color_read_Green
  6029 ;;		_color_read_Clear
  6030 ;; This function uses a non-reentrant model
  6031 ;;
  6032                           
  6033                           	psect	text38
  6034   002388                     __ptext38:
  6035                           	callstack 0
  6036   002388                     _I2C_2_Master_Stop:
  6037                           	callstack 25
  6038   002388                     
  6039                           ;i2c.c: 56:   I2C_2_Master_Idle();
  6040   002388  EC2D  F011         	call	_I2C_2_Master_Idle	;wreg free
  6041   00238C                     
  6042                           ;i2c.c: 57:   SSP2CON2bits.PEN = 1;
  6043   00238C  010E               	movlb	14	; () banked
  6044   00238E  85DA               	bsf	218,2,b	;volatile
  6045   002390                     
  6046                           ; BSR set to: 14
  6047   002390  0012               	return		;funcret
  6048   002392                     __end_of_I2C_2_Master_Stop:
  6049                           	callstack 0
  6050                           
  6051 ;; *************** function _I2C_2_Master_Start *****************
  6052 ;; Defined at:
  6053 ;;		line 36 in file "i2c.c"
  6054 ;; Parameters:    Size  Location     Type
  6055 ;;		None
  6056 ;; Auto vars:     Size  Location     Type
  6057 ;;		None
  6058 ;; Return value:  Size  Location     Type
  6059 ;;                  1    wreg      void 
  6060 ;; Registers used:
  6061 ;;		wreg, status,2, status,0, cstack
  6062 ;; Tracked objects:
  6063 ;;		On entry : 0/0
  6064 ;;		On exit  : 0/0
  6065 ;;		Unchanged: 0/0
  6066 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6067 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6068 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6069 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6070 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6071 ;;Total ram usage:        0 bytes
  6072 ;; Hardware stack levels used: 1
  6073 ;; Hardware stack levels required when called: 2
  6074 ;; This function calls:
  6075 ;;		_I2C_2_Master_Idle
  6076 ;; This function is called by:
  6077 ;;		_color_writetoaddr
  6078 ;;		_color_read_Red
  6079 ;;		_color_read_Blue
  6080 ;;		_color_read_Green
  6081 ;;		_color_read_Clear
  6082 ;; This function uses a non-reentrant model
  6083 ;;
  6084                           
  6085                           	psect	text39
  6086   002392                     __ptext39:
  6087                           	callstack 0
  6088   002392                     _I2C_2_Master_Start:
  6089                           	callstack 25
  6090   002392                     
  6091                           ;i2c.c: 38:   I2C_2_Master_Idle();
  6092   002392  EC2D  F011         	call	_I2C_2_Master_Idle	;wreg free
  6093   002396                     
  6094                           ;i2c.c: 39:   SSP2CON2bits.SEN = 1;
  6095   002396  010E               	movlb	14	; () banked
  6096   002398  81DA               	bsf	218,0,b	;volatile
  6097   00239A                     
  6098                           ; BSR set to: 14
  6099   00239A  0012               	return		;funcret
  6100   00239C                     __end_of_I2C_2_Master_Start:
  6101                           	callstack 0
  6102                           
  6103 ;; *************** function _I2C_2_Master_RepStart *****************
  6104 ;; Defined at:
  6105 ;;		line 45 in file "i2c.c"
  6106 ;; Parameters:    Size  Location     Type
  6107 ;;		None
  6108 ;; Auto vars:     Size  Location     Type
  6109 ;;		None
  6110 ;; Return value:  Size  Location     Type
  6111 ;;                  1    wreg      void 
  6112 ;; Registers used:
  6113 ;;		wreg, status,2, status,0, cstack
  6114 ;; Tracked objects:
  6115 ;;		On entry : 0/0
  6116 ;;		On exit  : 0/0
  6117 ;;		Unchanged: 0/0
  6118 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6119 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6120 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6121 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6122 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6123 ;;Total ram usage:        0 bytes
  6124 ;; Hardware stack levels used: 1
  6125 ;; Hardware stack levels required when called: 2
  6126 ;; This function calls:
  6127 ;;		_I2C_2_Master_Idle
  6128 ;; This function is called by:
  6129 ;;		_color_read_Red
  6130 ;;		_color_read_Blue
  6131 ;;		_color_read_Green
  6132 ;;		_color_read_Clear
  6133 ;; This function uses a non-reentrant model
  6134 ;;
  6135                           
  6136                           	psect	text40
  6137   00239C                     __ptext40:
  6138                           	callstack 0
  6139   00239C                     _I2C_2_Master_RepStart:
  6140                           	callstack 25
  6141   00239C                     
  6142                           ;i2c.c: 47:   I2C_2_Master_Idle();
  6143   00239C  EC2D  F011         	call	_I2C_2_Master_Idle	;wreg free
  6144   0023A0                     
  6145                           ;i2c.c: 48:   SSP2CON2bits.RSEN = 1;
  6146   0023A0  010E               	movlb	14	; () banked
  6147   0023A2  83DA               	bsf	218,1,b	;volatile
  6148   0023A4                     
  6149                           ; BSR set to: 14
  6150   0023A4  0012               	return		;funcret
  6151   0023A6                     __end_of_I2C_2_Master_RepStart:
  6152                           	callstack 0
  6153                           
  6154 ;; *************** function _I2C_2_Master_Read *****************
  6155 ;; Defined at:
  6156 ;;		line 72 in file "i2c.c"
  6157 ;; Parameters:    Size  Location     Type
  6158 ;;  ack             1    wreg     unsigned char 
  6159 ;; Auto vars:     Size  Location     Type
  6160 ;;  ack             1    4[COMRAM] unsigned char 
  6161 ;;  tmp             1    5[COMRAM] unsigned char 
  6162 ;; Return value:  Size  Location     Type
  6163 ;;                  1    wreg      unsigned char 
  6164 ;; Registers used:
  6165 ;;		wreg, status,2, status,0, cstack
  6166 ;; Tracked objects:
  6167 ;;		On entry : 0/0
  6168 ;;		On exit  : 0/0
  6169 ;;		Unchanged: 0/0
  6170 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6171 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6172 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6173 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6174 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6175 ;;Total ram usage:        3 bytes
  6176 ;; Hardware stack levels used: 1
  6177 ;; Hardware stack levels required when called: 2
  6178 ;; This function calls:
  6179 ;;		_I2C_2_Master_Idle
  6180 ;; This function is called by:
  6181 ;;		_color_read_Red
  6182 ;;		_color_read_Blue
  6183 ;;		_color_read_Green
  6184 ;;		_color_read_Clear
  6185 ;; This function uses a non-reentrant model
  6186 ;;
  6187                           
  6188                           	psect	text41
  6189   00213A                     __ptext41:
  6190                           	callstack 0
  6191   00213A                     _I2C_2_Master_Read:
  6192                           	callstack 25
  6193                           
  6194                           ; BSR set to: 14
  6195                           ;incstack = 0
  6196                           ;I2C_2_Master_Read@ack stored from wreg
  6197   00213A  6E05               	movwf	I2C_2_Master_Read@ack^0,c
  6198   00213C                     
  6199                           ;i2c.c: 72: unsigned char I2C_2_Master_Read(unsigned char ack);i2c.c: 73: {;i2c.c: 74:  
      +                           unsigned char tmp;;i2c.c: 75:   I2C_2_Master_Idle();
  6200   00213C  EC2D  F011         	call	_I2C_2_Master_Idle	;wreg free
  6201   002140                     
  6202                           ;i2c.c: 76:   SSP2CON2bits.RCEN = 1;
  6203   002140  010E               	movlb	14	; () banked
  6204   002142  87DA               	bsf	218,3,b	;volatile
  6205                           
  6206                           ;i2c.c: 77:   I2C_2_Master_Idle();
  6207   002144  EC2D  F011         	call	_I2C_2_Master_Idle	;wreg free
  6208   002148                     
  6209                           ;i2c.c: 78:   tmp = SSP2BUF;
  6210   002148  CED5 F006          	movff	3797,I2C_2_Master_Read@tmp	;volatile
  6211                           
  6212                           ;i2c.c: 79:   I2C_2_Master_Idle();
  6213   00214C  EC2D  F011         	call	_I2C_2_Master_Idle	;wreg free
  6214   002150                     
  6215                           ;i2c.c: 80:   SSP2CON2bits.ACKDT = !ack;
  6216   002150  5005               	movf	I2C_2_Master_Read@ack^0,w,c
  6217   002152  B4D8               	btfsc	status,2,c
  6218   002154  EFAE  F010         	goto	u1531
  6219   002158  EFB2  F010         	goto	u1530
  6220   00215C                     u1531:
  6221   00215C  6A04               	clrf	??_I2C_2_Master_Read^0,c
  6222   00215E  2A04               	incf	??_I2C_2_Master_Read^0,f,c
  6223   002160  EFB3  F010         	goto	u1548
  6224   002164                     u1530:
  6225   002164  6A04               	clrf	??_I2C_2_Master_Read^0,c
  6226   002166                     u1548:
  6227   002166  3A04               	swapf	??_I2C_2_Master_Read^0,f,c
  6228   002168  4604               	rlncf	??_I2C_2_Master_Read^0,f,c
  6229   00216A  010E               	movlb	14	; () banked
  6230   00216C  51DA               	movf	218,w,b	;volatile
  6231   00216E  1804               	xorwf	??_I2C_2_Master_Read^0,w,c
  6232   002170  0BDF               	andlw	-33
  6233   002172  1804               	xorwf	??_I2C_2_Master_Read^0,w,c
  6234   002174  6FDA               	movwf	218,b	;volatile
  6235   002176                     
  6236                           ; BSR set to: 14
  6237                           ;i2c.c: 81:   SSP2CON2bits.ACKEN = 1;
  6238   002176  89DA               	bsf	218,4,b	;volatile
  6239   002178                     
  6240                           ; BSR set to: 14
  6241                           ;i2c.c: 82:   return tmp;
  6242   002178  5006               	movf	I2C_2_Master_Read@tmp^0,w,c
  6243   00217A                     
  6244                           ; BSR set to: 14
  6245   00217A  0012               	return		;funcret
  6246   00217C                     __end_of_I2C_2_Master_Read:
  6247                           	callstack 0
  6248                           
  6249 ;; *************** function _I2C_2_Master_Idle *****************
  6250 ;; Defined at:
  6251 ;;		line 28 in file "i2c.c"
  6252 ;; Parameters:    Size  Location     Type
  6253 ;;		None
  6254 ;; Auto vars:     Size  Location     Type
  6255 ;;		None
  6256 ;; Return value:  Size  Location     Type
  6257 ;;                  1    wreg      void 
  6258 ;; Registers used:
  6259 ;;		wreg, status,2, status,0
  6260 ;; Tracked objects:
  6261 ;;		On entry : 0/0
  6262 ;;		On exit  : 0/0
  6263 ;;		Unchanged: 0/0
  6264 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6265 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6266 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6267 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6268 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6269 ;;Total ram usage:        1 bytes
  6270 ;; Hardware stack levels used: 1
  6271 ;; Hardware stack levels required when called: 1
  6272 ;; This function calls:
  6273 ;;		Nothing
  6274 ;; This function is called by:
  6275 ;;		_I2C_2_Master_Start
  6276 ;;		_I2C_2_Master_RepStart
  6277 ;;		_I2C_2_Master_Stop
  6278 ;;		_I2C_2_Master_Write
  6279 ;;		_I2C_2_Master_Read
  6280 ;; This function uses a non-reentrant model
  6281 ;;
  6282                           
  6283                           	psect	text42
  6284   00225A                     __ptext42:
  6285                           	callstack 0
  6286   00225A                     _I2C_2_Master_Idle:
  6287                           	callstack 25
  6288   00225A                     l30:
  6289   00225A  010E               	movlb	14	; () banked
  6290   00225C  B5D8               	btfsc	216,2,b	;volatile
  6291   00225E  EF33  F011         	goto	u1371
  6292   002262  EF35  F011         	goto	u1370
  6293   002266                     u1371:
  6294   002266  EF2D  F011         	goto	l30
  6295   00226A                     u1370:
  6296   00226A                     
  6297                           ; BSR set to: 14
  6298   00226A  CEDA F003          	movff	3802,??_I2C_2_Master_Idle	;volatile
  6299   00226E  0E1F               	movlw	31
  6300   002270  1603               	andwf	??_I2C_2_Master_Idle^0,f,c
  6301   002272  A4D8               	btfss	status,2,c
  6302   002274  EF3E  F011         	goto	u1381
  6303   002278  EF40  F011         	goto	u1380
  6304   00227C                     u1381:
  6305   00227C  EF2D  F011         	goto	l30
  6306   002280                     u1380:
  6307   002280                     
  6308                           ; BSR set to: 14
  6309   002280  0012               	return		;funcret
  6310   002282                     __end_of_I2C_2_Master_Idle:
  6311                           	callstack 0
  6312                           
  6313 ;; *************** function ___xxtofl *****************
  6314 ;; Defined at:
  6315 ;;		line 10 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\xxtofl.c"
  6316 ;; Parameters:    Size  Location     Type
  6317 ;;  sign            1    wreg     unsigned char 
  6318 ;;  val             4    2[COMRAM] long 
  6319 ;; Auto vars:     Size  Location     Type
  6320 ;;  sign            1   10[COMRAM] unsigned char 
  6321 ;;  arg             4   12[COMRAM] unsigned long 
  6322 ;;  exp             1   11[COMRAM] unsigned char 
  6323 ;; Return value:  Size  Location     Type
  6324 ;;                  4    2[COMRAM] unsigned char 
  6325 ;; Registers used:
  6326 ;;		wreg, status,2, status,0
  6327 ;; Tracked objects:
  6328 ;;		On entry : 0/0
  6329 ;;		On exit  : 0/0
  6330 ;;		Unchanged: 0/0
  6331 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6332 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6333 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6334 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6335 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6336 ;;Total ram usage:       14 bytes
  6337 ;; Hardware stack levels used: 1
  6338 ;; Hardware stack levels required when called: 1
  6339 ;; This function calls:
  6340 ;;		Nothing
  6341 ;; This function is called by:
  6342 ;;		_READcolor
  6343 ;; This function uses a non-reentrant model
  6344 ;;
  6345                           
  6346                           	psect	text43
  6347   000FAA                     __ptext43:
  6348                           	callstack 0
  6349   000FAA                     ___xxtofl:
  6350                           	callstack 27
  6351                           
  6352                           ; BSR set to: 14
  6353                           ;incstack = 0
  6354                           ;___xxtofl@sign stored from wreg
  6355   000FAA  6E0B               	movwf	___xxtofl@sign^0,c
  6356   000FAC  500B               	movf	___xxtofl@sign^0,w,c
  6357   000FAE  B4D8               	btfsc	status,2,c
  6358   000FB0  EFDC  F007         	goto	u1921
  6359   000FB4  EFDE  F007         	goto	u1920
  6360   000FB8                     u1921:
  6361   000FB8  EF00  F008         	goto	l1241
  6362   000FBC                     u1920:
  6363   000FBC  BE06               	btfsc	(___xxtofl@val+3)^0,7,c
  6364   000FBE  EFE5  F007         	goto	u1930
  6365   000FC2  EFE3  F007         	goto	u1931
  6366   000FC6                     u1931:
  6367   000FC6  EF00  F008         	goto	l1241
  6368   000FCA                     u1930:
  6369   000FCA  C003  F007         	movff	___xxtofl@val,??___xxtofl
  6370   000FCE  C004  F008         	movff	___xxtofl@val+1,??___xxtofl+1
  6371   000FD2  C005  F009         	movff	___xxtofl@val+2,??___xxtofl+2
  6372   000FD6  C006  F00A         	movff	___xxtofl@val+3,??___xxtofl+3
  6373   000FDA  1E07               	comf	??___xxtofl^0,f,c
  6374   000FDC  1E08               	comf	(??___xxtofl+1)^0,f,c
  6375   000FDE  1E09               	comf	(??___xxtofl+2)^0,f,c
  6376   000FE0  1E0A               	comf	(??___xxtofl+3)^0,f,c
  6377   000FE2  2A07               	incf	??___xxtofl^0,f,c
  6378   000FE4  0E00               	movlw	0
  6379   000FE6  2208               	addwfc	(??___xxtofl+1)^0,f,c
  6380   000FE8  2209               	addwfc	(??___xxtofl+2)^0,f,c
  6381   000FEA  220A               	addwfc	(??___xxtofl+3)^0,f,c
  6382   000FEC  C007  F00D         	movff	??___xxtofl,___xxtofl@arg
  6383   000FF0  C008  F00E         	movff	??___xxtofl+1,___xxtofl@arg+1
  6384   000FF4  C009  F00F         	movff	??___xxtofl+2,___xxtofl@arg+2
  6385   000FF8  C00A  F010         	movff	??___xxtofl+3,___xxtofl@arg+3
  6386   000FFC  EF08  F008         	goto	l2751
  6387   001000                     l1241:
  6388   001000  C003  F00D         	movff	___xxtofl@val,___xxtofl@arg
  6389   001004  C004  F00E         	movff	___xxtofl@val+1,___xxtofl@arg+1
  6390   001008  C005  F00F         	movff	___xxtofl@val+2,___xxtofl@arg+2
  6391   00100C  C006  F010         	movff	___xxtofl@val+3,___xxtofl@arg+3
  6392   001010                     l2751:
  6393   001010  5003               	movf	___xxtofl@val^0,w,c
  6394   001012  1004               	iorwf	(___xxtofl@val+1)^0,w,c
  6395   001014  1005               	iorwf	(___xxtofl@val+2)^0,w,c
  6396   001016  1006               	iorwf	(___xxtofl@val+3)^0,w,c
  6397   001018  A4D8               	btfss	status,2,c
  6398   00101A  EF11  F008         	goto	u1941
  6399   00101E  EF13  F008         	goto	u1940
  6400   001022                     u1941:
  6401   001022  EF1D  F008         	goto	l2757
  6402   001026                     u1940:
  6403   001026  0E00               	movlw	0
  6404   001028  6E03               	movwf	?___xxtofl^0,c
  6405   00102A  0E00               	movlw	0
  6406   00102C  6E04               	movwf	(?___xxtofl+1)^0,c
  6407   00102E  0E00               	movlw	0
  6408   001030  6E05               	movwf	(?___xxtofl+2)^0,c
  6409   001032  0E00               	movlw	0
  6410   001034  6E06               	movwf	(?___xxtofl+3)^0,c
  6411   001036  EFAE  F008         	goto	l1244
  6412   00103A                     l2757:
  6413   00103A  0E96               	movlw	150
  6414   00103C  6E0C               	movwf	___xxtofl@exp^0,c
  6415   00103E  EF27  F008         	goto	l2761
  6416   001042                     l2759:
  6417   001042  2A0C               	incf	___xxtofl@exp^0,f,c
  6418   001044  90D8               	bcf	status,0,c
  6419   001046  3210               	rrcf	(___xxtofl@arg+3)^0,f,c
  6420   001048  320F               	rrcf	(___xxtofl@arg+2)^0,f,c
  6421   00104A  320E               	rrcf	(___xxtofl@arg+1)^0,f,c
  6422   00104C  320D               	rrcf	___xxtofl@arg^0,f,c
  6423   00104E                     l2761:
  6424   00104E  0E00               	movlw	0
  6425   001050  140D               	andwf	___xxtofl@arg^0,w,c
  6426   001052  6E07               	movwf	??___xxtofl^0,c
  6427   001054  0E00               	movlw	0
  6428   001056  140E               	andwf	(___xxtofl@arg+1)^0,w,c
  6429   001058  6E08               	movwf	(??___xxtofl+1)^0,c
  6430   00105A  0E00               	movlw	0
  6431   00105C  140F               	andwf	(___xxtofl@arg+2)^0,w,c
  6432   00105E  6E09               	movwf	(??___xxtofl+2)^0,c
  6433   001060  0EFE               	movlw	254
  6434   001062  1410               	andwf	(___xxtofl@arg+3)^0,w,c
  6435   001064  6E0A               	movwf	(??___xxtofl+3)^0,c
  6436   001066  5007               	movf	??___xxtofl^0,w,c
  6437   001068  1008               	iorwf	(??___xxtofl+1)^0,w,c
  6438   00106A  1009               	iorwf	(??___xxtofl+2)^0,w,c
  6439   00106C  100A               	iorwf	(??___xxtofl+3)^0,w,c
  6440   00106E  A4D8               	btfss	status,2,c
  6441   001070  EF3C  F008         	goto	u1951
  6442   001074  EF3E  F008         	goto	u1950
  6443   001078                     u1951:
  6444   001078  EF21  F008         	goto	l2759
  6445   00107C                     u1950:
  6446   00107C  EF4C  F008         	goto	l1248
  6447   001080                     l2763:
  6448   001080  2A0C               	incf	___xxtofl@exp^0,f,c
  6449   001082  0E01               	movlw	1
  6450   001084  260D               	addwf	___xxtofl@arg^0,f,c
  6451   001086  0E00               	movlw	0
  6452   001088  220E               	addwfc	(___xxtofl@arg+1)^0,f,c
  6453   00108A  220F               	addwfc	(___xxtofl@arg+2)^0,f,c
  6454   00108C  2210               	addwfc	(___xxtofl@arg+3)^0,f,c
  6455   00108E  90D8               	bcf	status,0,c
  6456   001090  3210               	rrcf	(___xxtofl@arg+3)^0,f,c
  6457   001092  320F               	rrcf	(___xxtofl@arg+2)^0,f,c
  6458   001094  320E               	rrcf	(___xxtofl@arg+1)^0,f,c
  6459   001096  320D               	rrcf	___xxtofl@arg^0,f,c
  6460   001098                     l1248:
  6461   001098  0E00               	movlw	0
  6462   00109A  140D               	andwf	___xxtofl@arg^0,w,c
  6463   00109C  6E07               	movwf	??___xxtofl^0,c
  6464   00109E  0E00               	movlw	0
  6465   0010A0  140E               	andwf	(___xxtofl@arg+1)^0,w,c
  6466   0010A2  6E08               	movwf	(??___xxtofl+1)^0,c
  6467   0010A4  0E00               	movlw	0
  6468   0010A6  140F               	andwf	(___xxtofl@arg+2)^0,w,c
  6469   0010A8  6E09               	movwf	(??___xxtofl+2)^0,c
  6470   0010AA  0EFF               	movlw	255
  6471   0010AC  1410               	andwf	(___xxtofl@arg+3)^0,w,c
  6472   0010AE  6E0A               	movwf	(??___xxtofl+3)^0,c
  6473   0010B0  5007               	movf	??___xxtofl^0,w,c
  6474   0010B2  1008               	iorwf	(??___xxtofl+1)^0,w,c
  6475   0010B4  1009               	iorwf	(??___xxtofl+2)^0,w,c
  6476   0010B6  100A               	iorwf	(??___xxtofl+3)^0,w,c
  6477   0010B8  A4D8               	btfss	status,2,c
  6478   0010BA  EF61  F008         	goto	u1961
  6479   0010BE  EF63  F008         	goto	u1960
  6480   0010C2                     u1961:
  6481   0010C2  EF40  F008         	goto	l2763
  6482   0010C6                     u1960:
  6483   0010C6  EF6B  F008         	goto	l2771
  6484   0010CA                     l2769:
  6485   0010CA  060C               	decf	___xxtofl@exp^0,f,c
  6486   0010CC  90D8               	bcf	status,0,c
  6487   0010CE  360D               	rlcf	___xxtofl@arg^0,f,c
  6488   0010D0  360E               	rlcf	(___xxtofl@arg+1)^0,f,c
  6489   0010D2  360F               	rlcf	(___xxtofl@arg+2)^0,f,c
  6490   0010D4  3610               	rlcf	(___xxtofl@arg+3)^0,f,c
  6491   0010D6                     l2771:
  6492   0010D6  BE0F               	btfsc	(___xxtofl@arg+2)^0,7,c
  6493   0010D8  EF70  F008         	goto	u1971
  6494   0010DC  EF72  F008         	goto	u1970
  6495   0010E0                     u1971:
  6496   0010E0  EF7A  F008         	goto	l1255
  6497   0010E4                     u1970:
  6498   0010E4  0E02               	movlw	2
  6499   0010E6  600C               	cpfslt	___xxtofl@exp^0,c
  6500   0010E8  EF78  F008         	goto	u1981
  6501   0010EC  EF7A  F008         	goto	u1980
  6502   0010F0                     u1981:
  6503   0010F0  EF65  F008         	goto	l2769
  6504   0010F4                     u1980:
  6505   0010F4                     l1255:
  6506   0010F4  B00C               	btfsc	___xxtofl@exp^0,0,c
  6507   0010F6  EF7F  F008         	goto	u1991
  6508   0010FA  EF81  F008         	goto	u1990
  6509   0010FE                     u1991:
  6510   0010FE  EF82  F008         	goto	l2777
  6511   001102                     u1990:
  6512   001102  9E0F               	bcf	(___xxtofl@arg+2)^0,7,c
  6513   001104                     l2777:
  6514   001104  90D8               	bcf	status,0,c
  6515   001106  320C               	rrcf	___xxtofl@exp^0,f,c
  6516   001108  C00C  F007         	movff	___xxtofl@exp,??___xxtofl
  6517   00110C  6A08               	clrf	(??___xxtofl+1)^0,c
  6518   00110E  6A09               	clrf	(??___xxtofl+2)^0,c
  6519   001110  6A0A               	clrf	(??___xxtofl+3)^0,c
  6520   001112  C007  F00A         	movff	??___xxtofl,??___xxtofl+3
  6521   001116  6A09               	clrf	(??___xxtofl+2)^0,c
  6522   001118  6A08               	clrf	(??___xxtofl+1)^0,c
  6523   00111A  6A07               	clrf	??___xxtofl^0,c
  6524   00111C  5007               	movf	??___xxtofl^0,w,c
  6525   00111E  120D               	iorwf	___xxtofl@arg^0,f,c
  6526   001120  5008               	movf	(??___xxtofl+1)^0,w,c
  6527   001122  120E               	iorwf	(___xxtofl@arg+1)^0,f,c
  6528   001124  5009               	movf	(??___xxtofl+2)^0,w,c
  6529   001126  120F               	iorwf	(___xxtofl@arg+2)^0,f,c
  6530   001128  500A               	movf	(??___xxtofl+3)^0,w,c
  6531   00112A  1210               	iorwf	(___xxtofl@arg+3)^0,f,c
  6532   00112C  500B               	movf	___xxtofl@sign^0,w,c
  6533   00112E  B4D8               	btfsc	status,2,c
  6534   001130  EF9C  F008         	goto	u2001
  6535   001134  EF9E  F008         	goto	u2000
  6536   001138                     u2001:
  6537   001138  EFA6  F008         	goto	l2787
  6538   00113C                     u2000:
  6539   00113C  BE06               	btfsc	(___xxtofl@val+3)^0,7,c
  6540   00113E  EFA5  F008         	goto	u2010
  6541   001142  EFA3  F008         	goto	u2011
  6542   001146                     u2011:
  6543   001146  EFA6  F008         	goto	l2787
  6544   00114A                     u2010:
  6545   00114A  8E10               	bsf	(___xxtofl@arg+3)^0,7,c
  6546   00114C                     l2787:
  6547   00114C  C00D  F003         	movff	___xxtofl@arg,?___xxtofl
  6548   001150  C00E  F004         	movff	___xxtofl@arg+1,?___xxtofl+1
  6549   001154  C00F  F005         	movff	___xxtofl@arg+2,?___xxtofl+2
  6550   001158  C010  F006         	movff	___xxtofl@arg+3,?___xxtofl+3
  6551   00115C                     l1244:
  6552   00115C  0012               	return		;funcret
  6553   00115E                     __end_of___xxtofl:
  6554                           	callstack 0
  6555                           
  6556 ;; *************** function ___fldiv *****************
  6557 ;; Defined at:
  6558 ;;		line 11 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\sprcdiv.c"
  6559 ;; Parameters:    Size  Location     Type
  6560 ;;  b               4   16[COMRAM] unsigned char 
  6561 ;;  a               4   20[COMRAM] unsigned char 
  6562 ;; Auto vars:     Size  Location     Type
  6563 ;;  grs             4   35[COMRAM] unsigned long 
  6564 ;;  rem             4   28[COMRAM] unsigned long 
  6565 ;;  new_exp         2   33[COMRAM] short 
  6566 ;;  aexp            1   40[COMRAM] unsigned char 
  6567 ;;  bexp            1   39[COMRAM] unsigned char 
  6568 ;;  sign            1   32[COMRAM] unsigned char 
  6569 ;; Return value:  Size  Location     Type
  6570 ;;                  4   16[COMRAM] unsigned char 
  6571 ;; Registers used:
  6572 ;;		wreg, status,2, status,0
  6573 ;; Tracked objects:
  6574 ;;		On entry : 0/0
  6575 ;;		On exit  : 0/0
  6576 ;;		Unchanged: 0/0
  6577 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6578 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6579 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6580 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6581 ;;      Totals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6582 ;;Total ram usage:       25 bytes
  6583 ;; Hardware stack levels used: 1
  6584 ;; Hardware stack levels required when called: 1
  6585 ;; This function calls:
  6586 ;;		Nothing
  6587 ;; This function is called by:
  6588 ;;		_READcolor
  6589 ;; This function uses a non-reentrant model
  6590 ;;
  6591                           
  6592                           	psect	text44
  6593   000728                     __ptext44:
  6594                           	callstack 0
  6595   000728                     ___fldiv:
  6596                           	callstack 27
  6597   000728  5014               	movf	(___fldiv@b+3)^0,w,c
  6598   00072A  0B80               	andlw	128
  6599   00072C  6E21               	movwf	___fldiv@sign^0,c
  6600   00072E  5014               	movf	(___fldiv@b+3)^0,w,c
  6601   000730  2414               	addwf	(___fldiv@b+3)^0,w,c
  6602   000732  6E28               	movwf	___fldiv@bexp^0,c
  6603   000734  AE13               	btfss	(___fldiv@b+2)^0,7,c
  6604   000736  EF9F  F003         	goto	u1691
  6605   00073A  EFA1  F003         	goto	u1690
  6606   00073E                     u1691:
  6607   00073E  EFA2  F003         	goto	l2613
  6608   000742                     u1690:
  6609   000742  8028               	bsf	___fldiv@bexp^0,0,c
  6610   000744                     l2613:
  6611   000744  5028               	movf	___fldiv@bexp^0,w,c
  6612   000746  B4D8               	btfsc	status,2,c
  6613   000748  EFA8  F003         	goto	u1701
  6614   00074C  EFAA  F003         	goto	u1700
  6615   000750                     u1701:
  6616   000750  EFBF  F003         	goto	l2623
  6617   000754                     u1700:
  6618   000754  2828               	incf	___fldiv@bexp^0,w,c
  6619   000756  A4D8               	btfss	status,2,c
  6620   000758  EFB0  F003         	goto	u1711
  6621   00075C  EFB2  F003         	goto	u1710
  6622   000760                     u1711:
  6623   000760  EFBA  F003         	goto	l2619
  6624   000764                     u1710:
  6625   000764  0E00               	movlw	0
  6626   000766  6E11               	movwf	___fldiv@b^0,c
  6627   000768  0E00               	movlw	0
  6628   00076A  6E12               	movwf	(___fldiv@b+1)^0,c
  6629   00076C  0E00               	movlw	0
  6630   00076E  6E13               	movwf	(___fldiv@b+2)^0,c
  6631   000770  0E00               	movlw	0
  6632   000772  6E14               	movwf	(___fldiv@b+3)^0,c
  6633   000774                     l2619:
  6634   000774  8E13               	bsf	(___fldiv@b+2)^0,7,c
  6635   000776  0E00               	movlw	0
  6636   000778  6E14               	movwf	(___fldiv@b+3)^0,c
  6637   00077A  EFC7  F003         	goto	l2625
  6638   00077E                     l2623:
  6639   00077E  0E00               	movlw	0
  6640   000780  6E11               	movwf	___fldiv@b^0,c
  6641   000782  0E00               	movlw	0
  6642   000784  6E12               	movwf	(___fldiv@b+1)^0,c
  6643   000786  0E00               	movlw	0
  6644   000788  6E13               	movwf	(___fldiv@b+2)^0,c
  6645   00078A  0E00               	movlw	0
  6646   00078C  6E14               	movwf	(___fldiv@b+3)^0,c
  6647   00078E                     l2625:
  6648   00078E  5018               	movf	(___fldiv@a+3)^0,w,c
  6649   000790  0B80               	andlw	128
  6650   000792  1A21               	xorwf	___fldiv@sign^0,f,c
  6651   000794  5018               	movf	(___fldiv@a+3)^0,w,c
  6652   000796  2418               	addwf	(___fldiv@a+3)^0,w,c
  6653   000798  6E29               	movwf	___fldiv@aexp^0,c
  6654   00079A  AE17               	btfss	(___fldiv@a+2)^0,7,c
  6655   00079C  EFD2  F003         	goto	u1721
  6656   0007A0  EFD4  F003         	goto	u1720
  6657   0007A4                     u1721:
  6658   0007A4  EFD5  F003         	goto	l2633
  6659   0007A8                     u1720:
  6660   0007A8  8029               	bsf	___fldiv@aexp^0,0,c
  6661   0007AA                     l2633:
  6662   0007AA  5029               	movf	___fldiv@aexp^0,w,c
  6663   0007AC  B4D8               	btfsc	status,2,c
  6664   0007AE  EFDB  F003         	goto	u1731
  6665   0007B2  EFDD  F003         	goto	u1730
  6666   0007B6                     u1731:
  6667   0007B6  EFF2  F003         	goto	l2643
  6668   0007BA                     u1730:
  6669   0007BA  2829               	incf	___fldiv@aexp^0,w,c
  6670   0007BC  A4D8               	btfss	status,2,c
  6671   0007BE  EFE3  F003         	goto	u1741
  6672   0007C2  EFE5  F003         	goto	u1740
  6673   0007C6                     u1741:
  6674   0007C6  EFED  F003         	goto	l2639
  6675   0007CA                     u1740:
  6676   0007CA  0E00               	movlw	0
  6677   0007CC  6E15               	movwf	___fldiv@a^0,c
  6678   0007CE  0E00               	movlw	0
  6679   0007D0  6E16               	movwf	(___fldiv@a+1)^0,c
  6680   0007D2  0E00               	movlw	0
  6681   0007D4  6E17               	movwf	(___fldiv@a+2)^0,c
  6682   0007D6  0E00               	movlw	0
  6683   0007D8  6E18               	movwf	(___fldiv@a+3)^0,c
  6684   0007DA                     l2639:
  6685   0007DA  8E17               	bsf	(___fldiv@a+2)^0,7,c
  6686   0007DC  0E00               	movlw	0
  6687   0007DE  6E18               	movwf	(___fldiv@a+3)^0,c
  6688   0007E0  EFFA  F003         	goto	l2645
  6689   0007E4                     l2643:
  6690   0007E4  0E00               	movlw	0
  6691   0007E6  6E15               	movwf	___fldiv@a^0,c
  6692   0007E8  0E00               	movlw	0
  6693   0007EA  6E16               	movwf	(___fldiv@a+1)^0,c
  6694   0007EC  0E00               	movlw	0
  6695   0007EE  6E17               	movwf	(___fldiv@a+2)^0,c
  6696   0007F0  0E00               	movlw	0
  6697   0007F2  6E18               	movwf	(___fldiv@a+3)^0,c
  6698   0007F4                     l2645:
  6699   0007F4  5015               	movf	___fldiv@a^0,w,c
  6700   0007F6  1016               	iorwf	(___fldiv@a+1)^0,w,c
  6701   0007F8  1017               	iorwf	(___fldiv@a+2)^0,w,c
  6702   0007FA  1018               	iorwf	(___fldiv@a+3)^0,w,c
  6703   0007FC  A4D8               	btfss	status,2,c
  6704   0007FE  EF03  F004         	goto	u1751
  6705   000802  EF05  F004         	goto	u1750
  6706   000806                     u1751:
  6707   000806  EF1D  F004         	goto	l2657
  6708   00080A                     u1750:
  6709   00080A  0E00               	movlw	0
  6710   00080C  6E11               	movwf	___fldiv@b^0,c
  6711   00080E  0E00               	movlw	0
  6712   000810  6E12               	movwf	(___fldiv@b+1)^0,c
  6713   000812  0E00               	movlw	0
  6714   000814  6E13               	movwf	(___fldiv@b+2)^0,c
  6715   000816  0E00               	movlw	0
  6716   000818  6E14               	movwf	(___fldiv@b+3)^0,c
  6717   00081A  0E80               	movlw	128
  6718   00081C  1213               	iorwf	(___fldiv@b+2)^0,f,c
  6719   00081E  0E7F               	movlw	127
  6720   000820  1214               	iorwf	(___fldiv@b+3)^0,f,c
  6721   000822                     l2651:
  6722   000822  5021               	movf	___fldiv@sign^0,w,c
  6723   000824  1214               	iorwf	(___fldiv@b+3)^0,f,c
  6724   000826  C011  F011         	movff	___fldiv@b,?___fldiv
  6725   00082A  C012  F012         	movff	___fldiv@b+1,?___fldiv+1
  6726   00082E  C013  F013         	movff	___fldiv@b+2,?___fldiv+2
  6727   000832  C014  F014         	movff	___fldiv@b+3,?___fldiv+3
  6728   000836  EF60  F005         	goto	l1168
  6729   00083A                     l2657:
  6730   00083A  5028               	movf	___fldiv@bexp^0,w,c
  6731   00083C  A4D8               	btfss	status,2,c
  6732   00083E  EF23  F004         	goto	u1761
  6733   000842  EF25  F004         	goto	u1760
  6734   000846                     u1761:
  6735   000846  EF2F  F004         	goto	l2665
  6736   00084A                     u1760:
  6737   00084A  0E00               	movlw	0
  6738   00084C  6E11               	movwf	?___fldiv^0,c
  6739   00084E  0E00               	movlw	0
  6740   000850  6E12               	movwf	(?___fldiv+1)^0,c
  6741   000852  0E00               	movlw	0
  6742   000854  6E13               	movwf	(?___fldiv+2)^0,c
  6743   000856  0E00               	movlw	0
  6744   000858  6E14               	movwf	(?___fldiv+3)^0,c
  6745   00085A  EF60  F005         	goto	l1168
  6746   00085E                     l2665:
  6747   00085E  5029               	movf	___fldiv@aexp^0,w,c
  6748   000860  C028  F019         	movff	___fldiv@bexp,??___fldiv
  6749   000864  6A1A               	clrf	(??___fldiv+1)^0,c
  6750   000866  5E19               	subwf	??___fldiv^0,f,c
  6751   000868  0E00               	movlw	0
  6752   00086A  5A1A               	subwfb	(??___fldiv+1)^0,f,c
  6753   00086C  0E7F               	movlw	127
  6754   00086E  2419               	addwf	??___fldiv^0,w,c
  6755   000870  6E22               	movwf	___fldiv@new_exp^0,c
  6756   000872  0E00               	movlw	0
  6757   000874  201A               	addwfc	(??___fldiv+1)^0,w,c
  6758   000876  6E23               	movwf	(___fldiv@new_exp+1)^0,c
  6759   000878  C011  F01D         	movff	___fldiv@b,___fldiv@rem
  6760   00087C  C012  F01E         	movff	___fldiv@b+1,___fldiv@rem+1
  6761   000880  C013  F01F         	movff	___fldiv@b+2,___fldiv@rem+2
  6762   000884  C014  F020         	movff	___fldiv@b+3,___fldiv@rem+3
  6763   000888  0E00               	movlw	0
  6764   00088A  6E11               	movwf	___fldiv@b^0,c
  6765   00088C  0E00               	movlw	0
  6766   00088E  6E12               	movwf	(___fldiv@b+1)^0,c
  6767   000890  0E00               	movlw	0
  6768   000892  6E13               	movwf	(___fldiv@b+2)^0,c
  6769   000894  0E00               	movlw	0
  6770   000896  6E14               	movwf	(___fldiv@b+3)^0,c
  6771   000898  0E00               	movlw	0
  6772   00089A  6E24               	movwf	___fldiv@grs^0,c
  6773   00089C  0E00               	movlw	0
  6774   00089E  6E25               	movwf	(___fldiv@grs+1)^0,c
  6775   0008A0  0E00               	movlw	0
  6776   0008A2  6E26               	movwf	(___fldiv@grs+2)^0,c
  6777   0008A4  0E00               	movlw	0
  6778   0008A6  6E27               	movwf	(___fldiv@grs+3)^0,c
  6779   0008A8  0E00               	movlw	0
  6780   0008AA  6E29               	movwf	___fldiv@aexp^0,c
  6781   0008AC  EF90  F004         	goto	l1170
  6782   0008B0                     l2675:
  6783   0008B0  5029               	movf	___fldiv@aexp^0,w,c
  6784   0008B2  B4D8               	btfsc	status,2,c
  6785   0008B4  EF5E  F004         	goto	u1771
  6786   0008B8  EF60  F004         	goto	u1770
  6787   0008BC                     u1771:
  6788   0008BC  EF77  F004         	goto	l2683
  6789   0008C0                     u1770:
  6790   0008C0  90D8               	bcf	status,0,c
  6791   0008C2  361D               	rlcf	___fldiv@rem^0,f,c
  6792   0008C4  361E               	rlcf	(___fldiv@rem+1)^0,f,c
  6793   0008C6  361F               	rlcf	(___fldiv@rem+2)^0,f,c
  6794   0008C8  3620               	rlcf	(___fldiv@rem+3)^0,f,c
  6795   0008CA  90D8               	bcf	status,0,c
  6796   0008CC  3611               	rlcf	___fldiv@b^0,f,c
  6797   0008CE  3612               	rlcf	(___fldiv@b+1)^0,f,c
  6798   0008D0  3613               	rlcf	(___fldiv@b+2)^0,f,c
  6799   0008D2  3614               	rlcf	(___fldiv@b+3)^0,f,c
  6800   0008D4  AE27               	btfss	(___fldiv@grs+3)^0,7,c
  6801   0008D6  EF6F  F004         	goto	u1781
  6802   0008DA  EF71  F004         	goto	u1780
  6803   0008DE                     u1781:
  6804   0008DE  EF72  F004         	goto	l1173
  6805   0008E2                     u1780:
  6806   0008E2  8011               	bsf	___fldiv@b^0,0,c
  6807   0008E4                     l1173:
  6808   0008E4  90D8               	bcf	status,0,c
  6809   0008E6  3624               	rlcf	___fldiv@grs^0,f,c
  6810   0008E8  3625               	rlcf	(___fldiv@grs+1)^0,f,c
  6811   0008EA  3626               	rlcf	(___fldiv@grs+2)^0,f,c
  6812   0008EC  3627               	rlcf	(___fldiv@grs+3)^0,f,c
  6813   0008EE                     l2683:
  6814   0008EE  5015               	movf	___fldiv@a^0,w,c
  6815   0008F0  5C1D               	subwf	___fldiv@rem^0,w,c
  6816   0008F2  5016               	movf	(___fldiv@a+1)^0,w,c
  6817   0008F4  581E               	subwfb	(___fldiv@rem+1)^0,w,c
  6818   0008F6  5017               	movf	(___fldiv@a+2)^0,w,c
  6819   0008F8  581F               	subwfb	(___fldiv@rem+2)^0,w,c
  6820   0008FA  5018               	movf	(___fldiv@a+3)^0,w,c
  6821   0008FC  5820               	subwfb	(___fldiv@rem+3)^0,w,c
  6822   0008FE  A0D8               	btfss	status,0,c
  6823   000900  EF84  F004         	goto	u1791
  6824   000904  EF86  F004         	goto	u1790
  6825   000908                     u1791:
  6826   000908  EF8F  F004         	goto	l2689
  6827   00090C                     u1790:
  6828   00090C  8C27               	bsf	(___fldiv@grs+3)^0,6,c
  6829   00090E  5015               	movf	___fldiv@a^0,w,c
  6830   000910  5E1D               	subwf	___fldiv@rem^0,f,c
  6831   000912  5016               	movf	(___fldiv@a+1)^0,w,c
  6832   000914  5A1E               	subwfb	(___fldiv@rem+1)^0,f,c
  6833   000916  5017               	movf	(___fldiv@a+2)^0,w,c
  6834   000918  5A1F               	subwfb	(___fldiv@rem+2)^0,f,c
  6835   00091A  5018               	movf	(___fldiv@a+3)^0,w,c
  6836   00091C  5A20               	subwfb	(___fldiv@rem+3)^0,f,c
  6837   00091E                     l2689:
  6838   00091E  2A29               	incf	___fldiv@aexp^0,f,c
  6839   000920                     l1170:
  6840   000920  0E19               	movlw	25
  6841   000922  6429               	cpfsgt	___fldiv@aexp^0,c
  6842   000924  EF96  F004         	goto	u1801
  6843   000928  EF98  F004         	goto	u1800
  6844   00092C                     u1801:
  6845   00092C  EF58  F004         	goto	l2675
  6846   000930                     u1800:
  6847   000930  501D               	movf	___fldiv@rem^0,w,c
  6848   000932  101E               	iorwf	(___fldiv@rem+1)^0,w,c
  6849   000934  101F               	iorwf	(___fldiv@rem+2)^0,w,c
  6850   000936  1020               	iorwf	(___fldiv@rem+3)^0,w,c
  6851   000938  B4D8               	btfsc	status,2,c
  6852   00093A  EFA1  F004         	goto	u1811
  6853   00093E  EFA3  F004         	goto	u1810
  6854   000942                     u1811:
  6855   000942  EFBB  F004         	goto	l2701
  6856   000946                     u1810:
  6857   000946  8024               	bsf	___fldiv@grs^0,0,c
  6858   000948  EFBB  F004         	goto	l2701
  6859   00094C                     l2695:
  6860   00094C  90D8               	bcf	status,0,c
  6861   00094E  3611               	rlcf	___fldiv@b^0,f,c
  6862   000950  3612               	rlcf	(___fldiv@b+1)^0,f,c
  6863   000952  3613               	rlcf	(___fldiv@b+2)^0,f,c
  6864   000954  3614               	rlcf	(___fldiv@b+3)^0,f,c
  6865   000956  AE27               	btfss	(___fldiv@grs+3)^0,7,c
  6866   000958  EFB0  F004         	goto	u1821
  6867   00095C  EFB2  F004         	goto	u1820
  6868   000960                     u1821:
  6869   000960  EFB3  F004         	goto	l1179
  6870   000964                     u1820:
  6871   000964  8011               	bsf	___fldiv@b^0,0,c
  6872   000966                     l1179:
  6873   000966  90D8               	bcf	status,0,c
  6874   000968  3624               	rlcf	___fldiv@grs^0,f,c
  6875   00096A  3625               	rlcf	(___fldiv@grs+1)^0,f,c
  6876   00096C  3626               	rlcf	(___fldiv@grs+2)^0,f,c
  6877   00096E  3627               	rlcf	(___fldiv@grs+3)^0,f,c
  6878   000970  0622               	decf	___fldiv@new_exp^0,f,c
  6879   000972  A0D8               	btfss	status,0,c
  6880   000974  0623               	decf	(___fldiv@new_exp+1)^0,f,c
  6881   000976                     l2701:
  6882   000976  AE13               	btfss	(___fldiv@b+2)^0,7,c
  6883   000978  EFC0  F004         	goto	u1831
  6884   00097C  EFC2  F004         	goto	u1830
  6885   000980                     u1831:
  6886   000980  EFA6  F004         	goto	l2695
  6887   000984                     u1830:
  6888   000984  0E00               	movlw	0
  6889   000986  6E29               	movwf	___fldiv@aexp^0,c
  6890   000988  AE27               	btfss	(___fldiv@grs+3)^0,7,c
  6891   00098A  EFC9  F004         	goto	u1841
  6892   00098E  EFCB  F004         	goto	u1840
  6893   000992                     u1841:
  6894   000992  EFEF  F004         	goto	l1181
  6895   000996                     u1840:
  6896   000996  0EFF               	movlw	255
  6897   000998  1424               	andwf	___fldiv@grs^0,w,c
  6898   00099A  6E19               	movwf	??___fldiv^0,c
  6899   00099C  0EFF               	movlw	255
  6900   00099E  1425               	andwf	(___fldiv@grs+1)^0,w,c
  6901   0009A0  6E1A               	movwf	(??___fldiv+1)^0,c
  6902   0009A2  0EFF               	movlw	255
  6903   0009A4  1426               	andwf	(___fldiv@grs+2)^0,w,c
  6904   0009A6  6E1B               	movwf	(??___fldiv+2)^0,c
  6905   0009A8  0E7F               	movlw	127
  6906   0009AA  1427               	andwf	(___fldiv@grs+3)^0,w,c
  6907   0009AC  6E1C               	movwf	(??___fldiv+3)^0,c
  6908   0009AE  5019               	movf	??___fldiv^0,w,c
  6909   0009B0  101A               	iorwf	(??___fldiv+1)^0,w,c
  6910   0009B2  101B               	iorwf	(??___fldiv+2)^0,w,c
  6911   0009B4  101C               	iorwf	(??___fldiv+3)^0,w,c
  6912   0009B6  B4D8               	btfsc	status,2,c
  6913   0009B8  EFE0  F004         	goto	u1851
  6914   0009BC  EFE2  F004         	goto	u1850
  6915   0009C0                     u1851:
  6916   0009C0  EFE6  F004         	goto	l1182
  6917   0009C4                     u1850:
  6918   0009C4                     l2709:
  6919   0009C4  0E01               	movlw	1
  6920   0009C6  6E29               	movwf	___fldiv@aexp^0,c
  6921   0009C8  EFEF  F004         	goto	l1181
  6922   0009CC                     l1182:
  6923   0009CC  A011               	btfss	___fldiv@b^0,0,c
  6924   0009CE  EFEB  F004         	goto	u1861
  6925   0009D2  EFED  F004         	goto	u1860
  6926   0009D6                     u1861:
  6927   0009D6  EFEF  F004         	goto	l1181
  6928   0009DA                     u1860:
  6929   0009DA  EFE2  F004         	goto	l2709
  6930   0009DE                     l1181:
  6931   0009DE  5029               	movf	___fldiv@aexp^0,w,c
  6932   0009E0  B4D8               	btfsc	status,2,c
  6933   0009E2  EFF5  F004         	goto	u1871
  6934   0009E6  EFF7  F004         	goto	u1870
  6935   0009EA                     u1871:
  6936   0009EA  EF1B  F005         	goto	l2721
  6937   0009EE                     u1870:
  6938   0009EE  0E01               	movlw	1
  6939   0009F0  2611               	addwf	___fldiv@b^0,f,c
  6940   0009F2  0E00               	movlw	0
  6941   0009F4  2212               	addwfc	(___fldiv@b+1)^0,f,c
  6942   0009F6  2213               	addwfc	(___fldiv@b+2)^0,f,c
  6943   0009F8  2214               	addwfc	(___fldiv@b+3)^0,f,c
  6944   0009FA  A014               	btfss	(___fldiv@b+3)^0,0,c
  6945   0009FC  EF02  F005         	goto	u1881
  6946   000A00  EF04  F005         	goto	u1880
  6947   000A04                     u1881:
  6948   000A04  EF1B  F005         	goto	l2721
  6949   000A08                     u1880:
  6950   000A08  C011  F019         	movff	___fldiv@b,??___fldiv
  6951   000A0C  C012  F01A         	movff	___fldiv@b+1,??___fldiv+1
  6952   000A10  C013  F01B         	movff	___fldiv@b+2,??___fldiv+2
  6953   000A14  C014  F01C         	movff	___fldiv@b+3,??___fldiv+3
  6954   000A18  341C               	rlcf	(??___fldiv+3)^0,w,c
  6955   000A1A  321C               	rrcf	(??___fldiv+3)^0,f,c
  6956   000A1C  321B               	rrcf	(??___fldiv+2)^0,f,c
  6957   000A1E  321A               	rrcf	(??___fldiv+1)^0,f,c
  6958   000A20  3219               	rrcf	??___fldiv^0,f,c
  6959   000A22  C019  F011         	movff	??___fldiv,___fldiv@b
  6960   000A26  C01A  F012         	movff	??___fldiv+1,___fldiv@b+1
  6961   000A2A  C01B  F013         	movff	??___fldiv+2,___fldiv@b+2
  6962   000A2E  C01C  F014         	movff	??___fldiv+3,___fldiv@b+3
  6963   000A32  4A22               	infsnz	___fldiv@new_exp^0,f,c
  6964   000A34  2A23               	incf	(___fldiv@new_exp+1)^0,f,c
  6965   000A36                     l2721:
  6966   000A36  BE23               	btfsc	(___fldiv@new_exp+1)^0,7,c
  6967   000A38  EF26  F005         	goto	u1891
  6968   000A3C  5023               	movf	(___fldiv@new_exp+1)^0,w,c
  6969   000A3E  E108               	bnz	u1890
  6970   000A40  2822               	incf	___fldiv@new_exp^0,w,c
  6971   000A42  A0D8               	btfss	status,0,c
  6972   000A44  EF26  F005         	goto	u1891
  6973   000A48  EF28  F005         	goto	u1890
  6974   000A4C                     u1891:
  6975   000A4C  EF33  F005         	goto	l2725
  6976   000A50                     u1890:
  6977   000A50  0E00               	movlw	0
  6978   000A52  6E23               	movwf	(___fldiv@new_exp+1)^0,c
  6979   000A54  6822               	setf	___fldiv@new_exp^0,c
  6980   000A56  0E00               	movlw	0
  6981   000A58  6E11               	movwf	___fldiv@b^0,c
  6982   000A5A  0E00               	movlw	0
  6983   000A5C  6E12               	movwf	(___fldiv@b+1)^0,c
  6984   000A5E  0E00               	movlw	0
  6985   000A60  6E13               	movwf	(___fldiv@b+2)^0,c
  6986   000A62  0E00               	movlw	0
  6987   000A64  6E14               	movwf	(___fldiv@b+3)^0,c
  6988   000A66                     l2725:
  6989   000A66  BE23               	btfsc	(___fldiv@new_exp+1)^0,7,c
  6990   000A68  EF40  F005         	goto	u1900
  6991   000A6C  5023               	movf	(___fldiv@new_exp+1)^0,w,c
  6992   000A6E  E106               	bnz	u1901
  6993   000A70  0422               	decf	___fldiv@new_exp^0,w,c
  6994   000A72  B0D8               	btfsc	status,0,c
  6995   000A74  EF3E  F005         	goto	u1901
  6996   000A78  EF40  F005         	goto	u1900
  6997   000A7C                     u1901:
  6998   000A7C  EF4E  F005         	goto	l2729
  6999   000A80                     u1900:
  7000   000A80  0E00               	movlw	0
  7001   000A82  6E23               	movwf	(___fldiv@new_exp+1)^0,c
  7002   000A84  0E00               	movlw	0
  7003   000A86  6E22               	movwf	___fldiv@new_exp^0,c
  7004   000A88  0E00               	movlw	0
  7005   000A8A  6E11               	movwf	___fldiv@b^0,c
  7006   000A8C  0E00               	movlw	0
  7007   000A8E  6E12               	movwf	(___fldiv@b+1)^0,c
  7008   000A90  0E00               	movlw	0
  7009   000A92  6E13               	movwf	(___fldiv@b+2)^0,c
  7010   000A94  0E00               	movlw	0
  7011   000A96  6E14               	movwf	(___fldiv@b+3)^0,c
  7012   000A98  0E00               	movlw	0
  7013   000A9A  6E21               	movwf	___fldiv@sign^0,c
  7014   000A9C                     l2729:
  7015   000A9C  C022  F028         	movff	___fldiv@new_exp,___fldiv@bexp
  7016   000AA0  A028               	btfss	___fldiv@bexp^0,0,c
  7017   000AA2  EF55  F005         	goto	u1911
  7018   000AA6  EF57  F005         	goto	u1910
  7019   000AAA                     u1911:
  7020   000AAA  EF5A  F005         	goto	l2735
  7021   000AAE                     u1910:
  7022   000AAE  8E13               	bsf	(___fldiv@b+2)^0,7,c
  7023   000AB0  EF5B  F005         	goto	l2737
  7024   000AB4                     l2735:
  7025   000AB4  9E13               	bcf	(___fldiv@b+2)^0,7,c
  7026   000AB6                     l2737:
  7027   000AB6  90D8               	bcf	status,0,c
  7028   000AB8  3028               	rrcf	___fldiv@bexp^0,w,c
  7029   000ABA  6E14               	movwf	(___fldiv@b+3)^0,c
  7030   000ABC  EF11  F004         	goto	l2651
  7031   000AC0                     l1168:
  7032   000AC0  0012               	return		;funcret
  7033   000AC2                     __end_of___fldiv:
  7034                           	callstack 0
  7035                           
  7036 ;; *************** function _LowISR *****************
  7037 ;; Defined at:
  7038 ;;		line 23 in file "interrupts.c"
  7039 ;; Parameters:    Size  Location     Type
  7040 ;;		None
  7041 ;; Auto vars:     Size  Location     Type
  7042 ;;		None
  7043 ;; Return value:  Size  Location     Type
  7044 ;;                  1    wreg      void 
  7045 ;; Registers used:
  7046 ;;		status,2, status,0
  7047 ;; Tracked objects:
  7048 ;;		On entry : 0/0
  7049 ;;		On exit  : 0/0
  7050 ;;		Unchanged: 0/0
  7051 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7052 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7053 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7054 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7055 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7056 ;;Total ram usage:        2 bytes
  7057 ;; Hardware stack levels used: 1
  7058 ;; This function calls:
  7059 ;;		Nothing
  7060 ;; This function is called by:
  7061 ;;		Interrupt level 1
  7062 ;; This function uses a non-reentrant model
  7063 ;;
  7064                           
  7065                           	psect	intcodelo
  7066   000018                     __pintcodelo:
  7067                           	callstack 0
  7068   000018                     _LowISR:
  7069                           	callstack 22
  7070                           
  7071                           ;incstack = 0
  7072   000018  805C               	bsf	int$flags,0,c	;set compiler interrupt flag (level 1)
  7073   00001A  CFD8 F001          	movff	status,??_LowISR
  7074   00001E  CFE0 F002          	movff	bsr,??_LowISR+1
  7075   000022                     
  7076                           ;interrupts.c: 25:     if (PIR0bits.TMR0IF) {
  7077   000022  010E               	movlb	14	; () banked
  7078   000024  AB33               	btfss	51,5,b	;volatile
  7079   000026  EF17  F000         	goto	i1u241_21
  7080   00002A  EF19  F000         	goto	i1u241_20
  7081   00002E                     i1u241_21:
  7082   00002E  EF1E  F000         	goto	i1l422
  7083   000032                     i1u241_20:
  7084   000032                     
  7085                           ; BSR set to: 14
  7086                           ;interrupts.c: 26:         timer_val += 1;
  7087   000032  0100               	movlb	0	; () banked
  7088   000034  4BB0               	infsnz	_timer_val& (0+255),f,b
  7089   000036  2BB1               	incf	(_timer_val+1)& (0+255),f,b
  7090   000038                     
  7091                           ; BSR set to: 0
  7092                           ;interrupts.c: 27:         PIR0bits.TMR0IF = 0;
  7093   000038  010E               	movlb	14	; () banked
  7094   00003A  9B33               	bcf	51,5,b	;volatile
  7095   00003C                     i1l422:
  7096                           
  7097                           ; BSR set to: 14
  7098   00003C  C002  FFE0         	movff	??_LowISR+1,bsr
  7099   000040  C001  FFD8         	movff	??_LowISR,status
  7100   000044  905C               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  7101   000046  0010               	retfie	
  7102   000048                     __end_of_LowISR:
  7103                           	callstack 0
  7104   000000                     
  7105                           	psect	rparam
  7106   000000                     
  7107                           	psect	temp
  7108   00005C                     btemp:
  7109                           	callstack 0
  7110   00005C                     	ds	1
  7111   000000                     int$flags	set	btemp
  7112   000000                     wtemp8	set	btemp+1
  7113   000000                     ttemp5	set	btemp+1
  7114   000000                     ttemp6	set	btemp+4
  7115   000000                     ttemp7	set	btemp+8
  7116                           
  7117                           	psect	idloc
  7118                           
  7119                           ;Config register IDLOC0 @ 0x200000
  7120                           ;	unspecified, using default values
  7121   200000                     	org	2097152
  7122   200000  0FFF               	dw	4095
  7123                           
  7124                           ;Config register IDLOC1 @ 0x200002
  7125                           ;	unspecified, using default values
  7126   200002                     	org	2097154
  7127   200002  0FFF               	dw	4095
  7128                           
  7129                           ;Config register IDLOC2 @ 0x200004
  7130                           ;	unspecified, using default values
  7131   200004                     	org	2097156
  7132   200004  0FFF               	dw	4095
  7133                           
  7134                           ;Config register IDLOC3 @ 0x200006
  7135                           ;	unspecified, using default values
  7136   200006                     	org	2097158
  7137   200006  0FFF               	dw	4095
  7138                           
  7139                           ;Config register IDLOC4 @ 0x200008
  7140                           ;	unspecified, using default values
  7141   200008                     	org	2097160
  7142   200008  0FFF               	dw	4095
  7143                           
  7144                           ;Config register IDLOC5 @ 0x20000A
  7145                           ;	unspecified, using default values
  7146   20000A                     	org	2097162
  7147   20000A  0FFF               	dw	4095
  7148                           
  7149                           ;Config register IDLOC6 @ 0x20000C
  7150                           ;	unspecified, using default values
  7151   20000C                     	org	2097164
  7152   20000C  0FFF               	dw	4095
  7153                           
  7154                           ;Config register IDLOC7 @ 0x20000E
  7155                           ;	unspecified, using default values
  7156   20000E                     	org	2097166
  7157   20000E  0FFF               	dw	4095
  7158                           
  7159                           	psect	config
  7160                           
  7161                           ;Config register CONFIG1L @ 0x300000
  7162                           ;	External Oscillator mode Selection bits
  7163                           ;	FEXTOSC = HS, HS (crystal oscillator) above 8 MHz; PFM set to high power
  7164                           ;	Power-up default value for COSC bits
  7165                           ;	RSTOSC = EXTOSC_4PLL, EXTOSC with 4x PLL, with EXTOSC operating per FEXTOSC bits
  7166   300000                     	org	3145728
  7167   300000  AA                 	db	170
  7168                           
  7169                           ;Config register CONFIG1H @ 0x300001
  7170                           ;	unspecified, using default values
  7171                           ;	Clock Out Enable bit
  7172                           ;	CLKOUTEN = 0x1, unprogrammed default
  7173                           ;	Clock Switch Enable bit
  7174                           ;	CSWEN = 0x1, unprogrammed default
  7175                           ;	Fail-Safe Clock Monitor Enable bit
  7176                           ;	FCMEN = 0x1, unprogrammed default
  7177   300001                     	org	3145729
  7178   300001  FF                 	db	255
  7179                           
  7180                           ;Config register CONFIG2L @ 0x300002
  7181                           ;	unspecified, using default values
  7182                           ;	Master Clear Enable bit
  7183                           ;	MCLRE = 0x1, unprogrammed default
  7184                           ;	Power-up Timer Enable bit
  7185                           ;	PWRTE = 0x1, unprogrammed default
  7186                           ;	Low-power BOR enable bit
  7187                           ;	LPBOREN = 0x1, unprogrammed default
  7188                           ;	Brown-out Reset Enable bits
  7189                           ;	BOREN = 0x3, unprogrammed default
  7190   300002                     	org	3145730
  7191   300002  FF                 	db	255
  7192                           
  7193                           ;Config register CONFIG2H @ 0x300003
  7194                           ;	unspecified, using default values
  7195                           ;	Brown Out Reset Voltage selection bits
  7196                           ;	BORV = 0x3, unprogrammed default
  7197                           ;	ZCD Disable bit
  7198                           ;	ZCD = 0x1, unprogrammed default
  7199                           ;	PPSLOCK bit One-Way Set Enable bit
  7200                           ;	PPS1WAY = 0x1, unprogrammed default
  7201                           ;	Stack Full/Underflow Reset Enable bit
  7202                           ;	STVREN = 0x1, unprogrammed default
  7203                           ;	Debugger Enable bit
  7204                           ;	DEBUG = 0x1, unprogrammed default
  7205                           ;	Extended Instruction Set Enable bit
  7206                           ;	XINST = 0x1, unprogrammed default
  7207   300003                     	org	3145731
  7208   300003  FF                 	db	255
  7209                           
  7210                           ;Config register CONFIG3L @ 0x300004
  7211                           ;	WDT Period Select bits
  7212                           ;	WDTCPS = WDTCPS_31, Divider ratio 1:65536; software control of WDTPS
  7213                           ;	WDT operating mode
  7214                           ;	WDTE = OFF, WDT Disabled
  7215   300004                     	org	3145732
  7216   300004  9F                 	db	159
  7217                           
  7218                           ;Config register CONFIG3H @ 0x300005
  7219                           ;	unspecified, using default values
  7220                           ;	WDT Window Select bits
  7221                           ;	WDTCWS = 0x7, unprogrammed default
  7222                           ;	WDT input clock selector
  7223                           ;	WDTCCS = 0x7, unprogrammed default
  7224   300005                     	org	3145733
  7225   300005  FF                 	db	255
  7226                           
  7227                           ;Config register CONFIG4L @ 0x300006
  7228                           ;	unspecified, using default values
  7229                           ;	Write Protection Block 0
  7230                           ;	WRT0 = 0x1, unprogrammed default
  7231                           ;	Write Protection Block 1
  7232                           ;	WRT1 = 0x1, unprogrammed default
  7233                           ;	Write Protection Block 2
  7234                           ;	WRT2 = 0x1, unprogrammed default
  7235                           ;	Write Protection Block 3
  7236                           ;	WRT3 = 0x1, unprogrammed default
  7237                           ;	Write Protection Block 3
  7238                           ;	WRT4 = 0x1, unprogrammed default
  7239                           ;	Write Protection Block 3
  7240                           ;	WRT5 = 0x1, unprogrammed default
  7241                           ;	Write Protection Block 3
  7242                           ;	WRT6 = 0x1, unprogrammed default
  7243                           ;	Write Protection Block 3
  7244                           ;	WRT7 = 0x1, unprogrammed default
  7245   300006                     	org	3145734
  7246   300006  FF                 	db	255
  7247                           
  7248                           ;Config register CONFIG4H @ 0x300007
  7249                           ;	unspecified, using default values
  7250                           ;	Configuration Register Write Protection bit
  7251                           ;	WRTC = 0x1, unprogrammed default
  7252                           ;	Boot Block Write Protection bit
  7253                           ;	WRTB = 0x1, unprogrammed default
  7254                           ;	Data EEPROM Write Protection bit
  7255                           ;	WRTD = 0x1, unprogrammed default
  7256                           ;	Scanner Enable bit
  7257                           ;	SCANE = 0x1, unprogrammed default
  7258                           ;	Low Voltage Programming Enable bit
  7259                           ;	LVP = 0x1, unprogrammed default
  7260   300007                     	org	3145735
  7261   300007  FF                 	db	255
  7262                           
  7263                           ;Config register CONFIG5L @ 0x300008
  7264                           ;	unspecified, using default values
  7265                           ;	UserNVM Program Memory Code Protection bit
  7266                           ;	CP = 0x1, unprogrammed default
  7267                           ;	DataNVM Memory Code Protection bit
  7268                           ;	CPD = 0x1, unprogrammed default
  7269   300008                     	org	3145736
  7270   300008  FF                 	db	255
  7271                           
  7272                           ;Config register CONFIG5H @ 0x300009
  7273                           ;	unspecified, using default values
  7274   300009                     	org	3145737
  7275   300009  FF                 	db	255
  7276                           
  7277                           ;Config register CONFIG6L @ 0x30000A
  7278                           ;	unspecified, using default values
  7279                           ;	Table Read Protection Block 0
  7280                           ;	EBTR0 = 0x1, unprogrammed default
  7281                           ;	Table Read Protection Block 1
  7282                           ;	EBTR1 = 0x1, unprogrammed default
  7283                           ;	Table Read Protection Block 2
  7284                           ;	EBTR2 = 0x1, unprogrammed default
  7285                           ;	Table Read Protection Block 3
  7286                           ;	EBTR3 = 0x1, unprogrammed default
  7287                           ;	Table Read Protection Block 4
  7288                           ;	EBTR4 = 0x1, unprogrammed default
  7289                           ;	Table Read Protection Block 5
  7290                           ;	EBTR5 = 0x1, unprogrammed default
  7291                           ;	Table Read Protection Block 6
  7292                           ;	EBTR6 = 0x1, unprogrammed default
  7293                           ;	Table Read Protection Block 7
  7294                           ;	EBTR7 = 0x1, unprogrammed default
  7295   30000A                     	org	3145738
  7296   30000A  FF                 	db	255
  7297                           
  7298                           ;Config register CONFIG6H @ 0x30000B
  7299                           ;	unspecified, using default values
  7300                           ;	Boot Block Table Read Protection bit
  7301                           ;	EBTRB = 0x1, unprogrammed default
  7302   30000B                     	org	3145739
  7303   30000B  FF                 	db	255
  7304                           tosu	equ	0xFFF
  7305                           tosh	equ	0xFFE
  7306                           tosl	equ	0xFFD
  7307                           stkptr	equ	0xFFC
  7308                           pclatu	equ	0xFFB
  7309                           pclath	equ	0xFFA
  7310                           pcl	equ	0xFF9
  7311                           tblptru	equ	0xFF8
  7312                           tblptrh	equ	0xFF7
  7313                           tblptrl	equ	0xFF6
  7314                           tablat	equ	0xFF5
  7315                           prodh	equ	0xFF4
  7316                           prodl	equ	0xFF3
  7317                           indf0	equ	0xFEF
  7318                           postinc0	equ	0xFEE
  7319                           postdec0	equ	0xFED
  7320                           preinc0	equ	0xFEC
  7321                           plusw0	equ	0xFEB
  7322                           fsr0h	equ	0xFEA
  7323                           fsr0l	equ	0xFE9
  7324                           wreg	equ	0xFE8
  7325                           indf1	equ	0xFE7
  7326                           postinc1	equ	0xFE6
  7327                           postdec1	equ	0xFE5
  7328                           preinc1	equ	0xFE4
  7329                           plusw1	equ	0xFE3
  7330                           fsr1h	equ	0xFE2
  7331                           fsr1l	equ	0xFE1
  7332                           bsr	equ	0xFE0
  7333                           indf2	equ	0xFDF
  7334                           postinc2	equ	0xFDE
  7335                           postdec2	equ	0xFDD
  7336                           preinc2	equ	0xFDC
  7337                           plusw2	equ	0xFDB
  7338                           fsr2h	equ	0xFDA
  7339                           fsr2l	equ	0xFD9
  7340                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    0
    Data        6
    BSS         122
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     65      91
    BANK0           160      2     104
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          234      0       0

Pointer List with Targets:

    motor_init@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> motorR(BANK0[9]), 

    motor_init@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> motorL(BANK0[9]), 

    buggy_color_response@c	PTR struct colors size(2) Largest target is 20
		 -> color(COMRAM[20]), 

    READcolor@c	PTR struct colors size(2) Largest target is 20
		 -> color(COMRAM[20]), 

    movement_return@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> motorR(BANK0[9]), 

    movement_return@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> motorL(BANK0[9]), 

    movement@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> motorR(BANK0[9]), 

    movement@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> motorL(BANK0[9]), 

    reverse_pink@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> motorR(BANK0[9]), 

    reverse_pink@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> motorL(BANK0[9]), 

    reverse_yellow@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> motorR(BANK0[9]), 

    reverse_yellow@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> motorL(BANK0[9]), 

    space@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllhll[1]), CCPR2H(BITBIGSFRhhhllll[1]), 

    space@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllhll[1]), CCPR1H(BITBIGSFRhhhllll[1]), 

    space@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllhll[1]), CCPR2H(BITBIGSFRhhhllll[1]), 

    space@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllhll[1]), CCPR1H(BITBIGSFRhhhllll[1]), 

    space@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> motorR(BANK0[9]), 

    space@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> motorL(BANK0[9]), 

    right_45@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllhll[1]), CCPR2H(BITBIGSFRhhhllll[1]), 

    right_45@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllhll[1]), CCPR1H(BITBIGSFRhhhllll[1]), 

    right_45@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllhll[1]), CCPR2H(BITBIGSFRhhhllll[1]), 

    right_45@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllhll[1]), CCPR1H(BITBIGSFRhhhllll[1]), 

    right_45@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> motorR(BANK0[9]), 

    right_45@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> motorL(BANK0[9]), 

    left_45@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllhll[1]), CCPR2H(BITBIGSFRhhhllll[1]), 

    left_45@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllhll[1]), CCPR1H(BITBIGSFRhhhllll[1]), 

    left_45@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllhll[1]), CCPR2H(BITBIGSFRhhhllll[1]), 

    left_45@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllhll[1]), CCPR1H(BITBIGSFRhhhllll[1]), 

    left_45@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> motorR(BANK0[9]), 

    left_45@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> motorL(BANK0[9]), 

    stop@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllhll[1]), CCPR2H(BITBIGSFRhhhllll[1]), 

    stop@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllhll[1]), CCPR1H(BITBIGSFRhhhllll[1]), 

    stop@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> motorR(BANK0[9]), 

    stop@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllhll[1]), CCPR2H(BITBIGSFRhhhllll[1]), 

    stop@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllhll[1]), CCPR1H(BITBIGSFRhhhllll[1]), 

    stop@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> motorL(BANK0[9]), 

    reverse@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllhll[1]), CCPR2H(BITBIGSFRhhhllll[1]), 

    reverse@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllhll[1]), CCPR1H(BITBIGSFRhhhllll[1]), 

    reverse@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllhll[1]), CCPR2H(BITBIGSFRhhhllll[1]), 

    reverse@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllhll[1]), CCPR1H(BITBIGSFRhhhllll[1]), 

    reverse@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> motorR(BANK0[9]), 

    reverse@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> motorL(BANK0[9]), 

    forward@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllhll[1]), CCPR2H(BITBIGSFRhhhllll[1]), 

    forward@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllhll[1]), CCPR1H(BITBIGSFRhhhllll[1]), 

    forward@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllhll[1]), CCPR2H(BITBIGSFRhhhllll[1]), 

    forward@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllhll[1]), CCPR1H(BITBIGSFRhhhllll[1]), 

    forward@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> motorR(BANK0[9]), 

    forward@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> motorL(BANK0[9]), 

    setMotorPWM@m.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllhll[1]), CCPR2H(BITBIGSFRhhhllll[1]), 

    setMotorPWM@m.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllhll[1]), CCPR1H(BITBIGSFRhhhllll[1]), 

    setMotorPWM@m	PTR struct DC_motor size(2) Largest target is 11
		 -> motorR(BANK0[9]), motorL(BANK0[9]), 

    return_home@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> motorR(BANK0[9]), 

    return_home@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> motorL(BANK0[9]), 

    buggy_color_response@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> motorR(BANK0[9]), 

    buggy_color_response@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> motorL(BANK0[9]), 

    motorR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllhll[1]), CCPR2H(BITBIGSFRhhhllll[1]), 

    motorR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllhll[1]), CCPR1H(BITBIGSFRhhhllll[1]), 

    S236DC_motor$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllhll[1]), CCPR2H(BITBIGSFRhhhllll[1]), 

    motorL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllhll[1]), CCPR2H(BITBIGSFRhhhllll[1]), 

    S236DC_motor$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllhll[1]), CCPR1H(BITBIGSFRhhhllll[1]), 

    motorL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllhll[1]), CCPR1H(BITBIGSFRhhhllll[1]), 


Critical Paths under _main in COMRAM

    _main->_buggy_color_response
    _complete_initialisation->_color_click_init
    _color_click_init->_color_writetoaddr
    _color_writetoaddr->_I2C_2_Master_Write
    _buggy_color_response->_return_home
    _return_home->_movement_return
    _movement_return->_reverse_pink
    _movement_return->_reverse_yellow
    _reverse_yellow->_left_45
    _reverse_pink->_right_45
    _forward->_stop
    _movement->_left_45
    _movement->_right_45
    _space->_stop
    _right_45->_stop
    _reverse->_stop
    _left_45->_stop
    _stop->_setMotorPWM
    _setMotorPWM->___lwdiv
    ___lwdiv->___wmul
    _READcolor->___fldiv
    _color_read_Red->_I2C_2_Master_Read
    _color_read_Green->_I2C_2_Master_Read
    _color_read_Clear->_I2C_2_Master_Read
    _color_read_Blue->_I2C_2_Master_Read
    _I2C_2_Master_Write->_I2C_2_Master_Idle
    _I2C_2_Master_Stop->_I2C_2_Master_Idle
    _I2C_2_Master_Start->_I2C_2_Master_Idle
    _I2C_2_Master_RepStart->_I2C_2_Master_Idle
    _I2C_2_Master_Read->_I2C_2_Master_Idle
    ___fldiv->___xxtofl

Critical Paths under _LowISR in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _LowISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _LowISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _LowISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _LowISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _LowISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _LowISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _LowISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _LowISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _LowISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _LowISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _LowISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _LowISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _LowISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _LowISR in BANK13

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0  336624
                                              0 BANK0      2     2      0
               _buggy_color_response
            _complete_initialisation
                        _timer_reset
 ---------------------------------------------------------------------------------
 (1) _complete_initialisation                              0     0      0     544
                           _ADC_init
                  _I2C_2_Master_Init
                        _Timer0_init
                     _buggyLEDs_init
                   _color_click_init
                    _initDCmotorsPWM
                         _initUSART4
                    _interrupts_init
                         _motor_init
                         _ports_init
 ---------------------------------------------------------------------------------
 (2) _ports_init                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _motor_init                                           4     0      4     152
                                              2 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (2) _interrupts_init                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _initUSART4                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _initDCmotorsPWM                                      2     0      2      98
                                              2 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _color_click_init                                     1     1      0     294
                                              6 COMRAM     1     1      0
                  _I2C_2_Master_Init
                  _color_writetoaddr
 ---------------------------------------------------------------------------------
 (3) _color_writetoaddr                                    2     1      1     294
                                              4 COMRAM     2     1      1
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Init                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _buggyLEDs_init                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Timer0_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _buggy_color_response                                 8     2      6  336080
                                             57 COMRAM     8     2      6
                          _READcolor
                             ___flge
                            _forward
                           _movement
                    _movement_return
                        _return_home
                              _space
                               _stop
                        _timer_reset
 ---------------------------------------------------------------------------------
 (1) _timer_reset                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _return_home                                          6     2      4  134780
                                             51 COMRAM     6     2      4
                      _delay_ms_func
                            _forward
                    _movement_return
                            _reverse
                               _stop
 ---------------------------------------------------------------------------------
 (3) _movement_return                                      6     0      6  103225
                                             45 COMRAM     6     0      6
                            _left_45
                       _reverse_pink
                     _reverse_yellow
                           _right_45
                               _stop
 ---------------------------------------------------------------------------------
 (4) _reverse_yellow                                       6     2      4   33239
                                             39 COMRAM     6     2      4
                            _left_45
                            _reverse
                               _stop
 ---------------------------------------------------------------------------------
 (4) _reverse_pink                                         6     2      4   33847
                                             39 COMRAM     6     2      4
                            _reverse
                           _right_45
                               _stop
 ---------------------------------------------------------------------------------
 (3) _forward                                              5     1      4   11290
                                             27 COMRAM     5     1      4
                        _setMotorPWM
                               _stop
 ---------------------------------------------------------------------------------
 (3) _delay_ms_func                                        6     4      2     122
                                              2 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (2) _movement                                             8     2      6   60515
                                             39 COMRAM     8     2      6
                            _left_45
                            _reverse
                           _right_45
                              _space
                               _stop
 ---------------------------------------------------------------------------------
 (2) _space                                                6     2      4   11138
                                             27 COMRAM     6     2      4
                        _setMotorPWM
                               _stop
 ---------------------------------------------------------------------------------
 (4) _right_45                                            12     4      8   13836
                                             27 COMRAM    12     4      8
                       _custom_delay
                        _setMotorPWM
                               _stop
 ---------------------------------------------------------------------------------
 (3) _reverse                                              5     1      4   11746
                                             27 COMRAM     5     1      4
                        _setMotorPWM
                               _stop
 ---------------------------------------------------------------------------------
 (5) _left_45                                             12     4      8   13228
                                             27 COMRAM    12     4      8
                       _custom_delay
                        _setMotorPWM
                               _stop
 ---------------------------------------------------------------------------------
 (2) _stop                                                 6     2      4    7937
                                             21 COMRAM     6     2      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (3) _setMotorPWM                                          6     4      2    2589
                                             15 COMRAM     6     4      2
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     355
                                              2 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              7     3      4     358
                                              8 COMRAM     7     3      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (5) _custom_delay                                         5     3      2     198
                                              2 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (2) ___flge                                              12     4      8    3222
                                              2 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (2) _READcolor                                            2     0      2    3085
                                             41 COMRAM     2     0      2
                            ___fldiv
                           ___xxtofl
                    _color_read_Blue
                   _color_read_Clear
                   _color_read_Green
                     _color_read_Red
 ---------------------------------------------------------------------------------
 (3) _color_read_Red                                       7     5      2     113
                                              6 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (3) _color_read_Green                                     7     5      2     113
                                              6 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (3) _color_read_Clear                                     7     5      2     113
                                              6 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (3) _color_read_Blue                                      7     5      2     113
                                              6 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (4) _I2C_2_Master_Write                                   1     1      0      22
                                              3 COMRAM     1     1      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (4) _I2C_2_Master_Stop                                    0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (4) _I2C_2_Master_Start                                   0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (4) _I2C_2_Master_RepStart                                0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (4) _I2C_2_Master_Read                                    3     3      0      45
                                              3 COMRAM     3     3      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (5) _I2C_2_Master_Idle                                    1     1      0       0
                                              2 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) ___xxtofl                                            14    10      4     778
                                              2 COMRAM    14    10      4
 ---------------------------------------------------------------------------------
 (3) ___fldiv                                             25    17      8    1703
                                             16 COMRAM    25    17      8
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _LowISR                                               2     2      0       0
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _buggy_color_response
     _READcolor
       ___fldiv
         ___xxtofl (ARG)
       ___xxtofl
       _color_read_Blue
         _I2C_2_Master_Read
           _I2C_2_Master_Idle
         _I2C_2_Master_RepStart
           _I2C_2_Master_Idle
         _I2C_2_Master_Start
           _I2C_2_Master_Idle
         _I2C_2_Master_Stop
           _I2C_2_Master_Idle
         _I2C_2_Master_Write
           _I2C_2_Master_Idle
       _color_read_Clear
         _I2C_2_Master_Read
         _I2C_2_Master_RepStart
         _I2C_2_Master_Start
         _I2C_2_Master_Stop
         _I2C_2_Master_Write
       _color_read_Green
         _I2C_2_Master_Read
         _I2C_2_Master_RepStart
         _I2C_2_Master_Start
         _I2C_2_Master_Stop
         _I2C_2_Master_Write
       _color_read_Red
         _I2C_2_Master_Read
         _I2C_2_Master_RepStart
         _I2C_2_Master_Start
         _I2C_2_Master_Stop
         _I2C_2_Master_Write
     ___flge
     _forward
       _setMotorPWM
         ___lwdiv
           ___wmul (ARG)
         ___wmul
       _stop
         _setMotorPWM
     _movement
       _left_45
         _custom_delay
         _setMotorPWM
         _stop
       _reverse
         _setMotorPWM
         _stop
       _right_45
         _custom_delay
         _setMotorPWM
         _stop
       _space
         _setMotorPWM
         _stop
       _stop
     _movement_return
       _left_45
       _reverse_pink
         _reverse
         _right_45
         _stop
       _reverse_yellow
         _left_45
         _reverse
         _stop
       _right_45
       _stop
     _return_home
       _delay_ms_func
       _forward
       _movement_return
       _reverse
       _stop
     _space
     _stop
     _timer_reset
   _complete_initialisation
     _ADC_init
     _I2C_2_Master_Init
     _Timer0_init
     _buggyLEDs_init
     _color_click_init
       _I2C_2_Master_Init
       _color_writetoaddr
         _I2C_2_Master_Start
         _I2C_2_Master_Stop
         _I2C_2_Master_Write
     _initDCmotorsPWM
     _initUSART4
     _interrupts_init
     _motor_init
     _ports_init
   _timer_reset

 _LowISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             DE9      0       0      66        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK13           EA      0       0      30        0.0%
BANK13              EA      0       0      31        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      2      68       5       65.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     41      5B       1       96.8%
BITBIGSFRhlllhl     37      0       0      47        0.0%
BITBIGSFRhlllhh     31      0       0      45        0.0%
BITBIGSFRlllhll     2A      0       0      58        0.0%
BITBIGSFRlllll      26      0       0      64        0.0%
BITBIGSFRllhh       20      0       0      50        0.0%
BITBIGSFRlllhhh     1E      0       0      52        0.0%
BITBIGSFRhhhhlh     1B      0       0      33        0.0%
BITBIGSFRhhhlll     17      0       0      38        0.0%
BITBIGSFRhlllhh     14      0       0      42        0.0%
BITBIGSFRhhhhll     13      0       0      34        0.0%
BITBIGSFRlllhhh     11      0       0      53        0.0%
BITBIGSFRhhhlhh      E      0       0      35        0.0%
BITBIGSFRhhhhh       D      0       0      32        0.0%
BITBIGSFRllhl        C      0       0      51        0.0%
BITBIGSFRlllhll      9      0       0      61        0.0%
BITBIGSFRlllhll      9      0       0      60        0.0%
BITBIGSFRhlllll      8      0       0      48        0.0%
BITBIGSFRhlllhh      6      0       0      44        0.0%
BITBIGSFRllllh       6      0       0      63        0.0%
BITBIGSFRlllhlh      6      0       0      57        0.0%
BITBIGSFRlllhlh      5      0       0      56        0.0%
BITBIGSFRhhhlll      5      0       0      39        0.0%
BITBIGSFRhlllhh      3      0       0      43        0.0%
BITBIGSFRlllhll      3      0       0      59        0.0%
BITBIGSFRlllhhl      3      0       0      55        0.0%
BITBIGSFRhlllhl      2      0       0      46        0.0%
BITBIGSFRhhhllh      2      0       0      37        0.0%
BITBIGSFRhhhlhl      1      0       0      36        0.0%
BITBIGSFRlllhhh      1      0       0      54        0.0%
BITBIGSFRhllhl       1      0       0      41        0.0%
BITBIGSFRhlh         1      0       0      40        0.0%
BITBIGSFRlllhll      1      0       0      62        0.0%
BITBIGSFRlh          1      0       0      49        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      C3      65        0.0%
DATA                 0      0      C3       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.40 build 20220703182018 
Symbol Table                                                                                   Thu Mar 16 03:10:37 2023

                 _color_read_Red 1F6C                     ___fldiv@aexp 0029  
                   ___fldiv@bexp 0028                     ___fldiv@sign 0021  
                _color_read_Blue 205C                               l30 225A  
                             l33 2280                               l42 2390  
                             l27 2258                               l36 239A  
                             l45 2386                               l39 23A4  
                             l48 217A                               bsr 000FE0  
            ___wmul@multiplicand 0005                 custom_delay@temp 0003  
               _color_read_Clear 200C                 _color_read_Green 1FBC  
        _complete_initialisation 20F8                delay_ms_func@time 0003  
                            l113 222E                              l122 20AA  
                            l131 17F0                              l116 2306  
                            l125 200A                              l301 1C7A  
                            l119 1FBA                              l128 205A  
                            l312 16B6                              l152 12D2  
                            l144 0726                              l323 157A  
                            l331 19F6                              l155 21A4  
                            l403 1F0E                              l510 21FA  
                            l158 21BA                              l334 1D0C  
                            l270 1E2E                              l183 22E6  
                            l416 237A                              l280 20F6  
                            l337 1D9E                              l507 21DC  
                            l291 1B98                              l347 0DDC  
                            l283 1AAE                              l435 2326  
                            l277 143E                              l357 0FA8  
                            l438 236A                              l295 1BC8  
                            l287 1ADE                              l463 22C6  
                            l296 1BCA                              l288 1AE0  
                            l466 2356                              l562 2138  
                            l394 1EA8                              l398 1EC4  
                            l577 2340                              l586 22A6  
                            l851 18AE                              l856 18F4  
                            wreg 000FE8                    return_home@mL 0034  
                  return_home@mR 0036                             l1241 1000  
                           l3001 00C0                             l1170 0920  
                           l3011 0160                             l3003 00D8  
                           l1244 115C                             l1084 1EA2  
                           l1181 09DE                             l1173 08E4  
                           l1077 1E9A                             l3101 0654  
                           l3021 01F2                             l3013 0192  
                           l3005 00E4                             l1182 09CC  
                           l1255 10F4                             l2311 1C2E  
                           l2303 1BF6                             l3111 06C0  
                           l3103 0668                             l3031 0284  
                           l3023 0224                             l3015 01A2  
                           l3007 00FC                             l1168 0AC0  
                           l1248 1098                             l2321 1C78  
                           l2313 1C3A                             l2305 1C0E  
                           l2401 1464                             l3113 06D4  
                           l3105 0680                             l3033 02B6  
                           l3041 0316                             l3025 0234  
                           l3017 01A4                             l3009 012E  
                           l3121 20F8                             l1179 0966  
                           l2331 226A                             l2323 21BC  
                           l2251 229E                             l2315 1C48  
                           l2307 1C1A                             l2411 14A6  
                           l2403 1474                             l3115 06EC  
                           l3107 0694                             l3043 0348  
                           l3051 03A8                             l3035 02E8  
                           l3027 0236                             l3019 01C0  
                           l3131 2128                             l3123 2104  
                           l2325 21C8                             l2261 1E52  
                           l2317 1C60                             l2309 1C26  
                           l2341 1B34                             l2333 1AE2  
                           l2421 14F0                             l2413 14BE  
                           l2405 1476                             l3109 06AC  
                           l3117 070A                             l3061 0450  
                           l3053 03DA                             l3045 037A  
                           l3037 02F8                             l3029 0252  
                           l3133 212C                             l3125 2108  
                           l3221 1EEA                             l2503 205C  
                           l2511 2002                             l2327 21D8  
                           l2271 1E8C                             l2263 1E5A  
                           l2255 1E30                             l2319 1C6C  
                           l2351 1B84                             l2343 1B4C  
                           l2335 1AF6                             l2431 1556  
                           l2423 1508                             l2415 14CA  
                           l2407 1482                             l3071 0512  
                           l3055 040C                             l3063 046C  
                           l3047 038A                             l3039 02FA  
                           l3119 0712                             l3135 2130  
                           l3127 210C                             l3223 1EEE  
                           l3215 1EA4                             l2329 225A  
                           l2441 239C                             l2505 20A2  
                           l2273 1E8E                             l2265 1E68  
                           l2257 1E38                             l2249 2282  
                           l2281 1344                             l2361 15A0  
                           l2353 1B90                             l2345 1B56  
                           l2337 1B06                             l2433 1558  
                           l2425 1520                             l2417 14D6  
                           l2409 149A                             l2601 217C  
                           l2521 19F8                             l3081 05C6  
                           l3073 0514                             l3065 049E  
                           l3057 043E                             l3049 038C  
                           l3137 2134                             l3129 2120  
                           l3217 1EB6                             l2611 0742  
                           l2443 23A0                             l2451 2382  
                           l2515 200C                             l2275 1E94  
                           l2267 1E6E                             l2259 1E4A  
                           l2291 13FE                             l2283 1358  
                           l2371 15E2                             l2363 15B0  
                           l2355 1BB0                             l2347 1B6E  
                           l2339 1B16                             l2427 152C  
                           l2419 14E2                             l2435 155C  
                           l2603 2188                             l2531 1A62  
                           l2523 1A0C                             l3091 063C  
                           l3083 05D6                             l3067 04D0  
                           l3075 0530                             l3059 044E  
                           l3219 1ED2                             l2701 0976  
                           l2621 0776                             l2613 0744  
                           l2461 2176                             l2453 213C  
                           l2437 2392                             l2445 2388  
                           l2517 2052                             l2509 1FBC  
                           l2269 1E84                             l2285 135C  
                           l2277 12D4                             l2293 1BCC  
                           l2381 162C                             l2373 15FA  
                           l2365 15B2                             l2357 157C  
                           l2349 1B78                             l2429 1540  
                           l2605 21A0                             l2541 1AA6  
                           l2533 1A6C                             l2525 1A1C  
                           l3093 064C                             l3085 05D8  
                           l3077 0562                             l3069 0502  
                           l2703 0984                             l2631 07A8  
                           l2615 0754                             l2623 077E  
                           l2607 0728                             l2463 2178  
                           l2455 2140                             l2439 2396  
                           l2447 238C                             l2287 139E  
                           l2279 12F0                             l2295 1BEC  
                           l2391 1692                             l2383 1644  
                           l2375 1606                             l2367 15BE  
                           l2359 1590                             l2551 191C  
                           l2543 1AC6                             l2535 1A84  
                           l2527 1A2C                             l2471 1CCC  
                           l3095 064E                             l3079 0594  
                           l3087 05F4                             l2713 09EE  
                           l2721 0A36                             l2705 0988  
                           l2641 07DC                             l2633 07AA  
                           l2625 078E                             l2617 0764  
                           l2609 0734                             l2457 2148  
                           l2449 237E                             l2801 16B8  
                           l2289 13BA                             l2297 1BEE  
                           l2393 1694                             l2385 165C  
                           l2377 1612                             l2369 15D6  
                           l2553 1948                             l2561 1980  
                           l2545 18F6                             l2537 1A8E  
                           l2529 1A4A                             l2481 1D8A  
                           l2473 1CF8                             l3097 0650  
                           l3089 0626                             l2731 0AA0  
                           l2723 0A50                             l2715 09FA  
                           l2707 0996                             l2651 0822  
                           l2635 07BA                             l2643 07E4  
                           l2627 0794                             l2619 0774  
                           l2459 2150                             l2387 1668  
                           l2379 161E                             l2395 1698  
                           l2571 19F4                             l2563 1998  
                           l2555 1960                             l2547 190A  
                           l2811 0B2C                             l2803 0AC2  
                           l2539 1A9A                             l2475 1D0E  
                           l2467 1C7C                             l3099 0652  
                           l2491 2244                             l2483 2230  
                           l2733 0AAE                             l2725 0A66  
                           l2717 0A08                             l2709 09C4  
                           l2661 084A                             l2653 0826  
                           l2645 07F4                             l2637 07CA  
                           l2629 079A                             l2389 167C  
                           l2397 1440                             l2565 19B0  
                           l2557 196C                             l2549 190C  
                           l2821 0BFC                             l2813 0B64  
                           l2805 0AD6                             l2477 1D46  
                           l2469 1CB4                             l2581 0E74  
                           l2573 0DDE                             l2493 2246  
                           l2485 223A                             l2901 22E0  
                           l2735 0AB4                             l2727 0A80  
                           l2719 0A32                             l2671 0898  
                           l2647 080A                             l2639 07DA  
                           l2751 1010                             l2399 1454  
                           l2567 19C8                             l2559 1978  
                           l2831 0C8C                             l2823 0C10  
                           l2815 0B78                             l2807 0AEE  
                           l2479 1D5E                             l2591 0F20  
                           l2583 0E88                             l2575 0DF0  
                           l2487 2240                             l2495 22EA  
                           l2911 1DD6                             l2903 22E2  
                           l2737 0AB6                             l2729 0A9C  
                           l2681 08E2                             l2673 08A8  
                           l2665 085E                             l2649 081A  
                           l2657 083A                             l2761 104E  
                           l2753 1026                             l2745 0FAC  
                           l2497 1F6C                             l2569 19DC  
                           l2841 0D0C                             l2825 0C24  
                           l2833 0CA0                             l2817 0BB0  
                           l2809 0B1A                             l2593 0F58  
                           l2585 0EC0                             l2577 0E28  
                           l2489 2242                             l2921 1E14  
                           l2913 1DDA                             l2905 22E4  
                           l2691 0930                             l2683 08EE  
                           l2675 08B0                             l2667 0878  
                           l2659 084A                             l2771 10D6  
                           l2763 1080                             l2747 0FBC  
                           l2499 1FB2                             l2851 0DA4  
                           l2843 0D30                             l2835 0CB4  
                           l2827 0C3C                             l2819 0BC4  
                           l2595 0F6C                             l2587 0ED4  
                           l2579 0E3C                             l2923 1E16  
                           l2915 1DFE                             l2907 1DA0  
                           l2931 20AC                             l2693 0946  
                           l2685 090C                             l2677 08C0  
                           l2669 0888                             l2781 112C  
                           l2773 10E4                             l2765 1082  
                           l2757 103A                             l2749 0FCA  
                           l2837 0CC8                             l2845 0D44  
                           l2829 0C68                             l2597 0F80  
                           l2589 0F0C                             l2861 11A6  
                           l2853 115E                             l2925 1E20  
                           l2917 1E08                             l2909 1DB0  
                           l2941 236C                             l2933 20BA  
                           l2695 094C                             l2687 090E  
                           l2679 08D4                             l2783 113C  
                           l2775 1102                             l2767 108E  
                           l2759 1042                             l2847 0D58  
                           l2839 0CE0                             l2599 0F94  
                           l2871 1212                             l2863 11BA  
                           l2855 1162                             l2943 2308  
                           l2791 21FC                             l2927 1E22  
                           l2919 1E0A                             l2935 20C2  
                           l2951 22A8                             l2697 0956  
                           l2689 091E                             l2785 114A  
                           l2777 1104                             l2769 10CA  
                           l2849 0D90                             l2881 126E  
                           l2873 122C                             l2865 11D2  
                           l2857 118C                             l2961 233C  
                           l2945 2310                             l2953 2342  
                           l2793 2200                             l2929 1E2C  
                           l2937 20DE                             l2699 0964  
                           l2787 114C                             l2779 1108  
                           l2971 185E                             l2883 1286  
                           l2875 122E                             l2867 11E6  
                           l2859 118E                             l2891 2358  
                           l2963 233E                             l2955 2328  
                           l2947 231A                             l2795 220A  
                           l2939 20E6                             l2981 18EC  
                           l2973 186E                             l2965 17F2  
                           l2885 129A                             l2877 1242  
                           l2869 11FE                             l2957 2332  
                           l2949 2324                             l2797 221A  
                           l2893 22C8                             l2983 18F2  
                           l2975 187C                             l2967 1820  
                           l2879 125A                             l2887 12B2  
                           l2991 006E                             l2959 233A  
                           l2799 2224                             l2895 22D2  
                           l2977 188E                             l2969 1830  
                           l2889 12C2                             l2993 007E  
                           l2897 22D4                             l2979 189C  
                           l2995 0080                             l2987 004C  
                           l2899 22D6                             l2997 0094  
                           l2989 0058                             l2999 00AC  
                           u2000 113C                             u2001 1138  
                           u2010 114A                             u2011 1146  
                           u1300 1E4A                             u2020 0B2C  
                           u2100 12D2                             u1301 1E46  
                           u2021 0B28                             u2101 12CE  
                           u2110 1820                             u1310 1E68  
                           u2030 0B78                             u2111 181C  
                           u1311 1E64                             u2031 0B74  
                           u2120 185E                             u1320 1E84  
                           u1400 1B6E                             u2040 0BC4  
                           u2200 01F2                             u2121 185A  
                           u1321 1E80                             u1401 1B6A  
                           u2041 0BC0                             u2201 01EE  
                           u2130 187C                             u1330 12F0  
                           u1410 1BB0                             u2050 0C10  
                           u2210 0224                             u2131 1878  
                           u1331 12EC                             u1411 1BAC  
                           u2051 0C0C                             u2211 0220  
                           u2140 189C                             u1340 13BA  
                           u1420 1BC8                             u1500 1508  
                           u2060 0CB4                             u2300 049E  
                           u2220 0284                             u2141 1898  
                           u1341 13B6                             u1421 1BC4  
                           u1501 1504                             u2061 0CB0  
                           u2301 049A                             u2221 0280  
                           u2150 18EC                             u1350 1C48  
                           u1430 15D6                             u1510 1520  
                           u2070 0D58                             u2310 04D0  
                           u2230 02B6                             u2151 18E8  
                           u1351 1C44                             u1431 15D2  
                           u1511 151C                             u2071 0D54  
                           u2311 04CC                             u2231 02B2  
                           u1360 21FA                             u1440 15FA  
                           u1520 157A                             u1600 19B0  
                           u2080 0DA4                             u2320 0502  
                           u2240 02E8                             u2160 006E  
                   _BAUD4CONbits 000EE9                             u1361 21F6  
                           u1441 15F6                             u1521 1576  
                           u1601 19AC                             u2081 0DA0  
                           u2321 04FE                             u2241 02E4  
                           u2161 006A                             u1370 226A  
                           u1530 2164                             u1450 1644  
                           u1610 0DF0                             u2090 12C2  
                           u2330 0562                             u2250 0348  
                           u2170 012E                             u1371 2266  
                           u1531 215C                             u1451 1640  
                           u1611 0DEC                             u2091 12BE  
                           u2331 055E                             u2251 0344  
                           u2171 012A                             u1700 0754  
                           u1380 2280                             u1460 165C  
                           u1620 0E3C                             u2340 0594  
                           u2260 037A                             u2180 0160  
                           u2500 1EB6                             u1701 0750  
                           u1381 227C                             u1461 1658  
                           u1621 0E38                             u2341 0590  
                           u2261 0376                             u2181 015C  
                           u2501 1EB2                             u1710 0764  
                           u1470 16B6                             u1390 1B4C  
                           u1550 1A62                             u1630 0E88  
                           u2350 05C6                             u2270 03DA  
                           u2190 0192                             u2510 1EC4  
                           u1711 0760                             u1471 16B2  
                           u1391 1B48                             u1551 1A5E  
                           u1631 0E84                             u2351 05C2  
                           u2271 03D6                             u2191 018E  
                           u2511 1EC0                             u1800 0930  
                           u1720 07A8                             u1480 149A  
                           u1560 1A84                             u1640 0ED4  
                           u2360 0626                             u2280 040C  
                           u2520 1ED2                             u1801 092C  
                           u1721 07A4                             u1481 1496  
                           u1561 1A80                             u1641 0ED0  
                           u2361 0622                             u2281 0408  
                           u2521 1ECE                             u1810 0946  
                           u1730 07BA                             u1490 14BE  
                           u1570 1AC6                             u1650 0F20  
                           u2370 063C                             u2290 043E  
                           _T2PR 000FBC                             u1811 0942  
                           u1731 07B6                             u1491 14BA  
                           u1571 1AC2                             u1651 0F1C  
                           u2371 0638                             u2291 043A  
                           u1900 0A80                             u1820 0964  
                           u1740 07CA                             u1548 2166  
                           u1580 1ADE                             u1660 0F6C  
                           u1901 0A7C                             u1821 0960  
                           u1741 07C6                             u1581 1ADA  
                           u1661 0F68                             u1910 0AAE  
                           u1830 0984                             u1750 080A  
                           u1590 1998                             u1670 0F94  
                           u1911 0AAA                             u1831 0980  
                           u1751 0806                             u1591 1994  
                           u1671 0F90                             u2607 06DE  
                           u1840 0996                             u1760 084A  
                           u1920 0FBC                             u1680 21BA  
                           u1841 0992                             u1761 0846  
                           u1921 0FB8                             u1681 21B6  
                           u2617 1198                             u2537 1EDE  
                           u1850 09C4                             u1770 08C0  
                           u1690 0742                             u1930 0FCA  
                           u1851 09C0                             u1771 08BC  
                           u1691 073E                             u1931 0FC6  
                           u2707 1D7C                             u2627 11C4  
                           u2547 2210                             u1860 09DA  
                           u1780 08E2                             u1940 1026  
                           u1861 09D6                             u1781 08DE  
                           u1941 1022                             u2717 1AA8  
                           u2637 11F0                             u2557 009E  
                           u1870 09EE                             u1790 090C  
                           u1950 107C                             u1871 09EA  
                           u1791 0908                             u1951 1078  
                           u2807 19BA                             u2727 2192  
                           u2647 124C                             u2567 00CA  
                           u1880 0A08                             u1960 10C6  
                           u1881 0A04                             u1961 10C2  
                           u2817 19E6                             u2737 0AE0  
                           u2657 1278                             u2577 00EE  
                           u1890 0A50                             u1970 10E4  
                           u1891 0A4C                             u1971 10E0  
                           u2827 14E8                             u2747 0B0C  
                           u2667 12A4                             u2587 0672  
                           u1980 10F4                             u1981 10F0  
                           u2837 154A                             u2757 0C2E  
                           u2677 1CBE                             u2597 069E  
                           u1990 1102                             u1991 10FE  
                           u2847 1B92                             u2767 0C5A  
                           u2687 1CEA                             u2857 1624  
                           u2777 0CD2                             u2697 1D50  
                           u2867 1686                             u2787 0CFE  
                           u2877 1C28                             u2797 197A  
                           u2887 21CE          __end_of_interrupts_init 237C  
                _movement_return 0DDE                             _main 1EA4  
                           fsr2h 000FDA                             indf2 000FDF  
                           fsr1l 000FE1                             fsr2l 000FD9  
                           btemp 005C                             _stop 1BCC  
                           prodh 000FF4                             prodl 000FF3  
                           start 0048                 __end_of_ADC_init 2342  
                ___fldiv@new_exp 0022           __end_of_color_read_Red 1FBC  
                   ___param_bank 000000                            ?_main 0001  
                          _ADPCH 000F5F                  __end_of___fldiv 0AC2  
                          ?_stop 0016                  __end_of___lwdiv 1EA4  
                          i1l422 003C                            _TMR0H 000FD4  
                          _TMR0L 000FD3                     left_45@count 0020  
     __end_of_I2C_2_Master_Start 239C       __end_of_I2C_2_Master_Write 2388  
                __end_of_left_45 16B8                            _color 0044  
                __end_of_forward 1AE2                            _space 18F6  
                          tablat 000FF5                  __end_of_reverse 1BCC  
                          ttemp5 005D                            ttemp6 0060  
                          ttemp7 0064                            stop@i 001A  
                          status 000FD8                            wtemp8 005D  
        __end_of_color_read_Blue 20AC            _I2C_2_Master_RepStart 239C  
                 delay_ms_func@i 0007                  ?_color_read_Red 0007  
                __initialization 1F12                     __end_of_main 1F12  
                   __end_of_stop 1C7C                 _color_upperbound 00C4  
      ??_complete_initialisation 0008                left_45@left_timer 0022  
                         ??_main 00C6                           ??_stop 001A  
                  __activetblptr 000000          __end_of_movement_return 0FAA  
                   ?_setMotorPWM 0010                           _ADRESH 000F64  
                         _CCPR1H 000FAA                           _CCPR2H 000FA6  
                         _CCPR3H 000F25                           _CCPR4H 000F21  
                         ?_space 001C            __end_of_delay_ms_func 21BC  
              __end_of_READcolor 17F2                           _RC0PPS 000E62  
                         _RC4REG 000EE3                           _RE2PPS 000E74  
                         i1l3151 0032                           i1l3153 0038  
                         _RC7PPS 000E69                           _RD5PPS 000E6F  
                         i1l3149 0022                           _RE4PPS 000E76  
                         _RD6PPS 000E70                           _RG6PPS 000E88  
               ?_interrupts_init 0001         __end_of_color_click_init 2230  
                         _RX4PPS 000E15                           _TX4REG 000EE4  
               __end_of___xxtofl 115E                           _LowISR 0018  
                  ??_Timer0_init 0003                     _CCPTMRS0bits 000FAD  
                         ___flge 17F2                           ___wmul 2282  
                      ??___fldiv 0019                        ??___lwdiv 000D  
               ??_buggyLEDs_init 0003                           clear_0 1F50  
                         clear_1 1F5C                    ?_custom_delay 0003  
                         _motorL 00BB                           _motorR 00B2  
                         isa$std 000001                        ??_left_45 0024  
               __end_of_right_45 157C                     __pdataCOMRAM 0058  
                      ??_forward 0020                 __end_of_movement 0DDE  
                         tblptrh 000FF7                           tblptrl 000FF6  
                         tblptru 000FF8                        ?_ADC_init 0001  
                      ??_reverse 0020                     ?_return_home 0034  
                         stop@mL 0016                           stop@mR 0018  
                   ?_timer_reset 0001                ??_initDCmotorsPWM 0005  
__end_of_complete_initialisation 213A     __end_of_buggy_color_response 0728  
                     ___flge@ff1 0003                       ___flge@ff2 0007  
                   ___xxtofl@arg 000D                     ___xxtofl@exp 000C  
                   ___xxtofl@val 0003                       __accesstop 0060  
        __end_of__initialization 1F62         __end_of_color_read_Clear 205C  
       __end_of_color_read_Green 200C           ?_I2C_2_Master_RepStart 0001  
                  ___rparam_used 000001                 ?_color_read_Blue 0007  
                 __pcstackCOMRAM 0001                     __pidataBANK0 23AA  
                 ??_custom_delay 0005                    __end_of_space 19F8  
            __end_of_Timer0_init 2328                       ??_ADC_init 0003  
               ?_movement_return 002E                          ??_space 0020  
                     _card_count 0043                       __pbssBANK0 0060  
                        ?_LowISR 0001                _color_writetoaddr 22E8  
                   _T2CLKCONbits 000FBF                          ?___flge 0003  
             ?_color_writetoaddr 0005                          ?___wmul 0003  
            ??_color_writetoaddr 0006                        ?___xxtofl 0003  
                        _SP4BRGH 000EE6                          _SP4BRGL 000EE5  
                        _SSP2ADD 000ED6                          _SSP2BUF 000ED5  
         color_writetoaddr@value 0005                 ??_color_read_Red 0009  
      __end_of_color_writetoaddr 2308                        _ADREFbits 000F58  
             _I2C_2_Master_Start 2392                       _initUSART4 22C8  
             _I2C_2_Master_Write 237C                        ?_right_45 001C  
                        __Hparam 0000                       _left_timer 005A  
                        __Lparam 0000                color_read_Red@tmp 000C  
                      ?_movement 0028                      _Timer0_init 2308  
                        ___fldiv 0728              ?_I2C_2_Master_Start 0001  
                        ___lwdiv 1E30              ?_I2C_2_Master_Write 0001  
           _buggy_color_response 004C                          __pcinit 1F12  
                        __ramtop 0E00                          __ptext0 1EA4  
                        __ptext1 20F8                          __ptext2 22A8  
                        __ptext3 20AC                          __ptext4 236C  
                        __ptext5 22C8                          __ptext6 1DA0  
                        __ptext7 21FC                          __ptext8 22E8  
                        __ptext9 2230                          _left_45 157C  
                      _T2CONbits 000FBD                          _forward 19F8  
                     ??___xxtofl 0007                    ?_reverse_pink 0028  
                      _T2HLTbits 000FBE                          _reverse 1AE2  
                  right_45@count 0020             ??_I2C_2_Master_Start 0004  
           ??_I2C_2_Master_Write 0004             end_of_initialization 1F62  
           __end_of_custom_delay 21FC                ?_color_click_init 0001  
                      _READcolor 16B8                       ??_right_45 0024  
             ??_color_click_init 0007                          space@mL 001C  
                        space@mR 001E                       ??_movement 002E  
                        postdec1 000FE5                          postdec2 000FDD  
                        postinc0 000FEE                          postinc2 000FDE  
                     _motor_init 20AC            ?_buggy_color_response 003A  
                _initDCmotorsPWM 1DA0                        _PORTFbits 000F8E  
             setMotorPWM@negDuty 0015                   ??_reverse_pink 002C  
                  ___xxtofl@sign 000B                        _TRISAbits 000F81  
             setMotorPWM@posDuty 0014                        _TRISCbits 000F83  
                      _TRISDbits 000F84                        _TRISEbits 000F85  
                      _TRISFbits 000F86                        _TRISGbits 000F87  
                      _TRISHbits 000F88                      ___fldiv@grs 0024  
                     _ports_init 22A8                      ___fldiv@rem 001D  
       color_writetoaddr@address 0006          ??_I2C_2_Master_RepStart 0004  
                    _CCP1CONbits 000FAB                ?_color_read_Clear 0007  
                    _CCP2CONbits 000FA7                ?_color_read_Green 0007  
                     ?_READcolor 002A                      _CCP3CONbits 000F26  
                    ?_initUSART4 0001                      _CCP4CONbits 000F22  
             ??_color_read_Clear 0009         ?_complete_initialisation 0001  
             ??_color_read_Green 0009                   __end_of_LowISR 0048  
                 __end_of___flge 18F6                   __end_of___wmul 22A8  
                  __pidataCOMRAM 23A6              color_read_Clear@tmp 000C  
            start_initialization 1F12           buggy_color_response@mL 003A  
         buggy_color_response@mR 003C              color_read_Green@tmp 000C  
                       ??_LowISR 0001                   _reverse_yellow 1C7C  
        __end_of_initDCmotorsPWM 1E30                         ??___flge 000B  
         ??_buggy_color_response 0040                         ??___wmul 0007  
                    ?_motor_init 0003                       READcolor@c 002A  
                    __pdataBANK0 00C4                      _card_memory 0088  
                      ___fldiv@a 0015                        ___fldiv@b 0011  
                    __pbssCOMRAM 0042                    __pcstackBANK0 00C6  
                    ?_ports_init 0001                    _delay_ms_func 217C  
         __end_of_reverse_yellow 1D0E                      ??_READcolor 002C  
           __end_of_reverse_pink 1DA0                 ___lwdiv@dividend 0009  
                   ?_Timer0_init 0001                         ?___fldiv 0011  
                       ?___lwdiv 0009                       right_45@mL 001C  
                     right_45@mR 001E                      __pintcodelo 0018  
                   _custom_delay 21BC             I2C_2_Master_Read@ack 0005  
              ??_interrupts_init 0003             I2C_2_Master_Read@tmp 0006  
                       ?_left_45 001C                         ?_forward 001C  
              _I2C_2_Master_Idle 225A                _I2C_2_Master_Init 2230  
              _I2C_2_Master_Read 213A                _I2C_2_Master_Stop 2388  
                       _ADC_init 2328                         ?_reverse 001C  
             ?_I2C_2_Master_Idle 0001               ?_I2C_2_Master_Init 0001  
             ?_I2C_2_Master_Read 0001                    ??_setMotorPWM 0012  
             ?_I2C_2_Master_Stop 0001                 ___lwdiv@quotient 000D  
       initDCmotorsPWM@PWMperiod 0003                   ?_delay_ms_func 0003  
            ??_I2C_2_Master_Idle 0003              ??_I2C_2_Master_Init 0003  
            ??_I2C_2_Master_Read 0004                   ___wmul@product 0007  
                       _LATAbits 000F79              ??_I2C_2_Master_Stop 0004  
                       _LATCbits 000F7B                         _LATDbits 000F7C  
                     movement@mL 0028                         _LATEbits 000F7D  
                     movement@mR 002A                         _LATFbits 000F7E  
                 reverse_pink@mL 0028                         _LATGbits 000F7F  
                 reverse_pink@mR 002A                         _LATHbits 000F80  
                ?_reverse_yellow 0028                         _IPR0bits 000E1F  
                       _PIE0bits 000E29                movement_return@mL 002E  
              movement_return@mR 0030                         i1u241_20 0032  
                       i1u241_21 002E                         _PIR0bits 000E33  
                       _PIR4bits 000E37                 ?_initDCmotorsPWM 0003  
                       _SSP2CON2 000EDA                         _SSP2STAT 000ED8  
                      _timer_val 00B0                       _ADCON0bits 000F60  
      __end_of_I2C_2_Master_Idle 2282        __end_of_I2C_2_Master_Init 225A  
      __end_of_I2C_2_Master_Read 217C                ___wmul@multiplier 0003  
      __end_of_I2C_2_Master_Stop 2392                     setMotorPWM@m 0010  
    I2C_2_Master_Write@data_byte 0004                        left_45@mL 001C  
                      left_45@mR 001E                ??_color_read_Blue 0009  
                  ??_return_home 0038                    ??_timer_reset 0003  
                      copy_data0 1F3E                    movement@count 002C  
  __end_of_I2C_2_Master_RepStart 23A6               color_read_Blue@tmp 000C  
            __end_of_setMotorPWM 1440                     ??_initUSART4 0003  
          buggy_color_response@c 003E                         __Hrparam 0000  
                       __Lrparam 0000                        forward@mL 001C  
                      forward@mR 001E                ??_movement_return 0034  
                     _ANSELDbits 000EA7                       _ANSELFbits 000EB4  
                       ___xxtofl 0FAA             movement_return@count 0032  
                     _T0CON0bits 000FD5                       _T0CON1bits 000FD6  
                 _buggyLEDs_init 2342                  ___lwdiv@divisor 000B  
             __end_of_initUSART4 22E8                  ___lwdiv@counter 000F  
                ??_delay_ms_func 0005                         __ptext10 2342  
                       __ptext11 2308                         __ptext20 217C  
                       __ptext12 2328                         __ptext21 0AC2  
                       __ptext13 004C                         __ptext30 21BC  
                       __ptext22 18F6                         __ptext14 2358  
                       __ptext31 17F2                         __ptext23 1440  
                       __ptext15 115E                         __ptext40 239C  
                       __ptext32 16B8                         __ptext24 1AE2  
                       __ptext16 0DDE                         __ptext41 213A  
                       __ptext33 1F6C                         __ptext25 157C  
                       __ptext17 1C7C                         __ptext42 225A  
                       __ptext34 1FBC                         __ptext26 1BCC  
                       __ptext18 1D0E                         __ptext43 0FAA  
                       __ptext35 200C                         __ptext27 12D4  
                       __ptext19 19F8                         __ptext44 0728  
                       __ptext36 205C                         __ptext28 2282  
                       __ptext37 237C                         __ptext29 1E30  
                       __ptext38 2388                         __ptext39 2392  
                      right_45@i 0026                     _SSP2CON1bits 000ED9  
                   _SSP2CON2bits 000EDA              __end_of_return_home 12D4  
            __end_of_timer_reset 236C                         _right_45 1440  
                      reverse@mL 001C                        reverse@mR 001E  
                       _movement 0AC2                         isa$xinst 000000  
                     _RC4STAbits 000EE7                         int$flags 005C  
                   ??_motor_init 0007                         left_45@i 0026  
         __end_of_buggyLEDs_init 2358                       _INTCONbits 000FF2  
                   _reverse_pink 1D0E                     ??_ports_init 0003  
                    _setMotorPWM 12D4                         intlevel1 0000  
             __end_of_motor_init 20F8                      _right_timer 0058  
               reverse_yellow@mL 0028                 reverse_yellow@mR 002A  
                _interrupts_init 236C                     _timer_memory 0060  
             __end_of_ports_init 22C8                     motor_init@mL 0003  
                   motor_init@mR 0005                 _color_click_init 21FC  
            right_45@right_timer 0022                  ?_buggyLEDs_init 0001  
                     _SSP2DATPPS 000E1D                       _SSP2CLKPPS 000E1C  
                    _timer_index 0042                      _return_home 115E  
                    _timer_reset 2358                 ??_reverse_yellow 002C  
                     _TX4STAbits 000EE8                    custom_delay@i 0006  
