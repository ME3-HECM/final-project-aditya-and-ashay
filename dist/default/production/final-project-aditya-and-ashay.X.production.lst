

Microchip MPLAB XC8 Assembler V2.40 build 20220703182018 
                                                                                               Tue Mar 14 21:26:29 2023

Microchip MPLAB XC8 C Compiler v2.40 (Free license) build 20220703182018 Og1 
     1                           	processor	18F67K40
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    15                           	psect	text0,global,reloc=2,class=CODE,delta=1
    16                           	psect	text1,global,reloc=2,class=CODE,delta=1
    17                           	psect	text2,global,reloc=2,class=CODE,delta=1
    18                           	psect	text3,global,reloc=2,class=CODE,delta=1
    19                           	psect	text4,global,reloc=2,class=CODE,delta=1
    20                           	psect	text5,global,reloc=2,class=CODE,delta=1
    21                           	psect	text6,global,reloc=2,class=CODE,delta=1
    22                           	psect	text7,global,reloc=2,class=CODE,delta=1
    23                           	psect	text8,global,reloc=2,class=CODE,delta=1
    24                           	psect	text9,global,reloc=2,class=CODE,delta=1
    25                           	psect	text10,global,reloc=2,class=CODE,delta=1
    26                           	psect	text11,global,reloc=2,class=CODE,delta=1
    27                           	psect	text12,global,reloc=2,class=CODE,delta=1
    28                           	psect	text13,global,reloc=2,class=CODE,delta=1
    29                           	psect	text14,global,reloc=2,class=CODE,delta=1
    30                           	psect	text15,global,reloc=2,class=CODE,delta=1
    31                           	psect	text16,global,reloc=2,class=CODE,delta=1
    32                           	psect	text17,global,reloc=2,class=CODE,delta=1
    33                           	psect	text18,global,reloc=2,class=CODE,delta=1
    34                           	psect	text19,global,reloc=2,class=CODE,delta=1
    35                           	psect	text20,global,reloc=2,class=CODE,delta=1
    36                           	psect	text21,global,reloc=2,class=CODE,delta=1
    37                           	psect	text22,global,reloc=2,class=CODE,delta=1
    38                           	psect	text23,global,reloc=2,class=CODE,delta=1
    39                           	psect	text24,global,reloc=2,class=CODE,delta=1
    40                           	psect	text25,global,reloc=2,class=CODE,delta=1
    41                           	psect	text26,global,reloc=2,class=CODE,delta=1
    42                           	psect	text27,global,reloc=2,class=CODE,delta=1,group=1
    43                           	psect	text28,global,reloc=2,class=CODE,delta=1,group=1
    44                           	psect	text29,global,reloc=2,class=CODE,delta=1
    45                           	psect	text30,global,reloc=2,class=CODE,delta=1,group=1
    46                           	psect	text31,global,reloc=2,class=CODE,delta=1
    47                           	psect	text32,global,reloc=2,class=CODE,delta=1
    48                           	psect	text33,global,reloc=2,class=CODE,delta=1
    49                           	psect	text34,global,reloc=2,class=CODE,delta=1
    50                           	psect	text35,global,reloc=2,class=CODE,delta=1
    51                           	psect	text36,global,reloc=2,class=CODE,delta=1
    52                           	psect	text37,global,reloc=2,class=CODE,delta=1
    53                           	psect	text38,global,reloc=2,class=CODE,delta=1
    54                           	psect	text39,global,reloc=2,class=CODE,delta=1
    55                           	psect	text40,global,reloc=2,class=CODE,delta=1
    56                           	psect	text41,global,reloc=2,class=CODE,delta=1
    57                           	psect	text42,global,reloc=2,class=CODE,delta=1,group=1
    58                           	psect	text43,global,reloc=2,class=CODE,delta=1,group=1
    59                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    60                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    61                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    62                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    63                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    64                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    65   000000                     
    66                           ; Generated 06/04/2022 GMT
    67                           ; 
    68                           ; Copyright Â© 2022, Microchip Technology Inc. and its subsidiaries ("Microchip")
    69                           ; All rights reserved.
    70                           ; 
    71                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    72                           ; 
    73                           ; Redistribution and use in source and binary forms, with or without modification, are
    74                           ; permitted provided that the following conditions are met:
    75                           ; 
    76                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    77                           ;        conditions and the following disclaimer.
    78                           ; 
    79                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    80                           ;        of conditions and the following disclaimer in the documentation and/or other
    81                           ;        materials provided with the distribution. Publication is not required when
    82                           ;        this file is used in an embedded application.
    83                           ; 
    84                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    85                           ;        software without specific prior written permission.
    86                           ; 
    87                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    88                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    89                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    90                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    91                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    92                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    93                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    94                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    95                           ; 
    96                           ; 
    97                           ; Code-generator required, PIC18F67K40 Definitions
    98                           ; 
    99                           ; SFR Addresses
   100   000000                     
   101                           	psect	idataCOMRAM
   102   0022EA                     __pidataCOMRAM:
   103                           	callstack 0
   104                           
   105                           ;initializer for _right_timer
   106   0022EA  0064               	dw	100
   107                           
   108                           ;initializer for _left_timer
   109   0022EC  0069               	dw	105
   110                           
   111                           	psect	idataBANK0
   112   0022EE                     __pidataBANK0:
   113                           	callstack 0
   114                           
   115                           ;initializer for _color_upperbound
   116   0022EE  09C4               	dw	2500
   117   000000                     _TRISFbits	set	3974
   118   000000                     _LATFbits	set	3966
   119   000000                     _LATDbits	set	3964
   120   000000                     _LATGbits	set	3967
   121   000000                     _TRISGbits	set	3975
   122   000000                     _TRISEbits	set	3973
   123   000000                     _TX4REG	set	3812
   124   000000                     _RC4STAbits	set	3815
   125   000000                     _SP4BRGH	set	3814
   126   000000                     _SSP2CON2bits	set	3802
   127   000000                     _RX4PPS	set	3605
   128   000000                     _SSP2CLKPPS	set	3612
   129   000000                     _SSP2DATPPS	set	3613
   130   000000                     _ANSELDbits	set	3751
   131   000000                     _SSP2ADD	set	3798
   132   000000                     _SSP2CON1bits	set	3801
   133   000000                     _RC4REG	set	3811
   134   000000                     _SP4BRGL	set	3813
   135   000000                     _TX4STAbits	set	3816
   136   000000                     _BAUD4CONbits	set	3817
   137   000000                     _TRISCbits	set	3971
   138   000000                     _SSP2CON2	set	3802
   139   000000                     _TRISDbits	set	3972
   140   000000                     _SSP2STAT	set	3800
   141   000000                     _ANSELFbits	set	3764
   142   000000                     _SSP2BUF	set	3797
   143   000000                     _IPR0bits	set	3615
   144   000000                     _PIE0bits	set	3625
   145   000000                     _PIR4bits	set	3639
   146   000000                     _RC0PPS	set	3682
   147   000000                     _RD5PPS	set	3695
   148   000000                     _RE2PPS	set	3700
   149   000000                     _RD6PPS	set	3696
   150   000000                     _RC7PPS	set	3689
   151   000000                     _LATCbits	set	3963
   152   000000                     _LATEbits	set	3965
   153   000000                     _CCPR4H	set	3873
   154   000000                     _CCPR3H	set	3877
   155   000000                     _TRISHbits	set	3976
   156   000000                     _PORTFbits	set	3982
   157   000000                     _T2PR	set	4028
   158   000000                     _T2CONbits	set	4029
   159   000000                     _CCPR2H	set	4006
   160   000000                     _CCPR1H	set	4010
   161   000000                     _TRISAbits	set	3969
   162   000000                     _LATHbits	set	3968
   163   000000                     _RE4PPS	set	3702
   164   000000                     _RG6PPS	set	3720
   165   000000                     _TMR0L	set	4051
   166   000000                     _TMR0H	set	4052
   167   000000                     _T0CON0bits	set	4053
   168   000000                     _T0CON1bits	set	4054
   169   000000                     _INTCONbits	set	4082
   170   000000                     _T2CLKCONbits	set	4031
   171   000000                     _T2HLTbits	set	4030
   172   000000                     _CCP1CONbits	set	4011
   173   000000                     _CCPTMRS0bits	set	4013
   174   000000                     _CCP2CONbits	set	4007
   175   000000                     _LATAbits	set	3961
   176   000000                     _CCP3CONbits	set	3878
   177   000000                     _CCP4CONbits	set	3874
   178   000000                     _PIR0bits	set	3635
   179                           
   180                           ; #config settings
   181                           
   182                           	psect	cinit
   183   001E12                     __pcinit:
   184                           	callstack 0
   185   001E12                     start_initialization:
   186                           	callstack 0
   187   001E12                     __initialization:
   188                           	callstack 0
   189                           
   190                           ; Initialize objects allocated to BANK0 (2 bytes)
   191                           ; load TBLPTR registers with __pidataBANK0
   192   001E12  0EEE               	movlw	low __pidataBANK0
   193   001E14  6EF6               	movwf	tblptrl,c
   194   001E16  0E22               	movlw	high __pidataBANK0
   195   001E18  6EF7               	movwf	tblptrh,c
   196   001E1A  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   197   001E1C  6EF8               	movwf	tblptru,c
   198   001E1E  0009               	tblrd		*+	;fetch initializer
   199   001E20  CFF5 F0DC          	movff	tablat,__pdataBANK0
   200   001E24  0009               	tblrd		*+	;fetch initializer
   201   001E26  CFF5 F0DD          	movff	tablat,__pdataBANK0+1
   202                           
   203                           ; Initialize objects allocated to COMRAM (4 bytes)
   204                           ; load TBLPTR registers with __pidataCOMRAM
   205   001E2A  0EEA               	movlw	low __pidataCOMRAM
   206   001E2C  6EF6               	movwf	tblptrl,c
   207   001E2E  0E22               	movlw	high __pidataCOMRAM
   208   001E30  6EF7               	movwf	tblptrh,c
   209   001E32  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   210   001E34  6EF8               	movwf	tblptru,c
   211   001E36  EE00  F059         	lfsr	0,__pdataCOMRAM
   212   001E3A  EE10 F004          	lfsr	1,4
   213   001E3E                     copy_data0:
   214   001E3E  0009               	tblrd		*+
   215   001E40  CFF5 FFEE          	movff	tablat,postinc0
   216   001E44  50E5               	movf	postdec1,w,c
   217   001E46  50E1               	movf	fsr1l,w,c
   218   001E48  E1FA               	bnz	copy_data0
   219                           
   220                           ; Clear objects allocated to BANK1 (60 bytes)
   221   001E4A  EE01  F000         	lfsr	0,__pbssBANK1
   222   001E4E  0E3C               	movlw	60
   223   001E50                     clear_0:
   224   001E50  6AEE               	clrf	postinc0,c
   225   001E52  06E8               	decf	wreg,f,c
   226   001E54  E1FD               	bnz	clear_0
   227                           
   228                           ; Clear objects allocated to BANK0 (124 bytes)
   229   001E56  EE00  F060         	lfsr	0,__pbssBANK0
   230   001E5A  0E7C               	movlw	124
   231   001E5C                     clear_1:
   232   001E5C  6AEE               	clrf	postinc0,c
   233   001E5E  06E8               	decf	wreg,f,c
   234   001E60  E1FD               	bnz	clear_1
   235                           
   236                           ; Clear objects allocated to COMRAM (25 bytes)
   237   001E62  EE00  F040         	lfsr	0,__pbssCOMRAM
   238   001E66  0E19               	movlw	25
   239   001E68                     clear_2:
   240   001E68  6AEE               	clrf	postinc0,c
   241   001E6A  06E8               	decf	wreg,f,c
   242   001E6C  E1FD               	bnz	clear_2
   243   001E6E                     end_of_initialization:
   244                           	callstack 0
   245   001E6E                     __end_of__initialization:
   246                           	callstack 0
   247   001E6E  905D               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   248   001E70  925D               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   249   001E72  0100               	movlb	0
   250   001E74  EF3C  F00F         	goto	_main	;jump to C main() function
   251                           
   252                           	psect	bssCOMRAM
   253   000040                     __pbssCOMRAM:
   254                           	callstack 0
   255   000040                     _RxBufReadCnt:
   256                           	callstack 0
   257   000040                     	ds	1
   258   000041                     _RxBufWriteCnt:
   259                           	callstack 0
   260   000041                     	ds	1
   261   000042                     _T_flag:
   262                           	callstack 0
   263   000042                     	ds	1
   264   000043                     _timer_index:
   265                           	callstack 0
   266   000043                     	ds	1
   267   000044                     _card_count:
   268                           	callstack 0
   269   000044                     	ds	1
   270   000045                     _color:
   271                           	callstack 0
   272   000045                     	ds	20
   273                           
   274                           	psect	dataCOMRAM
   275   000059                     __pdataCOMRAM:
   276                           	callstack 0
   277   000059                     _right_timer:
   278                           	callstack 0
   279   000059                     	ds	2
   280   00005B                     _left_timer:
   281                           	callstack 0
   282   00005B                     	ds	2
   283                           
   284                           	psect	bssBANK0
   285   000060                     __pbssBANK0:
   286                           	callstack 0
   287   000060                     _timer_memory:
   288                           	callstack 0
   289   000060                     	ds	40
   290   000088                     _card_memory:
   291                           	callstack 0
   292   000088                     	ds	40
   293   0000B0                     _EUSART4RXbuf:
   294                           	callstack 0
   295   0000B0                     	ds	20
   296   0000C4                     _timer_val:
   297                           	callstack 0
   298   0000C4                     	ds	2
   299   0000C6                     _color_lowerbound:
   300                           	callstack 0
   301   0000C6                     	ds	2
   302   0000C8                     _TxBufReadCnt:
   303                           	callstack 0
   304   0000C8                     	ds	1
   305   0000C9                     _TxBufWriteCnt:
   306                           	callstack 0
   307   0000C9                     	ds	1
   308   0000CA                     _motorR:
   309                           	callstack 0
   310   0000CA                     	ds	9
   311   0000D3                     _motorL:
   312                           	callstack 0
   313   0000D3                     	ds	9
   314                           
   315                           	psect	dataBANK0
   316   0000DC                     __pdataBANK0:
   317                           	callstack 0
   318   0000DC                     _color_upperbound:
   319                           	callstack 0
   320   0000DC                     	ds	2
   321                           
   322                           	psect	bssBANK1
   323   000100                     __pbssBANK1:
   324                           	callstack 0
   325   000100                     _EUSART4TXbuf:
   326                           	callstack 0
   327   000100                     	ds	60
   328                           
   329                           	psect	cstackBANK0
   330   0000DE                     __pcstackBANK0:
   331                           	callstack 0
   332   0000DE                     ??_buggy_color_response:
   333                           
   334                           ; 1 bytes @ 0x0
   335   0000DE                     	ds	2
   336                           
   337                           	psect	cstackCOMRAM
   338   000001                     __pcstackCOMRAM:
   339                           	callstack 0
   340   000001                     ??_LowISR:
   341   000001                     
   342                           ; 1 bytes @ 0x0
   343   000001                     	ds	2
   344   000003                     ??_I2C_2_Master_Idle:
   345   000003                     ?___wmul:
   346                           	callstack 0
   347   000003                     ?___xxtofl:
   348                           	callstack 0
   349   000003                     delay_ms_func@time:
   350                           	callstack 0
   351   000003                     initDCmotorsPWM@PWMperiod:
   352                           	callstack 0
   353   000003                     motor_init@mL:
   354                           	callstack 0
   355   000003                     custom_delay@temp:
   356                           	callstack 0
   357   000003                     ___wmul@multiplier:
   358                           	callstack 0
   359   000003                     ___flge@ff1:
   360                           	callstack 0
   361   000003                     ___xxtofl@val:
   362                           	callstack 0
   363                           
   364                           ; 4 bytes @ 0x2
   365   000003                     	ds	1
   366   000004                     ??_I2C_2_Master_Read:
   367   000004                     I2C_2_Master_Write@data_byte:
   368                           	callstack 0
   369                           
   370                           ; 1 bytes @ 0x3
   371   000004                     	ds	1
   372   000005                     ??_delay_ms_func:
   373   000005                     ??_custom_delay:
   374   000005                     I2C_2_Master_Read@ack:
   375                           	callstack 0
   376   000005                     color_writetoaddr@value:
   377                           	callstack 0
   378   000005                     motor_init@mR:
   379                           	callstack 0
   380   000005                     ___wmul@multiplicand:
   381                           	callstack 0
   382                           
   383                           ; 2 bytes @ 0x4
   384   000005                     	ds	1
   385   000006                     I2C_2_Master_Read@tmp:
   386                           	callstack 0
   387   000006                     color_writetoaddr@address:
   388                           	callstack 0
   389   000006                     custom_delay@i:
   390                           	callstack 0
   391                           
   392                           ; 2 bytes @ 0x5
   393   000006                     	ds	1
   394   000007                     ??_color_click_init:
   395   000007                     ??___xxtofl:
   396   000007                     ?_color_read_Red:
   397                           	callstack 0
   398   000007                     ?_color_read_Blue:
   399                           	callstack 0
   400   000007                     ?_color_read_Green:
   401                           	callstack 0
   402   000007                     ?_color_read_Clear:
   403                           	callstack 0
   404   000007                     delay_ms_func@i:
   405                           	callstack 0
   406   000007                     ___wmul@product:
   407                           	callstack 0
   408   000007                     ___flge@ff2:
   409                           	callstack 0
   410                           
   411                           ; 4 bytes @ 0x6
   412   000007                     	ds	1
   413   000008                     
   414                           ; 1 bytes @ 0x7
   415   000008                     	ds	1
   416   000009                     ??_color_read_Red:
   417   000009                     ??_color_read_Blue:
   418   000009                     ??_color_read_Green:
   419   000009                     ??_color_read_Clear:
   420   000009                     ?___lwdiv:
   421                           	callstack 0
   422   000009                     ___lwdiv@dividend:
   423                           	callstack 0
   424                           
   425                           ; 2 bytes @ 0x8
   426   000009                     	ds	2
   427   00000B                     ??___flge:
   428   00000B                     ___xxtofl@sign:
   429                           	callstack 0
   430   00000B                     ___lwdiv@divisor:
   431                           	callstack 0
   432                           
   433                           ; 2 bytes @ 0xA
   434   00000B                     	ds	1
   435   00000C                     ___xxtofl@exp:
   436                           	callstack 0
   437   00000C                     color_read_Red@tmp:
   438                           	callstack 0
   439   00000C                     color_read_Blue@tmp:
   440                           	callstack 0
   441   00000C                     color_read_Green@tmp:
   442                           	callstack 0
   443   00000C                     color_read_Clear@tmp:
   444                           	callstack 0
   445                           
   446                           ; 2 bytes @ 0xB
   447   00000C                     	ds	1
   448   00000D                     ___lwdiv@quotient:
   449                           	callstack 0
   450   00000D                     ___xxtofl@arg:
   451                           	callstack 0
   452                           
   453                           ; 4 bytes @ 0xC
   454   00000D                     	ds	2
   455   00000F                     ___lwdiv@counter:
   456                           	callstack 0
   457                           
   458                           ; 1 bytes @ 0xE
   459   00000F                     	ds	1
   460   000010                     setMotorPWM@m:
   461                           	callstack 0
   462                           
   463                           ; 2 bytes @ 0xF
   464   000010                     	ds	1
   465   000011                     ?___fldiv:
   466                           	callstack 0
   467   000011                     ___fldiv@b:
   468                           	callstack 0
   469                           
   470                           ; 4 bytes @ 0x10
   471   000011                     	ds	1
   472   000012                     ??_setMotorPWM:
   473                           
   474                           ; 1 bytes @ 0x11
   475   000012                     	ds	2
   476   000014                     setMotorPWM@posDuty:
   477                           	callstack 0
   478                           
   479                           ; 1 bytes @ 0x13
   480   000014                     	ds	1
   481   000015                     setMotorPWM@negDuty:
   482                           	callstack 0
   483   000015                     ___fldiv@a:
   484                           	callstack 0
   485                           
   486                           ; 4 bytes @ 0x14
   487   000015                     	ds	1
   488   000016                     stop@mL:
   489                           	callstack 0
   490                           
   491                           ; 2 bytes @ 0x15
   492   000016                     	ds	2
   493   000018                     stop@mR:
   494                           	callstack 0
   495                           
   496                           ; 2 bytes @ 0x17
   497   000018                     	ds	1
   498   000019                     ??___fldiv:
   499                           
   500                           ; 1 bytes @ 0x18
   501   000019                     	ds	1
   502   00001A                     stop@i:
   503                           	callstack 0
   504                           
   505                           ; 2 bytes @ 0x19
   506   00001A                     	ds	2
   507   00001C                     forward@mL:
   508                           	callstack 0
   509   00001C                     reverse@mL:
   510                           	callstack 0
   511   00001C                     left_45@mL:
   512                           	callstack 0
   513   00001C                     right_45@mL:
   514                           	callstack 0
   515   00001C                     space@mL:
   516                           	callstack 0
   517                           
   518                           ; 2 bytes @ 0x1B
   519   00001C                     	ds	1
   520   00001D                     ___fldiv@rem:
   521                           	callstack 0
   522                           
   523                           ; 4 bytes @ 0x1C
   524   00001D                     	ds	1
   525   00001E                     forward@mR:
   526                           	callstack 0
   527   00001E                     reverse@mR:
   528                           	callstack 0
   529   00001E                     left_45@mR:
   530                           	callstack 0
   531   00001E                     right_45@mR:
   532                           	callstack 0
   533   00001E                     space@mR:
   534                           	callstack 0
   535                           
   536                           ; 2 bytes @ 0x1D
   537   00001E                     	ds	2
   538   000020                     ??_space:
   539   000020                     left_45@count:
   540                           	callstack 0
   541   000020                     right_45@count:
   542                           	callstack 0
   543                           
   544                           ; 2 bytes @ 0x1F
   545   000020                     	ds	1
   546   000021                     ___fldiv@sign:
   547                           	callstack 0
   548                           
   549                           ; 1 bytes @ 0x20
   550   000021                     	ds	1
   551   000022                     left_45@left_timer:
   552                           	callstack 0
   553   000022                     right_45@right_timer:
   554                           	callstack 0
   555   000022                     ___fldiv@new_exp:
   556                           	callstack 0
   557                           
   558                           ; 2 bytes @ 0x21
   559   000022                     	ds	2
   560   000024                     ??_left_45:
   561   000024                     ??_right_45:
   562   000024                     ___fldiv@grs:
   563                           	callstack 0
   564                           
   565                           ; 4 bytes @ 0x23
   566   000024                     	ds	2
   567   000026                     left_45@i:
   568                           	callstack 0
   569   000026                     right_45@i:
   570                           	callstack 0
   571                           
   572                           ; 2 bytes @ 0x25
   573   000026                     	ds	2
   574   000028                     ___fldiv@bexp:
   575                           	callstack 0
   576   000028                     reverse_pink@mL:
   577                           	callstack 0
   578   000028                     reverse_yellow@mL:
   579                           	callstack 0
   580   000028                     instructions@mL:
   581                           	callstack 0
   582                           
   583                           ; 2 bytes @ 0x27
   584   000028                     	ds	1
   585   000029                     ___fldiv@aexp:
   586                           	callstack 0
   587                           
   588                           ; 1 bytes @ 0x28
   589   000029                     	ds	1
   590   00002A                     READcolor@c:
   591                           	callstack 0
   592   00002A                     reverse_pink@mR:
   593                           	callstack 0
   594   00002A                     reverse_yellow@mR:
   595                           	callstack 0
   596   00002A                     instructions@mR:
   597                           	callstack 0
   598                           
   599                           ; 2 bytes @ 0x29
   600   00002A                     	ds	2
   601   00002C                     ??_reverse_pink:
   602   00002C                     ??_reverse_yellow:
   603   00002C                     instructions@count:
   604                           	callstack 0
   605                           
   606                           ; 2 bytes @ 0x2B
   607   00002C                     	ds	2
   608   00002E                     ??_instructions:
   609   00002E                     instructions2@mL:
   610                           	callstack 0
   611                           
   612                           ; 2 bytes @ 0x2D
   613   00002E                     	ds	2
   614   000030                     instructions2@mR:
   615                           	callstack 0
   616                           
   617                           ; 2 bytes @ 0x2F
   618   000030                     	ds	2
   619   000032                     instructions2@count:
   620                           	callstack 0
   621                           
   622                           ; 2 bytes @ 0x31
   623   000032                     	ds	2
   624   000034                     return_home@mL:
   625                           	callstack 0
   626                           
   627                           ; 2 bytes @ 0x33
   628   000034                     	ds	2
   629   000036                     return_home@mR:
   630                           	callstack 0
   631                           
   632                           ; 2 bytes @ 0x35
   633   000036                     	ds	2
   634   000038                     ??_return_home:
   635                           
   636                           ; 1 bytes @ 0x37
   637   000038                     	ds	2
   638   00003A                     buggy_color_response@mL:
   639                           	callstack 0
   640                           
   641                           ; 2 bytes @ 0x39
   642   00003A                     	ds	2
   643   00003C                     buggy_color_response@mR:
   644                           	callstack 0
   645                           
   646                           ; 2 bytes @ 0x3B
   647   00003C                     	ds	2
   648   00003E                     buggy_color_response@c:
   649                           	callstack 0
   650                           
   651                           ; 2 bytes @ 0x3D
   652   00003E                     	ds	2
   653   000040                     
   654                           ; 1 bytes @ 0x3F
   655 ;;
   656 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   657 ;;
   658 ;; *************** function _main *****************
   659 ;; Defined at:
   660 ;;		line 19 in file "main.c"
   661 ;; Parameters:    Size  Location     Type
   662 ;;		None
   663 ;; Auto vars:     Size  Location     Type
   664 ;;		None
   665 ;; Return value:  Size  Location     Type
   666 ;;                  1    wreg      void 
   667 ;; Registers used:
   668 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   669 ;; Tracked objects:
   670 ;;		On entry : 0/0
   671 ;;		On exit  : 0/0
   672 ;;		Unchanged: 0/0
   673 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   674 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   675 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   676 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   677 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   678 ;;Total ram usage:        0 bytes
   679 ;; Hardware stack levels required when called: 9
   680 ;; This function calls:
   681 ;;		_buggy_color_response
   682 ;;		_need4speed
   683 ;;		_timer_reset
   684 ;; This function is called by:
   685 ;;		Startup code after reset
   686 ;; This function uses a non-reentrant model
   687 ;;
   688                           
   689                           	psect	text0
   690   001E78                     __ptext0:
   691                           	callstack 0
   692   001E78                     _main:
   693                           	callstack 22
   694   001E78                     
   695                           ;main.c: 21:     need4speed();
   696   001E78  EC8E  F010         	call	_need4speed	;wreg free
   697   001E7C                     l406:
   698   001E7C  A48E               	btfss	142,2,c	;volatile
   699   001E7E  EF43  F00F         	goto	u2611
   700   001E82  EF45  F00F         	goto	u2610
   701   001E86                     u2611:
   702   001E86  EF4C  F00F         	goto	l410
   703   001E8A                     u2610:
   704   001E8A  B68E               	btfsc	142,3,c	;volatile
   705   001E8C  EF4A  F00F         	goto	u2621
   706   001E90  EF4C  F00F         	goto	u2620
   707   001E94                     u2621:
   708   001E94  EF3E  F00F         	goto	l406
   709   001E98                     u2620:
   710   001E98                     l410:
   711                           
   712                           ;main.c: 26:     if (!PORTFbits.RF3){timer_reset();
   713   001E98  B68E               	btfsc	142,3,c	;volatile
   714   001E9A  EF51  F00F         	goto	u2631
   715   001E9E  EF53  F00F         	goto	u2630
   716   001EA2                     u2631:
   717   001EA2  EF65  F00F         	goto	l415
   718   001EA6                     u2630:
   719   001EA6  EC4E  F011         	call	_timer_reset	;wreg free
   720   001EAA                     l3283:
   721                           
   722                           ;main.c: 28:         buggy_color_response(&motorL,&motorR,&color);
   723   001EAA  0ED3               	movlw	low _motorL
   724   001EAC  6E3A               	movwf	buggy_color_response@mL^0,c
   725   001EAE  0E00               	movlw	high _motorL
   726   001EB0  6E3B               	movwf	(buggy_color_response@mL+1)^0,c
   727   001EB2  0ECA               	movlw	low _motorR
   728   001EB4  6E3C               	movwf	buggy_color_response@mR^0,c
   729   001EB6  0E00               	movlw	high _motorR
   730   001EB8  6E3D               	movwf	(buggy_color_response@mR+1)^0,c
   731   001EBA  0E45               	movlw	low _color
   732   001EBC  6E3E               	movwf	buggy_color_response@c^0,c
   733   001EBE  0E00               	movlw	high _color
   734   001EC0  6E3F               	movwf	(buggy_color_response@c+1)^0,c
   735   001EC2  EC26  F000         	call	_buggy_color_response	;wreg free
   736   001EC6  EF55  F00F         	goto	l3283
   737   001ECA                     l415:
   738   001ECA  EF24  F000         	goto	start
   739   001ECE                     __end_of_main:
   740                           	callstack 0
   741                           
   742 ;; *************** function _need4speed *****************
   743 ;; Defined at:
   744 ;;		line 13 in file "initialisation.c"
   745 ;; Parameters:    Size  Location     Type
   746 ;;		None
   747 ;; Auto vars:     Size  Location     Type
   748 ;;		None
   749 ;; Return value:  Size  Location     Type
   750 ;;                  1    wreg      void 
   751 ;; Registers used:
   752 ;;		wreg, status,2, status,0, cstack
   753 ;; Tracked objects:
   754 ;;		On entry : 0/0
   755 ;;		On exit  : 0/0
   756 ;;		Unchanged: 0/0
   757 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   758 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   759 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   760 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   761 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   762 ;;Total ram usage:        0 bytes
   763 ;; Hardware stack levels used: 1
   764 ;; Hardware stack levels required when called: 5
   765 ;; This function calls:
   766 ;;		_I2C_2_Master_Init
   767 ;;		_Timer0_init
   768 ;;		_buggyLEDs_init
   769 ;;		_color_click_init
   770 ;;		_initDCmotorsPWM
   771 ;;		_initUSART4
   772 ;;		_interrupts_init
   773 ;;		_motor_init
   774 ;;		_ports_init
   775 ;; This function is called by:
   776 ;;		_main
   777 ;; This function uses a non-reentrant model
   778 ;;
   779                           
   780                           	psect	text1
   781   00211C                     __ptext1:
   782                           	callstack 0
   783   00211C                     _need4speed:
   784                           	callstack 25
   785   00211C                     
   786                           ;initialisation.c: 14:     initDCmotorsPWM(99);
   787   00211C  0E00               	movlw	0
   788   00211E  6E04               	movwf	(initDCmotorsPWM@PWMperiod+1)^0,c
   789   002120  0E63               	movlw	99
   790   002122  6E03               	movwf	initDCmotorsPWM@PWMperiod^0,c
   791   002124  EC87  F00E         	call	_initDCmotorsPWM	;wreg free
   792   002128                     
   793                           ;initialisation.c: 15:     buggyLEDs_init();
   794   002128  EC43  F011         	call	_buggyLEDs_init	;wreg free
   795   00212C                     
   796                           ;initialisation.c: 16:     ports_init();
   797   00212C  EC03  F011         	call	_ports_init	;wreg free
   798   002130                     
   799                           ;initialisation.c: 17:     motor_init(&motorL,&motorR);
   800   002130  0ED3               	movlw	low _motorL
   801   002132  6E03               	movwf	motor_init@mL^0,c
   802   002134  0E00               	movlw	high _motorL
   803   002136  6E04               	movwf	(motor_init@mL+1)^0,c
   804   002138  0ECA               	movlw	low _motorR
   805   00213A  6E05               	movwf	motor_init@mR^0,c
   806   00213C  0E00               	movlw	high _motorR
   807   00213E  6E06               	movwf	(motor_init@mR+1)^0,c
   808   002140  EC07  F010         	call	_motor_init	;wreg free
   809   002144                     
   810                           ;initialisation.c: 18:     I2C_2_Master_Init();
   811   002144  ECC7  F010         	call	_I2C_2_Master_Init	;wreg free
   812                           
   813                           ;initialisation.c: 19:     color_click_init();
   814   002148  ECAD  F010         	call	_color_click_init	;wreg free
   815   00214C                     
   816                           ;initialisation.c: 20:     Timer0_init();
   817   00214C  EC33  F011         	call	_Timer0_init	;wreg free
   818   002150                     
   819                           ;initialisation.c: 21:     interrupts_init();
   820   002150  EC58  F011         	call	_interrupts_init	;wreg free
   821   002154                     
   822                           ;initialisation.c: 22:     initUSART4();
   823   002154  EC13  F011         	call	_initUSART4	;wreg free
   824   002158  0012               	return		;funcret
   825   00215A                     __end_of_need4speed:
   826                           	callstack 0
   827                           
   828 ;; *************** function _ports_init *****************
   829 ;; Defined at:
   830 ;;		line 5 in file "lights_buttons.c"
   831 ;; Parameters:    Size  Location     Type
   832 ;;		None
   833 ;; Auto vars:     Size  Location     Type
   834 ;;		None
   835 ;; Return value:  Size  Location     Type
   836 ;;                  1    wreg      void 
   837 ;; Registers used:
   838 ;;		None
   839 ;; Tracked objects:
   840 ;;		On entry : 0/0
   841 ;;		On exit  : 0/0
   842 ;;		Unchanged: 0/0
   843 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   844 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   845 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   846 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   847 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   848 ;;Total ram usage:        0 bytes
   849 ;; Hardware stack levels used: 1
   850 ;; Hardware stack levels required when called: 1
   851 ;; This function calls:
   852 ;;		Nothing
   853 ;; This function is called by:
   854 ;;		_need4speed
   855 ;; This function uses a non-reentrant model
   856 ;;
   857                           
   858                           	psect	text2
   859   002206                     __ptext2:
   860                           	callstack 0
   861   002206                     _ports_init:
   862                           	callstack 28
   863   002206                     
   864                           ;lights_buttons.c: 7:     TRISGbits.TRISG1 = 0;
   865   002206  9287               	bcf	135,1,c	;volatile
   866                           
   867                           ;lights_buttons.c: 8:     TRISAbits.TRISA4 = 0;
   868   002208  9881               	bcf	129,4,c	;volatile
   869                           
   870                           ;lights_buttons.c: 9:     TRISFbits.TRISF7 = 0;
   871   00220A  9E86               	bcf	134,7,c	;volatile
   872                           
   873                           ;lights_buttons.c: 11:     LATGbits.LATG1 = 1;
   874   00220C  827F               	bsf	127,1,c	;volatile
   875                           
   876                           ;lights_buttons.c: 12:     LATAbits.LATA4 = 1;
   877   00220E  8879               	bsf	121,4,c	;volatile
   878                           
   879                           ;lights_buttons.c: 13:     LATFbits.LATF7 = 1;
   880   002210  8E7E               	bsf	126,7,c	;volatile
   881                           
   882                           ;lights_buttons.c: 15:     TRISFbits.TRISF2=1;
   883   002212  8486               	bsf	134,2,c	;volatile
   884                           
   885                           ;lights_buttons.c: 16:     ANSELFbits.ANSELF2=0;
   886   002214  010E               	movlb	14	; () banked
   887   002216  95B4               	bcf	180,2,b	;volatile
   888                           
   889                           ;lights_buttons.c: 18:     TRISFbits.TRISF3= 1;
   890   002218  8686               	bsf	134,3,c	;volatile
   891                           
   892                           ;lights_buttons.c: 19:     ANSELFbits.ANSELF3 = 0;
   893   00221A  97B4               	bcf	180,3,b	;volatile
   894                           
   895                           ;lights_buttons.c: 21:     TRISDbits.TRISD7 = 0;
   896   00221C  9E84               	bcf	132,7,c	;volatile
   897                           
   898                           ;lights_buttons.c: 22:     LATDbits.LATD7 = 0;
   899   00221E  9E7C               	bcf	124,7,c	;volatile
   900                           
   901                           ;lights_buttons.c: 24:     TRISHbits.TRISH3 = 0;
   902   002220  9688               	bcf	136,3,c	;volatile
   903                           
   904                           ;lights_buttons.c: 25:     LATHbits.LATH3 = 0;
   905   002222  9680               	bcf	128,3,c	;volatile
   906   002224                     
   907                           ; BSR set to: 14
   908   002224  0012               	return		;funcret
   909   002226                     __end_of_ports_init:
   910                           	callstack 0
   911                           
   912 ;; *************** function _motor_init *****************
   913 ;; Defined at:
   914 ;;		line 98 in file "dc_motor.c"
   915 ;; Parameters:    Size  Location     Type
   916 ;;  mL              2    2[COMRAM] PTR struct DC_motor
   917 ;;		 -> motorL(9), 
   918 ;;  mR              2    4[COMRAM] PTR struct DC_motor
   919 ;;		 -> motorR(9), 
   920 ;; Auto vars:     Size  Location     Type
   921 ;;		None
   922 ;; Return value:  Size  Location     Type
   923 ;;                  1    wreg      void 
   924 ;; Registers used:
   925 ;;		wreg, status,2, status,0
   926 ;; Tracked objects:
   927 ;;		On entry : 0/0
   928 ;;		On exit  : 0/0
   929 ;;		Unchanged: 0/0
   930 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   931 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   932 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   933 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   934 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   935 ;;Total ram usage:        4 bytes
   936 ;; Hardware stack levels used: 1
   937 ;; Hardware stack levels required when called: 1
   938 ;; This function calls:
   939 ;;		Nothing
   940 ;; This function is called by:
   941 ;;		_need4speed
   942 ;; This function uses a non-reentrant model
   943 ;;
   944                           
   945                           	psect	text3
   946   00200E                     __ptext3:
   947                           	callstack 0
   948   00200E                     _motor_init:
   949                           	callstack 28
   950   00200E                     
   951                           ;dc_motor.c: 98: void motor_init(DC_motor *mL, DC_motor *mR);dc_motor.c: 99: {;dc_motor.
      +                          c: 100:     motorL.power=0;
   952   00200E  0E00               	movlw	0
   953   002010  0100               	movlb	0	; () banked
   954   002012  6FD3               	movwf	_motorL& (0+255),b
   955                           
   956                           ;dc_motor.c: 101:     motorL.direction=1;
   957   002014  0E01               	movlw	1
   958   002016  6FD4               	movwf	(_motorL+1)& (0+255),b
   959                           
   960                           ;dc_motor.c: 102:     motorL.brakemode=1;
   961   002018  0E01               	movlw	1
   962   00201A  6FD5               	movwf	(_motorL+2)& (0+255),b
   963   00201C                     
   964                           ; BSR set to: 0
   965                           ;dc_motor.c: 103:     motorL.posDutyHighByte=(unsigned char *)(&CCPR1H);
   966   00201C  0EAA               	movlw	170
   967   00201E  6FD8               	movwf	(_motorL+5)& (0+255),b
   968   002020  0E0F               	movlw	15
   969   002022  6FD9               	movwf	(_motorL+6)& (0+255),b
   970   002024                     
   971                           ; BSR set to: 0
   972                           ;dc_motor.c: 104:     motorL.negDutyHighByte=(unsigned char *)(&CCPR2H);
   973   002024  0EA6               	movlw	166
   974   002026  6FDA               	movwf	(_motorL+7)& (0+255),b
   975   002028  0E0F               	movlw	15
   976   00202A  6FDB               	movwf	(_motorL+8)& (0+255),b
   977                           
   978                           ;dc_motor.c: 105:     motorL.PWMperiod=99;
   979   00202C  0E00               	movlw	0
   980   00202E  6FD7               	movwf	(_motorL+4)& (0+255),b
   981   002030  0E63               	movlw	99
   982   002032  6FD6               	movwf	(_motorL+3)& (0+255),b
   983                           
   984                           ;dc_motor.c: 107:     motorR.power=0;
   985   002034  0E00               	movlw	0
   986   002036  6FCA               	movwf	_motorR& (0+255),b
   987                           
   988                           ;dc_motor.c: 108:     motorR.direction=1;
   989   002038  0E01               	movlw	1
   990   00203A  6FCB               	movwf	(_motorR+1)& (0+255),b
   991                           
   992                           ;dc_motor.c: 109:     motorR.brakemode=1;
   993   00203C  0E01               	movlw	1
   994   00203E  6FCC               	movwf	(_motorR+2)& (0+255),b
   995   002040                     
   996                           ; BSR set to: 0
   997                           ;dc_motor.c: 110:     motorR.posDutyHighByte=(unsigned char *)(&CCPR3H);
   998   002040  0E25               	movlw	37
   999   002042  6FCF               	movwf	(_motorR+5)& (0+255),b
  1000   002044  0E0F               	movlw	15
  1001   002046  6FD0               	movwf	(_motorR+6)& (0+255),b
  1002   002048                     
  1003                           ; BSR set to: 0
  1004                           ;dc_motor.c: 111:     motorR.negDutyHighByte=(unsigned char *)(&CCPR4H);
  1005   002048  0E21               	movlw	33
  1006   00204A  6FD1               	movwf	(_motorR+7)& (0+255),b
  1007   00204C  0E0F               	movlw	15
  1008   00204E  6FD2               	movwf	(_motorR+8)& (0+255),b
  1009                           
  1010                           ;dc_motor.c: 112:     motorR.PWMperiod=99;
  1011   002050  0E00               	movlw	0
  1012   002052  6FCE               	movwf	(_motorR+4)& (0+255),b
  1013   002054  0E63               	movlw	99
  1014   002056  6FCD               	movwf	(_motorR+3)& (0+255),b
  1015   002058                     
  1016                           ; BSR set to: 0
  1017   002058  0012               	return		;funcret
  1018   00205A                     __end_of_motor_init:
  1019                           	callstack 0
  1020                           
  1021 ;; *************** function _interrupts_init *****************
  1022 ;; Defined at:
  1023 ;;		line 9 in file "interrupts.c"
  1024 ;; Parameters:    Size  Location     Type
  1025 ;;		None
  1026 ;; Auto vars:     Size  Location     Type
  1027 ;;		None
  1028 ;; Return value:  Size  Location     Type
  1029 ;;                  1    wreg      void 
  1030 ;; Registers used:
  1031 ;;		None
  1032 ;; Tracked objects:
  1033 ;;		On entry : 0/0
  1034 ;;		On exit  : 0/0
  1035 ;;		Unchanged: 0/0
  1036 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1037 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1038 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1039 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1040 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1041 ;;Total ram usage:        0 bytes
  1042 ;; Hardware stack levels used: 1
  1043 ;; Hardware stack levels required when called: 1
  1044 ;; This function calls:
  1045 ;;		Nothing
  1046 ;; This function is called by:
  1047 ;;		_need4speed
  1048 ;; This function uses a non-reentrant model
  1049 ;;
  1050                           
  1051                           	psect	text4
  1052   0022B0                     __ptext4:
  1053                           	callstack 0
  1054   0022B0                     _interrupts_init:
  1055                           	callstack 28
  1056   0022B0                     
  1057                           ;interrupts.c: 20:     PIE0bits.TMR0IE = 1;
  1058   0022B0  010E               	movlb	14	; () banked
  1059   0022B2  8B29               	bsf	41,5,b	;volatile
  1060                           
  1061                           ;interrupts.c: 21:     PIR0bits.TMR0IF = 0;
  1062   0022B4  9B33               	bcf	51,5,b	;volatile
  1063                           
  1064                           ;interrupts.c: 22:     IPR0bits.TMR0IP = 0;
  1065   0022B6  9B1F               	bcf	31,5,b	;volatile
  1066                           
  1067                           ;interrupts.c: 25:     INTCONbits.IPEN = 1;
  1068   0022B8  8AF2               	bsf	242,5,c	;volatile
  1069                           
  1070                           ;interrupts.c: 26:     INTCONbits.PEIE = 1;
  1071   0022BA  8CF2               	bsf	242,6,c	;volatile
  1072                           
  1073                           ;interrupts.c: 27:     INTCONbits.GIE = 1;
  1074   0022BC  8EF2               	bsf	242,7,c	;volatile
  1075   0022BE                     
  1076                           ; BSR set to: 14
  1077   0022BE  0012               	return		;funcret
  1078   0022C0                     __end_of_interrupts_init:
  1079                           	callstack 0
  1080                           
  1081 ;; *************** function _initUSART4 *****************
  1082 ;; Defined at:
  1083 ;;		line 5 in file "serial.c"
  1084 ;; Parameters:    Size  Location     Type
  1085 ;;		None
  1086 ;; Auto vars:     Size  Location     Type
  1087 ;;		None
  1088 ;; Return value:  Size  Location     Type
  1089 ;;                  1    wreg      void 
  1090 ;; Registers used:
  1091 ;;		wreg, status,2
  1092 ;; Tracked objects:
  1093 ;;		On entry : 0/0
  1094 ;;		On exit  : 0/0
  1095 ;;		Unchanged: 0/0
  1096 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1097 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1098 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1099 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1100 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1101 ;;Total ram usage:        0 bytes
  1102 ;; Hardware stack levels used: 1
  1103 ;; Hardware stack levels required when called: 1
  1104 ;; This function calls:
  1105 ;;		Nothing
  1106 ;; This function is called by:
  1107 ;;		_need4speed
  1108 ;; This function uses a non-reentrant model
  1109 ;;
  1110                           
  1111                           	psect	text5
  1112   002226                     __ptext5:
  1113                           	callstack 0
  1114   002226                     _initUSART4:
  1115                           	callstack 28
  1116   002226                     
  1117                           ;serial.c: 7:     RC0PPS = 0x12;
  1118   002226  0E12               	movlw	18
  1119   002228  010E               	movlb	14	; () banked
  1120   00222A  6F62               	movwf	98,b	;volatile
  1121                           
  1122                           ;serial.c: 8:     RX4PPS = 0x11;
  1123   00222C  0E11               	movlw	17
  1124   00222E  6F15               	movwf	21,b	;volatile
  1125   002230                     
  1126                           ; BSR set to: 14
  1127                           ;serial.c: 9:     TRISCbits.TRISC1 = 1;
  1128   002230  8283               	bsf	131,1,c	;volatile
  1129   002232                     
  1130                           ; BSR set to: 14
  1131                           ;serial.c: 12:     BAUD4CONbits.BRG16 = 0;
  1132   002232  97E9               	bcf	233,3,b	;volatile
  1133   002234                     
  1134                           ; BSR set to: 14
  1135                           ;serial.c: 13:     TX4STAbits.BRGH = 0;
  1136   002234  95E8               	bcf	232,2,b	;volatile
  1137                           
  1138                           ;serial.c: 14:     SP4BRGL = 51;
  1139   002236  0E33               	movlw	51
  1140   002238  6FE5               	movwf	229,b	;volatile
  1141                           
  1142                           ;serial.c: 15:     SP4BRGH = 0;
  1143   00223A  0E00               	movlw	0
  1144   00223C  6FE6               	movwf	230,b	;volatile
  1145   00223E                     
  1146                           ; BSR set to: 14
  1147                           ;serial.c: 17:     RC4STAbits.CREN = 1;
  1148   00223E  89E7               	bsf	231,4,b	;volatile
  1149   002240                     
  1150                           ; BSR set to: 14
  1151                           ;serial.c: 18:     TX4STAbits.TXEN = 1;
  1152   002240  8BE8               	bsf	232,5,b	;volatile
  1153   002242                     
  1154                           ; BSR set to: 14
  1155                           ;serial.c: 19:     RC4STAbits.SPEN = 1;
  1156   002242  8FE7               	bsf	231,7,b	;volatile
  1157   002244                     
  1158                           ; BSR set to: 14
  1159   002244  0012               	return		;funcret
  1160   002246                     __end_of_initUSART4:
  1161                           	callstack 0
  1162                           
  1163 ;; *************** function _initDCmotorsPWM *****************
  1164 ;; Defined at:
  1165 ;;		line 9 in file "dc_motor.c"
  1166 ;; Parameters:    Size  Location     Type
  1167 ;;  PWMperiod       2    2[COMRAM] unsigned int 
  1168 ;; Auto vars:     Size  Location     Type
  1169 ;;		None
  1170 ;; Return value:  Size  Location     Type
  1171 ;;                  1    wreg      void 
  1172 ;; Registers used:
  1173 ;;		wreg, status,2
  1174 ;; Tracked objects:
  1175 ;;		On entry : 0/0
  1176 ;;		On exit  : 0/0
  1177 ;;		Unchanged: 0/0
  1178 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1179 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1180 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1181 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1182 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1183 ;;Total ram usage:        2 bytes
  1184 ;; Hardware stack levels used: 1
  1185 ;; Hardware stack levels required when called: 1
  1186 ;; This function calls:
  1187 ;;		Nothing
  1188 ;; This function is called by:
  1189 ;;		_need4speed
  1190 ;; This function uses a non-reentrant model
  1191 ;;
  1192                           
  1193                           	psect	text6
  1194   001D0E                     __ptext6:
  1195                           	callstack 0
  1196   001D0E                     _initDCmotorsPWM:
  1197                           	callstack 28
  1198   001D0E                     
  1199                           ;dc_motor.c: 11:     TRISEbits.TRISE2 = 0;
  1200   001D0E  9485               	bcf	133,2,c	;volatile
  1201                           
  1202                           ;dc_motor.c: 12:     TRISEbits.TRISE4 = 0;
  1203   001D10  9885               	bcf	133,4,c	;volatile
  1204                           
  1205                           ;dc_motor.c: 13:     TRISCbits.TRISC7 = 0;
  1206   001D12  9E83               	bcf	131,7,c	;volatile
  1207                           
  1208                           ;dc_motor.c: 14:     TRISGbits.TRISG6 = 0;
  1209   001D14  9C87               	bcf	135,6,c	;volatile
  1210                           
  1211                           ;dc_motor.c: 16:     LATEbits.LATE2 = 0;
  1212   001D16  947D               	bcf	125,2,c	;volatile
  1213                           
  1214                           ;dc_motor.c: 17:     LATEbits.LATE4 = 0;
  1215   001D18  987D               	bcf	125,4,c	;volatile
  1216                           
  1217                           ;dc_motor.c: 18:     LATCbits.LATC7 = 0;
  1218   001D1A  9E7B               	bcf	123,7,c	;volatile
  1219                           
  1220                           ;dc_motor.c: 19:     LATGbits.LATG6 = 0;
  1221   001D1C  9C7F               	bcf	127,6,c	;volatile
  1222   001D1E                     
  1223                           ;dc_motor.c: 22:     RE2PPS=0x05;
  1224   001D1E  0E05               	movlw	5
  1225   001D20  010E               	movlb	14	; () banked
  1226   001D22  6F74               	movwf	116,b	;volatile
  1227                           
  1228                           ;dc_motor.c: 23:     RE4PPS=0x06;
  1229   001D24  0E06               	movlw	6
  1230   001D26  6F76               	movwf	118,b	;volatile
  1231                           
  1232                           ;dc_motor.c: 24:     RC7PPS=0x07;
  1233   001D28  0E07               	movlw	7
  1234   001D2A  6F69               	movwf	105,b	;volatile
  1235                           
  1236                           ;dc_motor.c: 25:     RG6PPS=0x08;
  1237   001D2C  0E08               	movlw	8
  1238   001D2E  6F88               	movwf	136,b	;volatile
  1239                           
  1240                           ;dc_motor.c: 28:     T2CONbits.CKPS=0b100;
  1241   001D30  50BD               	movf	189,w,c	;volatile
  1242   001D32  0B8F               	andlw	-113
  1243   001D34  0940               	iorlw	64
  1244   001D36  6EBD               	movwf	189,c	;volatile
  1245                           
  1246                           ;dc_motor.c: 29:     T2HLTbits.MODE=0b00000;
  1247   001D38  0EE0               	movlw	-32
  1248   001D3A  16BE               	andwf	190,f,c	;volatile
  1249                           
  1250                           ;dc_motor.c: 30:     T2CLKCONbits.CS=0b0001;
  1251   001D3C  50BF               	movf	191,w,c	;volatile
  1252   001D3E  0BF0               	andlw	-16
  1253   001D40  0901               	iorlw	1
  1254   001D42  6EBF               	movwf	191,c	;volatile
  1255   001D44                     
  1256                           ; BSR set to: 14
  1257                           ;dc_motor.c: 34:     T2PR=PWMperiod;
  1258   001D44  C003  FFBC         	movff	initDCmotorsPWM@PWMperiod,4028	;volatile
  1259   001D48                     
  1260                           ; BSR set to: 14
  1261                           ;dc_motor.c: 35:     T2CONbits.ON=1;
  1262   001D48  8EBD               	bsf	189,7,c	;volatile
  1263                           
  1264                           ;dc_motor.c: 39:     CCPR1H=0;
  1265   001D4A  0E00               	movlw	0
  1266   001D4C  6EAA               	movwf	170,c	;volatile
  1267                           
  1268                           ;dc_motor.c: 40:     CCPR2H=0;
  1269   001D4E  0E00               	movlw	0
  1270   001D50  6EA6               	movwf	166,c	;volatile
  1271                           
  1272                           ;dc_motor.c: 41:     CCPR3H=0;
  1273   001D52  0E00               	movlw	0
  1274   001D54  010F               	movlb	15	; () banked
  1275   001D56  6F25               	movwf	37,b	;volatile
  1276                           
  1277                           ;dc_motor.c: 42:     CCPR4H=0;
  1278   001D58  0E00               	movlw	0
  1279   001D5A  6F21               	movwf	33,b	;volatile
  1280                           
  1281                           ;dc_motor.c: 45:     CCPTMRS0bits.C1TSEL=0;
  1282   001D5C  0EFC               	movlw	-4
  1283   001D5E  16AD               	andwf	173,f,c	;volatile
  1284                           
  1285                           ;dc_motor.c: 46:     CCPTMRS0bits.C2TSEL=0;
  1286   001D60  0EF3               	movlw	-13
  1287   001D62  16AD               	andwf	173,f,c	;volatile
  1288                           
  1289                           ;dc_motor.c: 47:     CCPTMRS0bits.C3TSEL=0;
  1290   001D64  0ECF               	movlw	-49
  1291   001D66  16AD               	andwf	173,f,c	;volatile
  1292                           
  1293                           ;dc_motor.c: 48:     CCPTMRS0bits.C4TSEL=0;
  1294   001D68  0E3F               	movlw	-193
  1295   001D6A  16AD               	andwf	173,f,c	;volatile
  1296   001D6C                     
  1297                           ; BSR set to: 15
  1298                           ;dc_motor.c: 51:     CCP1CONbits.FMT=1;
  1299   001D6C  88AB               	bsf	171,4,c	;volatile
  1300                           
  1301                           ;dc_motor.c: 52:     CCP1CONbits.CCP1MODE=0b1100;
  1302   001D6E  50AB               	movf	171,w,c	;volatile
  1303   001D70  0BF0               	andlw	-16
  1304   001D72  090C               	iorlw	12
  1305   001D74  6EAB               	movwf	171,c	;volatile
  1306   001D76                     
  1307                           ; BSR set to: 15
  1308                           ;dc_motor.c: 53:     CCP1CONbits.EN=1;
  1309   001D76  8EAB               	bsf	171,7,c	;volatile
  1310   001D78                     
  1311                           ; BSR set to: 15
  1312                           ;dc_motor.c: 56:     CCP2CONbits.FMT=1;
  1313   001D78  88A7               	bsf	167,4,c	;volatile
  1314                           
  1315                           ;dc_motor.c: 57:     CCP2CONbits.CCP2MODE=0b1100;
  1316   001D7A  50A7               	movf	167,w,c	;volatile
  1317   001D7C  0BF0               	andlw	-16
  1318   001D7E  090C               	iorlw	12
  1319   001D80  6EA7               	movwf	167,c	;volatile
  1320   001D82                     
  1321                           ; BSR set to: 15
  1322                           ;dc_motor.c: 58:     CCP2CONbits.EN=1;
  1323   001D82  8EA7               	bsf	167,7,c	;volatile
  1324   001D84                     
  1325                           ; BSR set to: 15
  1326                           ;dc_motor.c: 62:     CCP3CONbits.FMT=1;
  1327   001D84  8926               	bsf	38,4,b	;volatile
  1328                           
  1329                           ;dc_motor.c: 63:     CCP3CONbits.CCP3MODE=0b1100;
  1330   001D86  5126               	movf	38,w,b	;volatile
  1331   001D88  0BF0               	andlw	-16
  1332   001D8A  090C               	iorlw	12
  1333   001D8C  6F26               	movwf	38,b	;volatile
  1334   001D8E                     
  1335                           ; BSR set to: 15
  1336                           ;dc_motor.c: 64:     CCP3CONbits.EN=1;
  1337   001D8E  8F26               	bsf	38,7,b	;volatile
  1338   001D90                     
  1339                           ; BSR set to: 15
  1340                           ;dc_motor.c: 67:     CCP4CONbits.FMT=1;
  1341   001D90  8922               	bsf	34,4,b	;volatile
  1342                           
  1343                           ;dc_motor.c: 68:     CCP4CONbits.CCP4MODE=0b1100;
  1344   001D92  5122               	movf	34,w,b	;volatile
  1345   001D94  0BF0               	andlw	-16
  1346   001D96  090C               	iorlw	12
  1347   001D98  6F22               	movwf	34,b	;volatile
  1348   001D9A                     
  1349                           ; BSR set to: 15
  1350                           ;dc_motor.c: 69:     CCP4CONbits.EN=1;
  1351   001D9A  8F22               	bsf	34,7,b	;volatile
  1352   001D9C                     
  1353                           ; BSR set to: 15
  1354   001D9C  0012               	return		;funcret
  1355   001D9E                     __end_of_initDCmotorsPWM:
  1356                           	callstack 0
  1357                           
  1358 ;; *************** function _color_click_init *****************
  1359 ;; Defined at:
  1360 ;;		line 10 in file "color.c"
  1361 ;; Parameters:    Size  Location     Type
  1362 ;;		None
  1363 ;; Auto vars:     Size  Location     Type
  1364 ;;		None
  1365 ;; Return value:  Size  Location     Type
  1366 ;;                  1    wreg      void 
  1367 ;; Registers used:
  1368 ;;		wreg, status,2, status,0, cstack
  1369 ;; Tracked objects:
  1370 ;;		On entry : 0/0
  1371 ;;		On exit  : 0/0
  1372 ;;		Unchanged: 0/0
  1373 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1374 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1375 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1376 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1377 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1378 ;;Total ram usage:        1 bytes
  1379 ;; Hardware stack levels used: 1
  1380 ;; Hardware stack levels required when called: 4
  1381 ;; This function calls:
  1382 ;;		_I2C_2_Master_Init
  1383 ;;		_color_writetoaddr
  1384 ;; This function is called by:
  1385 ;;		_need4speed
  1386 ;; This function uses a non-reentrant model
  1387 ;;
  1388                           
  1389                           	psect	text7
  1390   00215A                     __ptext7:
  1391                           	callstack 0
  1392   00215A                     _color_click_init:
  1393                           	callstack 25
  1394   00215A                     
  1395                           ;color.c: 13:     I2C_2_Master_Init();
  1396   00215A  ECC7  F010         	call	_I2C_2_Master_Init	;wreg free
  1397   00215E                     
  1398                           ;color.c: 15:   color_writetoaddr(0x00, 0x01);
  1399   00215E  0E01               	movlw	1
  1400   002160  6E05               	movwf	color_writetoaddr@value^0,c
  1401   002162  0E00               	movlw	0
  1402   002164  EC23  F011         	call	_color_writetoaddr
  1403   002168                     
  1404                           ;color.c: 16:     _delay((unsigned long)((3)*(64000000/4000.0)));
  1405   002168  0E3F               	movlw	63
  1406   00216A  6E07               	movwf	??_color_click_init^0,c
  1407   00216C  0E55               	movlw	85
  1408   00216E                     u2647:
  1409   00216E  2EE8               	decfsz	wreg,f,c
  1410   002170  D7FE               	bra	u2647
  1411   002172  2E07               	decfsz	??_color_click_init^0,f,c
  1412   002174  D7FC               	bra	u2647
  1413   002176  F000               	nop	
  1414   002178                     
  1415                           ;color.c: 18:  color_writetoaddr(0x00, 0x03);
  1416   002178  0E03               	movlw	3
  1417   00217A  6E05               	movwf	color_writetoaddr@value^0,c
  1418   00217C  0E00               	movlw	0
  1419   00217E  EC23  F011         	call	_color_writetoaddr
  1420   002182                     
  1421                           ;color.c: 20:  color_writetoaddr(0x01, 0xD5);
  1422   002182  0ED5               	movlw	213
  1423   002184  6E05               	movwf	color_writetoaddr@value^0,c
  1424   002186  0E01               	movlw	1
  1425   002188  EC23  F011         	call	_color_writetoaddr
  1426   00218C  0012               	return		;funcret
  1427   00218E                     __end_of_color_click_init:
  1428                           	callstack 0
  1429                           
  1430 ;; *************** function _color_writetoaddr *****************
  1431 ;; Defined at:
  1432 ;;		line 23 in file "color.c"
  1433 ;; Parameters:    Size  Location     Type
  1434 ;;  address         1    wreg     unsigned char 
  1435 ;;  value           1    4[COMRAM] unsigned char 
  1436 ;; Auto vars:     Size  Location     Type
  1437 ;;  address         1    5[COMRAM] unsigned char 
  1438 ;; Return value:  Size  Location     Type
  1439 ;;                  1    wreg      void 
  1440 ;; Registers used:
  1441 ;;		wreg, status,2, status,0, cstack
  1442 ;; Tracked objects:
  1443 ;;		On entry : 0/0
  1444 ;;		On exit  : 0/0
  1445 ;;		Unchanged: 0/0
  1446 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1447 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1448 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1449 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1450 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1451 ;;Total ram usage:        2 bytes
  1452 ;; Hardware stack levels used: 1
  1453 ;; Hardware stack levels required when called: 3
  1454 ;; This function calls:
  1455 ;;		_I2C_2_Master_Start
  1456 ;;		_I2C_2_Master_Stop
  1457 ;;		_I2C_2_Master_Write
  1458 ;; This function is called by:
  1459 ;;		_color_click_init
  1460 ;; This function uses a non-reentrant model
  1461 ;;
  1462                           
  1463                           	psect	text8
  1464   002246                     __ptext8:
  1465                           	callstack 0
  1466   002246                     _color_writetoaddr:
  1467                           	callstack 25
  1468                           
  1469                           ;incstack = 0
  1470                           ;color_writetoaddr@address stored from wreg
  1471   002246  6E06               	movwf	color_writetoaddr@address^0,c
  1472   002248                     
  1473                           ;color.c: 24:     I2C_2_Master_Start();
  1474   002248  EC6B  F011         	call	_I2C_2_Master_Start	;wreg free
  1475                           
  1476                           ;color.c: 25:     I2C_2_Master_Write(0x52 | 0x00);
  1477   00224C  0E52               	movlw	82
  1478   00224E  EC60  F011         	call	_I2C_2_Master_Write
  1479                           
  1480                           ;color.c: 26:     I2C_2_Master_Write(0x80 | address);
  1481   002252  5006               	movf	color_writetoaddr@address^0,w,c
  1482   002254  0980               	iorlw	128
  1483   002256  EC60  F011         	call	_I2C_2_Master_Write
  1484                           
  1485                           ;color.c: 27:     I2C_2_Master_Write(value);
  1486   00225A  5005               	movf	color_writetoaddr@value^0,w,c
  1487   00225C  EC60  F011         	call	_I2C_2_Master_Write
  1488                           
  1489                           ;color.c: 28:     I2C_2_Master_Stop();
  1490   002260  EC66  F011         	call	_I2C_2_Master_Stop	;wreg free
  1491   002264  0012               	return		;funcret
  1492   002266                     __end_of_color_writetoaddr:
  1493                           	callstack 0
  1494                           
  1495 ;; *************** function _I2C_2_Master_Init *****************
  1496 ;; Defined at:
  1497 ;;		line 4 in file "i2c.c"
  1498 ;; Parameters:    Size  Location     Type
  1499 ;;		None
  1500 ;; Auto vars:     Size  Location     Type
  1501 ;;		None
  1502 ;; Return value:  Size  Location     Type
  1503 ;;                  1    wreg      void 
  1504 ;; Registers used:
  1505 ;;		wreg, status,2
  1506 ;; Tracked objects:
  1507 ;;		On entry : 0/0
  1508 ;;		On exit  : 0/0
  1509 ;;		Unchanged: 0/0
  1510 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1511 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1512 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1513 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1514 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1515 ;;Total ram usage:        0 bytes
  1516 ;; Hardware stack levels used: 1
  1517 ;; Hardware stack levels required when called: 1
  1518 ;; This function calls:
  1519 ;;		Nothing
  1520 ;; This function is called by:
  1521 ;;		_color_click_init
  1522 ;;		_need4speed
  1523 ;; This function uses a non-reentrant model
  1524 ;;
  1525                           
  1526                           	psect	text9
  1527   00218E                     __ptext9:
  1528                           	callstack 0
  1529   00218E                     _I2C_2_Master_Init:
  1530                           	callstack 27
  1531   00218E                     
  1532                           ;i2c.c: 7:   SSP2CON1bits.SSPM= 0b1000;
  1533   00218E  010E               	movlb	14	; () banked
  1534   002190  51D9               	movf	217,w,b	;volatile
  1535   002192  0BF0               	andlw	-16
  1536   002194  0908               	iorlw	8
  1537   002196  6FD9               	movwf	217,b	;volatile
  1538   002198                     
  1539                           ; BSR set to: 14
  1540                           ;i2c.c: 8:   SSP2CON1bits.SSPEN = 1;
  1541   002198  8BD9               	bsf	217,5,b	;volatile
  1542                           
  1543                           ;i2c.c: 9:   SSP2ADD = (64000000/(4*100000))-1;
  1544   00219A  0E9F               	movlw	159
  1545   00219C  6FD6               	movwf	214,b	;volatile
  1546   00219E                     
  1547                           ; BSR set to: 14
  1548                           ;i2c.c: 12:   TRISDbits.TRISD5 = 1;
  1549   00219E  8A84               	bsf	132,5,c	;volatile
  1550   0021A0                     
  1551                           ; BSR set to: 14
  1552                           ;i2c.c: 13:   TRISDbits.TRISD6 = 1;
  1553   0021A0  8C84               	bsf	132,6,c	;volatile
  1554   0021A2                     
  1555                           ; BSR set to: 14
  1556                           ;i2c.c: 14:   ANSELDbits.ANSELD5=0;
  1557   0021A2  9BA7               	bcf	167,5,b	;volatile
  1558   0021A4                     
  1559                           ; BSR set to: 14
  1560                           ;i2c.c: 15:   ANSELDbits.ANSELD6=0;
  1561   0021A4  9DA7               	bcf	167,6,b	;volatile
  1562                           
  1563                           ;i2c.c: 16:   SSP2DATPPS=0x1D;
  1564   0021A6  0E1D               	movlw	29
  1565   0021A8  6F1D               	movwf	29,b	;volatile
  1566                           
  1567                           ;i2c.c: 17:   SSP2CLKPPS=0x1E;
  1568   0021AA  0E1E               	movlw	30
  1569   0021AC  6F1C               	movwf	28,b	;volatile
  1570                           
  1571                           ;i2c.c: 18:   RD5PPS=0x1C;
  1572   0021AE  0E1C               	movlw	28
  1573   0021B0  6F6F               	movwf	111,b	;volatile
  1574                           
  1575                           ;i2c.c: 19:   RD6PPS=0x1B;
  1576   0021B2  0E1B               	movlw	27
  1577   0021B4  6F70               	movwf	112,b	;volatile
  1578   0021B6                     
  1579                           ; BSR set to: 14
  1580   0021B6  0012               	return		;funcret
  1581   0021B8                     __end_of_I2C_2_Master_Init:
  1582                           	callstack 0
  1583                           
  1584 ;; *************** function _buggyLEDs_init *****************
  1585 ;; Defined at:
  1586 ;;		line 28 in file "lights_buttons.c"
  1587 ;; Parameters:    Size  Location     Type
  1588 ;;		None
  1589 ;; Auto vars:     Size  Location     Type
  1590 ;;		None
  1591 ;; Return value:  Size  Location     Type
  1592 ;;                  1    wreg      void 
  1593 ;; Registers used:
  1594 ;;		None
  1595 ;; Tracked objects:
  1596 ;;		On entry : 0/0
  1597 ;;		On exit  : 0/0
  1598 ;;		Unchanged: 0/0
  1599 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1600 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1601 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1602 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1603 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1604 ;;Total ram usage:        0 bytes
  1605 ;; Hardware stack levels used: 1
  1606 ;; Hardware stack levels required when called: 1
  1607 ;; This function calls:
  1608 ;;		Nothing
  1609 ;; This function is called by:
  1610 ;;		_need4speed
  1611 ;; This function uses a non-reentrant model
  1612 ;;
  1613                           
  1614                           	psect	text10
  1615   002286                     __ptext10:
  1616                           	callstack 0
  1617   002286                     _buggyLEDs_init:
  1618                           	callstack 28
  1619   002286                     
  1620                           ;lights_buttons.c: 29:     LATHbits.LATH1 = 0;
  1621   002286  9280               	bcf	128,1,c	;volatile
  1622                           
  1623                           ;lights_buttons.c: 30:     LATDbits.LATD3 = 0;
  1624   002288  967C               	bcf	124,3,c	;volatile
  1625                           
  1626                           ;lights_buttons.c: 31:     LATDbits.LATD4 = 0;
  1627   00228A  987C               	bcf	124,4,c	;volatile
  1628                           
  1629                           ;lights_buttons.c: 32:     LATFbits.LATF0 = 0;
  1630   00228C  907E               	bcf	126,0,c	;volatile
  1631                           
  1632                           ;lights_buttons.c: 33:     LATHbits.LATH0 = 0;
  1633   00228E  9080               	bcf	128,0,c	;volatile
  1634                           
  1635                           ;lights_buttons.c: 35:     TRISHbits.TRISH1 = 0;
  1636   002290  9288               	bcf	136,1,c	;volatile
  1637                           
  1638                           ;lights_buttons.c: 36:     TRISDbits.TRISD3 = 0;
  1639   002292  9684               	bcf	132,3,c	;volatile
  1640                           
  1641                           ;lights_buttons.c: 37:     TRISDbits.TRISD4 = 0;
  1642   002294  9884               	bcf	132,4,c	;volatile
  1643                           
  1644                           ;lights_buttons.c: 38:     TRISFbits.TRISF0 = 0;
  1645   002296  9086               	bcf	134,0,c	;volatile
  1646                           
  1647                           ;lights_buttons.c: 39:     TRISHbits.TRISH0 = 0;
  1648   002298  9088               	bcf	136,0,c	;volatile
  1649   00229A  0012               	return		;funcret
  1650   00229C                     __end_of_buggyLEDs_init:
  1651                           	callstack 0
  1652                           
  1653 ;; *************** function _Timer0_init *****************
  1654 ;; Defined at:
  1655 ;;		line 8 in file "timers.c"
  1656 ;; Parameters:    Size  Location     Type
  1657 ;;		None
  1658 ;; Auto vars:     Size  Location     Type
  1659 ;;		None
  1660 ;; Return value:  Size  Location     Type
  1661 ;;                  1    wreg      void 
  1662 ;; Registers used:
  1663 ;;		wreg, status,2
  1664 ;; Tracked objects:
  1665 ;;		On entry : 0/0
  1666 ;;		On exit  : 0/0
  1667 ;;		Unchanged: 0/0
  1668 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1669 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1670 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1671 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1672 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1673 ;;Total ram usage:        0 bytes
  1674 ;; Hardware stack levels used: 1
  1675 ;; Hardware stack levels required when called: 1
  1676 ;; This function calls:
  1677 ;;		Nothing
  1678 ;; This function is called by:
  1679 ;;		_need4speed
  1680 ;; This function uses a non-reentrant model
  1681 ;;
  1682                           
  1683                           	psect	text11
  1684   002266                     __ptext11:
  1685                           	callstack 0
  1686   002266                     _Timer0_init:
  1687                           	callstack 28
  1688   002266                     
  1689                           ;timers.c: 10:     T0CON1bits.T0CS=0b010;
  1690   002266  50D6               	movf	214,w,c	;volatile
  1691   002268  0B1F               	andlw	-225
  1692   00226A  0940               	iorlw	64
  1693   00226C  6ED6               	movwf	214,c	;volatile
  1694   00226E                     
  1695                           ;timers.c: 11:     T0CON1bits.T0ASYNC=1;
  1696   00226E  88D6               	bsf	214,4,c	;volatile
  1697                           
  1698                           ;timers.c: 12:     T0CON1bits.T0CKPS=0b0101;
  1699   002270  50D6               	movf	214,w,c	;volatile
  1700   002272  0BF0               	andlw	-16
  1701   002274  0905               	iorlw	5
  1702   002276  6ED6               	movwf	214,c	;volatile
  1703   002278                     
  1704                           ;timers.c: 13:     T0CON0bits.T016BIT=1;
  1705   002278  88D5               	bsf	213,4,c	;volatile
  1706                           
  1707                           ;timers.c: 16:     TMR0H=0;
  1708   00227A  0E00               	movlw	0
  1709   00227C  6ED4               	movwf	212,c	;volatile
  1710                           
  1711                           ;timers.c: 17:     TMR0L=0b00100011;
  1712   00227E  0E23               	movlw	35
  1713   002280  6ED3               	movwf	211,c	;volatile
  1714   002282                     
  1715                           ;timers.c: 18:     T0CON0bits.T0EN=1;
  1716   002282  8ED5               	bsf	213,7,c	;volatile
  1717   002284  0012               	return		;funcret
  1718   002286                     __end_of_Timer0_init:
  1719                           	callstack 0
  1720                           
  1721 ;; *************** function _buggy_color_response *****************
  1722 ;; Defined at:
  1723 ;;		line 103 in file "color.c"
  1724 ;; Parameters:    Size  Location     Type
  1725 ;;  mL              2   57[COMRAM] PTR struct DC_motor
  1726 ;;		 -> motorL(9), 
  1727 ;;  mR              2   59[COMRAM] PTR struct DC_motor
  1728 ;;		 -> motorR(9), 
  1729 ;;  c               2   61[COMRAM] PTR struct colors
  1730 ;;		 -> color(20), 
  1731 ;; Auto vars:     Size  Location     Type
  1732 ;;		None
  1733 ;; Return value:  Size  Location     Type
  1734 ;;                  1    wreg      void 
  1735 ;; Registers used:
  1736 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1737 ;; Tracked objects:
  1738 ;;		On entry : 0/0
  1739 ;;		On exit  : 0/0
  1740 ;;		Unchanged: 0/0
  1741 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1742 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1743 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1744 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1745 ;;      Totals:         6       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1746 ;;Total ram usage:        8 bytes
  1747 ;; Hardware stack levels used: 1
  1748 ;; Hardware stack levels required when called: 8
  1749 ;; This function calls:
  1750 ;;		_READcolor
  1751 ;;		___flge
  1752 ;;		_forward
  1753 ;;		_instructions
  1754 ;;		_instructions2
  1755 ;;		_return_home
  1756 ;;		_space
  1757 ;;		_stop
  1758 ;;		_timer_reset
  1759 ;; This function is called by:
  1760 ;;		_main
  1761 ;; This function uses a non-reentrant model
  1762 ;;
  1763                           
  1764                           	psect	text12
  1765   00004C                     __ptext12:
  1766                           	callstack 0
  1767   00004C                     _buggy_color_response:
  1768                           	callstack 22
  1769   00004C                     
  1770                           ;color.c: 105:     READcolor(&color);
  1771   00004C  0E45               	movlw	low _color
  1772   00004E  6E2A               	movwf	READcolor@c^0,c
  1773   000050  0E00               	movlw	high _color
  1774   000052  6E2B               	movwf	(READcolor@c+1)^0,c
  1775   000054  EC19  F00A         	call	_READcolor	;wreg free
  1776   000058  0EC5               	movlw	197
  1777   00005A  5C4B               	subwf	(_color+6)^0,w,c
  1778   00005C  0E09               	movlw	9
  1779   00005E  584C               	subwfb	(_color+7)^0,w,c
  1780   000060  A0D8               	btfss	status,0,c
  1781   000062  EF35  F000         	goto	u2381
  1782   000066  EF37  F000         	goto	u2380
  1783   00006A                     u2381:
  1784   00006A  EF9F  F003         	goto	l3275
  1785   00006E                     u2380:
  1786   00006E                     
  1787                           ;color.c: 108:         timer_memory[timer_index] = timer_val;
  1788   00006E  0E60               	movlw	low _timer_memory
  1789   000070  2443               	addwf	_timer_index^0,w,c
  1790   000072  6ED9               	movwf	fsr2l,c
  1791   000074  6ADA               	clrf	fsr2h,c
  1792   000076  0E00               	movlw	high _timer_memory
  1793   000078  22DA               	addwfc	fsr2h,f,c
  1794   00007A  C0C4  FFDF         	movff	_timer_val,indf2
  1795   00007E                     
  1796                           ;color.c: 109:         timer_index ++;
  1797   00007E  2A43               	incf	_timer_index^0,f,c
  1798   000080                     
  1799                           ;color.c: 110:         forward(mL,mR);
  1800   000080  C03A  F01C         	movff	buggy_color_response@mL,forward@mL
  1801   000084  C03B  F01D         	movff	buggy_color_response@mL+1,forward@mL+1
  1802   000088  C03C  F01E         	movff	buggy_color_response@mR,forward@mR
  1803   00008C  C03D  F01F         	movff	buggy_color_response@mR+1,forward@mR+1
  1804   000090  ECDF  F00C         	call	_forward	;wreg free
  1805   000094                     
  1806                           ;color.c: 111:         _delay((unsigned long)((50)*(64000000/4000.0)));
  1807   000094  0E05               	movlw	5
  1808   000096  0100               	movlb	0	; () banked
  1809   000098  6FDF               	movwf	(??_buggy_color_response+1)& (0+255),b
  1810   00009A  0E0F               	movlw	15
  1811   00009C  6FDE               	movwf	??_buggy_color_response& (0+255),b
  1812   00009E  0EF1               	movlw	241
  1813   0000A0                     u2657:
  1814   0000A0  2EE8               	decfsz	wreg,f,c
  1815   0000A2  D7FE               	bra	u2657
  1816   0000A4  2FDE               	decfsz	??_buggy_color_response& (0+255),f,b
  1817   0000A6  D7FC               	bra	u2657
  1818   0000A8  2FDF               	decfsz	(??_buggy_color_response+1)& (0+255),f,b
  1819   0000AA  D7FA               	bra	u2657
  1820   0000AC                     
  1821                           ;color.c: 112:         stop(mL,mR); _delay((unsigned long)((500)*(64000000/4000.0)));
  1822   0000AC  C03A  F016         	movff	buggy_color_response@mL,stop@mL
  1823   0000B0  C03B  F017         	movff	buggy_color_response@mL+1,stop@mL+1
  1824   0000B4  C03C  F018         	movff	buggy_color_response@mR,stop@mR
  1825   0000B8  C03D  F019         	movff	buggy_color_response@mR+1,stop@mR+1
  1826   0000BC  EC9D  F00D         	call	_stop	;wreg free
  1827   0000C0  0E29               	movlw	41
  1828   0000C2  0100               	movlb	0	; () banked
  1829   0000C4  6FDF               	movwf	(??_buggy_color_response+1)& (0+255),b
  1830   0000C6  0E96               	movlw	150
  1831   0000C8  6FDE               	movwf	??_buggy_color_response& (0+255),b
  1832   0000CA  0E7F               	movlw	127
  1833   0000CC                     u2667:
  1834   0000CC  2EE8               	decfsz	wreg,f,c
  1835   0000CE  D7FE               	bra	u2667
  1836   0000D0  2FDE               	decfsz	??_buggy_color_response& (0+255),f,b
  1837   0000D2  D7FC               	bra	u2667
  1838   0000D4  2FDF               	decfsz	(??_buggy_color_response+1)& (0+255),f,b
  1839   0000D6  D7FA               	bra	u2667
  1840   0000D8                     
  1841                           ;color.c: 113:         READcolor(&color); _delay((unsigned long)((500)*(64000000/4000.0)
      +                          ));
  1842   0000D8  0E45               	movlw	low _color
  1843   0000DA  6E2A               	movwf	READcolor@c^0,c
  1844   0000DC  0E00               	movlw	high _color
  1845   0000DE  6E2B               	movwf	(READcolor@c+1)^0,c
  1846   0000E0  EC19  F00A         	call	_READcolor	;wreg free
  1847   0000E4  0E29               	movlw	41
  1848   0000E6  0100               	movlb	0	; () banked
  1849   0000E8  6FDF               	movwf	(??_buggy_color_response+1)& (0+255),b
  1850   0000EA  0E96               	movlw	150
  1851   0000EC  6FDE               	movwf	??_buggy_color_response& (0+255),b
  1852   0000EE  0E7F               	movlw	127
  1853   0000F0                     u2677:
  1854   0000F0  2EE8               	decfsz	wreg,f,c
  1855   0000F2  D7FE               	bra	u2677
  1856   0000F4  2FDE               	decfsz	??_buggy_color_response& (0+255),f,b
  1857   0000F6  D7FC               	bra	u2677
  1858   0000F8  2FDF               	decfsz	(??_buggy_color_response+1)& (0+255),f,b
  1859   0000FA  D7FA               	bra	u2677
  1860   0000FC                     
  1861                           ;color.c: 115:         if (color.R_norm > 0.77 && color.B_norm < 0.18 && color.G_norm < 
      +                          0.14){
  1862   0000FC  0EB8               	movlw	184
  1863   0000FE  6E03               	movwf	___flge@ff1^0,c
  1864   000100  0E1E               	movlw	30
  1865   000102  6E04               	movwf	(___flge@ff1+1)^0,c
  1866   000104  0E45               	movlw	69
  1867   000106  6E05               	movwf	(___flge@ff1+2)^0,c
  1868   000108  0E3F               	movlw	63
  1869   00010A  6E06               	movwf	(___flge@ff1+3)^0,c
  1870   00010C  C04D  F007         	movff	_color+8,___flge@ff2
  1871   000110  C04E  F008         	movff	_color+9,___flge@ff2+1
  1872   000114  C04F  F009         	movff	_color+10,___flge@ff2+2
  1873   000118  C050  F00A         	movff	_color+11,___flge@ff2+3
  1874   00011C  ECDC  F00B         	call	___flge	;wreg free
  1875   000120  B0D8               	btfsc	status,0,c
  1876   000122  EF95  F000         	goto	u2391
  1877   000126  EF97  F000         	goto	u2390
  1878   00012A                     u2391:
  1879   00012A  EFE0  F000         	goto	l3179
  1880   00012E                     u2390:
  1881   00012E  C051  F003         	movff	_color+12,___flge@ff1
  1882   000132  C052  F004         	movff	_color+13,___flge@ff1+1
  1883   000136  C053  F005         	movff	_color+14,___flge@ff1+2
  1884   00013A  C054  F006         	movff	_color+15,___flge@ff1+3
  1885   00013E  0EEC               	movlw	236
  1886   000140  6E07               	movwf	___flge@ff2^0,c
  1887   000142  0E51               	movlw	81
  1888   000144  6E08               	movwf	(___flge@ff2+1)^0,c
  1889   000146  0E38               	movlw	56
  1890   000148  6E09               	movwf	(___flge@ff2+2)^0,c
  1891   00014A  0E3E               	movlw	62
  1892   00014C  6E0A               	movwf	(___flge@ff2+3)^0,c
  1893   00014E  ECDC  F00B         	call	___flge	;wreg free
  1894   000152  B0D8               	btfsc	status,0,c
  1895   000154  EFAE  F000         	goto	u2401
  1896   000158  EFB0  F000         	goto	u2400
  1897   00015C                     u2401:
  1898   00015C  EFE0  F000         	goto	l3179
  1899   000160                     u2400:
  1900   000160  C055  F003         	movff	_color+16,___flge@ff1
  1901   000164  C056  F004         	movff	_color+17,___flge@ff1+1
  1902   000168  C057  F005         	movff	_color+18,___flge@ff1+2
  1903   00016C  C058  F006         	movff	_color+19,___flge@ff1+3
  1904   000170  0E29               	movlw	41
  1905   000172  6E07               	movwf	___flge@ff2^0,c
  1906   000174  0E5C               	movlw	92
  1907   000176  6E08               	movwf	(___flge@ff2+1)^0,c
  1908   000178  0E0F               	movlw	15
  1909   00017A  6E09               	movwf	(___flge@ff2+2)^0,c
  1910   00017C  0E3E               	movlw	62
  1911   00017E  6E0A               	movwf	(___flge@ff2+3)^0,c
  1912   000180  ECDC  F00B         	call	___flge	;wreg free
  1913   000184  B0D8               	btfsc	status,0,c
  1914   000186  EFC7  F000         	goto	u2411
  1915   00018A  EFC9  F000         	goto	u2410
  1916   00018E                     u2411:
  1917   00018E  EFE0  F000         	goto	l3179
  1918   000192                     u2410:
  1919   000192                     
  1920                           ;color.c: 116:             card_memory[card_count] = 2;
  1921   000192  0E88               	movlw	low _card_memory
  1922   000194  2444               	addwf	_card_count^0,w,c
  1923   000196  6ED9               	movwf	fsr2l,c
  1924   000198  6ADA               	clrf	fsr2h,c
  1925   00019A  0E00               	movlw	high _card_memory
  1926   00019C  22DA               	addwfc	fsr2h,f,c
  1927   00019E  0E02               	movlw	2
  1928   0001A0  6EDF               	movwf	indf2,c
  1929   0001A2                     
  1930                           ;color.c: 117:             card_count ++;
  1931   0001A2  2A44               	incf	_card_count^0,f,c
  1932   0001A4                     
  1933                           ;color.c: 118:             instructions(mL,mR,1);
  1934   0001A4  C03A  F028         	movff	buggy_color_response@mL,instructions@mL
  1935   0001A8  C03B  F029         	movff	buggy_color_response@mL+1,instructions@mL+1
  1936   0001AC  C03C  F02A         	movff	buggy_color_response@mR,instructions@mR
  1937   0001B0  C03D  F02B         	movff	buggy_color_response@mR+1,instructions@mR+1
  1938   0001B4  0E00               	movlw	0
  1939   0001B6  6E2D               	movwf	(instructions@count+1)^0,c
  1940   0001B8  0E01               	movlw	1
  1941   0001BA  6E2C               	movwf	instructions@count^0,c
  1942   0001BC  EC77  F005         	call	_instructions	;wreg free
  1943   0001C0                     l3179:
  1944                           
  1945                           ;color.c: 122:         if (color.B_norm < 0.25 && color.G_norm > 0.40) {
  1946   0001C0  C051  F003         	movff	_color+12,___flge@ff1
  1947   0001C4  C052  F004         	movff	_color+13,___flge@ff1+1
  1948   0001C8  C053  F005         	movff	_color+14,___flge@ff1+2
  1949   0001CC  C054  F006         	movff	_color+15,___flge@ff1+3
  1950   0001D0  0E00               	movlw	0
  1951   0001D2  6E07               	movwf	___flge@ff2^0,c
  1952   0001D4  0E00               	movlw	0
  1953   0001D6  6E08               	movwf	(___flge@ff2+1)^0,c
  1954   0001D8  0E80               	movlw	128
  1955   0001DA  6E09               	movwf	(___flge@ff2+2)^0,c
  1956   0001DC  0E3E               	movlw	62
  1957   0001DE  6E0A               	movwf	(___flge@ff2+3)^0,c
  1958   0001E0  ECDC  F00B         	call	___flge	;wreg free
  1959   0001E4  B0D8               	btfsc	status,0,c
  1960   0001E6  EFF7  F000         	goto	u2421
  1961   0001EA  EFF9  F000         	goto	u2420
  1962   0001EE                     u2421:
  1963   0001EE  EF29  F001         	goto	l3189
  1964   0001F2                     u2420:
  1965   0001F2  0ECD               	movlw	205
  1966   0001F4  6E03               	movwf	___flge@ff1^0,c
  1967   0001F6  0ECC               	movlw	204
  1968   0001F8  6E04               	movwf	(___flge@ff1+1)^0,c
  1969   0001FA  0ECC               	movlw	204
  1970   0001FC  6E05               	movwf	(___flge@ff1+2)^0,c
  1971   0001FE  0E3E               	movlw	62
  1972   000200  6E06               	movwf	(___flge@ff1+3)^0,c
  1973   000202  C055  F007         	movff	_color+16,___flge@ff2
  1974   000206  C056  F008         	movff	_color+17,___flge@ff2+1
  1975   00020A  C057  F009         	movff	_color+18,___flge@ff2+2
  1976   00020E  C058  F00A         	movff	_color+19,___flge@ff2+3
  1977   000212  ECDC  F00B         	call	___flge	;wreg free
  1978   000216  B0D8               	btfsc	status,0,c
  1979   000218  EF10  F001         	goto	u2431
  1980   00021C  EF12  F001         	goto	u2430
  1981   000220                     u2431:
  1982   000220  EF29  F001         	goto	l3189
  1983   000224                     u2430:
  1984   000224                     
  1985                           ;color.c: 123:             card_memory[card_count] = 1;
  1986   000224  0E88               	movlw	low _card_memory
  1987   000226  2444               	addwf	_card_count^0,w,c
  1988   000228  6ED9               	movwf	fsr2l,c
  1989   00022A  6ADA               	clrf	fsr2h,c
  1990   00022C  0E00               	movlw	high _card_memory
  1991   00022E  22DA               	addwfc	fsr2h,f,c
  1992   000230  0E01               	movlw	1
  1993   000232  6EDF               	movwf	indf2,c
  1994   000234                     
  1995                           ;color.c: 124:             card_count ++;
  1996   000234  2A44               	incf	_card_count^0,f,c
  1997   000236                     
  1998                           ;color.c: 125:             instructions(mL,mR,2);
  1999   000236  C03A  F028         	movff	buggy_color_response@mL,instructions@mL
  2000   00023A  C03B  F029         	movff	buggy_color_response@mL+1,instructions@mL+1
  2001   00023E  C03C  F02A         	movff	buggy_color_response@mR,instructions@mR
  2002   000242  C03D  F02B         	movff	buggy_color_response@mR+1,instructions@mR+1
  2003   000246  0E00               	movlw	0
  2004   000248  6E2D               	movwf	(instructions@count+1)^0,c
  2005   00024A  0E02               	movlw	2
  2006   00024C  6E2C               	movwf	instructions@count^0,c
  2007   00024E  EC77  F005         	call	_instructions	;wreg free
  2008   000252                     l3189:
  2009                           
  2010                           ;color.c: 129:         if (color.R_norm < 0.38 && color.B_norm > 0.32 && color.G_norm > 
      +                          0.34){
  2011   000252  C04D  F003         	movff	_color+8,___flge@ff1
  2012   000256  C04E  F004         	movff	_color+9,___flge@ff1+1
  2013   00025A  C04F  F005         	movff	_color+10,___flge@ff1+2
  2014   00025E  C050  F006         	movff	_color+11,___flge@ff1+3
  2015   000262  0E5C               	movlw	92
  2016   000264  6E07               	movwf	___flge@ff2^0,c
  2017   000266  0E8F               	movlw	143
  2018   000268  6E08               	movwf	(___flge@ff2+1)^0,c
  2019   00026A  0EC2               	movlw	194
  2020   00026C  6E09               	movwf	(___flge@ff2+2)^0,c
  2021   00026E  0E3E               	movlw	62
  2022   000270  6E0A               	movwf	(___flge@ff2+3)^0,c
  2023   000272  ECDC  F00B         	call	___flge	;wreg free
  2024   000276  B0D8               	btfsc	status,0,c
  2025   000278  EF40  F001         	goto	u2441
  2026   00027C  EF42  F001         	goto	u2440
  2027   000280                     u2441:
  2028   000280  EF8B  F001         	goto	l3201
  2029   000284                     u2440:
  2030   000284  0E0A               	movlw	10
  2031   000286  6E03               	movwf	___flge@ff1^0,c
  2032   000288  0ED7               	movlw	215
  2033   00028A  6E04               	movwf	(___flge@ff1+1)^0,c
  2034   00028C  0EA3               	movlw	163
  2035   00028E  6E05               	movwf	(___flge@ff1+2)^0,c
  2036   000290  0E3E               	movlw	62
  2037   000292  6E06               	movwf	(___flge@ff1+3)^0,c
  2038   000294  C051  F007         	movff	_color+12,___flge@ff2
  2039   000298  C052  F008         	movff	_color+13,___flge@ff2+1
  2040   00029C  C053  F009         	movff	_color+14,___flge@ff2+2
  2041   0002A0  C054  F00A         	movff	_color+15,___flge@ff2+3
  2042   0002A4  ECDC  F00B         	call	___flge	;wreg free
  2043   0002A8  B0D8               	btfsc	status,0,c
  2044   0002AA  EF59  F001         	goto	u2451
  2045   0002AE  EF5B  F001         	goto	u2450
  2046   0002B2                     u2451:
  2047   0002B2  EF8B  F001         	goto	l3201
  2048   0002B6                     u2450:
  2049   0002B6  0E7B               	movlw	123
  2050   0002B8  6E03               	movwf	___flge@ff1^0,c
  2051   0002BA  0E14               	movlw	20
  2052   0002BC  6E04               	movwf	(___flge@ff1+1)^0,c
  2053   0002BE  0EAE               	movlw	174
  2054   0002C0  6E05               	movwf	(___flge@ff1+2)^0,c
  2055   0002C2  0E3E               	movlw	62
  2056   0002C4  6E06               	movwf	(___flge@ff1+3)^0,c
  2057   0002C6  C055  F007         	movff	_color+16,___flge@ff2
  2058   0002CA  C056  F008         	movff	_color+17,___flge@ff2+1
  2059   0002CE  C057  F009         	movff	_color+18,___flge@ff2+2
  2060   0002D2  C058  F00A         	movff	_color+19,___flge@ff2+3
  2061   0002D6  ECDC  F00B         	call	___flge	;wreg free
  2062   0002DA  B0D8               	btfsc	status,0,c
  2063   0002DC  EF72  F001         	goto	u2461
  2064   0002E0  EF74  F001         	goto	u2460
  2065   0002E4                     u2461:
  2066   0002E4  EF8B  F001         	goto	l3201
  2067   0002E8                     u2460:
  2068   0002E8                     
  2069                           ;color.c: 130:             card_memory[card_count] = 3;
  2070   0002E8  0E88               	movlw	low _card_memory
  2071   0002EA  2444               	addwf	_card_count^0,w,c
  2072   0002EC  6ED9               	movwf	fsr2l,c
  2073   0002EE  6ADA               	clrf	fsr2h,c
  2074   0002F0  0E00               	movlw	high _card_memory
  2075   0002F2  22DA               	addwfc	fsr2h,f,c
  2076   0002F4  0E03               	movlw	3
  2077   0002F6  6EDF               	movwf	indf2,c
  2078   0002F8                     
  2079                           ;color.c: 131:             card_count ++;
  2080   0002F8  2A44               	incf	_card_count^0,f,c
  2081   0002FA                     
  2082                           ;color.c: 132:             instructions(mL,mR,3);
  2083   0002FA  C03A  F028         	movff	buggy_color_response@mL,instructions@mL
  2084   0002FE  C03B  F029         	movff	buggy_color_response@mL+1,instructions@mL+1
  2085   000302  C03C  F02A         	movff	buggy_color_response@mR,instructions@mR
  2086   000306  C03D  F02B         	movff	buggy_color_response@mR+1,instructions@mR+1
  2087   00030A  0E00               	movlw	0
  2088   00030C  6E2D               	movwf	(instructions@count+1)^0,c
  2089   00030E  0E03               	movlw	3
  2090   000310  6E2C               	movwf	instructions@count^0,c
  2091   000312  EC77  F005         	call	_instructions	;wreg free
  2092   000316                     l3201:
  2093                           
  2094                           ;color.c: 136:         if (color.R_norm > 0.52 && color.G_norm > 0.32){
  2095   000316  0EB8               	movlw	184
  2096   000318  6E03               	movwf	___flge@ff1^0,c
  2097   00031A  0E1E               	movlw	30
  2098   00031C  6E04               	movwf	(___flge@ff1+1)^0,c
  2099   00031E  0E05               	movlw	5
  2100   000320  6E05               	movwf	(___flge@ff1+2)^0,c
  2101   000322  0E3F               	movlw	63
  2102   000324  6E06               	movwf	(___flge@ff1+3)^0,c
  2103   000326  C04D  F007         	movff	_color+8,___flge@ff2
  2104   00032A  C04E  F008         	movff	_color+9,___flge@ff2+1
  2105   00032E  C04F  F009         	movff	_color+10,___flge@ff2+2
  2106   000332  C050  F00A         	movff	_color+11,___flge@ff2+3
  2107   000336  ECDC  F00B         	call	___flge	;wreg free
  2108   00033A  B0D8               	btfsc	status,0,c
  2109   00033C  EFA2  F001         	goto	u2471
  2110   000340  EFA4  F001         	goto	u2470
  2111   000344                     u2471:
  2112   000344  EFD4  F001         	goto	l3211
  2113   000348                     u2470:
  2114   000348  0E0A               	movlw	10
  2115   00034A  6E03               	movwf	___flge@ff1^0,c
  2116   00034C  0ED7               	movlw	215
  2117   00034E  6E04               	movwf	(___flge@ff1+1)^0,c
  2118   000350  0EA3               	movlw	163
  2119   000352  6E05               	movwf	(___flge@ff1+2)^0,c
  2120   000354  0E3E               	movlw	62
  2121   000356  6E06               	movwf	(___flge@ff1+3)^0,c
  2122   000358  C055  F007         	movff	_color+16,___flge@ff2
  2123   00035C  C056  F008         	movff	_color+17,___flge@ff2+1
  2124   000360  C057  F009         	movff	_color+18,___flge@ff2+2
  2125   000364  C058  F00A         	movff	_color+19,___flge@ff2+3
  2126   000368  ECDC  F00B         	call	___flge	;wreg free
  2127   00036C  B0D8               	btfsc	status,0,c
  2128   00036E  EFBB  F001         	goto	u2481
  2129   000372  EFBD  F001         	goto	u2480
  2130   000376                     u2481:
  2131   000376  EFD4  F001         	goto	l3211
  2132   00037A                     u2480:
  2133   00037A                     
  2134                           ;color.c: 137:             card_memory[card_count] = 9;
  2135   00037A  0E88               	movlw	low _card_memory
  2136   00037C  2444               	addwf	_card_count^0,w,c
  2137   00037E  6ED9               	movwf	fsr2l,c
  2138   000380  6ADA               	clrf	fsr2h,c
  2139   000382  0E00               	movlw	high _card_memory
  2140   000384  22DA               	addwfc	fsr2h,f,c
  2141   000386  0E09               	movlw	9
  2142   000388  6EDF               	movwf	indf2,c
  2143   00038A                     
  2144                           ;color.c: 138:             card_count ++;
  2145   00038A  2A44               	incf	_card_count^0,f,c
  2146   00038C                     
  2147                           ;color.c: 139:             instructions(mL,mR,4);
  2148   00038C  C03A  F028         	movff	buggy_color_response@mL,instructions@mL
  2149   000390  C03B  F029         	movff	buggy_color_response@mL+1,instructions@mL+1
  2150   000394  C03C  F02A         	movff	buggy_color_response@mR,instructions@mR
  2151   000398  C03D  F02B         	movff	buggy_color_response@mR+1,instructions@mR+1
  2152   00039C  0E00               	movlw	0
  2153   00039E  6E2D               	movwf	(instructions@count+1)^0,c
  2154   0003A0  0E04               	movlw	4
  2155   0003A2  6E2C               	movwf	instructions@count^0,c
  2156   0003A4  EC77  F005         	call	_instructions	;wreg free
  2157   0003A8                     l3211:
  2158                           
  2159                           ;color.c: 143:         if (color.R_norm > 0.50 && color.B_norm > 0.24 && color.G_norm < 
      +                          0.33){
  2160   0003A8  0E00               	movlw	0
  2161   0003AA  6E03               	movwf	___flge@ff1^0,c
  2162   0003AC  0E00               	movlw	0
  2163   0003AE  6E04               	movwf	(___flge@ff1+1)^0,c
  2164   0003B0  0E00               	movlw	0
  2165   0003B2  6E05               	movwf	(___flge@ff1+2)^0,c
  2166   0003B4  0E3F               	movlw	63
  2167   0003B6  6E06               	movwf	(___flge@ff1+3)^0,c
  2168   0003B8  C04D  F007         	movff	_color+8,___flge@ff2
  2169   0003BC  C04E  F008         	movff	_color+9,___flge@ff2+1
  2170   0003C0  C04F  F009         	movff	_color+10,___flge@ff2+2
  2171   0003C4  C050  F00A         	movff	_color+11,___flge@ff2+3
  2172   0003C8  ECDC  F00B         	call	___flge	;wreg free
  2173   0003CC  B0D8               	btfsc	status,0,c
  2174   0003CE  EFEB  F001         	goto	u2491
  2175   0003D2  EFED  F001         	goto	u2490
  2176   0003D6                     u2491:
  2177   0003D6  EF36  F002         	goto	l3223
  2178   0003DA                     u2490:
  2179   0003DA  0E8F               	movlw	143
  2180   0003DC  6E03               	movwf	___flge@ff1^0,c
  2181   0003DE  0EC2               	movlw	194
  2182   0003E0  6E04               	movwf	(___flge@ff1+1)^0,c
  2183   0003E2  0E75               	movlw	117
  2184   0003E4  6E05               	movwf	(___flge@ff1+2)^0,c
  2185   0003E6  0E3E               	movlw	62
  2186   0003E8  6E06               	movwf	(___flge@ff1+3)^0,c
  2187   0003EA  C051  F007         	movff	_color+12,___flge@ff2
  2188   0003EE  C052  F008         	movff	_color+13,___flge@ff2+1
  2189   0003F2  C053  F009         	movff	_color+14,___flge@ff2+2
  2190   0003F6  C054  F00A         	movff	_color+15,___flge@ff2+3
  2191   0003FA  ECDC  F00B         	call	___flge	;wreg free
  2192   0003FE  B0D8               	btfsc	status,0,c
  2193   000400  EF04  F002         	goto	u2501
  2194   000404  EF06  F002         	goto	u2500
  2195   000408                     u2501:
  2196   000408  EF36  F002         	goto	l3223
  2197   00040C                     u2500:
  2198   00040C  C055  F003         	movff	_color+16,___flge@ff1
  2199   000410  C056  F004         	movff	_color+17,___flge@ff1+1
  2200   000414  C057  F005         	movff	_color+18,___flge@ff1+2
  2201   000418  C058  F006         	movff	_color+19,___flge@ff1+3
  2202   00041C  0EC3               	movlw	195
  2203   00041E  6E07               	movwf	___flge@ff2^0,c
  2204   000420  0EF5               	movlw	245
  2205   000422  6E08               	movwf	(___flge@ff2+1)^0,c
  2206   000424  0EA8               	movlw	168
  2207   000426  6E09               	movwf	(___flge@ff2+2)^0,c
  2208   000428  0E3E               	movlw	62
  2209   00042A  6E0A               	movwf	(___flge@ff2+3)^0,c
  2210   00042C  ECDC  F00B         	call	___flge	;wreg free
  2211   000430  B0D8               	btfsc	status,0,c
  2212   000432  EF1D  F002         	goto	u2511
  2213   000436  EF1F  F002         	goto	u2510
  2214   00043A                     u2511:
  2215   00043A  EF36  F002         	goto	l3223
  2216   00043E                     u2510:
  2217   00043E                     
  2218                           ;color.c: 144:             card_memory[card_count] = 10;
  2219   00043E  0E88               	movlw	low _card_memory
  2220   000440  2444               	addwf	_card_count^0,w,c
  2221   000442  6ED9               	movwf	fsr2l,c
  2222   000444  6ADA               	clrf	fsr2h,c
  2223   000446  0E00               	movlw	high _card_memory
  2224   000448  22DA               	addwfc	fsr2h,f,c
  2225   00044A  0E0A               	movlw	10
  2226   00044C  6EDF               	movwf	indf2,c
  2227   00044E                     
  2228                           ;color.c: 145:             card_count ++;
  2229   00044E  2A44               	incf	_card_count^0,f,c
  2230   000450                     
  2231                           ;color.c: 146:             instructions(mL,mR,5);
  2232   000450  C03A  F028         	movff	buggy_color_response@mL,instructions@mL
  2233   000454  C03B  F029         	movff	buggy_color_response@mL+1,instructions@mL+1
  2234   000458  C03C  F02A         	movff	buggy_color_response@mR,instructions@mR
  2235   00045C  C03D  F02B         	movff	buggy_color_response@mR+1,instructions@mR+1
  2236   000460  0E00               	movlw	0
  2237   000462  6E2D               	movwf	(instructions@count+1)^0,c
  2238   000464  0E05               	movlw	5
  2239   000466  6E2C               	movwf	instructions@count^0,c
  2240   000468  EC77  F005         	call	_instructions	;wreg free
  2241   00046C                     l3223:
  2242                           
  2243                           ;color.c: 150:         if (color.R_norm > 0.60 && color.B_norm < 0.22 && color.G_norm > 
      +                          0.23){
  2244   00046C  0E9A               	movlw	154
  2245   00046E  6E03               	movwf	___flge@ff1^0,c
  2246   000470  0E99               	movlw	153
  2247   000472  6E04               	movwf	(___flge@ff1+1)^0,c
  2248   000474  0E19               	movlw	25
  2249   000476  6E05               	movwf	(___flge@ff1+2)^0,c
  2250   000478  0E3F               	movlw	63
  2251   00047A  6E06               	movwf	(___flge@ff1+3)^0,c
  2252   00047C  C04D  F007         	movff	_color+8,___flge@ff2
  2253   000480  C04E  F008         	movff	_color+9,___flge@ff2+1
  2254   000484  C04F  F009         	movff	_color+10,___flge@ff2+2
  2255   000488  C050  F00A         	movff	_color+11,___flge@ff2+3
  2256   00048C  ECDC  F00B         	call	___flge	;wreg free
  2257   000490  B0D8               	btfsc	status,0,c
  2258   000492  EF4D  F002         	goto	u2521
  2259   000496  EF4F  F002         	goto	u2520
  2260   00049A                     u2521:
  2261   00049A  EF98  F002         	goto	l3235
  2262   00049E                     u2520:
  2263   00049E  C051  F003         	movff	_color+12,___flge@ff1
  2264   0004A2  C052  F004         	movff	_color+13,___flge@ff1+1
  2265   0004A6  C053  F005         	movff	_color+14,___flge@ff1+2
  2266   0004AA  C054  F006         	movff	_color+15,___flge@ff1+3
  2267   0004AE  0EAE               	movlw	174
  2268   0004B0  6E07               	movwf	___flge@ff2^0,c
  2269   0004B2  0E47               	movlw	71
  2270   0004B4  6E08               	movwf	(___flge@ff2+1)^0,c
  2271   0004B6  0E61               	movlw	97
  2272   0004B8  6E09               	movwf	(___flge@ff2+2)^0,c
  2273   0004BA  0E3E               	movlw	62
  2274   0004BC  6E0A               	movwf	(___flge@ff2+3)^0,c
  2275   0004BE  ECDC  F00B         	call	___flge	;wreg free
  2276   0004C2  B0D8               	btfsc	status,0,c
  2277   0004C4  EF66  F002         	goto	u2531
  2278   0004C8  EF68  F002         	goto	u2530
  2279   0004CC                     u2531:
  2280   0004CC  EF98  F002         	goto	l3235
  2281   0004D0                     u2530:
  2282   0004D0  0E1F               	movlw	31
  2283   0004D2  6E03               	movwf	___flge@ff1^0,c
  2284   0004D4  0E85               	movlw	133
  2285   0004D6  6E04               	movwf	(___flge@ff1+1)^0,c
  2286   0004D8  0E6B               	movlw	107
  2287   0004DA  6E05               	movwf	(___flge@ff1+2)^0,c
  2288   0004DC  0E3E               	movlw	62
  2289   0004DE  6E06               	movwf	(___flge@ff1+3)^0,c
  2290   0004E0  C055  F007         	movff	_color+16,___flge@ff2
  2291   0004E4  C056  F008         	movff	_color+17,___flge@ff2+1
  2292   0004E8  C057  F009         	movff	_color+18,___flge@ff2+2
  2293   0004EC  C058  F00A         	movff	_color+19,___flge@ff2+3
  2294   0004F0  ECDC  F00B         	call	___flge	;wreg free
  2295   0004F4  B0D8               	btfsc	status,0,c
  2296   0004F6  EF7F  F002         	goto	u2541
  2297   0004FA  EF81  F002         	goto	u2540
  2298   0004FE                     u2541:
  2299   0004FE  EF98  F002         	goto	l3235
  2300   000502                     u2540:
  2301   000502                     
  2302                           ;color.c: 151:             card_memory[card_count] = 7;
  2303   000502  0E88               	movlw	low _card_memory
  2304   000504  2444               	addwf	_card_count^0,w,c
  2305   000506  6ED9               	movwf	fsr2l,c
  2306   000508  6ADA               	clrf	fsr2h,c
  2307   00050A  0E00               	movlw	high _card_memory
  2308   00050C  22DA               	addwfc	fsr2h,f,c
  2309   00050E  0E07               	movlw	7
  2310   000510  6EDF               	movwf	indf2,c
  2311   000512                     
  2312                           ;color.c: 152:             card_count ++;
  2313   000512  2A44               	incf	_card_count^0,f,c
  2314   000514                     
  2315                           ;color.c: 153:             instructions(mL,mR,6);
  2316   000514  C03A  F028         	movff	buggy_color_response@mL,instructions@mL
  2317   000518  C03B  F029         	movff	buggy_color_response@mL+1,instructions@mL+1
  2318   00051C  C03C  F02A         	movff	buggy_color_response@mR,instructions@mR
  2319   000520  C03D  F02B         	movff	buggy_color_response@mR+1,instructions@mR+1
  2320   000524  0E00               	movlw	0
  2321   000526  6E2D               	movwf	(instructions@count+1)^0,c
  2322   000528  0E06               	movlw	6
  2323   00052A  6E2C               	movwf	instructions@count^0,c
  2324   00052C  EC77  F005         	call	_instructions	;wreg free
  2325   000530                     l3235:
  2326                           
  2327                           ;color.c: 157:         if (color.R_norm < 0.40 && color.B_norm > 0.30 && color.G_norm > 
      +                          0.4){
  2328   000530  C04D  F003         	movff	_color+8,___flge@ff1
  2329   000534  C04E  F004         	movff	_color+9,___flge@ff1+1
  2330   000538  C04F  F005         	movff	_color+10,___flge@ff1+2
  2331   00053C  C050  F006         	movff	_color+11,___flge@ff1+3
  2332   000540  0ECD               	movlw	205
  2333   000542  6E07               	movwf	___flge@ff2^0,c
  2334   000544  0ECC               	movlw	204
  2335   000546  6E08               	movwf	(___flge@ff2+1)^0,c
  2336   000548  0ECC               	movlw	204
  2337   00054A  6E09               	movwf	(___flge@ff2+2)^0,c
  2338   00054C  0E3E               	movlw	62
  2339   00054E  6E0A               	movwf	(___flge@ff2+3)^0,c
  2340   000550  ECDC  F00B         	call	___flge	;wreg free
  2341   000554  B0D8               	btfsc	status,0,c
  2342   000556  EFAF  F002         	goto	u2551
  2343   00055A  EFB1  F002         	goto	u2550
  2344   00055E                     u2551:
  2345   00055E  EFFA  F002         	goto	l3247
  2346   000562                     u2550:
  2347   000562  0E9A               	movlw	154
  2348   000564  6E03               	movwf	___flge@ff1^0,c
  2349   000566  0E99               	movlw	153
  2350   000568  6E04               	movwf	(___flge@ff1+1)^0,c
  2351   00056A  0E99               	movlw	153
  2352   00056C  6E05               	movwf	(___flge@ff1+2)^0,c
  2353   00056E  0E3E               	movlw	62
  2354   000570  6E06               	movwf	(___flge@ff1+3)^0,c
  2355   000572  C051  F007         	movff	_color+12,___flge@ff2
  2356   000576  C052  F008         	movff	_color+13,___flge@ff2+1
  2357   00057A  C053  F009         	movff	_color+14,___flge@ff2+2
  2358   00057E  C054  F00A         	movff	_color+15,___flge@ff2+3
  2359   000582  ECDC  F00B         	call	___flge	;wreg free
  2360   000586  B0D8               	btfsc	status,0,c
  2361   000588  EFC8  F002         	goto	u2561
  2362   00058C  EFCA  F002         	goto	u2560
  2363   000590                     u2561:
  2364   000590  EFFA  F002         	goto	l3247
  2365   000594                     u2560:
  2366   000594  0ECD               	movlw	205
  2367   000596  6E03               	movwf	___flge@ff1^0,c
  2368   000598  0ECC               	movlw	204
  2369   00059A  6E04               	movwf	(___flge@ff1+1)^0,c
  2370   00059C  0ECC               	movlw	204
  2371   00059E  6E05               	movwf	(___flge@ff1+2)^0,c
  2372   0005A0  0E3E               	movlw	62
  2373   0005A2  6E06               	movwf	(___flge@ff1+3)^0,c
  2374   0005A4  C055  F007         	movff	_color+16,___flge@ff2
  2375   0005A8  C056  F008         	movff	_color+17,___flge@ff2+1
  2376   0005AC  C057  F009         	movff	_color+18,___flge@ff2+2
  2377   0005B0  C058  F00A         	movff	_color+19,___flge@ff2+3
  2378   0005B4  ECDC  F00B         	call	___flge	;wreg free
  2379   0005B8  B0D8               	btfsc	status,0,c
  2380   0005BA  EFE1  F002         	goto	u2571
  2381   0005BE  EFE3  F002         	goto	u2570
  2382   0005C2                     u2571:
  2383   0005C2  EFFA  F002         	goto	l3247
  2384   0005C6                     u2570:
  2385   0005C6                     
  2386                           ;color.c: 158:             card_memory[card_count] = 6;
  2387   0005C6  0E88               	movlw	low _card_memory
  2388   0005C8  2444               	addwf	_card_count^0,w,c
  2389   0005CA  6ED9               	movwf	fsr2l,c
  2390   0005CC  6ADA               	clrf	fsr2h,c
  2391   0005CE  0E00               	movlw	high _card_memory
  2392   0005D0  22DA               	addwfc	fsr2h,f,c
  2393   0005D2  0E06               	movlw	6
  2394   0005D4  6EDF               	movwf	indf2,c
  2395   0005D6                     
  2396                           ;color.c: 159:             card_count ++;
  2397   0005D6  2A44               	incf	_card_count^0,f,c
  2398   0005D8                     
  2399                           ;color.c: 160:             instructions(mL,mR,7);
  2400   0005D8  C03A  F028         	movff	buggy_color_response@mL,instructions@mL
  2401   0005DC  C03B  F029         	movff	buggy_color_response@mL+1,instructions@mL+1
  2402   0005E0  C03C  F02A         	movff	buggy_color_response@mR,instructions@mR
  2403   0005E4  C03D  F02B         	movff	buggy_color_response@mR+1,instructions@mR+1
  2404   0005E8  0E00               	movlw	0
  2405   0005EA  6E2D               	movwf	(instructions@count+1)^0,c
  2406   0005EC  0E07               	movlw	7
  2407   0005EE  6E2C               	movwf	instructions@count^0,c
  2408   0005F0  EC77  F005         	call	_instructions	;wreg free
  2409   0005F4                     l3247:
  2410                           
  2411                           ;color.c: 164:         if (color.R_norm < 0.48 && color.C > 16000 && color.G_norm < 0.36
      +                           ){
  2412   0005F4  C04D  F003         	movff	_color+8,___flge@ff1
  2413   0005F8  C04E  F004         	movff	_color+9,___flge@ff1+1
  2414   0005FC  C04F  F005         	movff	_color+10,___flge@ff1+2
  2415   000600  C050  F006         	movff	_color+11,___flge@ff1+3
  2416   000604  0E8F               	movlw	143
  2417   000606  6E07               	movwf	___flge@ff2^0,c
  2418   000608  0EC2               	movlw	194
  2419   00060A  6E08               	movwf	(___flge@ff2+1)^0,c
  2420   00060C  0EF5               	movlw	245
  2421   00060E  6E09               	movwf	(___flge@ff2+2)^0,c
  2422   000610  0E3E               	movlw	62
  2423   000612  6E0A               	movwf	(___flge@ff2+3)^0,c
  2424   000614  ECDC  F00B         	call	___flge	;wreg free
  2425   000618  B0D8               	btfsc	status,0,c
  2426   00061A  EF11  F003         	goto	u2581
  2427   00061E  EF13  F003         	goto	u2580
  2428   000622                     u2581:
  2429   000622  EF9B  F003         	goto	l3273
  2430   000626                     u2580:
  2431   000626  0E81               	movlw	129
  2432   000628  5C4B               	subwf	(_color+6)^0,w,c
  2433   00062A  0E3E               	movlw	62
  2434   00062C  584C               	subwfb	(_color+7)^0,w,c
  2435   00062E  A0D8               	btfss	status,0,c
  2436   000630  EF1C  F003         	goto	u2591
  2437   000634  EF1E  F003         	goto	u2590
  2438   000638                     u2591:
  2439   000638  EF9B  F003         	goto	l3273
  2440   00063C                     u2590:
  2441   00063C  C055  F003         	movff	_color+16,___flge@ff1
  2442   000640  C056  F004         	movff	_color+17,___flge@ff1+1
  2443   000644  C057  F005         	movff	_color+18,___flge@ff1+2
  2444   000648  C058  F006         	movff	_color+19,___flge@ff1+3
  2445   00064C  0EEC               	movlw	236
  2446   00064E  6E07               	movwf	___flge@ff2^0,c
  2447   000650  0E51               	movlw	81
  2448   000652  6E08               	movwf	(___flge@ff2+1)^0,c
  2449   000654  0EB8               	movlw	184
  2450   000656  6E09               	movwf	(___flge@ff2+2)^0,c
  2451   000658  0E3E               	movlw	62
  2452   00065A  6E0A               	movwf	(___flge@ff2+3)^0,c
  2453   00065C  ECDC  F00B         	call	___flge	;wreg free
  2454   000660  B0D8               	btfsc	status,0,c
  2455   000662  EF35  F003         	goto	u2601
  2456   000666  EF37  F003         	goto	u2600
  2457   00066A                     u2601:
  2458   00066A  EF9B  F003         	goto	l3273
  2459   00066E                     u2600:
  2460   00066E                     
  2461                           ;color.c: 166:             card_memory[card_count] = 3;
  2462   00066E  0E88               	movlw	low _card_memory
  2463   000670  2444               	addwf	_card_count^0,w,c
  2464   000672  6ED9               	movwf	fsr2l,c
  2465   000674  6ADA               	clrf	fsr2h,c
  2466   000676  0E00               	movlw	high _card_memory
  2467   000678  22DA               	addwfc	fsr2h,f,c
  2468   00067A  0E03               	movlw	3
  2469   00067C  6EDF               	movwf	indf2,c
  2470   00067E                     
  2471                           ;color.c: 167:             card_count ++;
  2472   00067E  2A44               	incf	_card_count^0,f,c
  2473   000680                     
  2474                           ;color.c: 169:             space(mL,mR);
  2475   000680  C03A  F01C         	movff	buggy_color_response@mL,space@mL
  2476   000684  C03B  F01D         	movff	buggy_color_response@mL+1,space@mL+1
  2477   000688  C03C  F01E         	movff	buggy_color_response@mR,space@mR
  2478   00068C  C03D  F01F         	movff	buggy_color_response@mR+1,space@mR+1
  2479   000690  EC5E  F00C         	call	_space	;wreg free
  2480   000694                     
  2481                           ;color.c: 170:             _delay((unsigned long)((500)*(64000000/4000.0)));
  2482   000694  0E29               	movlw	41
  2483   000696  0100               	movlb	0	; () banked
  2484   000698  6FDF               	movwf	(??_buggy_color_response+1)& (0+255),b
  2485   00069A  0E96               	movlw	150
  2486   00069C  6FDE               	movwf	??_buggy_color_response& (0+255),b
  2487   00069E  0E7F               	movlw	127
  2488   0006A0                     u2687:
  2489   0006A0  2EE8               	decfsz	wreg,f,c
  2490   0006A2  D7FE               	bra	u2687
  2491   0006A4  2FDE               	decfsz	??_buggy_color_response& (0+255),f,b
  2492   0006A6  D7FC               	bra	u2687
  2493   0006A8  2FDF               	decfsz	(??_buggy_color_response+1)& (0+255),f,b
  2494   0006AA  D7FA               	bra	u2687
  2495   0006AC                     
  2496                           ;color.c: 171:             stop(mL,mR);
  2497   0006AC  C03A  F016         	movff	buggy_color_response@mL,stop@mL
  2498   0006B0  C03B  F017         	movff	buggy_color_response@mL+1,stop@mL+1
  2499   0006B4  C03C  F018         	movff	buggy_color_response@mR,stop@mR
  2500   0006B8  C03D  F019         	movff	buggy_color_response@mR+1,stop@mR+1
  2501   0006BC  EC9D  F00D         	call	_stop	;wreg free
  2502   0006C0                     
  2503                           ;color.c: 172:             _delay((unsigned long)((500)*(64000000/4000.0)));
  2504   0006C0  0E29               	movlw	41
  2505   0006C2  0100               	movlb	0	; () banked
  2506   0006C4  6FDF               	movwf	(??_buggy_color_response+1)& (0+255),b
  2507   0006C6  0E96               	movlw	150
  2508   0006C8  6FDE               	movwf	??_buggy_color_response& (0+255),b
  2509   0006CA  0E7F               	movlw	127
  2510   0006CC                     u2697:
  2511   0006CC  2EE8               	decfsz	wreg,f,c
  2512   0006CE  D7FE               	bra	u2697
  2513   0006D0  2FDE               	decfsz	??_buggy_color_response& (0+255),f,b
  2514   0006D2  D7FC               	bra	u2697
  2515   0006D4  2FDF               	decfsz	(??_buggy_color_response+1)& (0+255),f,b
  2516   0006D6  D7FA               	bra	u2697
  2517   0006D8                     
  2518                           ;color.c: 174:             return_home(mL,mR);
  2519   0006D8  C03A  F034         	movff	buggy_color_response@mL,return_home@mL
  2520   0006DC  C03B  F035         	movff	buggy_color_response@mL+1,return_home@mL+1
  2521   0006E0  C03C  F036         	movff	buggy_color_response@mR,return_home@mR
  2522   0006E4  C03D  F037         	movff	buggy_color_response@mR+1,return_home@mR+1
  2523   0006E8  EC4A  F00B         	call	_return_home	;wreg free
  2524   0006EC                     
  2525                           ;color.c: 176:             stop(mL,mR);
  2526   0006EC  C03A  F016         	movff	buggy_color_response@mL,stop@mL
  2527   0006F0  C03B  F017         	movff	buggy_color_response@mL+1,stop@mL+1
  2528   0006F4  C03C  F018         	movff	buggy_color_response@mR,stop@mR
  2529   0006F8  C03D  F019         	movff	buggy_color_response@mR+1,stop@mR+1
  2530   0006FC  EC9D  F00D         	call	_stop	;wreg free
  2531   000700                     
  2532                           ;color.c: 177:             _delay((unsigned long)((500)*(64000000/4000.0)));
  2533   000700  0E29               	movlw	41
  2534   000702  0100               	movlb	0	; () banked
  2535   000704  6FDF               	movwf	(??_buggy_color_response+1)& (0+255),b
  2536   000706  0E96               	movlw	150
  2537   000708  6FDE               	movwf	??_buggy_color_response& (0+255),b
  2538   00070A  0E7F               	movlw	127
  2539   00070C                     u2707:
  2540   00070C  2EE8               	decfsz	wreg,f,c
  2541   00070E  D7FE               	bra	u2707
  2542   000710  2FDE               	decfsz	??_buggy_color_response& (0+255),f,b
  2543   000712  D7FC               	bra	u2707
  2544   000714  2FDF               	decfsz	(??_buggy_color_response+1)& (0+255),f,b
  2545   000716  D7FA               	bra	u2707
  2546   000718                     
  2547                           ;color.c: 179:             instructions2(mL,mR,3);
  2548   000718  C03A  F02E         	movff	buggy_color_response@mL,instructions2@mL
  2549   00071C  C03B  F02F         	movff	buggy_color_response@mL+1,instructions2@mL+1
  2550   000720  C03C  F030         	movff	buggy_color_response@mR,instructions2@mR
  2551   000724  C03D  F031         	movff	buggy_color_response@mR+1,instructions2@mR+1
  2552   000728  0E00               	movlw	0
  2553   00072A  6E33               	movwf	(instructions2@count+1)^0,c
  2554   00072C  0E03               	movlw	3
  2555   00072E  6E32               	movwf	instructions2@count^0,c
  2556   000730  EC05  F007         	call	_instructions2	;wreg free
  2557   000734  0003               	sleep		;# 
  2558   000736                     l3273:
  2559                           
  2560                           ;color.c: 182:         timer_reset();
  2561   000736  EC4E  F011         	call	_timer_reset	;wreg free
  2562                           
  2563                           ;color.c: 183:     }
  2564   00073A  EFA9  F003         	goto	l142
  2565   00073E                     l3275:
  2566   00073E  C03A  F01C         	movff	buggy_color_response@mL,forward@mL
  2567   000742  C03B  F01D         	movff	buggy_color_response@mL+1,forward@mL+1
  2568   000746  C03C  F01E         	movff	buggy_color_response@mR,forward@mR
  2569   00074A  C03D  F01F         	movff	buggy_color_response@mR+1,forward@mR+1
  2570   00074E  ECDF  F00C         	call	_forward	;wreg free
  2571   000752                     l142:
  2572   000752  0012               	return		;funcret
  2573   000754                     __end_of_buggy_color_response:
  2574                           	callstack 0
  2575                           
  2576 ;; *************** function _timer_reset *****************
  2577 ;; Defined at:
  2578 ;;		line 21 in file "timers.c"
  2579 ;; Parameters:    Size  Location     Type
  2580 ;;		None
  2581 ;; Auto vars:     Size  Location     Type
  2582 ;;		None
  2583 ;; Return value:  Size  Location     Type
  2584 ;;                  1    wreg      void 
  2585 ;; Registers used:
  2586 ;;		wreg, status,2
  2587 ;; Tracked objects:
  2588 ;;		On entry : 0/0
  2589 ;;		On exit  : 0/0
  2590 ;;		Unchanged: 0/0
  2591 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2592 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2593 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2594 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2595 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2596 ;;Total ram usage:        0 bytes
  2597 ;; Hardware stack levels used: 1
  2598 ;; Hardware stack levels required when called: 1
  2599 ;; This function calls:
  2600 ;;		Nothing
  2601 ;; This function is called by:
  2602 ;;		_buggy_color_response
  2603 ;;		_main
  2604 ;; This function uses a non-reentrant model
  2605 ;;
  2606                           
  2607                           	psect	text13
  2608   00229C                     __ptext13:
  2609                           	callstack 0
  2610   00229C                     _timer_reset:
  2611                           	callstack 29
  2612   00229C                     
  2613                           ;timers.c: 22:     timer_val = 0;
  2614   00229C  0E00               	movlw	0
  2615   00229E  0100               	movlb	0	; () banked
  2616   0022A0  6FC5               	movwf	(_timer_val+1)& (0+255),b
  2617   0022A2  0E00               	movlw	0
  2618   0022A4  6FC4               	movwf	_timer_val& (0+255),b
  2619                           
  2620                           ;timers.c: 23:     TMR0H=0;
  2621   0022A6  0E00               	movlw	0
  2622   0022A8  6ED4               	movwf	212,c	;volatile
  2623                           
  2624                           ;timers.c: 24:     TMR0L=0b00100011;
  2625   0022AA  0E23               	movlw	35
  2626   0022AC  6ED3               	movwf	211,c	;volatile
  2627   0022AE                     
  2628                           ; BSR set to: 0
  2629   0022AE  0012               	return		;funcret
  2630   0022B0                     __end_of_timer_reset:
  2631                           	callstack 0
  2632                           
  2633 ;; *************** function _return_home *****************
  2634 ;; Defined at:
  2635 ;;		line 189 in file "color.c"
  2636 ;; Parameters:    Size  Location     Type
  2637 ;;  mL              2   51[COMRAM] PTR struct DC_motor
  2638 ;;		 -> motorL(9), 
  2639 ;;  mR              2   53[COMRAM] PTR struct DC_motor
  2640 ;;		 -> motorR(9), 
  2641 ;; Auto vars:     Size  Location     Type
  2642 ;;		None
  2643 ;; Return value:  Size  Location     Type
  2644 ;;                  1    wreg      void 
  2645 ;; Registers used:
  2646 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2647 ;; Tracked objects:
  2648 ;;		On entry : 0/0
  2649 ;;		On exit  : 0/0
  2650 ;;		Unchanged: 0/0
  2651 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2652 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2653 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2654 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2655 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2656 ;;Total ram usage:        6 bytes
  2657 ;; Hardware stack levels used: 1
  2658 ;; Hardware stack levels required when called: 7
  2659 ;; This function calls:
  2660 ;;		_delay_ms_func
  2661 ;;		_forward
  2662 ;;		_instructions2
  2663 ;;		_reverse
  2664 ;;		_stop
  2665 ;; This function is called by:
  2666 ;;		_buggy_color_response
  2667 ;; This function uses a non-reentrant model
  2668 ;;
  2669                           
  2670                           	psect	text14
  2671   001694                     __ptext14:
  2672                           	callstack 0
  2673   001694                     _return_home:
  2674                           	callstack 22
  2675   001694                     
  2676                           ;color.c: 190:     while(timer_index > 0 && card_count > 0 ) {
  2677   001694  EFCB  F00B         	goto	l2837
  2678   001698                     l2813:
  2679                           
  2680                           ;color.c: 192:         instructions2(mL,mR,card_memory[card_count-1]);
  2681   001698  C034  F02E         	movff	return_home@mL,instructions2@mL
  2682   00169C  C035  F02F         	movff	return_home@mL+1,instructions2@mL+1
  2683   0016A0  C036  F030         	movff	return_home@mR,instructions2@mR
  2684   0016A4  C037  F031         	movff	return_home@mR+1,instructions2@mR+1
  2685   0016A8  0E87               	movlw	low (_card_memory+65535)
  2686   0016AA  2444               	addwf	_card_count^0,w,c
  2687   0016AC  6ED9               	movwf	fsr2l,c
  2688   0016AE  6ADA               	clrf	fsr2h,c
  2689   0016B0  0E00               	movlw	high (_card_memory+65535)
  2690   0016B2  22DA               	addwfc	fsr2h,f,c
  2691   0016B4  50DF               	movf	indf2,w,c
  2692   0016B6  6E38               	movwf	??_return_home^0,c
  2693   0016B8  5038               	movf	??_return_home^0,w,c
  2694   0016BA  6E32               	movwf	instructions2@count^0,c
  2695   0016BC  6A33               	clrf	(instructions2@count+1)^0,c
  2696   0016BE  EC05  F007         	call	_instructions2	;wreg free
  2697   0016C2                     
  2698                           ;color.c: 193:         card_count--;
  2699   0016C2  0644               	decf	_card_count^0,f,c
  2700   0016C4                     
  2701                           ;color.c: 194:         _delay((unsigned long)((250)*(64000000/4000.0)));
  2702   0016C4  0E15               	movlw	21
  2703   0016C6  6E39               	movwf	(??_return_home+1)^0,c
  2704   0016C8  0E4B               	movlw	75
  2705   0016CA  6E38               	movwf	??_return_home^0,c
  2706   0016CC  0EBE               	movlw	190
  2707   0016CE                     u2717:
  2708   0016CE  2EE8               	decfsz	wreg,f,c
  2709   0016D0  D7FE               	bra	u2717
  2710   0016D2  2E38               	decfsz	??_return_home^0,f,c
  2711   0016D4  D7FC               	bra	u2717
  2712   0016D6  2E39               	decfsz	(??_return_home+1)^0,f,c
  2713   0016D8  D7FA               	bra	u2717
  2714   0016DA  D000               	nop2	
  2715   0016DC                     
  2716                           ;color.c: 195:         forward(mL,mR);
  2717   0016DC  C034  F01C         	movff	return_home@mL,forward@mL
  2718   0016E0  C035  F01D         	movff	return_home@mL+1,forward@mL+1
  2719   0016E4  C036  F01E         	movff	return_home@mR,forward@mR
  2720   0016E8  C037  F01F         	movff	return_home@mR+1,forward@mR+1
  2721   0016EC  ECDF  F00C         	call	_forward	;wreg free
  2722   0016F0                     
  2723                           ;color.c: 196:         delay_ms_func(timer_memory[timer_index-1] - 2);
  2724   0016F0  0E5F               	movlw	low (_timer_memory+65535)
  2725   0016F2  2443               	addwf	_timer_index^0,w,c
  2726   0016F4  6ED9               	movwf	fsr2l,c
  2727   0016F6  6ADA               	clrf	fsr2h,c
  2728   0016F8  0E00               	movlw	high (_timer_memory+65535)
  2729   0016FA  22DA               	addwfc	fsr2h,f,c
  2730   0016FC  50DF               	movf	indf2,w,c
  2731   0016FE  6E38               	movwf	??_return_home^0,c
  2732   001700  0EFE               	movlw	254
  2733   001702  2438               	addwf	??_return_home^0,w,c
  2734   001704  6E03               	movwf	delay_ms_func@time^0,c
  2735   001706  6A04               	clrf	(delay_ms_func@time+1)^0,c
  2736   001708  0EFF               	movlw	255
  2737   00170A  2204               	addwfc	(delay_ms_func@time+1)^0,f,c
  2738   00170C  EC4E  F010         	call	_delay_ms_func	;wreg free
  2739   001710                     
  2740                           ;color.c: 197:         timer_index--;
  2741   001710  0643               	decf	_timer_index^0,f,c
  2742   001712                     
  2743                           ;color.c: 198:         stop(mL,mR);
  2744   001712  C034  F016         	movff	return_home@mL,stop@mL
  2745   001716  C035  F017         	movff	return_home@mL+1,stop@mL+1
  2746   00171A  C036  F018         	movff	return_home@mR,stop@mR
  2747   00171E  C037  F019         	movff	return_home@mR+1,stop@mR+1
  2748   001722  EC9D  F00D         	call	_stop	;wreg free
  2749   001726                     
  2750                           ;color.c: 199:         _delay((unsigned long)((200)*(64000000/4000.0)));
  2751   001726  0E11               	movlw	17
  2752   001728  6E39               	movwf	(??_return_home+1)^0,c
  2753   00172A  0E3C               	movlw	60
  2754   00172C  6E38               	movwf	??_return_home^0,c
  2755   00172E  0ECB               	movlw	203
  2756   001730                     u2727:
  2757   001730  2EE8               	decfsz	wreg,f,c
  2758   001732  D7FE               	bra	u2727
  2759   001734  2E38               	decfsz	??_return_home^0,f,c
  2760   001736  D7FC               	bra	u2727
  2761   001738  2E39               	decfsz	(??_return_home+1)^0,f,c
  2762   00173A  D7FA               	bra	u2727
  2763   00173C  F000               	nop	
  2764   00173E                     
  2765                           ;color.c: 200:          reverse(mL,mR);
  2766   00173E  C034  F01C         	movff	return_home@mL,reverse@mL
  2767   001742  C035  F01D         	movff	return_home@mL+1,reverse@mL+1
  2768   001746  C036  F01E         	movff	return_home@mR,reverse@mR
  2769   00174A  C037  F01F         	movff	return_home@mR+1,reverse@mR+1
  2770   00174E  EC3E  F00D         	call	_reverse	;wreg free
  2771   001752                     
  2772                           ;color.c: 201:         _delay((unsigned long)((100)*(64000000/4000.0)));
  2773   001752  0E09               	movlw	9
  2774   001754  6E39               	movwf	(??_return_home+1)^0,c
  2775   001756  0E1E               	movlw	30
  2776   001758  6E38               	movwf	??_return_home^0,c
  2777   00175A  0EE4               	movlw	228
  2778   00175C                     u2737:
  2779   00175C  2EE8               	decfsz	wreg,f,c
  2780   00175E  D7FE               	bra	u2737
  2781   001760  2E38               	decfsz	??_return_home^0,f,c
  2782   001762  D7FC               	bra	u2737
  2783   001764  2E39               	decfsz	(??_return_home+1)^0,f,c
  2784   001766  D7FA               	bra	u2737
  2785   001768  D000               	nop2	
  2786   00176A                     
  2787                           ;color.c: 202:         stop(mL,mR);
  2788   00176A  C034  F016         	movff	return_home@mL,stop@mL
  2789   00176E  C035  F017         	movff	return_home@mL+1,stop@mL+1
  2790   001772  C036  F018         	movff	return_home@mR,stop@mR
  2791   001776  C037  F019         	movff	return_home@mR+1,stop@mR+1
  2792   00177A  EC9D  F00D         	call	_stop	;wreg free
  2793   00177E                     
  2794                           ;color.c: 203:         _delay((unsigned long)((250)*(64000000/4000.0)));
  2795   00177E  0E15               	movlw	21
  2796   001780  6E39               	movwf	(??_return_home+1)^0,c
  2797   001782  0E4B               	movlw	75
  2798   001784  6E38               	movwf	??_return_home^0,c
  2799   001786  0EBE               	movlw	190
  2800   001788                     u2747:
  2801   001788  2EE8               	decfsz	wreg,f,c
  2802   00178A  D7FE               	bra	u2747
  2803   00178C  2E38               	decfsz	??_return_home^0,f,c
  2804   00178E  D7FC               	bra	u2747
  2805   001790  2E39               	decfsz	(??_return_home+1)^0,f,c
  2806   001792  D7FA               	bra	u2747
  2807   001794  D000               	nop2	
  2808   001796                     l2837:
  2809                           
  2810                           ;color.c: 190:     while(timer_index > 0 && card_count > 0 ) {
  2811   001796  5043               	movf	_timer_index^0,w,c
  2812   001798  B4D8               	btfsc	status,2,c
  2813   00179A  EFD1  F00B         	goto	u1961
  2814   00179E  EFD3  F00B         	goto	u1960
  2815   0017A2                     u1961:
  2816   0017A2  EFDB  F00B         	goto	l150
  2817   0017A6                     u1960:
  2818   0017A6  5044               	movf	_card_count^0,w,c
  2819   0017A8  A4D8               	btfss	status,2,c
  2820   0017AA  EFD9  F00B         	goto	u1971
  2821   0017AE  EFDB  F00B         	goto	u1970
  2822   0017B2                     u1971:
  2823   0017B2  EF4C  F00B         	goto	l2813
  2824   0017B6                     u1970:
  2825   0017B6                     l150:
  2826   0017B6  0012               	return		;funcret
  2827   0017B8                     __end_of_return_home:
  2828                           	callstack 0
  2829                           
  2830 ;; *************** function _instructions2 *****************
  2831 ;; Defined at:
  2832 ;;		line 284 in file "dc_motor.c"
  2833 ;; Parameters:    Size  Location     Type
  2834 ;;  mL              2   45[COMRAM] PTR struct DC_motor
  2835 ;;		 -> motorL(9), 
  2836 ;;  mR              2   47[COMRAM] PTR struct DC_motor
  2837 ;;		 -> motorR(9), 
  2838 ;;  count           2   49[COMRAM] int 
  2839 ;; Auto vars:     Size  Location     Type
  2840 ;;		None
  2841 ;; Return value:  Size  Location     Type
  2842 ;;                  1    wreg      void 
  2843 ;; Registers used:
  2844 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2845 ;; Tracked objects:
  2846 ;;		On entry : 0/0
  2847 ;;		On exit  : 0/0
  2848 ;;		Unchanged: 0/0
  2849 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2850 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2851 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2852 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2853 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2854 ;;Total ram usage:        6 bytes
  2855 ;; Hardware stack levels used: 1
  2856 ;; Hardware stack levels required when called: 6
  2857 ;; This function calls:
  2858 ;;		_left_45
  2859 ;;		_reverse_pink
  2860 ;;		_reverse_yellow
  2861 ;;		_right_45
  2862 ;;		_stop
  2863 ;; This function is called by:
  2864 ;;		_buggy_color_response
  2865 ;;		_return_home
  2866 ;; This function uses a non-reentrant model
  2867 ;;
  2868                           
  2869                           	psect	text15
  2870   000E0A                     __ptext15:
  2871                           	callstack 0
  2872   000E0A                     _instructions2:
  2873                           	callstack 22
  2874   000E0A                     
  2875                           ;dc_motor.c: 284: void instructions2(DC_motor *mL, DC_motor *mR, int count);dc_motor.c: 
      +                          285: {;dc_motor.c: 287:     if (count == 1){right_45(mL,mR,2,right_timer); stop(mL,mR);}
  2876   000E0A  0432               	decf	instructions2@count^0,w,c
  2877   000E0C  1033               	iorwf	(instructions2@count+1)^0,w,c
  2878   000E0E  A4D8               	btfss	status,2,c
  2879   000E10  EF0C  F007         	goto	u1481
  2880   000E14  EF0E  F007         	goto	u1480
  2881   000E18                     u1481:
  2882   000E18  EF2A  F007         	goto	l2535
  2883   000E1C                     u1480:
  2884   000E1C  C02E  F01C         	movff	instructions2@mL,right_45@mL
  2885   000E20  C02F  F01D         	movff	instructions2@mL+1,right_45@mL+1
  2886   000E24  C030  F01E         	movff	instructions2@mR,right_45@mR
  2887   000E28  C031  F01F         	movff	instructions2@mR+1,right_45@mR+1
  2888   000E2C  0E00               	movlw	0
  2889   000E2E  6E21               	movwf	(right_45@count+1)^0,c
  2890   000E30  0E02               	movlw	2
  2891   000E32  6E20               	movwf	right_45@count^0,c
  2892   000E34  C059  F022         	movff	_right_timer,right_45@right_timer
  2893   000E38  C05A  F023         	movff	_right_timer+1,right_45@right_timer+1
  2894   000E3C  ECB6  F00A         	call	_right_45	;wreg free
  2895   000E40  C02E  F016         	movff	instructions2@mL,stop@mL
  2896   000E44  C02F  F017         	movff	instructions2@mL+1,stop@mL+1
  2897   000E48  C030  F018         	movff	instructions2@mR,stop@mR
  2898   000E4C  C031  F019         	movff	instructions2@mR+1,stop@mR+1
  2899   000E50  EC9D  F00D         	call	_stop	;wreg free
  2900   000E54                     l2535:
  2901                           
  2902                           ;dc_motor.c: 288:     if (count == 2){left_45(mL,mR,2,left_timer); stop(mL,mR);}
  2903   000E54  0E02               	movlw	2
  2904   000E56  1832               	xorwf	instructions2@count^0,w,c
  2905   000E58  1033               	iorwf	(instructions2@count+1)^0,w,c
  2906   000E5A  A4D8               	btfss	status,2,c
  2907   000E5C  EF32  F007         	goto	u1491
  2908   000E60  EF34  F007         	goto	u1490
  2909   000E64                     u1491:
  2910   000E64  EF50  F007         	goto	l2539
  2911   000E68                     u1490:
  2912   000E68  C02E  F01C         	movff	instructions2@mL,left_45@mL
  2913   000E6C  C02F  F01D         	movff	instructions2@mL+1,left_45@mL+1
  2914   000E70  C030  F01E         	movff	instructions2@mR,left_45@mR
  2915   000E74  C031  F01F         	movff	instructions2@mR+1,left_45@mR+1
  2916   000E78  0E00               	movlw	0
  2917   000E7A  6E21               	movwf	(left_45@count+1)^0,c
  2918   000E7C  0E02               	movlw	2
  2919   000E7E  6E20               	movwf	left_45@count^0,c
  2920   000E80  C05B  F022         	movff	_left_timer,left_45@left_timer
  2921   000E84  C05C  F023         	movff	_left_timer+1,left_45@left_timer+1
  2922   000E88  EC7B  F009         	call	_left_45	;wreg free
  2923   000E8C  C02E  F016         	movff	instructions2@mL,stop@mL
  2924   000E90  C02F  F017         	movff	instructions2@mL+1,stop@mL+1
  2925   000E94  C030  F018         	movff	instructions2@mR,stop@mR
  2926   000E98  C031  F019         	movff	instructions2@mR+1,stop@mR+1
  2927   000E9C  EC9D  F00D         	call	_stop	;wreg free
  2928   000EA0                     l2539:
  2929                           
  2930                           ;dc_motor.c: 289:     if (count == 3){right_45(mL,mR,4,right_timer); stop(mL,mR);}
  2931   000EA0  0E03               	movlw	3
  2932   000EA2  1832               	xorwf	instructions2@count^0,w,c
  2933   000EA4  1033               	iorwf	(instructions2@count+1)^0,w,c
  2934   000EA6  A4D8               	btfss	status,2,c
  2935   000EA8  EF58  F007         	goto	u1501
  2936   000EAC  EF5A  F007         	goto	u1500
  2937   000EB0                     u1501:
  2938   000EB0  EF76  F007         	goto	l2543
  2939   000EB4                     u1500:
  2940   000EB4  C02E  F01C         	movff	instructions2@mL,right_45@mL
  2941   000EB8  C02F  F01D         	movff	instructions2@mL+1,right_45@mL+1
  2942   000EBC  C030  F01E         	movff	instructions2@mR,right_45@mR
  2943   000EC0  C031  F01F         	movff	instructions2@mR+1,right_45@mR+1
  2944   000EC4  0E00               	movlw	0
  2945   000EC6  6E21               	movwf	(right_45@count+1)^0,c
  2946   000EC8  0E04               	movlw	4
  2947   000ECA  6E20               	movwf	right_45@count^0,c
  2948   000ECC  C059  F022         	movff	_right_timer,right_45@right_timer
  2949   000ED0  C05A  F023         	movff	_right_timer+1,right_45@right_timer+1
  2950   000ED4  ECB6  F00A         	call	_right_45	;wreg free
  2951   000ED8  C02E  F016         	movff	instructions2@mL,stop@mL
  2952   000EDC  C02F  F017         	movff	instructions2@mL+1,stop@mL+1
  2953   000EE0  C030  F018         	movff	instructions2@mR,stop@mR
  2954   000EE4  C031  F019         	movff	instructions2@mR+1,stop@mR+1
  2955   000EE8  EC9D  F00D         	call	_stop	;wreg free
  2956   000EEC                     l2543:
  2957                           
  2958                           ;dc_motor.c: 290:     if (count == 6){right_45(mL,mR,3,right_timer); stop(mL,mR);}
  2959   000EEC  0E06               	movlw	6
  2960   000EEE  1832               	xorwf	instructions2@count^0,w,c
  2961   000EF0  1033               	iorwf	(instructions2@count+1)^0,w,c
  2962   000EF2  A4D8               	btfss	status,2,c
  2963   000EF4  EF7E  F007         	goto	u1511
  2964   000EF8  EF80  F007         	goto	u1510
  2965   000EFC                     u1511:
  2966   000EFC  EF9C  F007         	goto	l2547
  2967   000F00                     u1510:
  2968   000F00  C02E  F01C         	movff	instructions2@mL,right_45@mL
  2969   000F04  C02F  F01D         	movff	instructions2@mL+1,right_45@mL+1
  2970   000F08  C030  F01E         	movff	instructions2@mR,right_45@mR
  2971   000F0C  C031  F01F         	movff	instructions2@mR+1,right_45@mR+1
  2972   000F10  0E00               	movlw	0
  2973   000F12  6E21               	movwf	(right_45@count+1)^0,c
  2974   000F14  0E03               	movlw	3
  2975   000F16  6E20               	movwf	right_45@count^0,c
  2976   000F18  C059  F022         	movff	_right_timer,right_45@right_timer
  2977   000F1C  C05A  F023         	movff	_right_timer+1,right_45@right_timer+1
  2978   000F20  ECB6  F00A         	call	_right_45	;wreg free
  2979   000F24  C02E  F016         	movff	instructions2@mL,stop@mL
  2980   000F28  C02F  F017         	movff	instructions2@mL+1,stop@mL+1
  2981   000F2C  C030  F018         	movff	instructions2@mR,stop@mR
  2982   000F30  C031  F019         	movff	instructions2@mR+1,stop@mR+1
  2983   000F34  EC9D  F00D         	call	_stop	;wreg free
  2984   000F38                     l2547:
  2985                           
  2986                           ;dc_motor.c: 291:     if (count == 7){left_45(mL,mR,3,right_timer); stop(mL,mR);}
  2987   000F38  0E07               	movlw	7
  2988   000F3A  1832               	xorwf	instructions2@count^0,w,c
  2989   000F3C  1033               	iorwf	(instructions2@count+1)^0,w,c
  2990   000F3E  A4D8               	btfss	status,2,c
  2991   000F40  EFA4  F007         	goto	u1521
  2992   000F44  EFA6  F007         	goto	u1520
  2993   000F48                     u1521:
  2994   000F48  EFC2  F007         	goto	l2551
  2995   000F4C                     u1520:
  2996   000F4C  C02E  F01C         	movff	instructions2@mL,left_45@mL
  2997   000F50  C02F  F01D         	movff	instructions2@mL+1,left_45@mL+1
  2998   000F54  C030  F01E         	movff	instructions2@mR,left_45@mR
  2999   000F58  C031  F01F         	movff	instructions2@mR+1,left_45@mR+1
  3000   000F5C  0E00               	movlw	0
  3001   000F5E  6E21               	movwf	(left_45@count+1)^0,c
  3002   000F60  0E03               	movlw	3
  3003   000F62  6E20               	movwf	left_45@count^0,c
  3004   000F64  C059  F022         	movff	_right_timer,left_45@left_timer
  3005   000F68  C05A  F023         	movff	_right_timer+1,left_45@left_timer+1
  3006   000F6C  EC7B  F009         	call	_left_45	;wreg free
  3007   000F70  C02E  F016         	movff	instructions2@mL,stop@mL
  3008   000F74  C02F  F017         	movff	instructions2@mL+1,stop@mL+1
  3009   000F78  C030  F018         	movff	instructions2@mR,stop@mR
  3010   000F7C  C031  F019         	movff	instructions2@mR+1,stop@mR+1
  3011   000F80  EC9D  F00D         	call	_stop	;wreg free
  3012   000F84                     l2551:
  3013                           
  3014                           ;dc_motor.c: 293:     if (count == 9){reverse_yellow(mL,mR);}
  3015   000F84  0E09               	movlw	9
  3016   000F86  1832               	xorwf	instructions2@count^0,w,c
  3017   000F88  1033               	iorwf	(instructions2@count+1)^0,w,c
  3018   000F8A  A4D8               	btfss	status,2,c
  3019   000F8C  EFCA  F007         	goto	u1531
  3020   000F90  EFCC  F007         	goto	u1530
  3021   000F94                     u1531:
  3022   000F94  EFD6  F007         	goto	l2555
  3023   000F98                     u1530:
  3024   000F98  C02E  F028         	movff	instructions2@mL,reverse_yellow@mL
  3025   000F9C  C02F  F029         	movff	instructions2@mL+1,reverse_yellow@mL+1
  3026   000FA0  C030  F02A         	movff	instructions2@mR,reverse_yellow@mR
  3027   000FA4  C031  F02B         	movff	instructions2@mR+1,reverse_yellow@mR+1
  3028   000FA8  ECF5  F00D         	call	_reverse_yellow	;wreg free
  3029   000FAC                     l2555:
  3030                           
  3031                           ;dc_motor.c: 294:     if (count == 10) {reverse_pink(mL,mR);}
  3032   000FAC  0E0A               	movlw	10
  3033   000FAE  1832               	xorwf	instructions2@count^0,w,c
  3034   000FB0  1033               	iorwf	(instructions2@count+1)^0,w,c
  3035   000FB2  A4D8               	btfss	status,2,c
  3036   000FB4  EFDE  F007         	goto	u1541
  3037   000FB8  EFE0  F007         	goto	u1540
  3038   000FBC                     u1541:
  3039   000FBC  EFEA  F007         	goto	l367
  3040   000FC0                     u1540:
  3041   000FC0  C02E  F028         	movff	instructions2@mL,reverse_pink@mL
  3042   000FC4  C02F  F029         	movff	instructions2@mL+1,reverse_pink@mL+1
  3043   000FC8  C030  F02A         	movff	instructions2@mR,reverse_pink@mR
  3044   000FCC  C031  F02B         	movff	instructions2@mR+1,reverse_pink@mR+1
  3045   000FD0  EC3E  F00E         	call	_reverse_pink	;wreg free
  3046   000FD4                     l367:
  3047   000FD4  0012               	return		;funcret
  3048   000FD6                     __end_of_instructions2:
  3049                           	callstack 0
  3050                           
  3051 ;; *************** function _reverse_yellow *****************
  3052 ;; Defined at:
  3053 ;;		line 255 in file "dc_motor.c"
  3054 ;; Parameters:    Size  Location     Type
  3055 ;;  mL              2   39[COMRAM] PTR struct DC_motor
  3056 ;;		 -> motorL(9), 
  3057 ;;  mR              2   41[COMRAM] PTR struct DC_motor
  3058 ;;		 -> motorR(9), 
  3059 ;; Auto vars:     Size  Location     Type
  3060 ;;		None
  3061 ;; Return value:  Size  Location     Type
  3062 ;;                  1    wreg      void 
  3063 ;; Registers used:
  3064 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3065 ;; Tracked objects:
  3066 ;;		On entry : 0/0
  3067 ;;		On exit  : 0/0
  3068 ;;		Unchanged: 0/0
  3069 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3070 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3071 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3072 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3073 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3074 ;;Total ram usage:        6 bytes
  3075 ;; Hardware stack levels used: 1
  3076 ;; Hardware stack levels required when called: 5
  3077 ;; This function calls:
  3078 ;;		_left_45
  3079 ;;		_reverse
  3080 ;;		_stop
  3081 ;; This function is called by:
  3082 ;;		_instructions2
  3083 ;; This function uses a non-reentrant model
  3084 ;;
  3085                           
  3086                           	psect	text16
  3087   001BEA                     __ptext16:
  3088                           	callstack 0
  3089   001BEA                     _reverse_yellow:
  3090                           	callstack 22
  3091   001BEA                     
  3092                           ;dc_motor.c: 257:     left_45(mL,mR,2,left_timer);
  3093   001BEA  C028  F01C         	movff	reverse_yellow@mL,left_45@mL
  3094   001BEE  C029  F01D         	movff	reverse_yellow@mL+1,left_45@mL+1
  3095   001BF2  C02A  F01E         	movff	reverse_yellow@mR,left_45@mR
  3096   001BF6  C02B  F01F         	movff	reverse_yellow@mR+1,left_45@mR+1
  3097   001BFA  0E00               	movlw	0
  3098   001BFC  6E21               	movwf	(left_45@count+1)^0,c
  3099   001BFE  0E02               	movlw	2
  3100   001C00  6E20               	movwf	left_45@count^0,c
  3101   001C02  C05B  F022         	movff	_left_timer,left_45@left_timer
  3102   001C06  C05C  F023         	movff	_left_timer+1,left_45@left_timer+1
  3103   001C0A  EC7B  F009         	call	_left_45	;wreg free
  3104                           
  3105                           ;dc_motor.c: 258:     stop(mL,mR);
  3106   001C0E  C028  F016         	movff	reverse_yellow@mL,stop@mL
  3107   001C12  C029  F017         	movff	reverse_yellow@mL+1,stop@mL+1
  3108   001C16  C02A  F018         	movff	reverse_yellow@mR,stop@mR
  3109   001C1A  C02B  F019         	movff	reverse_yellow@mR+1,stop@mR+1
  3110   001C1E  EC9D  F00D         	call	_stop	;wreg free
  3111   001C22                     
  3112                           ;dc_motor.c: 259:     _delay((unsigned long)((200)*(64000000/4000.0)));
  3113   001C22  0E11               	movlw	17
  3114   001C24  6E2D               	movwf	(??_reverse_yellow+1)^0,c
  3115   001C26  0E3C               	movlw	60
  3116   001C28  6E2C               	movwf	??_reverse_yellow^0,c
  3117   001C2A  0ECB               	movlw	203
  3118   001C2C                     u2757:
  3119   001C2C  2EE8               	decfsz	wreg,f,c
  3120   001C2E  D7FE               	bra	u2757
  3121   001C30  2E2C               	decfsz	??_reverse_yellow^0,f,c
  3122   001C32  D7FC               	bra	u2757
  3123   001C34  2E2D               	decfsz	(??_reverse_yellow+1)^0,f,c
  3124   001C36  D7FA               	bra	u2757
  3125   001C38  F000               	nop	
  3126   001C3A                     
  3127                           ;dc_motor.c: 261:      reverse(mL,mR);
  3128   001C3A  C028  F01C         	movff	reverse_yellow@mL,reverse@mL
  3129   001C3E  C029  F01D         	movff	reverse_yellow@mL+1,reverse@mL+1
  3130   001C42  C02A  F01E         	movff	reverse_yellow@mR,reverse@mR
  3131   001C46  C02B  F01F         	movff	reverse_yellow@mR+1,reverse@mR+1
  3132   001C4A  EC3E  F00D         	call	_reverse	;wreg free
  3133                           
  3134                           ;dc_motor.c: 262:     _delay((unsigned long)((700)*(64000000/4000.0)));
  3135   001C4E  0E39               	movlw	57
  3136   001C50  6E2D               	movwf	(??_reverse_yellow+1)^0,c
  3137   001C52  0ED2               	movlw	210
  3138   001C54  6E2C               	movwf	??_reverse_yellow^0,c
  3139   001C56  0E4C               	movlw	76
  3140   001C58                     u2767:
  3141   001C58  2EE8               	decfsz	wreg,f,c
  3142   001C5A  D7FE               	bra	u2767
  3143   001C5C  2E2C               	decfsz	??_reverse_yellow^0,f,c
  3144   001C5E  D7FC               	bra	u2767
  3145   001C60  2E2D               	decfsz	(??_reverse_yellow+1)^0,f,c
  3146   001C62  D7FA               	bra	u2767
  3147   001C64  D000               	nop2	
  3148   001C66                     
  3149                           ;dc_motor.c: 263:     stop(mL,mR);
  3150   001C66  C028  F016         	movff	reverse_yellow@mL,stop@mL
  3151   001C6A  C029  F017         	movff	reverse_yellow@mL+1,stop@mL+1
  3152   001C6E  C02A  F018         	movff	reverse_yellow@mR,stop@mR
  3153   001C72  C02B  F019         	movff	reverse_yellow@mR+1,stop@mR+1
  3154   001C76  EC9D  F00D         	call	_stop	;wreg free
  3155   001C7A  0012               	return		;funcret
  3156   001C7C                     __end_of_reverse_yellow:
  3157                           	callstack 0
  3158                           
  3159 ;; *************** function _reverse_pink *****************
  3160 ;; Defined at:
  3161 ;;		line 244 in file "dc_motor.c"
  3162 ;; Parameters:    Size  Location     Type
  3163 ;;  mL              2   39[COMRAM] PTR struct DC_motor
  3164 ;;		 -> motorL(9), 
  3165 ;;  mR              2   41[COMRAM] PTR struct DC_motor
  3166 ;;		 -> motorR(9), 
  3167 ;; Auto vars:     Size  Location     Type
  3168 ;;		None
  3169 ;; Return value:  Size  Location     Type
  3170 ;;                  1    wreg      void 
  3171 ;; Registers used:
  3172 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3173 ;; Tracked objects:
  3174 ;;		On entry : 0/0
  3175 ;;		On exit  : 0/0
  3176 ;;		Unchanged: 0/0
  3177 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3178 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3179 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3180 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3181 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3182 ;;Total ram usage:        6 bytes
  3183 ;; Hardware stack levels used: 1
  3184 ;; Hardware stack levels required when called: 5
  3185 ;; This function calls:
  3186 ;;		_reverse
  3187 ;;		_right_45
  3188 ;;		_stop
  3189 ;; This function is called by:
  3190 ;;		_instructions2
  3191 ;; This function uses a non-reentrant model
  3192 ;;
  3193                           
  3194                           	psect	text17
  3195   001C7C                     __ptext17:
  3196                           	callstack 0
  3197   001C7C                     _reverse_pink:
  3198                           	callstack 22
  3199   001C7C                     
  3200                           ;dc_motor.c: 246:     right_45(mL,mR,2,right_timer);
  3201   001C7C  C028  F01C         	movff	reverse_pink@mL,right_45@mL
  3202   001C80  C029  F01D         	movff	reverse_pink@mL+1,right_45@mL+1
  3203   001C84  C02A  F01E         	movff	reverse_pink@mR,right_45@mR
  3204   001C88  C02B  F01F         	movff	reverse_pink@mR+1,right_45@mR+1
  3205   001C8C  0E00               	movlw	0
  3206   001C8E  6E21               	movwf	(right_45@count+1)^0,c
  3207   001C90  0E02               	movlw	2
  3208   001C92  6E20               	movwf	right_45@count^0,c
  3209   001C94  C059  F022         	movff	_right_timer,right_45@right_timer
  3210   001C98  C05A  F023         	movff	_right_timer+1,right_45@right_timer+1
  3211   001C9C  ECB6  F00A         	call	_right_45	;wreg free
  3212                           
  3213                           ;dc_motor.c: 247:     stop(mL,mR);
  3214   001CA0  C028  F016         	movff	reverse_pink@mL,stop@mL
  3215   001CA4  C029  F017         	movff	reverse_pink@mL+1,stop@mL+1
  3216   001CA8  C02A  F018         	movff	reverse_pink@mR,stop@mR
  3217   001CAC  C02B  F019         	movff	reverse_pink@mR+1,stop@mR+1
  3218   001CB0  EC9D  F00D         	call	_stop	;wreg free
  3219   001CB4                     
  3220                           ;dc_motor.c: 248:     _delay((unsigned long)((200)*(64000000/4000.0)));
  3221   001CB4  0E11               	movlw	17
  3222   001CB6  6E2D               	movwf	(??_reverse_pink+1)^0,c
  3223   001CB8  0E3C               	movlw	60
  3224   001CBA  6E2C               	movwf	??_reverse_pink^0,c
  3225   001CBC  0ECB               	movlw	203
  3226   001CBE                     u2777:
  3227   001CBE  2EE8               	decfsz	wreg,f,c
  3228   001CC0  D7FE               	bra	u2777
  3229   001CC2  2E2C               	decfsz	??_reverse_pink^0,f,c
  3230   001CC4  D7FC               	bra	u2777
  3231   001CC6  2E2D               	decfsz	(??_reverse_pink+1)^0,f,c
  3232   001CC8  D7FA               	bra	u2777
  3233   001CCA  F000               	nop	
  3234   001CCC                     
  3235                           ;dc_motor.c: 250:      reverse(mL,mR);
  3236   001CCC  C028  F01C         	movff	reverse_pink@mL,reverse@mL
  3237   001CD0  C029  F01D         	movff	reverse_pink@mL+1,reverse@mL+1
  3238   001CD4  C02A  F01E         	movff	reverse_pink@mR,reverse@mR
  3239   001CD8  C02B  F01F         	movff	reverse_pink@mR+1,reverse@mR+1
  3240   001CDC  EC3E  F00D         	call	_reverse	;wreg free
  3241                           
  3242                           ;dc_motor.c: 251:     _delay((unsigned long)((700)*(64000000/4000.0)));
  3243   001CE0  0E39               	movlw	57
  3244   001CE2  6E2D               	movwf	(??_reverse_pink+1)^0,c
  3245   001CE4  0ED2               	movlw	210
  3246   001CE6  6E2C               	movwf	??_reverse_pink^0,c
  3247   001CE8  0E4C               	movlw	76
  3248   001CEA                     u2787:
  3249   001CEA  2EE8               	decfsz	wreg,f,c
  3250   001CEC  D7FE               	bra	u2787
  3251   001CEE  2E2C               	decfsz	??_reverse_pink^0,f,c
  3252   001CF0  D7FC               	bra	u2787
  3253   001CF2  2E2D               	decfsz	(??_reverse_pink+1)^0,f,c
  3254   001CF4  D7FA               	bra	u2787
  3255   001CF6  D000               	nop2	
  3256   001CF8                     
  3257                           ;dc_motor.c: 252:     stop(mL,mR);
  3258   001CF8  C028  F016         	movff	reverse_pink@mL,stop@mL
  3259   001CFC  C029  F017         	movff	reverse_pink@mL+1,stop@mL+1
  3260   001D00  C02A  F018         	movff	reverse_pink@mR,stop@mR
  3261   001D04  C02B  F019         	movff	reverse_pink@mR+1,stop@mR+1
  3262   001D08  EC9D  F00D         	call	_stop	;wreg free
  3263   001D0C  0012               	return		;funcret
  3264   001D0E                     __end_of_reverse_pink:
  3265                           	callstack 0
  3266                           
  3267 ;; *************** function _forward *****************
  3268 ;; Defined at:
  3269 ;;		line 119 in file "dc_motor.c"
  3270 ;; Parameters:    Size  Location     Type
  3271 ;;  mL              2   27[COMRAM] PTR struct DC_motor
  3272 ;;		 -> motorL(9), 
  3273 ;;  mR              2   29[COMRAM] PTR struct DC_motor
  3274 ;;		 -> motorR(9), 
  3275 ;; Auto vars:     Size  Location     Type
  3276 ;;		None
  3277 ;; Return value:  Size  Location     Type
  3278 ;;                  1    wreg      void 
  3279 ;; Registers used:
  3280 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3281 ;; Tracked objects:
  3282 ;;		On entry : 0/0
  3283 ;;		On exit  : 0/0
  3284 ;;		Unchanged: 0/0
  3285 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3286 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3287 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3288 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3289 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3290 ;;Total ram usage:        5 bytes
  3291 ;; Hardware stack levels used: 1
  3292 ;; Hardware stack levels required when called: 4
  3293 ;; This function calls:
  3294 ;;		_setMotorPWM
  3295 ;;		_stop
  3296 ;; This function is called by:
  3297 ;;		_buggy_color_response
  3298 ;;		_return_home
  3299 ;; This function uses a non-reentrant model
  3300 ;;
  3301                           
  3302                           	psect	text18
  3303   0019BE                     __ptext18:
  3304                           	callstack 0
  3305   0019BE                     _forward:
  3306                           	callstack 24
  3307   0019BE                     
  3308                           ;dc_motor.c: 119: void forward(DC_motor *mL, DC_motor *mR);dc_motor.c: 120: {;dc_motor.c
      +                          : 121:     stop(mL,mR);
  3309   0019BE  C01C  F016         	movff	forward@mL,stop@mL
  3310   0019C2  C01D  F017         	movff	forward@mL+1,stop@mL+1
  3311   0019C6  C01E  F018         	movff	forward@mR,stop@mR
  3312   0019CA  C01F  F019         	movff	forward@mR+1,stop@mR+1
  3313   0019CE  EC9D  F00D         	call	_stop	;wreg free
  3314   0019D2                     
  3315                           ;dc_motor.c: 122:     mL-> direction = 1;
  3316   0019D2  EE20 F001          	lfsr	2,1
  3317   0019D6  501C               	movf	forward@mL^0,w,c
  3318   0019D8  26D9               	addwf	fsr2l,f,c
  3319   0019DA  501D               	movf	(forward@mL+1)^0,w,c
  3320   0019DC  22DA               	addwfc	fsr2h,f,c
  3321   0019DE  0E01               	movlw	1
  3322   0019E0  6EDF               	movwf	indf2,c
  3323   0019E2                     
  3324                           ;dc_motor.c: 123:     mR-> direction = 1;
  3325   0019E2  EE20 F001          	lfsr	2,1
  3326   0019E6  501E               	movf	forward@mR^0,w,c
  3327   0019E8  26D9               	addwf	fsr2l,f,c
  3328   0019EA  501F               	movf	(forward@mR+1)^0,w,c
  3329   0019EC  22DA               	addwfc	fsr2h,f,c
  3330   0019EE  0E01               	movlw	1
  3331   0019F0  6EDF               	movwf	indf2,c
  3332   0019F2                     
  3333                           ;dc_motor.c: 124:     LATDbits.LATD3 = 1;
  3334   0019F2  867C               	bsf	124,3,c	;volatile
  3335                           
  3336                           ;dc_motor.c: 125:     setMotorPWM(mR);
  3337   0019F4  C01E  F010         	movff	forward@mR,setMotorPWM@m
  3338   0019F8  C01F  F011         	movff	forward@mR+1,setMotorPWM@m+1
  3339   0019FC  ECC5  F008         	call	_setMotorPWM	;wreg free
  3340                           
  3341                           ;dc_motor.c: 126:     setMotorPWM(mL);
  3342   001A00  C01C  F010         	movff	forward@mL,setMotorPWM@m
  3343   001A04  C01D  F011         	movff	forward@mL+1,setMotorPWM@m+1
  3344   001A08  ECC5  F008         	call	_setMotorPWM	;wreg free
  3345                           
  3346                           ;dc_motor.c: 127:     while ((mL->power <50) && (mR->power <55)){
  3347   001A0C  EF24  F00D         	goto	l2499
  3348   001A10                     l2491:
  3349                           
  3350                           ;dc_motor.c: 128:         mL->power += 5;
  3351   001A10  C01C  FFD9         	movff	forward@mL,fsr2l
  3352   001A14  C01D  FFDA         	movff	forward@mL+1,fsr2h
  3353   001A18  0E05               	movlw	5
  3354   001A1A  26DF               	addwf	indf2,f,c
  3355                           
  3356                           ;dc_motor.c: 129:         mR->power += 5;
  3357   001A1C  C01E  FFD9         	movff	forward@mR,fsr2l
  3358   001A20  C01F  FFDA         	movff	forward@mR+1,fsr2h
  3359   001A24  0E05               	movlw	5
  3360   001A26  26DF               	addwf	indf2,f,c
  3361   001A28                     
  3362                           ;dc_motor.c: 130:         setMotorPWM(mL);
  3363   001A28  C01C  F010         	movff	forward@mL,setMotorPWM@m
  3364   001A2C  C01D  F011         	movff	forward@mL+1,setMotorPWM@m+1
  3365   001A30  ECC5  F008         	call	_setMotorPWM	;wreg free
  3366   001A34                     
  3367                           ;dc_motor.c: 131:         setMotorPWM(mR);
  3368   001A34  C01E  F010         	movff	forward@mR,setMotorPWM@m
  3369   001A38  C01F  F011         	movff	forward@mR+1,setMotorPWM@m+1
  3370   001A3C  ECC5  F008         	call	_setMotorPWM	;wreg free
  3371   001A40                     
  3372                           ;dc_motor.c: 132:         _delay((unsigned long)((10)*(64000000/4000000.0)));
  3373   001A40  0E35               	movlw	53
  3374   001A42                     u2797:
  3375   001A42  2EE8               	decfsz	wreg,f,c
  3376   001A44  D7FE               	bra	u2797
  3377   001A46  F000               	nop	
  3378   001A48                     l2499:
  3379                           
  3380                           ;dc_motor.c: 127:     while ((mL->power <50) && (mR->power <55)){
  3381   001A48  C01C  FFD9         	movff	forward@mL,fsr2l
  3382   001A4C  C01D  FFDA         	movff	forward@mL+1,fsr2h
  3383   001A50  0E32               	movlw	50
  3384   001A52  60DF               	cpfslt	indf2,c
  3385   001A54  EF2E  F00D         	goto	u1441
  3386   001A58  EF30  F00D         	goto	u1440
  3387   001A5C                     u1441:
  3388   001A5C  EF3C  F00D         	goto	l297
  3389   001A60                     u1440:
  3390   001A60  C01E  FFD9         	movff	forward@mR,fsr2l
  3391   001A64  C01F  FFDA         	movff	forward@mR+1,fsr2h
  3392   001A68  0E36               	movlw	54
  3393   001A6A  64DF               	cpfsgt	indf2,c
  3394   001A6C  EF3A  F00D         	goto	u1451
  3395   001A70  EF3C  F00D         	goto	u1450
  3396   001A74                     u1451:
  3397   001A74  EF08  F00D         	goto	l2491
  3398   001A78                     u1450:
  3399   001A78                     l297:
  3400                           
  3401                           ;dc_motor.c: 134:     LATDbits.LATD3 = 0;
  3402   001A78  967C               	bcf	124,3,c	;volatile
  3403   001A7A  0012               	return		;funcret
  3404   001A7C                     __end_of_forward:
  3405                           	callstack 0
  3406                           
  3407 ;; *************** function _delay_ms_func *****************
  3408 ;; Defined at:
  3409 ;;		line 208 in file "color.c"
  3410 ;; Parameters:    Size  Location     Type
  3411 ;;  time            2    2[COMRAM] unsigned int 
  3412 ;; Auto vars:     Size  Location     Type
  3413 ;;  i               2    6[COMRAM] unsigned int 
  3414 ;; Return value:  Size  Location     Type
  3415 ;;                  1    wreg      void 
  3416 ;; Registers used:
  3417 ;;		wreg, status,2, status,0
  3418 ;; Tracked objects:
  3419 ;;		On entry : 0/0
  3420 ;;		On exit  : 0/0
  3421 ;;		Unchanged: 0/0
  3422 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3423 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3424 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3425 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3426 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3427 ;;Total ram usage:        6 bytes
  3428 ;; Hardware stack levels used: 1
  3429 ;; Hardware stack levels required when called: 1
  3430 ;; This function calls:
  3431 ;;		Nothing
  3432 ;; This function is called by:
  3433 ;;		_return_home
  3434 ;; This function uses a non-reentrant model
  3435 ;;
  3436                           
  3437                           	psect	text19
  3438   00209C                     __ptext19:
  3439                           	callstack 0
  3440   00209C                     _delay_ms_func:
  3441                           	callstack 27
  3442   00209C                     
  3443                           ;color.c: 209:     unsigned int i;;color.c: 210:     for (i=0; i < time; i++) {_delay((u
      +                          nsigned long)((131)*(64000000/4000.0)));}
  3444   00209C  0E00               	movlw	0
  3445   00209E  6E08               	movwf	(delay_ms_func@i+1)^0,c
  3446   0020A0  0E00               	movlw	0
  3447   0020A2  6E07               	movwf	delay_ms_func@i^0,c
  3448   0020A4  EF62  F010         	goto	l153
  3449   0020A8                     l2561:
  3450   0020A8  0E0B               	movlw	11
  3451   0020AA  6E06               	movwf	(??_delay_ms_func+1)^0,c
  3452   0020AC  0EA3               	movlw	163
  3453   0020AE  6E05               	movwf	??_delay_ms_func^0,c
  3454   0020B0  0E0A               	movlw	10
  3455   0020B2                     u2807:
  3456   0020B2  2EE8               	decfsz	wreg,f,c
  3457   0020B4  D7FE               	bra	u2807
  3458   0020B6  2E05               	decfsz	??_delay_ms_func^0,f,c
  3459   0020B8  D7FC               	bra	u2807
  3460   0020BA  2E06               	decfsz	(??_delay_ms_func+1)^0,f,c
  3461   0020BC  D7FA               	bra	u2807
  3462   0020BE  D000               	nop2	
  3463   0020C0  4A07               	infsnz	delay_ms_func@i^0,f,c
  3464   0020C2  2A08               	incf	(delay_ms_func@i+1)^0,f,c
  3465   0020C4                     l153:
  3466   0020C4  5003               	movf	delay_ms_func@time^0,w,c
  3467   0020C6  5C07               	subwf	delay_ms_func@i^0,w,c
  3468   0020C8  5004               	movf	(delay_ms_func@time+1)^0,w,c
  3469   0020CA  5808               	subwfb	(delay_ms_func@i+1)^0,w,c
  3470   0020CC  A0D8               	btfss	status,0,c
  3471   0020CE  EF6B  F010         	goto	u1551
  3472   0020D2  EF6D  F010         	goto	u1550
  3473   0020D6                     u1551:
  3474   0020D6  EF54  F010         	goto	l2561
  3475   0020DA                     u1550:
  3476   0020DA  0012               	return		;funcret
  3477   0020DC                     __end_of_delay_ms_func:
  3478                           	callstack 0
  3479                           
  3480 ;; *************** function _instructions *****************
  3481 ;; Defined at:
  3482 ;;		line 267 in file "dc_motor.c"
  3483 ;; Parameters:    Size  Location     Type
  3484 ;;  mL              2   39[COMRAM] PTR struct DC_motor
  3485 ;;		 -> motorL(9), 
  3486 ;;  mR              2   41[COMRAM] PTR struct DC_motor
  3487 ;;		 -> motorR(9), 
  3488 ;;  count           2   43[COMRAM] int 
  3489 ;; Auto vars:     Size  Location     Type
  3490 ;;		None
  3491 ;; Return value:  Size  Location     Type
  3492 ;;                  1    wreg      void 
  3493 ;; Registers used:
  3494 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3495 ;; Tracked objects:
  3496 ;;		On entry : 0/0
  3497 ;;		On exit  : 0/0
  3498 ;;		Unchanged: 0/0
  3499 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3500 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3501 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3502 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3503 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3504 ;;Total ram usage:        8 bytes
  3505 ;; Hardware stack levels used: 1
  3506 ;; Hardware stack levels required when called: 5
  3507 ;; This function calls:
  3508 ;;		_left_45
  3509 ;;		_reverse
  3510 ;;		_right_45
  3511 ;;		_space
  3512 ;;		_stop
  3513 ;; This function is called by:
  3514 ;;		_buggy_color_response
  3515 ;; This function uses a non-reentrant model
  3516 ;;
  3517                           
  3518                           	psect	text20
  3519   000AEE                     __ptext20:
  3520                           	callstack 0
  3521   000AEE                     _instructions:
  3522                           	callstack 24
  3523   000AEE                     
  3524                           ;dc_motor.c: 267: void instructions(DC_motor *mL, DC_motor *mR, int count);dc_motor.c: 2
      +                          68: {;dc_motor.c: 269:     space(mL,mR);
  3525   000AEE  C028  F01C         	movff	instructions@mL,space@mL
  3526   000AF2  C029  F01D         	movff	instructions@mL+1,space@mL+1
  3527   000AF6  C02A  F01E         	movff	instructions@mR,space@mR
  3528   000AFA  C02B  F01F         	movff	instructions@mR+1,space@mR+1
  3529   000AFE  EC5E  F00C         	call	_space	;wreg free
  3530   000B02                     
  3531                           ;dc_motor.c: 270:     _delay((unsigned long)((500)*(64000000/4000.0)));
  3532   000B02  0E29               	movlw	41
  3533   000B04  6E2F               	movwf	(??_instructions+1)^0,c
  3534   000B06  0E96               	movlw	150
  3535   000B08  6E2E               	movwf	??_instructions^0,c
  3536   000B0A  0E7F               	movlw	127
  3537   000B0C                     u2817:
  3538   000B0C  2EE8               	decfsz	wreg,f,c
  3539   000B0E  D7FE               	bra	u2817
  3540   000B10  2E2E               	decfsz	??_instructions^0,f,c
  3541   000B12  D7FC               	bra	u2817
  3542   000B14  2E2F               	decfsz	(??_instructions+1)^0,f,c
  3543   000B16  D7FA               	bra	u2817
  3544   000B18  F000               	nop	
  3545   000B1A                     
  3546                           ;dc_motor.c: 271:     stop(mL,mR);
  3547   000B1A  C028  F016         	movff	instructions@mL,stop@mL
  3548   000B1E  C029  F017         	movff	instructions@mL+1,stop@mL+1
  3549   000B22  C02A  F018         	movff	instructions@mR,stop@mR
  3550   000B26  C02B  F019         	movff	instructions@mR+1,stop@mR+1
  3551   000B2A  EC9D  F00D         	call	_stop	;wreg free
  3552                           
  3553                           ;dc_motor.c: 272:     _delay((unsigned long)((500)*(64000000/4000.0)));
  3554   000B2E  0E29               	movlw	41
  3555   000B30  6E2F               	movwf	(??_instructions+1)^0,c
  3556   000B32  0E96               	movlw	150
  3557   000B34  6E2E               	movwf	??_instructions^0,c
  3558   000B36  0E7F               	movlw	127
  3559   000B38                     u2827:
  3560   000B38  2EE8               	decfsz	wreg,f,c
  3561   000B3A  D7FE               	bra	u2827
  3562   000B3C  2E2E               	decfsz	??_instructions^0,f,c
  3563   000B3E  D7FC               	bra	u2827
  3564   000B40  2E2F               	decfsz	(??_instructions+1)^0,f,c
  3565   000B42  D7FA               	bra	u2827
  3566   000B44  F000               	nop	
  3567   000B46                     
  3568                           ;dc_motor.c: 273:     if (count == 1){right_45(mL,mR,2,right_timer); stop(mL,mR);}
  3569   000B46  042C               	decf	instructions@count^0,w,c
  3570   000B48  102D               	iorwf	(instructions@count+1)^0,w,c
  3571   000B4A  A4D8               	btfss	status,2,c
  3572   000B4C  EFAA  F005         	goto	u1891
  3573   000B50  EFAC  F005         	goto	u1890
  3574   000B54                     u1891:
  3575   000B54  EFC8  F005         	goto	l2771
  3576   000B58                     u1890:
  3577   000B58  C028  F01C         	movff	instructions@mL,right_45@mL
  3578   000B5C  C029  F01D         	movff	instructions@mL+1,right_45@mL+1
  3579   000B60  C02A  F01E         	movff	instructions@mR,right_45@mR
  3580   000B64  C02B  F01F         	movff	instructions@mR+1,right_45@mR+1
  3581   000B68  0E00               	movlw	0
  3582   000B6A  6E21               	movwf	(right_45@count+1)^0,c
  3583   000B6C  0E02               	movlw	2
  3584   000B6E  6E20               	movwf	right_45@count^0,c
  3585   000B70  C059  F022         	movff	_right_timer,right_45@right_timer
  3586   000B74  C05A  F023         	movff	_right_timer+1,right_45@right_timer+1
  3587   000B78  ECB6  F00A         	call	_right_45	;wreg free
  3588   000B7C  C028  F016         	movff	instructions@mL,stop@mL
  3589   000B80  C029  F017         	movff	instructions@mL+1,stop@mL+1
  3590   000B84  C02A  F018         	movff	instructions@mR,stop@mR
  3591   000B88  C02B  F019         	movff	instructions@mR+1,stop@mR+1
  3592   000B8C  EC9D  F00D         	call	_stop	;wreg free
  3593   000B90                     l2771:
  3594                           
  3595                           ;dc_motor.c: 274:     if (count == 2){left_45(mL,mR,2,left_timer); stop(mL,mR);}
  3596   000B90  0E02               	movlw	2
  3597   000B92  182C               	xorwf	instructions@count^0,w,c
  3598   000B94  102D               	iorwf	(instructions@count+1)^0,w,c
  3599   000B96  A4D8               	btfss	status,2,c
  3600   000B98  EFD0  F005         	goto	u1901
  3601   000B9C  EFD2  F005         	goto	u1900
  3602   000BA0                     u1901:
  3603   000BA0  EFEE  F005         	goto	l2775
  3604   000BA4                     u1900:
  3605   000BA4  C028  F01C         	movff	instructions@mL,left_45@mL
  3606   000BA8  C029  F01D         	movff	instructions@mL+1,left_45@mL+1
  3607   000BAC  C02A  F01E         	movff	instructions@mR,left_45@mR
  3608   000BB0  C02B  F01F         	movff	instructions@mR+1,left_45@mR+1
  3609   000BB4  0E00               	movlw	0
  3610   000BB6  6E21               	movwf	(left_45@count+1)^0,c
  3611   000BB8  0E02               	movlw	2
  3612   000BBA  6E20               	movwf	left_45@count^0,c
  3613   000BBC  C05B  F022         	movff	_left_timer,left_45@left_timer
  3614   000BC0  C05C  F023         	movff	_left_timer+1,left_45@left_timer+1
  3615   000BC4  EC7B  F009         	call	_left_45	;wreg free
  3616   000BC8  C028  F016         	movff	instructions@mL,stop@mL
  3617   000BCC  C029  F017         	movff	instructions@mL+1,stop@mL+1
  3618   000BD0  C02A  F018         	movff	instructions@mR,stop@mR
  3619   000BD4  C02B  F019         	movff	instructions@mR+1,stop@mR+1
  3620   000BD8  EC9D  F00D         	call	_stop	;wreg free
  3621   000BDC                     l2775:
  3622                           
  3623                           ;dc_motor.c: 275:     if (count == 3){right_45(mL,mR,4,right_timer); stop(mL,mR);}
  3624   000BDC  0E03               	movlw	3
  3625   000BDE  182C               	xorwf	instructions@count^0,w,c
  3626   000BE0  102D               	iorwf	(instructions@count+1)^0,w,c
  3627   000BE2  A4D8               	btfss	status,2,c
  3628   000BE4  EFF6  F005         	goto	u1911
  3629   000BE8  EFF8  F005         	goto	u1910
  3630   000BEC                     u1911:
  3631   000BEC  EF14  F006         	goto	l2779
  3632   000BF0                     u1910:
  3633   000BF0  C028  F01C         	movff	instructions@mL,right_45@mL
  3634   000BF4  C029  F01D         	movff	instructions@mL+1,right_45@mL+1
  3635   000BF8  C02A  F01E         	movff	instructions@mR,right_45@mR
  3636   000BFC  C02B  F01F         	movff	instructions@mR+1,right_45@mR+1
  3637   000C00  0E00               	movlw	0
  3638   000C02  6E21               	movwf	(right_45@count+1)^0,c
  3639   000C04  0E04               	movlw	4
  3640   000C06  6E20               	movwf	right_45@count^0,c
  3641   000C08  C059  F022         	movff	_right_timer,right_45@right_timer
  3642   000C0C  C05A  F023         	movff	_right_timer+1,right_45@right_timer+1
  3643   000C10  ECB6  F00A         	call	_right_45	;wreg free
  3644   000C14  C028  F016         	movff	instructions@mL,stop@mL
  3645   000C18  C029  F017         	movff	instructions@mL+1,stop@mL+1
  3646   000C1C  C02A  F018         	movff	instructions@mR,stop@mR
  3647   000C20  C02B  F019         	movff	instructions@mR+1,stop@mR+1
  3648   000C24  EC9D  F00D         	call	_stop	;wreg free
  3649   000C28                     l2779:
  3650                           
  3651                           ;dc_motor.c: 276:     if (count == 4){reverse(mL,mR); _delay((unsigned long)((700)*(6400
      +                          0000/4000.0)));stop(mL,mR);_delay((unsigned long)((500)*(64000000/4000.0)));right_45(mL,
      +                          mR,2,right_timer); stop(mL,mR);}
  3652   000C28  0E04               	movlw	4
  3653   000C2A  182C               	xorwf	instructions@count^0,w,c
  3654   000C2C  102D               	iorwf	(instructions@count+1)^0,w,c
  3655   000C2E  A4D8               	btfss	status,2,c
  3656   000C30  EF1C  F006         	goto	u1921
  3657   000C34  EF1E  F006         	goto	u1920
  3658   000C38                     u1921:
  3659   000C38  EF66  F006         	goto	l2791
  3660   000C3C                     u1920:
  3661   000C3C  C028  F01C         	movff	instructions@mL,reverse@mL
  3662   000C40  C029  F01D         	movff	instructions@mL+1,reverse@mL+1
  3663   000C44  C02A  F01E         	movff	instructions@mR,reverse@mR
  3664   000C48  C02B  F01F         	movff	instructions@mR+1,reverse@mR+1
  3665   000C4C  EC3E  F00D         	call	_reverse	;wreg free
  3666   000C50  0E39               	movlw	57
  3667   000C52  6E2F               	movwf	(??_instructions+1)^0,c
  3668   000C54  0ED2               	movlw	210
  3669   000C56  6E2E               	movwf	??_instructions^0,c
  3670   000C58  0E4C               	movlw	76
  3671   000C5A                     u2837:
  3672   000C5A  2EE8               	decfsz	wreg,f,c
  3673   000C5C  D7FE               	bra	u2837
  3674   000C5E  2E2E               	decfsz	??_instructions^0,f,c
  3675   000C60  D7FC               	bra	u2837
  3676   000C62  2E2F               	decfsz	(??_instructions+1)^0,f,c
  3677   000C64  D7FA               	bra	u2837
  3678   000C66  D000               	nop2	
  3679   000C68  C028  F016         	movff	instructions@mL,stop@mL
  3680   000C6C  C029  F017         	movff	instructions@mL+1,stop@mL+1
  3681   000C70  C02A  F018         	movff	instructions@mR,stop@mR
  3682   000C74  C02B  F019         	movff	instructions@mR+1,stop@mR+1
  3683   000C78  EC9D  F00D         	call	_stop	;wreg free
  3684   000C7C  0E29               	movlw	41
  3685   000C7E  6E2F               	movwf	(??_instructions+1)^0,c
  3686   000C80  0E96               	movlw	150
  3687   000C82  6E2E               	movwf	??_instructions^0,c
  3688   000C84  0E7F               	movlw	127
  3689   000C86                     u2847:
  3690   000C86  2EE8               	decfsz	wreg,f,c
  3691   000C88  D7FE               	bra	u2847
  3692   000C8A  2E2E               	decfsz	??_instructions^0,f,c
  3693   000C8C  D7FC               	bra	u2847
  3694   000C8E  2E2F               	decfsz	(??_instructions+1)^0,f,c
  3695   000C90  D7FA               	bra	u2847
  3696   000C92  F000               	nop	
  3697   000C94  C028  F01C         	movff	instructions@mL,right_45@mL
  3698   000C98  C029  F01D         	movff	instructions@mL+1,right_45@mL+1
  3699   000C9C  C02A  F01E         	movff	instructions@mR,right_45@mR
  3700   000CA0  C02B  F01F         	movff	instructions@mR+1,right_45@mR+1
  3701   000CA4  0E00               	movlw	0
  3702   000CA6  6E21               	movwf	(right_45@count+1)^0,c
  3703   000CA8  0E02               	movlw	2
  3704   000CAA  6E20               	movwf	right_45@count^0,c
  3705   000CAC  C059  F022         	movff	_right_timer,right_45@right_timer
  3706   000CB0  C05A  F023         	movff	_right_timer+1,right_45@right_timer+1
  3707   000CB4  ECB6  F00A         	call	_right_45	;wreg free
  3708   000CB8  C028  F016         	movff	instructions@mL,stop@mL
  3709   000CBC  C029  F017         	movff	instructions@mL+1,stop@mL+1
  3710   000CC0  C02A  F018         	movff	instructions@mR,stop@mR
  3711   000CC4  C02B  F019         	movff	instructions@mR+1,stop@mR+1
  3712   000CC8  EC9D  F00D         	call	_stop	;wreg free
  3713   000CCC                     l2791:
  3714                           
  3715                           ;dc_motor.c: 277:     if (count == 5){reverse(mL,mR); _delay((unsigned long)((700)*(6400
      +                          0000/4000.0)));stop(mL,mR);_delay((unsigned long)((500)*(64000000/4000.0)));left_45(mL,m
      +                          R,2,left_timer); stop(mL,mR);}
  3716   000CCC  0E05               	movlw	5
  3717   000CCE  182C               	xorwf	instructions@count^0,w,c
  3718   000CD0  102D               	iorwf	(instructions@count+1)^0,w,c
  3719   000CD2  A4D8               	btfss	status,2,c
  3720   000CD4  EF6E  F006         	goto	u1931
  3721   000CD8  EF70  F006         	goto	u1930
  3722   000CDC                     u1931:
  3723   000CDC  EFB8  F006         	goto	l2803
  3724   000CE0                     u1930:
  3725   000CE0  C028  F01C         	movff	instructions@mL,reverse@mL
  3726   000CE4  C029  F01D         	movff	instructions@mL+1,reverse@mL+1
  3727   000CE8  C02A  F01E         	movff	instructions@mR,reverse@mR
  3728   000CEC  C02B  F01F         	movff	instructions@mR+1,reverse@mR+1
  3729   000CF0  EC3E  F00D         	call	_reverse	;wreg free
  3730   000CF4  0E39               	movlw	57
  3731   000CF6  6E2F               	movwf	(??_instructions+1)^0,c
  3732   000CF8  0ED2               	movlw	210
  3733   000CFA  6E2E               	movwf	??_instructions^0,c
  3734   000CFC  0E4C               	movlw	76
  3735   000CFE                     u2857:
  3736   000CFE  2EE8               	decfsz	wreg,f,c
  3737   000D00  D7FE               	bra	u2857
  3738   000D02  2E2E               	decfsz	??_instructions^0,f,c
  3739   000D04  D7FC               	bra	u2857
  3740   000D06  2E2F               	decfsz	(??_instructions+1)^0,f,c
  3741   000D08  D7FA               	bra	u2857
  3742   000D0A  D000               	nop2	
  3743   000D0C  C028  F016         	movff	instructions@mL,stop@mL
  3744   000D10  C029  F017         	movff	instructions@mL+1,stop@mL+1
  3745   000D14  C02A  F018         	movff	instructions@mR,stop@mR
  3746   000D18  C02B  F019         	movff	instructions@mR+1,stop@mR+1
  3747   000D1C  EC9D  F00D         	call	_stop	;wreg free
  3748   000D20  0E29               	movlw	41
  3749   000D22  6E2F               	movwf	(??_instructions+1)^0,c
  3750   000D24  0E96               	movlw	150
  3751   000D26  6E2E               	movwf	??_instructions^0,c
  3752   000D28  0E7F               	movlw	127
  3753   000D2A                     u2867:
  3754   000D2A  2EE8               	decfsz	wreg,f,c
  3755   000D2C  D7FE               	bra	u2867
  3756   000D2E  2E2E               	decfsz	??_instructions^0,f,c
  3757   000D30  D7FC               	bra	u2867
  3758   000D32  2E2F               	decfsz	(??_instructions+1)^0,f,c
  3759   000D34  D7FA               	bra	u2867
  3760   000D36  F000               	nop	
  3761   000D38  C028  F01C         	movff	instructions@mL,left_45@mL
  3762   000D3C  C029  F01D         	movff	instructions@mL+1,left_45@mL+1
  3763   000D40  C02A  F01E         	movff	instructions@mR,left_45@mR
  3764   000D44  C02B  F01F         	movff	instructions@mR+1,left_45@mR+1
  3765   000D48  0E00               	movlw	0
  3766   000D4A  6E21               	movwf	(left_45@count+1)^0,c
  3767   000D4C  0E02               	movlw	2
  3768   000D4E  6E20               	movwf	left_45@count^0,c
  3769   000D50  C05B  F022         	movff	_left_timer,left_45@left_timer
  3770   000D54  C05C  F023         	movff	_left_timer+1,left_45@left_timer+1
  3771   000D58  EC7B  F009         	call	_left_45	;wreg free
  3772   000D5C  C028  F016         	movff	instructions@mL,stop@mL
  3773   000D60  C029  F017         	movff	instructions@mL+1,stop@mL+1
  3774   000D64  C02A  F018         	movff	instructions@mR,stop@mR
  3775   000D68  C02B  F019         	movff	instructions@mR+1,stop@mR+1
  3776   000D6C  EC9D  F00D         	call	_stop	;wreg free
  3777   000D70                     l2803:
  3778                           
  3779                           ;dc_motor.c: 278:     if (count == 6){right_45(mL,mR,3,right_timer); stop(mL,mR);}
  3780   000D70  0E06               	movlw	6
  3781   000D72  182C               	xorwf	instructions@count^0,w,c
  3782   000D74  102D               	iorwf	(instructions@count+1)^0,w,c
  3783   000D76  A4D8               	btfss	status,2,c
  3784   000D78  EFC0  F006         	goto	u1941
  3785   000D7C  EFC2  F006         	goto	u1940
  3786   000D80                     u1941:
  3787   000D80  EFDE  F006         	goto	l2807
  3788   000D84                     u1940:
  3789   000D84  C028  F01C         	movff	instructions@mL,right_45@mL
  3790   000D88  C029  F01D         	movff	instructions@mL+1,right_45@mL+1
  3791   000D8C  C02A  F01E         	movff	instructions@mR,right_45@mR
  3792   000D90  C02B  F01F         	movff	instructions@mR+1,right_45@mR+1
  3793   000D94  0E00               	movlw	0
  3794   000D96  6E21               	movwf	(right_45@count+1)^0,c
  3795   000D98  0E03               	movlw	3
  3796   000D9A  6E20               	movwf	right_45@count^0,c
  3797   000D9C  C059  F022         	movff	_right_timer,right_45@right_timer
  3798   000DA0  C05A  F023         	movff	_right_timer+1,right_45@right_timer+1
  3799   000DA4  ECB6  F00A         	call	_right_45	;wreg free
  3800   000DA8  C028  F016         	movff	instructions@mL,stop@mL
  3801   000DAC  C029  F017         	movff	instructions@mL+1,stop@mL+1
  3802   000DB0  C02A  F018         	movff	instructions@mR,stop@mR
  3803   000DB4  C02B  F019         	movff	instructions@mR+1,stop@mR+1
  3804   000DB8  EC9D  F00D         	call	_stop	;wreg free
  3805   000DBC                     l2807:
  3806                           
  3807                           ;dc_motor.c: 279:     if (count == 7){left_45(mL,mR,3,left_timer); stop(mL,mR);}
  3808   000DBC  0E07               	movlw	7
  3809   000DBE  182C               	xorwf	instructions@count^0,w,c
  3810   000DC0  102D               	iorwf	(instructions@count+1)^0,w,c
  3811   000DC2  A4D8               	btfss	status,2,c
  3812   000DC4  EFE6  F006         	goto	u1951
  3813   000DC8  EFE8  F006         	goto	u1950
  3814   000DCC                     u1951:
  3815   000DCC  EF04  F007         	goto	l357
  3816   000DD0                     u1950:
  3817   000DD0  C028  F01C         	movff	instructions@mL,left_45@mL
  3818   000DD4  C029  F01D         	movff	instructions@mL+1,left_45@mL+1
  3819   000DD8  C02A  F01E         	movff	instructions@mR,left_45@mR
  3820   000DDC  C02B  F01F         	movff	instructions@mR+1,left_45@mR+1
  3821   000DE0  0E00               	movlw	0
  3822   000DE2  6E21               	movwf	(left_45@count+1)^0,c
  3823   000DE4  0E03               	movlw	3
  3824   000DE6  6E20               	movwf	left_45@count^0,c
  3825   000DE8  C05B  F022         	movff	_left_timer,left_45@left_timer
  3826   000DEC  C05C  F023         	movff	_left_timer+1,left_45@left_timer+1
  3827   000DF0  EC7B  F009         	call	_left_45	;wreg free
  3828   000DF4  C028  F016         	movff	instructions@mL,stop@mL
  3829   000DF8  C029  F017         	movff	instructions@mL+1,stop@mL+1
  3830   000DFC  C02A  F018         	movff	instructions@mR,stop@mR
  3831   000E00  C02B  F019         	movff	instructions@mR+1,stop@mR+1
  3832   000E04  EC9D  F00D         	call	_stop	;wreg free
  3833   000E08                     l357:
  3834   000E08  0012               	return		;funcret
  3835   000E0A                     __end_of_instructions:
  3836                           	callstack 0
  3837                           
  3838 ;; *************** function _space *****************
  3839 ;; Defined at:
  3840 ;;		line 222 in file "dc_motor.c"
  3841 ;; Parameters:    Size  Location     Type
  3842 ;;  mL              2   27[COMRAM] PTR struct DC_motor
  3843 ;;		 -> motorL(9), 
  3844 ;;  mR              2   29[COMRAM] PTR struct DC_motor
  3845 ;;		 -> motorR(9), 
  3846 ;; Auto vars:     Size  Location     Type
  3847 ;;		None
  3848 ;; Return value:  Size  Location     Type
  3849 ;;                  1    wreg      void 
  3850 ;; Registers used:
  3851 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3852 ;; Tracked objects:
  3853 ;;		On entry : 0/0
  3854 ;;		On exit  : 0/0
  3855 ;;		Unchanged: 0/0
  3856 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3857 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3858 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3859 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3860 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3861 ;;Total ram usage:        6 bytes
  3862 ;; Hardware stack levels used: 1
  3863 ;; Hardware stack levels required when called: 4
  3864 ;; This function calls:
  3865 ;;		_setMotorPWM
  3866 ;;		_stop
  3867 ;; This function is called by:
  3868 ;;		_buggy_color_response
  3869 ;;		_instructions
  3870 ;; This function uses a non-reentrant model
  3871 ;;
  3872                           
  3873                           	psect	text21
  3874   0018BC                     __ptext21:
  3875                           	callstack 0
  3876   0018BC                     _space:
  3877                           	callstack 25
  3878   0018BC                     
  3879                           ;dc_motor.c: 222: void space(DC_motor *mL, DC_motor *mR);dc_motor.c: 223: {;dc_motor.c: 
      +                          224:     stop(mL,mR);
  3880   0018BC  C01C  F016         	movff	space@mL,stop@mL
  3881   0018C0  C01D  F017         	movff	space@mL+1,stop@mL+1
  3882   0018C4  C01E  F018         	movff	space@mR,stop@mR
  3883   0018C8  C01F  F019         	movff	space@mR+1,stop@mR+1
  3884   0018CC  EC9D  F00D         	call	_stop	;wreg free
  3885   0018D0                     
  3886                           ;dc_motor.c: 225:     LATHbits.LATH1 = 1;
  3887   0018D0  8280               	bsf	128,1,c	;volatile
  3888   0018D2                     
  3889                           ;dc_motor.c: 226:     mL-> direction = 0;
  3890   0018D2  EE20 F001          	lfsr	2,1
  3891   0018D6  501C               	movf	space@mL^0,w,c
  3892   0018D8  26D9               	addwf	fsr2l,f,c
  3893   0018DA  501D               	movf	(space@mL+1)^0,w,c
  3894   0018DC  22DA               	addwfc	fsr2h,f,c
  3895   0018DE  0E00               	movlw	0
  3896   0018E0  6EDF               	movwf	indf2,c
  3897   0018E2                     
  3898                           ;dc_motor.c: 227:     mR-> direction = 0;
  3899   0018E2  EE20 F001          	lfsr	2,1
  3900   0018E6  501E               	movf	space@mR^0,w,c
  3901   0018E8  26D9               	addwf	fsr2l,f,c
  3902   0018EA  501F               	movf	(space@mR+1)^0,w,c
  3903   0018EC  22DA               	addwfc	fsr2h,f,c
  3904   0018EE  0E00               	movlw	0
  3905   0018F0  6EDF               	movwf	indf2,c
  3906                           
  3907                           ;dc_motor.c: 228:     setMotorPWM(mR);
  3908   0018F2  C01E  F010         	movff	space@mR,setMotorPWM@m
  3909   0018F6  C01F  F011         	movff	space@mR+1,setMotorPWM@m+1
  3910   0018FA  ECC5  F008         	call	_setMotorPWM	;wreg free
  3911                           
  3912                           ;dc_motor.c: 229:     setMotorPWM(mL);
  3913   0018FE  C01C  F010         	movff	space@mL,setMotorPWM@m
  3914   001902  C01D  F011         	movff	space@mL+1,setMotorPWM@m+1
  3915   001906  ECC5  F008         	call	_setMotorPWM	;wreg free
  3916                           
  3917                           ;dc_motor.c: 230:     while ((mL->power <30) && (mR->power <30)){
  3918   00190A  EFA3  F00C         	goto	l2519
  3919   00190E                     l2511:
  3920                           
  3921                           ;dc_motor.c: 231:         mL->power += 10;
  3922   00190E  C01C  FFD9         	movff	space@mL,fsr2l
  3923   001912  C01D  FFDA         	movff	space@mL+1,fsr2h
  3924   001916  0E0A               	movlw	10
  3925   001918  26DF               	addwf	indf2,f,c
  3926                           
  3927                           ;dc_motor.c: 232:         mR->power += 10;
  3928   00191A  C01E  FFD9         	movff	space@mR,fsr2l
  3929   00191E  C01F  FFDA         	movff	space@mR+1,fsr2h
  3930   001922  0E0A               	movlw	10
  3931   001924  26DF               	addwf	indf2,f,c
  3932   001926                     
  3933                           ;dc_motor.c: 233:         setMotorPWM(mL);
  3934   001926  C01C  F010         	movff	space@mL,setMotorPWM@m
  3935   00192A  C01D  F011         	movff	space@mL+1,setMotorPWM@m+1
  3936   00192E  ECC5  F008         	call	_setMotorPWM	;wreg free
  3937   001932                     
  3938                           ;dc_motor.c: 234:         setMotorPWM(mR);
  3939   001932  C01E  F010         	movff	space@mR,setMotorPWM@m
  3940   001936  C01F  F011         	movff	space@mR+1,setMotorPWM@m+1
  3941   00193A  ECC5  F008         	call	_setMotorPWM	;wreg free
  3942   00193E                     
  3943                           ;dc_motor.c: 235:         _delay((unsigned long)((20)*(64000000/4000000.0)));
  3944   00193E  0E6A               	movlw	106
  3945   001940                     u2877:
  3946   001940  2EE8               	decfsz	wreg,f,c
  3947   001942  D7FE               	bra	u2877
  3948   001944  D000               	nop2	
  3949   001946                     l2519:
  3950                           
  3951                           ;dc_motor.c: 230:     while ((mL->power <30) && (mR->power <30)){
  3952   001946  C01C  FFD9         	movff	space@mL,fsr2l
  3953   00194A  C01D  FFDA         	movff	space@mL+1,fsr2h
  3954   00194E  0E1E               	movlw	30
  3955   001950  60DF               	cpfslt	indf2,c
  3956   001952  EFAD  F00C         	goto	u1461
  3957   001956  EFAF  F00C         	goto	u1460
  3958   00195A                     u1461:
  3959   00195A  EFBB  F00C         	goto	l2523
  3960   00195E                     u1460:
  3961   00195E  C01E  FFD9         	movff	space@mR,fsr2l
  3962   001962  C01F  FFDA         	movff	space@mR+1,fsr2h
  3963   001966  0E1D               	movlw	29
  3964   001968  64DF               	cpfsgt	indf2,c
  3965   00196A  EFB9  F00C         	goto	u1471
  3966   00196E  EFBB  F00C         	goto	u1470
  3967   001972                     u1471:
  3968   001972  EF87  F00C         	goto	l2511
  3969   001976                     u1470:
  3970   001976                     l2523:
  3971                           
  3972                           ;dc_motor.c: 237:     _delay((unsigned long)((250)*(64000000/4000.0)));
  3973   001976  0E15               	movlw	21
  3974   001978  6E21               	movwf	(??_space+1)^0,c
  3975   00197A  0E4B               	movlw	75
  3976   00197C  6E20               	movwf	??_space^0,c
  3977   00197E  0EBE               	movlw	190
  3978   001980                     u2887:
  3979   001980  2EE8               	decfsz	wreg,f,c
  3980   001982  D7FE               	bra	u2887
  3981   001984  2E20               	decfsz	??_space^0,f,c
  3982   001986  D7FC               	bra	u2887
  3983   001988  2E21               	decfsz	(??_space+1)^0,f,c
  3984   00198A  D7FA               	bra	u2887
  3985   00198C  D000               	nop2	
  3986   00198E                     
  3987                           ;dc_motor.c: 238:     stop(mL,mR);
  3988   00198E  C01C  F016         	movff	space@mL,stop@mL
  3989   001992  C01D  F017         	movff	space@mL+1,stop@mL+1
  3990   001996  C01E  F018         	movff	space@mR,stop@mR
  3991   00199A  C01F  F019         	movff	space@mR+1,stop@mR+1
  3992   00199E  EC9D  F00D         	call	_stop	;wreg free
  3993   0019A2                     
  3994                           ;dc_motor.c: 239:     _delay((unsigned long)((200)*(64000000/4000.0)));
  3995   0019A2  0E11               	movlw	17
  3996   0019A4  6E21               	movwf	(??_space+1)^0,c
  3997   0019A6  0E3C               	movlw	60
  3998   0019A8  6E20               	movwf	??_space^0,c
  3999   0019AA  0ECB               	movlw	203
  4000   0019AC                     u2897:
  4001   0019AC  2EE8               	decfsz	wreg,f,c
  4002   0019AE  D7FE               	bra	u2897
  4003   0019B0  2E20               	decfsz	??_space^0,f,c
  4004   0019B2  D7FC               	bra	u2897
  4005   0019B4  2E21               	decfsz	(??_space+1)^0,f,c
  4006   0019B6  D7FA               	bra	u2897
  4007   0019B8  F000               	nop	
  4008   0019BA                     
  4009                           ;dc_motor.c: 240:     LATHbits.LATH1 = 0;
  4010   0019BA  9280               	bcf	128,1,c	;volatile
  4011   0019BC  0012               	return		;funcret
  4012   0019BE                     __end_of_space:
  4013                           	callstack 0
  4014                           
  4015 ;; *************** function _right_45 *****************
  4016 ;; Defined at:
  4017 ;;		line 201 in file "dc_motor.c"
  4018 ;; Parameters:    Size  Location     Type
  4019 ;;  mL              2   27[COMRAM] PTR struct DC_motor
  4020 ;;		 -> motorL(9), 
  4021 ;;  mR              2   29[COMRAM] PTR struct DC_motor
  4022 ;;		 -> motorR(9), 
  4023 ;;  count           2   31[COMRAM] int 
  4024 ;;  right_timer     2   33[COMRAM] int 
  4025 ;; Auto vars:     Size  Location     Type
  4026 ;;  i               2   37[COMRAM] int 
  4027 ;; Return value:  Size  Location     Type
  4028 ;;                  1    wreg      void 
  4029 ;; Registers used:
  4030 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4031 ;; Tracked objects:
  4032 ;;		On entry : 0/0
  4033 ;;		On exit  : 0/0
  4034 ;;		Unchanged: 0/0
  4035 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4036 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4037 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4038 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4039 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4040 ;;Total ram usage:       12 bytes
  4041 ;; Hardware stack levels used: 1
  4042 ;; Hardware stack levels required when called: 4
  4043 ;; This function calls:
  4044 ;;		_custom_delay
  4045 ;;		_setMotorPWM
  4046 ;;		_stop
  4047 ;; This function is called by:
  4048 ;;		_reverse_pink
  4049 ;;		_instructions
  4050 ;;		_instructions2
  4051 ;;		_right_turn_calibration
  4052 ;; This function uses a non-reentrant model
  4053 ;;
  4054                           
  4055                           	psect	text22
  4056   00156C                     __ptext22:
  4057                           	callstack 0
  4058   00156C                     _right_45:
  4059                           	callstack 23
  4060   00156C                     
  4061                           ;dc_motor.c: 201: void right_45(DC_motor *mL, DC_motor *mR, int count, int right_timer);
      +                          dc_motor.c: 202: {;dc_motor.c: 203:     mL-> direction = 1;
  4062   00156C  EE20 F001          	lfsr	2,1
  4063   001570  501C               	movf	right_45@mL^0,w,c
  4064   001572  26D9               	addwf	fsr2l,f,c
  4065   001574  501D               	movf	(right_45@mL+1)^0,w,c
  4066   001576  22DA               	addwfc	fsr2h,f,c
  4067   001578  0E01               	movlw	1
  4068   00157A  6EDF               	movwf	indf2,c
  4069                           
  4070                           ;dc_motor.c: 204:     mR-> direction = 0;
  4071   00157C  EE20 F001          	lfsr	2,1
  4072   001580  501E               	movf	right_45@mR^0,w,c
  4073   001582  26D9               	addwf	fsr2l,f,c
  4074   001584  501F               	movf	(right_45@mR+1)^0,w,c
  4075   001586  22DA               	addwfc	fsr2h,f,c
  4076   001588  0E00               	movlw	0
  4077   00158A  6EDF               	movwf	indf2,c
  4078   00158C                     
  4079                           ;dc_motor.c: 205:     LATHbits.LATH0 = 1;
  4080   00158C  8080               	bsf	128,0,c	;volatile
  4081   00158E                     
  4082                           ;dc_motor.c: 206:     int i;;dc_motor.c: 207:     for (i = 0;i<count;i++){
  4083   00158E  0E00               	movlw	0
  4084   001590  6E27               	movwf	(right_45@i+1)^0,c
  4085   001592  0E00               	movlw	0
  4086   001594  6E26               	movwf	right_45@i^0,c
  4087   001596  EF3A  F00B         	goto	l2397
  4088   00159A                     l2369:
  4089                           
  4090                           ;dc_motor.c: 209:         if (mL->power <= 50){mL->power += 10;}
  4091   00159A  C01C  FFD9         	movff	right_45@mL,fsr2l
  4092   00159E  C01D  FFDA         	movff	right_45@mL+1,fsr2h
  4093   0015A2  0E33               	movlw	51
  4094   0015A4  60DF               	cpfslt	indf2,c
  4095   0015A6  EFD7  F00A         	goto	u1371
  4096   0015AA  EFD9  F00A         	goto	u1370
  4097   0015AE                     u1371:
  4098   0015AE  EFDF  F00A         	goto	l2373
  4099   0015B2                     u1370:
  4100   0015B2  C01C  FFD9         	movff	right_45@mL,fsr2l
  4101   0015B6  C01D  FFDA         	movff	right_45@mL+1,fsr2h
  4102   0015BA  0E0A               	movlw	10
  4103   0015BC  26DF               	addwf	indf2,f,c
  4104   0015BE                     l2373:
  4105                           
  4106                           ;dc_motor.c: 210:         if (mR->power <= 50){mR->power += 10;}
  4107   0015BE  C01E  FFD9         	movff	right_45@mR,fsr2l
  4108   0015C2  C01F  FFDA         	movff	right_45@mR+1,fsr2h
  4109   0015C6  0E33               	movlw	51
  4110   0015C8  60DF               	cpfslt	indf2,c
  4111   0015CA  EFE9  F00A         	goto	u1381
  4112   0015CE  EFEB  F00A         	goto	u1380
  4113   0015D2                     u1381:
  4114   0015D2  EFF1  F00A         	goto	l2377
  4115   0015D6                     u1380:
  4116   0015D6  C01E  FFD9         	movff	right_45@mR,fsr2l
  4117   0015DA  C01F  FFDA         	movff	right_45@mR+1,fsr2h
  4118   0015DE  0E0A               	movlw	10
  4119   0015E0  26DF               	addwf	indf2,f,c
  4120   0015E2                     l2377:
  4121                           
  4122                           ;dc_motor.c: 211:         setMotorPWM(mL);
  4123   0015E2  C01C  F010         	movff	right_45@mL,setMotorPWM@m
  4124   0015E6  C01D  F011         	movff	right_45@mL+1,setMotorPWM@m+1
  4125   0015EA  ECC5  F008         	call	_setMotorPWM	;wreg free
  4126   0015EE                     
  4127                           ;dc_motor.c: 212:         setMotorPWM(mR);
  4128   0015EE  C01E  F010         	movff	right_45@mR,setMotorPWM@m
  4129   0015F2  C01F  F011         	movff	right_45@mR+1,setMotorPWM@m+1
  4130   0015F6  ECC5  F008         	call	_setMotorPWM	;wreg free
  4131   0015FA                     
  4132                           ;dc_motor.c: 213:         _delay((unsigned long)((10)*(64000000/4000.0)));
  4133   0015FA  0ED0               	movlw	208
  4134   0015FC  6E24               	movwf	??_right_45^0,c
  4135   0015FE  0ECA               	movlw	202
  4136   001600                     u2907:
  4137   001600  2EE8               	decfsz	wreg,f,c
  4138   001602  D7FE               	bra	u2907
  4139   001604  2E24               	decfsz	??_right_45^0,f,c
  4140   001606  D7FC               	bra	u2907
  4141   001608                     l2383:
  4142                           
  4143                           ;dc_motor.c: 208:     while ((mL->power <= 50) || (mR->power <= 50)){
  4144   001608  C01C  FFD9         	movff	right_45@mL,fsr2l
  4145   00160C  C01D  FFDA         	movff	right_45@mL+1,fsr2h
  4146   001610  0E32               	movlw	50
  4147   001612  64DF               	cpfsgt	indf2,c
  4148   001614  EF0E  F00B         	goto	u1391
  4149   001618  EF10  F00B         	goto	u1390
  4150   00161C                     u1391:
  4151   00161C  EFCD  F00A         	goto	l2369
  4152   001620                     u1390:
  4153   001620  C01E  FFD9         	movff	right_45@mR,fsr2l
  4154   001624  C01F  FFDA         	movff	right_45@mR+1,fsr2h
  4155   001628  0E32               	movlw	50
  4156   00162A  64DF               	cpfsgt	indf2,c
  4157   00162C  EF1A  F00B         	goto	u1401
  4158   001630  EF1C  F00B         	goto	u1400
  4159   001634                     u1401:
  4160   001634  EFCD  F00A         	goto	l2369
  4161   001638                     u1400:
  4162   001638                     
  4163                           ;dc_motor.c: 215:     custom_delay(right_timer);
  4164   001638  C022  F003         	movff	right_45@right_timer,custom_delay@temp
  4165   00163C  C023  F004         	movff	right_45@right_timer+1,custom_delay@temp+1
  4166   001640  EC6E  F010         	call	_custom_delay	;wreg free
  4167   001644                     
  4168                           ;dc_motor.c: 216:     stop(mL,mR);
  4169   001644  C01C  F016         	movff	right_45@mL,stop@mL
  4170   001648  C01D  F017         	movff	right_45@mL+1,stop@mL+1
  4171   00164C  C01E  F018         	movff	right_45@mR,stop@mR
  4172   001650  C01F  F019         	movff	right_45@mR+1,stop@mR+1
  4173   001654  EC9D  F00D         	call	_stop	;wreg free
  4174   001658                     
  4175                           ;dc_motor.c: 217:     _delay((unsigned long)((150)*(64000000/4000.0)));
  4176   001658  0E0D               	movlw	13
  4177   00165A  6E25               	movwf	(??_right_45+1)^0,c
  4178   00165C  0E2D               	movlw	45
  4179   00165E  6E24               	movwf	??_right_45^0,c
  4180   001660  0ED8               	movlw	216
  4181   001662                     u2917:
  4182   001662  2EE8               	decfsz	wreg,f,c
  4183   001664  D7FE               	bra	u2917
  4184   001666  2E24               	decfsz	??_right_45^0,f,c
  4185   001668  D7FC               	bra	u2917
  4186   00166A  2E25               	decfsz	(??_right_45+1)^0,f,c
  4187   00166C  D7FA               	bra	u2917
  4188   00166E                     
  4189                           ;dc_motor.c: 218:     LATHbits.LATH0 = 0;
  4190   00166E  9080               	bcf	128,0,c	;volatile
  4191   001670                     
  4192                           ;dc_motor.c: 219: }
  4193   001670  4A26               	infsnz	right_45@i^0,f,c
  4194   001672  2A27               	incf	(right_45@i+1)^0,f,c
  4195   001674                     l2397:
  4196   001674  5020               	movf	right_45@count^0,w,c
  4197   001676  5C26               	subwf	right_45@i^0,w,c
  4198   001678  5027               	movf	(right_45@i+1)^0,w,c
  4199   00167A  0A80               	xorlw	128
  4200   00167C  6E24               	movwf	??_right_45^0,c
  4201   00167E  5021               	movf	(right_45@count+1)^0,w,c
  4202   001680  0A80               	xorlw	128
  4203   001682  5824               	subwfb	??_right_45^0,w,c
  4204   001684  A0D8               	btfss	status,0,c
  4205   001686  EF47  F00B         	goto	u1411
  4206   00168A  EF49  F00B         	goto	u1410
  4207   00168E                     u1411:
  4208   00168E  EF04  F00B         	goto	l2383
  4209   001692                     u1410:
  4210   001692  0012               	return		;funcret
  4211   001694                     __end_of_right_45:
  4212                           	callstack 0
  4213                           
  4214 ;; *************** function _reverse *****************
  4215 ;; Defined at:
  4216 ;;		line 137 in file "dc_motor.c"
  4217 ;; Parameters:    Size  Location     Type
  4218 ;;  mL              2   27[COMRAM] PTR struct DC_motor
  4219 ;;		 -> motorL(9), 
  4220 ;;  mR              2   29[COMRAM] PTR struct DC_motor
  4221 ;;		 -> motorR(9), 
  4222 ;; Auto vars:     Size  Location     Type
  4223 ;;		None
  4224 ;; Return value:  Size  Location     Type
  4225 ;;                  1    wreg      void 
  4226 ;; Registers used:
  4227 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4228 ;; Tracked objects:
  4229 ;;		On entry : 0/0
  4230 ;;		On exit  : 0/0
  4231 ;;		Unchanged: 0/0
  4232 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4233 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4234 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4235 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4236 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4237 ;;Total ram usage:        5 bytes
  4238 ;; Hardware stack levels used: 1
  4239 ;; Hardware stack levels required when called: 4
  4240 ;; This function calls:
  4241 ;;		_setMotorPWM
  4242 ;;		_stop
  4243 ;; This function is called by:
  4244 ;;		_return_home
  4245 ;;		_reverse_pink
  4246 ;;		_reverse_yellow
  4247 ;;		_instructions
  4248 ;; This function uses a non-reentrant model
  4249 ;;
  4250                           
  4251                           	psect	text23
  4252   001A7C                     __ptext23:
  4253                           	callstack 0
  4254   001A7C                     _reverse:
  4255                           	callstack 24
  4256   001A7C                     
  4257                           ;dc_motor.c: 137: void reverse(DC_motor *mL, DC_motor *mR);dc_motor.c: 138: {;dc_motor.c
      +                          : 139:     stop(mL,mR);
  4258   001A7C  C01C  F016         	movff	reverse@mL,stop@mL
  4259   001A80  C01D  F017         	movff	reverse@mL+1,stop@mL+1
  4260   001A84  C01E  F018         	movff	reverse@mR,stop@mR
  4261   001A88  C01F  F019         	movff	reverse@mR+1,stop@mR+1
  4262   001A8C  EC9D  F00D         	call	_stop	;wreg free
  4263   001A90                     
  4264                           ;dc_motor.c: 140:     mL-> direction = 0;
  4265   001A90  EE20 F001          	lfsr	2,1
  4266   001A94  501C               	movf	reverse@mL^0,w,c
  4267   001A96  26D9               	addwf	fsr2l,f,c
  4268   001A98  501D               	movf	(reverse@mL+1)^0,w,c
  4269   001A9A  22DA               	addwfc	fsr2h,f,c
  4270   001A9C  0E00               	movlw	0
  4271   001A9E  6EDF               	movwf	indf2,c
  4272   001AA0                     
  4273                           ;dc_motor.c: 141:     mR-> direction = 0;
  4274   001AA0  EE20 F001          	lfsr	2,1
  4275   001AA4  501E               	movf	reverse@mR^0,w,c
  4276   001AA6  26D9               	addwf	fsr2l,f,c
  4277   001AA8  501F               	movf	(reverse@mR+1)^0,w,c
  4278   001AAA  22DA               	addwfc	fsr2h,f,c
  4279   001AAC  0E00               	movlw	0
  4280   001AAE  6EDF               	movwf	indf2,c
  4281   001AB0                     
  4282                           ;dc_motor.c: 142:     LATHbits.LATH1 = 1;
  4283   001AB0  8280               	bsf	128,1,c	;volatile
  4284                           
  4285                           ;dc_motor.c: 143:     setMotorPWM(mR);
  4286   001AB2  C01E  F010         	movff	reverse@mR,setMotorPWM@m
  4287   001AB6  C01F  F011         	movff	reverse@mR+1,setMotorPWM@m+1
  4288   001ABA  ECC5  F008         	call	_setMotorPWM	;wreg free
  4289                           
  4290                           ;dc_motor.c: 144:     setMotorPWM(mL);
  4291   001ABE  C01C  F010         	movff	reverse@mL,setMotorPWM@m
  4292   001AC2  C01D  F011         	movff	reverse@mL+1,setMotorPWM@m+1
  4293   001AC6  ECC5  F008         	call	_setMotorPWM	;wreg free
  4294                           
  4295                           ;dc_motor.c: 145:     while ((mL->power <50) && (mR->power <55)){
  4296   001ACA  EF83  F00D         	goto	l2319
  4297   001ACE                     l2311:
  4298                           
  4299                           ;dc_motor.c: 146:         mL->power += 5;
  4300   001ACE  C01C  FFD9         	movff	reverse@mL,fsr2l
  4301   001AD2  C01D  FFDA         	movff	reverse@mL+1,fsr2h
  4302   001AD6  0E05               	movlw	5
  4303   001AD8  26DF               	addwf	indf2,f,c
  4304                           
  4305                           ;dc_motor.c: 147:         mR->power += 5;
  4306   001ADA  C01E  FFD9         	movff	reverse@mR,fsr2l
  4307   001ADE  C01F  FFDA         	movff	reverse@mR+1,fsr2h
  4308   001AE2  0E05               	movlw	5
  4309   001AE4  26DF               	addwf	indf2,f,c
  4310   001AE6                     
  4311                           ;dc_motor.c: 148:         setMotorPWM(mL);
  4312   001AE6  C01C  F010         	movff	reverse@mL,setMotorPWM@m
  4313   001AEA  C01D  F011         	movff	reverse@mL+1,setMotorPWM@m+1
  4314   001AEE  ECC5  F008         	call	_setMotorPWM	;wreg free
  4315   001AF2                     
  4316                           ;dc_motor.c: 149:         setMotorPWM(mR);
  4317   001AF2  C01E  F010         	movff	reverse@mR,setMotorPWM@m
  4318   001AF6  C01F  F011         	movff	reverse@mR+1,setMotorPWM@m+1
  4319   001AFA  ECC5  F008         	call	_setMotorPWM	;wreg free
  4320   001AFE                     
  4321                           ;dc_motor.c: 150:         _delay((unsigned long)((10)*(64000000/4000000.0)));
  4322   001AFE  0E35               	movlw	53
  4323   001B00                     u2927:
  4324   001B00  2EE8               	decfsz	wreg,f,c
  4325   001B02  D7FE               	bra	u2927
  4326   001B04  F000               	nop	
  4327   001B06                     l2319:
  4328                           
  4329                           ;dc_motor.c: 145:     while ((mL->power <50) && (mR->power <55)){
  4330   001B06  C01C  FFD9         	movff	reverse@mL,fsr2l
  4331   001B0A  C01D  FFDA         	movff	reverse@mL+1,fsr2h
  4332   001B0E  0E32               	movlw	50
  4333   001B10  60DF               	cpfslt	indf2,c
  4334   001B12  EF8D  F00D         	goto	u1301
  4335   001B16  EF8F  F00D         	goto	u1300
  4336   001B1A                     u1301:
  4337   001B1A  EF9B  F00D         	goto	l305
  4338   001B1E                     u1300:
  4339   001B1E  C01E  FFD9         	movff	reverse@mR,fsr2l
  4340   001B22  C01F  FFDA         	movff	reverse@mR+1,fsr2h
  4341   001B26  0E36               	movlw	54
  4342   001B28  64DF               	cpfsgt	indf2,c
  4343   001B2A  EF99  F00D         	goto	u1311
  4344   001B2E  EF9B  F00D         	goto	u1310
  4345   001B32                     u1311:
  4346   001B32  EF67  F00D         	goto	l2311
  4347   001B36                     u1310:
  4348   001B36                     l305:
  4349                           
  4350                           ;dc_motor.c: 152:     LATHbits.LATH1 = 0;
  4351   001B36  9280               	bcf	128,1,c	;volatile
  4352   001B38  0012               	return		;funcret
  4353   001B3A                     __end_of_reverse:
  4354                           	callstack 0
  4355                           
  4356 ;; *************** function _left_45 *****************
  4357 ;; Defined at:
  4358 ;;		line 178 in file "dc_motor.c"
  4359 ;; Parameters:    Size  Location     Type
  4360 ;;  mL              2   27[COMRAM] PTR struct DC_motor
  4361 ;;		 -> motorL(9), 
  4362 ;;  mR              2   29[COMRAM] PTR struct DC_motor
  4363 ;;		 -> motorR(9), 
  4364 ;;  count           2   31[COMRAM] int 
  4365 ;;  left_timer      2   33[COMRAM] int 
  4366 ;; Auto vars:     Size  Location     Type
  4367 ;;  i               2   37[COMRAM] int 
  4368 ;; Return value:  Size  Location     Type
  4369 ;;                  1    wreg      void 
  4370 ;; Registers used:
  4371 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4372 ;; Tracked objects:
  4373 ;;		On entry : 0/0
  4374 ;;		On exit  : 0/0
  4375 ;;		Unchanged: 0/0
  4376 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4377 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4378 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4379 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4380 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4381 ;;Total ram usage:       12 bytes
  4382 ;; Hardware stack levels used: 1
  4383 ;; Hardware stack levels required when called: 4
  4384 ;; This function calls:
  4385 ;;		_custom_delay
  4386 ;;		_setMotorPWM
  4387 ;;		_stop
  4388 ;; This function is called by:
  4389 ;;		_reverse_yellow
  4390 ;;		_instructions
  4391 ;;		_instructions2
  4392 ;;		_left_turn_calibration
  4393 ;; This function uses a non-reentrant model
  4394 ;;
  4395                           
  4396                           	psect	text24
  4397   0012F6                     __ptext24:
  4398                           	callstack 0
  4399   0012F6                     _left_45:
  4400                           	callstack 22
  4401   0012F6                     
  4402                           ;dc_motor.c: 178: void left_45(DC_motor *mL, DC_motor *mR, int count, int left_timer);dc
      +                          _motor.c: 179: {;dc_motor.c: 180:     stop(mL,mR);
  4403   0012F6  C01C  F016         	movff	left_45@mL,stop@mL
  4404   0012FA  C01D  F017         	movff	left_45@mL+1,stop@mL+1
  4405   0012FE  C01E  F018         	movff	left_45@mR,stop@mR
  4406   001302  C01F  F019         	movff	left_45@mR+1,stop@mR+1
  4407   001306  EC9D  F00D         	call	_stop	;wreg free
  4408   00130A                     
  4409                           ;dc_motor.c: 181:     mL-> direction = 0;
  4410   00130A  EE20 F001          	lfsr	2,1
  4411   00130E  501C               	movf	left_45@mL^0,w,c
  4412   001310  26D9               	addwf	fsr2l,f,c
  4413   001312  501D               	movf	(left_45@mL+1)^0,w,c
  4414   001314  22DA               	addwfc	fsr2h,f,c
  4415   001316  0E00               	movlw	0
  4416   001318  6EDF               	movwf	indf2,c
  4417   00131A                     
  4418                           ;dc_motor.c: 182:     mR-> direction = 1;
  4419   00131A  EE20 F001          	lfsr	2,1
  4420   00131E  501E               	movf	left_45@mR^0,w,c
  4421   001320  26D9               	addwf	fsr2l,f,c
  4422   001322  501F               	movf	(left_45@mR+1)^0,w,c
  4423   001324  22DA               	addwfc	fsr2h,f,c
  4424   001326  0E01               	movlw	1
  4425   001328  6EDF               	movwf	indf2,c
  4426   00132A                     
  4427                           ;dc_motor.c: 183:     LATFbits.LATF0 = 1;
  4428   00132A  807E               	bsf	126,0,c	;volatile
  4429   00132C                     
  4430                           ;dc_motor.c: 184:     int i;;dc_motor.c: 185:     for (i = 0;i<count;i++){
  4431   00132C  0E00               	movlw	0
  4432   00132E  6E27               	movwf	(left_45@i+1)^0,c
  4433   001330  0E00               	movlw	0
  4434   001332  6E26               	movwf	left_45@i^0,c
  4435   001334  EF09  F00A         	goto	l2361
  4436   001338                     l2333:
  4437                           
  4438                           ;dc_motor.c: 187:         if (mL->power <= 50){mL->power += 10;}
  4439   001338  C01C  FFD9         	movff	left_45@mL,fsr2l
  4440   00133C  C01D  FFDA         	movff	left_45@mL+1,fsr2h
  4441   001340  0E33               	movlw	51
  4442   001342  60DF               	cpfslt	indf2,c
  4443   001344  EFA6  F009         	goto	u1321
  4444   001348  EFA8  F009         	goto	u1320
  4445   00134C                     u1321:
  4446   00134C  EFAE  F009         	goto	l2337
  4447   001350                     u1320:
  4448   001350  C01C  FFD9         	movff	left_45@mL,fsr2l
  4449   001354  C01D  FFDA         	movff	left_45@mL+1,fsr2h
  4450   001358  0E0A               	movlw	10
  4451   00135A  26DF               	addwf	indf2,f,c
  4452   00135C                     l2337:
  4453                           
  4454                           ;dc_motor.c: 188:         if (mR->power <= 50){mR->power += 10;}
  4455   00135C  C01E  FFD9         	movff	left_45@mR,fsr2l
  4456   001360  C01F  FFDA         	movff	left_45@mR+1,fsr2h
  4457   001364  0E33               	movlw	51
  4458   001366  60DF               	cpfslt	indf2,c
  4459   001368  EFB8  F009         	goto	u1331
  4460   00136C  EFBA  F009         	goto	u1330
  4461   001370                     u1331:
  4462   001370  EFC0  F009         	goto	l2341
  4463   001374                     u1330:
  4464   001374  C01E  FFD9         	movff	left_45@mR,fsr2l
  4465   001378  C01F  FFDA         	movff	left_45@mR+1,fsr2h
  4466   00137C  0E0A               	movlw	10
  4467   00137E  26DF               	addwf	indf2,f,c
  4468   001380                     l2341:
  4469                           
  4470                           ;dc_motor.c: 189:         setMotorPWM(mL);
  4471   001380  C01C  F010         	movff	left_45@mL,setMotorPWM@m
  4472   001384  C01D  F011         	movff	left_45@mL+1,setMotorPWM@m+1
  4473   001388  ECC5  F008         	call	_setMotorPWM	;wreg free
  4474   00138C                     
  4475                           ;dc_motor.c: 190:         setMotorPWM(mR);
  4476   00138C  C01E  F010         	movff	left_45@mR,setMotorPWM@m
  4477   001390  C01F  F011         	movff	left_45@mR+1,setMotorPWM@m+1
  4478   001394  ECC5  F008         	call	_setMotorPWM	;wreg free
  4479   001398                     
  4480                           ;dc_motor.c: 191:         _delay((unsigned long)((10)*(64000000/4000.0)));
  4481   001398  0ED0               	movlw	208
  4482   00139A  6E24               	movwf	??_left_45^0,c
  4483   00139C  0ECA               	movlw	202
  4484   00139E                     u2937:
  4485   00139E  2EE8               	decfsz	wreg,f,c
  4486   0013A0  D7FE               	bra	u2937
  4487   0013A2  2E24               	decfsz	??_left_45^0,f,c
  4488   0013A4  D7FC               	bra	u2937
  4489   0013A6                     l2347:
  4490                           
  4491                           ;dc_motor.c: 186:     while ((mL->power <= 50) || (mR->power <= 50)){
  4492   0013A6  C01C  FFD9         	movff	left_45@mL,fsr2l
  4493   0013AA  C01D  FFDA         	movff	left_45@mL+1,fsr2h
  4494   0013AE  0E32               	movlw	50
  4495   0013B0  64DF               	cpfsgt	indf2,c
  4496   0013B2  EFDD  F009         	goto	u1341
  4497   0013B6  EFDF  F009         	goto	u1340
  4498   0013BA                     u1341:
  4499   0013BA  EF9C  F009         	goto	l2333
  4500   0013BE                     u1340:
  4501   0013BE  C01E  FFD9         	movff	left_45@mR,fsr2l
  4502   0013C2  C01F  FFDA         	movff	left_45@mR+1,fsr2h
  4503   0013C6  0E32               	movlw	50
  4504   0013C8  64DF               	cpfsgt	indf2,c
  4505   0013CA  EFE9  F009         	goto	u1351
  4506   0013CE  EFEB  F009         	goto	u1350
  4507   0013D2                     u1351:
  4508   0013D2  EF9C  F009         	goto	l2333
  4509   0013D6                     u1350:
  4510   0013D6                     
  4511                           ;dc_motor.c: 193:     custom_delay(left_timer);
  4512   0013D6  C022  F003         	movff	left_45@left_timer,custom_delay@temp
  4513   0013DA  C023  F004         	movff	left_45@left_timer+1,custom_delay@temp+1
  4514   0013DE  EC6E  F010         	call	_custom_delay	;wreg free
  4515   0013E2                     
  4516                           ;dc_motor.c: 194:     stop(mL,mR);
  4517   0013E2  C01C  F016         	movff	left_45@mL,stop@mL
  4518   0013E6  C01D  F017         	movff	left_45@mL+1,stop@mL+1
  4519   0013EA  C01E  F018         	movff	left_45@mR,stop@mR
  4520   0013EE  C01F  F019         	movff	left_45@mR+1,stop@mR+1
  4521   0013F2  EC9D  F00D         	call	_stop	;wreg free
  4522   0013F6                     
  4523                           ;dc_motor.c: 195:     _delay((unsigned long)((150)*(64000000/4000.0)));
  4524   0013F6  0E0D               	movlw	13
  4525   0013F8  6E25               	movwf	(??_left_45+1)^0,c
  4526   0013FA  0E2D               	movlw	45
  4527   0013FC  6E24               	movwf	??_left_45^0,c
  4528   0013FE  0ED8               	movlw	216
  4529   001400                     u2947:
  4530   001400  2EE8               	decfsz	wreg,f,c
  4531   001402  D7FE               	bra	u2947
  4532   001404  2E24               	decfsz	??_left_45^0,f,c
  4533   001406  D7FC               	bra	u2947
  4534   001408  2E25               	decfsz	(??_left_45+1)^0,f,c
  4535   00140A  D7FA               	bra	u2947
  4536   00140C                     
  4537                           ;dc_motor.c: 196:     LATFbits.LATF0 = 0;
  4538   00140C  907E               	bcf	126,0,c	;volatile
  4539   00140E                     
  4540                           ;dc_motor.c: 197:     }
  4541   00140E  4A26               	infsnz	left_45@i^0,f,c
  4542   001410  2A27               	incf	(left_45@i+1)^0,f,c
  4543   001412                     l2361:
  4544   001412  5020               	movf	left_45@count^0,w,c
  4545   001414  5C26               	subwf	left_45@i^0,w,c
  4546   001416  5027               	movf	(left_45@i+1)^0,w,c
  4547   001418  0A80               	xorlw	128
  4548   00141A  6E24               	movwf	??_left_45^0,c
  4549   00141C  5021               	movf	(left_45@count+1)^0,w,c
  4550   00141E  0A80               	xorlw	128
  4551   001420  5824               	subwfb	??_left_45^0,w,c
  4552   001422  A0D8               	btfss	status,0,c
  4553   001424  EF16  F00A         	goto	u1361
  4554   001428  EF18  F00A         	goto	u1360
  4555   00142C                     u1361:
  4556   00142C  EFD3  F009         	goto	l2347
  4557   001430                     u1360:
  4558   001430  0012               	return		;funcret
  4559   001432                     __end_of_left_45:
  4560                           	callstack 0
  4561                           
  4562 ;; *************** function _stop *****************
  4563 ;; Defined at:
  4564 ;;		line 156 in file "dc_motor.c"
  4565 ;; Parameters:    Size  Location     Type
  4566 ;;  mL              2   21[COMRAM] PTR struct DC_motor
  4567 ;;		 -> motorL(9), 
  4568 ;;  mR              2   23[COMRAM] PTR struct DC_motor
  4569 ;;		 -> motorR(9), 
  4570 ;; Auto vars:     Size  Location     Type
  4571 ;;  i               2   25[COMRAM] int 
  4572 ;; Return value:  Size  Location     Type
  4573 ;;                  1    wreg      void 
  4574 ;; Registers used:
  4575 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4576 ;; Tracked objects:
  4577 ;;		On entry : 0/0
  4578 ;;		On exit  : 0/0
  4579 ;;		Unchanged: 0/0
  4580 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4581 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4582 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4583 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4584 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4585 ;;Total ram usage:        6 bytes
  4586 ;; Hardware stack levels used: 1
  4587 ;; Hardware stack levels required when called: 3
  4588 ;; This function calls:
  4589 ;;		_setMotorPWM
  4590 ;; This function is called by:
  4591 ;;		_buggy_color_response
  4592 ;;		_return_home
  4593 ;;		_forward
  4594 ;;		_reverse
  4595 ;;		_left_45
  4596 ;;		_right_45
  4597 ;;		_space
  4598 ;;		_reverse_pink
  4599 ;;		_reverse_yellow
  4600 ;;		_instructions
  4601 ;;		_instructions2
  4602 ;; This function uses a non-reentrant model
  4603 ;;
  4604                           
  4605                           	psect	text25
  4606   001B3A                     __ptext25:
  4607                           	callstack 0
  4608   001B3A                     _stop:
  4609                           	callstack 26
  4610   001B3A                     
  4611                           ;dc_motor.c: 156: void stop(DC_motor *mL, DC_motor *mR);dc_motor.c: 157: {;dc_motor.c: 1
      +                          58:     mL->brakemode = 1;
  4612   001B3A  EE20 F002          	lfsr	2,2
  4613   001B3E  5016               	movf	stop@mL^0,w,c
  4614   001B40  26D9               	addwf	fsr2l,f,c
  4615   001B42  5017               	movf	(stop@mL+1)^0,w,c
  4616   001B44  22DA               	addwfc	fsr2h,f,c
  4617   001B46  0E01               	movlw	1
  4618   001B48  6EDF               	movwf	indf2,c
  4619                           
  4620                           ;dc_motor.c: 159:     mR->brakemode = 1;
  4621   001B4A  EE20 F002          	lfsr	2,2
  4622   001B4E  5018               	movf	stop@mR^0,w,c
  4623   001B50  26D9               	addwf	fsr2l,f,c
  4624   001B52  5019               	movf	(stop@mR+1)^0,w,c
  4625   001B54  22DA               	addwfc	fsr2h,f,c
  4626   001B56  0E01               	movlw	1
  4627   001B58  6EDF               	movwf	indf2,c
  4628   001B5A                     
  4629                           ;dc_motor.c: 160:     LATDbits.LATD4 = 1;
  4630   001B5A  887C               	bsf	124,4,c	;volatile
  4631   001B5C                     
  4632                           ;dc_motor.c: 162:     for (int i = 70; i >= 0; i=i-10) {
  4633   001B5C  0E00               	movlw	0
  4634   001B5E  6E1B               	movwf	(stop@i+1)^0,c
  4635   001B60  0E46               	movlw	70
  4636   001B62  6E1A               	movwf	stop@i^0,c
  4637   001B64                     l2273:
  4638                           
  4639                           ;dc_motor.c: 163:         mL -> power = i;
  4640   001B64  C016  FFD9         	movff	stop@mL,fsr2l
  4641   001B68  C017  FFDA         	movff	stop@mL+1,fsr2h
  4642   001B6C  C01A  FFDF         	movff	stop@i,indf2
  4643                           
  4644                           ;dc_motor.c: 164:         mR -> power = i;
  4645   001B70  C018  FFD9         	movff	stop@mR,fsr2l
  4646   001B74  C019  FFDA         	movff	stop@mR+1,fsr2h
  4647   001B78  C01A  FFDF         	movff	stop@i,indf2
  4648   001B7C                     
  4649                           ;dc_motor.c: 165:         setMotorPWM(mL);
  4650   001B7C  C016  F010         	movff	stop@mL,setMotorPWM@m
  4651   001B80  C017  F011         	movff	stop@mL+1,setMotorPWM@m+1
  4652   001B84  ECC5  F008         	call	_setMotorPWM	;wreg free
  4653   001B88                     
  4654                           ;dc_motor.c: 166:         setMotorPWM(mR);
  4655   001B88  C018  F010         	movff	stop@mR,setMotorPWM@m
  4656   001B8C  C019  F011         	movff	stop@mR+1,setMotorPWM@m+1
  4657   001B90  ECC5  F008         	call	_setMotorPWM	;wreg free
  4658   001B94                     
  4659                           ;dc_motor.c: 167:         _delay((unsigned long)((20)*(64000000/4000000.0)));
  4660   001B94  0E6A               	movlw	106
  4661   001B96                     u2957:
  4662   001B96  2EE8               	decfsz	wreg,f,c
  4663   001B98  D7FE               	bra	u2957
  4664   001B9A  D000               	nop2	
  4665   001B9C                     
  4666                           ;dc_motor.c: 168:     }
  4667   001B9C  0EF6               	movlw	246
  4668   001B9E  241A               	addwf	stop@i^0,w,c
  4669   001BA0  6E1A               	movwf	stop@i^0,c
  4670   001BA2  0EFF               	movlw	255
  4671   001BA4  201B               	addwfc	(stop@i+1)^0,w,c
  4672   001BA6  6E1B               	movwf	(stop@i+1)^0,c
  4673   001BA8  BE1B               	btfsc	(stop@i+1)^0,7,c
  4674   001BAA  EFDB  F00D         	goto	u1260
  4675   001BAE  EFD9  F00D         	goto	u1261
  4676   001BB2                     u1261:
  4677   001BB2  EFB2  F00D         	goto	l2273
  4678   001BB6                     u1260:
  4679   001BB6                     
  4680                           ;dc_motor.c: 170:     mL->power = 0;
  4681   001BB6  C016  FFD9         	movff	stop@mL,fsr2l
  4682   001BBA  C017  FFDA         	movff	stop@mL+1,fsr2h
  4683   001BBE  0E00               	movlw	0
  4684   001BC0  6EDF               	movwf	indf2,c
  4685                           
  4686                           ;dc_motor.c: 171:     mR->power = 0;
  4687   001BC2  C018  FFD9         	movff	stop@mR,fsr2l
  4688   001BC6  C019  FFDA         	movff	stop@mR+1,fsr2h
  4689   001BCA  0E00               	movlw	0
  4690   001BCC  6EDF               	movwf	indf2,c
  4691   001BCE                     
  4692                           ;dc_motor.c: 172:     setMotorPWM(mL);
  4693   001BCE  C016  F010         	movff	stop@mL,setMotorPWM@m
  4694   001BD2  C017  F011         	movff	stop@mL+1,setMotorPWM@m+1
  4695   001BD6  ECC5  F008         	call	_setMotorPWM	;wreg free
  4696   001BDA                     
  4697                           ;dc_motor.c: 173:     setMotorPWM(mR);
  4698   001BDA  C018  F010         	movff	stop@mR,setMotorPWM@m
  4699   001BDE  C019  F011         	movff	stop@mR+1,setMotorPWM@m+1
  4700   001BE2  ECC5  F008         	call	_setMotorPWM	;wreg free
  4701   001BE6                     
  4702                           ;dc_motor.c: 174:     LATDbits.LATD4 = 0;
  4703   001BE6  987C               	bcf	124,4,c	;volatile
  4704   001BE8  0012               	return		;funcret
  4705   001BEA                     __end_of_stop:
  4706                           	callstack 0
  4707                           
  4708 ;; *************** function _setMotorPWM *****************
  4709 ;; Defined at:
  4710 ;;		line 76 in file "dc_motor.c"
  4711 ;; Parameters:    Size  Location     Type
  4712 ;;  m               2   15[COMRAM] PTR struct DC_motor
  4713 ;;		 -> motorR(9), motorL(9), 
  4714 ;; Auto vars:     Size  Location     Type
  4715 ;;  negDuty         1   20[COMRAM] unsigned char 
  4716 ;;  posDuty         1   19[COMRAM] unsigned char 
  4717 ;; Return value:  Size  Location     Type
  4718 ;;                  1    wreg      void 
  4719 ;; Registers used:
  4720 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4721 ;; Tracked objects:
  4722 ;;		On entry : 0/0
  4723 ;;		On exit  : 0/0
  4724 ;;		Unchanged: 0/0
  4725 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4726 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4727 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4728 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4729 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4730 ;;Total ram usage:        6 bytes
  4731 ;; Hardware stack levels used: 1
  4732 ;; Hardware stack levels required when called: 2
  4733 ;; This function calls:
  4734 ;;		___lwdiv
  4735 ;;		___wmul
  4736 ;; This function is called by:
  4737 ;;		_forward
  4738 ;;		_reverse
  4739 ;;		_stop
  4740 ;;		_left_45
  4741 ;;		_right_45
  4742 ;;		_space
  4743 ;; This function uses a non-reentrant model
  4744 ;;
  4745                           
  4746                           	psect	text26
  4747   00118A                     __ptext26:
  4748                           	callstack 0
  4749   00118A                     _setMotorPWM:
  4750                           	callstack 26
  4751   00118A                     
  4752                           ;dc_motor.c: 76: void setMotorPWM(DC_motor *m);dc_motor.c: 77: {;dc_motor.c: 78:     uns
      +                          igned char posDuty, negDuty;;dc_motor.c: 80:     if(m->brakemode) {
  4753   00118A  EE20 F002          	lfsr	2,2
  4754   00118E  5010               	movf	setMotorPWM@m^0,w,c
  4755   001190  26D9               	addwf	fsr2l,f,c
  4756   001192  5011               	movf	(setMotorPWM@m+1)^0,w,c
  4757   001194  22DA               	addwfc	fsr2h,f,c
  4758   001196  50DF               	movf	indf2,w,c
  4759   001198  B4D8               	btfsc	status,2,c
  4760   00119A  EFD1  F008         	goto	u1241
  4761   00119E  EFD3  F008         	goto	u1240
  4762   0011A2                     u1241:
  4763   0011A2  EF07  F009         	goto	l2253
  4764   0011A6                     u1240:
  4765   0011A6                     
  4766                           ;dc_motor.c: 81:         posDuty = m->PWMperiod - ((unsigned int)(m->power)*(m->PWMperio
      +                          d))/100;
  4767   0011A6  C010  FFD9         	movff	setMotorPWM@m,fsr2l
  4768   0011AA  C011  FFDA         	movff	setMotorPWM@m+1,fsr2h
  4769   0011AE  50DF               	movf	indf2,w,c
  4770   0011B0  6E12               	movwf	??_setMotorPWM^0,c
  4771   0011B2  5012               	movf	??_setMotorPWM^0,w,c
  4772   0011B4  6E03               	movwf	___wmul@multiplier^0,c
  4773   0011B6  6A04               	clrf	(___wmul@multiplier+1)^0,c
  4774   0011B8  EE20 F003          	lfsr	2,3
  4775   0011BC  5010               	movf	setMotorPWM@m^0,w,c
  4776   0011BE  26D9               	addwf	fsr2l,f,c
  4777   0011C0  5011               	movf	(setMotorPWM@m+1)^0,w,c
  4778   0011C2  22DA               	addwfc	fsr2h,f,c
  4779   0011C4  CFDE F005          	movff	postinc2,___wmul@multiplicand
  4780   0011C8  CFDD F006          	movff	postdec2,___wmul@multiplicand+1
  4781   0011CC  ECF0  F010         	call	___wmul	;wreg free
  4782   0011D0  C003  F009         	movff	?___wmul,___lwdiv@dividend
  4783   0011D4  C004  F00A         	movff	?___wmul+1,___lwdiv@dividend+1
  4784   0011D8  0E00               	movlw	0
  4785   0011DA  6E0C               	movwf	(___lwdiv@divisor+1)^0,c
  4786   0011DC  0E64               	movlw	100
  4787   0011DE  6E0B               	movwf	___lwdiv@divisor^0,c
  4788   0011E0  ECCF  F00E         	call	___lwdiv	;wreg free
  4789   0011E4  EE20 F003          	lfsr	2,3
  4790   0011E8  5010               	movf	setMotorPWM@m^0,w,c
  4791   0011EA  26D9               	addwf	fsr2l,f,c
  4792   0011EC  5011               	movf	(setMotorPWM@m+1)^0,w,c
  4793   0011EE  22DA               	addwfc	fsr2h,f,c
  4794   0011F0  50DF               	movf	indf2,w,c
  4795   0011F2  6E13               	movwf	(??_setMotorPWM+1)^0,c
  4796   0011F4  5009               	movf	?___lwdiv^0,w,c
  4797   0011F6  5C13               	subwf	(??_setMotorPWM+1)^0,w,c
  4798   0011F8  6E14               	movwf	setMotorPWM@posDuty^0,c
  4799   0011FA                     
  4800                           ;dc_motor.c: 82:         negDuty = m->PWMperiod;
  4801   0011FA  EE20 F003          	lfsr	2,3
  4802   0011FE  5010               	movf	setMotorPWM@m^0,w,c
  4803   001200  26D9               	addwf	fsr2l,f,c
  4804   001202  5011               	movf	(setMotorPWM@m+1)^0,w,c
  4805   001204  22DA               	addwfc	fsr2h,f,c
  4806   001206  50DF               	movf	indf2,w,c
  4807   001208  6E15               	movwf	setMotorPWM@negDuty^0,c
  4808                           
  4809                           ;dc_motor.c: 83:     }
  4810   00120A  EF2A  F009         	goto	l2257
  4811   00120E                     l2253:
  4812                           
  4813                           ;dc_motor.c: 85:         posDuty=0;
  4814   00120E  0E00               	movlw	0
  4815   001210  6E14               	movwf	setMotorPWM@posDuty^0,c
  4816   001212                     
  4817                           ;dc_motor.c: 86:   negDuty=((unsigned int)(m->power)*(m->PWMperiod))/100;
  4818   001212  C010  FFD9         	movff	setMotorPWM@m,fsr2l
  4819   001216  C011  FFDA         	movff	setMotorPWM@m+1,fsr2h
  4820   00121A  50DF               	movf	indf2,w,c
  4821   00121C  6E12               	movwf	??_setMotorPWM^0,c
  4822   00121E  5012               	movf	??_setMotorPWM^0,w,c
  4823   001220  6E03               	movwf	___wmul@multiplier^0,c
  4824   001222  6A04               	clrf	(___wmul@multiplier+1)^0,c
  4825   001224  EE20 F003          	lfsr	2,3
  4826   001228  5010               	movf	setMotorPWM@m^0,w,c
  4827   00122A  26D9               	addwf	fsr2l,f,c
  4828   00122C  5011               	movf	(setMotorPWM@m+1)^0,w,c
  4829   00122E  22DA               	addwfc	fsr2h,f,c
  4830   001230  CFDE F005          	movff	postinc2,___wmul@multiplicand
  4831   001234  CFDD F006          	movff	postdec2,___wmul@multiplicand+1
  4832   001238  ECF0  F010         	call	___wmul	;wreg free
  4833   00123C  C003  F009         	movff	?___wmul,___lwdiv@dividend
  4834   001240  C004  F00A         	movff	?___wmul+1,___lwdiv@dividend+1
  4835   001244  0E00               	movlw	0
  4836   001246  6E0C               	movwf	(___lwdiv@divisor+1)^0,c
  4837   001248  0E64               	movlw	100
  4838   00124A  6E0B               	movwf	___lwdiv@divisor^0,c
  4839   00124C  ECCF  F00E         	call	___lwdiv	;wreg free
  4840   001250  5009               	movf	?___lwdiv^0,w,c
  4841   001252  6E15               	movwf	setMotorPWM@negDuty^0,c
  4842   001254                     l2257:
  4843                           
  4844                           ;dc_motor.c: 89:     if (m->direction) {
  4845   001254  EE20 F001          	lfsr	2,1
  4846   001258  5010               	movf	setMotorPWM@m^0,w,c
  4847   00125A  26D9               	addwf	fsr2l,f,c
  4848   00125C  5011               	movf	(setMotorPWM@m+1)^0,w,c
  4849   00125E  22DA               	addwfc	fsr2h,f,c
  4850   001260  50DF               	movf	indf2,w,c
  4851   001262  B4D8               	btfsc	status,2,c
  4852   001264  EF36  F009         	goto	u1251
  4853   001268  EF38  F009         	goto	u1250
  4854   00126C                     u1251:
  4855   00126C  EF5A  F009         	goto	l2261
  4856   001270                     u1250:
  4857   001270                     
  4858                           ;dc_motor.c: 90:         *(m->posDutyHighByte)= posDuty;
  4859   001270  EE20 F005          	lfsr	2,5
  4860   001274  5010               	movf	setMotorPWM@m^0,w,c
  4861   001276  26D9               	addwf	fsr2l,f,c
  4862   001278  5011               	movf	(setMotorPWM@m+1)^0,w,c
  4863   00127A  22DA               	addwfc	fsr2h,f,c
  4864   00127C  CFDE F012          	movff	postinc2,??_setMotorPWM
  4865   001280  CFDD F013          	movff	postdec2,??_setMotorPWM+1
  4866   001284  C012  FFD9         	movff	??_setMotorPWM,fsr2l
  4867   001288  C013  FFDA         	movff	??_setMotorPWM+1,fsr2h
  4868   00128C  C014  FFDF         	movff	setMotorPWM@posDuty,indf2
  4869                           
  4870                           ;dc_motor.c: 91:         *(m->negDutyHighByte)= negDuty;
  4871   001290  EE20 F007          	lfsr	2,7
  4872   001294  5010               	movf	setMotorPWM@m^0,w,c
  4873   001296  26D9               	addwf	fsr2l,f,c
  4874   001298  5011               	movf	(setMotorPWM@m+1)^0,w,c
  4875   00129A  22DA               	addwfc	fsr2h,f,c
  4876   00129C  CFDE F012          	movff	postinc2,??_setMotorPWM
  4877   0012A0  CFDD F013          	movff	postdec2,??_setMotorPWM+1
  4878   0012A4  C012  FFD9         	movff	??_setMotorPWM,fsr2l
  4879   0012A8  C013  FFDA         	movff	??_setMotorPWM+1,fsr2h
  4880   0012AC  C015  FFDF         	movff	setMotorPWM@negDuty,indf2
  4881                           
  4882                           ;dc_motor.c: 92:     } else {
  4883   0012B0  EF7A  F009         	goto	l287
  4884   0012B4                     l2261:
  4885                           
  4886                           ;dc_motor.c: 93:         *(m->posDutyHighByte)= negDuty;
  4887   0012B4  EE20 F005          	lfsr	2,5
  4888   0012B8  5010               	movf	setMotorPWM@m^0,w,c
  4889   0012BA  26D9               	addwf	fsr2l,f,c
  4890   0012BC  5011               	movf	(setMotorPWM@m+1)^0,w,c
  4891   0012BE  22DA               	addwfc	fsr2h,f,c
  4892   0012C0  CFDE F012          	movff	postinc2,??_setMotorPWM
  4893   0012C4  CFDD F013          	movff	postdec2,??_setMotorPWM+1
  4894   0012C8  C012  FFD9         	movff	??_setMotorPWM,fsr2l
  4895   0012CC  C013  FFDA         	movff	??_setMotorPWM+1,fsr2h
  4896   0012D0  C015  FFDF         	movff	setMotorPWM@negDuty,indf2
  4897                           
  4898                           ;dc_motor.c: 94:         *(m->negDutyHighByte)= posDuty;
  4899   0012D4  EE20 F007          	lfsr	2,7
  4900   0012D8  5010               	movf	setMotorPWM@m^0,w,c
  4901   0012DA  26D9               	addwf	fsr2l,f,c
  4902   0012DC  5011               	movf	(setMotorPWM@m+1)^0,w,c
  4903   0012DE  22DA               	addwfc	fsr2h,f,c
  4904   0012E0  CFDE F012          	movff	postinc2,??_setMotorPWM
  4905   0012E4  CFDD F013          	movff	postdec2,??_setMotorPWM+1
  4906   0012E8  C012  FFD9         	movff	??_setMotorPWM,fsr2l
  4907   0012EC  C013  FFDA         	movff	??_setMotorPWM+1,fsr2h
  4908   0012F0  C014  FFDF         	movff	setMotorPWM@posDuty,indf2
  4909   0012F4                     l287:
  4910   0012F4  0012               	return		;funcret
  4911   0012F6                     __end_of_setMotorPWM:
  4912                           	callstack 0
  4913                           
  4914 ;; *************** function ___wmul *****************
  4915 ;; Defined at:
  4916 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\Umul16.c"
  4917 ;; Parameters:    Size  Location     Type
  4918 ;;  multiplier      2    2[COMRAM] unsigned int 
  4919 ;;  multiplicand    2    4[COMRAM] unsigned int 
  4920 ;; Auto vars:     Size  Location     Type
  4921 ;;  product         2    6[COMRAM] unsigned int 
  4922 ;; Return value:  Size  Location     Type
  4923 ;;                  2    2[COMRAM] unsigned int 
  4924 ;; Registers used:
  4925 ;;		wreg, status,2, status,0, prodl, prodh
  4926 ;; Tracked objects:
  4927 ;;		On entry : 0/0
  4928 ;;		On exit  : 0/0
  4929 ;;		Unchanged: 0/0
  4930 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4931 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4932 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4933 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4934 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4935 ;;Total ram usage:        6 bytes
  4936 ;; Hardware stack levels used: 1
  4937 ;; Hardware stack levels required when called: 1
  4938 ;; This function calls:
  4939 ;;		Nothing
  4940 ;; This function is called by:
  4941 ;;		_setMotorPWM
  4942 ;; This function uses a non-reentrant model
  4943 ;;
  4944                           
  4945                           	psect	text27
  4946   0021E0                     __ptext27:
  4947                           	callstack 0
  4948   0021E0                     ___wmul:
  4949                           	callstack 26
  4950   0021E0  5003               	movf	___wmul@multiplier^0,w,c
  4951   0021E2  0205               	mulwf	___wmul@multiplicand^0,c
  4952   0021E4  CFF3 F007          	movff	prodl,___wmul@product
  4953   0021E8  CFF4 F008          	movff	prodh,___wmul@product+1
  4954   0021EC  5003               	movf	___wmul@multiplier^0,w,c
  4955   0021EE  0206               	mulwf	(___wmul@multiplicand+1)^0,c
  4956   0021F0  50F3               	movf	243,w,c
  4957   0021F2  2608               	addwf	(___wmul@product+1)^0,f,c
  4958   0021F4  5004               	movf	(___wmul@multiplier+1)^0,w,c
  4959   0021F6  0205               	mulwf	___wmul@multiplicand^0,c
  4960   0021F8  50F3               	movf	243,w,c
  4961   0021FA  2608               	addwf	(___wmul@product+1)^0,f,c
  4962   0021FC  C007  F003         	movff	___wmul@product,?___wmul
  4963   002200  C008  F004         	movff	___wmul@product+1,?___wmul+1
  4964   002204  0012               	return		;funcret
  4965   002206                     __end_of___wmul:
  4966                           	callstack 0
  4967                           
  4968 ;; *************** function ___lwdiv *****************
  4969 ;; Defined at:
  4970 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\lwdiv.c"
  4971 ;; Parameters:    Size  Location     Type
  4972 ;;  dividend        2    8[COMRAM] unsigned int 
  4973 ;;  divisor         2   10[COMRAM] unsigned int 
  4974 ;; Auto vars:     Size  Location     Type
  4975 ;;  quotient        2   12[COMRAM] unsigned int 
  4976 ;;  counter         1   14[COMRAM] unsigned char 
  4977 ;; Return value:  Size  Location     Type
  4978 ;;                  2    8[COMRAM] unsigned int 
  4979 ;; Registers used:
  4980 ;;		wreg, status,2, status,0
  4981 ;; Tracked objects:
  4982 ;;		On entry : 0/0
  4983 ;;		On exit  : 0/0
  4984 ;;		Unchanged: 0/0
  4985 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4986 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4987 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4988 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4989 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4990 ;;Total ram usage:        7 bytes
  4991 ;; Hardware stack levels used: 1
  4992 ;; Hardware stack levels required when called: 1
  4993 ;; This function calls:
  4994 ;;		Nothing
  4995 ;; This function is called by:
  4996 ;;		_setMotorPWM
  4997 ;; This function uses a non-reentrant model
  4998 ;;
  4999                           
  5000                           	psect	text28
  5001   001D9E                     __ptext28:
  5002                           	callstack 0
  5003   001D9E                     ___lwdiv:
  5004                           	callstack 26
  5005   001D9E  0E00               	movlw	0
  5006   001DA0  6E0E               	movwf	(___lwdiv@quotient+1)^0,c
  5007   001DA2  0E00               	movlw	0
  5008   001DA4  6E0D               	movwf	___lwdiv@quotient^0,c
  5009   001DA6  500B               	movf	___lwdiv@divisor^0,w,c
  5010   001DA8  100C               	iorwf	(___lwdiv@divisor+1)^0,w,c
  5011   001DAA  B4D8               	btfsc	status,2,c
  5012   001DAC  EFDA  F00E         	goto	u1211
  5013   001DB0  EFDC  F00E         	goto	u1210
  5014   001DB4                     u1211:
  5015   001DB4  EF04  F00F         	goto	l1091
  5016   001DB8                     u1210:
  5017   001DB8  0E01               	movlw	1
  5018   001DBA  6E0F               	movwf	___lwdiv@counter^0,c
  5019   001DBC  EFE4  F00E         	goto	l2233
  5020   001DC0                     l2231:
  5021   001DC0  90D8               	bcf	status,0,c
  5022   001DC2  360B               	rlcf	___lwdiv@divisor^0,f,c
  5023   001DC4  360C               	rlcf	(___lwdiv@divisor+1)^0,f,c
  5024   001DC6  2A0F               	incf	___lwdiv@counter^0,f,c
  5025   001DC8                     l2233:
  5026   001DC8  AE0C               	btfss	(___lwdiv@divisor+1)^0,7,c
  5027   001DCA  EFE9  F00E         	goto	u1221
  5028   001DCE  EFEB  F00E         	goto	u1220
  5029   001DD2                     u1221:
  5030   001DD2  EFE0  F00E         	goto	l2231
  5031   001DD6                     u1220:
  5032   001DD6                     l2235:
  5033   001DD6  90D8               	bcf	status,0,c
  5034   001DD8  360D               	rlcf	___lwdiv@quotient^0,f,c
  5035   001DDA  360E               	rlcf	(___lwdiv@quotient+1)^0,f,c
  5036   001DDC  500B               	movf	___lwdiv@divisor^0,w,c
  5037   001DDE  5C09               	subwf	___lwdiv@dividend^0,w,c
  5038   001DE0  500C               	movf	(___lwdiv@divisor+1)^0,w,c
  5039   001DE2  580A               	subwfb	(___lwdiv@dividend+1)^0,w,c
  5040   001DE4  A0D8               	btfss	status,0,c
  5041   001DE6  EFF7  F00E         	goto	u1231
  5042   001DEA  EFF9  F00E         	goto	u1230
  5043   001DEE                     u1231:
  5044   001DEE  EFFE  F00E         	goto	l2243
  5045   001DF2                     u1230:
  5046   001DF2  500B               	movf	___lwdiv@divisor^0,w,c
  5047   001DF4  5E09               	subwf	___lwdiv@dividend^0,f,c
  5048   001DF6  500C               	movf	(___lwdiv@divisor+1)^0,w,c
  5049   001DF8  5A0A               	subwfb	(___lwdiv@dividend+1)^0,f,c
  5050   001DFA  800D               	bsf	___lwdiv@quotient^0,0,c
  5051   001DFC                     l2243:
  5052   001DFC  90D8               	bcf	status,0,c
  5053   001DFE  320C               	rrcf	(___lwdiv@divisor+1)^0,f,c
  5054   001E00  320B               	rrcf	___lwdiv@divisor^0,f,c
  5055   001E02  2E0F               	decfsz	___lwdiv@counter^0,f,c
  5056   001E04  EFEB  F00E         	goto	l2235
  5057   001E08                     l1091:
  5058   001E08  C00D  F009         	movff	___lwdiv@quotient,?___lwdiv
  5059   001E0C  C00E  F00A         	movff	___lwdiv@quotient+1,?___lwdiv+1
  5060   001E10  0012               	return		;funcret
  5061   001E12                     __end_of___lwdiv:
  5062                           	callstack 0
  5063                           
  5064 ;; *************** function _custom_delay *****************
  5065 ;; Defined at:
  5066 ;;		line 29 in file "calibration.c"
  5067 ;; Parameters:    Size  Location     Type
  5068 ;;  temp            2    2[COMRAM] int 
  5069 ;; Auto vars:     Size  Location     Type
  5070 ;;  i               2    5[COMRAM] int 
  5071 ;; Return value:  Size  Location     Type
  5072 ;;                  1    wreg      void 
  5073 ;; Registers used:
  5074 ;;		wreg, status,2, status,0
  5075 ;; Tracked objects:
  5076 ;;		On entry : 0/0
  5077 ;;		On exit  : 0/0
  5078 ;;		Unchanged: 0/0
  5079 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5080 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5081 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5082 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5083 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5084 ;;Total ram usage:        5 bytes
  5085 ;; Hardware stack levels used: 1
  5086 ;; Hardware stack levels required when called: 1
  5087 ;; This function calls:
  5088 ;;		Nothing
  5089 ;; This function is called by:
  5090 ;;		_left_45
  5091 ;;		_right_45
  5092 ;; This function uses a non-reentrant model
  5093 ;;
  5094                           
  5095                           	psect	text29
  5096   0020DC                     __ptext29:
  5097                           	callstack 0
  5098   0020DC                     _custom_delay:
  5099                           	callstack 25
  5100   0020DC                     
  5101                           ;calibration.c: 30: int i;;calibration.c: 31: for (i = 0; i < temp; i++){_delay((unsigne
      +                          d long)((1)*(64000000/4000.0)));}
  5102   0020DC  0E00               	movlw	0
  5103   0020DE  6E07               	movwf	(custom_delay@i+1)^0,c
  5104   0020E0  0E00               	movlw	0
  5105   0020E2  6E06               	movwf	custom_delay@i^0,c
  5106   0020E4  EF7E  F010         	goto	l535
  5107   0020E8                     l2295:
  5108   0020E8  0E15               	movlw	21
  5109   0020EA  6E05               	movwf	??_custom_delay^0,c
  5110   0020EC  0EC6               	movlw	198
  5111   0020EE                     u2967:
  5112   0020EE  2EE8               	decfsz	wreg,f,c
  5113   0020F0  D7FE               	bra	u2967
  5114   0020F2  2E05               	decfsz	??_custom_delay^0,f,c
  5115   0020F4  D7FC               	bra	u2967
  5116   0020F6  D000               	nop2	
  5117   0020F8  4A06               	infsnz	custom_delay@i^0,f,c
  5118   0020FA  2A07               	incf	(custom_delay@i+1)^0,f,c
  5119   0020FC                     l535:
  5120   0020FC  5003               	movf	custom_delay@temp^0,w,c
  5121   0020FE  5C06               	subwf	custom_delay@i^0,w,c
  5122   002100  5007               	movf	(custom_delay@i+1)^0,w,c
  5123   002102  0A80               	xorlw	128
  5124   002104  6E05               	movwf	??_custom_delay^0,c
  5125   002106  5004               	movf	(custom_delay@temp+1)^0,w,c
  5126   002108  0A80               	xorlw	128
  5127   00210A  5805               	subwfb	??_custom_delay^0,w,c
  5128   00210C  A0D8               	btfss	status,0,c
  5129   00210E  EF8B  F010         	goto	u1271
  5130   002112  EF8D  F010         	goto	u1270
  5131   002116                     u1271:
  5132   002116  EF74  F010         	goto	l2295
  5133   00211A                     u1270:
  5134   00211A  0012               	return		;funcret
  5135   00211C                     __end_of_custom_delay:
  5136                           	callstack 0
  5137                           
  5138 ;; *************** function ___flge *****************
  5139 ;; Defined at:
  5140 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\flge.c"
  5141 ;; Parameters:    Size  Location     Type
  5142 ;;  ff1             4    2[COMRAM] void 
  5143 ;;  ff2             4    6[COMRAM] void 
  5144 ;; Auto vars:     Size  Location     Type
  5145 ;;		None
  5146 ;; Return value:  Size  Location     Type
  5147 ;;		None               void
  5148 ;; Registers used:
  5149 ;;		wreg, status,2, status,0
  5150 ;; Tracked objects:
  5151 ;;		On entry : 0/0
  5152 ;;		On exit  : 0/0
  5153 ;;		Unchanged: 0/0
  5154 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5155 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5156 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5157 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5158 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5159 ;;Total ram usage:       12 bytes
  5160 ;; Hardware stack levels used: 1
  5161 ;; Hardware stack levels required when called: 1
  5162 ;; This function calls:
  5163 ;;		Nothing
  5164 ;; This function is called by:
  5165 ;;		_buggy_color_response
  5166 ;; This function uses a non-reentrant model
  5167 ;;
  5168                           
  5169                           	psect	text30
  5170   0017B8                     __ptext30:
  5171                           	callstack 0
  5172   0017B8                     ___flge:
  5173                           	callstack 28
  5174   0017B8  0E00               	movlw	0
  5175   0017BA  1403               	andwf	___flge@ff1^0,w,c
  5176   0017BC  6E0B               	movwf	??___flge^0,c
  5177   0017BE  0E00               	movlw	0
  5178   0017C0  1404               	andwf	(___flge@ff1+1)^0,w,c
  5179   0017C2  6E0C               	movwf	(??___flge+1)^0,c
  5180   0017C4  0E80               	movlw	128
  5181   0017C6  1405               	andwf	(___flge@ff1+2)^0,w,c
  5182   0017C8  6E0D               	movwf	(??___flge+2)^0,c
  5183   0017CA  0E7F               	movlw	127
  5184   0017CC  1406               	andwf	(___flge@ff1+3)^0,w,c
  5185   0017CE  6E0E               	movwf	(??___flge+3)^0,c
  5186   0017D0  500B               	movf	??___flge^0,w,c
  5187   0017D2  100C               	iorwf	(??___flge+1)^0,w,c
  5188   0017D4  100D               	iorwf	(??___flge+2)^0,w,c
  5189   0017D6  100E               	iorwf	(??___flge+3)^0,w,c
  5190   0017D8  A4D8               	btfss	status,2,c
  5191   0017DA  EFF1  F00B         	goto	u1981
  5192   0017DE  EFF3  F00B         	goto	u1980
  5193   0017E2                     u1981:
  5194   0017E2  EFFB  F00B         	goto	l2909
  5195   0017E6                     u1980:
  5196   0017E6  0E00               	movlw	0
  5197   0017E8  6E03               	movwf	___flge@ff1^0,c
  5198   0017EA  0E00               	movlw	0
  5199   0017EC  6E04               	movwf	(___flge@ff1+1)^0,c
  5200   0017EE  0E00               	movlw	0
  5201   0017F0  6E05               	movwf	(___flge@ff1+2)^0,c
  5202   0017F2  0E00               	movlw	0
  5203   0017F4  6E06               	movwf	(___flge@ff1+3)^0,c
  5204   0017F6                     l2909:
  5205   0017F6  0E00               	movlw	0
  5206   0017F8  1407               	andwf	___flge@ff2^0,w,c
  5207   0017FA  6E0B               	movwf	??___flge^0,c
  5208   0017FC  0E00               	movlw	0
  5209   0017FE  1408               	andwf	(___flge@ff2+1)^0,w,c
  5210   001800  6E0C               	movwf	(??___flge+1)^0,c
  5211   001802  0E80               	movlw	128
  5212   001804  1409               	andwf	(___flge@ff2+2)^0,w,c
  5213   001806  6E0D               	movwf	(??___flge+2)^0,c
  5214   001808  0E7F               	movlw	127
  5215   00180A  140A               	andwf	(___flge@ff2+3)^0,w,c
  5216   00180C  6E0E               	movwf	(??___flge+3)^0,c
  5217   00180E  500B               	movf	??___flge^0,w,c
  5218   001810  100C               	iorwf	(??___flge+1)^0,w,c
  5219   001812  100D               	iorwf	(??___flge+2)^0,w,c
  5220   001814  100E               	iorwf	(??___flge+3)^0,w,c
  5221   001816  A4D8               	btfss	status,2,c
  5222   001818  EF10  F00C         	goto	u1991
  5223   00181C  EF12  F00C         	goto	u1990
  5224   001820                     u1991:
  5225   001820  EF1A  F00C         	goto	l2913
  5226   001824                     u1990:
  5227   001824  0E00               	movlw	0
  5228   001826  6E07               	movwf	___flge@ff2^0,c
  5229   001828  0E00               	movlw	0
  5230   00182A  6E08               	movwf	(___flge@ff2+1)^0,c
  5231   00182C  0E00               	movlw	0
  5232   00182E  6E09               	movwf	(___flge@ff2+2)^0,c
  5233   001830  0E00               	movlw	0
  5234   001832  6E0A               	movwf	(___flge@ff2+3)^0,c
  5235   001834                     l2913:
  5236   001834  AE06               	btfss	(___flge@ff1+3)^0,7,c
  5237   001836  EF1F  F00C         	goto	u2001
  5238   00183A  EF21  F00C         	goto	u2000
  5239   00183E                     u2001:
  5240   00183E  EF2A  F00C         	goto	l2917
  5241   001842                     u2000:
  5242   001842  6C03               	negf	___flge@ff1^0,c
  5243   001844  1E04               	comf	(___flge@ff1+1)^0,f,c
  5244   001846  B0D8               	btfsc	status,0,c
  5245   001848  2A04               	incf	(___flge@ff1+1)^0,f,c
  5246   00184A  1E05               	comf	(___flge@ff1+2)^0,f,c
  5247   00184C  B0D8               	btfsc	status,0,c
  5248   00184E  2A05               	incf	(___flge@ff1+2)^0,f,c
  5249   001850  0E80               	movlw	128
  5250   001852  5606               	subfwb	(___flge@ff1+3)^0,f,c
  5251   001854                     l2917:
  5252   001854  AE0A               	btfss	(___flge@ff2+3)^0,7,c
  5253   001856  EF2F  F00C         	goto	u2011
  5254   00185A  EF31  F00C         	goto	u2010
  5255   00185E                     u2011:
  5256   00185E  EF3A  F00C         	goto	l865
  5257   001862                     u2010:
  5258   001862  6C07               	negf	___flge@ff2^0,c
  5259   001864  1E08               	comf	(___flge@ff2+1)^0,f,c
  5260   001866  B0D8               	btfsc	status,0,c
  5261   001868  2A08               	incf	(___flge@ff2+1)^0,f,c
  5262   00186A  1E09               	comf	(___flge@ff2+2)^0,f,c
  5263   00186C  B0D8               	btfsc	status,0,c
  5264   00186E  2A09               	incf	(___flge@ff2+2)^0,f,c
  5265   001870  0E80               	movlw	128
  5266   001872  560A               	subfwb	(___flge@ff2+3)^0,f,c
  5267   001874                     l865:
  5268   001874  0E00               	movlw	0
  5269   001876  1A03               	xorwf	___flge@ff1^0,f,c
  5270   001878  0E00               	movlw	0
  5271   00187A  1A04               	xorwf	(___flge@ff1+1)^0,f,c
  5272   00187C  0E00               	movlw	0
  5273   00187E  1A05               	xorwf	(___flge@ff1+2)^0,f,c
  5274   001880  0E80               	movlw	128
  5275   001882  1A06               	xorwf	(___flge@ff1+3)^0,f,c
  5276   001884  0E00               	movlw	0
  5277   001886  1A07               	xorwf	___flge@ff2^0,f,c
  5278   001888  0E00               	movlw	0
  5279   00188A  1A08               	xorwf	(___flge@ff2+1)^0,f,c
  5280   00188C  0E00               	movlw	0
  5281   00188E  1A09               	xorwf	(___flge@ff2+2)^0,f,c
  5282   001890  0E80               	movlw	128
  5283   001892  1A0A               	xorwf	(___flge@ff2+3)^0,f,c
  5284   001894  5007               	movf	___flge@ff2^0,w,c
  5285   001896  5C03               	subwf	___flge@ff1^0,w,c
  5286   001898  5008               	movf	(___flge@ff2+1)^0,w,c
  5287   00189A  5804               	subwfb	(___flge@ff1+1)^0,w,c
  5288   00189C  5009               	movf	(___flge@ff2+2)^0,w,c
  5289   00189E  5805               	subwfb	(___flge@ff1+2)^0,w,c
  5290   0018A0  500A               	movf	(___flge@ff2+3)^0,w,c
  5291   0018A2  5806               	subwfb	(___flge@ff1+3)^0,w,c
  5292   0018A4  B0D8               	btfsc	status,0,c
  5293   0018A6  EF57  F00C         	goto	u2021
  5294   0018AA  EF59  F00C         	goto	u2020
  5295   0018AE                     u2021:
  5296   0018AE  EF5C  F00C         	goto	l2923
  5297   0018B2                     u2020:
  5298   0018B2  90D8               	bcf	status,0,c
  5299   0018B4  EF5D  F00C         	goto	l870
  5300   0018B8                     l2923:
  5301   0018B8  80D8               	bsf	status,0,c
  5302   0018BA                     l870:
  5303   0018BA  0012               	return		;funcret
  5304   0018BC                     __end_of___flge:
  5305                           	callstack 0
  5306                           
  5307 ;; *************** function _READcolor *****************
  5308 ;; Defined at:
  5309 ;;		line 91 in file "color.c"
  5310 ;; Parameters:    Size  Location     Type
  5311 ;;  c               2   41[COMRAM] PTR struct colors
  5312 ;;		 -> color(20), 
  5313 ;; Auto vars:     Size  Location     Type
  5314 ;;		None
  5315 ;; Return value:  Size  Location     Type
  5316 ;;                  1    wreg      void 
  5317 ;; Registers used:
  5318 ;;		wreg, status,2, status,0, cstack
  5319 ;; Tracked objects:
  5320 ;;		On entry : 0/0
  5321 ;;		On exit  : 0/0
  5322 ;;		Unchanged: 0/0
  5323 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5324 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5325 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5326 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5327 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5328 ;;Total ram usage:        2 bytes
  5329 ;; Hardware stack levels used: 1
  5330 ;; Hardware stack levels required when called: 4
  5331 ;; This function calls:
  5332 ;;		___fldiv
  5333 ;;		___xxtofl
  5334 ;;		_color_read_Blue
  5335 ;;		_color_read_Clear
  5336 ;;		_color_read_Green
  5337 ;;		_color_read_Red
  5338 ;; This function is called by:
  5339 ;;		_buggy_color_response
  5340 ;; This function uses a non-reentrant model
  5341 ;;
  5342                           
  5343                           	psect	text31
  5344   001432                     __ptext31:
  5345                           	callstack 0
  5346   001432                     _READcolor:
  5347                           	callstack 25
  5348   001432                     
  5349                           ;color.c: 93:     color.R = color_read_Red();
  5350   001432  EC67  F00F         	call	_color_read_Red	;wreg free
  5351   001436  C007  F045         	movff	?_color_read_Red,_color
  5352   00143A  C008  F046         	movff	?_color_read_Red+1,_color+1
  5353                           
  5354                           ;color.c: 94:     color.B = color_read_Blue();
  5355   00143E  ECDF  F00F         	call	_color_read_Blue	;wreg free
  5356   001442  C007  F047         	movff	?_color_read_Blue,_color+2
  5357   001446  C008  F048         	movff	?_color_read_Blue+1,_color+3
  5358                           
  5359                           ;color.c: 95:     color.G = color_read_Green();
  5360   00144A  EC8F  F00F         	call	_color_read_Green	;wreg free
  5361   00144E  C007  F049         	movff	?_color_read_Green,_color+4
  5362   001452  C008  F04A         	movff	?_color_read_Green+1,_color+5
  5363                           
  5364                           ;color.c: 96:     color.C = color_read_Clear();
  5365   001456  ECB7  F00F         	call	_color_read_Clear	;wreg free
  5366   00145A  C007  F04B         	movff	?_color_read_Clear,_color+6
  5367   00145E  C008  F04C         	movff	?_color_read_Clear+1,_color+7
  5368                           
  5369                           ;color.c: 98:     color.R_norm = (float)color.R / (float)color.C;
  5370   001462  C045  F003         	movff	_color,___xxtofl@val
  5371   001466  C046  F004         	movff	_color+1,___xxtofl@val+1
  5372   00146A  6A05               	clrf	(___xxtofl@val+2)^0,c
  5373   00146C  6A06               	clrf	(___xxtofl@val+3)^0,c
  5374   00146E  0E00               	movlw	0
  5375   001470  ECEB  F007         	call	___xxtofl
  5376   001474  C003  F011         	movff	?___xxtofl,___fldiv@b
  5377   001478  C004  F012         	movff	?___xxtofl+1,___fldiv@b+1
  5378   00147C  C005  F013         	movff	?___xxtofl+2,___fldiv@b+2
  5379   001480  C006  F014         	movff	?___xxtofl+3,___fldiv@b+3
  5380   001484  C04B  F003         	movff	_color+6,___xxtofl@val
  5381   001488  C04C  F004         	movff	_color+7,___xxtofl@val+1
  5382   00148C  6A05               	clrf	(___xxtofl@val+2)^0,c
  5383   00148E  6A06               	clrf	(___xxtofl@val+3)^0,c
  5384   001490  0E00               	movlw	0
  5385   001492  ECEB  F007         	call	___xxtofl
  5386   001496  C003  F015         	movff	?___xxtofl,___fldiv@a
  5387   00149A  C004  F016         	movff	?___xxtofl+1,___fldiv@a+1
  5388   00149E  C005  F017         	movff	?___xxtofl+2,___fldiv@a+2
  5389   0014A2  C006  F018         	movff	?___xxtofl+3,___fldiv@a+3
  5390   0014A6  ECAA  F003         	call	___fldiv	;wreg free
  5391   0014AA  C011  F04D         	movff	?___fldiv,_color+8
  5392   0014AE  C012  F04E         	movff	?___fldiv+1,_color+9
  5393   0014B2  C013  F04F         	movff	?___fldiv+2,_color+10
  5394   0014B6  C014  F050         	movff	?___fldiv+3,_color+11
  5395                           
  5396                           ;color.c: 99:     color.B_norm = (float)color.B / (float)color.C;
  5397   0014BA  C047  F003         	movff	_color+2,___xxtofl@val
  5398   0014BE  C048  F004         	movff	_color+3,___xxtofl@val+1
  5399   0014C2  6A05               	clrf	(___xxtofl@val+2)^0,c
  5400   0014C4  6A06               	clrf	(___xxtofl@val+3)^0,c
  5401   0014C6  0E00               	movlw	0
  5402   0014C8  ECEB  F007         	call	___xxtofl
  5403   0014CC  C003  F011         	movff	?___xxtofl,___fldiv@b
  5404   0014D0  C004  F012         	movff	?___xxtofl+1,___fldiv@b+1
  5405   0014D4  C005  F013         	movff	?___xxtofl+2,___fldiv@b+2
  5406   0014D8  C006  F014         	movff	?___xxtofl+3,___fldiv@b+3
  5407   0014DC  C04B  F003         	movff	_color+6,___xxtofl@val
  5408   0014E0  C04C  F004         	movff	_color+7,___xxtofl@val+1
  5409   0014E4  6A05               	clrf	(___xxtofl@val+2)^0,c
  5410   0014E6  6A06               	clrf	(___xxtofl@val+3)^0,c
  5411   0014E8  0E00               	movlw	0
  5412   0014EA  ECEB  F007         	call	___xxtofl
  5413   0014EE  C003  F015         	movff	?___xxtofl,___fldiv@a
  5414   0014F2  C004  F016         	movff	?___xxtofl+1,___fldiv@a+1
  5415   0014F6  C005  F017         	movff	?___xxtofl+2,___fldiv@a+2
  5416   0014FA  C006  F018         	movff	?___xxtofl+3,___fldiv@a+3
  5417   0014FE  ECAA  F003         	call	___fldiv	;wreg free
  5418   001502  C011  F051         	movff	?___fldiv,_color+12
  5419   001506  C012  F052         	movff	?___fldiv+1,_color+13
  5420   00150A  C013  F053         	movff	?___fldiv+2,_color+14
  5421   00150E  C014  F054         	movff	?___fldiv+3,_color+15
  5422                           
  5423                           ;color.c: 100:     color.G_norm = (float)color.G / (float)color.C;
  5424   001512  C049  F003         	movff	_color+4,___xxtofl@val
  5425   001516  C04A  F004         	movff	_color+5,___xxtofl@val+1
  5426   00151A  6A05               	clrf	(___xxtofl@val+2)^0,c
  5427   00151C  6A06               	clrf	(___xxtofl@val+3)^0,c
  5428   00151E  0E00               	movlw	0
  5429   001520  ECEB  F007         	call	___xxtofl
  5430   001524  C003  F011         	movff	?___xxtofl,___fldiv@b
  5431   001528  C004  F012         	movff	?___xxtofl+1,___fldiv@b+1
  5432   00152C  C005  F013         	movff	?___xxtofl+2,___fldiv@b+2
  5433   001530  C006  F014         	movff	?___xxtofl+3,___fldiv@b+3
  5434   001534  C04B  F003         	movff	_color+6,___xxtofl@val
  5435   001538  C04C  F004         	movff	_color+7,___xxtofl@val+1
  5436   00153C  6A05               	clrf	(___xxtofl@val+2)^0,c
  5437   00153E  6A06               	clrf	(___xxtofl@val+3)^0,c
  5438   001540  0E00               	movlw	0
  5439   001542  ECEB  F007         	call	___xxtofl
  5440   001546  C003  F015         	movff	?___xxtofl,___fldiv@a
  5441   00154A  C004  F016         	movff	?___xxtofl+1,___fldiv@a+1
  5442   00154E  C005  F017         	movff	?___xxtofl+2,___fldiv@a+2
  5443   001552  C006  F018         	movff	?___xxtofl+3,___fldiv@a+3
  5444   001556  ECAA  F003         	call	___fldiv	;wreg free
  5445   00155A  C011  F055         	movff	?___fldiv,_color+16
  5446   00155E  C012  F056         	movff	?___fldiv+1,_color+17
  5447   001562  C013  F057         	movff	?___fldiv+2,_color+18
  5448   001566  C014  F058         	movff	?___fldiv+3,_color+19
  5449   00156A  0012               	return		;funcret
  5450   00156C                     __end_of_READcolor:
  5451                           	callstack 0
  5452                           
  5453 ;; *************** function _color_read_Red *****************
  5454 ;; Defined at:
  5455 ;;		line 31 in file "color.c"
  5456 ;; Parameters:    Size  Location     Type
  5457 ;;		None
  5458 ;; Auto vars:     Size  Location     Type
  5459 ;;  tmp             2   11[COMRAM] unsigned int 
  5460 ;; Return value:  Size  Location     Type
  5461 ;;                  2    6[COMRAM] unsigned int 
  5462 ;; Registers used:
  5463 ;;		wreg, status,2, status,0, cstack
  5464 ;; Tracked objects:
  5465 ;;		On entry : 0/0
  5466 ;;		On exit  : 0/0
  5467 ;;		Unchanged: 0/0
  5468 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5469 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5470 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5471 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5472 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5473 ;;Total ram usage:        7 bytes
  5474 ;; Hardware stack levels used: 1
  5475 ;; Hardware stack levels required when called: 3
  5476 ;; This function calls:
  5477 ;;		_I2C_2_Master_Read
  5478 ;;		_I2C_2_Master_RepStart
  5479 ;;		_I2C_2_Master_Start
  5480 ;;		_I2C_2_Master_Stop
  5481 ;;		_I2C_2_Master_Write
  5482 ;; This function is called by:
  5483 ;;		_READcolor
  5484 ;; This function uses a non-reentrant model
  5485 ;;
  5486                           
  5487                           	psect	text32
  5488   001ECE                     __ptext32:
  5489                           	callstack 0
  5490   001ECE                     _color_read_Red:
  5491                           	callstack 25
  5492   001ECE                     
  5493                           ;color.c: 33:  unsigned int tmp;;color.c: 34:  I2C_2_Master_Start();
  5494   001ECE  EC6B  F011         	call	_I2C_2_Master_Start	;wreg free
  5495                           
  5496                           ;color.c: 35:  I2C_2_Master_Write(0x52 | 0x00);
  5497   001ED2  0E52               	movlw	82
  5498   001ED4  EC60  F011         	call	_I2C_2_Master_Write
  5499                           
  5500                           ;color.c: 37:  I2C_2_Master_Write(0xA0 | 0x16);
  5501   001ED8  0EB6               	movlw	182
  5502   001EDA  EC60  F011         	call	_I2C_2_Master_Write
  5503                           
  5504                           ;color.c: 38:  I2C_2_Master_RepStart();
  5505   001EDE  EC70  F011         	call	_I2C_2_Master_RepStart	;wreg free
  5506                           
  5507                           ;color.c: 39:  I2C_2_Master_Write(0x52 | 0x01);
  5508   001EE2  0E53               	movlw	83
  5509   001EE4  EC60  F011         	call	_I2C_2_Master_Write
  5510                           
  5511                           ;color.c: 40:  tmp=I2C_2_Master_Read(1);
  5512   001EE8  0E01               	movlw	1
  5513   001EEA  EC2D  F010         	call	_I2C_2_Master_Read
  5514   001EEE  6E09               	movwf	??_color_read_Red^0,c
  5515   001EF0  5009               	movf	??_color_read_Red^0,w,c
  5516   001EF2  6E0C               	movwf	color_read_Red@tmp^0,c
  5517   001EF4  6A0D               	clrf	(color_read_Red@tmp+1)^0,c
  5518                           
  5519                           ;color.c: 41:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  5520   001EF6  0E00               	movlw	0
  5521   001EF8  EC2D  F010         	call	_I2C_2_Master_Read
  5522   001EFC  6E09               	movwf	??_color_read_Red^0,c
  5523   001EFE  5009               	movf	??_color_read_Red^0,w,c
  5524   001F00  6E0B               	movwf	(??_color_read_Red+2)^0,c
  5525   001F02  6A0A               	clrf	(??_color_read_Red+1)^0,c
  5526   001F04  500C               	movf	color_read_Red@tmp^0,w,c
  5527   001F06  100A               	iorwf	(??_color_read_Red+1)^0,w,c
  5528   001F08  6E0C               	movwf	color_read_Red@tmp^0,c
  5529   001F0A  500D               	movf	(color_read_Red@tmp+1)^0,w,c
  5530   001F0C  100B               	iorwf	(??_color_read_Red+2)^0,w,c
  5531   001F0E  6E0D               	movwf	(color_read_Red@tmp+1)^0,c
  5532                           
  5533                           ;color.c: 42:  I2C_2_Master_Stop();
  5534   001F10  EC66  F011         	call	_I2C_2_Master_Stop	;wreg free
  5535   001F14                     
  5536                           ;color.c: 43:  return tmp;
  5537   001F14  C00C  F007         	movff	color_read_Red@tmp,?_color_read_Red
  5538   001F18  C00D  F008         	movff	color_read_Red@tmp+1,?_color_read_Red+1
  5539   001F1C  0012               	return		;funcret
  5540   001F1E                     __end_of_color_read_Red:
  5541                           	callstack 0
  5542                           
  5543 ;; *************** function _color_read_Green *****************
  5544 ;; Defined at:
  5545 ;;		line 61 in file "color.c"
  5546 ;; Parameters:    Size  Location     Type
  5547 ;;		None
  5548 ;; Auto vars:     Size  Location     Type
  5549 ;;  tmp             2   11[COMRAM] unsigned int 
  5550 ;; Return value:  Size  Location     Type
  5551 ;;                  2    6[COMRAM] unsigned int 
  5552 ;; Registers used:
  5553 ;;		wreg, status,2, status,0, cstack
  5554 ;; Tracked objects:
  5555 ;;		On entry : 0/0
  5556 ;;		On exit  : 0/0
  5557 ;;		Unchanged: 0/0
  5558 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5559 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5560 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5561 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5562 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5563 ;;Total ram usage:        7 bytes
  5564 ;; Hardware stack levels used: 1
  5565 ;; Hardware stack levels required when called: 3
  5566 ;; This function calls:
  5567 ;;		_I2C_2_Master_Read
  5568 ;;		_I2C_2_Master_RepStart
  5569 ;;		_I2C_2_Master_Start
  5570 ;;		_I2C_2_Master_Stop
  5571 ;;		_I2C_2_Master_Write
  5572 ;; This function is called by:
  5573 ;;		_READcolor
  5574 ;; This function uses a non-reentrant model
  5575 ;;
  5576                           
  5577                           	psect	text33
  5578   001F1E                     __ptext33:
  5579                           	callstack 0
  5580   001F1E                     _color_read_Green:
  5581                           	callstack 25
  5582   001F1E                     
  5583                           ;color.c: 63:  unsigned int tmp;;color.c: 64:  I2C_2_Master_Start();
  5584   001F1E  EC6B  F011         	call	_I2C_2_Master_Start	;wreg free
  5585                           
  5586                           ;color.c: 65:  I2C_2_Master_Write(0x52 | 0x00);
  5587   001F22  0E52               	movlw	82
  5588   001F24  EC60  F011         	call	_I2C_2_Master_Write
  5589                           
  5590                           ;color.c: 67:  I2C_2_Master_Write(0xA0 | 0x18);
  5591   001F28  0EB8               	movlw	184
  5592   001F2A  EC60  F011         	call	_I2C_2_Master_Write
  5593                           
  5594                           ;color.c: 68:  I2C_2_Master_RepStart();
  5595   001F2E  EC70  F011         	call	_I2C_2_Master_RepStart	;wreg free
  5596                           
  5597                           ;color.c: 69:  I2C_2_Master_Write(0x52 | 0x01);
  5598   001F32  0E53               	movlw	83
  5599   001F34  EC60  F011         	call	_I2C_2_Master_Write
  5600                           
  5601                           ;color.c: 70:  tmp=I2C_2_Master_Read(1);
  5602   001F38  0E01               	movlw	1
  5603   001F3A  EC2D  F010         	call	_I2C_2_Master_Read
  5604   001F3E  6E09               	movwf	??_color_read_Green^0,c
  5605   001F40  5009               	movf	??_color_read_Green^0,w,c
  5606   001F42  6E0C               	movwf	color_read_Green@tmp^0,c
  5607   001F44  6A0D               	clrf	(color_read_Green@tmp+1)^0,c
  5608                           
  5609                           ;color.c: 71:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  5610   001F46  0E00               	movlw	0
  5611   001F48  EC2D  F010         	call	_I2C_2_Master_Read
  5612   001F4C  6E09               	movwf	??_color_read_Green^0,c
  5613   001F4E  5009               	movf	??_color_read_Green^0,w,c
  5614   001F50  6E0B               	movwf	(??_color_read_Green+2)^0,c
  5615   001F52  6A0A               	clrf	(??_color_read_Green+1)^0,c
  5616   001F54  500C               	movf	color_read_Green@tmp^0,w,c
  5617   001F56  100A               	iorwf	(??_color_read_Green+1)^0,w,c
  5618   001F58  6E0C               	movwf	color_read_Green@tmp^0,c
  5619   001F5A  500D               	movf	(color_read_Green@tmp+1)^0,w,c
  5620   001F5C  100B               	iorwf	(??_color_read_Green+2)^0,w,c
  5621   001F5E  6E0D               	movwf	(color_read_Green@tmp+1)^0,c
  5622                           
  5623                           ;color.c: 72:  I2C_2_Master_Stop();
  5624   001F60  EC66  F011         	call	_I2C_2_Master_Stop	;wreg free
  5625   001F64                     
  5626                           ;color.c: 73:  return tmp;
  5627   001F64  C00C  F007         	movff	color_read_Green@tmp,?_color_read_Green
  5628   001F68  C00D  F008         	movff	color_read_Green@tmp+1,?_color_read_Green+1
  5629   001F6C  0012               	return		;funcret
  5630   001F6E                     __end_of_color_read_Green:
  5631                           	callstack 0
  5632                           
  5633 ;; *************** function _color_read_Clear *****************
  5634 ;; Defined at:
  5635 ;;		line 76 in file "color.c"
  5636 ;; Parameters:    Size  Location     Type
  5637 ;;		None
  5638 ;; Auto vars:     Size  Location     Type
  5639 ;;  tmp             2   11[COMRAM] unsigned int 
  5640 ;; Return value:  Size  Location     Type
  5641 ;;                  2    6[COMRAM] unsigned int 
  5642 ;; Registers used:
  5643 ;;		wreg, status,2, status,0, cstack
  5644 ;; Tracked objects:
  5645 ;;		On entry : 0/0
  5646 ;;		On exit  : 0/0
  5647 ;;		Unchanged: 0/0
  5648 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5649 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5650 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5651 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5652 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5653 ;;Total ram usage:        7 bytes
  5654 ;; Hardware stack levels used: 1
  5655 ;; Hardware stack levels required when called: 3
  5656 ;; This function calls:
  5657 ;;		_I2C_2_Master_Read
  5658 ;;		_I2C_2_Master_RepStart
  5659 ;;		_I2C_2_Master_Start
  5660 ;;		_I2C_2_Master_Stop
  5661 ;;		_I2C_2_Master_Write
  5662 ;; This function is called by:
  5663 ;;		_READcolor
  5664 ;; This function uses a non-reentrant model
  5665 ;;
  5666                           
  5667                           	psect	text34
  5668   001F6E                     __ptext34:
  5669                           	callstack 0
  5670   001F6E                     _color_read_Clear:
  5671                           	callstack 25
  5672   001F6E                     
  5673                           ;color.c: 78:  unsigned int tmp;;color.c: 79:  I2C_2_Master_Start();
  5674   001F6E  EC6B  F011         	call	_I2C_2_Master_Start	;wreg free
  5675                           
  5676                           ;color.c: 80:  I2C_2_Master_Write(0x52 | 0x00);
  5677   001F72  0E52               	movlw	82
  5678   001F74  EC60  F011         	call	_I2C_2_Master_Write
  5679                           
  5680                           ;color.c: 82:  I2C_2_Master_Write(0xA0 | 0x14);
  5681   001F78  0EB4               	movlw	180
  5682   001F7A  EC60  F011         	call	_I2C_2_Master_Write
  5683                           
  5684                           ;color.c: 83:  I2C_2_Master_RepStart();
  5685   001F7E  EC70  F011         	call	_I2C_2_Master_RepStart	;wreg free
  5686                           
  5687                           ;color.c: 84:  I2C_2_Master_Write(0x52 | 0x01);
  5688   001F82  0E53               	movlw	83
  5689   001F84  EC60  F011         	call	_I2C_2_Master_Write
  5690                           
  5691                           ;color.c: 85:  tmp=I2C_2_Master_Read(1);
  5692   001F88  0E01               	movlw	1
  5693   001F8A  EC2D  F010         	call	_I2C_2_Master_Read
  5694   001F8E  6E09               	movwf	??_color_read_Clear^0,c
  5695   001F90  5009               	movf	??_color_read_Clear^0,w,c
  5696   001F92  6E0C               	movwf	color_read_Clear@tmp^0,c
  5697   001F94  6A0D               	clrf	(color_read_Clear@tmp+1)^0,c
  5698                           
  5699                           ;color.c: 86:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  5700   001F96  0E00               	movlw	0
  5701   001F98  EC2D  F010         	call	_I2C_2_Master_Read
  5702   001F9C  6E09               	movwf	??_color_read_Clear^0,c
  5703   001F9E  5009               	movf	??_color_read_Clear^0,w,c
  5704   001FA0  6E0B               	movwf	(??_color_read_Clear+2)^0,c
  5705   001FA2  6A0A               	clrf	(??_color_read_Clear+1)^0,c
  5706   001FA4  500C               	movf	color_read_Clear@tmp^0,w,c
  5707   001FA6  100A               	iorwf	(??_color_read_Clear+1)^0,w,c
  5708   001FA8  6E0C               	movwf	color_read_Clear@tmp^0,c
  5709   001FAA  500D               	movf	(color_read_Clear@tmp+1)^0,w,c
  5710   001FAC  100B               	iorwf	(??_color_read_Clear+2)^0,w,c
  5711   001FAE  6E0D               	movwf	(color_read_Clear@tmp+1)^0,c
  5712                           
  5713                           ;color.c: 87:  I2C_2_Master_Stop();
  5714   001FB0  EC66  F011         	call	_I2C_2_Master_Stop	;wreg free
  5715   001FB4                     
  5716                           ;color.c: 88:  return tmp;
  5717   001FB4  C00C  F007         	movff	color_read_Clear@tmp,?_color_read_Clear
  5718   001FB8  C00D  F008         	movff	color_read_Clear@tmp+1,?_color_read_Clear+1
  5719   001FBC  0012               	return		;funcret
  5720   001FBE                     __end_of_color_read_Clear:
  5721                           	callstack 0
  5722                           
  5723 ;; *************** function _color_read_Blue *****************
  5724 ;; Defined at:
  5725 ;;		line 46 in file "color.c"
  5726 ;; Parameters:    Size  Location     Type
  5727 ;;		None
  5728 ;; Auto vars:     Size  Location     Type
  5729 ;;  tmp             2   11[COMRAM] unsigned int 
  5730 ;; Return value:  Size  Location     Type
  5731 ;;                  2    6[COMRAM] unsigned int 
  5732 ;; Registers used:
  5733 ;;		wreg, status,2, status,0, cstack
  5734 ;; Tracked objects:
  5735 ;;		On entry : 0/0
  5736 ;;		On exit  : 0/0
  5737 ;;		Unchanged: 0/0
  5738 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5739 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5740 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5741 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5742 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5743 ;;Total ram usage:        7 bytes
  5744 ;; Hardware stack levels used: 1
  5745 ;; Hardware stack levels required when called: 3
  5746 ;; This function calls:
  5747 ;;		_I2C_2_Master_Read
  5748 ;;		_I2C_2_Master_RepStart
  5749 ;;		_I2C_2_Master_Start
  5750 ;;		_I2C_2_Master_Stop
  5751 ;;		_I2C_2_Master_Write
  5752 ;; This function is called by:
  5753 ;;		_READcolor
  5754 ;; This function uses a non-reentrant model
  5755 ;;
  5756                           
  5757                           	psect	text35
  5758   001FBE                     __ptext35:
  5759                           	callstack 0
  5760   001FBE                     _color_read_Blue:
  5761                           	callstack 25
  5762   001FBE                     
  5763                           ;color.c: 48:  unsigned int tmp;;color.c: 49:  I2C_2_Master_Start();
  5764   001FBE  EC6B  F011         	call	_I2C_2_Master_Start	;wreg free
  5765                           
  5766                           ;color.c: 50:  I2C_2_Master_Write(0x52 | 0x00);
  5767   001FC2  0E52               	movlw	82
  5768   001FC4  EC60  F011         	call	_I2C_2_Master_Write
  5769                           
  5770                           ;color.c: 52:  I2C_2_Master_Write(0xA0 | 0x1A);
  5771   001FC8  0EBA               	movlw	186
  5772   001FCA  EC60  F011         	call	_I2C_2_Master_Write
  5773                           
  5774                           ;color.c: 53:  I2C_2_Master_RepStart();
  5775   001FCE  EC70  F011         	call	_I2C_2_Master_RepStart	;wreg free
  5776                           
  5777                           ;color.c: 54:  I2C_2_Master_Write(0x52 | 0x01);
  5778   001FD2  0E53               	movlw	83
  5779   001FD4  EC60  F011         	call	_I2C_2_Master_Write
  5780                           
  5781                           ;color.c: 55:  tmp=I2C_2_Master_Read(1);
  5782   001FD8  0E01               	movlw	1
  5783   001FDA  EC2D  F010         	call	_I2C_2_Master_Read
  5784   001FDE  6E09               	movwf	??_color_read_Blue^0,c
  5785   001FE0  5009               	movf	??_color_read_Blue^0,w,c
  5786   001FE2  6E0C               	movwf	color_read_Blue@tmp^0,c
  5787   001FE4  6A0D               	clrf	(color_read_Blue@tmp+1)^0,c
  5788                           
  5789                           ;color.c: 56:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  5790   001FE6  0E00               	movlw	0
  5791   001FE8  EC2D  F010         	call	_I2C_2_Master_Read
  5792   001FEC  6E09               	movwf	??_color_read_Blue^0,c
  5793   001FEE  5009               	movf	??_color_read_Blue^0,w,c
  5794   001FF0  6E0B               	movwf	(??_color_read_Blue+2)^0,c
  5795   001FF2  6A0A               	clrf	(??_color_read_Blue+1)^0,c
  5796   001FF4  500C               	movf	color_read_Blue@tmp^0,w,c
  5797   001FF6  100A               	iorwf	(??_color_read_Blue+1)^0,w,c
  5798   001FF8  6E0C               	movwf	color_read_Blue@tmp^0,c
  5799   001FFA  500D               	movf	(color_read_Blue@tmp+1)^0,w,c
  5800   001FFC  100B               	iorwf	(??_color_read_Blue+2)^0,w,c
  5801   001FFE  6E0D               	movwf	(color_read_Blue@tmp+1)^0,c
  5802                           
  5803                           ;color.c: 57:  I2C_2_Master_Stop();
  5804   002000  EC66  F011         	call	_I2C_2_Master_Stop	;wreg free
  5805   002004                     
  5806                           ;color.c: 58:  return tmp;
  5807   002004  C00C  F007         	movff	color_read_Blue@tmp,?_color_read_Blue
  5808   002008  C00D  F008         	movff	color_read_Blue@tmp+1,?_color_read_Blue+1
  5809   00200C  0012               	return		;funcret
  5810   00200E                     __end_of_color_read_Blue:
  5811                           	callstack 0
  5812                           
  5813 ;; *************** function _I2C_2_Master_Write *****************
  5814 ;; Defined at:
  5815 ;;		line 45 in file "i2c.c"
  5816 ;; Parameters:    Size  Location     Type
  5817 ;;  data_byte       1    wreg     unsigned char 
  5818 ;; Auto vars:     Size  Location     Type
  5819 ;;  data_byte       1    3[COMRAM] unsigned char 
  5820 ;; Return value:  Size  Location     Type
  5821 ;;                  1    wreg      void 
  5822 ;; Registers used:
  5823 ;;		wreg, status,2, status,0, cstack
  5824 ;; Tracked objects:
  5825 ;;		On entry : 0/0
  5826 ;;		On exit  : 0/0
  5827 ;;		Unchanged: 0/0
  5828 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5829 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5830 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5831 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5832 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5833 ;;Total ram usage:        1 bytes
  5834 ;; Hardware stack levels used: 1
  5835 ;; Hardware stack levels required when called: 2
  5836 ;; This function calls:
  5837 ;;		_I2C_2_Master_Idle
  5838 ;; This function is called by:
  5839 ;;		_color_writetoaddr
  5840 ;;		_color_read_Red
  5841 ;;		_color_read_Blue
  5842 ;;		_color_read_Green
  5843 ;;		_color_read_Clear
  5844 ;; This function uses a non-reentrant model
  5845 ;;
  5846                           
  5847                           	psect	text36
  5848   0022C0                     __ptext36:
  5849                           	callstack 0
  5850   0022C0                     _I2C_2_Master_Write:
  5851                           	callstack 25
  5852                           
  5853                           ;incstack = 0
  5854                           ;I2C_2_Master_Write@data_byte stored from wreg
  5855   0022C0  6E04               	movwf	I2C_2_Master_Write@data_byte^0,c
  5856   0022C2                     
  5857                           ;i2c.c: 45: void I2C_2_Master_Write(unsigned char data_byte);i2c.c: 46: {;i2c.c: 47:   I
      +                          2C_2_Master_Idle();
  5858   0022C2  ECDC  F010         	call	_I2C_2_Master_Idle	;wreg free
  5859   0022C6                     
  5860                           ;i2c.c: 48:   SSP2BUF = data_byte;
  5861   0022C6  C004  FED5         	movff	I2C_2_Master_Write@data_byte,3797	;volatile
  5862   0022CA  0012               	return		;funcret
  5863   0022CC                     __end_of_I2C_2_Master_Write:
  5864                           	callstack 0
  5865                           
  5866 ;; *************** function _I2C_2_Master_Stop *****************
  5867 ;; Defined at:
  5868 ;;		line 39 in file "i2c.c"
  5869 ;; Parameters:    Size  Location     Type
  5870 ;;		None
  5871 ;; Auto vars:     Size  Location     Type
  5872 ;;		None
  5873 ;; Return value:  Size  Location     Type
  5874 ;;                  1    wreg      void 
  5875 ;; Registers used:
  5876 ;;		wreg, status,2, status,0, cstack
  5877 ;; Tracked objects:
  5878 ;;		On entry : 0/0
  5879 ;;		On exit  : 0/0
  5880 ;;		Unchanged: 0/0
  5881 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5882 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5883 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5884 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5885 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5886 ;;Total ram usage:        0 bytes
  5887 ;; Hardware stack levels used: 1
  5888 ;; Hardware stack levels required when called: 2
  5889 ;; This function calls:
  5890 ;;		_I2C_2_Master_Idle
  5891 ;; This function is called by:
  5892 ;;		_color_writetoaddr
  5893 ;;		_color_read_Red
  5894 ;;		_color_read_Blue
  5895 ;;		_color_read_Green
  5896 ;;		_color_read_Clear
  5897 ;; This function uses a non-reentrant model
  5898 ;;
  5899                           
  5900                           	psect	text37
  5901   0022CC                     __ptext37:
  5902                           	callstack 0
  5903   0022CC                     _I2C_2_Master_Stop:
  5904                           	callstack 25
  5905   0022CC                     
  5906                           ;i2c.c: 41:   I2C_2_Master_Idle();
  5907   0022CC  ECDC  F010         	call	_I2C_2_Master_Idle	;wreg free
  5908   0022D0                     
  5909                           ;i2c.c: 42:   SSP2CON2bits.PEN = 1;
  5910   0022D0  010E               	movlb	14	; () banked
  5911   0022D2  85DA               	bsf	218,2,b	;volatile
  5912   0022D4                     
  5913                           ; BSR set to: 14
  5914   0022D4  0012               	return		;funcret
  5915   0022D6                     __end_of_I2C_2_Master_Stop:
  5916                           	callstack 0
  5917                           
  5918 ;; *************** function _I2C_2_Master_Start *****************
  5919 ;; Defined at:
  5920 ;;		line 27 in file "i2c.c"
  5921 ;; Parameters:    Size  Location     Type
  5922 ;;		None
  5923 ;; Auto vars:     Size  Location     Type
  5924 ;;		None
  5925 ;; Return value:  Size  Location     Type
  5926 ;;                  1    wreg      void 
  5927 ;; Registers used:
  5928 ;;		wreg, status,2, status,0, cstack
  5929 ;; Tracked objects:
  5930 ;;		On entry : 0/0
  5931 ;;		On exit  : 0/0
  5932 ;;		Unchanged: 0/0
  5933 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5934 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5935 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5936 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5937 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5938 ;;Total ram usage:        0 bytes
  5939 ;; Hardware stack levels used: 1
  5940 ;; Hardware stack levels required when called: 2
  5941 ;; This function calls:
  5942 ;;		_I2C_2_Master_Idle
  5943 ;; This function is called by:
  5944 ;;		_color_writetoaddr
  5945 ;;		_color_read_Red
  5946 ;;		_color_read_Blue
  5947 ;;		_color_read_Green
  5948 ;;		_color_read_Clear
  5949 ;; This function uses a non-reentrant model
  5950 ;;
  5951                           
  5952                           	psect	text38
  5953   0022D6                     __ptext38:
  5954                           	callstack 0
  5955   0022D6                     _I2C_2_Master_Start:
  5956                           	callstack 25
  5957   0022D6                     
  5958                           ;i2c.c: 29:   I2C_2_Master_Idle();
  5959   0022D6  ECDC  F010         	call	_I2C_2_Master_Idle	;wreg free
  5960   0022DA                     
  5961                           ;i2c.c: 30:   SSP2CON2bits.SEN = 1;
  5962   0022DA  010E               	movlb	14	; () banked
  5963   0022DC  81DA               	bsf	218,0,b	;volatile
  5964   0022DE                     
  5965                           ; BSR set to: 14
  5966   0022DE  0012               	return		;funcret
  5967   0022E0                     __end_of_I2C_2_Master_Start:
  5968                           	callstack 0
  5969                           
  5970 ;; *************** function _I2C_2_Master_RepStart *****************
  5971 ;; Defined at:
  5972 ;;		line 33 in file "i2c.c"
  5973 ;; Parameters:    Size  Location     Type
  5974 ;;		None
  5975 ;; Auto vars:     Size  Location     Type
  5976 ;;		None
  5977 ;; Return value:  Size  Location     Type
  5978 ;;                  1    wreg      void 
  5979 ;; Registers used:
  5980 ;;		wreg, status,2, status,0, cstack
  5981 ;; Tracked objects:
  5982 ;;		On entry : 0/0
  5983 ;;		On exit  : 0/0
  5984 ;;		Unchanged: 0/0
  5985 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5986 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5987 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5988 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5989 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5990 ;;Total ram usage:        0 bytes
  5991 ;; Hardware stack levels used: 1
  5992 ;; Hardware stack levels required when called: 2
  5993 ;; This function calls:
  5994 ;;		_I2C_2_Master_Idle
  5995 ;; This function is called by:
  5996 ;;		_color_read_Red
  5997 ;;		_color_read_Blue
  5998 ;;		_color_read_Green
  5999 ;;		_color_read_Clear
  6000 ;; This function uses a non-reentrant model
  6001 ;;
  6002                           
  6003                           	psect	text39
  6004   0022E0                     __ptext39:
  6005                           	callstack 0
  6006   0022E0                     _I2C_2_Master_RepStart:
  6007                           	callstack 25
  6008   0022E0                     
  6009                           ;i2c.c: 35:   I2C_2_Master_Idle();
  6010   0022E0  ECDC  F010         	call	_I2C_2_Master_Idle	;wreg free
  6011   0022E4                     
  6012                           ;i2c.c: 36:   SSP2CON2bits.RSEN = 1;
  6013   0022E4  010E               	movlb	14	; () banked
  6014   0022E6  83DA               	bsf	218,1,b	;volatile
  6015   0022E8                     
  6016                           ; BSR set to: 14
  6017   0022E8  0012               	return		;funcret
  6018   0022EA                     __end_of_I2C_2_Master_RepStart:
  6019                           	callstack 0
  6020                           
  6021 ;; *************** function _I2C_2_Master_Read *****************
  6022 ;; Defined at:
  6023 ;;		line 51 in file "i2c.c"
  6024 ;; Parameters:    Size  Location     Type
  6025 ;;  ack             1    wreg     unsigned char 
  6026 ;; Auto vars:     Size  Location     Type
  6027 ;;  ack             1    4[COMRAM] unsigned char 
  6028 ;;  tmp             1    5[COMRAM] unsigned char 
  6029 ;; Return value:  Size  Location     Type
  6030 ;;                  1    wreg      unsigned char 
  6031 ;; Registers used:
  6032 ;;		wreg, status,2, status,0, cstack
  6033 ;; Tracked objects:
  6034 ;;		On entry : 0/0
  6035 ;;		On exit  : 0/0
  6036 ;;		Unchanged: 0/0
  6037 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6038 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6039 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6040 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6041 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6042 ;;Total ram usage:        3 bytes
  6043 ;; Hardware stack levels used: 1
  6044 ;; Hardware stack levels required when called: 2
  6045 ;; This function calls:
  6046 ;;		_I2C_2_Master_Idle
  6047 ;; This function is called by:
  6048 ;;		_color_read_Red
  6049 ;;		_color_read_Blue
  6050 ;;		_color_read_Green
  6051 ;;		_color_read_Clear
  6052 ;; This function uses a non-reentrant model
  6053 ;;
  6054                           
  6055                           	psect	text40
  6056   00205A                     __ptext40:
  6057                           	callstack 0
  6058   00205A                     _I2C_2_Master_Read:
  6059                           	callstack 25
  6060                           
  6061                           ; BSR set to: 14
  6062                           ;incstack = 0
  6063                           ;I2C_2_Master_Read@ack stored from wreg
  6064   00205A  6E05               	movwf	I2C_2_Master_Read@ack^0,c
  6065   00205C                     
  6066                           ;i2c.c: 51: unsigned char I2C_2_Master_Read(unsigned char ack);i2c.c: 52: {;i2c.c: 53:  
      +                           unsigned char tmp;;i2c.c: 54:   I2C_2_Master_Idle();
  6067   00205C  ECDC  F010         	call	_I2C_2_Master_Idle	;wreg free
  6068   002060                     
  6069                           ;i2c.c: 55:   SSP2CON2bits.RCEN = 1;
  6070   002060  010E               	movlb	14	; () banked
  6071   002062  87DA               	bsf	218,3,b	;volatile
  6072                           
  6073                           ;i2c.c: 56:   I2C_2_Master_Idle();
  6074   002064  ECDC  F010         	call	_I2C_2_Master_Idle	;wreg free
  6075   002068                     
  6076                           ;i2c.c: 57:   tmp = SSP2BUF;
  6077   002068  CED5 F006          	movff	3797,I2C_2_Master_Read@tmp	;volatile
  6078                           
  6079                           ;i2c.c: 58:   I2C_2_Master_Idle();
  6080   00206C  ECDC  F010         	call	_I2C_2_Master_Idle	;wreg free
  6081   002070                     
  6082                           ;i2c.c: 59:   SSP2CON2bits.ACKDT = !ack;
  6083   002070  5005               	movf	I2C_2_Master_Read@ack^0,w,c
  6084   002072  B4D8               	btfsc	status,2,c
  6085   002074  EF3E  F010         	goto	u1421
  6086   002078  EF42  F010         	goto	u1420
  6087   00207C                     u1421:
  6088   00207C  6A04               	clrf	??_I2C_2_Master_Read^0,c
  6089   00207E  2A04               	incf	??_I2C_2_Master_Read^0,f,c
  6090   002080  EF43  F010         	goto	u1438
  6091   002084                     u1420:
  6092   002084  6A04               	clrf	??_I2C_2_Master_Read^0,c
  6093   002086                     u1438:
  6094   002086  3A04               	swapf	??_I2C_2_Master_Read^0,f,c
  6095   002088  4604               	rlncf	??_I2C_2_Master_Read^0,f,c
  6096   00208A  010E               	movlb	14	; () banked
  6097   00208C  51DA               	movf	218,w,b	;volatile
  6098   00208E  1804               	xorwf	??_I2C_2_Master_Read^0,w,c
  6099   002090  0BDF               	andlw	-33
  6100   002092  1804               	xorwf	??_I2C_2_Master_Read^0,w,c
  6101   002094  6FDA               	movwf	218,b	;volatile
  6102   002096                     
  6103                           ; BSR set to: 14
  6104                           ;i2c.c: 60:   SSP2CON2bits.ACKEN = 1;
  6105   002096  89DA               	bsf	218,4,b	;volatile
  6106   002098                     
  6107                           ; BSR set to: 14
  6108                           ;i2c.c: 61:   return tmp;
  6109   002098  5006               	movf	I2C_2_Master_Read@tmp^0,w,c
  6110   00209A                     
  6111                           ; BSR set to: 14
  6112   00209A  0012               	return		;funcret
  6113   00209C                     __end_of_I2C_2_Master_Read:
  6114                           	callstack 0
  6115                           
  6116 ;; *************** function _I2C_2_Master_Idle *****************
  6117 ;; Defined at:
  6118 ;;		line 22 in file "i2c.c"
  6119 ;; Parameters:    Size  Location     Type
  6120 ;;		None
  6121 ;; Auto vars:     Size  Location     Type
  6122 ;;		None
  6123 ;; Return value:  Size  Location     Type
  6124 ;;                  1    wreg      void 
  6125 ;; Registers used:
  6126 ;;		wreg, status,2, status,0
  6127 ;; Tracked objects:
  6128 ;;		On entry : 0/0
  6129 ;;		On exit  : 0/0
  6130 ;;		Unchanged: 0/0
  6131 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6132 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6133 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6134 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6135 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6136 ;;Total ram usage:        1 bytes
  6137 ;; Hardware stack levels used: 1
  6138 ;; Hardware stack levels required when called: 1
  6139 ;; This function calls:
  6140 ;;		Nothing
  6141 ;; This function is called by:
  6142 ;;		_I2C_2_Master_Start
  6143 ;;		_I2C_2_Master_RepStart
  6144 ;;		_I2C_2_Master_Stop
  6145 ;;		_I2C_2_Master_Write
  6146 ;;		_I2C_2_Master_Read
  6147 ;; This function uses a non-reentrant model
  6148 ;;
  6149                           
  6150                           	psect	text41
  6151   0021B8                     __ptext41:
  6152                           	callstack 0
  6153   0021B8                     _I2C_2_Master_Idle:
  6154                           	callstack 25
  6155   0021B8                     l30:
  6156   0021B8  010E               	movlb	14	; () banked
  6157   0021BA  B5D8               	btfsc	216,2,b	;volatile
  6158   0021BC  EFE2  F010         	goto	u1281
  6159   0021C0  EFE4  F010         	goto	u1280
  6160   0021C4                     u1281:
  6161   0021C4  EFDC  F010         	goto	l30
  6162   0021C8                     u1280:
  6163   0021C8                     
  6164                           ; BSR set to: 14
  6165   0021C8  CEDA F003          	movff	3802,??_I2C_2_Master_Idle	;volatile
  6166   0021CC  0E1F               	movlw	31
  6167   0021CE  1603               	andwf	??_I2C_2_Master_Idle^0,f,c
  6168   0021D0  A4D8               	btfss	status,2,c
  6169   0021D2  EFED  F010         	goto	u1291
  6170   0021D6  EFEF  F010         	goto	u1290
  6171   0021DA                     u1291:
  6172   0021DA  EFDC  F010         	goto	l30
  6173   0021DE                     u1290:
  6174   0021DE                     
  6175                           ; BSR set to: 14
  6176   0021DE  0012               	return		;funcret
  6177   0021E0                     __end_of_I2C_2_Master_Idle:
  6178                           	callstack 0
  6179                           
  6180 ;; *************** function ___xxtofl *****************
  6181 ;; Defined at:
  6182 ;;		line 10 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\xxtofl.c"
  6183 ;; Parameters:    Size  Location     Type
  6184 ;;  sign            1    wreg     unsigned char 
  6185 ;;  val             4    2[COMRAM] long 
  6186 ;; Auto vars:     Size  Location     Type
  6187 ;;  sign            1   10[COMRAM] unsigned char 
  6188 ;;  arg             4   12[COMRAM] unsigned long 
  6189 ;;  exp             1   11[COMRAM] unsigned char 
  6190 ;; Return value:  Size  Location     Type
  6191 ;;                  4    2[COMRAM] unsigned char 
  6192 ;; Registers used:
  6193 ;;		wreg, status,2, status,0
  6194 ;; Tracked objects:
  6195 ;;		On entry : 0/0
  6196 ;;		On exit  : 0/0
  6197 ;;		Unchanged: 0/0
  6198 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6199 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6200 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6201 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6202 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6203 ;;Total ram usage:       14 bytes
  6204 ;; Hardware stack levels used: 1
  6205 ;; Hardware stack levels required when called: 1
  6206 ;; This function calls:
  6207 ;;		Nothing
  6208 ;; This function is called by:
  6209 ;;		_READcolor
  6210 ;; This function uses a non-reentrant model
  6211 ;;
  6212                           
  6213                           	psect	text42
  6214   000FD6                     __ptext42:
  6215                           	callstack 0
  6216   000FD6                     ___xxtofl:
  6217                           	callstack 27
  6218                           
  6219                           ; BSR set to: 14
  6220                           ;incstack = 0
  6221                           ;___xxtofl@sign stored from wreg
  6222   000FD6  6E0B               	movwf	___xxtofl@sign^0,c
  6223   000FD8  500B               	movf	___xxtofl@sign^0,w,c
  6224   000FDA  B4D8               	btfsc	status,2,c
  6225   000FDC  EFF2  F007         	goto	u1791
  6226   000FE0  EFF4  F007         	goto	u1790
  6227   000FE4                     u1791:
  6228   000FE4  EF16  F008         	goto	l1255
  6229   000FE8                     u1790:
  6230   000FE8  BE06               	btfsc	(___xxtofl@val+3)^0,7,c
  6231   000FEA  EFFB  F007         	goto	u1800
  6232   000FEE  EFF9  F007         	goto	u1801
  6233   000FF2                     u1801:
  6234   000FF2  EF16  F008         	goto	l1255
  6235   000FF6                     u1800:
  6236   000FF6  C003  F007         	movff	___xxtofl@val,??___xxtofl
  6237   000FFA  C004  F008         	movff	___xxtofl@val+1,??___xxtofl+1
  6238   000FFE  C005  F009         	movff	___xxtofl@val+2,??___xxtofl+2
  6239   001002  C006  F00A         	movff	___xxtofl@val+3,??___xxtofl+3
  6240   001006  1E07               	comf	??___xxtofl^0,f,c
  6241   001008  1E08               	comf	(??___xxtofl+1)^0,f,c
  6242   00100A  1E09               	comf	(??___xxtofl+2)^0,f,c
  6243   00100C  1E0A               	comf	(??___xxtofl+3)^0,f,c
  6244   00100E  2A07               	incf	??___xxtofl^0,f,c
  6245   001010  0E00               	movlw	0
  6246   001012  2208               	addwfc	(??___xxtofl+1)^0,f,c
  6247   001014  2209               	addwfc	(??___xxtofl+2)^0,f,c
  6248   001016  220A               	addwfc	(??___xxtofl+3)^0,f,c
  6249   001018  C007  F00D         	movff	??___xxtofl,___xxtofl@arg
  6250   00101C  C008  F00E         	movff	??___xxtofl+1,___xxtofl@arg+1
  6251   001020  C009  F00F         	movff	??___xxtofl+2,___xxtofl@arg+2
  6252   001024  C00A  F010         	movff	??___xxtofl+3,___xxtofl@arg+3
  6253   001028  EF1E  F008         	goto	l2709
  6254   00102C                     l1255:
  6255   00102C  C003  F00D         	movff	___xxtofl@val,___xxtofl@arg
  6256   001030  C004  F00E         	movff	___xxtofl@val+1,___xxtofl@arg+1
  6257   001034  C005  F00F         	movff	___xxtofl@val+2,___xxtofl@arg+2
  6258   001038  C006  F010         	movff	___xxtofl@val+3,___xxtofl@arg+3
  6259   00103C                     l2709:
  6260   00103C  5003               	movf	___xxtofl@val^0,w,c
  6261   00103E  1004               	iorwf	(___xxtofl@val+1)^0,w,c
  6262   001040  1005               	iorwf	(___xxtofl@val+2)^0,w,c
  6263   001042  1006               	iorwf	(___xxtofl@val+3)^0,w,c
  6264   001044  A4D8               	btfss	status,2,c
  6265   001046  EF27  F008         	goto	u1811
  6266   00104A  EF29  F008         	goto	u1810
  6267   00104E                     u1811:
  6268   00104E  EF33  F008         	goto	l2715
  6269   001052                     u1810:
  6270   001052  0E00               	movlw	0
  6271   001054  6E03               	movwf	?___xxtofl^0,c
  6272   001056  0E00               	movlw	0
  6273   001058  6E04               	movwf	(?___xxtofl+1)^0,c
  6274   00105A  0E00               	movlw	0
  6275   00105C  6E05               	movwf	(?___xxtofl+2)^0,c
  6276   00105E  0E00               	movlw	0
  6277   001060  6E06               	movwf	(?___xxtofl+3)^0,c
  6278   001062  EFC4  F008         	goto	l1258
  6279   001066                     l2715:
  6280   001066  0E96               	movlw	150
  6281   001068  6E0C               	movwf	___xxtofl@exp^0,c
  6282   00106A  EF3D  F008         	goto	l2719
  6283   00106E                     l2717:
  6284   00106E  2A0C               	incf	___xxtofl@exp^0,f,c
  6285   001070  90D8               	bcf	status,0,c
  6286   001072  3210               	rrcf	(___xxtofl@arg+3)^0,f,c
  6287   001074  320F               	rrcf	(___xxtofl@arg+2)^0,f,c
  6288   001076  320E               	rrcf	(___xxtofl@arg+1)^0,f,c
  6289   001078  320D               	rrcf	___xxtofl@arg^0,f,c
  6290   00107A                     l2719:
  6291   00107A  0E00               	movlw	0
  6292   00107C  140D               	andwf	___xxtofl@arg^0,w,c
  6293   00107E  6E07               	movwf	??___xxtofl^0,c
  6294   001080  0E00               	movlw	0
  6295   001082  140E               	andwf	(___xxtofl@arg+1)^0,w,c
  6296   001084  6E08               	movwf	(??___xxtofl+1)^0,c
  6297   001086  0E00               	movlw	0
  6298   001088  140F               	andwf	(___xxtofl@arg+2)^0,w,c
  6299   00108A  6E09               	movwf	(??___xxtofl+2)^0,c
  6300   00108C  0EFE               	movlw	254
  6301   00108E  1410               	andwf	(___xxtofl@arg+3)^0,w,c
  6302   001090  6E0A               	movwf	(??___xxtofl+3)^0,c
  6303   001092  5007               	movf	??___xxtofl^0,w,c
  6304   001094  1008               	iorwf	(??___xxtofl+1)^0,w,c
  6305   001096  1009               	iorwf	(??___xxtofl+2)^0,w,c
  6306   001098  100A               	iorwf	(??___xxtofl+3)^0,w,c
  6307   00109A  A4D8               	btfss	status,2,c
  6308   00109C  EF52  F008         	goto	u1821
  6309   0010A0  EF54  F008         	goto	u1820
  6310   0010A4                     u1821:
  6311   0010A4  EF37  F008         	goto	l2717
  6312   0010A8                     u1820:
  6313   0010A8  EF62  F008         	goto	l1262
  6314   0010AC                     l2721:
  6315   0010AC  2A0C               	incf	___xxtofl@exp^0,f,c
  6316   0010AE  0E01               	movlw	1
  6317   0010B0  260D               	addwf	___xxtofl@arg^0,f,c
  6318   0010B2  0E00               	movlw	0
  6319   0010B4  220E               	addwfc	(___xxtofl@arg+1)^0,f,c
  6320   0010B6  220F               	addwfc	(___xxtofl@arg+2)^0,f,c
  6321   0010B8  2210               	addwfc	(___xxtofl@arg+3)^0,f,c
  6322   0010BA  90D8               	bcf	status,0,c
  6323   0010BC  3210               	rrcf	(___xxtofl@arg+3)^0,f,c
  6324   0010BE  320F               	rrcf	(___xxtofl@arg+2)^0,f,c
  6325   0010C0  320E               	rrcf	(___xxtofl@arg+1)^0,f,c
  6326   0010C2  320D               	rrcf	___xxtofl@arg^0,f,c
  6327   0010C4                     l1262:
  6328   0010C4  0E00               	movlw	0
  6329   0010C6  140D               	andwf	___xxtofl@arg^0,w,c
  6330   0010C8  6E07               	movwf	??___xxtofl^0,c
  6331   0010CA  0E00               	movlw	0
  6332   0010CC  140E               	andwf	(___xxtofl@arg+1)^0,w,c
  6333   0010CE  6E08               	movwf	(??___xxtofl+1)^0,c
  6334   0010D0  0E00               	movlw	0
  6335   0010D2  140F               	andwf	(___xxtofl@arg+2)^0,w,c
  6336   0010D4  6E09               	movwf	(??___xxtofl+2)^0,c
  6337   0010D6  0EFF               	movlw	255
  6338   0010D8  1410               	andwf	(___xxtofl@arg+3)^0,w,c
  6339   0010DA  6E0A               	movwf	(??___xxtofl+3)^0,c
  6340   0010DC  5007               	movf	??___xxtofl^0,w,c
  6341   0010DE  1008               	iorwf	(??___xxtofl+1)^0,w,c
  6342   0010E0  1009               	iorwf	(??___xxtofl+2)^0,w,c
  6343   0010E2  100A               	iorwf	(??___xxtofl+3)^0,w,c
  6344   0010E4  A4D8               	btfss	status,2,c
  6345   0010E6  EF77  F008         	goto	u1831
  6346   0010EA  EF79  F008         	goto	u1830
  6347   0010EE                     u1831:
  6348   0010EE  EF56  F008         	goto	l2721
  6349   0010F2                     u1830:
  6350   0010F2  EF81  F008         	goto	l2729
  6351   0010F6                     l2727:
  6352   0010F6  060C               	decf	___xxtofl@exp^0,f,c
  6353   0010F8  90D8               	bcf	status,0,c
  6354   0010FA  360D               	rlcf	___xxtofl@arg^0,f,c
  6355   0010FC  360E               	rlcf	(___xxtofl@arg+1)^0,f,c
  6356   0010FE  360F               	rlcf	(___xxtofl@arg+2)^0,f,c
  6357   001100  3610               	rlcf	(___xxtofl@arg+3)^0,f,c
  6358   001102                     l2729:
  6359   001102  BE0F               	btfsc	(___xxtofl@arg+2)^0,7,c
  6360   001104  EF86  F008         	goto	u1841
  6361   001108  EF88  F008         	goto	u1840
  6362   00110C                     u1841:
  6363   00110C  EF90  F008         	goto	l1269
  6364   001110                     u1840:
  6365   001110  0E02               	movlw	2
  6366   001112  600C               	cpfslt	___xxtofl@exp^0,c
  6367   001114  EF8E  F008         	goto	u1851
  6368   001118  EF90  F008         	goto	u1850
  6369   00111C                     u1851:
  6370   00111C  EF7B  F008         	goto	l2727
  6371   001120                     u1850:
  6372   001120                     l1269:
  6373   001120  B00C               	btfsc	___xxtofl@exp^0,0,c
  6374   001122  EF95  F008         	goto	u1861
  6375   001126  EF97  F008         	goto	u1860
  6376   00112A                     u1861:
  6377   00112A  EF98  F008         	goto	l2735
  6378   00112E                     u1860:
  6379   00112E  9E0F               	bcf	(___xxtofl@arg+2)^0,7,c
  6380   001130                     l2735:
  6381   001130  90D8               	bcf	status,0,c
  6382   001132  320C               	rrcf	___xxtofl@exp^0,f,c
  6383   001134  C00C  F007         	movff	___xxtofl@exp,??___xxtofl
  6384   001138  6A08               	clrf	(??___xxtofl+1)^0,c
  6385   00113A  6A09               	clrf	(??___xxtofl+2)^0,c
  6386   00113C  6A0A               	clrf	(??___xxtofl+3)^0,c
  6387   00113E  C007  F00A         	movff	??___xxtofl,??___xxtofl+3
  6388   001142  6A09               	clrf	(??___xxtofl+2)^0,c
  6389   001144  6A08               	clrf	(??___xxtofl+1)^0,c
  6390   001146  6A07               	clrf	??___xxtofl^0,c
  6391   001148  5007               	movf	??___xxtofl^0,w,c
  6392   00114A  120D               	iorwf	___xxtofl@arg^0,f,c
  6393   00114C  5008               	movf	(??___xxtofl+1)^0,w,c
  6394   00114E  120E               	iorwf	(___xxtofl@arg+1)^0,f,c
  6395   001150  5009               	movf	(??___xxtofl+2)^0,w,c
  6396   001152  120F               	iorwf	(___xxtofl@arg+2)^0,f,c
  6397   001154  500A               	movf	(??___xxtofl+3)^0,w,c
  6398   001156  1210               	iorwf	(___xxtofl@arg+3)^0,f,c
  6399   001158  500B               	movf	___xxtofl@sign^0,w,c
  6400   00115A  B4D8               	btfsc	status,2,c
  6401   00115C  EFB2  F008         	goto	u1871
  6402   001160  EFB4  F008         	goto	u1870
  6403   001164                     u1871:
  6404   001164  EFBC  F008         	goto	l2745
  6405   001168                     u1870:
  6406   001168  BE06               	btfsc	(___xxtofl@val+3)^0,7,c
  6407   00116A  EFBB  F008         	goto	u1880
  6408   00116E  EFB9  F008         	goto	u1881
  6409   001172                     u1881:
  6410   001172  EFBC  F008         	goto	l2745
  6411   001176                     u1880:
  6412   001176  8E10               	bsf	(___xxtofl@arg+3)^0,7,c
  6413   001178                     l2745:
  6414   001178  C00D  F003         	movff	___xxtofl@arg,?___xxtofl
  6415   00117C  C00E  F004         	movff	___xxtofl@arg+1,?___xxtofl+1
  6416   001180  C00F  F005         	movff	___xxtofl@arg+2,?___xxtofl+2
  6417   001184  C010  F006         	movff	___xxtofl@arg+3,?___xxtofl+3
  6418   001188                     l1258:
  6419   001188  0012               	return		;funcret
  6420   00118A                     __end_of___xxtofl:
  6421                           	callstack 0
  6422                           
  6423 ;; *************** function ___fldiv *****************
  6424 ;; Defined at:
  6425 ;;		line 11 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\sprcdiv.c"
  6426 ;; Parameters:    Size  Location     Type
  6427 ;;  b               4   16[COMRAM] unsigned char 
  6428 ;;  a               4   20[COMRAM] unsigned char 
  6429 ;; Auto vars:     Size  Location     Type
  6430 ;;  grs             4   35[COMRAM] unsigned long 
  6431 ;;  rem             4   28[COMRAM] unsigned long 
  6432 ;;  new_exp         2   33[COMRAM] short 
  6433 ;;  aexp            1   40[COMRAM] unsigned char 
  6434 ;;  bexp            1   39[COMRAM] unsigned char 
  6435 ;;  sign            1   32[COMRAM] unsigned char 
  6436 ;; Return value:  Size  Location     Type
  6437 ;;                  4   16[COMRAM] unsigned char 
  6438 ;; Registers used:
  6439 ;;		wreg, status,2, status,0
  6440 ;; Tracked objects:
  6441 ;;		On entry : 0/0
  6442 ;;		On exit  : 0/0
  6443 ;;		Unchanged: 0/0
  6444 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6445 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6446 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6447 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6448 ;;      Totals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6449 ;;Total ram usage:       25 bytes
  6450 ;; Hardware stack levels used: 1
  6451 ;; Hardware stack levels required when called: 1
  6452 ;; This function calls:
  6453 ;;		Nothing
  6454 ;; This function is called by:
  6455 ;;		_READcolor
  6456 ;; This function uses a non-reentrant model
  6457 ;;
  6458                           
  6459                           	psect	text43
  6460   000754                     __ptext43:
  6461                           	callstack 0
  6462   000754                     ___fldiv:
  6463                           	callstack 27
  6464   000754  5014               	movf	(___fldiv@b+3)^0,w,c
  6465   000756  0B80               	andlw	128
  6466   000758  6E21               	movwf	___fldiv@sign^0,c
  6467   00075A  5014               	movf	(___fldiv@b+3)^0,w,c
  6468   00075C  2414               	addwf	(___fldiv@b+3)^0,w,c
  6469   00075E  6E28               	movwf	___fldiv@bexp^0,c
  6470   000760  AE13               	btfss	(___fldiv@b+2)^0,7,c
  6471   000762  EFB5  F003         	goto	u1561
  6472   000766  EFB7  F003         	goto	u1560
  6473   00076A                     u1561:
  6474   00076A  EFB8  F003         	goto	l2571
  6475   00076E                     u1560:
  6476   00076E  8028               	bsf	___fldiv@bexp^0,0,c
  6477   000770                     l2571:
  6478   000770  5028               	movf	___fldiv@bexp^0,w,c
  6479   000772  B4D8               	btfsc	status,2,c
  6480   000774  EFBE  F003         	goto	u1571
  6481   000778  EFC0  F003         	goto	u1570
  6482   00077C                     u1571:
  6483   00077C  EFD5  F003         	goto	l2581
  6484   000780                     u1570:
  6485   000780  2828               	incf	___fldiv@bexp^0,w,c
  6486   000782  A4D8               	btfss	status,2,c
  6487   000784  EFC6  F003         	goto	u1581
  6488   000788  EFC8  F003         	goto	u1580
  6489   00078C                     u1581:
  6490   00078C  EFD0  F003         	goto	l2577
  6491   000790                     u1580:
  6492   000790  0E00               	movlw	0
  6493   000792  6E11               	movwf	___fldiv@b^0,c
  6494   000794  0E00               	movlw	0
  6495   000796  6E12               	movwf	(___fldiv@b+1)^0,c
  6496   000798  0E00               	movlw	0
  6497   00079A  6E13               	movwf	(___fldiv@b+2)^0,c
  6498   00079C  0E00               	movlw	0
  6499   00079E  6E14               	movwf	(___fldiv@b+3)^0,c
  6500   0007A0                     l2577:
  6501   0007A0  8E13               	bsf	(___fldiv@b+2)^0,7,c
  6502   0007A2  0E00               	movlw	0
  6503   0007A4  6E14               	movwf	(___fldiv@b+3)^0,c
  6504   0007A6  EFDD  F003         	goto	l2583
  6505   0007AA                     l2581:
  6506   0007AA  0E00               	movlw	0
  6507   0007AC  6E11               	movwf	___fldiv@b^0,c
  6508   0007AE  0E00               	movlw	0
  6509   0007B0  6E12               	movwf	(___fldiv@b+1)^0,c
  6510   0007B2  0E00               	movlw	0
  6511   0007B4  6E13               	movwf	(___fldiv@b+2)^0,c
  6512   0007B6  0E00               	movlw	0
  6513   0007B8  6E14               	movwf	(___fldiv@b+3)^0,c
  6514   0007BA                     l2583:
  6515   0007BA  5018               	movf	(___fldiv@a+3)^0,w,c
  6516   0007BC  0B80               	andlw	128
  6517   0007BE  1A21               	xorwf	___fldiv@sign^0,f,c
  6518   0007C0  5018               	movf	(___fldiv@a+3)^0,w,c
  6519   0007C2  2418               	addwf	(___fldiv@a+3)^0,w,c
  6520   0007C4  6E29               	movwf	___fldiv@aexp^0,c
  6521   0007C6  AE17               	btfss	(___fldiv@a+2)^0,7,c
  6522   0007C8  EFE8  F003         	goto	u1591
  6523   0007CC  EFEA  F003         	goto	u1590
  6524   0007D0                     u1591:
  6525   0007D0  EFEB  F003         	goto	l2591
  6526   0007D4                     u1590:
  6527   0007D4  8029               	bsf	___fldiv@aexp^0,0,c
  6528   0007D6                     l2591:
  6529   0007D6  5029               	movf	___fldiv@aexp^0,w,c
  6530   0007D8  B4D8               	btfsc	status,2,c
  6531   0007DA  EFF1  F003         	goto	u1601
  6532   0007DE  EFF3  F003         	goto	u1600
  6533   0007E2                     u1601:
  6534   0007E2  EF08  F004         	goto	l2601
  6535   0007E6                     u1600:
  6536   0007E6  2829               	incf	___fldiv@aexp^0,w,c
  6537   0007E8  A4D8               	btfss	status,2,c
  6538   0007EA  EFF9  F003         	goto	u1611
  6539   0007EE  EFFB  F003         	goto	u1610
  6540   0007F2                     u1611:
  6541   0007F2  EF03  F004         	goto	l2597
  6542   0007F6                     u1610:
  6543   0007F6  0E00               	movlw	0
  6544   0007F8  6E15               	movwf	___fldiv@a^0,c
  6545   0007FA  0E00               	movlw	0
  6546   0007FC  6E16               	movwf	(___fldiv@a+1)^0,c
  6547   0007FE  0E00               	movlw	0
  6548   000800  6E17               	movwf	(___fldiv@a+2)^0,c
  6549   000802  0E00               	movlw	0
  6550   000804  6E18               	movwf	(___fldiv@a+3)^0,c
  6551   000806                     l2597:
  6552   000806  8E17               	bsf	(___fldiv@a+2)^0,7,c
  6553   000808  0E00               	movlw	0
  6554   00080A  6E18               	movwf	(___fldiv@a+3)^0,c
  6555   00080C  EF10  F004         	goto	l2603
  6556   000810                     l2601:
  6557   000810  0E00               	movlw	0
  6558   000812  6E15               	movwf	___fldiv@a^0,c
  6559   000814  0E00               	movlw	0
  6560   000816  6E16               	movwf	(___fldiv@a+1)^0,c
  6561   000818  0E00               	movlw	0
  6562   00081A  6E17               	movwf	(___fldiv@a+2)^0,c
  6563   00081C  0E00               	movlw	0
  6564   00081E  6E18               	movwf	(___fldiv@a+3)^0,c
  6565   000820                     l2603:
  6566   000820  5015               	movf	___fldiv@a^0,w,c
  6567   000822  1016               	iorwf	(___fldiv@a+1)^0,w,c
  6568   000824  1017               	iorwf	(___fldiv@a+2)^0,w,c
  6569   000826  1018               	iorwf	(___fldiv@a+3)^0,w,c
  6570   000828  A4D8               	btfss	status,2,c
  6571   00082A  EF19  F004         	goto	u1621
  6572   00082E  EF1B  F004         	goto	u1620
  6573   000832                     u1621:
  6574   000832  EF33  F004         	goto	l2615
  6575   000836                     u1620:
  6576   000836  0E00               	movlw	0
  6577   000838  6E11               	movwf	___fldiv@b^0,c
  6578   00083A  0E00               	movlw	0
  6579   00083C  6E12               	movwf	(___fldiv@b+1)^0,c
  6580   00083E  0E00               	movlw	0
  6581   000840  6E13               	movwf	(___fldiv@b+2)^0,c
  6582   000842  0E00               	movlw	0
  6583   000844  6E14               	movwf	(___fldiv@b+3)^0,c
  6584   000846  0E80               	movlw	128
  6585   000848  1213               	iorwf	(___fldiv@b+2)^0,f,c
  6586   00084A  0E7F               	movlw	127
  6587   00084C  1214               	iorwf	(___fldiv@b+3)^0,f,c
  6588   00084E                     l2609:
  6589   00084E  5021               	movf	___fldiv@sign^0,w,c
  6590   000850  1214               	iorwf	(___fldiv@b+3)^0,f,c
  6591   000852  C011  F011         	movff	___fldiv@b,?___fldiv
  6592   000856  C012  F012         	movff	___fldiv@b+1,?___fldiv+1
  6593   00085A  C013  F013         	movff	___fldiv@b+2,?___fldiv+2
  6594   00085E  C014  F014         	movff	___fldiv@b+3,?___fldiv+3
  6595   000862  EF76  F005         	goto	l1182
  6596   000866                     l2615:
  6597   000866  5028               	movf	___fldiv@bexp^0,w,c
  6598   000868  A4D8               	btfss	status,2,c
  6599   00086A  EF39  F004         	goto	u1631
  6600   00086E  EF3B  F004         	goto	u1630
  6601   000872                     u1631:
  6602   000872  EF45  F004         	goto	l2623
  6603   000876                     u1630:
  6604   000876  0E00               	movlw	0
  6605   000878  6E11               	movwf	?___fldiv^0,c
  6606   00087A  0E00               	movlw	0
  6607   00087C  6E12               	movwf	(?___fldiv+1)^0,c
  6608   00087E  0E00               	movlw	0
  6609   000880  6E13               	movwf	(?___fldiv+2)^0,c
  6610   000882  0E00               	movlw	0
  6611   000884  6E14               	movwf	(?___fldiv+3)^0,c
  6612   000886  EF76  F005         	goto	l1182
  6613   00088A                     l2623:
  6614   00088A  5029               	movf	___fldiv@aexp^0,w,c
  6615   00088C  C028  F019         	movff	___fldiv@bexp,??___fldiv
  6616   000890  6A1A               	clrf	(??___fldiv+1)^0,c
  6617   000892  5E19               	subwf	??___fldiv^0,f,c
  6618   000894  0E00               	movlw	0
  6619   000896  5A1A               	subwfb	(??___fldiv+1)^0,f,c
  6620   000898  0E7F               	movlw	127
  6621   00089A  2419               	addwf	??___fldiv^0,w,c
  6622   00089C  6E22               	movwf	___fldiv@new_exp^0,c
  6623   00089E  0E00               	movlw	0
  6624   0008A0  201A               	addwfc	(??___fldiv+1)^0,w,c
  6625   0008A2  6E23               	movwf	(___fldiv@new_exp+1)^0,c
  6626   0008A4  C011  F01D         	movff	___fldiv@b,___fldiv@rem
  6627   0008A8  C012  F01E         	movff	___fldiv@b+1,___fldiv@rem+1
  6628   0008AC  C013  F01F         	movff	___fldiv@b+2,___fldiv@rem+2
  6629   0008B0  C014  F020         	movff	___fldiv@b+3,___fldiv@rem+3
  6630   0008B4  0E00               	movlw	0
  6631   0008B6  6E11               	movwf	___fldiv@b^0,c
  6632   0008B8  0E00               	movlw	0
  6633   0008BA  6E12               	movwf	(___fldiv@b+1)^0,c
  6634   0008BC  0E00               	movlw	0
  6635   0008BE  6E13               	movwf	(___fldiv@b+2)^0,c
  6636   0008C0  0E00               	movlw	0
  6637   0008C2  6E14               	movwf	(___fldiv@b+3)^0,c
  6638   0008C4  0E00               	movlw	0
  6639   0008C6  6E24               	movwf	___fldiv@grs^0,c
  6640   0008C8  0E00               	movlw	0
  6641   0008CA  6E25               	movwf	(___fldiv@grs+1)^0,c
  6642   0008CC  0E00               	movlw	0
  6643   0008CE  6E26               	movwf	(___fldiv@grs+2)^0,c
  6644   0008D0  0E00               	movlw	0
  6645   0008D2  6E27               	movwf	(___fldiv@grs+3)^0,c
  6646   0008D4  0E00               	movlw	0
  6647   0008D6  6E29               	movwf	___fldiv@aexp^0,c
  6648   0008D8  EFA6  F004         	goto	l1184
  6649   0008DC                     l2633:
  6650   0008DC  5029               	movf	___fldiv@aexp^0,w,c
  6651   0008DE  B4D8               	btfsc	status,2,c
  6652   0008E0  EF74  F004         	goto	u1641
  6653   0008E4  EF76  F004         	goto	u1640
  6654   0008E8                     u1641:
  6655   0008E8  EF8D  F004         	goto	l2641
  6656   0008EC                     u1640:
  6657   0008EC  90D8               	bcf	status,0,c
  6658   0008EE  361D               	rlcf	___fldiv@rem^0,f,c
  6659   0008F0  361E               	rlcf	(___fldiv@rem+1)^0,f,c
  6660   0008F2  361F               	rlcf	(___fldiv@rem+2)^0,f,c
  6661   0008F4  3620               	rlcf	(___fldiv@rem+3)^0,f,c
  6662   0008F6  90D8               	bcf	status,0,c
  6663   0008F8  3611               	rlcf	___fldiv@b^0,f,c
  6664   0008FA  3612               	rlcf	(___fldiv@b+1)^0,f,c
  6665   0008FC  3613               	rlcf	(___fldiv@b+2)^0,f,c
  6666   0008FE  3614               	rlcf	(___fldiv@b+3)^0,f,c
  6667   000900  AE27               	btfss	(___fldiv@grs+3)^0,7,c
  6668   000902  EF85  F004         	goto	u1651
  6669   000906  EF87  F004         	goto	u1650
  6670   00090A                     u1651:
  6671   00090A  EF88  F004         	goto	l1187
  6672   00090E                     u1650:
  6673   00090E  8011               	bsf	___fldiv@b^0,0,c
  6674   000910                     l1187:
  6675   000910  90D8               	bcf	status,0,c
  6676   000912  3624               	rlcf	___fldiv@grs^0,f,c
  6677   000914  3625               	rlcf	(___fldiv@grs+1)^0,f,c
  6678   000916  3626               	rlcf	(___fldiv@grs+2)^0,f,c
  6679   000918  3627               	rlcf	(___fldiv@grs+3)^0,f,c
  6680   00091A                     l2641:
  6681   00091A  5015               	movf	___fldiv@a^0,w,c
  6682   00091C  5C1D               	subwf	___fldiv@rem^0,w,c
  6683   00091E  5016               	movf	(___fldiv@a+1)^0,w,c
  6684   000920  581E               	subwfb	(___fldiv@rem+1)^0,w,c
  6685   000922  5017               	movf	(___fldiv@a+2)^0,w,c
  6686   000924  581F               	subwfb	(___fldiv@rem+2)^0,w,c
  6687   000926  5018               	movf	(___fldiv@a+3)^0,w,c
  6688   000928  5820               	subwfb	(___fldiv@rem+3)^0,w,c
  6689   00092A  A0D8               	btfss	status,0,c
  6690   00092C  EF9A  F004         	goto	u1661
  6691   000930  EF9C  F004         	goto	u1660
  6692   000934                     u1661:
  6693   000934  EFA5  F004         	goto	l2647
  6694   000938                     u1660:
  6695   000938  8C27               	bsf	(___fldiv@grs+3)^0,6,c
  6696   00093A  5015               	movf	___fldiv@a^0,w,c
  6697   00093C  5E1D               	subwf	___fldiv@rem^0,f,c
  6698   00093E  5016               	movf	(___fldiv@a+1)^0,w,c
  6699   000940  5A1E               	subwfb	(___fldiv@rem+1)^0,f,c
  6700   000942  5017               	movf	(___fldiv@a+2)^0,w,c
  6701   000944  5A1F               	subwfb	(___fldiv@rem+2)^0,f,c
  6702   000946  5018               	movf	(___fldiv@a+3)^0,w,c
  6703   000948  5A20               	subwfb	(___fldiv@rem+3)^0,f,c
  6704   00094A                     l2647:
  6705   00094A  2A29               	incf	___fldiv@aexp^0,f,c
  6706   00094C                     l1184:
  6707   00094C  0E19               	movlw	25
  6708   00094E  6429               	cpfsgt	___fldiv@aexp^0,c
  6709   000950  EFAC  F004         	goto	u1671
  6710   000954  EFAE  F004         	goto	u1670
  6711   000958                     u1671:
  6712   000958  EF6E  F004         	goto	l2633
  6713   00095C                     u1670:
  6714   00095C  501D               	movf	___fldiv@rem^0,w,c
  6715   00095E  101E               	iorwf	(___fldiv@rem+1)^0,w,c
  6716   000960  101F               	iorwf	(___fldiv@rem+2)^0,w,c
  6717   000962  1020               	iorwf	(___fldiv@rem+3)^0,w,c
  6718   000964  B4D8               	btfsc	status,2,c
  6719   000966  EFB7  F004         	goto	u1681
  6720   00096A  EFB9  F004         	goto	u1680
  6721   00096E                     u1681:
  6722   00096E  EFD1  F004         	goto	l2659
  6723   000972                     u1680:
  6724   000972  8024               	bsf	___fldiv@grs^0,0,c
  6725   000974  EFD1  F004         	goto	l2659
  6726   000978                     l2653:
  6727   000978  90D8               	bcf	status,0,c
  6728   00097A  3611               	rlcf	___fldiv@b^0,f,c
  6729   00097C  3612               	rlcf	(___fldiv@b+1)^0,f,c
  6730   00097E  3613               	rlcf	(___fldiv@b+2)^0,f,c
  6731   000980  3614               	rlcf	(___fldiv@b+3)^0,f,c
  6732   000982  AE27               	btfss	(___fldiv@grs+3)^0,7,c
  6733   000984  EFC6  F004         	goto	u1691
  6734   000988  EFC8  F004         	goto	u1690
  6735   00098C                     u1691:
  6736   00098C  EFC9  F004         	goto	l1193
  6737   000990                     u1690:
  6738   000990  8011               	bsf	___fldiv@b^0,0,c
  6739   000992                     l1193:
  6740   000992  90D8               	bcf	status,0,c
  6741   000994  3624               	rlcf	___fldiv@grs^0,f,c
  6742   000996  3625               	rlcf	(___fldiv@grs+1)^0,f,c
  6743   000998  3626               	rlcf	(___fldiv@grs+2)^0,f,c
  6744   00099A  3627               	rlcf	(___fldiv@grs+3)^0,f,c
  6745   00099C  0622               	decf	___fldiv@new_exp^0,f,c
  6746   00099E  A0D8               	btfss	status,0,c
  6747   0009A0  0623               	decf	(___fldiv@new_exp+1)^0,f,c
  6748   0009A2                     l2659:
  6749   0009A2  AE13               	btfss	(___fldiv@b+2)^0,7,c
  6750   0009A4  EFD6  F004         	goto	u1701
  6751   0009A8  EFD8  F004         	goto	u1700
  6752   0009AC                     u1701:
  6753   0009AC  EFBC  F004         	goto	l2653
  6754   0009B0                     u1700:
  6755   0009B0  0E00               	movlw	0
  6756   0009B2  6E29               	movwf	___fldiv@aexp^0,c
  6757   0009B4  AE27               	btfss	(___fldiv@grs+3)^0,7,c
  6758   0009B6  EFDF  F004         	goto	u1711
  6759   0009BA  EFE1  F004         	goto	u1710
  6760   0009BE                     u1711:
  6761   0009BE  EF05  F005         	goto	l1195
  6762   0009C2                     u1710:
  6763   0009C2  0EFF               	movlw	255
  6764   0009C4  1424               	andwf	___fldiv@grs^0,w,c
  6765   0009C6  6E19               	movwf	??___fldiv^0,c
  6766   0009C8  0EFF               	movlw	255
  6767   0009CA  1425               	andwf	(___fldiv@grs+1)^0,w,c
  6768   0009CC  6E1A               	movwf	(??___fldiv+1)^0,c
  6769   0009CE  0EFF               	movlw	255
  6770   0009D0  1426               	andwf	(___fldiv@grs+2)^0,w,c
  6771   0009D2  6E1B               	movwf	(??___fldiv+2)^0,c
  6772   0009D4  0E7F               	movlw	127
  6773   0009D6  1427               	andwf	(___fldiv@grs+3)^0,w,c
  6774   0009D8  6E1C               	movwf	(??___fldiv+3)^0,c
  6775   0009DA  5019               	movf	??___fldiv^0,w,c
  6776   0009DC  101A               	iorwf	(??___fldiv+1)^0,w,c
  6777   0009DE  101B               	iorwf	(??___fldiv+2)^0,w,c
  6778   0009E0  101C               	iorwf	(??___fldiv+3)^0,w,c
  6779   0009E2  B4D8               	btfsc	status,2,c
  6780   0009E4  EFF6  F004         	goto	u1721
  6781   0009E8  EFF8  F004         	goto	u1720
  6782   0009EC                     u1721:
  6783   0009EC  EFFC  F004         	goto	l1196
  6784   0009F0                     u1720:
  6785   0009F0                     l2667:
  6786   0009F0  0E01               	movlw	1
  6787   0009F2  6E29               	movwf	___fldiv@aexp^0,c
  6788   0009F4  EF05  F005         	goto	l1195
  6789   0009F8                     l1196:
  6790   0009F8  A011               	btfss	___fldiv@b^0,0,c
  6791   0009FA  EF01  F005         	goto	u1731
  6792   0009FE  EF03  F005         	goto	u1730
  6793   000A02                     u1731:
  6794   000A02  EF05  F005         	goto	l1195
  6795   000A06                     u1730:
  6796   000A06  EFF8  F004         	goto	l2667
  6797   000A0A                     l1195:
  6798   000A0A  5029               	movf	___fldiv@aexp^0,w,c
  6799   000A0C  B4D8               	btfsc	status,2,c
  6800   000A0E  EF0B  F005         	goto	u1741
  6801   000A12  EF0D  F005         	goto	u1740
  6802   000A16                     u1741:
  6803   000A16  EF31  F005         	goto	l2679
  6804   000A1A                     u1740:
  6805   000A1A  0E01               	movlw	1
  6806   000A1C  2611               	addwf	___fldiv@b^0,f,c
  6807   000A1E  0E00               	movlw	0
  6808   000A20  2212               	addwfc	(___fldiv@b+1)^0,f,c
  6809   000A22  2213               	addwfc	(___fldiv@b+2)^0,f,c
  6810   000A24  2214               	addwfc	(___fldiv@b+3)^0,f,c
  6811   000A26  A014               	btfss	(___fldiv@b+3)^0,0,c
  6812   000A28  EF18  F005         	goto	u1751
  6813   000A2C  EF1A  F005         	goto	u1750
  6814   000A30                     u1751:
  6815   000A30  EF31  F005         	goto	l2679
  6816   000A34                     u1750:
  6817   000A34  C011  F019         	movff	___fldiv@b,??___fldiv
  6818   000A38  C012  F01A         	movff	___fldiv@b+1,??___fldiv+1
  6819   000A3C  C013  F01B         	movff	___fldiv@b+2,??___fldiv+2
  6820   000A40  C014  F01C         	movff	___fldiv@b+3,??___fldiv+3
  6821   000A44  341C               	rlcf	(??___fldiv+3)^0,w,c
  6822   000A46  321C               	rrcf	(??___fldiv+3)^0,f,c
  6823   000A48  321B               	rrcf	(??___fldiv+2)^0,f,c
  6824   000A4A  321A               	rrcf	(??___fldiv+1)^0,f,c
  6825   000A4C  3219               	rrcf	??___fldiv^0,f,c
  6826   000A4E  C019  F011         	movff	??___fldiv,___fldiv@b
  6827   000A52  C01A  F012         	movff	??___fldiv+1,___fldiv@b+1
  6828   000A56  C01B  F013         	movff	??___fldiv+2,___fldiv@b+2
  6829   000A5A  C01C  F014         	movff	??___fldiv+3,___fldiv@b+3
  6830   000A5E  4A22               	infsnz	___fldiv@new_exp^0,f,c
  6831   000A60  2A23               	incf	(___fldiv@new_exp+1)^0,f,c
  6832   000A62                     l2679:
  6833   000A62  BE23               	btfsc	(___fldiv@new_exp+1)^0,7,c
  6834   000A64  EF3C  F005         	goto	u1761
  6835   000A68  5023               	movf	(___fldiv@new_exp+1)^0,w,c
  6836   000A6A  E108               	bnz	u1760
  6837   000A6C  2822               	incf	___fldiv@new_exp^0,w,c
  6838   000A6E  A0D8               	btfss	status,0,c
  6839   000A70  EF3C  F005         	goto	u1761
  6840   000A74  EF3E  F005         	goto	u1760
  6841   000A78                     u1761:
  6842   000A78  EF49  F005         	goto	l2683
  6843   000A7C                     u1760:
  6844   000A7C  0E00               	movlw	0
  6845   000A7E  6E23               	movwf	(___fldiv@new_exp+1)^0,c
  6846   000A80  6822               	setf	___fldiv@new_exp^0,c
  6847   000A82  0E00               	movlw	0
  6848   000A84  6E11               	movwf	___fldiv@b^0,c
  6849   000A86  0E00               	movlw	0
  6850   000A88  6E12               	movwf	(___fldiv@b+1)^0,c
  6851   000A8A  0E00               	movlw	0
  6852   000A8C  6E13               	movwf	(___fldiv@b+2)^0,c
  6853   000A8E  0E00               	movlw	0
  6854   000A90  6E14               	movwf	(___fldiv@b+3)^0,c
  6855   000A92                     l2683:
  6856   000A92  BE23               	btfsc	(___fldiv@new_exp+1)^0,7,c
  6857   000A94  EF56  F005         	goto	u1770
  6858   000A98  5023               	movf	(___fldiv@new_exp+1)^0,w,c
  6859   000A9A  E106               	bnz	u1771
  6860   000A9C  0422               	decf	___fldiv@new_exp^0,w,c
  6861   000A9E  B0D8               	btfsc	status,0,c
  6862   000AA0  EF54  F005         	goto	u1771
  6863   000AA4  EF56  F005         	goto	u1770
  6864   000AA8                     u1771:
  6865   000AA8  EF64  F005         	goto	l2687
  6866   000AAC                     u1770:
  6867   000AAC  0E00               	movlw	0
  6868   000AAE  6E23               	movwf	(___fldiv@new_exp+1)^0,c
  6869   000AB0  0E00               	movlw	0
  6870   000AB2  6E22               	movwf	___fldiv@new_exp^0,c
  6871   000AB4  0E00               	movlw	0
  6872   000AB6  6E11               	movwf	___fldiv@b^0,c
  6873   000AB8  0E00               	movlw	0
  6874   000ABA  6E12               	movwf	(___fldiv@b+1)^0,c
  6875   000ABC  0E00               	movlw	0
  6876   000ABE  6E13               	movwf	(___fldiv@b+2)^0,c
  6877   000AC0  0E00               	movlw	0
  6878   000AC2  6E14               	movwf	(___fldiv@b+3)^0,c
  6879   000AC4  0E00               	movlw	0
  6880   000AC6  6E21               	movwf	___fldiv@sign^0,c
  6881   000AC8                     l2687:
  6882   000AC8  C022  F028         	movff	___fldiv@new_exp,___fldiv@bexp
  6883   000ACC  A028               	btfss	___fldiv@bexp^0,0,c
  6884   000ACE  EF6B  F005         	goto	u1781
  6885   000AD2  EF6D  F005         	goto	u1780
  6886   000AD6                     u1781:
  6887   000AD6  EF70  F005         	goto	l2693
  6888   000ADA                     u1780:
  6889   000ADA  8E13               	bsf	(___fldiv@b+2)^0,7,c
  6890   000ADC  EF71  F005         	goto	l2695
  6891   000AE0                     l2693:
  6892   000AE0  9E13               	bcf	(___fldiv@b+2)^0,7,c
  6893   000AE2                     l2695:
  6894   000AE2  90D8               	bcf	status,0,c
  6895   000AE4  3028               	rrcf	___fldiv@bexp^0,w,c
  6896   000AE6  6E14               	movwf	(___fldiv@b+3)^0,c
  6897   000AE8  EF27  F004         	goto	l2609
  6898   000AEC                     l1182:
  6899   000AEC  0012               	return		;funcret
  6900   000AEE                     __end_of___fldiv:
  6901                           	callstack 0
  6902                           
  6903 ;; *************** function _LowISR *****************
  6904 ;; Defined at:
  6905 ;;		line 54 in file "interrupts.c"
  6906 ;; Parameters:    Size  Location     Type
  6907 ;;		None
  6908 ;; Auto vars:     Size  Location     Type
  6909 ;;		None
  6910 ;; Return value:  Size  Location     Type
  6911 ;;                  1    wreg      void 
  6912 ;; Registers used:
  6913 ;;		status,2, status,0
  6914 ;; Tracked objects:
  6915 ;;		On entry : 0/0
  6916 ;;		On exit  : 0/0
  6917 ;;		Unchanged: 0/0
  6918 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6919 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6920 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6921 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6922 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6923 ;;Total ram usage:        2 bytes
  6924 ;; Hardware stack levels used: 1
  6925 ;; This function calls:
  6926 ;;		Nothing
  6927 ;; This function is called by:
  6928 ;;		Interrupt level 1
  6929 ;; This function uses a non-reentrant model
  6930 ;;
  6931                           
  6932                           	psect	intcodelo
  6933   000018                     __pintcodelo:
  6934                           	callstack 0
  6935   000018                     _LowISR:
  6936                           	callstack 22
  6937                           
  6938                           ;incstack = 0
  6939   000018  805D               	bsf	int$flags,0,c	;set compiler interrupt flag (level 1)
  6940   00001A  CFD8 F001          	movff	status,??_LowISR
  6941   00001E  CFE0 F002          	movff	bsr,??_LowISR+1
  6942   000022                     
  6943                           ;interrupts.c: 56:     if (PIR0bits.TMR0IF) {
  6944   000022  010E               	movlb	14	; () banked
  6945   000024  AB33               	btfss	51,5,b	;volatile
  6946   000026  EF17  F000         	goto	i1u229_21
  6947   00002A  EF19  F000         	goto	i1u229_20
  6948   00002E                     i1u229_21:
  6949   00002E  EF1E  F000         	goto	i1l448
  6950   000032                     i1u229_20:
  6951   000032                     
  6952                           ; BSR set to: 14
  6953                           ;interrupts.c: 57:         timer_val += 1;
  6954   000032  0100               	movlb	0	; () banked
  6955   000034  4BC4               	infsnz	_timer_val& (0+255),f,b
  6956   000036  2BC5               	incf	(_timer_val+1)& (0+255),f,b
  6957   000038                     
  6958                           ; BSR set to: 0
  6959                           ;interrupts.c: 58:         PIR0bits.TMR0IF = 0;
  6960   000038  010E               	movlb	14	; () banked
  6961   00003A  9B33               	bcf	51,5,b	;volatile
  6962   00003C                     i1l448:
  6963                           
  6964                           ; BSR set to: 14
  6965   00003C  C002  FFE0         	movff	??_LowISR+1,bsr
  6966   000040  C001  FFD8         	movff	??_LowISR,status
  6967   000044  905D               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  6968   000046  0010               	retfie	
  6969   000048                     __end_of_LowISR:
  6970                           	callstack 0
  6971   000000                     
  6972                           	psect	rparam
  6973   000000                     
  6974                           	psect	temp
  6975   00005D                     btemp:
  6976                           	callstack 0
  6977   00005D                     	ds	1
  6978   000000                     int$flags	set	btemp
  6979   000000                     wtemp8	set	btemp+1
  6980   000000                     ttemp5	set	btemp+1
  6981   000000                     ttemp6	set	btemp+4
  6982   000000                     ttemp7	set	btemp+8
  6983                           
  6984                           	psect	idloc
  6985                           
  6986                           ;Config register IDLOC0 @ 0x200000
  6987                           ;	unspecified, using default values
  6988   200000                     	org	2097152
  6989   200000  0FFF               	dw	4095
  6990                           
  6991                           ;Config register IDLOC1 @ 0x200002
  6992                           ;	unspecified, using default values
  6993   200002                     	org	2097154
  6994   200002  0FFF               	dw	4095
  6995                           
  6996                           ;Config register IDLOC2 @ 0x200004
  6997                           ;	unspecified, using default values
  6998   200004                     	org	2097156
  6999   200004  0FFF               	dw	4095
  7000                           
  7001                           ;Config register IDLOC3 @ 0x200006
  7002                           ;	unspecified, using default values
  7003   200006                     	org	2097158
  7004   200006  0FFF               	dw	4095
  7005                           
  7006                           ;Config register IDLOC4 @ 0x200008
  7007                           ;	unspecified, using default values
  7008   200008                     	org	2097160
  7009   200008  0FFF               	dw	4095
  7010                           
  7011                           ;Config register IDLOC5 @ 0x20000A
  7012                           ;	unspecified, using default values
  7013   20000A                     	org	2097162
  7014   20000A  0FFF               	dw	4095
  7015                           
  7016                           ;Config register IDLOC6 @ 0x20000C
  7017                           ;	unspecified, using default values
  7018   20000C                     	org	2097164
  7019   20000C  0FFF               	dw	4095
  7020                           
  7021                           ;Config register IDLOC7 @ 0x20000E
  7022                           ;	unspecified, using default values
  7023   20000E                     	org	2097166
  7024   20000E  0FFF               	dw	4095
  7025                           
  7026                           	psect	config
  7027                           
  7028                           ;Config register CONFIG1L @ 0x300000
  7029                           ;	External Oscillator mode Selection bits
  7030                           ;	FEXTOSC = HS, HS (crystal oscillator) above 8 MHz; PFM set to high power
  7031                           ;	Power-up default value for COSC bits
  7032                           ;	RSTOSC = EXTOSC_4PLL, EXTOSC with 4x PLL, with EXTOSC operating per FEXTOSC bits
  7033   300000                     	org	3145728
  7034   300000  AA                 	db	170
  7035                           
  7036                           ;Config register CONFIG1H @ 0x300001
  7037                           ;	unspecified, using default values
  7038                           ;	Clock Out Enable bit
  7039                           ;	CLKOUTEN = 0x1, unprogrammed default
  7040                           ;	Clock Switch Enable bit
  7041                           ;	CSWEN = 0x1, unprogrammed default
  7042                           ;	Fail-Safe Clock Monitor Enable bit
  7043                           ;	FCMEN = 0x1, unprogrammed default
  7044   300001                     	org	3145729
  7045   300001  FF                 	db	255
  7046                           
  7047                           ;Config register CONFIG2L @ 0x300002
  7048                           ;	unspecified, using default values
  7049                           ;	Master Clear Enable bit
  7050                           ;	MCLRE = 0x1, unprogrammed default
  7051                           ;	Power-up Timer Enable bit
  7052                           ;	PWRTE = 0x1, unprogrammed default
  7053                           ;	Low-power BOR enable bit
  7054                           ;	LPBOREN = 0x1, unprogrammed default
  7055                           ;	Brown-out Reset Enable bits
  7056                           ;	BOREN = 0x3, unprogrammed default
  7057   300002                     	org	3145730
  7058   300002  FF                 	db	255
  7059                           
  7060                           ;Config register CONFIG2H @ 0x300003
  7061                           ;	unspecified, using default values
  7062                           ;	Brown Out Reset Voltage selection bits
  7063                           ;	BORV = 0x3, unprogrammed default
  7064                           ;	ZCD Disable bit
  7065                           ;	ZCD = 0x1, unprogrammed default
  7066                           ;	PPSLOCK bit One-Way Set Enable bit
  7067                           ;	PPS1WAY = 0x1, unprogrammed default
  7068                           ;	Stack Full/Underflow Reset Enable bit
  7069                           ;	STVREN = 0x1, unprogrammed default
  7070                           ;	Debugger Enable bit
  7071                           ;	DEBUG = 0x1, unprogrammed default
  7072                           ;	Extended Instruction Set Enable bit
  7073                           ;	XINST = 0x1, unprogrammed default
  7074   300003                     	org	3145731
  7075   300003  FF                 	db	255
  7076                           
  7077                           ;Config register CONFIG3L @ 0x300004
  7078                           ;	WDT Period Select bits
  7079                           ;	WDTCPS = WDTCPS_31, Divider ratio 1:65536; software control of WDTPS
  7080                           ;	WDT operating mode
  7081                           ;	WDTE = OFF, WDT Disabled
  7082   300004                     	org	3145732
  7083   300004  9F                 	db	159
  7084                           
  7085                           ;Config register CONFIG3H @ 0x300005
  7086                           ;	unspecified, using default values
  7087                           ;	WDT Window Select bits
  7088                           ;	WDTCWS = 0x7, unprogrammed default
  7089                           ;	WDT input clock selector
  7090                           ;	WDTCCS = 0x7, unprogrammed default
  7091   300005                     	org	3145733
  7092   300005  FF                 	db	255
  7093                           
  7094                           ;Config register CONFIG4L @ 0x300006
  7095                           ;	unspecified, using default values
  7096                           ;	Write Protection Block 0
  7097                           ;	WRT0 = 0x1, unprogrammed default
  7098                           ;	Write Protection Block 1
  7099                           ;	WRT1 = 0x1, unprogrammed default
  7100                           ;	Write Protection Block 2
  7101                           ;	WRT2 = 0x1, unprogrammed default
  7102                           ;	Write Protection Block 3
  7103                           ;	WRT3 = 0x1, unprogrammed default
  7104                           ;	Write Protection Block 3
  7105                           ;	WRT4 = 0x1, unprogrammed default
  7106                           ;	Write Protection Block 3
  7107                           ;	WRT5 = 0x1, unprogrammed default
  7108                           ;	Write Protection Block 3
  7109                           ;	WRT6 = 0x1, unprogrammed default
  7110                           ;	Write Protection Block 3
  7111                           ;	WRT7 = 0x1, unprogrammed default
  7112   300006                     	org	3145734
  7113   300006  FF                 	db	255
  7114                           
  7115                           ;Config register CONFIG4H @ 0x300007
  7116                           ;	unspecified, using default values
  7117                           ;	Configuration Register Write Protection bit
  7118                           ;	WRTC = 0x1, unprogrammed default
  7119                           ;	Boot Block Write Protection bit
  7120                           ;	WRTB = 0x1, unprogrammed default
  7121                           ;	Data EEPROM Write Protection bit
  7122                           ;	WRTD = 0x1, unprogrammed default
  7123                           ;	Scanner Enable bit
  7124                           ;	SCANE = 0x1, unprogrammed default
  7125                           ;	Low Voltage Programming Enable bit
  7126                           ;	LVP = 0x1, unprogrammed default
  7127   300007                     	org	3145735
  7128   300007  FF                 	db	255
  7129                           
  7130                           ;Config register CONFIG5L @ 0x300008
  7131                           ;	unspecified, using default values
  7132                           ;	UserNVM Program Memory Code Protection bit
  7133                           ;	CP = 0x1, unprogrammed default
  7134                           ;	DataNVM Memory Code Protection bit
  7135                           ;	CPD = 0x1, unprogrammed default
  7136   300008                     	org	3145736
  7137   300008  FF                 	db	255
  7138                           
  7139                           ;Config register CONFIG5H @ 0x300009
  7140                           ;	unspecified, using default values
  7141   300009                     	org	3145737
  7142   300009  FF                 	db	255
  7143                           
  7144                           ;Config register CONFIG6L @ 0x30000A
  7145                           ;	unspecified, using default values
  7146                           ;	Table Read Protection Block 0
  7147                           ;	EBTR0 = 0x1, unprogrammed default
  7148                           ;	Table Read Protection Block 1
  7149                           ;	EBTR1 = 0x1, unprogrammed default
  7150                           ;	Table Read Protection Block 2
  7151                           ;	EBTR2 = 0x1, unprogrammed default
  7152                           ;	Table Read Protection Block 3
  7153                           ;	EBTR3 = 0x1, unprogrammed default
  7154                           ;	Table Read Protection Block 4
  7155                           ;	EBTR4 = 0x1, unprogrammed default
  7156                           ;	Table Read Protection Block 5
  7157                           ;	EBTR5 = 0x1, unprogrammed default
  7158                           ;	Table Read Protection Block 6
  7159                           ;	EBTR6 = 0x1, unprogrammed default
  7160                           ;	Table Read Protection Block 7
  7161                           ;	EBTR7 = 0x1, unprogrammed default
  7162   30000A                     	org	3145738
  7163   30000A  FF                 	db	255
  7164                           
  7165                           ;Config register CONFIG6H @ 0x30000B
  7166                           ;	unspecified, using default values
  7167                           ;	Boot Block Table Read Protection bit
  7168                           ;	EBTRB = 0x1, unprogrammed default
  7169   30000B                     	org	3145739
  7170   30000B  FF                 	db	255
  7171                           tosu	equ	0xFFF
  7172                           tosh	equ	0xFFE
  7173                           tosl	equ	0xFFD
  7174                           stkptr	equ	0xFFC
  7175                           pclatu	equ	0xFFB
  7176                           pclath	equ	0xFFA
  7177                           pcl	equ	0xFF9
  7178                           tblptru	equ	0xFF8
  7179                           tblptrh	equ	0xFF7
  7180                           tblptrl	equ	0xFF6
  7181                           tablat	equ	0xFF5
  7182                           prodh	equ	0xFF4
  7183                           prodl	equ	0xFF3
  7184                           indf0	equ	0xFEF
  7185                           postinc0	equ	0xFEE
  7186                           postdec0	equ	0xFED
  7187                           preinc0	equ	0xFEC
  7188                           plusw0	equ	0xFEB
  7189                           fsr0h	equ	0xFEA
  7190                           fsr0l	equ	0xFE9
  7191                           wreg	equ	0xFE8
  7192                           indf1	equ	0xFE7
  7193                           postinc1	equ	0xFE6
  7194                           postdec1	equ	0xFE5
  7195                           preinc1	equ	0xFE4
  7196                           plusw1	equ	0xFE3
  7197                           fsr1h	equ	0xFE2
  7198                           fsr1l	equ	0xFE1
  7199                           bsr	equ	0xFE0
  7200                           indf2	equ	0xFDF
  7201                           postinc2	equ	0xFDE
  7202                           postdec2	equ	0xFDD
  7203                           preinc2	equ	0xFDC
  7204                           plusw2	equ	0xFDB
  7205                           fsr2h	equ	0xFDA
  7206                           fsr2l	equ	0xFD9
  7207                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    0
    Data        6
    BSS         209
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     63      92
    BANK0           160      2     128
    BANK1           256      0      60
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          234      0       0

Pointer List with Targets:

    motor_init@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> motorR(BANK0[9]), 

    motor_init@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> motorL(BANK0[9]), 

    buggy_color_response@c	PTR struct colors size(2) Largest target is 20
		 -> color(COMRAM[20]), 

    READcolor@c	PTR struct colors size(2) Largest target is 20
		 -> color(COMRAM[20]), 

    instructions2@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> motorR(BANK0[9]), 

    instructions2@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> motorL(BANK0[9]), 

    instructions@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> motorR(BANK0[9]), 

    instructions@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> motorL(BANK0[9]), 

    reverse_yellow@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> motorR(BANK0[9]), 

    reverse_yellow@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> motorL(BANK0[9]), 

    reverse_pink@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> motorR(BANK0[9]), 

    reverse_pink@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> motorL(BANK0[9]), 

    space@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlhllll[1]), CCPR2H(BITBIGSFRhhhllll[1]), 

    space@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlhllll[1]), CCPR1H(BITBIGSFRhhhllll[1]), 

    space@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlhllll[1]), CCPR2H(BITBIGSFRhhhllll[1]), 

    space@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlhllll[1]), CCPR1H(BITBIGSFRhhhllll[1]), 

    space@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> motorR(BANK0[9]), 

    space@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> motorL(BANK0[9]), 

    right_45@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlhllll[1]), CCPR2H(BITBIGSFRhhhllll[1]), 

    right_45@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlhllll[1]), CCPR1H(BITBIGSFRhhhllll[1]), 

    right_45@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> motorR(BANK0[9]), 

    right_45@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlhllll[1]), CCPR2H(BITBIGSFRhhhllll[1]), 

    right_45@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlhllll[1]), CCPR1H(BITBIGSFRhhhllll[1]), 

    right_45@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> motorL(BANK0[9]), 

    left_45@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlhllll[1]), CCPR2H(BITBIGSFRhhhllll[1]), 

    left_45@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlhllll[1]), CCPR1H(BITBIGSFRhhhllll[1]), 

    left_45@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlhllll[1]), CCPR2H(BITBIGSFRhhhllll[1]), 

    left_45@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlhllll[1]), CCPR1H(BITBIGSFRhhhllll[1]), 

    left_45@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> motorR(BANK0[9]), 

    left_45@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> motorL(BANK0[9]), 

    stop@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlhllll[1]), CCPR2H(BITBIGSFRhhhllll[1]), 

    stop@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlhllll[1]), CCPR1H(BITBIGSFRhhhllll[1]), 

    stop@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> motorR(BANK0[9]), 

    stop@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlhllll[1]), CCPR2H(BITBIGSFRhhhllll[1]), 

    stop@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlhllll[1]), CCPR1H(BITBIGSFRhhhllll[1]), 

    stop@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> motorL(BANK0[9]), 

    reverse@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlhllll[1]), CCPR2H(BITBIGSFRhhhllll[1]), 

    reverse@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlhllll[1]), CCPR1H(BITBIGSFRhhhllll[1]), 

    reverse@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlhllll[1]), CCPR2H(BITBIGSFRhhhllll[1]), 

    reverse@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlhllll[1]), CCPR1H(BITBIGSFRhhhllll[1]), 

    reverse@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> motorR(BANK0[9]), 

    reverse@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> motorL(BANK0[9]), 

    forward@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlhllll[1]), CCPR2H(BITBIGSFRhhhllll[1]), 

    forward@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlhllll[1]), CCPR1H(BITBIGSFRhhhllll[1]), 

    forward@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlhllll[1]), CCPR2H(BITBIGSFRhhhllll[1]), 

    forward@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlhllll[1]), CCPR1H(BITBIGSFRhhhllll[1]), 

    forward@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> motorR(BANK0[9]), 

    forward@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> motorL(BANK0[9]), 

    setMotorPWM@m.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlhllll[1]), CCPR2H(BITBIGSFRhhhllll[1]), 

    setMotorPWM@m.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlhllll[1]), CCPR1H(BITBIGSFRhhhllll[1]), 

    setMotorPWM@m	PTR struct DC_motor size(2) Largest target is 11
		 -> motorR(BANK0[9]), motorL(BANK0[9]), 

    return_home@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> motorR(BANK0[9]), 

    return_home@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> motorL(BANK0[9]), 

    buggy_color_response@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> motorR(BANK0[9]), 

    buggy_color_response@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> motorL(BANK0[9]), 

    motorR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlhllll[1]), CCPR2H(BITBIGSFRhhhllll[1]), 

    motorR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlhllll[1]), CCPR1H(BITBIGSFRhhhllll[1]), 

    S236DC_motor$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlhllll[1]), CCPR2H(BITBIGSFRhhhllll[1]), 

    motorL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlhllll[1]), CCPR2H(BITBIGSFRhhhllll[1]), 

    S236DC_motor$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlhllll[1]), CCPR1H(BITBIGSFRhhhllll[1]), 

    motorL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlhllll[1]), CCPR1H(BITBIGSFRhhhllll[1]), 


Critical Paths under _main in COMRAM

    _main->_buggy_color_response
    _need4speed->_color_click_init
    _color_click_init->_color_writetoaddr
    _color_writetoaddr->_I2C_2_Master_Write
    _buggy_color_response->_return_home
    _return_home->_instructions2
    _instructions2->_reverse_pink
    _instructions2->_reverse_yellow
    _reverse_yellow->_left_45
    _reverse_pink->_right_45
    _forward->_stop
    _instructions->_left_45
    _instructions->_right_45
    _space->_stop
    _right_45->_stop
    _reverse->_stop
    _left_45->_stop
    _stop->_setMotorPWM
    _setMotorPWM->___lwdiv
    ___lwdiv->___wmul
    _READcolor->___fldiv
    _color_read_Red->_I2C_2_Master_Read
    _color_read_Green->_I2C_2_Master_Read
    _color_read_Clear->_I2C_2_Master_Read
    _color_read_Blue->_I2C_2_Master_Read
    _I2C_2_Master_Write->_I2C_2_Master_Idle
    _I2C_2_Master_Stop->_I2C_2_Master_Idle
    _I2C_2_Master_Start->_I2C_2_Master_Idle
    _I2C_2_Master_RepStart->_I2C_2_Master_Idle
    _I2C_2_Master_Read->_I2C_2_Master_Idle
    ___fldiv->___xxtofl

Critical Paths under _LowISR in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_buggy_color_response

Critical Paths under _LowISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _LowISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _LowISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _LowISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _LowISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _LowISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _LowISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _LowISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _LowISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _LowISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _LowISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _LowISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _LowISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _LowISR in BANK13

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  326700
               _buggy_color_response
                         _need4speed
                        _timer_reset
 ---------------------------------------------------------------------------------
 (1) _need4speed                                           0     0      0     544
                  _I2C_2_Master_Init
                        _Timer0_init
                     _buggyLEDs_init
                   _color_click_init
                    _initDCmotorsPWM
                         _initUSART4
                    _interrupts_init
                         _motor_init
                         _ports_init
 ---------------------------------------------------------------------------------
 (2) _ports_init                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _motor_init                                           4     0      4     152
                                              2 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (2) _interrupts_init                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _initUSART4                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _initDCmotorsPWM                                      2     0      2      98
                                              2 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _color_click_init                                     1     1      0     294
                                              6 COMRAM     1     1      0
                  _I2C_2_Master_Init
                  _color_writetoaddr
 ---------------------------------------------------------------------------------
 (3) _color_writetoaddr                                    2     1      1     294
                                              4 COMRAM     2     1      1
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Init                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _buggyLEDs_init                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Timer0_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _buggy_color_response                                 8     2      6  326156
                                             57 COMRAM     6     0      6
                                              0 BANK0      2     2      0
                          _READcolor
                             ___flge
                            _forward
                       _instructions
                      _instructions2
                        _return_home
                              _space
                               _stop
                        _timer_reset
 ---------------------------------------------------------------------------------
 (1) _timer_reset                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _return_home                                          6     2      4  130324
                                             51 COMRAM     6     2      4
                      _delay_ms_func
                            _forward
                      _instructions2
                            _reverse
                               _stop
 ---------------------------------------------------------------------------------
 (3) _instructions2                                        6     0      6  100009
                                             45 COMRAM     6     0      6
                            _left_45
                       _reverse_pink
                     _reverse_yellow
                           _right_45
                               _stop
 ---------------------------------------------------------------------------------
 (4) _reverse_yellow                                       6     2      4   32131
                                             39 COMRAM     6     2      4
                            _left_45
                            _reverse
                               _stop
 ---------------------------------------------------------------------------------
 (4) _reverse_pink                                         6     2      4   32695
                                             39 COMRAM     6     2      4
                            _reverse
                           _right_45
                               _stop
 ---------------------------------------------------------------------------------
 (3) _forward                                              5     1      4   10942
                                             27 COMRAM     5     1      4
                        _setMotorPWM
                               _stop
 ---------------------------------------------------------------------------------
 (3) _delay_ms_func                                        6     4      2     122
                                              2 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (2) _instructions                                         8     2      6   58755
                                             39 COMRAM     8     2      6
                            _left_45
                            _reverse
                           _right_45
                              _space
                               _stop
 ---------------------------------------------------------------------------------
 (2) _space                                                6     2      4   10834
                                             27 COMRAM     6     2      4
                        _setMotorPWM
                               _stop
 ---------------------------------------------------------------------------------
 (4) _right_45                                            12     4      8   13488
                                             27 COMRAM    12     4      8
                       _custom_delay
                        _setMotorPWM
                               _stop
 ---------------------------------------------------------------------------------
 (3) _reverse                                              5     1      4   11246
                                             27 COMRAM     5     1      4
                        _setMotorPWM
                               _stop
 ---------------------------------------------------------------------------------
 (5) _left_45                                             12     4      8   12924
                                             27 COMRAM    12     4      8
                       _custom_delay
                        _setMotorPWM
                               _stop
 ---------------------------------------------------------------------------------
 (2) _stop                                                 6     2      4    7633
                                             21 COMRAM     6     2      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (3) _setMotorPWM                                          6     4      2    2589
                                             15 COMRAM     6     4      2
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     355
                                              2 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              7     3      4     358
                                              8 COMRAM     7     3      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (5) _custom_delay                                         5     3      2     198
                                              2 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (2) ___flge                                              12     4      8    3374
                                              2 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (2) _READcolor                                            2     0      2    3085
                                             41 COMRAM     2     0      2
                            ___fldiv
                           ___xxtofl
                    _color_read_Blue
                   _color_read_Clear
                   _color_read_Green
                     _color_read_Red
 ---------------------------------------------------------------------------------
 (3) _color_read_Red                                       7     5      2     113
                                              6 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (3) _color_read_Green                                     7     5      2     113
                                              6 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (3) _color_read_Clear                                     7     5      2     113
                                              6 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (3) _color_read_Blue                                      7     5      2     113
                                              6 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (4) _I2C_2_Master_Write                                   1     1      0      22
                                              3 COMRAM     1     1      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (4) _I2C_2_Master_Stop                                    0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (4) _I2C_2_Master_Start                                   0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (4) _I2C_2_Master_RepStart                                0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (4) _I2C_2_Master_Read                                    3     3      0      45
                                              3 COMRAM     3     3      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (5) _I2C_2_Master_Idle                                    1     1      0       0
                                              2 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) ___xxtofl                                            14    10      4     778
                                              2 COMRAM    14    10      4
 ---------------------------------------------------------------------------------
 (3) ___fldiv                                             25    17      8    1703
                                             16 COMRAM    25    17      8
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _LowISR                                               2     2      0       0
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _buggy_color_response
     _READcolor
       ___fldiv
         ___xxtofl (ARG)
       ___xxtofl
       _color_read_Blue
         _I2C_2_Master_Read
           _I2C_2_Master_Idle
         _I2C_2_Master_RepStart
           _I2C_2_Master_Idle
         _I2C_2_Master_Start
           _I2C_2_Master_Idle
         _I2C_2_Master_Stop
           _I2C_2_Master_Idle
         _I2C_2_Master_Write
           _I2C_2_Master_Idle
       _color_read_Clear
         _I2C_2_Master_Read
         _I2C_2_Master_RepStart
         _I2C_2_Master_Start
         _I2C_2_Master_Stop
         _I2C_2_Master_Write
       _color_read_Green
         _I2C_2_Master_Read
         _I2C_2_Master_RepStart
         _I2C_2_Master_Start
         _I2C_2_Master_Stop
         _I2C_2_Master_Write
       _color_read_Red
         _I2C_2_Master_Read
         _I2C_2_Master_RepStart
         _I2C_2_Master_Start
         _I2C_2_Master_Stop
         _I2C_2_Master_Write
     ___flge
     _forward
       _setMotorPWM
         ___lwdiv
           ___wmul (ARG)
         ___wmul
       _stop
         _setMotorPWM
     _instructions
       _left_45
         _custom_delay
         _setMotorPWM
         _stop
       _reverse
         _setMotorPWM
         _stop
       _right_45
         _custom_delay
         _setMotorPWM
         _stop
       _space
         _setMotorPWM
         _stop
       _stop
     _instructions2
       _left_45
       _reverse_pink
         _reverse
         _right_45
         _stop
       _reverse_yellow
         _left_45
         _reverse
         _stop
       _right_45
       _stop
     _return_home
       _delay_ms_func
       _forward
       _instructions2
       _reverse
       _stop
     _space
     _stop
     _timer_reset
   _need4speed
     _I2C_2_Master_Init
     _Timer0_init
     _buggyLEDs_init
     _color_click_init
       _I2C_2_Master_Init
       _color_writetoaddr
         _I2C_2_Master_Start
         _I2C_2_Master_Stop
         _I2C_2_Master_Write
     _initDCmotorsPWM
     _initUSART4
     _interrupts_init
     _motor_init
     _ports_init
   _timer_reset

 _LowISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             DE9      0       0      63        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      3C       7       23.4%
BITBANK13           EA      0       0      30        0.0%
BANK13              EA      0       0      31        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      2      80       5       80.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     3F      5C       1       97.9%
BITBIGSFRhlhllh     52      0       0      42        0.0%
BITBIGSFRhlhlll     37      0       0      44        0.0%
BITBIGSFRlllhll     2A      0       0      55        0.0%
BITBIGSFRlllll      26      0       0      61        0.0%
BITBIGSFRllhh       20      0       0      47        0.0%
BITBIGSFRlllhhh     1E      0       0      49        0.0%
BITBIGSFRhhhhlh     1B      0       0      33        0.0%
BITBIGSFRhhhlll     17      0       0      38        0.0%
BITBIGSFRhhhhll     13      0       0      34        0.0%
BITBIGSFRlllhhh     11      0       0      50        0.0%
BITBIGSFRhhhlhh      E      0       0      35        0.0%
BITBIGSFRhhhhh       D      0       0      32        0.0%
BITBIGSFRllhl        C      0       0      48        0.0%
BITBIGSFRlllhll      9      0       0      58        0.0%
BITBIGSFRlllhll      9      0       0      57        0.0%
BITBIGSFRhllll       8      0       0      45        0.0%
BITBIGSFRllllh       6      0       0      60        0.0%
BITBIGSFRlllhlh      6      0       0      54        0.0%
BITBIGSFRlllhlh      5      0       0      53        0.0%
BITBIGSFRhhhlll      5      0       0      39        0.0%
BITBIGSFRlllhll      3      0       0      56        0.0%
BITBIGSFRlllhhl      3      0       0      52        0.0%
BITBIGSFRhlhlll      2      0       0      43        0.0%
BITBIGSFRhhhllh      2      0       0      37        0.0%
BITBIGSFRhlhllh      1      0       0      41        0.0%
BITBIGSFRhhhlhl      1      0       0      36        0.0%
BITBIGSFRlllhhh      1      0       0      51        0.0%
BITBIGSFRhlhhh       1      0       0      40        0.0%
BITBIGSFRlllhll      1      0       0      59        0.0%
BITBIGSFRlh          1      0       0      46        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     118      62        0.0%
DATA                 0      0     118       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.40 build 20220703182018 
Symbol Table                                                                                   Tue Mar 14 21:26:29 2023

               _color_read_Red 1ECE                   ___fldiv@aexp 0029                   ___fldiv@bexp 0028  
                 ___fldiv@sign 0021                _color_read_Blue 1FBE                             l30 21B8  
                           l33 21DE                             l42 22D4                             l27 21B6  
                           l36 22DE                             l45 22CA                             l39 22E8  
                           l48 209A                             bsr 000FE0            ___wmul@multiplicand 0005  
             custom_delay@temp 0003               _color_read_Clear 1F6E               _color_read_Green 1F1E  
            delay_ms_func@time 0003                            l111 218C                            l120 200C  
                          l114 2264                            l123 1F6C                            l117 1F1C  
                          l126 1FBC                            l150 17B6                            l142 0752  
                          l311 1BE8                            l129 156A                            l305 1B36  
                          l153 20C4                            l322 1430                            l306 1B38  
                          l410 1E98                            l156 20DA                            l333 1692  
                          l341 19BC                            l406 1E7C                            l415 1ECA  
                          l600 2204                            l344 1D0C                            l280 1D9C  
                          l193 2244                            l442 22BE                            l290 2058  
                          l347 1C7A                            l357 0E08                            l535 20FC  
                          l287 12F4                            l367 0FD4                            l463 2284  
                          l297 1A78                            l538 211A                            l298 1A7A  
                          l466 22AE                            l491 2224                            l494 229A  
                          l597 2158                            l870 18BA                            l865 1874  
                          wreg 000FE8                  return_home@mL 0034                  return_home@mR 0036  
                         l1091 1E08                           l2301 21C8                           l2221 21FC  
                         l1182 0AEC                           l1262 10C4                           l1255 102C  
                         l2231 1DC0                           l2311 1ACE                           l2303 1A7C  
                         l1184 094C                           l1193 0992                           l2401 22DA  
                         l2241 1DFA                           l2233 1DC8                           l2225 1D9E  
                         l2321 1B1E                           l2313 1AE6                           l2305 1A90  
                         l3201 0316                           l1258 1188                           l1098 1E10  
                         l1195 0A0A                           l1187 0910                           l2403 22E0  
                         l2411 22C2                           l2243 1DFC                           l2235 1DD6  
                         l2227 1DA6                           l2219 21E0                           l2251 11FA  
                         l2331 132C                           l2323 12F6                           l2315 1AF2  
                         l2307 1AA0                           l3203 0348                           l3211 03A8  
                         l1196 09F8                           l1269 1120                           l2421 2070  
                         l2405 22E4                           l2413 22C6                           l2245 1E02  
                         l2237 1DDC                           l2229 1DB8                           l2261 12B4  
                         l2253 120E                           l2341 1380                           l2333 1338  
                         l2325 130A                           l2317 1AFE                           l2309 1AB0  
                         l2501 1A60                           l3221 0450                           l3213 03DA  
                         l3205 037A                           l3061 212C                           l2423 2096  
                         l2415 205C                           l2407 22CC                           l2239 1DF2  
                         l2255 1212                           l2247 118A                           l2263 1B3A  
                         l2351 13D6                           l2343 138C                           l2335 1350  
                         l2327 131A                           l2319 1B06                           l2511 190E  
                         l2503 18BC                           l2431 1CB4                           l3231 0512  
                         l3215 040C                           l3223 046C                           l3207 038A  
                         l3151 006E                           l3071 2154                           l3063 2130  
                         l2601 0810                           l2425 2098                           l2417 2060  
                         l2409 22D0                           l2257 1254                           l2249 11A6  
                         l2281 1B9C                           l2273 1B64                           l2265 1B5A  
                         l2353 13E2                           l2345 1398                           l2337 135C  
                         l2361 1412                           l2329 132A                           l2521 195E  
                         l2513 1926                           l2505 18D0                           l2433 1CCC  
                         l2441 1C3A                           l3241 05C6                           l3233 0514  
                         l3225 049E                           l3217 043E                           l3209 038C  
                         l3161 00C0                           l3153 007E                           l3065 2144  
                         l3057 211C                           l2611 0852                           l2603 0820  
                         l2419 2068                           l2259 1270                           l2291 1BE6  
                         l2283 1BA8                           l2275 1B7C                           l2267 1B5C  
                         l2355 13F6                           l2347 13A6                           l2339 1374  
                         l2371 15B2                           l2363 156C                           l2523 1976  
                         l2515 1932                           l2507 18D2                           l2435 1CF8  
                         l2443 1C66                           l2531 0E0A                           l3251 063C  
                         l3243 05D6                           l3227 04D0                           l3235 0530  
                         l3219 044E                           l3171 0160                           l3163 00D8  
                         l3155 0080                           l3147 004C                           l2451 21A0  
                         l3067 214C                           l3059 2128                           l2605 0836  
                         l2461 1F14                           l2293 20DC                           l2285 1BB6  
                         l2277 1B88                           l2357 140C                           l2349 13BE  
                         l2381 15FA                           l2373 15BE                           l2365 158C  
                         l2525 198E                           l2517 193E                           l2509 18E2  
                         l2429 1C7C                           l2437 1BEA                           l2541 0EB4  
                         l2533 0E1C                           l3261 06AC                           l3253 066E  
                         l3245 05D8                           l3237 0562                           l3229 0502  
                         l3181 01F2                           l3173 0192                           l3165 00E4  
                         l3157 0094                           l3149 0058                           l2453 21A2  
                         l2445 218E                           l3069 2150                           l2631 08D4  
                         l2623 088A                           l2607 0846                           l2615 0866  
                         l2711 1052                           l2703 0FD8                           l2471 1F1E  
                         l2295 20E8                           l2287 1BCE                           l2279 1B94  
                         l2359 140E                           l2391 1658                           l2383 1608  
                         l2375 15D6                           l2367 158E                           l2527 19A2  
                         l2519 1946                           l2439 1C22                           l2551 0F84  
                         l2543 0EEC                           l2535 0E54                           l3271 0718  
                         l3263 06C0                           l3255 067E                           l3239 0594  
                         l3247 05F4                           l3191 0284                           l3183 0224  
                         l3175 01A2                           l3167 00FC                           l3159 00AC  
                         l2455 21A4                           l2447 2198                           l2641 091A  
                         l2633 08DC                           l2625 08A4                           l2617 0876  
                         l2609 084E                           l2721 10AC                           l2705 0FE8  
                         l2465 1FBE                           l2473 1F64                           l2297 20F8  
                         l2289 1BDA                           l2393 166E                           l2385 1620  
                         l2377 15E2                           l2369 159A                           l2529 19BA  
                         l2801 0D5C                           l2561 20A8                           l2553 0F98  
                         l2545 0F00                           l2537 0E68                           l3265 06D8  
                         l3257 0680                           l3249 0626                           l3273 0736  
                         l3193 02B6                           l3185 0234                           l3177 01A4  
                         l3169 012E                           l2449 219E                           l2457 2248  
                         l3281 1EA6                           l2651 0972                           l2643 0938  
                         l2635 08EC                           l2627 08B4                           l2619 0876  
                         l2571 0770                           l2731 1110                           l2723 10AE  
                         l2715 1066                           l2707 0FF6                           l2299 21B8  
                         l2467 2004                           l2459 1ECE                           l2395 1670  
                         l2387 1638                           l2379 15EE                           l2803 0D70  
                         l2563 20C0                           l2491 1A10                           l2483 19BE  
                         l2555 0FAC                           l2547 0F38                           l2539 0EA0  
                         l2811 1694                           l3267 06EC                           l3259 0694  
                         l3195 02E8                           l3187 0236                           l3179 01C0  
                         l3275 073E                           l3283 1EAA                           l2661 09B0  
                         l2653 0978                           l2645 093A                           l2637 0900  
                         l2629 08C4                           l2573 0780                           l2581 07AA  
                         l2565 0754                           l2741 1168                           l2733 112E  
                         l2725 10BA                           l2717 106E                           l2709 103C  
                         l2477 1F6E                           l2389 1644                           l2397 1674  
                         l2805 0D84                           l2493 1A28                           l2485 19D2  
                         l2557 0FC0                           l2549 0F4C                           l2821 16F0  
                         l2813 1698                           l3269 0700                           l3197 02F8  
                         l3189 0252                           l2901 2206                           l3277 1E78  
                         l2671 0A1A                           l2663 09B4                           l2655 0982  
                         l2647 094A                           l2639 090E                           l2591 07D6  
                         l2583 07BA                           l2575 0790                           l2567 0760  
                         l2743 1176                           l2735 1130                           l2727 10F6  
                         l2719 107A                           l2399 22D6                           l2479 1FB4  
                         l2911 1824                           l2807 0DBC                           l2559 209C  
                         l2495 1A34                           l2487 19E2                           l2831 1752  
                         l2823 1710                           l2815 16C2                           l3199 02FA  
                         l2903 2286                           l2751 215E                           l3279 1E8A  
                         l2681 0A7C                           l2673 0A26                           l2665 09C2  
                         l2657 0990                           l2649 095C                           l2593 07E6  
                         l2585 07C0                           l2577 07A0                           l2569 076E  
                         l2745 1178                           l2737 1134                           l2729 1102  
                         l2921 18B2                           l2913 1834                           l2905 17B8  
                         l2809 0DD0                           l2761 0AEE                           l2497 1A40  
                         l2489 19F2                           l2833 176A                           l2825 1712  
                         l2817 16C4                           l2841 229C                           l2753 2168  
                         l2691 0ADA                           l2683 0A92                           l2675 0A34  
                         l2667 09F0                           l2659 09A2                           l2595 07F6  
                         l2587 07C6                           l2579 07A2                           l2739 1158  
                         l2923 18B8                           l2915 1842                           l2907 17E6  
                         l2771 0B90                           l2763 0B02                           l2499 1A48  
                         l2835 177E                           l2827 1726                           l2819 16DC  
                         l2755 2178                           l2851 223E                           l2843 2226  
                         l2693 0AE0                           l2685 0AAC                           l2677 0A5E  
                         l2597 0806                           l2589 07D4                           l2917 1854  
                         l2909 17F6                           l2781 0C3C                           l2773 0BA4  
                         l2765 0B1A                           l2829 173E                           l2837 1796  
                         l2757 2182                           l2749 215A                           l2861 1D44  
                         l2853 2240                           l2845 2230                           l2695 0AE2  
                         l2687 0AC8                           l2679 0A62                           l2599 0808  
                         l2759 1432                           l2919 1862                           l2783 0C50  
                         l2791 0CCC                           l2775 0BDC                           l2767 0B46  
                         l2839 17A6                           l2871 1D82                           l2863 1D48  
                         l2855 2242                           l2847 2232                           l2689 0ACC  
                         l2793 0CE0                           l2785 0C68                           l2777 0BF0  
                         l2769 0B58                           l2873 1D84                           l2865 1D6C  
                         l2857 1D0E                           l2849 2234                           l2881 200E  
                         l2795 0CF4                           l2787 0C94                           l2779 0C28  
                         l2875 1D8E                           l2867 1D76                           l2859 1D1E  
                         l2891 22B0                           l2883 201C                           l2797 0D0C  
                         l2789 0CB8                           l2893 2266                           l2877 1D90  
                         l2869 1D78                           l2885 2024                           l2799 0D38  
                         l2895 226E                           l2879 1D9A                           l2887 2040  
                         l2897 2278                           l2889 2048                           l2899 2282  
                         u2000 1842                           u2001 183E                           u2010 1862  
                         u1210 1DB8                           u2011 185E                           u1211 1DB4  
                         u2020 18B2                           u1220 1DD6                           u1300 1B1E  
                         u2021 18AE                           u1221 1DD2                           u1301 1B1A  
                         u1230 1DF2                           u1310 1B36                           u1231 1DEE  
                         u1311 1B32                           u1240 11A6                           u1320 1350  
                         u1400 1638                           u1241 11A2                           u1321 134C  
                         u1401 1634                           u1250 1270                           u1330 1374  
                         u1410 1692                           u1251 126C                           u1331 1370  
                         u1411 168E                           u1420 2084                           u1260 1BB6  
                         u1340 13BE                           u1500 0EB4                           u1421 207C  
                         u1261 1BB2                           u1341 13BA                           u1501 0EB0  
                         u1270 211A                           u1350 13D6                           u1510 0F00  
                         u1271 2116                           u1351 13D2                           u1511 0EFC  
                         u1600 07E6                           u1280 21C8                           u1360 1430  
                         u1440 1A60                           u1520 0F4C                           u2400 0160  
                 _BAUD4CONbits 000EE9                           u1601 07E2                           u1281 21C4  
                         u1361 142C                           u1441 1A5C                           u1521 0F48  
                         u2401 015C                           u1610 07F6                           u1290 21DE  
                         u1370 15B2                           u1450 1A78                           u1530 0F98  
                         u2410 0192                           u1611 07F2                           u1291 21DA  
                         u1371 15AE                           u1451 1A74                           u1531 0F94  
                         u2411 018E                           u1700 09B0                           u1620 0836  
                         u1380 15D6                           u1460 195E                           u1540 0FC0  
                         u2500 040C                           u2420 01F2                           u1701 09AC  
                         u1621 0832                           u1381 15D2                           u1461 195A  
                         u1541 0FBC                           u2501 0408                           u2421 01EE  
                         u1710 09C2                           u1630 0876                           u1438 2086  
                         u1390 1620                           u1470 1976                           u1550 20DA  
                         u2510 043E                           u2430 0224                           u1711 09BE  
                         u1631 0872                           u1391 161C                           u1471 1972  
                         u1551 20D6                           u2511 043A                           u2431 0220  
                         u1720 09F0                           u1640 08EC                           u1560 076E  
                         u1800 0FF6                           u1480 0E1C                           u2600 066E  
                         u2520 049E                           u2440 0284                           u1721 09EC  
                         u1641 08E8                           u1561 076A                           u1801 0FF2  
                         u1481 0E18                           u2601 066A                           u2521 049A  
                         u2441 0280                           u1730 0A06                           u1650 090E  
                         u1570 0780                           u1810 1052                           u1490 0E68  
                         u2530 04D0                           u2450 02B6                           u2610 1E8A  
                         _T2PR 000FBC                           u1731 0A02                           u1651 090A  
                         u1571 077C                           u1811 104E                           u1491 0E64  
                         u2531 04CC                           u2451 02B2                           u2611 1E86  
                         u1740 0A1A                           u1660 0938                           u1580 0790  
                         u1820 10A8                           u1900 0BA4                           u2540 0502  
                         u2460 02E8                           u2380 006E                           u2620 1E98  
                         u1741 0A16                           u1661 0934                           u1581 078C  
                         u1821 10A4                           u1901 0BA0                           u2541 04FE  
                         u2461 02E4                           u2381 006A                           u2621 1E94  
                         u1750 0A34                           u1670 095C                           u1590 07D4  
                         u1830 10F2                           u1910 0BF0                           u2550 0562  
                         u2470 0348                           u2390 012E                           u2630 1EA6  
                         u1751 0A30                           u1671 0958                           u1591 07D0  
                         u1831 10EE                           u1911 0BEC                           u2551 055E  
                         u2471 0344                           u2391 012A                           u2631 1EA2  
                         u1760 0A7C                           u1680 0972                           u1840 1110  
                         u1920 0C3C                           u2560 0594                           u2480 037A  
                         u1761 0A78                           u1681 096E                           u1841 110C  
                         u1921 0C38                           u2561 0590                           u2481 0376  
                         u1770 0AAC                           u1690 0990                           u1850 1120  
                         u1930 0CE0                           u2570 05C6                           u2490 03DA  
                         u1771 0AA8                           u1691 098C                           u1851 111C  
                         u1931 0CDC                           u2707 070C                           u2571 05C2  
                         u2491 03D6                           u1780 0ADA                           u1860 112E  
                         u1940 0D84                           u2580 0626                           u1781 0AD6  
                         u1861 112A                           u1941 0D80                           u2717 16CE  
                         u2581 0622                           u1870 1168                           u1790 0FE8  
                         u1950 0DD0                           u2590 063C                           u1871 1164  
                         u1791 0FE4                           u1951 0DCC                           u2807 20B2  
                         u2727 1730                           u2591 0638                           u2647 216E  
                         u1880 1176                           u1960 17A6                           u1881 1172  
                         u2817 0B0C                           u1961 17A2                           u2737 175C  
                         u2657 00A0                           u1890 0B58                           u1970 17B6  
                         u2907 1600                           u1891 0B54                           u2827 0B38  
                         u1971 17B2                           u2747 1788                           u2667 00CC  
                         u1980 17E6                           u1981 17E2                           u2917 1662  
                         u2837 0C5A                           u2757 1C2C                           u2677 00F0  
                         u1990 1824                           u1991 1820                           u2927 1B00  
                         u2847 0C86                           u2767 1C58                           u2687 06A0  
                         u2937 139E                           u2857 0CFE                           u2777 1CBE  
                         u2697 06CC                           u2947 1400                           u2867 0D2A  
                         u2787 1CEA                           u2957 1B96                           u2877 1940  
                         u2797 1A42                           u2967 20EE                           u2887 1980  
                         u2897 19AC        __end_of_interrupts_init 22C0                           _main 1E78  
                         fsr2h 000FDA                           indf2 000FDF                           fsr1l 000FE1  
                         fsr2l 000FD9                           btemp 005D                           _stop 1B3A  
                         prodh 000FF4                           prodl 000FF3                           start 0048  
              ___fldiv@new_exp 0022         __end_of_color_read_Red 1F1E                   ___param_bank 000000  
             _color_lowerbound 00C6                          ?_main 0001                __end_of___fldiv 0AEE  
                        ?_stop 0016                __end_of___lwdiv 1E12                          i1l448 003C  
                        _TMR0H 000FD4                          _TMR0L 000FD3                   left_45@count 0020  
   __end_of_I2C_2_Master_Start 22E0     __end_of_I2C_2_Master_Write 22CC                __end_of_left_45 1432  
                        _color 0045                __end_of_forward 1A7C          __end_of_instructions2 0FD6  
                        _space 18BC                          tablat 000FF5                __end_of_reverse 1B3A  
                        ttemp5 005E                          ttemp6 0061                          ttemp7 0065  
                        stop@i 001A                          status 000FD8                          wtemp8 005E  
      __end_of_color_read_Blue 200E          _I2C_2_Master_RepStart 22E0                 delay_ms_func@i 0007  
              ?_color_read_Red 0007                __initialization 1E12                   __end_of_main 1ECE  
                 __end_of_stop 1BEA               _color_upperbound 00DC              left_45@left_timer 0022  
                       ??_main 0040                         ??_stop 001A                  __activetblptr 000000  
                 ?_setMotorPWM 0010                         _CCPR1H 000FAA                         _CCPR2H 000FA6  
                       _CCPR3H 000F25                         _CCPR4H 000F21                         ?_space 001C  
        __end_of_delay_ms_func 20DC              __end_of_READcolor 156C                         _RC0PPS 000E62  
                       _RC4REG 000EE3                         _RE2PPS 000E74                         i1l3081 0022  
                       i1l3083 0032                         _RC7PPS 000E69                         _RD5PPS 000E6F  
                       i1l3085 0038                         _RE4PPS 000E76                         _RD6PPS 000E70  
                       _RG6PPS 000E88               ?_interrupts_init 0001       __end_of_color_click_init 218E  
                       _RX4PPS 000E15                         _TX4REG 000EE4               __end_of___xxtofl 118A  
                       _LowISR 0018                         _T_flag 0042                  ??_Timer0_init 0003  
                 _CCPTMRS0bits 000FAD                         ___flge 17B8                         ___wmul 21E0  
                    ??___fldiv 0019                      ??___lwdiv 000D               ??_buggyLEDs_init 0003  
                       clear_0 1E50                         clear_1 1E5C                         clear_2 1E68  
                ?_custom_delay 0003                         _motorL 00D3                         _motorR 00CA  
                       isa$std 000001                      ??_left_45 0024               __end_of_right_45 1694  
                 __pdataCOMRAM 0059                      ??_forward 0020                         tblptrh 000FF7  
                       tblptrl 000FF6                         tblptru 000FF8                      ??_reverse 0020  
                 ?_return_home 0034                         stop@mL 0016                         stop@mR 0018  
                 ?_timer_reset 0001              ??_initDCmotorsPWM 0005   __end_of_buggy_color_response 0754  
                   ___flge@ff1 0003                     ___flge@ff2 0007                   ___xxtofl@arg 000D  
                 ___xxtofl@exp 000C                   ___xxtofl@val 0003                     __accesstop 0060  
      __end_of__initialization 1E6E       __end_of_color_read_Clear 1FBE       __end_of_color_read_Green 1F6E  
       ?_I2C_2_Master_RepStart 0001                  ___rparam_used 000001               ?_color_read_Blue 0007  
               __pcstackCOMRAM 0001                   __pidataBANK0 22EE                 ??_custom_delay 0005  
                __end_of_space 19BE            __end_of_Timer0_init 2286                        ??_space 0020  
                   _card_count 0044                     __pbssBANK0 0060                     __pbssBANK1 0100  
                ?_instructions 0028                        ?_LowISR 0001              _color_writetoaddr 2246  
                 _T2CLKCONbits 000FBF                        ?___flge 0003             ?_color_writetoaddr 0005  
                      ?___wmul 0003            ??_color_writetoaddr 0006                      ?___xxtofl 0003  
                      _SP4BRGH 000EE6                        _SP4BRGL 000EE5                        _SSP2ADD 000ED6  
                      _SSP2BUF 000ED5                     _need4speed 211C         color_writetoaddr@value 0005  
             ??_color_read_Red 0009                 ??_instructions 002E      __end_of_color_writetoaddr 2266  
           _I2C_2_Master_Start 22D6                     _initUSART4 2226             _I2C_2_Master_Write 22C0  
                    ?_right_45 001C                        __Hparam 0000                     _left_timer 005B  
                      __Lparam 0000              color_read_Red@tmp 000C                    _Timer0_init 2266  
                      ___fldiv 0754            ?_I2C_2_Master_Start 0001                        ___lwdiv 1D9E  
          ?_I2C_2_Master_Write 0001           _buggy_color_response 004C                        __pcinit 1E12  
                      __ramtop 0E00                        __ptext0 1E78                        __ptext1 211C  
                      __ptext2 2206                        __ptext3 200E                        __ptext4 22B0  
                      __ptext5 2226                        __ptext6 1D0E                        __ptext7 215A  
                      __ptext8 2246                        __ptext9 218E                        _left_45 12F6  
                    _T2CONbits 000FBD                        _forward 19BE                     ??___xxtofl 0007  
                ?_reverse_pink 0028                      _T2HLTbits 000FBE                        _reverse 1A7C  
                right_45@count 0020                  _RxBufWriteCnt 0041           ??_I2C_2_Master_Start 0004  
         ??_I2C_2_Master_Write 0004           end_of_initialization 1E6E           __end_of_custom_delay 211C  
            ?_color_click_init 0001                      _READcolor 1432                     ??_right_45 0024  
           ??_color_click_init 0007                        space@mL 001C                        space@mR 001E  
                      postdec1 000FE5                        postdec2 000FDD                        postinc0 000FEE  
                      postinc2 000FDE                     _motor_init 200E          ?_buggy_color_response 003A  
              _initDCmotorsPWM 1D0E                      _PORTFbits 000F8E             setMotorPWM@negDuty 0015  
               ??_reverse_pink 002C                  ___xxtofl@sign 000B                      _TRISAbits 000F81  
           setMotorPWM@posDuty 0014                      _TRISCbits 000F83                      _TRISDbits 000F84  
                    _TRISEbits 000F85                      _TRISFbits 000F86                      _TRISGbits 000F87  
                    _TRISHbits 000F88                    ___fldiv@grs 0024                     _ports_init 2206  
                  ___fldiv@rem 001D                    ?_need4speed 0001       color_writetoaddr@address 0006  
      ??_I2C_2_Master_RepStart 0004                    _CCP1CONbits 000FAB              ?_color_read_Clear 0007  
                 _EUSART4RXbuf 00B0                   _EUSART4TXbuf 0100                    _CCP2CONbits 000FA7  
            ?_color_read_Green 0007                     ?_READcolor 002A                    _CCP3CONbits 000F26  
                  ?_initUSART4 0001                    _CCP4CONbits 000F22             ??_color_read_Clear 0009  
           ??_color_read_Green 0009                 __end_of_LowISR 0048                 __end_of___flge 18BC  
               __end_of___wmul 2206                  __pidataCOMRAM 22EA           __end_of_instructions 0E0A  
          color_read_Clear@tmp 000C            start_initialization 1E12                  _TxBufWriteCnt 00C9  
                _instructions2 0E0A         buggy_color_response@mL 003A         buggy_color_response@mR 003C  
          color_read_Green@tmp 000C                       ??_LowISR 0001                 _reverse_yellow 1BEA  
      __end_of_initDCmotorsPWM 1D9E                       ??___flge 000B         ??_buggy_color_response 00DE  
                     ??___wmul 0007                    ?_motor_init 0003                     READcolor@c 002A  
                  __pdataBANK0 00DC                    _card_memory 0088                      ___fldiv@a 0015  
                    ___fldiv@b 0011                    __pbssCOMRAM 0040                  __pcstackBANK0 00DE  
                  ?_ports_init 0001                 ?_instructions2 002E                  _delay_ms_func 209C  
       __end_of_reverse_yellow 1C7C                    ??_READcolor 002C           __end_of_reverse_pink 1D0E  
             ___lwdiv@dividend 0009                   ?_Timer0_init 0001                       ?___fldiv 0011  
                     ?___lwdiv 0009                     right_45@mL 001C                     right_45@mR 001E  
                  __pintcodelo 0018                   _custom_delay 20DC           I2C_2_Master_Read@ack 0005  
            ??_interrupts_init 0003           I2C_2_Master_Read@tmp 0006                       ?_left_45 001C  
                     ?_forward 001C              _I2C_2_Master_Idle 21B8             instructions2@count 0032  
            _I2C_2_Master_Init 218E              _I2C_2_Master_Read 205A              _I2C_2_Master_Stop 22CC  
                 _RxBufReadCnt 0040                       ?_reverse 001C             ?_I2C_2_Master_Idle 0001  
           ?_I2C_2_Master_Init 0001             ?_I2C_2_Master_Read 0001                  ??_setMotorPWM 0012  
           ?_I2C_2_Master_Stop 0001               ___lwdiv@quotient 000D       initDCmotorsPWM@PWMperiod 0003  
               ?_delay_ms_func 0003                instructions2@mL 002E                instructions2@mR 0030  
          ??_I2C_2_Master_Idle 0003            ??_I2C_2_Master_Init 0003            ??_I2C_2_Master_Read 0004  
               ___wmul@product 0007                       _LATAbits 000F79            ??_I2C_2_Master_Stop 0004  
                     _LATCbits 000F7B                       _LATDbits 000F7C                       _LATEbits 000F7D  
                     _LATFbits 000F7E                 reverse_pink@mL 0028                       _LATGbits 000F7F  
               reverse_pink@mR 002A                       _LATHbits 000F80                ?_reverse_yellow 0028  
                     _IPR0bits 000E1F                       _PIE0bits 000E29                       i1u229_20 0032  
                     i1u229_21 002E                       _PIR0bits 000E33                       _PIR4bits 000E37  
             ?_initDCmotorsPWM 0003                       _SSP2CON2 000EDA                       _SSP2STAT 000ED8  
                    _timer_val 00C4      __end_of_I2C_2_Master_Idle 21E0      __end_of_I2C_2_Master_Init 21B8  
    __end_of_I2C_2_Master_Read 209C              ___wmul@multiplier 0003      __end_of_I2C_2_Master_Stop 22D6  
                 setMotorPWM@m 0010    I2C_2_Master_Write@data_byte 0004                      left_45@mL 001C  
                    left_45@mR 001E              ??_color_read_Blue 0009                   _TxBufReadCnt 00C8  
              ??_instructions2 0034                  ??_return_home 0038                  ??_timer_reset 0003  
                 ??_need4speed 0008                      copy_data0 1E3E  __end_of_I2C_2_Master_RepStart 22EA  
           color_read_Blue@tmp 000C            __end_of_setMotorPWM 12F6                   _instructions 0AEE  
                 ??_initUSART4 0003          buggy_color_response@c 003E                       __Hrparam 0000  
                     __Lrparam 0000                      forward@mL 001C                      forward@mR 001E  
           __end_of_need4speed 215A                     _ANSELDbits 000EA7                     _ANSELFbits 000EB4  
                     ___xxtofl 0FD6                     _T0CON0bits 000FD5                     _T0CON1bits 000FD6  
               _buggyLEDs_init 2286                ___lwdiv@divisor 000B             __end_of_initUSART4 2246  
              ___lwdiv@counter 000F                ??_delay_ms_func 0005                       __ptext10 2286  
                     __ptext11 2266                       __ptext20 0AEE                       __ptext12 004C  
                     __ptext21 18BC                       __ptext13 229C                       __ptext30 17B8  
                     __ptext22 156C                       __ptext14 1694                       __ptext31 1432  
                     __ptext23 1A7C                       __ptext15 0E0A                       __ptext40 205A  
                     __ptext32 1ECE                       __ptext24 12F6                       __ptext16 1BEA  
                     __ptext41 21B8                       __ptext33 1F1E                       __ptext25 1B3A  
                     __ptext17 1C7C                       __ptext42 0FD6                       __ptext34 1F6E  
                     __ptext26 118A                       __ptext18 19BE                       __ptext43 0754  
                     __ptext35 1FBE                       __ptext27 21E0                       __ptext19 209C  
                     __ptext36 22C0                       __ptext28 1D9E                       __ptext37 22CC  
                     __ptext29 20DC                       __ptext38 22D6                       __ptext39 22E0  
                    right_45@i 0026                   _SSP2CON1bits 000ED9                   _SSP2CON2bits 000EDA  
          __end_of_return_home 17B8            __end_of_timer_reset 22B0                 instructions@mL 0028  
               instructions@mR 002A                       _right_45 156C                      reverse@mL 001C  
                    reverse@mR 001E              instructions@count 002C                       isa$xinst 000000  
                   _RC4STAbits 000EE7                       int$flags 005D                   ??_motor_init 0007  
                     left_45@i 0026         __end_of_buggyLEDs_init 229C                     _INTCONbits 000FF2  
                 _reverse_pink 1C7C                   ??_ports_init 0003                    _setMotorPWM 118A  
                     intlevel1 0000             __end_of_motor_init 205A                    _right_timer 0059  
             reverse_yellow@mL 0028               reverse_yellow@mR 002A                _interrupts_init 22B0  
                 _timer_memory 0060             __end_of_ports_init 2226                   motor_init@mL 0003  
                 motor_init@mR 0005               _color_click_init 215A            right_45@right_timer 0022  
              ?_buggyLEDs_init 0001                     _SSP2DATPPS 000E1D                     _SSP2CLKPPS 000E1C  
                  _timer_index 0043                    _return_home 1694                    _timer_reset 229C  
             ??_reverse_yellow 002C                     _TX4STAbits 000EE8                  custom_delay@i 0006  
