

Microchip MPLAB XC8 Assembler V2.40 build 20220703182018 
                                                                                               Wed Mar 15 20:32:06 2023

Microchip MPLAB XC8 C Compiler v2.40 (Free license) build 20220703182018 Og1 
     1                           	processor	18F67K40
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    15                           	psect	text0,global,reloc=2,class=CODE,delta=1
    16                           	psect	text1,global,reloc=2,class=CODE,delta=1
    17                           	psect	text2,global,reloc=2,class=CODE,delta=1
    18                           	psect	text3,global,reloc=2,class=CODE,delta=1
    19                           	psect	text4,global,reloc=2,class=CODE,delta=1
    20                           	psect	text5,global,reloc=2,class=CODE,delta=1
    21                           	psect	text6,global,reloc=2,class=CODE,delta=1
    22                           	psect	text7,global,reloc=2,class=CODE,delta=1
    23                           	psect	text8,global,reloc=2,class=CODE,delta=1
    24                           	psect	text9,global,reloc=2,class=CODE,delta=1
    25                           	psect	text10,global,reloc=2,class=CODE,delta=1
    26                           	psect	text11,global,reloc=2,class=CODE,delta=1
    27                           	psect	text12,global,reloc=2,class=CODE,delta=1
    28                           	psect	text13,global,reloc=2,class=CODE,delta=1
    29                           	psect	text14,global,reloc=2,class=CODE,delta=1
    30                           	psect	text15,global,reloc=2,class=CODE,delta=1
    31                           	psect	text16,global,reloc=2,class=CODE,delta=1
    32                           	psect	text17,global,reloc=2,class=CODE,delta=1
    33                           	psect	text18,global,reloc=2,class=CODE,delta=1
    34                           	psect	text19,global,reloc=2,class=CODE,delta=1
    35                           	psect	text20,global,reloc=2,class=CODE,delta=1
    36                           	psect	text21,global,reloc=2,class=CODE,delta=1
    37                           	psect	text22,global,reloc=2,class=CODE,delta=1
    38                           	psect	text23,global,reloc=2,class=CODE,delta=1
    39                           	psect	text24,global,reloc=2,class=CODE,delta=1
    40                           	psect	text25,global,reloc=2,class=CODE,delta=1
    41                           	psect	text26,global,reloc=2,class=CODE,delta=1
    42                           	psect	text27,global,reloc=2,class=CODE,delta=1
    43                           	psect	text28,global,reloc=2,class=CODE,delta=1,group=1
    44                           	psect	text29,global,reloc=2,class=CODE,delta=1,group=1
    45                           	psect	text30,global,reloc=2,class=CODE,delta=1
    46                           	psect	text31,global,reloc=2,class=CODE,delta=1,group=1
    47                           	psect	text32,global,reloc=2,class=CODE,delta=1
    48                           	psect	text33,global,reloc=2,class=CODE,delta=1
    49                           	psect	text34,global,reloc=2,class=CODE,delta=1
    50                           	psect	text35,global,reloc=2,class=CODE,delta=1
    51                           	psect	text36,global,reloc=2,class=CODE,delta=1
    52                           	psect	text37,global,reloc=2,class=CODE,delta=1
    53                           	psect	text38,global,reloc=2,class=CODE,delta=1
    54                           	psect	text39,global,reloc=2,class=CODE,delta=1
    55                           	psect	text40,global,reloc=2,class=CODE,delta=1
    56                           	psect	text41,global,reloc=2,class=CODE,delta=1
    57                           	psect	text42,global,reloc=2,class=CODE,delta=1
    58                           	psect	text43,global,reloc=2,class=CODE,delta=1,group=1
    59                           	psect	text44,global,reloc=2,class=CODE,delta=1,group=1
    60                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    61                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    62                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    63                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    64                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    65                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    66   000000                     
    67                           ; Generated 06/04/2022 GMT
    68                           ; 
    69                           ; Copyright Â© 2022, Microchip Technology Inc. and its subsidiaries ("Microchip")
    70                           ; All rights reserved.
    71                           ; 
    72                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    73                           ; 
    74                           ; Redistribution and use in source and binary forms, with or without modification, are
    75                           ; permitted provided that the following conditions are met:
    76                           ; 
    77                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    78                           ;        conditions and the following disclaimer.
    79                           ; 
    80                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    81                           ;        of conditions and the following disclaimer in the documentation and/or other
    82                           ;        materials provided with the distribution. Publication is not required when
    83                           ;        this file is used in an embedded application.
    84                           ; 
    85                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    86                           ;        software without specific prior written permission.
    87                           ; 
    88                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    89                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    90                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    91                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    92                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    93                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    94                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    95                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    96                           ; 
    97                           ; 
    98                           ; Code-generator required, PIC18F67K40 Definitions
    99                           ; 
   100                           ; SFR Addresses
   101   000000                     
   102                           	psect	idataCOMRAM
   103   00239E                     __pidataCOMRAM:
   104                           	callstack 0
   105                           
   106                           ;initializer for _right_timer
   107   00239E  0060               	dw	96
   108                           
   109                           ;initializer for _left_timer
   110   0023A0  0062               	dw	98
   111                           
   112                           	psect	idataBANK0
   113   0023A2                     __pidataBANK0:
   114                           	callstack 0
   115                           
   116                           ;initializer for _color_upperbound
   117   0023A2  09C4               	dw	2500
   118   000000                     _TRISFbits	set	3974
   119   000000                     _LATDbits	set	3964
   120   000000                     _TRISGbits	set	3975
   121   000000                     _TRISEbits	set	3973
   122   000000                     _TX4REG	set	3812
   123   000000                     _RC4STAbits	set	3815
   124   000000                     _SP4BRGH	set	3814
   125   000000                     _SSP2CON2bits	set	3802
   126   000000                     _RX4PPS	set	3605
   127   000000                     _SSP2CLKPPS	set	3612
   128   000000                     _SSP2DATPPS	set	3613
   129   000000                     _ANSELDbits	set	3751
   130   000000                     _SSP2ADD	set	3798
   131   000000                     _SSP2CON1bits	set	3801
   132   000000                     _RC4REG	set	3811
   133   000000                     _SP4BRGL	set	3813
   134   000000                     _TX4STAbits	set	3816
   135   000000                     _BAUD4CONbits	set	3817
   136   000000                     _LATAbits	set	3961
   137   000000                     _LATGbits	set	3967
   138   000000                     _SSP2CON2	set	3802
   139   000000                     _TRISDbits	set	3972
   140   000000                     _SSP2STAT	set	3800
   141   000000                     _ANSELFbits	set	3764
   142   000000                     _SSP2BUF	set	3797
   143   000000                     _IPR0bits	set	3615
   144   000000                     _PIE0bits	set	3625
   145   000000                     _PIR4bits	set	3639
   146   000000                     _RC0PPS	set	3682
   147   000000                     _RD5PPS	set	3695
   148   000000                     _RE2PPS	set	3700
   149   000000                     _RD6PPS	set	3696
   150   000000                     _TRISAbits	set	3969
   151   000000                     _LATHbits	set	3968
   152   000000                     _TRISCbits	set	3971
   153   000000                     _LATCbits	set	3963
   154   000000                     _LATEbits	set	3965
   155   000000                     _LATFbits	set	3966
   156   000000                     _RC7PPS	set	3689
   157   000000                     _CCPR4H	set	3873
   158   000000                     _CCPR3H	set	3877
   159   000000                     _TRISHbits	set	3976
   160   000000                     _PORTFbits	set	3982
   161   000000                     _T2PR	set	4028
   162   000000                     _T2CONbits	set	4029
   163   000000                     _CCPR2H	set	4006
   164   000000                     _CCPR1H	set	4010
   165   000000                     _RE4PPS	set	3702
   166   000000                     _RG6PPS	set	3720
   167   000000                     _TMR0L	set	4051
   168   000000                     _TMR0H	set	4052
   169   000000                     _T0CON0bits	set	4053
   170   000000                     _T0CON1bits	set	4054
   171   000000                     _INTCONbits	set	4082
   172   000000                     _T2CLKCONbits	set	4031
   173   000000                     _T2HLTbits	set	4030
   174   000000                     _CCP1CONbits	set	4011
   175   000000                     _CCPTMRS0bits	set	4013
   176   000000                     _CCP2CONbits	set	4007
   177   000000                     _ADREFbits	set	3928
   178   000000                     _CCP3CONbits	set	3878
   179   000000                     _CCP4CONbits	set	3874
   180   000000                     _PIR0bits	set	3635
   181   000000                     _ADPCH	set	3935
   182   000000                     _ADRESH	set	3940
   183   000000                     _ADCON0bits	set	3936
   184                           
   185                           ; #config settings
   186                           
   187                           	psect	cinit
   188   001EFE                     __pcinit:
   189                           	callstack 0
   190   001EFE                     start_initialization:
   191                           	callstack 0
   192   001EFE                     __initialization:
   193                           	callstack 0
   194                           
   195                           ; Initialize objects allocated to BANK0 (2 bytes)
   196                           ; load TBLPTR registers with __pidataBANK0
   197   001EFE  0EA2               	movlw	low __pidataBANK0
   198   001F00  6EF6               	movwf	tblptrl,c
   199   001F02  0E23               	movlw	high __pidataBANK0
   200   001F04  6EF7               	movwf	tblptrh,c
   201   001F06  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   202   001F08  6EF8               	movwf	tblptru,c
   203   001F0A  0009               	tblrd		*+	;fetch initializer
   204   001F0C  CFF5 F0DE          	movff	tablat,__pdataBANK0
   205   001F10  0009               	tblrd		*+	;fetch initializer
   206   001F12  CFF5 F0DF          	movff	tablat,__pdataBANK0+1
   207                           
   208                           ; Initialize objects allocated to COMRAM (4 bytes)
   209                           ; load TBLPTR registers with __pidataCOMRAM
   210   001F16  0E9E               	movlw	low __pidataCOMRAM
   211   001F18  6EF6               	movwf	tblptrl,c
   212   001F1A  0E23               	movlw	high __pidataCOMRAM
   213   001F1C  6EF7               	movwf	tblptrh,c
   214   001F1E  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   215   001F20  6EF8               	movwf	tblptru,c
   216   001F22  EE00  F059         	lfsr	0,__pdataCOMRAM
   217   001F26  EE10 F004          	lfsr	1,4
   218   001F2A                     copy_data0:
   219   001F2A  0009               	tblrd		*+
   220   001F2C  CFF5 FFEE          	movff	tablat,postinc0
   221   001F30  50E5               	movf	postdec1,w,c
   222   001F32  50E1               	movf	fsr1l,w,c
   223   001F34  E1FA               	bnz	copy_data0
   224                           
   225                           ; Clear objects allocated to BANK1 (60 bytes)
   226   001F36  EE01  F000         	lfsr	0,__pbssBANK1
   227   001F3A  0E3C               	movlw	60
   228   001F3C                     clear_0:
   229   001F3C  6AEE               	clrf	postinc0,c
   230   001F3E  06E8               	decf	wreg,f,c
   231   001F40  E1FD               	bnz	clear_0
   232                           
   233                           ; Clear objects allocated to BANK0 (126 bytes)
   234   001F42  EE00  F060         	lfsr	0,__pbssBANK0
   235   001F46  0E7E               	movlw	126
   236   001F48                     clear_1:
   237   001F48  6AEE               	clrf	postinc0,c
   238   001F4A  06E8               	decf	wreg,f,c
   239   001F4C  E1FD               	bnz	clear_1
   240                           
   241                           ; Clear objects allocated to COMRAM (23 bytes)
   242   001F4E  EE00  F042         	lfsr	0,__pbssCOMRAM
   243   001F52  0E17               	movlw	23
   244   001F54                     clear_2:
   245   001F54  6AEE               	clrf	postinc0,c
   246   001F56  06E8               	decf	wreg,f,c
   247   001F58  E1FD               	bnz	clear_2
   248   001F5A                     end_of_initialization:
   249                           	callstack 0
   250   001F5A                     __end_of__initialization:
   251                           	callstack 0
   252   001F5A  905D               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   253   001F5C  925D               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   254   001F5E  0100               	movlb	0
   255   001F60  EF48  F00F         	goto	_main	;jump to C main() function
   256                           
   257                           	psect	bssCOMRAM
   258   000042                     __pbssCOMRAM:
   259                           	callstack 0
   260   000042                     _T_flag:
   261                           	callstack 0
   262   000042                     	ds	1
   263   000043                     _timer_index:
   264                           	callstack 0
   265   000043                     	ds	1
   266   000044                     _card_count:
   267                           	callstack 0
   268   000044                     	ds	1
   269   000045                     _color:
   270                           	callstack 0
   271   000045                     	ds	20
   272                           
   273                           	psect	dataCOMRAM
   274   000059                     __pdataCOMRAM:
   275                           	callstack 0
   276   000059                     _right_timer:
   277                           	callstack 0
   278   000059                     	ds	2
   279   00005B                     _left_timer:
   280                           	callstack 0
   281   00005B                     	ds	2
   282                           
   283                           	psect	bssBANK0
   284   000060                     __pbssBANK0:
   285                           	callstack 0
   286   000060                     _timer_memory:
   287                           	callstack 0
   288   000060                     	ds	40
   289   000088                     _card_memory:
   290                           	callstack 0
   291   000088                     	ds	40
   292   0000B0                     _EUSART4RXbuf:
   293                           	callstack 0
   294   0000B0                     	ds	20
   295   0000C4                     _timer_val:
   296                           	callstack 0
   297   0000C4                     	ds	2
   298   0000C6                     _color_lowerbound:
   299                           	callstack 0
   300   0000C6                     	ds	2
   301   0000C8                     _TxBufReadCnt:
   302                           	callstack 0
   303   0000C8                     	ds	1
   304   0000C9                     _TxBufWriteCnt:
   305                           	callstack 0
   306   0000C9                     	ds	1
   307   0000CA                     _RxBufReadCnt:
   308                           	callstack 0
   309   0000CA                     	ds	1
   310   0000CB                     _RxBufWriteCnt:
   311                           	callstack 0
   312   0000CB                     	ds	1
   313   0000CC                     _motorR:
   314                           	callstack 0
   315   0000CC                     	ds	9
   316   0000D5                     _motorL:
   317                           	callstack 0
   318   0000D5                     	ds	9
   319                           
   320                           	psect	dataBANK0
   321   0000DE                     __pdataBANK0:
   322                           	callstack 0
   323   0000DE                     _color_upperbound:
   324                           	callstack 0
   325   0000DE                     	ds	2
   326                           
   327                           	psect	bssBANK1
   328   000100                     __pbssBANK1:
   329                           	callstack 0
   330   000100                     _EUSART4TXbuf:
   331                           	callstack 0
   332   000100                     	ds	60
   333                           
   334                           	psect	cstackBANK0
   335   0000E0                     __pcstackBANK0:
   336                           	callstack 0
   337   0000E0                     ??_main:
   338                           
   339                           ; 1 bytes @ 0x0
   340   0000E0                     	ds	2
   341                           
   342                           	psect	cstackCOMRAM
   343   000001                     __pcstackCOMRAM:
   344                           	callstack 0
   345   000001                     ??_LowISR:
   346   000001                     
   347                           ; 1 bytes @ 0x0
   348   000001                     	ds	2
   349   000003                     ??_I2C_2_Master_Idle:
   350   000003                     ?___wmul:
   351                           	callstack 0
   352   000003                     ?___xxtofl:
   353                           	callstack 0
   354   000003                     delay_ms_func@time:
   355                           	callstack 0
   356   000003                     initDCmotorsPWM@PWMperiod:
   357                           	callstack 0
   358   000003                     motor_init@mL:
   359                           	callstack 0
   360   000003                     custom_delay@temp:
   361                           	callstack 0
   362   000003                     ___wmul@multiplier:
   363                           	callstack 0
   364   000003                     ___flge@ff1:
   365                           	callstack 0
   366   000003                     ___xxtofl@val:
   367                           	callstack 0
   368                           
   369                           ; 4 bytes @ 0x2
   370   000003                     	ds	1
   371   000004                     ??_I2C_2_Master_Read:
   372   000004                     I2C_2_Master_Write@data_byte:
   373                           	callstack 0
   374                           
   375                           ; 1 bytes @ 0x3
   376   000004                     	ds	1
   377   000005                     ??_delay_ms_func:
   378   000005                     ??_custom_delay:
   379   000005                     I2C_2_Master_Read@ack:
   380                           	callstack 0
   381   000005                     color_writetoaddr@value:
   382                           	callstack 0
   383   000005                     motor_init@mR:
   384                           	callstack 0
   385   000005                     ___wmul@multiplicand:
   386                           	callstack 0
   387                           
   388                           ; 2 bytes @ 0x4
   389   000005                     	ds	1
   390   000006                     I2C_2_Master_Read@tmp:
   391                           	callstack 0
   392   000006                     color_writetoaddr@address:
   393                           	callstack 0
   394   000006                     custom_delay@i:
   395                           	callstack 0
   396                           
   397                           ; 2 bytes @ 0x5
   398   000006                     	ds	1
   399   000007                     ??_color_click_init:
   400   000007                     ??___xxtofl:
   401   000007                     ?_color_read_Red:
   402                           	callstack 0
   403   000007                     ?_color_read_Blue:
   404                           	callstack 0
   405   000007                     ?_color_read_Green:
   406                           	callstack 0
   407   000007                     ?_color_read_Clear:
   408                           	callstack 0
   409   000007                     delay_ms_func@i:
   410                           	callstack 0
   411   000007                     ___wmul@product:
   412                           	callstack 0
   413   000007                     ___flge@ff2:
   414                           	callstack 0
   415                           
   416                           ; 4 bytes @ 0x6
   417   000007                     	ds	1
   418   000008                     
   419                           ; 1 bytes @ 0x7
   420   000008                     	ds	1
   421   000009                     ??_color_read_Red:
   422   000009                     ??_color_read_Blue:
   423   000009                     ??_color_read_Green:
   424   000009                     ??_color_read_Clear:
   425   000009                     ?___lwdiv:
   426                           	callstack 0
   427   000009                     ___lwdiv@dividend:
   428                           	callstack 0
   429                           
   430                           ; 2 bytes @ 0x8
   431   000009                     	ds	2
   432   00000B                     ??___flge:
   433   00000B                     ___xxtofl@sign:
   434                           	callstack 0
   435   00000B                     ___lwdiv@divisor:
   436                           	callstack 0
   437                           
   438                           ; 2 bytes @ 0xA
   439   00000B                     	ds	1
   440   00000C                     ___xxtofl@exp:
   441                           	callstack 0
   442   00000C                     color_read_Red@tmp:
   443                           	callstack 0
   444   00000C                     color_read_Blue@tmp:
   445                           	callstack 0
   446   00000C                     color_read_Green@tmp:
   447                           	callstack 0
   448   00000C                     color_read_Clear@tmp:
   449                           	callstack 0
   450                           
   451                           ; 2 bytes @ 0xB
   452   00000C                     	ds	1
   453   00000D                     ___lwdiv@quotient:
   454                           	callstack 0
   455   00000D                     ___xxtofl@arg:
   456                           	callstack 0
   457                           
   458                           ; 4 bytes @ 0xC
   459   00000D                     	ds	2
   460   00000F                     ___lwdiv@counter:
   461                           	callstack 0
   462                           
   463                           ; 1 bytes @ 0xE
   464   00000F                     	ds	1
   465   000010                     setMotorPWM@m:
   466                           	callstack 0
   467                           
   468                           ; 2 bytes @ 0xF
   469   000010                     	ds	1
   470   000011                     ?___fldiv:
   471                           	callstack 0
   472   000011                     ___fldiv@b:
   473                           	callstack 0
   474                           
   475                           ; 4 bytes @ 0x10
   476   000011                     	ds	1
   477   000012                     ??_setMotorPWM:
   478                           
   479                           ; 1 bytes @ 0x11
   480   000012                     	ds	2
   481   000014                     setMotorPWM@posDuty:
   482                           	callstack 0
   483                           
   484                           ; 1 bytes @ 0x13
   485   000014                     	ds	1
   486   000015                     setMotorPWM@negDuty:
   487                           	callstack 0
   488   000015                     ___fldiv@a:
   489                           	callstack 0
   490                           
   491                           ; 4 bytes @ 0x14
   492   000015                     	ds	1
   493   000016                     stop@mL:
   494                           	callstack 0
   495                           
   496                           ; 2 bytes @ 0x15
   497   000016                     	ds	2
   498   000018                     stop@mR:
   499                           	callstack 0
   500                           
   501                           ; 2 bytes @ 0x17
   502   000018                     	ds	1
   503   000019                     ??___fldiv:
   504                           
   505                           ; 1 bytes @ 0x18
   506   000019                     	ds	1
   507   00001A                     stop@i:
   508                           	callstack 0
   509                           
   510                           ; 2 bytes @ 0x19
   511   00001A                     	ds	2
   512   00001C                     forward@mL:
   513                           	callstack 0
   514   00001C                     reverse@mL:
   515                           	callstack 0
   516   00001C                     left_45@mL:
   517                           	callstack 0
   518   00001C                     right_45@mL:
   519                           	callstack 0
   520   00001C                     space@mL:
   521                           	callstack 0
   522                           
   523                           ; 2 bytes @ 0x1B
   524   00001C                     	ds	1
   525   00001D                     ___fldiv@rem:
   526                           	callstack 0
   527                           
   528                           ; 4 bytes @ 0x1C
   529   00001D                     	ds	1
   530   00001E                     forward@mR:
   531                           	callstack 0
   532   00001E                     reverse@mR:
   533                           	callstack 0
   534   00001E                     left_45@mR:
   535                           	callstack 0
   536   00001E                     right_45@mR:
   537                           	callstack 0
   538   00001E                     space@mR:
   539                           	callstack 0
   540                           
   541                           ; 2 bytes @ 0x1D
   542   00001E                     	ds	2
   543   000020                     ??_space:
   544   000020                     left_45@count:
   545                           	callstack 0
   546   000020                     right_45@count:
   547                           	callstack 0
   548                           
   549                           ; 2 bytes @ 0x1F
   550   000020                     	ds	1
   551   000021                     ___fldiv@sign:
   552                           	callstack 0
   553                           
   554                           ; 1 bytes @ 0x20
   555   000021                     	ds	1
   556   000022                     left_45@left_timer:
   557                           	callstack 0
   558   000022                     right_45@right_timer:
   559                           	callstack 0
   560   000022                     ___fldiv@new_exp:
   561                           	callstack 0
   562                           
   563                           ; 2 bytes @ 0x21
   564   000022                     	ds	2
   565   000024                     ??_left_45:
   566   000024                     ??_right_45:
   567   000024                     ___fldiv@grs:
   568                           	callstack 0
   569                           
   570                           ; 4 bytes @ 0x23
   571   000024                     	ds	2
   572   000026                     left_45@i:
   573                           	callstack 0
   574   000026                     right_45@i:
   575                           	callstack 0
   576                           
   577                           ; 2 bytes @ 0x25
   578   000026                     	ds	2
   579   000028                     ___fldiv@bexp:
   580                           	callstack 0
   581   000028                     reverse_pink@mL:
   582                           	callstack 0
   583   000028                     reverse_yellow@mL:
   584                           	callstack 0
   585   000028                     movement@mL:
   586                           	callstack 0
   587                           
   588                           ; 2 bytes @ 0x27
   589   000028                     	ds	1
   590   000029                     ___fldiv@aexp:
   591                           	callstack 0
   592                           
   593                           ; 1 bytes @ 0x28
   594   000029                     	ds	1
   595   00002A                     READcolor@c:
   596                           	callstack 0
   597   00002A                     reverse_pink@mR:
   598                           	callstack 0
   599   00002A                     reverse_yellow@mR:
   600                           	callstack 0
   601   00002A                     movement@mR:
   602                           	callstack 0
   603                           
   604                           ; 2 bytes @ 0x29
   605   00002A                     	ds	2
   606   00002C                     ??_reverse_pink:
   607   00002C                     ??_reverse_yellow:
   608   00002C                     movement@count:
   609                           	callstack 0
   610                           
   611                           ; 2 bytes @ 0x2B
   612   00002C                     	ds	2
   613   00002E                     ??_movement:
   614   00002E                     movement_return@mL:
   615                           	callstack 0
   616                           
   617                           ; 2 bytes @ 0x2D
   618   00002E                     	ds	2
   619   000030                     movement_return@mR:
   620                           	callstack 0
   621                           
   622                           ; 2 bytes @ 0x2F
   623   000030                     	ds	2
   624   000032                     movement_return@count:
   625                           	callstack 0
   626                           
   627                           ; 2 bytes @ 0x31
   628   000032                     	ds	2
   629   000034                     return_home@mL:
   630                           	callstack 0
   631                           
   632                           ; 2 bytes @ 0x33
   633   000034                     	ds	2
   634   000036                     return_home@mR:
   635                           	callstack 0
   636                           
   637                           ; 2 bytes @ 0x35
   638   000036                     	ds	2
   639   000038                     ??_return_home:
   640                           
   641                           ; 1 bytes @ 0x37
   642   000038                     	ds	2
   643   00003A                     buggy_color_response@mL:
   644                           	callstack 0
   645                           
   646                           ; 2 bytes @ 0x39
   647   00003A                     	ds	2
   648   00003C                     buggy_color_response@mR:
   649                           	callstack 0
   650                           
   651                           ; 2 bytes @ 0x3B
   652   00003C                     	ds	2
   653   00003E                     buggy_color_response@c:
   654                           	callstack 0
   655                           
   656                           ; 2 bytes @ 0x3D
   657   00003E                     	ds	2
   658   000040                     ??_buggy_color_response:
   659                           
   660                           ; 1 bytes @ 0x3F
   661   000040                     	ds	2
   662                           
   663 ;;
   664 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   665 ;;
   666 ;; *************** function _main *****************
   667 ;; Defined at:
   668 ;;		line 19 in file "main.c"
   669 ;; Parameters:    Size  Location     Type
   670 ;;		None
   671 ;; Auto vars:     Size  Location     Type
   672 ;;		None
   673 ;; Return value:  Size  Location     Type
   674 ;;                  1    wreg      void 
   675 ;; Registers used:
   676 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   677 ;; Tracked objects:
   678 ;;		On entry : 0/0
   679 ;;		On exit  : 0/0
   680 ;;		Unchanged: 0/0
   681 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   682 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   683 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   684 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   685 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   686 ;;Total ram usage:        2 bytes
   687 ;; Hardware stack levels required when called: 9
   688 ;; This function calls:
   689 ;;		_buggy_color_response
   690 ;;		_complete_initialisation
   691 ;;		_timer_reset
   692 ;; This function is called by:
   693 ;;		Startup code after reset
   694 ;; This function uses a non-reentrant model
   695 ;;
   696                           
   697                           	psect	text0
   698   001E90                     __ptext0:
   699                           	callstack 0
   700   001E90                     _main:
   701                           	callstack 22
   702   001E90                     
   703                           ;main.c: 21:     complete_initialisation();
   704   001E90  EC78  F010         	call	_complete_initialisation	;wreg free
   705   001E94                     l414:
   706   001E94  A48E               	btfss	142,2,c	;volatile
   707   001E96  EF4F  F00F         	goto	u2501
   708   001E9A  EF51  F00F         	goto	u2500
   709   001E9E                     u2501:
   710   001E9E  EF58  F00F         	goto	l418
   711   001EA2                     u2500:
   712   001EA2  B68E               	btfsc	142,3,c	;volatile
   713   001EA4  EF56  F00F         	goto	u2511
   714   001EA8  EF58  F00F         	goto	u2510
   715   001EAC                     u2511:
   716   001EAC  EF4A  F00F         	goto	l414
   717   001EB0                     u2510:
   718   001EB0                     l418:
   719                           
   720                           ;main.c: 24:     if (!PORTFbits.RF3){_delay((unsigned long)((500)*(64000000/4000.0)));ti
      +                          mer_reset();
   721   001EB0  B68E               	btfsc	142,3,c	;volatile
   722   001EB2  EF5D  F00F         	goto	u2521
   723   001EB6  EF5F  F00F         	goto	u2520
   724   001EBA                     u2521:
   725   001EBA  EF7D  F00F         	goto	l423
   726   001EBE                     u2520:
   727   001EBE  0E29               	movlw	41
   728   001EC0  0100               	movlb	0	; () banked
   729   001EC2  6FE1               	movwf	(??_main+1)& (0+255),b
   730   001EC4  0E96               	movlw	150
   731   001EC6  6FE0               	movwf	??_main& (0+255),b
   732   001EC8  0E7F               	movlw	127
   733   001ECA                     u2537:
   734   001ECA  2EE8               	decfsz	wreg,f,c
   735   001ECC  D7FE               	bra	u2537
   736   001ECE  2FE0               	decfsz	??_main& (0+255),f,b
   737   001ED0  D7FC               	bra	u2537
   738   001ED2  2FE1               	decfsz	(??_main+1)& (0+255),f,b
   739   001ED4  D7FA               	bra	u2537
   740   001ED6  ECA8  F011         	call	_timer_reset	;wreg free
   741   001EDA                     l3267:
   742                           
   743                           ;main.c: 26:         buggy_color_response(&motorL,&motorR,&color);
   744   001EDA  0ED5               	movlw	low _motorL
   745   001EDC  6E3A               	movwf	buggy_color_response@mL^0,c
   746   001EDE  0E00               	movlw	high _motorL
   747   001EE0  6E3B               	movwf	(buggy_color_response@mL+1)^0,c
   748   001EE2  0ECC               	movlw	low _motorR
   749   001EE4  6E3C               	movwf	buggy_color_response@mR^0,c
   750   001EE6  0E00               	movlw	high _motorR
   751   001EE8  6E3D               	movwf	(buggy_color_response@mR+1)^0,c
   752   001EEA  0E45               	movlw	low _color
   753   001EEC  6E3E               	movwf	buggy_color_response@c^0,c
   754   001EEE  0E00               	movlw	high _color
   755   001EF0  6E3F               	movwf	(buggy_color_response@c+1)^0,c
   756   001EF2  EC26  F000         	call	_buggy_color_response	;wreg free
   757   001EF6  EF6D  F00F         	goto	l3267
   758   001EFA                     l423:
   759   001EFA  EF24  F000         	goto	start
   760   001EFE                     __end_of_main:
   761                           	callstack 0
   762                           
   763 ;; *************** function _complete_initialisation *****************
   764 ;; Defined at:
   765 ;;		line 14 in file "initialisation.c"
   766 ;; Parameters:    Size  Location     Type
   767 ;;		None
   768 ;; Auto vars:     Size  Location     Type
   769 ;;		None
   770 ;; Return value:  Size  Location     Type
   771 ;;                  1    wreg      void 
   772 ;; Registers used:
   773 ;;		wreg, status,2, status,0, cstack
   774 ;; Tracked objects:
   775 ;;		On entry : 0/0
   776 ;;		On exit  : 0/0
   777 ;;		Unchanged: 0/0
   778 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   779 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   780 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   781 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   782 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   783 ;;Total ram usage:        0 bytes
   784 ;; Hardware stack levels used: 1
   785 ;; Hardware stack levels required when called: 5
   786 ;; This function calls:
   787 ;;		_ADC_init
   788 ;;		_I2C_2_Master_Init
   789 ;;		_Timer0_init
   790 ;;		_buggyLEDs_init
   791 ;;		_color_click_init
   792 ;;		_initDCmotorsPWM
   793 ;;		_initUSART4
   794 ;;		_interrupts_init
   795 ;;		_motor_init
   796 ;;		_ports_init
   797 ;; This function is called by:
   798 ;;		_main
   799 ;; This function uses a non-reentrant model
   800 ;;
   801                           
   802                           	psect	text1
   803   0020F0                     __ptext1:
   804                           	callstack 0
   805   0020F0                     _complete_initialisation:
   806                           	callstack 25
   807   0020F0                     
   808                           ;initialisation.c: 16:     initDCmotorsPWM(99);
   809   0020F0  0E00               	movlw	0
   810   0020F2  6E04               	movwf	(initDCmotorsPWM@PWMperiod+1)^0,c
   811   0020F4  0E63               	movlw	99
   812   0020F6  6E03               	movwf	initDCmotorsPWM@PWMperiod^0,c
   813   0020F8  ECC6  F00E         	call	_initDCmotorsPWM	;wreg free
   814   0020FC                     
   815                           ;initialisation.c: 17:     buggyLEDs_init();
   816   0020FC  EC9D  F011         	call	_buggyLEDs_init	;wreg free
   817   002100                     
   818                           ;initialisation.c: 18:     ports_init();
   819   002100  EC50  F011         	call	_ports_init	;wreg free
   820   002104                     
   821                           ;initialisation.c: 19:     motor_init(&motorL,&motorR);
   822   002104  0ED5               	movlw	low _motorL
   823   002106  6E03               	movwf	motor_init@mL^0,c
   824   002108  0E00               	movlw	high _motorL
   825   00210A  6E04               	movwf	(motor_init@mL+1)^0,c
   826   00210C  0ECC               	movlw	low _motorR
   827   00210E  6E05               	movwf	motor_init@mR^0,c
   828   002110  0E00               	movlw	high _motorR
   829   002112  6E06               	movwf	(motor_init@mR+1)^0,c
   830   002114  EC52  F010         	call	_motor_init	;wreg free
   831   002118                     
   832                           ;initialisation.c: 20:     I2C_2_Master_Init();
   833   002118  EC14  F011         	call	_I2C_2_Master_Init	;wreg free
   834                           
   835                           ;initialisation.c: 21:     color_click_init();
   836   00211C  ECFA  F010         	call	_color_click_init	;wreg free
   837   002120                     
   838                           ;initialisation.c: 22:     Timer0_init();
   839   002120  EC80  F011         	call	_Timer0_init	;wreg free
   840   002124                     
   841                           ;initialisation.c: 23:     interrupts_init();
   842   002124  ECB2  F011         	call	_interrupts_init	;wreg free
   843   002128                     
   844                           ;initialisation.c: 24:     initUSART4();
   845   002128  EC60  F011         	call	_initUSART4	;wreg free
   846   00212C                     
   847                           ;initialisation.c: 25:     ADC_init();
   848   00212C  EC90  F011         	call	_ADC_init	;wreg free
   849   002130  0012               	return		;funcret
   850   002132                     __end_of_complete_initialisation:
   851                           	callstack 0
   852                           
   853 ;; *************** function _ports_init *****************
   854 ;; Defined at:
   855 ;;		line 5 in file "lights_buttons.c"
   856 ;; Parameters:    Size  Location     Type
   857 ;;		None
   858 ;; Auto vars:     Size  Location     Type
   859 ;;		None
   860 ;; Return value:  Size  Location     Type
   861 ;;                  1    wreg      void 
   862 ;; Registers used:
   863 ;;		None
   864 ;; Tracked objects:
   865 ;;		On entry : 0/0
   866 ;;		On exit  : 0/0
   867 ;;		Unchanged: 0/0
   868 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   869 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   870 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   871 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   872 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   873 ;;Total ram usage:        0 bytes
   874 ;; Hardware stack levels used: 1
   875 ;; Hardware stack levels required when called: 1
   876 ;; This function calls:
   877 ;;		Nothing
   878 ;; This function is called by:
   879 ;;		_complete_initialisation
   880 ;; This function uses a non-reentrant model
   881 ;;
   882                           
   883                           	psect	text2
   884   0022A0                     __ptext2:
   885                           	callstack 0
   886   0022A0                     _ports_init:
   887                           	callstack 28
   888   0022A0                     
   889                           ;lights_buttons.c: 7:     TRISGbits.TRISG1 = 0;
   890   0022A0  9287               	bcf	135,1,c	;volatile
   891                           
   892                           ;lights_buttons.c: 8:     TRISAbits.TRISA4 = 0;
   893   0022A2  9881               	bcf	129,4,c	;volatile
   894                           
   895                           ;lights_buttons.c: 9:     TRISFbits.TRISF7 = 0;
   896   0022A4  9E86               	bcf	134,7,c	;volatile
   897                           
   898                           ;lights_buttons.c: 11:     LATGbits.LATG1 = 1;
   899   0022A6  827F               	bsf	127,1,c	;volatile
   900                           
   901                           ;lights_buttons.c: 12:     LATAbits.LATA4 = 1;
   902   0022A8  8879               	bsf	121,4,c	;volatile
   903                           
   904                           ;lights_buttons.c: 13:     LATFbits.LATF7 = 1;
   905   0022AA  8E7E               	bsf	126,7,c	;volatile
   906                           
   907                           ;lights_buttons.c: 15:     TRISFbits.TRISF2=1;
   908   0022AC  8486               	bsf	134,2,c	;volatile
   909                           
   910                           ;lights_buttons.c: 16:     ANSELFbits.ANSELF2=0;
   911   0022AE  010E               	movlb	14	; () banked
   912   0022B0  95B4               	bcf	180,2,b	;volatile
   913                           
   914                           ;lights_buttons.c: 18:     TRISFbits.TRISF3= 1;
   915   0022B2  8686               	bsf	134,3,c	;volatile
   916                           
   917                           ;lights_buttons.c: 19:     ANSELFbits.ANSELF3 = 0;
   918   0022B4  97B4               	bcf	180,3,b	;volatile
   919                           
   920                           ;lights_buttons.c: 21:     TRISDbits.TRISD7 = 0;
   921   0022B6  9E84               	bcf	132,7,c	;volatile
   922                           
   923                           ;lights_buttons.c: 22:     LATDbits.LATD7 = 0;
   924   0022B8  9E7C               	bcf	124,7,c	;volatile
   925                           
   926                           ;lights_buttons.c: 24:     TRISHbits.TRISH3 = 0;
   927   0022BA  9688               	bcf	136,3,c	;volatile
   928                           
   929                           ;lights_buttons.c: 25:     LATHbits.LATH3 = 0;
   930   0022BC  9680               	bcf	128,3,c	;volatile
   931   0022BE                     
   932                           ; BSR set to: 14
   933   0022BE  0012               	return		;funcret
   934   0022C0                     __end_of_ports_init:
   935                           	callstack 0
   936                           
   937 ;; *************** function _motor_init *****************
   938 ;; Defined at:
   939 ;;		line 98 in file "dc_motor.c"
   940 ;; Parameters:    Size  Location     Type
   941 ;;  mL              2    2[COMRAM] PTR struct DC_motor
   942 ;;		 -> motorL(9), 
   943 ;;  mR              2    4[COMRAM] PTR struct DC_motor
   944 ;;		 -> motorR(9), 
   945 ;; Auto vars:     Size  Location     Type
   946 ;;		None
   947 ;; Return value:  Size  Location     Type
   948 ;;                  1    wreg      void 
   949 ;; Registers used:
   950 ;;		wreg, status,2, status,0
   951 ;; Tracked objects:
   952 ;;		On entry : 0/0
   953 ;;		On exit  : 0/0
   954 ;;		Unchanged: 0/0
   955 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   956 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   957 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   958 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   959 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   960 ;;Total ram usage:        4 bytes
   961 ;; Hardware stack levels used: 1
   962 ;; Hardware stack levels required when called: 1
   963 ;; This function calls:
   964 ;;		Nothing
   965 ;; This function is called by:
   966 ;;		_complete_initialisation
   967 ;; This function uses a non-reentrant model
   968 ;;
   969                           
   970                           	psect	text3
   971   0020A4                     __ptext3:
   972                           	callstack 0
   973   0020A4                     _motor_init:
   974                           	callstack 28
   975   0020A4                     
   976                           ;dc_motor.c: 98: void motor_init(DC_motor *mL, DC_motor *mR);dc_motor.c: 99: {;dc_motor.
      +                          c: 100:     motorL.power=0;
   977   0020A4  0E00               	movlw	0
   978   0020A6  0100               	movlb	0	; () banked
   979   0020A8  6FD5               	movwf	_motorL& (0+255),b
   980                           
   981                           ;dc_motor.c: 101:     motorL.direction=1;
   982   0020AA  0E01               	movlw	1
   983   0020AC  6FD6               	movwf	(_motorL+1)& (0+255),b
   984                           
   985                           ;dc_motor.c: 102:     motorL.brakemode=1;
   986   0020AE  0E01               	movlw	1
   987   0020B0  6FD7               	movwf	(_motorL+2)& (0+255),b
   988   0020B2                     
   989                           ; BSR set to: 0
   990                           ;dc_motor.c: 103:     motorL.posDutyHighByte=(unsigned char *)(&CCPR1H);
   991   0020B2  0EAA               	movlw	170
   992   0020B4  6FDA               	movwf	(_motorL+5)& (0+255),b
   993   0020B6  0E0F               	movlw	15
   994   0020B8  6FDB               	movwf	(_motorL+6)& (0+255),b
   995   0020BA                     
   996                           ; BSR set to: 0
   997                           ;dc_motor.c: 104:     motorL.negDutyHighByte=(unsigned char *)(&CCPR2H);
   998   0020BA  0EA6               	movlw	166
   999   0020BC  6FDC               	movwf	(_motorL+7)& (0+255),b
  1000   0020BE  0E0F               	movlw	15
  1001   0020C0  6FDD               	movwf	(_motorL+8)& (0+255),b
  1002                           
  1003                           ;dc_motor.c: 105:     motorL.PWMperiod=99;
  1004   0020C2  0E00               	movlw	0
  1005   0020C4  6FD9               	movwf	(_motorL+4)& (0+255),b
  1006   0020C6  0E63               	movlw	99
  1007   0020C8  6FD8               	movwf	(_motorL+3)& (0+255),b
  1008                           
  1009                           ;dc_motor.c: 107:     motorR.power=0;
  1010   0020CA  0E00               	movlw	0
  1011   0020CC  6FCC               	movwf	_motorR& (0+255),b
  1012                           
  1013                           ;dc_motor.c: 108:     motorR.direction=1;
  1014   0020CE  0E01               	movlw	1
  1015   0020D0  6FCD               	movwf	(_motorR+1)& (0+255),b
  1016                           
  1017                           ;dc_motor.c: 109:     motorR.brakemode=1;
  1018   0020D2  0E01               	movlw	1
  1019   0020D4  6FCE               	movwf	(_motorR+2)& (0+255),b
  1020   0020D6                     
  1021                           ; BSR set to: 0
  1022                           ;dc_motor.c: 110:     motorR.posDutyHighByte=(unsigned char *)(&CCPR3H);
  1023   0020D6  0E25               	movlw	37
  1024   0020D8  6FD1               	movwf	(_motorR+5)& (0+255),b
  1025   0020DA  0E0F               	movlw	15
  1026   0020DC  6FD2               	movwf	(_motorR+6)& (0+255),b
  1027   0020DE                     
  1028                           ; BSR set to: 0
  1029                           ;dc_motor.c: 111:     motorR.negDutyHighByte=(unsigned char *)(&CCPR4H);
  1030   0020DE  0E21               	movlw	33
  1031   0020E0  6FD3               	movwf	(_motorR+7)& (0+255),b
  1032   0020E2  0E0F               	movlw	15
  1033   0020E4  6FD4               	movwf	(_motorR+8)& (0+255),b
  1034                           
  1035                           ;dc_motor.c: 112:     motorR.PWMperiod=99;
  1036   0020E6  0E00               	movlw	0
  1037   0020E8  6FD0               	movwf	(_motorR+4)& (0+255),b
  1038   0020EA  0E63               	movlw	99
  1039   0020EC  6FCF               	movwf	(_motorR+3)& (0+255),b
  1040   0020EE                     
  1041                           ; BSR set to: 0
  1042   0020EE  0012               	return		;funcret
  1043   0020F0                     __end_of_motor_init:
  1044                           	callstack 0
  1045                           
  1046 ;; *************** function _interrupts_init *****************
  1047 ;; Defined at:
  1048 ;;		line 9 in file "interrupts.c"
  1049 ;; Parameters:    Size  Location     Type
  1050 ;;		None
  1051 ;; Auto vars:     Size  Location     Type
  1052 ;;		None
  1053 ;; Return value:  Size  Location     Type
  1054 ;;                  1    wreg      void 
  1055 ;; Registers used:
  1056 ;;		None
  1057 ;; Tracked objects:
  1058 ;;		On entry : 0/0
  1059 ;;		On exit  : 0/0
  1060 ;;		Unchanged: 0/0
  1061 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1062 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1063 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1064 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1065 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1066 ;;Total ram usage:        0 bytes
  1067 ;; Hardware stack levels used: 1
  1068 ;; Hardware stack levels required when called: 1
  1069 ;; This function calls:
  1070 ;;		Nothing
  1071 ;; This function is called by:
  1072 ;;		_complete_initialisation
  1073 ;; This function uses a non-reentrant model
  1074 ;;
  1075                           
  1076                           	psect	text4
  1077   002364                     __ptext4:
  1078                           	callstack 0
  1079   002364                     _interrupts_init:
  1080                           	callstack 28
  1081   002364                     
  1082                           ;interrupts.c: 20:     PIE0bits.TMR0IE = 1;
  1083   002364  010E               	movlb	14	; () banked
  1084   002366  8B29               	bsf	41,5,b	;volatile
  1085                           
  1086                           ;interrupts.c: 21:     PIR0bits.TMR0IF = 0;
  1087   002368  9B33               	bcf	51,5,b	;volatile
  1088                           
  1089                           ;interrupts.c: 22:     IPR0bits.TMR0IP = 0;
  1090   00236A  9B1F               	bcf	31,5,b	;volatile
  1091                           
  1092                           ;interrupts.c: 25:     INTCONbits.IPEN = 1;
  1093   00236C  8AF2               	bsf	242,5,c	;volatile
  1094                           
  1095                           ;interrupts.c: 26:     INTCONbits.PEIE = 1;
  1096   00236E  8CF2               	bsf	242,6,c	;volatile
  1097                           
  1098                           ;interrupts.c: 27:     INTCONbits.GIE = 1;
  1099   002370  8EF2               	bsf	242,7,c	;volatile
  1100   002372                     
  1101                           ; BSR set to: 14
  1102   002372  0012               	return		;funcret
  1103   002374                     __end_of_interrupts_init:
  1104                           	callstack 0
  1105                           
  1106 ;; *************** function _initUSART4 *****************
  1107 ;; Defined at:
  1108 ;;		line 5 in file "serial.c"
  1109 ;; Parameters:    Size  Location     Type
  1110 ;;		None
  1111 ;; Auto vars:     Size  Location     Type
  1112 ;;		None
  1113 ;; Return value:  Size  Location     Type
  1114 ;;                  1    wreg      void 
  1115 ;; Registers used:
  1116 ;;		wreg, status,2
  1117 ;; Tracked objects:
  1118 ;;		On entry : 0/0
  1119 ;;		On exit  : 0/0
  1120 ;;		Unchanged: 0/0
  1121 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1122 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1123 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1124 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1125 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1126 ;;Total ram usage:        0 bytes
  1127 ;; Hardware stack levels used: 1
  1128 ;; Hardware stack levels required when called: 1
  1129 ;; This function calls:
  1130 ;;		Nothing
  1131 ;; This function is called by:
  1132 ;;		_complete_initialisation
  1133 ;; This function uses a non-reentrant model
  1134 ;;
  1135                           
  1136                           	psect	text5
  1137   0022C0                     __ptext5:
  1138                           	callstack 0
  1139   0022C0                     _initUSART4:
  1140                           	callstack 28
  1141   0022C0                     
  1142                           ;serial.c: 7:     RC0PPS = 0x12;
  1143   0022C0  0E12               	movlw	18
  1144   0022C2  010E               	movlb	14	; () banked
  1145   0022C4  6F62               	movwf	98,b	;volatile
  1146                           
  1147                           ;serial.c: 8:     RX4PPS = 0x11;
  1148   0022C6  0E11               	movlw	17
  1149   0022C8  6F15               	movwf	21,b	;volatile
  1150   0022CA                     
  1151                           ; BSR set to: 14
  1152                           ;serial.c: 9:     TRISCbits.TRISC1 = 1;
  1153   0022CA  8283               	bsf	131,1,c	;volatile
  1154   0022CC                     
  1155                           ; BSR set to: 14
  1156                           ;serial.c: 12:     BAUD4CONbits.BRG16 = 0;
  1157   0022CC  97E9               	bcf	233,3,b	;volatile
  1158   0022CE                     
  1159                           ; BSR set to: 14
  1160                           ;serial.c: 13:     TX4STAbits.BRGH = 0;
  1161   0022CE  95E8               	bcf	232,2,b	;volatile
  1162                           
  1163                           ;serial.c: 14:     SP4BRGL = 51;
  1164   0022D0  0E33               	movlw	51
  1165   0022D2  6FE5               	movwf	229,b	;volatile
  1166                           
  1167                           ;serial.c: 15:     SP4BRGH = 0;
  1168   0022D4  0E00               	movlw	0
  1169   0022D6  6FE6               	movwf	230,b	;volatile
  1170   0022D8                     
  1171                           ; BSR set to: 14
  1172                           ;serial.c: 17:     RC4STAbits.CREN = 1;
  1173   0022D8  89E7               	bsf	231,4,b	;volatile
  1174   0022DA                     
  1175                           ; BSR set to: 14
  1176                           ;serial.c: 18:     TX4STAbits.TXEN = 1;
  1177   0022DA  8BE8               	bsf	232,5,b	;volatile
  1178   0022DC                     
  1179                           ; BSR set to: 14
  1180                           ;serial.c: 19:     RC4STAbits.SPEN = 1;
  1181   0022DC  8FE7               	bsf	231,7,b	;volatile
  1182   0022DE                     
  1183                           ; BSR set to: 14
  1184   0022DE  0012               	return		;funcret
  1185   0022E0                     __end_of_initUSART4:
  1186                           	callstack 0
  1187                           
  1188 ;; *************** function _initDCmotorsPWM *****************
  1189 ;; Defined at:
  1190 ;;		line 9 in file "dc_motor.c"
  1191 ;; Parameters:    Size  Location     Type
  1192 ;;  PWMperiod       2    2[COMRAM] unsigned int 
  1193 ;; Auto vars:     Size  Location     Type
  1194 ;;		None
  1195 ;; Return value:  Size  Location     Type
  1196 ;;                  1    wreg      void 
  1197 ;; Registers used:
  1198 ;;		wreg, status,2
  1199 ;; Tracked objects:
  1200 ;;		On entry : 0/0
  1201 ;;		On exit  : 0/0
  1202 ;;		Unchanged: 0/0
  1203 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1204 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1205 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1206 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1207 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1208 ;;Total ram usage:        2 bytes
  1209 ;; Hardware stack levels used: 1
  1210 ;; Hardware stack levels required when called: 1
  1211 ;; This function calls:
  1212 ;;		Nothing
  1213 ;; This function is called by:
  1214 ;;		_complete_initialisation
  1215 ;; This function uses a non-reentrant model
  1216 ;;
  1217                           
  1218                           	psect	text6
  1219   001D8C                     __ptext6:
  1220                           	callstack 0
  1221   001D8C                     _initDCmotorsPWM:
  1222                           	callstack 28
  1223   001D8C                     
  1224                           ;dc_motor.c: 11:     TRISEbits.TRISE2 = 0;
  1225   001D8C  9485               	bcf	133,2,c	;volatile
  1226                           
  1227                           ;dc_motor.c: 12:     TRISEbits.TRISE4 = 0;
  1228   001D8E  9885               	bcf	133,4,c	;volatile
  1229                           
  1230                           ;dc_motor.c: 13:     TRISCbits.TRISC7 = 0;
  1231   001D90  9E83               	bcf	131,7,c	;volatile
  1232                           
  1233                           ;dc_motor.c: 14:     TRISGbits.TRISG6 = 0;
  1234   001D92  9C87               	bcf	135,6,c	;volatile
  1235                           
  1236                           ;dc_motor.c: 16:     LATEbits.LATE2 = 0;
  1237   001D94  947D               	bcf	125,2,c	;volatile
  1238                           
  1239                           ;dc_motor.c: 17:     LATEbits.LATE4 = 0;
  1240   001D96  987D               	bcf	125,4,c	;volatile
  1241                           
  1242                           ;dc_motor.c: 18:     LATCbits.LATC7 = 0;
  1243   001D98  9E7B               	bcf	123,7,c	;volatile
  1244                           
  1245                           ;dc_motor.c: 19:     LATGbits.LATG6 = 0;
  1246   001D9A  9C7F               	bcf	127,6,c	;volatile
  1247   001D9C                     
  1248                           ;dc_motor.c: 22:     RE2PPS=0x05;
  1249   001D9C  0E05               	movlw	5
  1250   001D9E  010E               	movlb	14	; () banked
  1251   001DA0  6F74               	movwf	116,b	;volatile
  1252                           
  1253                           ;dc_motor.c: 23:     RE4PPS=0x06;
  1254   001DA2  0E06               	movlw	6
  1255   001DA4  6F76               	movwf	118,b	;volatile
  1256                           
  1257                           ;dc_motor.c: 24:     RC7PPS=0x07;
  1258   001DA6  0E07               	movlw	7
  1259   001DA8  6F69               	movwf	105,b	;volatile
  1260                           
  1261                           ;dc_motor.c: 25:     RG6PPS=0x08;
  1262   001DAA  0E08               	movlw	8
  1263   001DAC  6F88               	movwf	136,b	;volatile
  1264                           
  1265                           ;dc_motor.c: 28:     T2CONbits.CKPS=0b100;
  1266   001DAE  50BD               	movf	189,w,c	;volatile
  1267   001DB0  0B8F               	andlw	-113
  1268   001DB2  0940               	iorlw	64
  1269   001DB4  6EBD               	movwf	189,c	;volatile
  1270                           
  1271                           ;dc_motor.c: 29:     T2HLTbits.MODE=0b00000;
  1272   001DB6  0EE0               	movlw	-32
  1273   001DB8  16BE               	andwf	190,f,c	;volatile
  1274                           
  1275                           ;dc_motor.c: 30:     T2CLKCONbits.CS=0b0001;
  1276   001DBA  50BF               	movf	191,w,c	;volatile
  1277   001DBC  0BF0               	andlw	-16
  1278   001DBE  0901               	iorlw	1
  1279   001DC0  6EBF               	movwf	191,c	;volatile
  1280   001DC2                     
  1281                           ; BSR set to: 14
  1282                           ;dc_motor.c: 34:     T2PR=PWMperiod;
  1283   001DC2  C003  FFBC         	movff	initDCmotorsPWM@PWMperiod,4028	;volatile
  1284   001DC6                     
  1285                           ; BSR set to: 14
  1286                           ;dc_motor.c: 35:     T2CONbits.ON=1;
  1287   001DC6  8EBD               	bsf	189,7,c	;volatile
  1288                           
  1289                           ;dc_motor.c: 39:     CCPR1H=0;
  1290   001DC8  0E00               	movlw	0
  1291   001DCA  6EAA               	movwf	170,c	;volatile
  1292                           
  1293                           ;dc_motor.c: 40:     CCPR2H=0;
  1294   001DCC  0E00               	movlw	0
  1295   001DCE  6EA6               	movwf	166,c	;volatile
  1296                           
  1297                           ;dc_motor.c: 41:     CCPR3H=0;
  1298   001DD0  0E00               	movlw	0
  1299   001DD2  010F               	movlb	15	; () banked
  1300   001DD4  6F25               	movwf	37,b	;volatile
  1301                           
  1302                           ;dc_motor.c: 42:     CCPR4H=0;
  1303   001DD6  0E00               	movlw	0
  1304   001DD8  6F21               	movwf	33,b	;volatile
  1305                           
  1306                           ;dc_motor.c: 45:     CCPTMRS0bits.C1TSEL=0;
  1307   001DDA  0EFC               	movlw	-4
  1308   001DDC  16AD               	andwf	173,f,c	;volatile
  1309                           
  1310                           ;dc_motor.c: 46:     CCPTMRS0bits.C2TSEL=0;
  1311   001DDE  0EF3               	movlw	-13
  1312   001DE0  16AD               	andwf	173,f,c	;volatile
  1313                           
  1314                           ;dc_motor.c: 47:     CCPTMRS0bits.C3TSEL=0;
  1315   001DE2  0ECF               	movlw	-49
  1316   001DE4  16AD               	andwf	173,f,c	;volatile
  1317                           
  1318                           ;dc_motor.c: 48:     CCPTMRS0bits.C4TSEL=0;
  1319   001DE6  0E3F               	movlw	-193
  1320   001DE8  16AD               	andwf	173,f,c	;volatile
  1321   001DEA                     
  1322                           ; BSR set to: 15
  1323                           ;dc_motor.c: 51:     CCP1CONbits.FMT=1;
  1324   001DEA  88AB               	bsf	171,4,c	;volatile
  1325                           
  1326                           ;dc_motor.c: 52:     CCP1CONbits.CCP1MODE=0b1100;
  1327   001DEC  50AB               	movf	171,w,c	;volatile
  1328   001DEE  0BF0               	andlw	-16
  1329   001DF0  090C               	iorlw	12
  1330   001DF2  6EAB               	movwf	171,c	;volatile
  1331   001DF4                     
  1332                           ; BSR set to: 15
  1333                           ;dc_motor.c: 53:     CCP1CONbits.EN=1;
  1334   001DF4  8EAB               	bsf	171,7,c	;volatile
  1335   001DF6                     
  1336                           ; BSR set to: 15
  1337                           ;dc_motor.c: 56:     CCP2CONbits.FMT=1;
  1338   001DF6  88A7               	bsf	167,4,c	;volatile
  1339                           
  1340                           ;dc_motor.c: 57:     CCP2CONbits.CCP2MODE=0b1100;
  1341   001DF8  50A7               	movf	167,w,c	;volatile
  1342   001DFA  0BF0               	andlw	-16
  1343   001DFC  090C               	iorlw	12
  1344   001DFE  6EA7               	movwf	167,c	;volatile
  1345   001E00                     
  1346                           ; BSR set to: 15
  1347                           ;dc_motor.c: 58:     CCP2CONbits.EN=1;
  1348   001E00  8EA7               	bsf	167,7,c	;volatile
  1349   001E02                     
  1350                           ; BSR set to: 15
  1351                           ;dc_motor.c: 62:     CCP3CONbits.FMT=1;
  1352   001E02  8926               	bsf	38,4,b	;volatile
  1353                           
  1354                           ;dc_motor.c: 63:     CCP3CONbits.CCP3MODE=0b1100;
  1355   001E04  5126               	movf	38,w,b	;volatile
  1356   001E06  0BF0               	andlw	-16
  1357   001E08  090C               	iorlw	12
  1358   001E0A  6F26               	movwf	38,b	;volatile
  1359   001E0C                     
  1360                           ; BSR set to: 15
  1361                           ;dc_motor.c: 64:     CCP3CONbits.EN=1;
  1362   001E0C  8F26               	bsf	38,7,b	;volatile
  1363   001E0E                     
  1364                           ; BSR set to: 15
  1365                           ;dc_motor.c: 67:     CCP4CONbits.FMT=1;
  1366   001E0E  8922               	bsf	34,4,b	;volatile
  1367                           
  1368                           ;dc_motor.c: 68:     CCP4CONbits.CCP4MODE=0b1100;
  1369   001E10  5122               	movf	34,w,b	;volatile
  1370   001E12  0BF0               	andlw	-16
  1371   001E14  090C               	iorlw	12
  1372   001E16  6F22               	movwf	34,b	;volatile
  1373   001E18                     
  1374                           ; BSR set to: 15
  1375                           ;dc_motor.c: 69:     CCP4CONbits.EN=1;
  1376   001E18  8F22               	bsf	34,7,b	;volatile
  1377   001E1A                     
  1378                           ; BSR set to: 15
  1379   001E1A  0012               	return		;funcret
  1380   001E1C                     __end_of_initDCmotorsPWM:
  1381                           	callstack 0
  1382                           
  1383 ;; *************** function _color_click_init *****************
  1384 ;; Defined at:
  1385 ;;		line 10 in file "color.c"
  1386 ;; Parameters:    Size  Location     Type
  1387 ;;		None
  1388 ;; Auto vars:     Size  Location     Type
  1389 ;;		None
  1390 ;; Return value:  Size  Location     Type
  1391 ;;                  1    wreg      void 
  1392 ;; Registers used:
  1393 ;;		wreg, status,2, status,0, cstack
  1394 ;; Tracked objects:
  1395 ;;		On entry : 0/0
  1396 ;;		On exit  : 0/0
  1397 ;;		Unchanged: 0/0
  1398 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1399 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1400 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1401 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1402 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1403 ;;Total ram usage:        1 bytes
  1404 ;; Hardware stack levels used: 1
  1405 ;; Hardware stack levels required when called: 4
  1406 ;; This function calls:
  1407 ;;		_I2C_2_Master_Init
  1408 ;;		_color_writetoaddr
  1409 ;; This function is called by:
  1410 ;;		_complete_initialisation
  1411 ;; This function uses a non-reentrant model
  1412 ;;
  1413                           
  1414                           	psect	text7
  1415   0021F4                     __ptext7:
  1416                           	callstack 0
  1417   0021F4                     _color_click_init:
  1418                           	callstack 25
  1419   0021F4                     
  1420                           ;color.c: 13:     I2C_2_Master_Init();
  1421   0021F4  EC14  F011         	call	_I2C_2_Master_Init	;wreg free
  1422   0021F8                     
  1423                           ;color.c: 15:   color_writetoaddr(0x00, 0x01);
  1424   0021F8  0E01               	movlw	1
  1425   0021FA  6E05               	movwf	color_writetoaddr@value^0,c
  1426   0021FC  0E00               	movlw	0
  1427   0021FE  EC70  F011         	call	_color_writetoaddr
  1428   002202                     
  1429                           ;color.c: 16:     _delay((unsigned long)((3)*(64000000/4000.0)));
  1430   002202  0E3F               	movlw	63
  1431   002204  6E07               	movwf	??_color_click_init^0,c
  1432   002206  0E55               	movlw	85
  1433   002208                     u2547:
  1434   002208  2EE8               	decfsz	wreg,f,c
  1435   00220A  D7FE               	bra	u2547
  1436   00220C  2E07               	decfsz	??_color_click_init^0,f,c
  1437   00220E  D7FC               	bra	u2547
  1438   002210  F000               	nop	
  1439   002212                     
  1440                           ;color.c: 18:  color_writetoaddr(0x00, 0x03);
  1441   002212  0E03               	movlw	3
  1442   002214  6E05               	movwf	color_writetoaddr@value^0,c
  1443   002216  0E00               	movlw	0
  1444   002218  EC70  F011         	call	_color_writetoaddr
  1445   00221C                     
  1446                           ;color.c: 20:  color_writetoaddr(0x01, 0xD5);
  1447   00221C  0ED5               	movlw	213
  1448   00221E  6E05               	movwf	color_writetoaddr@value^0,c
  1449   002220  0E01               	movlw	1
  1450   002222  EC70  F011         	call	_color_writetoaddr
  1451   002226  0012               	return		;funcret
  1452   002228                     __end_of_color_click_init:
  1453                           	callstack 0
  1454                           
  1455 ;; *************** function _color_writetoaddr *****************
  1456 ;; Defined at:
  1457 ;;		line 23 in file "color.c"
  1458 ;; Parameters:    Size  Location     Type
  1459 ;;  address         1    wreg     unsigned char 
  1460 ;;  value           1    4[COMRAM] unsigned char 
  1461 ;; Auto vars:     Size  Location     Type
  1462 ;;  address         1    5[COMRAM] unsigned char 
  1463 ;; Return value:  Size  Location     Type
  1464 ;;                  1    wreg      void 
  1465 ;; Registers used:
  1466 ;;		wreg, status,2, status,0, cstack
  1467 ;; Tracked objects:
  1468 ;;		On entry : 0/0
  1469 ;;		On exit  : 0/0
  1470 ;;		Unchanged: 0/0
  1471 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1472 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1473 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1474 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1475 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1476 ;;Total ram usage:        2 bytes
  1477 ;; Hardware stack levels used: 1
  1478 ;; Hardware stack levels required when called: 3
  1479 ;; This function calls:
  1480 ;;		_I2C_2_Master_Start
  1481 ;;		_I2C_2_Master_Stop
  1482 ;;		_I2C_2_Master_Write
  1483 ;; This function is called by:
  1484 ;;		_color_click_init
  1485 ;; This function uses a non-reentrant model
  1486 ;;
  1487                           
  1488                           	psect	text8
  1489   0022E0                     __ptext8:
  1490                           	callstack 0
  1491   0022E0                     _color_writetoaddr:
  1492                           	callstack 25
  1493                           
  1494                           ;incstack = 0
  1495                           ;color_writetoaddr@address stored from wreg
  1496   0022E0  6E06               	movwf	color_writetoaddr@address^0,c
  1497   0022E2                     
  1498                           ;color.c: 24:     I2C_2_Master_Start();
  1499   0022E2  ECC5  F011         	call	_I2C_2_Master_Start	;wreg free
  1500                           
  1501                           ;color.c: 25:     I2C_2_Master_Write(0x52 | 0x00);
  1502   0022E6  0E52               	movlw	82
  1503   0022E8  ECBA  F011         	call	_I2C_2_Master_Write
  1504                           
  1505                           ;color.c: 26:     I2C_2_Master_Write(0x80 | address);
  1506   0022EC  5006               	movf	color_writetoaddr@address^0,w,c
  1507   0022EE  0980               	iorlw	128
  1508   0022F0  ECBA  F011         	call	_I2C_2_Master_Write
  1509                           
  1510                           ;color.c: 27:     I2C_2_Master_Write(value);
  1511   0022F4  5005               	movf	color_writetoaddr@value^0,w,c
  1512   0022F6  ECBA  F011         	call	_I2C_2_Master_Write
  1513                           
  1514                           ;color.c: 28:     I2C_2_Master_Stop();
  1515   0022FA  ECC0  F011         	call	_I2C_2_Master_Stop	;wreg free
  1516   0022FE  0012               	return		;funcret
  1517   002300                     __end_of_color_writetoaddr:
  1518                           	callstack 0
  1519                           
  1520 ;; *************** function _I2C_2_Master_Init *****************
  1521 ;; Defined at:
  1522 ;;		line 4 in file "i2c.c"
  1523 ;; Parameters:    Size  Location     Type
  1524 ;;		None
  1525 ;; Auto vars:     Size  Location     Type
  1526 ;;		None
  1527 ;; Return value:  Size  Location     Type
  1528 ;;                  1    wreg      void 
  1529 ;; Registers used:
  1530 ;;		wreg, status,2
  1531 ;; Tracked objects:
  1532 ;;		On entry : 0/0
  1533 ;;		On exit  : 0/0
  1534 ;;		Unchanged: 0/0
  1535 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1536 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1537 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1538 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1539 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1540 ;;Total ram usage:        0 bytes
  1541 ;; Hardware stack levels used: 1
  1542 ;; Hardware stack levels required when called: 1
  1543 ;; This function calls:
  1544 ;;		Nothing
  1545 ;; This function is called by:
  1546 ;;		_color_click_init
  1547 ;;		_complete_initialisation
  1548 ;; This function uses a non-reentrant model
  1549 ;;
  1550                           
  1551                           	psect	text9
  1552   002228                     __ptext9:
  1553                           	callstack 0
  1554   002228                     _I2C_2_Master_Init:
  1555                           	callstack 27
  1556   002228                     
  1557                           ;i2c.c: 7:   SSP2CON1bits.SSPM= 0b1000;
  1558   002228  010E               	movlb	14	; () banked
  1559   00222A  51D9               	movf	217,w,b	;volatile
  1560   00222C  0BF0               	andlw	-16
  1561   00222E  0908               	iorlw	8
  1562   002230  6FD9               	movwf	217,b	;volatile
  1563   002232                     
  1564                           ; BSR set to: 14
  1565                           ;i2c.c: 8:   SSP2CON1bits.SSPEN = 1;
  1566   002232  8BD9               	bsf	217,5,b	;volatile
  1567                           
  1568                           ;i2c.c: 9:   SSP2ADD = (64000000/(4*100000))-1;
  1569   002234  0E9F               	movlw	159
  1570   002236  6FD6               	movwf	214,b	;volatile
  1571   002238                     
  1572                           ; BSR set to: 14
  1573                           ;i2c.c: 12:   TRISDbits.TRISD5 = 1;
  1574   002238  8A84               	bsf	132,5,c	;volatile
  1575   00223A                     
  1576                           ; BSR set to: 14
  1577                           ;i2c.c: 13:   TRISDbits.TRISD6 = 1;
  1578   00223A  8C84               	bsf	132,6,c	;volatile
  1579   00223C                     
  1580                           ; BSR set to: 14
  1581                           ;i2c.c: 14:   ANSELDbits.ANSELD5=0;
  1582   00223C  9BA7               	bcf	167,5,b	;volatile
  1583   00223E                     
  1584                           ; BSR set to: 14
  1585                           ;i2c.c: 15:   ANSELDbits.ANSELD6=0;
  1586   00223E  9DA7               	bcf	167,6,b	;volatile
  1587                           
  1588                           ;i2c.c: 16:   SSP2DATPPS=0x1D;
  1589   002240  0E1D               	movlw	29
  1590   002242  6F1D               	movwf	29,b	;volatile
  1591                           
  1592                           ;i2c.c: 17:   SSP2CLKPPS=0x1E;
  1593   002244  0E1E               	movlw	30
  1594   002246  6F1C               	movwf	28,b	;volatile
  1595                           
  1596                           ;i2c.c: 18:   RD5PPS=0x1C;
  1597   002248  0E1C               	movlw	28
  1598   00224A  6F6F               	movwf	111,b	;volatile
  1599                           
  1600                           ;i2c.c: 19:   RD6PPS=0x1B;
  1601   00224C  0E1B               	movlw	27
  1602   00224E  6F70               	movwf	112,b	;volatile
  1603   002250                     
  1604                           ; BSR set to: 14
  1605   002250  0012               	return		;funcret
  1606   002252                     __end_of_I2C_2_Master_Init:
  1607                           	callstack 0
  1608                           
  1609 ;; *************** function _buggyLEDs_init *****************
  1610 ;; Defined at:
  1611 ;;		line 28 in file "lights_buttons.c"
  1612 ;; Parameters:    Size  Location     Type
  1613 ;;		None
  1614 ;; Auto vars:     Size  Location     Type
  1615 ;;		None
  1616 ;; Return value:  Size  Location     Type
  1617 ;;                  1    wreg      void 
  1618 ;; Registers used:
  1619 ;;		None
  1620 ;; Tracked objects:
  1621 ;;		On entry : 0/0
  1622 ;;		On exit  : 0/0
  1623 ;;		Unchanged: 0/0
  1624 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1625 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1626 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1627 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1628 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1629 ;;Total ram usage:        0 bytes
  1630 ;; Hardware stack levels used: 1
  1631 ;; Hardware stack levels required when called: 1
  1632 ;; This function calls:
  1633 ;;		Nothing
  1634 ;; This function is called by:
  1635 ;;		_complete_initialisation
  1636 ;; This function uses a non-reentrant model
  1637 ;;
  1638                           
  1639                           	psect	text10
  1640   00233A                     __ptext10:
  1641                           	callstack 0
  1642   00233A                     _buggyLEDs_init:
  1643                           	callstack 28
  1644   00233A                     
  1645                           ;lights_buttons.c: 29:     LATHbits.LATH1 = 0;
  1646   00233A  9280               	bcf	128,1,c	;volatile
  1647                           
  1648                           ;lights_buttons.c: 30:     LATDbits.LATD3 = 0;
  1649   00233C  967C               	bcf	124,3,c	;volatile
  1650                           
  1651                           ;lights_buttons.c: 31:     LATDbits.LATD4 = 0;
  1652   00233E  987C               	bcf	124,4,c	;volatile
  1653                           
  1654                           ;lights_buttons.c: 32:     LATFbits.LATF0 = 0;
  1655   002340  907E               	bcf	126,0,c	;volatile
  1656                           
  1657                           ;lights_buttons.c: 33:     LATHbits.LATH0 = 0;
  1658   002342  9080               	bcf	128,0,c	;volatile
  1659                           
  1660                           ;lights_buttons.c: 35:     TRISHbits.TRISH1 = 0;
  1661   002344  9288               	bcf	136,1,c	;volatile
  1662                           
  1663                           ;lights_buttons.c: 36:     TRISDbits.TRISD3 = 0;
  1664   002346  9684               	bcf	132,3,c	;volatile
  1665                           
  1666                           ;lights_buttons.c: 37:     TRISDbits.TRISD4 = 0;
  1667   002348  9884               	bcf	132,4,c	;volatile
  1668                           
  1669                           ;lights_buttons.c: 38:     TRISFbits.TRISF0 = 0;
  1670   00234A  9086               	bcf	134,0,c	;volatile
  1671                           
  1672                           ;lights_buttons.c: 39:     TRISHbits.TRISH0 = 0;
  1673   00234C  9088               	bcf	136,0,c	;volatile
  1674   00234E  0012               	return		;funcret
  1675   002350                     __end_of_buggyLEDs_init:
  1676                           	callstack 0
  1677                           
  1678 ;; *************** function _Timer0_init *****************
  1679 ;; Defined at:
  1680 ;;		line 8 in file "timers.c"
  1681 ;; Parameters:    Size  Location     Type
  1682 ;;		None
  1683 ;; Auto vars:     Size  Location     Type
  1684 ;;		None
  1685 ;; Return value:  Size  Location     Type
  1686 ;;                  1    wreg      void 
  1687 ;; Registers used:
  1688 ;;		wreg, status,2
  1689 ;; Tracked objects:
  1690 ;;		On entry : 0/0
  1691 ;;		On exit  : 0/0
  1692 ;;		Unchanged: 0/0
  1693 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1694 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1695 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1696 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1697 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1698 ;;Total ram usage:        0 bytes
  1699 ;; Hardware stack levels used: 1
  1700 ;; Hardware stack levels required when called: 1
  1701 ;; This function calls:
  1702 ;;		Nothing
  1703 ;; This function is called by:
  1704 ;;		_complete_initialisation
  1705 ;; This function uses a non-reentrant model
  1706 ;;
  1707                           
  1708                           	psect	text11
  1709   002300                     __ptext11:
  1710                           	callstack 0
  1711   002300                     _Timer0_init:
  1712                           	callstack 28
  1713   002300                     
  1714                           ;timers.c: 10:     T0CON1bits.T0CS=0b010;
  1715   002300  50D6               	movf	214,w,c	;volatile
  1716   002302  0B1F               	andlw	-225
  1717   002304  0940               	iorlw	64
  1718   002306  6ED6               	movwf	214,c	;volatile
  1719   002308                     
  1720                           ;timers.c: 11:     T0CON1bits.T0ASYNC=1;
  1721   002308  88D6               	bsf	214,4,c	;volatile
  1722                           
  1723                           ;timers.c: 12:     T0CON1bits.T0CKPS=0b0101;
  1724   00230A  50D6               	movf	214,w,c	;volatile
  1725   00230C  0BF0               	andlw	-16
  1726   00230E  0905               	iorlw	5
  1727   002310  6ED6               	movwf	214,c	;volatile
  1728   002312                     
  1729                           ;timers.c: 13:     T0CON0bits.T016BIT=1;
  1730   002312  88D5               	bsf	213,4,c	;volatile
  1731                           
  1732                           ;timers.c: 16:     TMR0H=0;
  1733   002314  0E00               	movlw	0
  1734   002316  6ED4               	movwf	212,c	;volatile
  1735                           
  1736                           ;timers.c: 17:     TMR0L=0b00100011;
  1737   002318  0E23               	movlw	35
  1738   00231A  6ED3               	movwf	211,c	;volatile
  1739   00231C                     
  1740                           ;timers.c: 18:     T0CON0bits.T0EN=1;
  1741   00231C  8ED5               	bsf	213,7,c	;volatile
  1742   00231E  0012               	return		;funcret
  1743   002320                     __end_of_Timer0_init:
  1744                           	callstack 0
  1745                           
  1746 ;; *************** function _ADC_init *****************
  1747 ;; Defined at:
  1748 ;;		line 9 in file "ADC.c"
  1749 ;; Parameters:    Size  Location     Type
  1750 ;;		None
  1751 ;; Auto vars:     Size  Location     Type
  1752 ;;		None
  1753 ;; Return value:  Size  Location     Type
  1754 ;;                  1    wreg      void 
  1755 ;; Registers used:
  1756 ;;		wreg, status,2
  1757 ;; Tracked objects:
  1758 ;;		On entry : 0/0
  1759 ;;		On exit  : 0/0
  1760 ;;		Unchanged: 0/0
  1761 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1762 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1763 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1764 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1765 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1766 ;;Total ram usage:        0 bytes
  1767 ;; Hardware stack levels used: 1
  1768 ;; Hardware stack levels required when called: 1
  1769 ;; This function calls:
  1770 ;;		Nothing
  1771 ;; This function is called by:
  1772 ;;		_complete_initialisation
  1773 ;; This function uses a non-reentrant model
  1774 ;;
  1775                           
  1776                           	psect	text12
  1777   002320                     __ptext12:
  1778                           	callstack 0
  1779   002320                     _ADC_init:
  1780                           	callstack 28
  1781   002320                     
  1782                           ;ADC.c: 11:     TRISFbits.TRISF6=1;
  1783   002320  8C86               	bsf	134,6,c	;volatile
  1784                           
  1785                           ;ADC.c: 12:     ANSELFbits.ANSELF6=1;
  1786   002322  010E               	movlb	14	; () banked
  1787   002324  8DB4               	bsf	180,6,b	;volatile
  1788                           
  1789                           ;ADC.c: 15:     ADREFbits.ADNREF = 0;
  1790   002326  010F               	movlb	15	; () banked
  1791   002328  9958               	bcf	88,4,b	;volatile
  1792   00232A                     
  1793                           ; BSR set to: 15
  1794                           ;ADC.c: 16:     ADREFbits.ADPREF = 0b00;
  1795   00232A  0EFC               	movlw	-4
  1796   00232C  1758               	andwf	88,f,b	;volatile
  1797                           
  1798                           ;ADC.c: 17:     ADPCH=0b101110;
  1799   00232E  0E2E               	movlw	46
  1800   002330  6F5F               	movwf	95,b	;volatile
  1801   002332                     
  1802                           ; BSR set to: 15
  1803                           ;ADC.c: 18:     ADCON0bits.ADFM = 0;
  1804   002332  9460               	bcf	96,2,c	;volatile
  1805   002334                     
  1806                           ; BSR set to: 15
  1807                           ;ADC.c: 19:     ADCON0bits.ADCS = 1;
  1808   002334  8860               	bsf	96,4,c	;volatile
  1809   002336                     
  1810                           ; BSR set to: 15
  1811                           ;ADC.c: 20:     ADCON0bits.ADON = 1;
  1812   002336  8E60               	bsf	96,7,c	;volatile
  1813   002338                     
  1814                           ; BSR set to: 15
  1815   002338  0012               	return		;funcret
  1816   00233A                     __end_of_ADC_init:
  1817                           	callstack 0
  1818                           
  1819 ;; *************** function _buggy_color_response *****************
  1820 ;; Defined at:
  1821 ;;		line 103 in file "color.c"
  1822 ;; Parameters:    Size  Location     Type
  1823 ;;  mL              2   57[COMRAM] PTR struct DC_motor
  1824 ;;		 -> motorL(9), 
  1825 ;;  mR              2   59[COMRAM] PTR struct DC_motor
  1826 ;;		 -> motorR(9), 
  1827 ;;  c               2   61[COMRAM] PTR struct colors
  1828 ;;		 -> color(20), 
  1829 ;; Auto vars:     Size  Location     Type
  1830 ;;		None
  1831 ;; Return value:  Size  Location     Type
  1832 ;;                  1    wreg      void 
  1833 ;; Registers used:
  1834 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1835 ;; Tracked objects:
  1836 ;;		On entry : 0/0
  1837 ;;		On exit  : 0/0
  1838 ;;		Unchanged: 0/0
  1839 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1840 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1841 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1842 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1843 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1844 ;;Total ram usage:        8 bytes
  1845 ;; Hardware stack levels used: 1
  1846 ;; Hardware stack levels required when called: 8
  1847 ;; This function calls:
  1848 ;;		_READcolor
  1849 ;;		___flge
  1850 ;;		_forward
  1851 ;;		_movement
  1852 ;;		_movement_return
  1853 ;;		_return_home
  1854 ;;		_space
  1855 ;;		_stop
  1856 ;;		_timer_reset
  1857 ;; This function is called by:
  1858 ;;		_main
  1859 ;; This function uses a non-reentrant model
  1860 ;;
  1861                           
  1862                           	psect	text13
  1863   00004C                     __ptext13:
  1864                           	callstack 0
  1865   00004C                     _buggy_color_response:
  1866                           	callstack 22
  1867   00004C                     
  1868                           ;color.c: 105:     READcolor(&color);
  1869   00004C  0E45               	movlw	low _color
  1870   00004E  6E2A               	movwf	READcolor@c^0,c
  1871   000050  0E00               	movlw	high _color
  1872   000052  6E2B               	movwf	(READcolor@c+1)^0,c
  1873   000054  ECBE  F00A         	call	_READcolor	;wreg free
  1874   000058  0EC5               	movlw	197
  1875   00005A  5C4B               	subwf	(_color+6)^0,w,c
  1876   00005C  0E09               	movlw	9
  1877   00005E  584C               	subwfb	(_color+7)^0,w,c
  1878   000060  A0D8               	btfss	status,0,c
  1879   000062  EF35  F000         	goto	u2161
  1880   000066  EF37  F000         	goto	u2160
  1881   00006A                     u2161:
  1882   00006A  EF89  F003         	goto	l3163
  1883   00006E                     u2160:
  1884   00006E                     
  1885                           ;color.c: 108:         timer_memory[timer_index] = timer_val;
  1886   00006E  0E60               	movlw	low _timer_memory
  1887   000070  2443               	addwf	_timer_index^0,w,c
  1888   000072  6ED9               	movwf	fsr2l,c
  1889   000074  6ADA               	clrf	fsr2h,c
  1890   000076  0E00               	movlw	high _timer_memory
  1891   000078  22DA               	addwfc	fsr2h,f,c
  1892   00007A  C0C4  FFDF         	movff	_timer_val,indf2
  1893   00007E                     
  1894                           ;color.c: 109:         timer_index ++;
  1895   00007E  2A43               	incf	_timer_index^0,f,c
  1896   000080                     
  1897                           ;color.c: 110:         forward(mL,mR);
  1898   000080  C03A  F01C         	movff	buggy_color_response@mL,forward@mL
  1899   000084  C03B  F01D         	movff	buggy_color_response@mL+1,forward@mL+1
  1900   000088  C03C  F01E         	movff	buggy_color_response@mR,forward@mR
  1901   00008C  C03D  F01F         	movff	buggy_color_response@mR+1,forward@mR+1
  1902   000090  ECF2  F00C         	call	_forward	;wreg free
  1903   000094                     
  1904                           ;color.c: 111:         _delay((unsigned long)((50)*(64000000/4000.0)));
  1905   000094  0E05               	movlw	5
  1906   000096  6E41               	movwf	(??_buggy_color_response+1)^0,c
  1907   000098  0E0F               	movlw	15
  1908   00009A  6E40               	movwf	??_buggy_color_response^0,c
  1909   00009C  0EF1               	movlw	241
  1910   00009E                     u2557:
  1911   00009E  2EE8               	decfsz	wreg,f,c
  1912   0000A0  D7FE               	bra	u2557
  1913   0000A2  2E40               	decfsz	??_buggy_color_response^0,f,c
  1914   0000A4  D7FC               	bra	u2557
  1915   0000A6  2E41               	decfsz	(??_buggy_color_response+1)^0,f,c
  1916   0000A8  D7FA               	bra	u2557
  1917   0000AA  F000               	nop	
  1918   0000AC                     
  1919                           ;color.c: 112:         stop(mL,mR); _delay((unsigned long)((500)*(64000000/4000.0)));
  1920   0000AC  C03A  F016         	movff	buggy_color_response@mL,stop@mL
  1921   0000B0  C03B  F017         	movff	buggy_color_response@mL+1,stop@mL+1
  1922   0000B4  C03C  F018         	movff	buggy_color_response@mR,stop@mR
  1923   0000B8  C03D  F019         	movff	buggy_color_response@mR+1,stop@mR+1
  1924   0000BC  ECDC  F00D         	call	_stop	;wreg free
  1925   0000C0  0E29               	movlw	41
  1926   0000C2  6E41               	movwf	(??_buggy_color_response+1)^0,c
  1927   0000C4  0E96               	movlw	150
  1928   0000C6  6E40               	movwf	??_buggy_color_response^0,c
  1929   0000C8  0E7F               	movlw	127
  1930   0000CA                     u2567:
  1931   0000CA  2EE8               	decfsz	wreg,f,c
  1932   0000CC  D7FE               	bra	u2567
  1933   0000CE  2E40               	decfsz	??_buggy_color_response^0,f,c
  1934   0000D0  D7FC               	bra	u2567
  1935   0000D2  2E41               	decfsz	(??_buggy_color_response+1)^0,f,c
  1936   0000D4  D7FA               	bra	u2567
  1937   0000D6  F000               	nop	
  1938   0000D8                     
  1939                           ;color.c: 113:         READcolor(&color); _delay((unsigned long)((500)*(64000000/4000.0)
      +                          ));
  1940   0000D8  0E45               	movlw	low _color
  1941   0000DA  6E2A               	movwf	READcolor@c^0,c
  1942   0000DC  0E00               	movlw	high _color
  1943   0000DE  6E2B               	movwf	(READcolor@c+1)^0,c
  1944   0000E0  ECBE  F00A         	call	_READcolor	;wreg free
  1945   0000E4  0E29               	movlw	41
  1946   0000E6  6E41               	movwf	(??_buggy_color_response+1)^0,c
  1947   0000E8  0E96               	movlw	150
  1948   0000EA  6E40               	movwf	??_buggy_color_response^0,c
  1949   0000EC  0E7F               	movlw	127
  1950   0000EE                     u2577:
  1951   0000EE  2EE8               	decfsz	wreg,f,c
  1952   0000F0  D7FE               	bra	u2577
  1953   0000F2  2E40               	decfsz	??_buggy_color_response^0,f,c
  1954   0000F4  D7FC               	bra	u2577
  1955   0000F6  2E41               	decfsz	(??_buggy_color_response+1)^0,f,c
  1956   0000F8  D7FA               	bra	u2577
  1957   0000FA  F000               	nop	
  1958   0000FC                     
  1959                           ;color.c: 115:         if (color.R_norm > 0.77 && color.B_norm < 0.18 && color.G_norm < 
      +                          0.14){
  1960   0000FC  0EB8               	movlw	184
  1961   0000FE  6E03               	movwf	___flge@ff1^0,c
  1962   000100  0E1E               	movlw	30
  1963   000102  6E04               	movwf	(___flge@ff1+1)^0,c
  1964   000104  0E45               	movlw	69
  1965   000106  6E05               	movwf	(___flge@ff1+2)^0,c
  1966   000108  0E3F               	movlw	63
  1967   00010A  6E06               	movwf	(___flge@ff1+3)^0,c
  1968   00010C  C04D  F007         	movff	_color+8,___flge@ff2
  1969   000110  C04E  F008         	movff	_color+9,___flge@ff2+1
  1970   000114  C04F  F009         	movff	_color+10,___flge@ff2+2
  1971   000118  C050  F00A         	movff	_color+11,___flge@ff2+3
  1972   00011C  ECEF  F00B         	call	___flge	;wreg free
  1973   000120  B0D8               	btfsc	status,0,c
  1974   000122  EF95  F000         	goto	u2171
  1975   000126  EF97  F000         	goto	u2170
  1976   00012A                     u2171:
  1977   00012A  EFE0  F000         	goto	l3063
  1978   00012E                     u2170:
  1979   00012E  C051  F003         	movff	_color+12,___flge@ff1
  1980   000132  C052  F004         	movff	_color+13,___flge@ff1+1
  1981   000136  C053  F005         	movff	_color+14,___flge@ff1+2
  1982   00013A  C054  F006         	movff	_color+15,___flge@ff1+3
  1983   00013E  0EEC               	movlw	236
  1984   000140  6E07               	movwf	___flge@ff2^0,c
  1985   000142  0E51               	movlw	81
  1986   000144  6E08               	movwf	(___flge@ff2+1)^0,c
  1987   000146  0E38               	movlw	56
  1988   000148  6E09               	movwf	(___flge@ff2+2)^0,c
  1989   00014A  0E3E               	movlw	62
  1990   00014C  6E0A               	movwf	(___flge@ff2+3)^0,c
  1991   00014E  ECEF  F00B         	call	___flge	;wreg free
  1992   000152  B0D8               	btfsc	status,0,c
  1993   000154  EFAE  F000         	goto	u2181
  1994   000158  EFB0  F000         	goto	u2180
  1995   00015C                     u2181:
  1996   00015C  EFE0  F000         	goto	l3063
  1997   000160                     u2180:
  1998   000160  C055  F003         	movff	_color+16,___flge@ff1
  1999   000164  C056  F004         	movff	_color+17,___flge@ff1+1
  2000   000168  C057  F005         	movff	_color+18,___flge@ff1+2
  2001   00016C  C058  F006         	movff	_color+19,___flge@ff1+3
  2002   000170  0E29               	movlw	41
  2003   000172  6E07               	movwf	___flge@ff2^0,c
  2004   000174  0E5C               	movlw	92
  2005   000176  6E08               	movwf	(___flge@ff2+1)^0,c
  2006   000178  0E0F               	movlw	15
  2007   00017A  6E09               	movwf	(___flge@ff2+2)^0,c
  2008   00017C  0E3E               	movlw	62
  2009   00017E  6E0A               	movwf	(___flge@ff2+3)^0,c
  2010   000180  ECEF  F00B         	call	___flge	;wreg free
  2011   000184  B0D8               	btfsc	status,0,c
  2012   000186  EFC7  F000         	goto	u2191
  2013   00018A  EFC9  F000         	goto	u2190
  2014   00018E                     u2191:
  2015   00018E  EFE0  F000         	goto	l3063
  2016   000192                     u2190:
  2017   000192                     
  2018                           ;color.c: 116:             card_memory[card_count] = 2;
  2019   000192  0E88               	movlw	low _card_memory
  2020   000194  2444               	addwf	_card_count^0,w,c
  2021   000196  6ED9               	movwf	fsr2l,c
  2022   000198  6ADA               	clrf	fsr2h,c
  2023   00019A  0E00               	movlw	high _card_memory
  2024   00019C  22DA               	addwfc	fsr2h,f,c
  2025   00019E  0E02               	movlw	2
  2026   0001A0  6EDF               	movwf	indf2,c
  2027   0001A2                     
  2028                           ;color.c: 117:             card_count ++;
  2029   0001A2  2A44               	incf	_card_count^0,f,c
  2030   0001A4                     
  2031                           ;color.c: 118:             movement(mL,mR,1);
  2032   0001A4  C03A  F028         	movff	buggy_color_response@mL,movement@mL
  2033   0001A8  C03B  F029         	movff	buggy_color_response@mL+1,movement@mL+1
  2034   0001AC  C03C  F02A         	movff	buggy_color_response@mR,movement@mR
  2035   0001B0  C03D  F02B         	movff	buggy_color_response@mR+1,movement@mR+1
  2036   0001B4  0E00               	movlw	0
  2037   0001B6  6E2D               	movwf	(movement@count+1)^0,c
  2038   0001B8  0E01               	movlw	1
  2039   0001BA  6E2C               	movwf	movement@count^0,c
  2040   0001BC  EC61  F005         	call	_movement	;wreg free
  2041   0001C0                     l3063:
  2042                           
  2043                           ;color.c: 122:         if (color.B_norm < 0.25 && color.G_norm > 0.40) {
  2044   0001C0  C051  F003         	movff	_color+12,___flge@ff1
  2045   0001C4  C052  F004         	movff	_color+13,___flge@ff1+1
  2046   0001C8  C053  F005         	movff	_color+14,___flge@ff1+2
  2047   0001CC  C054  F006         	movff	_color+15,___flge@ff1+3
  2048   0001D0  0E00               	movlw	0
  2049   0001D2  6E07               	movwf	___flge@ff2^0,c
  2050   0001D4  0E00               	movlw	0
  2051   0001D6  6E08               	movwf	(___flge@ff2+1)^0,c
  2052   0001D8  0E80               	movlw	128
  2053   0001DA  6E09               	movwf	(___flge@ff2+2)^0,c
  2054   0001DC  0E3E               	movlw	62
  2055   0001DE  6E0A               	movwf	(___flge@ff2+3)^0,c
  2056   0001E0  ECEF  F00B         	call	___flge	;wreg free
  2057   0001E4  B0D8               	btfsc	status,0,c
  2058   0001E6  EFF7  F000         	goto	u2201
  2059   0001EA  EFF9  F000         	goto	u2200
  2060   0001EE                     u2201:
  2061   0001EE  EF29  F001         	goto	l3073
  2062   0001F2                     u2200:
  2063   0001F2  0ECD               	movlw	205
  2064   0001F4  6E03               	movwf	___flge@ff1^0,c
  2065   0001F6  0ECC               	movlw	204
  2066   0001F8  6E04               	movwf	(___flge@ff1+1)^0,c
  2067   0001FA  0ECC               	movlw	204
  2068   0001FC  6E05               	movwf	(___flge@ff1+2)^0,c
  2069   0001FE  0E3E               	movlw	62
  2070   000200  6E06               	movwf	(___flge@ff1+3)^0,c
  2071   000202  C055  F007         	movff	_color+16,___flge@ff2
  2072   000206  C056  F008         	movff	_color+17,___flge@ff2+1
  2073   00020A  C057  F009         	movff	_color+18,___flge@ff2+2
  2074   00020E  C058  F00A         	movff	_color+19,___flge@ff2+3
  2075   000212  ECEF  F00B         	call	___flge	;wreg free
  2076   000216  B0D8               	btfsc	status,0,c
  2077   000218  EF10  F001         	goto	u2211
  2078   00021C  EF12  F001         	goto	u2210
  2079   000220                     u2211:
  2080   000220  EF29  F001         	goto	l3073
  2081   000224                     u2210:
  2082   000224                     
  2083                           ;color.c: 123:             card_memory[card_count] = 1;
  2084   000224  0E88               	movlw	low _card_memory
  2085   000226  2444               	addwf	_card_count^0,w,c
  2086   000228  6ED9               	movwf	fsr2l,c
  2087   00022A  6ADA               	clrf	fsr2h,c
  2088   00022C  0E00               	movlw	high _card_memory
  2089   00022E  22DA               	addwfc	fsr2h,f,c
  2090   000230  0E01               	movlw	1
  2091   000232  6EDF               	movwf	indf2,c
  2092   000234                     
  2093                           ;color.c: 124:             card_count ++;
  2094   000234  2A44               	incf	_card_count^0,f,c
  2095   000236                     
  2096                           ;color.c: 125:             movement(mL,mR,2);
  2097   000236  C03A  F028         	movff	buggy_color_response@mL,movement@mL
  2098   00023A  C03B  F029         	movff	buggy_color_response@mL+1,movement@mL+1
  2099   00023E  C03C  F02A         	movff	buggy_color_response@mR,movement@mR
  2100   000242  C03D  F02B         	movff	buggy_color_response@mR+1,movement@mR+1
  2101   000246  0E00               	movlw	0
  2102   000248  6E2D               	movwf	(movement@count+1)^0,c
  2103   00024A  0E02               	movlw	2
  2104   00024C  6E2C               	movwf	movement@count^0,c
  2105   00024E  EC61  F005         	call	_movement	;wreg free
  2106   000252                     l3073:
  2107                           
  2108                           ;color.c: 129:         if (color.R_norm < 0.38 && color.B_norm > 0.32 && color.G_norm > 
      +                          0.34){
  2109   000252  C04D  F003         	movff	_color+8,___flge@ff1
  2110   000256  C04E  F004         	movff	_color+9,___flge@ff1+1
  2111   00025A  C04F  F005         	movff	_color+10,___flge@ff1+2
  2112   00025E  C050  F006         	movff	_color+11,___flge@ff1+3
  2113   000262  0E5C               	movlw	92
  2114   000264  6E07               	movwf	___flge@ff2^0,c
  2115   000266  0E8F               	movlw	143
  2116   000268  6E08               	movwf	(___flge@ff2+1)^0,c
  2117   00026A  0EC2               	movlw	194
  2118   00026C  6E09               	movwf	(___flge@ff2+2)^0,c
  2119   00026E  0E3E               	movlw	62
  2120   000270  6E0A               	movwf	(___flge@ff2+3)^0,c
  2121   000272  ECEF  F00B         	call	___flge	;wreg free
  2122   000276  B0D8               	btfsc	status,0,c
  2123   000278  EF40  F001         	goto	u2221
  2124   00027C  EF42  F001         	goto	u2220
  2125   000280                     u2221:
  2126   000280  EF8B  F001         	goto	l3085
  2127   000284                     u2220:
  2128   000284  0E0A               	movlw	10
  2129   000286  6E03               	movwf	___flge@ff1^0,c
  2130   000288  0ED7               	movlw	215
  2131   00028A  6E04               	movwf	(___flge@ff1+1)^0,c
  2132   00028C  0EA3               	movlw	163
  2133   00028E  6E05               	movwf	(___flge@ff1+2)^0,c
  2134   000290  0E3E               	movlw	62
  2135   000292  6E06               	movwf	(___flge@ff1+3)^0,c
  2136   000294  C051  F007         	movff	_color+12,___flge@ff2
  2137   000298  C052  F008         	movff	_color+13,___flge@ff2+1
  2138   00029C  C053  F009         	movff	_color+14,___flge@ff2+2
  2139   0002A0  C054  F00A         	movff	_color+15,___flge@ff2+3
  2140   0002A4  ECEF  F00B         	call	___flge	;wreg free
  2141   0002A8  B0D8               	btfsc	status,0,c
  2142   0002AA  EF59  F001         	goto	u2231
  2143   0002AE  EF5B  F001         	goto	u2230
  2144   0002B2                     u2231:
  2145   0002B2  EF8B  F001         	goto	l3085
  2146   0002B6                     u2230:
  2147   0002B6  0E7B               	movlw	123
  2148   0002B8  6E03               	movwf	___flge@ff1^0,c
  2149   0002BA  0E14               	movlw	20
  2150   0002BC  6E04               	movwf	(___flge@ff1+1)^0,c
  2151   0002BE  0EAE               	movlw	174
  2152   0002C0  6E05               	movwf	(___flge@ff1+2)^0,c
  2153   0002C2  0E3E               	movlw	62
  2154   0002C4  6E06               	movwf	(___flge@ff1+3)^0,c
  2155   0002C6  C055  F007         	movff	_color+16,___flge@ff2
  2156   0002CA  C056  F008         	movff	_color+17,___flge@ff2+1
  2157   0002CE  C057  F009         	movff	_color+18,___flge@ff2+2
  2158   0002D2  C058  F00A         	movff	_color+19,___flge@ff2+3
  2159   0002D6  ECEF  F00B         	call	___flge	;wreg free
  2160   0002DA  B0D8               	btfsc	status,0,c
  2161   0002DC  EF72  F001         	goto	u2241
  2162   0002E0  EF74  F001         	goto	u2240
  2163   0002E4                     u2241:
  2164   0002E4  EF8B  F001         	goto	l3085
  2165   0002E8                     u2240:
  2166   0002E8                     
  2167                           ;color.c: 130:             card_memory[card_count] = 3;
  2168   0002E8  0E88               	movlw	low _card_memory
  2169   0002EA  2444               	addwf	_card_count^0,w,c
  2170   0002EC  6ED9               	movwf	fsr2l,c
  2171   0002EE  6ADA               	clrf	fsr2h,c
  2172   0002F0  0E00               	movlw	high _card_memory
  2173   0002F2  22DA               	addwfc	fsr2h,f,c
  2174   0002F4  0E03               	movlw	3
  2175   0002F6  6EDF               	movwf	indf2,c
  2176   0002F8                     
  2177                           ;color.c: 131:             card_count ++;
  2178   0002F8  2A44               	incf	_card_count^0,f,c
  2179   0002FA                     
  2180                           ;color.c: 132:             movement(mL,mR,3);
  2181   0002FA  C03A  F028         	movff	buggy_color_response@mL,movement@mL
  2182   0002FE  C03B  F029         	movff	buggy_color_response@mL+1,movement@mL+1
  2183   000302  C03C  F02A         	movff	buggy_color_response@mR,movement@mR
  2184   000306  C03D  F02B         	movff	buggy_color_response@mR+1,movement@mR+1
  2185   00030A  0E00               	movlw	0
  2186   00030C  6E2D               	movwf	(movement@count+1)^0,c
  2187   00030E  0E03               	movlw	3
  2188   000310  6E2C               	movwf	movement@count^0,c
  2189   000312  EC61  F005         	call	_movement	;wreg free
  2190   000316                     l3085:
  2191                           
  2192                           ;color.c: 136:         if (color.R_norm > 0.52 && color.G_norm > 0.32){
  2193   000316  0EB8               	movlw	184
  2194   000318  6E03               	movwf	___flge@ff1^0,c
  2195   00031A  0E1E               	movlw	30
  2196   00031C  6E04               	movwf	(___flge@ff1+1)^0,c
  2197   00031E  0E05               	movlw	5
  2198   000320  6E05               	movwf	(___flge@ff1+2)^0,c
  2199   000322  0E3F               	movlw	63
  2200   000324  6E06               	movwf	(___flge@ff1+3)^0,c
  2201   000326  C04D  F007         	movff	_color+8,___flge@ff2
  2202   00032A  C04E  F008         	movff	_color+9,___flge@ff2+1
  2203   00032E  C04F  F009         	movff	_color+10,___flge@ff2+2
  2204   000332  C050  F00A         	movff	_color+11,___flge@ff2+3
  2205   000336  ECEF  F00B         	call	___flge	;wreg free
  2206   00033A  B0D8               	btfsc	status,0,c
  2207   00033C  EFA2  F001         	goto	u2251
  2208   000340  EFA4  F001         	goto	u2250
  2209   000344                     u2251:
  2210   000344  EFD4  F001         	goto	l3095
  2211   000348                     u2250:
  2212   000348  0E0A               	movlw	10
  2213   00034A  6E03               	movwf	___flge@ff1^0,c
  2214   00034C  0ED7               	movlw	215
  2215   00034E  6E04               	movwf	(___flge@ff1+1)^0,c
  2216   000350  0EA3               	movlw	163
  2217   000352  6E05               	movwf	(___flge@ff1+2)^0,c
  2218   000354  0E3E               	movlw	62
  2219   000356  6E06               	movwf	(___flge@ff1+3)^0,c
  2220   000358  C055  F007         	movff	_color+16,___flge@ff2
  2221   00035C  C056  F008         	movff	_color+17,___flge@ff2+1
  2222   000360  C057  F009         	movff	_color+18,___flge@ff2+2
  2223   000364  C058  F00A         	movff	_color+19,___flge@ff2+3
  2224   000368  ECEF  F00B         	call	___flge	;wreg free
  2225   00036C  B0D8               	btfsc	status,0,c
  2226   00036E  EFBB  F001         	goto	u2261
  2227   000372  EFBD  F001         	goto	u2260
  2228   000376                     u2261:
  2229   000376  EFD4  F001         	goto	l3095
  2230   00037A                     u2260:
  2231   00037A                     
  2232                           ;color.c: 137:             card_memory[card_count] = 9;
  2233   00037A  0E88               	movlw	low _card_memory
  2234   00037C  2444               	addwf	_card_count^0,w,c
  2235   00037E  6ED9               	movwf	fsr2l,c
  2236   000380  6ADA               	clrf	fsr2h,c
  2237   000382  0E00               	movlw	high _card_memory
  2238   000384  22DA               	addwfc	fsr2h,f,c
  2239   000386  0E09               	movlw	9
  2240   000388  6EDF               	movwf	indf2,c
  2241   00038A                     
  2242                           ;color.c: 138:             card_count ++;
  2243   00038A  2A44               	incf	_card_count^0,f,c
  2244   00038C                     
  2245                           ;color.c: 139:             movement(mL,mR,4);
  2246   00038C  C03A  F028         	movff	buggy_color_response@mL,movement@mL
  2247   000390  C03B  F029         	movff	buggy_color_response@mL+1,movement@mL+1
  2248   000394  C03C  F02A         	movff	buggy_color_response@mR,movement@mR
  2249   000398  C03D  F02B         	movff	buggy_color_response@mR+1,movement@mR+1
  2250   00039C  0E00               	movlw	0
  2251   00039E  6E2D               	movwf	(movement@count+1)^0,c
  2252   0003A0  0E04               	movlw	4
  2253   0003A2  6E2C               	movwf	movement@count^0,c
  2254   0003A4  EC61  F005         	call	_movement	;wreg free
  2255   0003A8                     l3095:
  2256                           
  2257                           ;color.c: 143:         if (color.R_norm > 0.50 && color.B_norm > 0.24 && color.G_norm < 
      +                          0.33){
  2258   0003A8  0E00               	movlw	0
  2259   0003AA  6E03               	movwf	___flge@ff1^0,c
  2260   0003AC  0E00               	movlw	0
  2261   0003AE  6E04               	movwf	(___flge@ff1+1)^0,c
  2262   0003B0  0E00               	movlw	0
  2263   0003B2  6E05               	movwf	(___flge@ff1+2)^0,c
  2264   0003B4  0E3F               	movlw	63
  2265   0003B6  6E06               	movwf	(___flge@ff1+3)^0,c
  2266   0003B8  C04D  F007         	movff	_color+8,___flge@ff2
  2267   0003BC  C04E  F008         	movff	_color+9,___flge@ff2+1
  2268   0003C0  C04F  F009         	movff	_color+10,___flge@ff2+2
  2269   0003C4  C050  F00A         	movff	_color+11,___flge@ff2+3
  2270   0003C8  ECEF  F00B         	call	___flge	;wreg free
  2271   0003CC  B0D8               	btfsc	status,0,c
  2272   0003CE  EFEB  F001         	goto	u2271
  2273   0003D2  EFED  F001         	goto	u2270
  2274   0003D6                     u2271:
  2275   0003D6  EF36  F002         	goto	l3107
  2276   0003DA                     u2270:
  2277   0003DA  0E8F               	movlw	143
  2278   0003DC  6E03               	movwf	___flge@ff1^0,c
  2279   0003DE  0EC2               	movlw	194
  2280   0003E0  6E04               	movwf	(___flge@ff1+1)^0,c
  2281   0003E2  0E75               	movlw	117
  2282   0003E4  6E05               	movwf	(___flge@ff1+2)^0,c
  2283   0003E6  0E3E               	movlw	62
  2284   0003E8  6E06               	movwf	(___flge@ff1+3)^0,c
  2285   0003EA  C051  F007         	movff	_color+12,___flge@ff2
  2286   0003EE  C052  F008         	movff	_color+13,___flge@ff2+1
  2287   0003F2  C053  F009         	movff	_color+14,___flge@ff2+2
  2288   0003F6  C054  F00A         	movff	_color+15,___flge@ff2+3
  2289   0003FA  ECEF  F00B         	call	___flge	;wreg free
  2290   0003FE  B0D8               	btfsc	status,0,c
  2291   000400  EF04  F002         	goto	u2281
  2292   000404  EF06  F002         	goto	u2280
  2293   000408                     u2281:
  2294   000408  EF36  F002         	goto	l3107
  2295   00040C                     u2280:
  2296   00040C  C055  F003         	movff	_color+16,___flge@ff1
  2297   000410  C056  F004         	movff	_color+17,___flge@ff1+1
  2298   000414  C057  F005         	movff	_color+18,___flge@ff1+2
  2299   000418  C058  F006         	movff	_color+19,___flge@ff1+3
  2300   00041C  0EC3               	movlw	195
  2301   00041E  6E07               	movwf	___flge@ff2^0,c
  2302   000420  0EF5               	movlw	245
  2303   000422  6E08               	movwf	(___flge@ff2+1)^0,c
  2304   000424  0EA8               	movlw	168
  2305   000426  6E09               	movwf	(___flge@ff2+2)^0,c
  2306   000428  0E3E               	movlw	62
  2307   00042A  6E0A               	movwf	(___flge@ff2+3)^0,c
  2308   00042C  ECEF  F00B         	call	___flge	;wreg free
  2309   000430  B0D8               	btfsc	status,0,c
  2310   000432  EF1D  F002         	goto	u2291
  2311   000436  EF1F  F002         	goto	u2290
  2312   00043A                     u2291:
  2313   00043A  EF36  F002         	goto	l3107
  2314   00043E                     u2290:
  2315   00043E                     
  2316                           ;color.c: 144:             card_memory[card_count] = 10;
  2317   00043E  0E88               	movlw	low _card_memory
  2318   000440  2444               	addwf	_card_count^0,w,c
  2319   000442  6ED9               	movwf	fsr2l,c
  2320   000444  6ADA               	clrf	fsr2h,c
  2321   000446  0E00               	movlw	high _card_memory
  2322   000448  22DA               	addwfc	fsr2h,f,c
  2323   00044A  0E0A               	movlw	10
  2324   00044C  6EDF               	movwf	indf2,c
  2325   00044E                     
  2326                           ;color.c: 145:             card_count ++;
  2327   00044E  2A44               	incf	_card_count^0,f,c
  2328   000450                     
  2329                           ;color.c: 146:             movement(mL,mR,5);
  2330   000450  C03A  F028         	movff	buggy_color_response@mL,movement@mL
  2331   000454  C03B  F029         	movff	buggy_color_response@mL+1,movement@mL+1
  2332   000458  C03C  F02A         	movff	buggy_color_response@mR,movement@mR
  2333   00045C  C03D  F02B         	movff	buggy_color_response@mR+1,movement@mR+1
  2334   000460  0E00               	movlw	0
  2335   000462  6E2D               	movwf	(movement@count+1)^0,c
  2336   000464  0E05               	movlw	5
  2337   000466  6E2C               	movwf	movement@count^0,c
  2338   000468  EC61  F005         	call	_movement	;wreg free
  2339   00046C                     l3107:
  2340                           
  2341                           ;color.c: 150:         if (color.R_norm > 0.60 && color.B_norm < 0.22 && color.G_norm > 
      +                          0.23){
  2342   00046C  0E9A               	movlw	154
  2343   00046E  6E03               	movwf	___flge@ff1^0,c
  2344   000470  0E99               	movlw	153
  2345   000472  6E04               	movwf	(___flge@ff1+1)^0,c
  2346   000474  0E19               	movlw	25
  2347   000476  6E05               	movwf	(___flge@ff1+2)^0,c
  2348   000478  0E3F               	movlw	63
  2349   00047A  6E06               	movwf	(___flge@ff1+3)^0,c
  2350   00047C  C04D  F007         	movff	_color+8,___flge@ff2
  2351   000480  C04E  F008         	movff	_color+9,___flge@ff2+1
  2352   000484  C04F  F009         	movff	_color+10,___flge@ff2+2
  2353   000488  C050  F00A         	movff	_color+11,___flge@ff2+3
  2354   00048C  ECEF  F00B         	call	___flge	;wreg free
  2355   000490  B0D8               	btfsc	status,0,c
  2356   000492  EF4D  F002         	goto	u2301
  2357   000496  EF4F  F002         	goto	u2300
  2358   00049A                     u2301:
  2359   00049A  EF98  F002         	goto	l3119
  2360   00049E                     u2300:
  2361   00049E  C051  F003         	movff	_color+12,___flge@ff1
  2362   0004A2  C052  F004         	movff	_color+13,___flge@ff1+1
  2363   0004A6  C053  F005         	movff	_color+14,___flge@ff1+2
  2364   0004AA  C054  F006         	movff	_color+15,___flge@ff1+3
  2365   0004AE  0EAE               	movlw	174
  2366   0004B0  6E07               	movwf	___flge@ff2^0,c
  2367   0004B2  0E47               	movlw	71
  2368   0004B4  6E08               	movwf	(___flge@ff2+1)^0,c
  2369   0004B6  0E61               	movlw	97
  2370   0004B8  6E09               	movwf	(___flge@ff2+2)^0,c
  2371   0004BA  0E3E               	movlw	62
  2372   0004BC  6E0A               	movwf	(___flge@ff2+3)^0,c
  2373   0004BE  ECEF  F00B         	call	___flge	;wreg free
  2374   0004C2  B0D8               	btfsc	status,0,c
  2375   0004C4  EF66  F002         	goto	u2311
  2376   0004C8  EF68  F002         	goto	u2310
  2377   0004CC                     u2311:
  2378   0004CC  EF98  F002         	goto	l3119
  2379   0004D0                     u2310:
  2380   0004D0  0E1F               	movlw	31
  2381   0004D2  6E03               	movwf	___flge@ff1^0,c
  2382   0004D4  0E85               	movlw	133
  2383   0004D6  6E04               	movwf	(___flge@ff1+1)^0,c
  2384   0004D8  0E6B               	movlw	107
  2385   0004DA  6E05               	movwf	(___flge@ff1+2)^0,c
  2386   0004DC  0E3E               	movlw	62
  2387   0004DE  6E06               	movwf	(___flge@ff1+3)^0,c
  2388   0004E0  C055  F007         	movff	_color+16,___flge@ff2
  2389   0004E4  C056  F008         	movff	_color+17,___flge@ff2+1
  2390   0004E8  C057  F009         	movff	_color+18,___flge@ff2+2
  2391   0004EC  C058  F00A         	movff	_color+19,___flge@ff2+3
  2392   0004F0  ECEF  F00B         	call	___flge	;wreg free
  2393   0004F4  B0D8               	btfsc	status,0,c
  2394   0004F6  EF7F  F002         	goto	u2321
  2395   0004FA  EF81  F002         	goto	u2320
  2396   0004FE                     u2321:
  2397   0004FE  EF98  F002         	goto	l3119
  2398   000502                     u2320:
  2399   000502                     
  2400                           ;color.c: 151:             card_memory[card_count] = 7;
  2401   000502  0E88               	movlw	low _card_memory
  2402   000504  2444               	addwf	_card_count^0,w,c
  2403   000506  6ED9               	movwf	fsr2l,c
  2404   000508  6ADA               	clrf	fsr2h,c
  2405   00050A  0E00               	movlw	high _card_memory
  2406   00050C  22DA               	addwfc	fsr2h,f,c
  2407   00050E  0E07               	movlw	7
  2408   000510  6EDF               	movwf	indf2,c
  2409   000512                     
  2410                           ;color.c: 152:             card_count ++;
  2411   000512  2A44               	incf	_card_count^0,f,c
  2412   000514                     
  2413                           ;color.c: 153:             movement(mL,mR,6);
  2414   000514  C03A  F028         	movff	buggy_color_response@mL,movement@mL
  2415   000518  C03B  F029         	movff	buggy_color_response@mL+1,movement@mL+1
  2416   00051C  C03C  F02A         	movff	buggy_color_response@mR,movement@mR
  2417   000520  C03D  F02B         	movff	buggy_color_response@mR+1,movement@mR+1
  2418   000524  0E00               	movlw	0
  2419   000526  6E2D               	movwf	(movement@count+1)^0,c
  2420   000528  0E06               	movlw	6
  2421   00052A  6E2C               	movwf	movement@count^0,c
  2422   00052C  EC61  F005         	call	_movement	;wreg free
  2423   000530                     l3119:
  2424                           
  2425                           ;color.c: 157:         if (color.R_norm < 0.40 && color.B_norm > 0.30 && color.G_norm > 
      +                          0.4){
  2426   000530  C04D  F003         	movff	_color+8,___flge@ff1
  2427   000534  C04E  F004         	movff	_color+9,___flge@ff1+1
  2428   000538  C04F  F005         	movff	_color+10,___flge@ff1+2
  2429   00053C  C050  F006         	movff	_color+11,___flge@ff1+3
  2430   000540  0ECD               	movlw	205
  2431   000542  6E07               	movwf	___flge@ff2^0,c
  2432   000544  0ECC               	movlw	204
  2433   000546  6E08               	movwf	(___flge@ff2+1)^0,c
  2434   000548  0ECC               	movlw	204
  2435   00054A  6E09               	movwf	(___flge@ff2+2)^0,c
  2436   00054C  0E3E               	movlw	62
  2437   00054E  6E0A               	movwf	(___flge@ff2+3)^0,c
  2438   000550  ECEF  F00B         	call	___flge	;wreg free
  2439   000554  B0D8               	btfsc	status,0,c
  2440   000556  EFAF  F002         	goto	u2331
  2441   00055A  EFB1  F002         	goto	u2330
  2442   00055E                     u2331:
  2443   00055E  EFFA  F002         	goto	l3131
  2444   000562                     u2330:
  2445   000562  0E9A               	movlw	154
  2446   000564  6E03               	movwf	___flge@ff1^0,c
  2447   000566  0E99               	movlw	153
  2448   000568  6E04               	movwf	(___flge@ff1+1)^0,c
  2449   00056A  0E99               	movlw	153
  2450   00056C  6E05               	movwf	(___flge@ff1+2)^0,c
  2451   00056E  0E3E               	movlw	62
  2452   000570  6E06               	movwf	(___flge@ff1+3)^0,c
  2453   000572  C051  F007         	movff	_color+12,___flge@ff2
  2454   000576  C052  F008         	movff	_color+13,___flge@ff2+1
  2455   00057A  C053  F009         	movff	_color+14,___flge@ff2+2
  2456   00057E  C054  F00A         	movff	_color+15,___flge@ff2+3
  2457   000582  ECEF  F00B         	call	___flge	;wreg free
  2458   000586  B0D8               	btfsc	status,0,c
  2459   000588  EFC8  F002         	goto	u2341
  2460   00058C  EFCA  F002         	goto	u2340
  2461   000590                     u2341:
  2462   000590  EFFA  F002         	goto	l3131
  2463   000594                     u2340:
  2464   000594  0ECD               	movlw	205
  2465   000596  6E03               	movwf	___flge@ff1^0,c
  2466   000598  0ECC               	movlw	204
  2467   00059A  6E04               	movwf	(___flge@ff1+1)^0,c
  2468   00059C  0ECC               	movlw	204
  2469   00059E  6E05               	movwf	(___flge@ff1+2)^0,c
  2470   0005A0  0E3E               	movlw	62
  2471   0005A2  6E06               	movwf	(___flge@ff1+3)^0,c
  2472   0005A4  C055  F007         	movff	_color+16,___flge@ff2
  2473   0005A8  C056  F008         	movff	_color+17,___flge@ff2+1
  2474   0005AC  C057  F009         	movff	_color+18,___flge@ff2+2
  2475   0005B0  C058  F00A         	movff	_color+19,___flge@ff2+3
  2476   0005B4  ECEF  F00B         	call	___flge	;wreg free
  2477   0005B8  B0D8               	btfsc	status,0,c
  2478   0005BA  EFE1  F002         	goto	u2351
  2479   0005BE  EFE3  F002         	goto	u2350
  2480   0005C2                     u2351:
  2481   0005C2  EFFA  F002         	goto	l3131
  2482   0005C6                     u2350:
  2483   0005C6                     
  2484                           ;color.c: 158:             card_memory[card_count] = 6;
  2485   0005C6  0E88               	movlw	low _card_memory
  2486   0005C8  2444               	addwf	_card_count^0,w,c
  2487   0005CA  6ED9               	movwf	fsr2l,c
  2488   0005CC  6ADA               	clrf	fsr2h,c
  2489   0005CE  0E00               	movlw	high _card_memory
  2490   0005D0  22DA               	addwfc	fsr2h,f,c
  2491   0005D2  0E06               	movlw	6
  2492   0005D4  6EDF               	movwf	indf2,c
  2493   0005D6                     
  2494                           ;color.c: 159:             card_count ++;
  2495   0005D6  2A44               	incf	_card_count^0,f,c
  2496   0005D8                     
  2497                           ;color.c: 160:             movement(mL,mR,7);
  2498   0005D8  C03A  F028         	movff	buggy_color_response@mL,movement@mL
  2499   0005DC  C03B  F029         	movff	buggy_color_response@mL+1,movement@mL+1
  2500   0005E0  C03C  F02A         	movff	buggy_color_response@mR,movement@mR
  2501   0005E4  C03D  F02B         	movff	buggy_color_response@mR+1,movement@mR+1
  2502   0005E8  0E00               	movlw	0
  2503   0005EA  6E2D               	movwf	(movement@count+1)^0,c
  2504   0005EC  0E07               	movlw	7
  2505   0005EE  6E2C               	movwf	movement@count^0,c
  2506   0005F0  EC61  F005         	call	_movement	;wreg free
  2507   0005F4                     l3131:
  2508                           
  2509                           ;color.c: 164:         if (color.R_norm < 0.5 && color.C > 16000 ){
  2510   0005F4  C04D  F003         	movff	_color+8,___flge@ff1
  2511   0005F8  C04E  F004         	movff	_color+9,___flge@ff1+1
  2512   0005FC  C04F  F005         	movff	_color+10,___flge@ff1+2
  2513   000600  C050  F006         	movff	_color+11,___flge@ff1+3
  2514   000604  0E00               	movlw	0
  2515   000606  6E07               	movwf	___flge@ff2^0,c
  2516   000608  0E00               	movlw	0
  2517   00060A  6E08               	movwf	(___flge@ff2+1)^0,c
  2518   00060C  0E00               	movlw	0
  2519   00060E  6E09               	movwf	(___flge@ff2+2)^0,c
  2520   000610  0E3F               	movlw	63
  2521   000612  6E0A               	movwf	(___flge@ff2+3)^0,c
  2522   000614  ECEF  F00B         	call	___flge	;wreg free
  2523   000618  B0D8               	btfsc	status,0,c
  2524   00061A  EF11  F003         	goto	u2361
  2525   00061E  EF13  F003         	goto	u2360
  2526   000622                     u2361:
  2527   000622  EF85  F003         	goto	l3161
  2528   000626                     u2360:
  2529   000626  0E81               	movlw	129
  2530   000628  5C4B               	subwf	(_color+6)^0,w,c
  2531   00062A  0E3E               	movlw	62
  2532   00062C  584C               	subwfb	(_color+7)^0,w,c
  2533   00062E  A0D8               	btfss	status,0,c
  2534   000630  EF1C  F003         	goto	u2371
  2535   000634  EF1E  F003         	goto	u2370
  2536   000638                     u2371:
  2537   000638  EF85  F003         	goto	l3161
  2538   00063C                     u2370:
  2539   00063C                     
  2540                           ;color.c: 167:             card_memory[card_count] = 3;
  2541   00063C  0E88               	movlw	low _card_memory
  2542   00063E  2444               	addwf	_card_count^0,w,c
  2543   000640  6ED9               	movwf	fsr2l,c
  2544   000642  6ADA               	clrf	fsr2h,c
  2545   000644  0E00               	movlw	high _card_memory
  2546   000646  22DA               	addwfc	fsr2h,f,c
  2547   000648  0E03               	movlw	3
  2548   00064A  6EDF               	movwf	indf2,c
  2549   00064C                     
  2550                           ;color.c: 168:             card_count ++;
  2551   00064C  2A44               	incf	_card_count^0,f,c
  2552   00064E                     
  2553                           ;color.c: 170:             LATGbits.LATG1 = 0;
  2554   00064E  927F               	bcf	127,1,c	;volatile
  2555   000650                     
  2556                           ;color.c: 171:             LATAbits.LATA4 = 0;
  2557   000650  9879               	bcf	121,4,c	;volatile
  2558   000652                     
  2559                           ;color.c: 172:             LATFbits.LATF7 = 0;
  2560   000652  9E7E               	bcf	126,7,c	;volatile
  2561   000654                     
  2562                           ;color.c: 174:             space(mL,mR);
  2563   000654  C03A  F01C         	movff	buggy_color_response@mL,space@mL
  2564   000658  C03B  F01D         	movff	buggy_color_response@mL+1,space@mL+1
  2565   00065C  C03C  F01E         	movff	buggy_color_response@mR,space@mR
  2566   000660  C03D  F01F         	movff	buggy_color_response@mR+1,space@mR+1
  2567   000664  EC71  F00C         	call	_space	;wreg free
  2568   000668                     
  2569                           ;color.c: 175:             _delay((unsigned long)((500)*(64000000/4000.0)));
  2570   000668  0E29               	movlw	41
  2571   00066A  6E41               	movwf	(??_buggy_color_response+1)^0,c
  2572   00066C  0E96               	movlw	150
  2573   00066E  6E40               	movwf	??_buggy_color_response^0,c
  2574   000670  0E7F               	movlw	127
  2575   000672                     u2587:
  2576   000672  2EE8               	decfsz	wreg,f,c
  2577   000674  D7FE               	bra	u2587
  2578   000676  2E40               	decfsz	??_buggy_color_response^0,f,c
  2579   000678  D7FC               	bra	u2587
  2580   00067A  2E41               	decfsz	(??_buggy_color_response+1)^0,f,c
  2581   00067C  D7FA               	bra	u2587
  2582   00067E  F000               	nop	
  2583   000680                     
  2584                           ;color.c: 176:             stop(mL,mR);
  2585   000680  C03A  F016         	movff	buggy_color_response@mL,stop@mL
  2586   000684  C03B  F017         	movff	buggy_color_response@mL+1,stop@mL+1
  2587   000688  C03C  F018         	movff	buggy_color_response@mR,stop@mR
  2588   00068C  C03D  F019         	movff	buggy_color_response@mR+1,stop@mR+1
  2589   000690  ECDC  F00D         	call	_stop	;wreg free
  2590   000694                     
  2591                           ;color.c: 177:             _delay((unsigned long)((500)*(64000000/4000.0)));
  2592   000694  0E29               	movlw	41
  2593   000696  6E41               	movwf	(??_buggy_color_response+1)^0,c
  2594   000698  0E96               	movlw	150
  2595   00069A  6E40               	movwf	??_buggy_color_response^0,c
  2596   00069C  0E7F               	movlw	127
  2597   00069E                     u2597:
  2598   00069E  2EE8               	decfsz	wreg,f,c
  2599   0006A0  D7FE               	bra	u2597
  2600   0006A2  2E40               	decfsz	??_buggy_color_response^0,f,c
  2601   0006A4  D7FC               	bra	u2597
  2602   0006A6  2E41               	decfsz	(??_buggy_color_response+1)^0,f,c
  2603   0006A8  D7FA               	bra	u2597
  2604   0006AA  F000               	nop	
  2605   0006AC                     
  2606                           ;color.c: 179:             return_home(mL,mR);
  2607   0006AC  C03A  F034         	movff	buggy_color_response@mL,return_home@mL
  2608   0006B0  C03B  F035         	movff	buggy_color_response@mL+1,return_home@mL+1
  2609   0006B4  C03C  F036         	movff	buggy_color_response@mR,return_home@mR
  2610   0006B8  C03D  F037         	movff	buggy_color_response@mR+1,return_home@mR+1
  2611   0006BC  ECAF  F008         	call	_return_home	;wreg free
  2612   0006C0                     
  2613                           ;color.c: 181:             stop(mL,mR);
  2614   0006C0  C03A  F016         	movff	buggy_color_response@mL,stop@mL
  2615   0006C4  C03B  F017         	movff	buggy_color_response@mL+1,stop@mL+1
  2616   0006C8  C03C  F018         	movff	buggy_color_response@mR,stop@mR
  2617   0006CC  C03D  F019         	movff	buggy_color_response@mR+1,stop@mR+1
  2618   0006D0  ECDC  F00D         	call	_stop	;wreg free
  2619   0006D4                     
  2620                           ;color.c: 182:             _delay((unsigned long)((500)*(64000000/4000.0)));
  2621   0006D4  0E29               	movlw	41
  2622   0006D6  6E41               	movwf	(??_buggy_color_response+1)^0,c
  2623   0006D8  0E96               	movlw	150
  2624   0006DA  6E40               	movwf	??_buggy_color_response^0,c
  2625   0006DC  0E7F               	movlw	127
  2626   0006DE                     u2607:
  2627   0006DE  2EE8               	decfsz	wreg,f,c
  2628   0006E0  D7FE               	bra	u2607
  2629   0006E2  2E40               	decfsz	??_buggy_color_response^0,f,c
  2630   0006E4  D7FC               	bra	u2607
  2631   0006E6  2E41               	decfsz	(??_buggy_color_response+1)^0,f,c
  2632   0006E8  D7FA               	bra	u2607
  2633   0006EA  F000               	nop	
  2634   0006EC                     
  2635                           ;color.c: 184:             movement_return(mL,mR,3);
  2636   0006EC  C03A  F02E         	movff	buggy_color_response@mL,movement_return@mL
  2637   0006F0  C03B  F02F         	movff	buggy_color_response@mL+1,movement_return@mL+1
  2638   0006F4  C03C  F030         	movff	buggy_color_response@mR,movement_return@mR
  2639   0006F8  C03D  F031         	movff	buggy_color_response@mR+1,movement_return@mR+1
  2640   0006FC  0E00               	movlw	0
  2641   0006FE  6E33               	movwf	(movement_return@count+1)^0,c
  2642   000700  0E03               	movlw	3
  2643   000702  6E32               	movwf	movement_return@count^0,c
  2644   000704  ECEF  F006         	call	_movement_return	;wreg free
  2645   000708  0003               	sleep		;# 
  2646   00070A                     l3161:
  2647                           
  2648                           ;color.c: 188:         timer_reset();
  2649   00070A  ECA8  F011         	call	_timer_reset	;wreg free
  2650                           
  2651                           ;color.c: 189:     }
  2652   00070E  EF93  F003         	goto	l148
  2653   000712                     l3163:
  2654   000712  C03A  F01C         	movff	buggy_color_response@mL,forward@mL
  2655   000716  C03B  F01D         	movff	buggy_color_response@mL+1,forward@mL+1
  2656   00071A  C03C  F01E         	movff	buggy_color_response@mR,forward@mR
  2657   00071E  C03D  F01F         	movff	buggy_color_response@mR+1,forward@mR+1
  2658   000722  ECF2  F00C         	call	_forward	;wreg free
  2659   000726                     l148:
  2660   000726  0012               	return		;funcret
  2661   000728                     __end_of_buggy_color_response:
  2662                           	callstack 0
  2663                           
  2664 ;; *************** function _timer_reset *****************
  2665 ;; Defined at:
  2666 ;;		line 21 in file "timers.c"
  2667 ;; Parameters:    Size  Location     Type
  2668 ;;		None
  2669 ;; Auto vars:     Size  Location     Type
  2670 ;;		None
  2671 ;; Return value:  Size  Location     Type
  2672 ;;                  1    wreg      void 
  2673 ;; Registers used:
  2674 ;;		wreg, status,2
  2675 ;; Tracked objects:
  2676 ;;		On entry : 0/0
  2677 ;;		On exit  : 0/0
  2678 ;;		Unchanged: 0/0
  2679 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2680 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2681 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2682 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2683 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2684 ;;Total ram usage:        0 bytes
  2685 ;; Hardware stack levels used: 1
  2686 ;; Hardware stack levels required when called: 1
  2687 ;; This function calls:
  2688 ;;		Nothing
  2689 ;; This function is called by:
  2690 ;;		_buggy_color_response
  2691 ;;		_main
  2692 ;; This function uses a non-reentrant model
  2693 ;;
  2694                           
  2695                           	psect	text14
  2696   002350                     __ptext14:
  2697                           	callstack 0
  2698   002350                     _timer_reset:
  2699                           	callstack 29
  2700   002350                     
  2701                           ;timers.c: 22:     timer_val = 0;
  2702   002350  0E00               	movlw	0
  2703   002352  0100               	movlb	0	; () banked
  2704   002354  6FC5               	movwf	(_timer_val+1)& (0+255),b
  2705   002356  0E00               	movlw	0
  2706   002358  6FC4               	movwf	_timer_val& (0+255),b
  2707                           
  2708                           ;timers.c: 23:     TMR0H=0;
  2709   00235A  0E00               	movlw	0
  2710   00235C  6ED4               	movwf	212,c	;volatile
  2711                           
  2712                           ;timers.c: 24:     TMR0L=0b00100011;
  2713   00235E  0E23               	movlw	35
  2714   002360  6ED3               	movwf	211,c	;volatile
  2715   002362                     
  2716                           ; BSR set to: 0
  2717   002362  0012               	return		;funcret
  2718   002364                     __end_of_timer_reset:
  2719                           	callstack 0
  2720                           
  2721 ;; *************** function _return_home *****************
  2722 ;; Defined at:
  2723 ;;		line 220 in file "color.c"
  2724 ;; Parameters:    Size  Location     Type
  2725 ;;  mL              2   51[COMRAM] PTR struct DC_motor
  2726 ;;		 -> motorL(9), 
  2727 ;;  mR              2   53[COMRAM] PTR struct DC_motor
  2728 ;;		 -> motorR(9), 
  2729 ;; Auto vars:     Size  Location     Type
  2730 ;;		None
  2731 ;; Return value:  Size  Location     Type
  2732 ;;                  1    wreg      void 
  2733 ;; Registers used:
  2734 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2735 ;; Tracked objects:
  2736 ;;		On entry : 0/0
  2737 ;;		On exit  : 0/0
  2738 ;;		Unchanged: 0/0
  2739 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2740 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2741 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2742 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2743 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2744 ;;Total ram usage:        6 bytes
  2745 ;; Hardware stack levels used: 1
  2746 ;; Hardware stack levels required when called: 7
  2747 ;; This function calls:
  2748 ;;		_delay_ms_func
  2749 ;;		_forward
  2750 ;;		_movement_return
  2751 ;;		_reverse
  2752 ;;		_stop
  2753 ;; This function is called by:
  2754 ;;		_buggy_color_response
  2755 ;; This function uses a non-reentrant model
  2756 ;;
  2757                           
  2758                           	psect	text15
  2759   00115E                     __ptext15:
  2760                           	callstack 0
  2761   00115E                     _return_home:
  2762                           	callstack 22
  2763   00115E                     
  2764                           ;color.c: 221:     while(timer_index > 0 && card_count > 0 ) {
  2765   00115E  EF59  F009         	goto	l2931
  2766   001162                     l2899:
  2767                           
  2768                           ;color.c: 223:         movement_return(mL,mR,card_memory[card_count-1]);
  2769   001162  C034  F02E         	movff	return_home@mL,movement_return@mL
  2770   001166  C035  F02F         	movff	return_home@mL+1,movement_return@mL+1
  2771   00116A  C036  F030         	movff	return_home@mR,movement_return@mR
  2772   00116E  C037  F031         	movff	return_home@mR+1,movement_return@mR+1
  2773   001172  0E87               	movlw	low (_card_memory+65535)
  2774   001174  2444               	addwf	_card_count^0,w,c
  2775   001176  6ED9               	movwf	fsr2l,c
  2776   001178  6ADA               	clrf	fsr2h,c
  2777   00117A  0E00               	movlw	high (_card_memory+65535)
  2778   00117C  22DA               	addwfc	fsr2h,f,c
  2779   00117E  50DF               	movf	indf2,w,c
  2780   001180  6E38               	movwf	??_return_home^0,c
  2781   001182  5038               	movf	??_return_home^0,w,c
  2782   001184  6E32               	movwf	movement_return@count^0,c
  2783   001186  6A33               	clrf	(movement_return@count+1)^0,c
  2784   001188  ECEF  F006         	call	_movement_return	;wreg free
  2785   00118C                     
  2786                           ;color.c: 224:         card_count--;
  2787   00118C  0644               	decf	_card_count^0,f,c
  2788   00118E                     
  2789                           ;color.c: 225:         _delay((unsigned long)((250)*(64000000/4000.0)));
  2790   00118E  0E15               	movlw	21
  2791   001190  6E39               	movwf	(??_return_home+1)^0,c
  2792   001192  0E4B               	movlw	75
  2793   001194  6E38               	movwf	??_return_home^0,c
  2794   001196  0EBE               	movlw	190
  2795   001198                     u2617:
  2796   001198  2EE8               	decfsz	wreg,f,c
  2797   00119A  D7FE               	bra	u2617
  2798   00119C  2E38               	decfsz	??_return_home^0,f,c
  2799   00119E  D7FC               	bra	u2617
  2800   0011A0  2E39               	decfsz	(??_return_home+1)^0,f,c
  2801   0011A2  D7FA               	bra	u2617
  2802   0011A4  D000               	nop2	
  2803   0011A6                     
  2804                           ;color.c: 226:         reverse(mL,mR);
  2805   0011A6  C034  F01C         	movff	return_home@mL,reverse@mL
  2806   0011AA  C035  F01D         	movff	return_home@mL+1,reverse@mL+1
  2807   0011AE  C036  F01E         	movff	return_home@mR,reverse@mR
  2808   0011B2  C037  F01F         	movff	return_home@mR+1,reverse@mR+1
  2809   0011B6  EC67  F00D         	call	_reverse	;wreg free
  2810   0011BA                     
  2811                           ;color.c: 227:         _delay((unsigned long)((500)*(64000000/4000.0)));
  2812   0011BA  0E29               	movlw	41
  2813   0011BC  6E39               	movwf	(??_return_home+1)^0,c
  2814   0011BE  0E96               	movlw	150
  2815   0011C0  6E38               	movwf	??_return_home^0,c
  2816   0011C2  0E7F               	movlw	127
  2817   0011C4                     u2627:
  2818   0011C4  2EE8               	decfsz	wreg,f,c
  2819   0011C6  D7FE               	bra	u2627
  2820   0011C8  2E38               	decfsz	??_return_home^0,f,c
  2821   0011CA  D7FC               	bra	u2627
  2822   0011CC  2E39               	decfsz	(??_return_home+1)^0,f,c
  2823   0011CE  D7FA               	bra	u2627
  2824   0011D0  F000               	nop	
  2825   0011D2                     
  2826                           ;color.c: 228:         stop(mL,mR);
  2827   0011D2  C034  F016         	movff	return_home@mL,stop@mL
  2828   0011D6  C035  F017         	movff	return_home@mL+1,stop@mL+1
  2829   0011DA  C036  F018         	movff	return_home@mR,stop@mR
  2830   0011DE  C037  F019         	movff	return_home@mR+1,stop@mR+1
  2831   0011E2  ECDC  F00D         	call	_stop	;wreg free
  2832   0011E6                     
  2833                           ;color.c: 229:         _delay((unsigned long)((500)*(64000000/4000.0)));
  2834   0011E6  0E29               	movlw	41
  2835   0011E8  6E39               	movwf	(??_return_home+1)^0,c
  2836   0011EA  0E96               	movlw	150
  2837   0011EC  6E38               	movwf	??_return_home^0,c
  2838   0011EE  0E7F               	movlw	127
  2839   0011F0                     u2637:
  2840   0011F0  2EE8               	decfsz	wreg,f,c
  2841   0011F2  D7FE               	bra	u2637
  2842   0011F4  2E38               	decfsz	??_return_home^0,f,c
  2843   0011F6  D7FC               	bra	u2637
  2844   0011F8  2E39               	decfsz	(??_return_home+1)^0,f,c
  2845   0011FA  D7FA               	bra	u2637
  2846   0011FC  F000               	nop	
  2847   0011FE                     
  2848                           ;color.c: 230:         forward(mL,mR);
  2849   0011FE  C034  F01C         	movff	return_home@mL,forward@mL
  2850   001202  C035  F01D         	movff	return_home@mL+1,forward@mL+1
  2851   001206  C036  F01E         	movff	return_home@mR,forward@mR
  2852   00120A  C037  F01F         	movff	return_home@mR+1,forward@mR+1
  2853   00120E  ECF2  F00C         	call	_forward	;wreg free
  2854   001212                     
  2855                           ;color.c: 231:         delay_ms_func(timer_memory[timer_index-1]);
  2856   001212  0E5F               	movlw	low (_timer_memory+65535)
  2857   001214  2443               	addwf	_timer_index^0,w,c
  2858   001216  6ED9               	movwf	fsr2l,c
  2859   001218  6ADA               	clrf	fsr2h,c
  2860   00121A  0E00               	movlw	high (_timer_memory+65535)
  2861   00121C  22DA               	addwfc	fsr2h,f,c
  2862   00121E  50DF               	movf	indf2,w,c
  2863   001220  6E38               	movwf	??_return_home^0,c
  2864   001222  5038               	movf	??_return_home^0,w,c
  2865   001224  6E03               	movwf	delay_ms_func@time^0,c
  2866   001226  6A04               	clrf	(delay_ms_func@time+1)^0,c
  2867   001228  ECBA  F010         	call	_delay_ms_func	;wreg free
  2868   00122C                     
  2869                           ;color.c: 232:         timer_index--;
  2870   00122C  0643               	decf	_timer_index^0,f,c
  2871   00122E                     
  2872                           ;color.c: 233:         stop(mL,mR);
  2873   00122E  C034  F016         	movff	return_home@mL,stop@mL
  2874   001232  C035  F017         	movff	return_home@mL+1,stop@mL+1
  2875   001236  C036  F018         	movff	return_home@mR,stop@mR
  2876   00123A  C037  F019         	movff	return_home@mR+1,stop@mR+1
  2877   00123E  ECDC  F00D         	call	_stop	;wreg free
  2878   001242                     
  2879                           ;color.c: 234:         _delay((unsigned long)((200)*(64000000/4000.0)));
  2880   001242  0E11               	movlw	17
  2881   001244  6E39               	movwf	(??_return_home+1)^0,c
  2882   001246  0E3C               	movlw	60
  2883   001248  6E38               	movwf	??_return_home^0,c
  2884   00124A  0ECB               	movlw	203
  2885   00124C                     u2647:
  2886   00124C  2EE8               	decfsz	wreg,f,c
  2887   00124E  D7FE               	bra	u2647
  2888   001250  2E38               	decfsz	??_return_home^0,f,c
  2889   001252  D7FC               	bra	u2647
  2890   001254  2E39               	decfsz	(??_return_home+1)^0,f,c
  2891   001256  D7FA               	bra	u2647
  2892   001258  F000               	nop	
  2893   00125A                     
  2894                           ;color.c: 235:          reverse(mL,mR);
  2895   00125A  C034  F01C         	movff	return_home@mL,reverse@mL
  2896   00125E  C035  F01D         	movff	return_home@mL+1,reverse@mL+1
  2897   001262  C036  F01E         	movff	return_home@mR,reverse@mR
  2898   001266  C037  F01F         	movff	return_home@mR+1,reverse@mR+1
  2899   00126A  EC67  F00D         	call	_reverse	;wreg free
  2900   00126E                     
  2901                           ;color.c: 236:         _delay((unsigned long)((100)*(64000000/4000.0)));
  2902   00126E  0E09               	movlw	9
  2903   001270  6E39               	movwf	(??_return_home+1)^0,c
  2904   001272  0E1E               	movlw	30
  2905   001274  6E38               	movwf	??_return_home^0,c
  2906   001276  0EE4               	movlw	228
  2907   001278                     u2657:
  2908   001278  2EE8               	decfsz	wreg,f,c
  2909   00127A  D7FE               	bra	u2657
  2910   00127C  2E38               	decfsz	??_return_home^0,f,c
  2911   00127E  D7FC               	bra	u2657
  2912   001280  2E39               	decfsz	(??_return_home+1)^0,f,c
  2913   001282  D7FA               	bra	u2657
  2914   001284  D000               	nop2	
  2915   001286                     
  2916                           ;color.c: 237:         stop(mL,mR);
  2917   001286  C034  F016         	movff	return_home@mL,stop@mL
  2918   00128A  C035  F017         	movff	return_home@mL+1,stop@mL+1
  2919   00128E  C036  F018         	movff	return_home@mR,stop@mR
  2920   001292  C037  F019         	movff	return_home@mR+1,stop@mR+1
  2921   001296  ECDC  F00D         	call	_stop	;wreg free
  2922   00129A                     
  2923                           ;color.c: 238:         _delay((unsigned long)((250)*(64000000/4000.0)));
  2924   00129A  0E15               	movlw	21
  2925   00129C  6E39               	movwf	(??_return_home+1)^0,c
  2926   00129E  0E4B               	movlw	75
  2927   0012A0  6E38               	movwf	??_return_home^0,c
  2928   0012A2  0EBE               	movlw	190
  2929   0012A4                     u2667:
  2930   0012A4  2EE8               	decfsz	wreg,f,c
  2931   0012A6  D7FE               	bra	u2667
  2932   0012A8  2E38               	decfsz	??_return_home^0,f,c
  2933   0012AA  D7FC               	bra	u2667
  2934   0012AC  2E39               	decfsz	(??_return_home+1)^0,f,c
  2935   0012AE  D7FA               	bra	u2667
  2936   0012B0  D000               	nop2	
  2937   0012B2                     l2931:
  2938                           
  2939                           ;color.c: 221:     while(timer_index > 0 && card_count > 0 ) {
  2940   0012B2  5043               	movf	_timer_index^0,w,c
  2941   0012B4  B4D8               	btfsc	status,2,c
  2942   0012B6  EF5F  F009         	goto	u2091
  2943   0012BA  EF61  F009         	goto	u2090
  2944   0012BE                     u2091:
  2945   0012BE  EF69  F009         	goto	l156
  2946   0012C2                     u2090:
  2947   0012C2  5044               	movf	_card_count^0,w,c
  2948   0012C4  A4D8               	btfss	status,2,c
  2949   0012C6  EF67  F009         	goto	u2101
  2950   0012CA  EF69  F009         	goto	u2100
  2951   0012CE                     u2101:
  2952   0012CE  EFB1  F008         	goto	l2899
  2953   0012D2                     u2100:
  2954   0012D2                     l156:
  2955   0012D2  0012               	return		;funcret
  2956   0012D4                     __end_of_return_home:
  2957                           	callstack 0
  2958                           
  2959 ;; *************** function _movement_return *****************
  2960 ;; Defined at:
  2961 ;;		line 284 in file "dc_motor.c"
  2962 ;; Parameters:    Size  Location     Type
  2963 ;;  mL              2   45[COMRAM] PTR struct DC_motor
  2964 ;;		 -> motorL(9), 
  2965 ;;  mR              2   47[COMRAM] PTR struct DC_motor
  2966 ;;		 -> motorR(9), 
  2967 ;;  count           2   49[COMRAM] int 
  2968 ;; Auto vars:     Size  Location     Type
  2969 ;;		None
  2970 ;; Return value:  Size  Location     Type
  2971 ;;                  1    wreg      void 
  2972 ;; Registers used:
  2973 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2974 ;; Tracked objects:
  2975 ;;		On entry : 0/0
  2976 ;;		On exit  : 0/0
  2977 ;;		Unchanged: 0/0
  2978 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2979 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2980 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2981 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2982 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2983 ;;Total ram usage:        6 bytes
  2984 ;; Hardware stack levels used: 1
  2985 ;; Hardware stack levels required when called: 6
  2986 ;; This function calls:
  2987 ;;		_left_45
  2988 ;;		_reverse_pink
  2989 ;;		_reverse_yellow
  2990 ;;		_right_45
  2991 ;;		_stop
  2992 ;; This function is called by:
  2993 ;;		_buggy_color_response
  2994 ;;		_return_home
  2995 ;; This function uses a non-reentrant model
  2996 ;;
  2997                           
  2998                           	psect	text16
  2999   000DDE                     __ptext16:
  3000                           	callstack 0
  3001   000DDE                     _movement_return:
  3002                           	callstack 22
  3003   000DDE                     
  3004                           ;dc_motor.c: 284: void movement_return(DC_motor *mL, DC_motor *mR, int count);dc_motor.c
      +                          : 285: {;dc_motor.c: 287:     if (count == 1){right_45(mL,mR,2,right_timer); stop(mL,mR)
      +                          ;}
  3005   000DDE  0432               	decf	movement_return@count^0,w,c
  3006   000DE0  1033               	iorwf	(movement_return@count+1)^0,w,c
  3007   000DE2  A4D8               	btfss	status,2,c
  3008   000DE4  EFF6  F006         	goto	u1611
  3009   000DE8  EFF8  F006         	goto	u1610
  3010   000DEC                     u1611:
  3011   000DEC  EF14  F007         	goto	l2621
  3012   000DF0                     u1610:
  3013   000DF0  C02E  F01C         	movff	movement_return@mL,right_45@mL
  3014   000DF4  C02F  F01D         	movff	movement_return@mL+1,right_45@mL+1
  3015   000DF8  C030  F01E         	movff	movement_return@mR,right_45@mR
  3016   000DFC  C031  F01F         	movff	movement_return@mR+1,right_45@mR+1
  3017   000E00  0E00               	movlw	0
  3018   000E02  6E21               	movwf	(right_45@count+1)^0,c
  3019   000E04  0E02               	movlw	2
  3020   000E06  6E20               	movwf	right_45@count^0,c
  3021   000E08  C059  F022         	movff	_right_timer,right_45@right_timer
  3022   000E0C  C05A  F023         	movff	_right_timer+1,right_45@right_timer+1
  3023   000E10  EC5B  F00B         	call	_right_45	;wreg free
  3024   000E14  C02E  F016         	movff	movement_return@mL,stop@mL
  3025   000E18  C02F  F017         	movff	movement_return@mL+1,stop@mL+1
  3026   000E1C  C030  F018         	movff	movement_return@mR,stop@mR
  3027   000E20  C031  F019         	movff	movement_return@mR+1,stop@mR+1
  3028   000E24  ECDC  F00D         	call	_stop	;wreg free
  3029   000E28                     l2621:
  3030                           
  3031                           ;dc_motor.c: 288:     if (count == 2){left_45(mL,mR,2,left_timer); stop(mL,mR);}
  3032   000E28  0E02               	movlw	2
  3033   000E2A  1832               	xorwf	movement_return@count^0,w,c
  3034   000E2C  1033               	iorwf	(movement_return@count+1)^0,w,c
  3035   000E2E  A4D8               	btfss	status,2,c
  3036   000E30  EF1C  F007         	goto	u1621
  3037   000E34  EF1E  F007         	goto	u1620
  3038   000E38                     u1621:
  3039   000E38  EF3A  F007         	goto	l2625
  3040   000E3C                     u1620:
  3041   000E3C  C02E  F01C         	movff	movement_return@mL,left_45@mL
  3042   000E40  C02F  F01D         	movff	movement_return@mL+1,left_45@mL+1
  3043   000E44  C030  F01E         	movff	movement_return@mR,left_45@mR
  3044   000E48  C031  F01F         	movff	movement_return@mR+1,left_45@mR+1
  3045   000E4C  0E00               	movlw	0
  3046   000E4E  6E21               	movwf	(left_45@count+1)^0,c
  3047   000E50  0E02               	movlw	2
  3048   000E52  6E20               	movwf	left_45@count^0,c
  3049   000E54  C05B  F022         	movff	_left_timer,left_45@left_timer
  3050   000E58  C05C  F023         	movff	_left_timer+1,left_45@left_timer+1
  3051   000E5C  EC20  F00A         	call	_left_45	;wreg free
  3052   000E60  C02E  F016         	movff	movement_return@mL,stop@mL
  3053   000E64  C02F  F017         	movff	movement_return@mL+1,stop@mL+1
  3054   000E68  C030  F018         	movff	movement_return@mR,stop@mR
  3055   000E6C  C031  F019         	movff	movement_return@mR+1,stop@mR+1
  3056   000E70  ECDC  F00D         	call	_stop	;wreg free
  3057   000E74                     l2625:
  3058                           
  3059                           ;dc_motor.c: 289:     if (count == 3){right_45(mL,mR,4,right_timer); stop(mL,mR);}
  3060   000E74  0E03               	movlw	3
  3061   000E76  1832               	xorwf	movement_return@count^0,w,c
  3062   000E78  1033               	iorwf	(movement_return@count+1)^0,w,c
  3063   000E7A  A4D8               	btfss	status,2,c
  3064   000E7C  EF42  F007         	goto	u1631
  3065   000E80  EF44  F007         	goto	u1630
  3066   000E84                     u1631:
  3067   000E84  EF60  F007         	goto	l2629
  3068   000E88                     u1630:
  3069   000E88  C02E  F01C         	movff	movement_return@mL,right_45@mL
  3070   000E8C  C02F  F01D         	movff	movement_return@mL+1,right_45@mL+1
  3071   000E90  C030  F01E         	movff	movement_return@mR,right_45@mR
  3072   000E94  C031  F01F         	movff	movement_return@mR+1,right_45@mR+1
  3073   000E98  0E00               	movlw	0
  3074   000E9A  6E21               	movwf	(right_45@count+1)^0,c
  3075   000E9C  0E04               	movlw	4
  3076   000E9E  6E20               	movwf	right_45@count^0,c
  3077   000EA0  C059  F022         	movff	_right_timer,right_45@right_timer
  3078   000EA4  C05A  F023         	movff	_right_timer+1,right_45@right_timer+1
  3079   000EA8  EC5B  F00B         	call	_right_45	;wreg free
  3080   000EAC  C02E  F016         	movff	movement_return@mL,stop@mL
  3081   000EB0  C02F  F017         	movff	movement_return@mL+1,stop@mL+1
  3082   000EB4  C030  F018         	movff	movement_return@mR,stop@mR
  3083   000EB8  C031  F019         	movff	movement_return@mR+1,stop@mR+1
  3084   000EBC  ECDC  F00D         	call	_stop	;wreg free
  3085   000EC0                     l2629:
  3086                           
  3087                           ;dc_motor.c: 290:     if (count == 6){right_45(mL,mR,3,right_timer); stop(mL,mR);}
  3088   000EC0  0E06               	movlw	6
  3089   000EC2  1832               	xorwf	movement_return@count^0,w,c
  3090   000EC4  1033               	iorwf	(movement_return@count+1)^0,w,c
  3091   000EC6  A4D8               	btfss	status,2,c
  3092   000EC8  EF68  F007         	goto	u1641
  3093   000ECC  EF6A  F007         	goto	u1640
  3094   000ED0                     u1641:
  3095   000ED0  EF86  F007         	goto	l2633
  3096   000ED4                     u1640:
  3097   000ED4  C02E  F01C         	movff	movement_return@mL,right_45@mL
  3098   000ED8  C02F  F01D         	movff	movement_return@mL+1,right_45@mL+1
  3099   000EDC  C030  F01E         	movff	movement_return@mR,right_45@mR
  3100   000EE0  C031  F01F         	movff	movement_return@mR+1,right_45@mR+1
  3101   000EE4  0E00               	movlw	0
  3102   000EE6  6E21               	movwf	(right_45@count+1)^0,c
  3103   000EE8  0E03               	movlw	3
  3104   000EEA  6E20               	movwf	right_45@count^0,c
  3105   000EEC  C059  F022         	movff	_right_timer,right_45@right_timer
  3106   000EF0  C05A  F023         	movff	_right_timer+1,right_45@right_timer+1
  3107   000EF4  EC5B  F00B         	call	_right_45	;wreg free
  3108   000EF8  C02E  F016         	movff	movement_return@mL,stop@mL
  3109   000EFC  C02F  F017         	movff	movement_return@mL+1,stop@mL+1
  3110   000F00  C030  F018         	movff	movement_return@mR,stop@mR
  3111   000F04  C031  F019         	movff	movement_return@mR+1,stop@mR+1
  3112   000F08  ECDC  F00D         	call	_stop	;wreg free
  3113   000F0C                     l2633:
  3114                           
  3115                           ;dc_motor.c: 291:     if (count == 7){left_45(mL,mR,3,right_timer); stop(mL,mR);}
  3116   000F0C  0E07               	movlw	7
  3117   000F0E  1832               	xorwf	movement_return@count^0,w,c
  3118   000F10  1033               	iorwf	(movement_return@count+1)^0,w,c
  3119   000F12  A4D8               	btfss	status,2,c
  3120   000F14  EF8E  F007         	goto	u1651
  3121   000F18  EF90  F007         	goto	u1650
  3122   000F1C                     u1651:
  3123   000F1C  EFAC  F007         	goto	l2637
  3124   000F20                     u1650:
  3125   000F20  C02E  F01C         	movff	movement_return@mL,left_45@mL
  3126   000F24  C02F  F01D         	movff	movement_return@mL+1,left_45@mL+1
  3127   000F28  C030  F01E         	movff	movement_return@mR,left_45@mR
  3128   000F2C  C031  F01F         	movff	movement_return@mR+1,left_45@mR+1
  3129   000F30  0E00               	movlw	0
  3130   000F32  6E21               	movwf	(left_45@count+1)^0,c
  3131   000F34  0E03               	movlw	3
  3132   000F36  6E20               	movwf	left_45@count^0,c
  3133   000F38  C059  F022         	movff	_right_timer,left_45@left_timer
  3134   000F3C  C05A  F023         	movff	_right_timer+1,left_45@left_timer+1
  3135   000F40  EC20  F00A         	call	_left_45	;wreg free
  3136   000F44  C02E  F016         	movff	movement_return@mL,stop@mL
  3137   000F48  C02F  F017         	movff	movement_return@mL+1,stop@mL+1
  3138   000F4C  C030  F018         	movff	movement_return@mR,stop@mR
  3139   000F50  C031  F019         	movff	movement_return@mR+1,stop@mR+1
  3140   000F54  ECDC  F00D         	call	_stop	;wreg free
  3141   000F58                     l2637:
  3142                           
  3143                           ;dc_motor.c: 293:     if (count == 9){reverse_yellow(mL,mR);}
  3144   000F58  0E09               	movlw	9
  3145   000F5A  1832               	xorwf	movement_return@count^0,w,c
  3146   000F5C  1033               	iorwf	(movement_return@count+1)^0,w,c
  3147   000F5E  A4D8               	btfss	status,2,c
  3148   000F60  EFB4  F007         	goto	u1661
  3149   000F64  EFB6  F007         	goto	u1660
  3150   000F68                     u1661:
  3151   000F68  EFC0  F007         	goto	l2641
  3152   000F6C                     u1660:
  3153   000F6C  C02E  F028         	movff	movement_return@mL,reverse_yellow@mL
  3154   000F70  C02F  F029         	movff	movement_return@mL+1,reverse_yellow@mL+1
  3155   000F74  C030  F02A         	movff	movement_return@mR,reverse_yellow@mR
  3156   000F78  C031  F02B         	movff	movement_return@mR+1,reverse_yellow@mR+1
  3157   000F7C  EC34  F00E         	call	_reverse_yellow	;wreg free
  3158   000F80                     l2641:
  3159                           
  3160                           ;dc_motor.c: 294:     if (count == 10) {reverse_pink(mL,mR);}
  3161   000F80  0E0A               	movlw	10
  3162   000F82  1832               	xorwf	movement_return@count^0,w,c
  3163   000F84  1033               	iorwf	(movement_return@count+1)^0,w,c
  3164   000F86  A4D8               	btfss	status,2,c
  3165   000F88  EFC8  F007         	goto	u1671
  3166   000F8C  EFCA  F007         	goto	u1670
  3167   000F90                     u1671:
  3168   000F90  EFD4  F007         	goto	l373
  3169   000F94                     u1670:
  3170   000F94  C02E  F028         	movff	movement_return@mL,reverse_pink@mL
  3171   000F98  C02F  F029         	movff	movement_return@mL+1,reverse_pink@mL+1
  3172   000F9C  C030  F02A         	movff	movement_return@mR,reverse_pink@mR
  3173   000FA0  C031  F02B         	movff	movement_return@mR+1,reverse_pink@mR+1
  3174   000FA4  EC7D  F00E         	call	_reverse_pink	;wreg free
  3175   000FA8                     l373:
  3176   000FA8  0012               	return		;funcret
  3177   000FAA                     __end_of_movement_return:
  3178                           	callstack 0
  3179                           
  3180 ;; *************** function _reverse_yellow *****************
  3181 ;; Defined at:
  3182 ;;		line 255 in file "dc_motor.c"
  3183 ;; Parameters:    Size  Location     Type
  3184 ;;  mL              2   39[COMRAM] PTR struct DC_motor
  3185 ;;		 -> motorL(9), 
  3186 ;;  mR              2   41[COMRAM] PTR struct DC_motor
  3187 ;;		 -> motorR(9), 
  3188 ;; Auto vars:     Size  Location     Type
  3189 ;;		None
  3190 ;; Return value:  Size  Location     Type
  3191 ;;                  1    wreg      void 
  3192 ;; Registers used:
  3193 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3194 ;; Tracked objects:
  3195 ;;		On entry : 0/0
  3196 ;;		On exit  : 0/0
  3197 ;;		Unchanged: 0/0
  3198 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3199 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3200 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3201 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3202 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3203 ;;Total ram usage:        6 bytes
  3204 ;; Hardware stack levels used: 1
  3205 ;; Hardware stack levels required when called: 5
  3206 ;; This function calls:
  3207 ;;		_left_45
  3208 ;;		_reverse
  3209 ;;		_stop
  3210 ;; This function is called by:
  3211 ;;		_movement_return
  3212 ;; This function uses a non-reentrant model
  3213 ;;
  3214                           
  3215                           	psect	text17
  3216   001C68                     __ptext17:
  3217                           	callstack 0
  3218   001C68                     _reverse_yellow:
  3219                           	callstack 22
  3220   001C68                     
  3221                           ;dc_motor.c: 257:     left_45(mL,mR,2,left_timer);
  3222   001C68  C028  F01C         	movff	reverse_yellow@mL,left_45@mL
  3223   001C6C  C029  F01D         	movff	reverse_yellow@mL+1,left_45@mL+1
  3224   001C70  C02A  F01E         	movff	reverse_yellow@mR,left_45@mR
  3225   001C74  C02B  F01F         	movff	reverse_yellow@mR+1,left_45@mR+1
  3226   001C78  0E00               	movlw	0
  3227   001C7A  6E21               	movwf	(left_45@count+1)^0,c
  3228   001C7C  0E02               	movlw	2
  3229   001C7E  6E20               	movwf	left_45@count^0,c
  3230   001C80  C05B  F022         	movff	_left_timer,left_45@left_timer
  3231   001C84  C05C  F023         	movff	_left_timer+1,left_45@left_timer+1
  3232   001C88  EC20  F00A         	call	_left_45	;wreg free
  3233                           
  3234                           ;dc_motor.c: 258:     stop(mL,mR);
  3235   001C8C  C028  F016         	movff	reverse_yellow@mL,stop@mL
  3236   001C90  C029  F017         	movff	reverse_yellow@mL+1,stop@mL+1
  3237   001C94  C02A  F018         	movff	reverse_yellow@mR,stop@mR
  3238   001C98  C02B  F019         	movff	reverse_yellow@mR+1,stop@mR+1
  3239   001C9C  ECDC  F00D         	call	_stop	;wreg free
  3240   001CA0                     
  3241                           ;dc_motor.c: 259:     _delay((unsigned long)((200)*(64000000/4000.0)));
  3242   001CA0  0E11               	movlw	17
  3243   001CA2  6E2D               	movwf	(??_reverse_yellow+1)^0,c
  3244   001CA4  0E3C               	movlw	60
  3245   001CA6  6E2C               	movwf	??_reverse_yellow^0,c
  3246   001CA8  0ECB               	movlw	203
  3247   001CAA                     u2677:
  3248   001CAA  2EE8               	decfsz	wreg,f,c
  3249   001CAC  D7FE               	bra	u2677
  3250   001CAE  2E2C               	decfsz	??_reverse_yellow^0,f,c
  3251   001CB0  D7FC               	bra	u2677
  3252   001CB2  2E2D               	decfsz	(??_reverse_yellow+1)^0,f,c
  3253   001CB4  D7FA               	bra	u2677
  3254   001CB6  F000               	nop	
  3255   001CB8                     
  3256                           ;dc_motor.c: 261:      reverse(mL,mR);
  3257   001CB8  C028  F01C         	movff	reverse_yellow@mL,reverse@mL
  3258   001CBC  C029  F01D         	movff	reverse_yellow@mL+1,reverse@mL+1
  3259   001CC0  C02A  F01E         	movff	reverse_yellow@mR,reverse@mR
  3260   001CC4  C02B  F01F         	movff	reverse_yellow@mR+1,reverse@mR+1
  3261   001CC8  EC67  F00D         	call	_reverse	;wreg free
  3262                           
  3263                           ;dc_motor.c: 262:     _delay((unsigned long)((900)*(64000000/4000.0)));
  3264   001CCC  0E4A               	movlw	74
  3265   001CCE  6E2D               	movwf	(??_reverse_yellow+1)^0,c
  3266   001CD0  0E0E               	movlw	14
  3267   001CD2  6E2C               	movwf	??_reverse_yellow^0,c
  3268   001CD4  0E19               	movlw	25
  3269   001CD6                     u2687:
  3270   001CD6  2EE8               	decfsz	wreg,f,c
  3271   001CD8  D7FE               	bra	u2687
  3272   001CDA  2E2C               	decfsz	??_reverse_yellow^0,f,c
  3273   001CDC  D7FC               	bra	u2687
  3274   001CDE  2E2D               	decfsz	(??_reverse_yellow+1)^0,f,c
  3275   001CE0  D7FA               	bra	u2687
  3276   001CE2  F000               	nop	
  3277   001CE4                     
  3278                           ;dc_motor.c: 263:     stop(mL,mR);
  3279   001CE4  C028  F016         	movff	reverse_yellow@mL,stop@mL
  3280   001CE8  C029  F017         	movff	reverse_yellow@mL+1,stop@mL+1
  3281   001CEC  C02A  F018         	movff	reverse_yellow@mR,stop@mR
  3282   001CF0  C02B  F019         	movff	reverse_yellow@mR+1,stop@mR+1
  3283   001CF4  ECDC  F00D         	call	_stop	;wreg free
  3284   001CF8  0012               	return		;funcret
  3285   001CFA                     __end_of_reverse_yellow:
  3286                           	callstack 0
  3287                           
  3288 ;; *************** function _reverse_pink *****************
  3289 ;; Defined at:
  3290 ;;		line 244 in file "dc_motor.c"
  3291 ;; Parameters:    Size  Location     Type
  3292 ;;  mL              2   39[COMRAM] PTR struct DC_motor
  3293 ;;		 -> motorL(9), 
  3294 ;;  mR              2   41[COMRAM] PTR struct DC_motor
  3295 ;;		 -> motorR(9), 
  3296 ;; Auto vars:     Size  Location     Type
  3297 ;;		None
  3298 ;; Return value:  Size  Location     Type
  3299 ;;                  1    wreg      void 
  3300 ;; Registers used:
  3301 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3302 ;; Tracked objects:
  3303 ;;		On entry : 0/0
  3304 ;;		On exit  : 0/0
  3305 ;;		Unchanged: 0/0
  3306 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3307 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3308 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3309 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3310 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3311 ;;Total ram usage:        6 bytes
  3312 ;; Hardware stack levels used: 1
  3313 ;; Hardware stack levels required when called: 5
  3314 ;; This function calls:
  3315 ;;		_reverse
  3316 ;;		_right_45
  3317 ;;		_stop
  3318 ;; This function is called by:
  3319 ;;		_movement_return
  3320 ;; This function uses a non-reentrant model
  3321 ;;
  3322                           
  3323                           	psect	text18
  3324   001CFA                     __ptext18:
  3325                           	callstack 0
  3326   001CFA                     _reverse_pink:
  3327                           	callstack 22
  3328   001CFA                     
  3329                           ;dc_motor.c: 246:     right_45(mL,mR,2,right_timer);
  3330   001CFA  C028  F01C         	movff	reverse_pink@mL,right_45@mL
  3331   001CFE  C029  F01D         	movff	reverse_pink@mL+1,right_45@mL+1
  3332   001D02  C02A  F01E         	movff	reverse_pink@mR,right_45@mR
  3333   001D06  C02B  F01F         	movff	reverse_pink@mR+1,right_45@mR+1
  3334   001D0A  0E00               	movlw	0
  3335   001D0C  6E21               	movwf	(right_45@count+1)^0,c
  3336   001D0E  0E02               	movlw	2
  3337   001D10  6E20               	movwf	right_45@count^0,c
  3338   001D12  C059  F022         	movff	_right_timer,right_45@right_timer
  3339   001D16  C05A  F023         	movff	_right_timer+1,right_45@right_timer+1
  3340   001D1A  EC5B  F00B         	call	_right_45	;wreg free
  3341                           
  3342                           ;dc_motor.c: 247:     stop(mL,mR);
  3343   001D1E  C028  F016         	movff	reverse_pink@mL,stop@mL
  3344   001D22  C029  F017         	movff	reverse_pink@mL+1,stop@mL+1
  3345   001D26  C02A  F018         	movff	reverse_pink@mR,stop@mR
  3346   001D2A  C02B  F019         	movff	reverse_pink@mR+1,stop@mR+1
  3347   001D2E  ECDC  F00D         	call	_stop	;wreg free
  3348   001D32                     
  3349                           ;dc_motor.c: 248:     _delay((unsigned long)((200)*(64000000/4000.0)));
  3350   001D32  0E11               	movlw	17
  3351   001D34  6E2D               	movwf	(??_reverse_pink+1)^0,c
  3352   001D36  0E3C               	movlw	60
  3353   001D38  6E2C               	movwf	??_reverse_pink^0,c
  3354   001D3A  0ECB               	movlw	203
  3355   001D3C                     u2697:
  3356   001D3C  2EE8               	decfsz	wreg,f,c
  3357   001D3E  D7FE               	bra	u2697
  3358   001D40  2E2C               	decfsz	??_reverse_pink^0,f,c
  3359   001D42  D7FC               	bra	u2697
  3360   001D44  2E2D               	decfsz	(??_reverse_pink+1)^0,f,c
  3361   001D46  D7FA               	bra	u2697
  3362   001D48  F000               	nop	
  3363   001D4A                     
  3364                           ;dc_motor.c: 250:      reverse(mL,mR);
  3365   001D4A  C028  F01C         	movff	reverse_pink@mL,reverse@mL
  3366   001D4E  C029  F01D         	movff	reverse_pink@mL+1,reverse@mL+1
  3367   001D52  C02A  F01E         	movff	reverse_pink@mR,reverse@mR
  3368   001D56  C02B  F01F         	movff	reverse_pink@mR+1,reverse@mR+1
  3369   001D5A  EC67  F00D         	call	_reverse	;wreg free
  3370                           
  3371                           ;dc_motor.c: 251:     _delay((unsigned long)((900)*(64000000/4000.0)));
  3372   001D5E  0E4A               	movlw	74
  3373   001D60  6E2D               	movwf	(??_reverse_pink+1)^0,c
  3374   001D62  0E0E               	movlw	14
  3375   001D64  6E2C               	movwf	??_reverse_pink^0,c
  3376   001D66  0E19               	movlw	25
  3377   001D68                     u2707:
  3378   001D68  2EE8               	decfsz	wreg,f,c
  3379   001D6A  D7FE               	bra	u2707
  3380   001D6C  2E2C               	decfsz	??_reverse_pink^0,f,c
  3381   001D6E  D7FC               	bra	u2707
  3382   001D70  2E2D               	decfsz	(??_reverse_pink+1)^0,f,c
  3383   001D72  D7FA               	bra	u2707
  3384   001D74  F000               	nop	
  3385   001D76                     
  3386                           ;dc_motor.c: 252:     stop(mL,mR);
  3387   001D76  C028  F016         	movff	reverse_pink@mL,stop@mL
  3388   001D7A  C029  F017         	movff	reverse_pink@mL+1,stop@mL+1
  3389   001D7E  C02A  F018         	movff	reverse_pink@mR,stop@mR
  3390   001D82  C02B  F019         	movff	reverse_pink@mR+1,stop@mR+1
  3391   001D86  ECDC  F00D         	call	_stop	;wreg free
  3392   001D8A  0012               	return		;funcret
  3393   001D8C                     __end_of_reverse_pink:
  3394                           	callstack 0
  3395                           
  3396 ;; *************** function _forward *****************
  3397 ;; Defined at:
  3398 ;;		line 119 in file "dc_motor.c"
  3399 ;; Parameters:    Size  Location     Type
  3400 ;;  mL              2   27[COMRAM] PTR struct DC_motor
  3401 ;;		 -> motorL(9), 
  3402 ;;  mR              2   29[COMRAM] PTR struct DC_motor
  3403 ;;		 -> motorR(9), 
  3404 ;; Auto vars:     Size  Location     Type
  3405 ;;		None
  3406 ;; Return value:  Size  Location     Type
  3407 ;;                  1    wreg      void 
  3408 ;; Registers used:
  3409 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3410 ;; Tracked objects:
  3411 ;;		On entry : 0/0
  3412 ;;		On exit  : 0/0
  3413 ;;		Unchanged: 0/0
  3414 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3415 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3416 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3417 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3418 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3419 ;;Total ram usage:        5 bytes
  3420 ;; Hardware stack levels used: 1
  3421 ;; Hardware stack levels required when called: 4
  3422 ;; This function calls:
  3423 ;;		_setMotorPWM
  3424 ;;		_stop
  3425 ;; This function is called by:
  3426 ;;		_buggy_color_response
  3427 ;;		_return_home
  3428 ;; This function uses a non-reentrant model
  3429 ;;
  3430                           
  3431                           	psect	text19
  3432   0019E4                     __ptext19:
  3433                           	callstack 0
  3434   0019E4                     _forward:
  3435                           	callstack 24
  3436   0019E4                     
  3437                           ;dc_motor.c: 119: void forward(DC_motor *mL, DC_motor *mR);dc_motor.c: 120: {;dc_motor.c
      +                          : 121:     stop(mL,mR);
  3438   0019E4  C01C  F016         	movff	forward@mL,stop@mL
  3439   0019E8  C01D  F017         	movff	forward@mL+1,stop@mL+1
  3440   0019EC  C01E  F018         	movff	forward@mR,stop@mR
  3441   0019F0  C01F  F019         	movff	forward@mR+1,stop@mR+1
  3442   0019F4  ECDC  F00D         	call	_stop	;wreg free
  3443   0019F8                     
  3444                           ;dc_motor.c: 122:     mL-> direction = 1;
  3445   0019F8  EE20 F001          	lfsr	2,1
  3446   0019FC  501C               	movf	forward@mL^0,w,c
  3447   0019FE  26D9               	addwf	fsr2l,f,c
  3448   001A00  501D               	movf	(forward@mL+1)^0,w,c
  3449   001A02  22DA               	addwfc	fsr2h,f,c
  3450   001A04  0E01               	movlw	1
  3451   001A06  6EDF               	movwf	indf2,c
  3452   001A08                     
  3453                           ;dc_motor.c: 123:     mR-> direction = 1;
  3454   001A08  EE20 F001          	lfsr	2,1
  3455   001A0C  501E               	movf	forward@mR^0,w,c
  3456   001A0E  26D9               	addwf	fsr2l,f,c
  3457   001A10  501F               	movf	(forward@mR+1)^0,w,c
  3458   001A12  22DA               	addwfc	fsr2h,f,c
  3459   001A14  0E01               	movlw	1
  3460   001A16  6EDF               	movwf	indf2,c
  3461   001A18                     
  3462                           ;dc_motor.c: 124:     LATDbits.LATD3 = 1;
  3463   001A18  867C               	bsf	124,3,c	;volatile
  3464                           
  3465                           ;dc_motor.c: 125:     setMotorPWM(mR);
  3466   001A1A  C01E  F010         	movff	forward@mR,setMotorPWM@m
  3467   001A1E  C01F  F011         	movff	forward@mR+1,setMotorPWM@m+1
  3468   001A22  EC6A  F009         	call	_setMotorPWM	;wreg free
  3469                           
  3470                           ;dc_motor.c: 126:     setMotorPWM(mL);
  3471   001A26  C01C  F010         	movff	forward@mL,setMotorPWM@m
  3472   001A2A  C01D  F011         	movff	forward@mL+1,setMotorPWM@m+1
  3473   001A2E  EC6A  F009         	call	_setMotorPWM	;wreg free
  3474                           
  3475                           ;dc_motor.c: 127:     while ((mL->power <= 50) || (mR->power <= 55)){
  3476   001A32  EF4D  F00D         	goto	l299
  3477   001A36                     l2573:
  3478                           
  3479                           ;dc_motor.c: 128:         if (mL->power <= 50){mL->power += 1;}
  3480   001A36  C01C  FFD9         	movff	forward@mL,fsr2l
  3481   001A3A  C01D  FFDA         	movff	forward@mL+1,fsr2h
  3482   001A3E  0E33               	movlw	51
  3483   001A40  60DF               	cpfslt	indf2,c
  3484   001A42  EF25  F00D         	goto	u1551
  3485   001A46  EF27  F00D         	goto	u1550
  3486   001A4A                     u1551:
  3487   001A4A  EF2C  F00D         	goto	l2577
  3488   001A4E                     u1550:
  3489   001A4E  C01C  FFD9         	movff	forward@mL,fsr2l
  3490   001A52  C01D  FFDA         	movff	forward@mL+1,fsr2h
  3491   001A56  2ADF               	incf	indf2,f,c
  3492   001A58                     l2577:
  3493                           
  3494                           ;dc_motor.c: 129:         if (mR->power <= 55){mR->power += 1;}
  3495   001A58  C01E  FFD9         	movff	forward@mR,fsr2l
  3496   001A5C  C01F  FFDA         	movff	forward@mR+1,fsr2h
  3497   001A60  0E38               	movlw	56
  3498   001A62  60DF               	cpfslt	indf2,c
  3499   001A64  EF36  F00D         	goto	u1561
  3500   001A68  EF38  F00D         	goto	u1560
  3501   001A6C                     u1561:
  3502   001A6C  EF3D  F00D         	goto	l2581
  3503   001A70                     u1560:
  3504   001A70  C01E  FFD9         	movff	forward@mR,fsr2l
  3505   001A74  C01F  FFDA         	movff	forward@mR+1,fsr2h
  3506   001A78  2ADF               	incf	indf2,f,c
  3507   001A7A                     l2581:
  3508                           
  3509                           ;dc_motor.c: 130:         setMotorPWM(mL);
  3510   001A7A  C01C  F010         	movff	forward@mL,setMotorPWM@m
  3511   001A7E  C01D  F011         	movff	forward@mL+1,setMotorPWM@m+1
  3512   001A82  EC6A  F009         	call	_setMotorPWM	;wreg free
  3513   001A86                     
  3514                           ;dc_motor.c: 131:         setMotorPWM(mR);
  3515   001A86  C01E  F010         	movff	forward@mR,setMotorPWM@m
  3516   001A8A  C01F  F011         	movff	forward@mR+1,setMotorPWM@m+1
  3517   001A8E  EC6A  F009         	call	_setMotorPWM	;wreg free
  3518   001A92                     
  3519                           ;dc_motor.c: 132:         _delay((unsigned long)((5)*(64000000/4000000.0)));
  3520   001A92  0E1A               	movlw	26
  3521   001A94                     u2717:
  3522   001A94  2EE8               	decfsz	wreg,f,c
  3523   001A96  D7FE               	bra	u2717
  3524   001A98  D000               	nop2	
  3525   001A9A                     l299:
  3526                           
  3527                           ;dc_motor.c: 127:     while ((mL->power <= 50) || (mR->power <= 55)){
  3528   001A9A  C01C  FFD9         	movff	forward@mL,fsr2l
  3529   001A9E  C01D  FFDA         	movff	forward@mL+1,fsr2h
  3530   001AA2  0E32               	movlw	50
  3531   001AA4  64DF               	cpfsgt	indf2,c
  3532   001AA6  EF57  F00D         	goto	u1571
  3533   001AAA  EF59  F00D         	goto	u1570
  3534   001AAE                     u1571:
  3535   001AAE  EF1B  F00D         	goto	l2573
  3536   001AB2                     u1570:
  3537   001AB2  C01E  FFD9         	movff	forward@mR,fsr2l
  3538   001AB6  C01F  FFDA         	movff	forward@mR+1,fsr2h
  3539   001ABA  0E37               	movlw	55
  3540   001ABC  64DF               	cpfsgt	indf2,c
  3541   001ABE  EF63  F00D         	goto	u1581
  3542   001AC2  EF65  F00D         	goto	u1580
  3543   001AC6                     u1581:
  3544   001AC6  EF1B  F00D         	goto	l2573
  3545   001ACA                     u1580:
  3546   001ACA                     
  3547                           ;dc_motor.c: 134:     LATDbits.LATD3 = 0;
  3548   001ACA  967C               	bcf	124,3,c	;volatile
  3549   001ACC  0012               	return		;funcret
  3550   001ACE                     __end_of_forward:
  3551                           	callstack 0
  3552                           
  3553 ;; *************** function _delay_ms_func *****************
  3554 ;; Defined at:
  3555 ;;		line 243 in file "color.c"
  3556 ;; Parameters:    Size  Location     Type
  3557 ;;  time            2    2[COMRAM] unsigned int 
  3558 ;; Auto vars:     Size  Location     Type
  3559 ;;  i               2    6[COMRAM] unsigned int 
  3560 ;; Return value:  Size  Location     Type
  3561 ;;                  1    wreg      void 
  3562 ;; Registers used:
  3563 ;;		wreg, status,2, status,0
  3564 ;; Tracked objects:
  3565 ;;		On entry : 0/0
  3566 ;;		On exit  : 0/0
  3567 ;;		Unchanged: 0/0
  3568 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3569 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3570 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3571 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3572 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3573 ;;Total ram usage:        6 bytes
  3574 ;; Hardware stack levels used: 1
  3575 ;; Hardware stack levels required when called: 1
  3576 ;; This function calls:
  3577 ;;		Nothing
  3578 ;; This function is called by:
  3579 ;;		_return_home
  3580 ;; This function uses a non-reentrant model
  3581 ;;
  3582                           
  3583                           	psect	text20
  3584   002174                     __ptext20:
  3585                           	callstack 0
  3586   002174                     _delay_ms_func:
  3587                           	callstack 27
  3588   002174                     
  3589                           ;color.c: 244:     unsigned int i;;color.c: 245:     for (i=0; i < time; i++) {_delay((u
      +                          nsigned long)((131)*(64000000/4000.0)));}
  3590   002174  0E00               	movlw	0
  3591   002176  6E08               	movwf	(delay_ms_func@i+1)^0,c
  3592   002178  0E00               	movlw	0
  3593   00217A  6E07               	movwf	delay_ms_func@i^0,c
  3594   00217C  EFCE  F010         	goto	l159
  3595   002180                     l2647:
  3596   002180  0E0B               	movlw	11
  3597   002182  6E06               	movwf	(??_delay_ms_func+1)^0,c
  3598   002184  0EA3               	movlw	163
  3599   002186  6E05               	movwf	??_delay_ms_func^0,c
  3600   002188  0E0A               	movlw	10
  3601   00218A                     u2727:
  3602   00218A  2EE8               	decfsz	wreg,f,c
  3603   00218C  D7FE               	bra	u2727
  3604   00218E  2E05               	decfsz	??_delay_ms_func^0,f,c
  3605   002190  D7FC               	bra	u2727
  3606   002192  2E06               	decfsz	(??_delay_ms_func+1)^0,f,c
  3607   002194  D7FA               	bra	u2727
  3608   002196  D000               	nop2	
  3609   002198  4A07               	infsnz	delay_ms_func@i^0,f,c
  3610   00219A  2A08               	incf	(delay_ms_func@i+1)^0,f,c
  3611   00219C                     l159:
  3612   00219C  5003               	movf	delay_ms_func@time^0,w,c
  3613   00219E  5C07               	subwf	delay_ms_func@i^0,w,c
  3614   0021A0  5004               	movf	(delay_ms_func@time+1)^0,w,c
  3615   0021A2  5808               	subwfb	(delay_ms_func@i+1)^0,w,c
  3616   0021A4  A0D8               	btfss	status,0,c
  3617   0021A6  EFD7  F010         	goto	u1681
  3618   0021AA  EFD9  F010         	goto	u1680
  3619   0021AE                     u1681:
  3620   0021AE  EFC0  F010         	goto	l2647
  3621   0021B2                     u1680:
  3622   0021B2  0012               	return		;funcret
  3623   0021B4                     __end_of_delay_ms_func:
  3624                           	callstack 0
  3625                           
  3626 ;; *************** function _movement *****************
  3627 ;; Defined at:
  3628 ;;		line 267 in file "dc_motor.c"
  3629 ;; Parameters:    Size  Location     Type
  3630 ;;  mL              2   39[COMRAM] PTR struct DC_motor
  3631 ;;		 -> motorL(9), 
  3632 ;;  mR              2   41[COMRAM] PTR struct DC_motor
  3633 ;;		 -> motorR(9), 
  3634 ;;  count           2   43[COMRAM] int 
  3635 ;; Auto vars:     Size  Location     Type
  3636 ;;		None
  3637 ;; Return value:  Size  Location     Type
  3638 ;;                  1    wreg      void 
  3639 ;; Registers used:
  3640 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3641 ;; Tracked objects:
  3642 ;;		On entry : 0/0
  3643 ;;		On exit  : 0/0
  3644 ;;		Unchanged: 0/0
  3645 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3646 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3647 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3648 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3649 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3650 ;;Total ram usage:        8 bytes
  3651 ;; Hardware stack levels used: 1
  3652 ;; Hardware stack levels required when called: 5
  3653 ;; This function calls:
  3654 ;;		_left_45
  3655 ;;		_reverse
  3656 ;;		_right_45
  3657 ;;		_space
  3658 ;;		_stop
  3659 ;; This function is called by:
  3660 ;;		_buggy_color_response
  3661 ;; This function uses a non-reentrant model
  3662 ;;
  3663                           
  3664                           	psect	text21
  3665   000AC2                     __ptext21:
  3666                           	callstack 0
  3667   000AC2                     _movement:
  3668                           	callstack 24
  3669   000AC2                     
  3670                           ;dc_motor.c: 267: void movement(DC_motor *mL, DC_motor *mR, int count);dc_motor.c: 268: 
      +                          {;dc_motor.c: 269:     space(mL,mR);
  3671   000AC2  C028  F01C         	movff	movement@mL,space@mL
  3672   000AC6  C029  F01D         	movff	movement@mL+1,space@mL+1
  3673   000ACA  C02A  F01E         	movff	movement@mR,space@mR
  3674   000ACE  C02B  F01F         	movff	movement@mR+1,space@mR+1
  3675   000AD2  EC71  F00C         	call	_space	;wreg free
  3676   000AD6                     
  3677                           ;dc_motor.c: 270:     _delay((unsigned long)((500)*(64000000/4000.0)));
  3678   000AD6  0E29               	movlw	41
  3679   000AD8  6E2F               	movwf	(??_movement+1)^0,c
  3680   000ADA  0E96               	movlw	150
  3681   000ADC  6E2E               	movwf	??_movement^0,c
  3682   000ADE  0E7F               	movlw	127
  3683   000AE0                     u2737:
  3684   000AE0  2EE8               	decfsz	wreg,f,c
  3685   000AE2  D7FE               	bra	u2737
  3686   000AE4  2E2E               	decfsz	??_movement^0,f,c
  3687   000AE6  D7FC               	bra	u2737
  3688   000AE8  2E2F               	decfsz	(??_movement+1)^0,f,c
  3689   000AEA  D7FA               	bra	u2737
  3690   000AEC  F000               	nop	
  3691   000AEE                     
  3692                           ;dc_motor.c: 271:     stop(mL,mR);
  3693   000AEE  C028  F016         	movff	movement@mL,stop@mL
  3694   000AF2  C029  F017         	movff	movement@mL+1,stop@mL+1
  3695   000AF6  C02A  F018         	movff	movement@mR,stop@mR
  3696   000AFA  C02B  F019         	movff	movement@mR+1,stop@mR+1
  3697   000AFE  ECDC  F00D         	call	_stop	;wreg free
  3698                           
  3699                           ;dc_motor.c: 272:     _delay((unsigned long)((500)*(64000000/4000.0)));
  3700   000B02  0E29               	movlw	41
  3701   000B04  6E2F               	movwf	(??_movement+1)^0,c
  3702   000B06  0E96               	movlw	150
  3703   000B08  6E2E               	movwf	??_movement^0,c
  3704   000B0A  0E7F               	movlw	127
  3705   000B0C                     u2747:
  3706   000B0C  2EE8               	decfsz	wreg,f,c
  3707   000B0E  D7FE               	bra	u2747
  3708   000B10  2E2E               	decfsz	??_movement^0,f,c
  3709   000B12  D7FC               	bra	u2747
  3710   000B14  2E2F               	decfsz	(??_movement+1)^0,f,c
  3711   000B16  D7FA               	bra	u2747
  3712   000B18  F000               	nop	
  3713   000B1A                     
  3714                           ;dc_motor.c: 273:     if (count == 1){right_45(mL,mR,2,right_timer); stop(mL,mR);}
  3715   000B1A  042C               	decf	movement@count^0,w,c
  3716   000B1C  102D               	iorwf	(movement@count+1)^0,w,c
  3717   000B1E  A4D8               	btfss	status,2,c
  3718   000B20  EF94  F005         	goto	u2021
  3719   000B24  EF96  F005         	goto	u2020
  3720   000B28                     u2021:
  3721   000B28  EFB2  F005         	goto	l2857
  3722   000B2C                     u2020:
  3723   000B2C  C028  F01C         	movff	movement@mL,right_45@mL
  3724   000B30  C029  F01D         	movff	movement@mL+1,right_45@mL+1
  3725   000B34  C02A  F01E         	movff	movement@mR,right_45@mR
  3726   000B38  C02B  F01F         	movff	movement@mR+1,right_45@mR+1
  3727   000B3C  0E00               	movlw	0
  3728   000B3E  6E21               	movwf	(right_45@count+1)^0,c
  3729   000B40  0E02               	movlw	2
  3730   000B42  6E20               	movwf	right_45@count^0,c
  3731   000B44  C059  F022         	movff	_right_timer,right_45@right_timer
  3732   000B48  C05A  F023         	movff	_right_timer+1,right_45@right_timer+1
  3733   000B4C  EC5B  F00B         	call	_right_45	;wreg free
  3734   000B50  C028  F016         	movff	movement@mL,stop@mL
  3735   000B54  C029  F017         	movff	movement@mL+1,stop@mL+1
  3736   000B58  C02A  F018         	movff	movement@mR,stop@mR
  3737   000B5C  C02B  F019         	movff	movement@mR+1,stop@mR+1
  3738   000B60  ECDC  F00D         	call	_stop	;wreg free
  3739   000B64                     l2857:
  3740                           
  3741                           ;dc_motor.c: 274:     if (count == 2){left_45(mL,mR,2,left_timer); stop(mL,mR);}
  3742   000B64  0E02               	movlw	2
  3743   000B66  182C               	xorwf	movement@count^0,w,c
  3744   000B68  102D               	iorwf	(movement@count+1)^0,w,c
  3745   000B6A  A4D8               	btfss	status,2,c
  3746   000B6C  EFBA  F005         	goto	u2031
  3747   000B70  EFBC  F005         	goto	u2030
  3748   000B74                     u2031:
  3749   000B74  EFD8  F005         	goto	l2861
  3750   000B78                     u2030:
  3751   000B78  C028  F01C         	movff	movement@mL,left_45@mL
  3752   000B7C  C029  F01D         	movff	movement@mL+1,left_45@mL+1
  3753   000B80  C02A  F01E         	movff	movement@mR,left_45@mR
  3754   000B84  C02B  F01F         	movff	movement@mR+1,left_45@mR+1
  3755   000B88  0E00               	movlw	0
  3756   000B8A  6E21               	movwf	(left_45@count+1)^0,c
  3757   000B8C  0E02               	movlw	2
  3758   000B8E  6E20               	movwf	left_45@count^0,c
  3759   000B90  C05B  F022         	movff	_left_timer,left_45@left_timer
  3760   000B94  C05C  F023         	movff	_left_timer+1,left_45@left_timer+1
  3761   000B98  EC20  F00A         	call	_left_45	;wreg free
  3762   000B9C  C028  F016         	movff	movement@mL,stop@mL
  3763   000BA0  C029  F017         	movff	movement@mL+1,stop@mL+1
  3764   000BA4  C02A  F018         	movff	movement@mR,stop@mR
  3765   000BA8  C02B  F019         	movff	movement@mR+1,stop@mR+1
  3766   000BAC  ECDC  F00D         	call	_stop	;wreg free
  3767   000BB0                     l2861:
  3768                           
  3769                           ;dc_motor.c: 275:     if (count == 3){right_45(mL,mR,4,right_timer); stop(mL,mR);}
  3770   000BB0  0E03               	movlw	3
  3771   000BB2  182C               	xorwf	movement@count^0,w,c
  3772   000BB4  102D               	iorwf	(movement@count+1)^0,w,c
  3773   000BB6  A4D8               	btfss	status,2,c
  3774   000BB8  EFE0  F005         	goto	u2041
  3775   000BBC  EFE2  F005         	goto	u2040
  3776   000BC0                     u2041:
  3777   000BC0  EFFE  F005         	goto	l2865
  3778   000BC4                     u2040:
  3779   000BC4  C028  F01C         	movff	movement@mL,right_45@mL
  3780   000BC8  C029  F01D         	movff	movement@mL+1,right_45@mL+1
  3781   000BCC  C02A  F01E         	movff	movement@mR,right_45@mR
  3782   000BD0  C02B  F01F         	movff	movement@mR+1,right_45@mR+1
  3783   000BD4  0E00               	movlw	0
  3784   000BD6  6E21               	movwf	(right_45@count+1)^0,c
  3785   000BD8  0E04               	movlw	4
  3786   000BDA  6E20               	movwf	right_45@count^0,c
  3787   000BDC  C059  F022         	movff	_right_timer,right_45@right_timer
  3788   000BE0  C05A  F023         	movff	_right_timer+1,right_45@right_timer+1
  3789   000BE4  EC5B  F00B         	call	_right_45	;wreg free
  3790   000BE8  C028  F016         	movff	movement@mL,stop@mL
  3791   000BEC  C029  F017         	movff	movement@mL+1,stop@mL+1
  3792   000BF0  C02A  F018         	movff	movement@mR,stop@mR
  3793   000BF4  C02B  F019         	movff	movement@mR+1,stop@mR+1
  3794   000BF8  ECDC  F00D         	call	_stop	;wreg free
  3795   000BFC                     l2865:
  3796                           
  3797                           ;dc_motor.c: 276:     if (count == 4){reverse(mL,mR); _delay((unsigned long)((900)*(6400
      +                          0000/4000.0)));stop(mL,mR);_delay((unsigned long)((500)*(64000000/4000.0)));right_45(mL,
      +                          mR,2,right_timer); stop(mL,mR);}
  3798   000BFC  0E04               	movlw	4
  3799   000BFE  182C               	xorwf	movement@count^0,w,c
  3800   000C00  102D               	iorwf	(movement@count+1)^0,w,c
  3801   000C02  A4D8               	btfss	status,2,c
  3802   000C04  EF06  F006         	goto	u2051
  3803   000C08  EF08  F006         	goto	u2050
  3804   000C0C                     u2051:
  3805   000C0C  EF50  F006         	goto	l2877
  3806   000C10                     u2050:
  3807   000C10  C028  F01C         	movff	movement@mL,reverse@mL
  3808   000C14  C029  F01D         	movff	movement@mL+1,reverse@mL+1
  3809   000C18  C02A  F01E         	movff	movement@mR,reverse@mR
  3810   000C1C  C02B  F01F         	movff	movement@mR+1,reverse@mR+1
  3811   000C20  EC67  F00D         	call	_reverse	;wreg free
  3812   000C24  0E4A               	movlw	74
  3813   000C26  6E2F               	movwf	(??_movement+1)^0,c
  3814   000C28  0E0E               	movlw	14
  3815   000C2A  6E2E               	movwf	??_movement^0,c
  3816   000C2C  0E19               	movlw	25
  3817   000C2E                     u2757:
  3818   000C2E  2EE8               	decfsz	wreg,f,c
  3819   000C30  D7FE               	bra	u2757
  3820   000C32  2E2E               	decfsz	??_movement^0,f,c
  3821   000C34  D7FC               	bra	u2757
  3822   000C36  2E2F               	decfsz	(??_movement+1)^0,f,c
  3823   000C38  D7FA               	bra	u2757
  3824   000C3A  F000               	nop	
  3825   000C3C  C028  F016         	movff	movement@mL,stop@mL
  3826   000C40  C029  F017         	movff	movement@mL+1,stop@mL+1
  3827   000C44  C02A  F018         	movff	movement@mR,stop@mR
  3828   000C48  C02B  F019         	movff	movement@mR+1,stop@mR+1
  3829   000C4C  ECDC  F00D         	call	_stop	;wreg free
  3830   000C50  0E29               	movlw	41
  3831   000C52  6E2F               	movwf	(??_movement+1)^0,c
  3832   000C54  0E96               	movlw	150
  3833   000C56  6E2E               	movwf	??_movement^0,c
  3834   000C58  0E7F               	movlw	127
  3835   000C5A                     u2767:
  3836   000C5A  2EE8               	decfsz	wreg,f,c
  3837   000C5C  D7FE               	bra	u2767
  3838   000C5E  2E2E               	decfsz	??_movement^0,f,c
  3839   000C60  D7FC               	bra	u2767
  3840   000C62  2E2F               	decfsz	(??_movement+1)^0,f,c
  3841   000C64  D7FA               	bra	u2767
  3842   000C66  F000               	nop	
  3843   000C68  C028  F01C         	movff	movement@mL,right_45@mL
  3844   000C6C  C029  F01D         	movff	movement@mL+1,right_45@mL+1
  3845   000C70  C02A  F01E         	movff	movement@mR,right_45@mR
  3846   000C74  C02B  F01F         	movff	movement@mR+1,right_45@mR+1
  3847   000C78  0E00               	movlw	0
  3848   000C7A  6E21               	movwf	(right_45@count+1)^0,c
  3849   000C7C  0E02               	movlw	2
  3850   000C7E  6E20               	movwf	right_45@count^0,c
  3851   000C80  C059  F022         	movff	_right_timer,right_45@right_timer
  3852   000C84  C05A  F023         	movff	_right_timer+1,right_45@right_timer+1
  3853   000C88  EC5B  F00B         	call	_right_45	;wreg free
  3854   000C8C  C028  F016         	movff	movement@mL,stop@mL
  3855   000C90  C029  F017         	movff	movement@mL+1,stop@mL+1
  3856   000C94  C02A  F018         	movff	movement@mR,stop@mR
  3857   000C98  C02B  F019         	movff	movement@mR+1,stop@mR+1
  3858   000C9C  ECDC  F00D         	call	_stop	;wreg free
  3859   000CA0                     l2877:
  3860                           
  3861                           ;dc_motor.c: 277:     if (count == 5){reverse(mL,mR); _delay((unsigned long)((900)*(6400
      +                          0000/4000.0)));stop(mL,mR);_delay((unsigned long)((500)*(64000000/4000.0)));left_45(mL,m
      +                          R,2,left_timer); stop(mL,mR);}
  3862   000CA0  0E05               	movlw	5
  3863   000CA2  182C               	xorwf	movement@count^0,w,c
  3864   000CA4  102D               	iorwf	(movement@count+1)^0,w,c
  3865   000CA6  A4D8               	btfss	status,2,c
  3866   000CA8  EF58  F006         	goto	u2061
  3867   000CAC  EF5A  F006         	goto	u2060
  3868   000CB0                     u2061:
  3869   000CB0  EFA2  F006         	goto	l2889
  3870   000CB4                     u2060:
  3871   000CB4  C028  F01C         	movff	movement@mL,reverse@mL
  3872   000CB8  C029  F01D         	movff	movement@mL+1,reverse@mL+1
  3873   000CBC  C02A  F01E         	movff	movement@mR,reverse@mR
  3874   000CC0  C02B  F01F         	movff	movement@mR+1,reverse@mR+1
  3875   000CC4  EC67  F00D         	call	_reverse	;wreg free
  3876   000CC8  0E4A               	movlw	74
  3877   000CCA  6E2F               	movwf	(??_movement+1)^0,c
  3878   000CCC  0E0E               	movlw	14
  3879   000CCE  6E2E               	movwf	??_movement^0,c
  3880   000CD0  0E19               	movlw	25
  3881   000CD2                     u2777:
  3882   000CD2  2EE8               	decfsz	wreg,f,c
  3883   000CD4  D7FE               	bra	u2777
  3884   000CD6  2E2E               	decfsz	??_movement^0,f,c
  3885   000CD8  D7FC               	bra	u2777
  3886   000CDA  2E2F               	decfsz	(??_movement+1)^0,f,c
  3887   000CDC  D7FA               	bra	u2777
  3888   000CDE  F000               	nop	
  3889   000CE0  C028  F016         	movff	movement@mL,stop@mL
  3890   000CE4  C029  F017         	movff	movement@mL+1,stop@mL+1
  3891   000CE8  C02A  F018         	movff	movement@mR,stop@mR
  3892   000CEC  C02B  F019         	movff	movement@mR+1,stop@mR+1
  3893   000CF0  ECDC  F00D         	call	_stop	;wreg free
  3894   000CF4  0E29               	movlw	41
  3895   000CF6  6E2F               	movwf	(??_movement+1)^0,c
  3896   000CF8  0E96               	movlw	150
  3897   000CFA  6E2E               	movwf	??_movement^0,c
  3898   000CFC  0E7F               	movlw	127
  3899   000CFE                     u2787:
  3900   000CFE  2EE8               	decfsz	wreg,f,c
  3901   000D00  D7FE               	bra	u2787
  3902   000D02  2E2E               	decfsz	??_movement^0,f,c
  3903   000D04  D7FC               	bra	u2787
  3904   000D06  2E2F               	decfsz	(??_movement+1)^0,f,c
  3905   000D08  D7FA               	bra	u2787
  3906   000D0A  F000               	nop	
  3907   000D0C  C028  F01C         	movff	movement@mL,left_45@mL
  3908   000D10  C029  F01D         	movff	movement@mL+1,left_45@mL+1
  3909   000D14  C02A  F01E         	movff	movement@mR,left_45@mR
  3910   000D18  C02B  F01F         	movff	movement@mR+1,left_45@mR+1
  3911   000D1C  0E00               	movlw	0
  3912   000D1E  6E21               	movwf	(left_45@count+1)^0,c
  3913   000D20  0E02               	movlw	2
  3914   000D22  6E20               	movwf	left_45@count^0,c
  3915   000D24  C05B  F022         	movff	_left_timer,left_45@left_timer
  3916   000D28  C05C  F023         	movff	_left_timer+1,left_45@left_timer+1
  3917   000D2C  EC20  F00A         	call	_left_45	;wreg free
  3918   000D30  C028  F016         	movff	movement@mL,stop@mL
  3919   000D34  C029  F017         	movff	movement@mL+1,stop@mL+1
  3920   000D38  C02A  F018         	movff	movement@mR,stop@mR
  3921   000D3C  C02B  F019         	movff	movement@mR+1,stop@mR+1
  3922   000D40  ECDC  F00D         	call	_stop	;wreg free
  3923   000D44                     l2889:
  3924                           
  3925                           ;dc_motor.c: 278:     if (count == 6){right_45(mL,mR,3,right_timer); stop(mL,mR);}
  3926   000D44  0E06               	movlw	6
  3927   000D46  182C               	xorwf	movement@count^0,w,c
  3928   000D48  102D               	iorwf	(movement@count+1)^0,w,c
  3929   000D4A  A4D8               	btfss	status,2,c
  3930   000D4C  EFAA  F006         	goto	u2071
  3931   000D50  EFAC  F006         	goto	u2070
  3932   000D54                     u2071:
  3933   000D54  EFC8  F006         	goto	l2893
  3934   000D58                     u2070:
  3935   000D58  C028  F01C         	movff	movement@mL,right_45@mL
  3936   000D5C  C029  F01D         	movff	movement@mL+1,right_45@mL+1
  3937   000D60  C02A  F01E         	movff	movement@mR,right_45@mR
  3938   000D64  C02B  F01F         	movff	movement@mR+1,right_45@mR+1
  3939   000D68  0E00               	movlw	0
  3940   000D6A  6E21               	movwf	(right_45@count+1)^0,c
  3941   000D6C  0E03               	movlw	3
  3942   000D6E  6E20               	movwf	right_45@count^0,c
  3943   000D70  C059  F022         	movff	_right_timer,right_45@right_timer
  3944   000D74  C05A  F023         	movff	_right_timer+1,right_45@right_timer+1
  3945   000D78  EC5B  F00B         	call	_right_45	;wreg free
  3946   000D7C  C028  F016         	movff	movement@mL,stop@mL
  3947   000D80  C029  F017         	movff	movement@mL+1,stop@mL+1
  3948   000D84  C02A  F018         	movff	movement@mR,stop@mR
  3949   000D88  C02B  F019         	movff	movement@mR+1,stop@mR+1
  3950   000D8C  ECDC  F00D         	call	_stop	;wreg free
  3951   000D90                     l2893:
  3952                           
  3953                           ;dc_motor.c: 279:     if (count == 7){left_45(mL,mR,3,left_timer); stop(mL,mR);}
  3954   000D90  0E07               	movlw	7
  3955   000D92  182C               	xorwf	movement@count^0,w,c
  3956   000D94  102D               	iorwf	(movement@count+1)^0,w,c
  3957   000D96  A4D8               	btfss	status,2,c
  3958   000D98  EFD0  F006         	goto	u2081
  3959   000D9C  EFD2  F006         	goto	u2080
  3960   000DA0                     u2081:
  3961   000DA0  EFEE  F006         	goto	l363
  3962   000DA4                     u2080:
  3963   000DA4  C028  F01C         	movff	movement@mL,left_45@mL
  3964   000DA8  C029  F01D         	movff	movement@mL+1,left_45@mL+1
  3965   000DAC  C02A  F01E         	movff	movement@mR,left_45@mR
  3966   000DB0  C02B  F01F         	movff	movement@mR+1,left_45@mR+1
  3967   000DB4  0E00               	movlw	0
  3968   000DB6  6E21               	movwf	(left_45@count+1)^0,c
  3969   000DB8  0E03               	movlw	3
  3970   000DBA  6E20               	movwf	left_45@count^0,c
  3971   000DBC  C05B  F022         	movff	_left_timer,left_45@left_timer
  3972   000DC0  C05C  F023         	movff	_left_timer+1,left_45@left_timer+1
  3973   000DC4  EC20  F00A         	call	_left_45	;wreg free
  3974   000DC8  C028  F016         	movff	movement@mL,stop@mL
  3975   000DCC  C029  F017         	movff	movement@mL+1,stop@mL+1
  3976   000DD0  C02A  F018         	movff	movement@mR,stop@mR
  3977   000DD4  C02B  F019         	movff	movement@mR+1,stop@mR+1
  3978   000DD8  ECDC  F00D         	call	_stop	;wreg free
  3979   000DDC                     l363:
  3980   000DDC  0012               	return		;funcret
  3981   000DDE                     __end_of_movement:
  3982                           	callstack 0
  3983                           
  3984 ;; *************** function _space *****************
  3985 ;; Defined at:
  3986 ;;		line 222 in file "dc_motor.c"
  3987 ;; Parameters:    Size  Location     Type
  3988 ;;  mL              2   27[COMRAM] PTR struct DC_motor
  3989 ;;		 -> motorL(9), 
  3990 ;;  mR              2   29[COMRAM] PTR struct DC_motor
  3991 ;;		 -> motorR(9), 
  3992 ;; Auto vars:     Size  Location     Type
  3993 ;;		None
  3994 ;; Return value:  Size  Location     Type
  3995 ;;                  1    wreg      void 
  3996 ;; Registers used:
  3997 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3998 ;; Tracked objects:
  3999 ;;		On entry : 0/0
  4000 ;;		On exit  : 0/0
  4001 ;;		Unchanged: 0/0
  4002 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4003 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4004 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4005 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4006 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4007 ;;Total ram usage:        6 bytes
  4008 ;; Hardware stack levels used: 1
  4009 ;; Hardware stack levels required when called: 4
  4010 ;; This function calls:
  4011 ;;		_setMotorPWM
  4012 ;;		_stop
  4013 ;; This function is called by:
  4014 ;;		_buggy_color_response
  4015 ;;		_movement
  4016 ;; This function uses a non-reentrant model
  4017 ;;
  4018                           
  4019                           	psect	text22
  4020   0018E2                     __ptext22:
  4021                           	callstack 0
  4022   0018E2                     _space:
  4023                           	callstack 25
  4024   0018E2                     
  4025                           ;dc_motor.c: 222: void space(DC_motor *mL, DC_motor *mR);dc_motor.c: 223: {;dc_motor.c: 
      +                          224:     stop(mL,mR);
  4026   0018E2  C01C  F016         	movff	space@mL,stop@mL
  4027   0018E6  C01D  F017         	movff	space@mL+1,stop@mL+1
  4028   0018EA  C01E  F018         	movff	space@mR,stop@mR
  4029   0018EE  C01F  F019         	movff	space@mR+1,stop@mR+1
  4030   0018F2  ECDC  F00D         	call	_stop	;wreg free
  4031   0018F6                     
  4032                           ;dc_motor.c: 225:     LATHbits.LATH1 = 1;
  4033   0018F6  8280               	bsf	128,1,c	;volatile
  4034   0018F8                     
  4035                           ;dc_motor.c: 226:     mL-> direction = 0;
  4036   0018F8  EE20 F001          	lfsr	2,1
  4037   0018FC  501C               	movf	space@mL^0,w,c
  4038   0018FE  26D9               	addwf	fsr2l,f,c
  4039   001900  501D               	movf	(space@mL+1)^0,w,c
  4040   001902  22DA               	addwfc	fsr2h,f,c
  4041   001904  0E00               	movlw	0
  4042   001906  6EDF               	movwf	indf2,c
  4043   001908                     
  4044                           ;dc_motor.c: 227:     mR-> direction = 0;
  4045   001908  EE20 F001          	lfsr	2,1
  4046   00190C  501E               	movf	space@mR^0,w,c
  4047   00190E  26D9               	addwf	fsr2l,f,c
  4048   001910  501F               	movf	(space@mR+1)^0,w,c
  4049   001912  22DA               	addwfc	fsr2h,f,c
  4050   001914  0E00               	movlw	0
  4051   001916  6EDF               	movwf	indf2,c
  4052                           
  4053                           ;dc_motor.c: 228:     setMotorPWM(mR);
  4054   001918  C01E  F010         	movff	space@mR,setMotorPWM@m
  4055   00191C  C01F  F011         	movff	space@mR+1,setMotorPWM@m+1
  4056   001920  EC6A  F009         	call	_setMotorPWM	;wreg free
  4057                           
  4058                           ;dc_motor.c: 229:     setMotorPWM(mL);
  4059   001924  C01C  F010         	movff	space@mL,setMotorPWM@m
  4060   001928  C01D  F011         	movff	space@mL+1,setMotorPWM@m+1
  4061   00192C  EC6A  F009         	call	_setMotorPWM	;wreg free
  4062                           
  4063                           ;dc_motor.c: 230:     while ((mL->power <30) && (mR->power <30)){
  4064   001930  EFB6  F00C         	goto	l2605
  4065   001934                     l2597:
  4066                           
  4067                           ;dc_motor.c: 231:         mL->power += 10;
  4068   001934  C01C  FFD9         	movff	space@mL,fsr2l
  4069   001938  C01D  FFDA         	movff	space@mL+1,fsr2h
  4070   00193C  0E0A               	movlw	10
  4071   00193E  26DF               	addwf	indf2,f,c
  4072                           
  4073                           ;dc_motor.c: 232:         mR->power += 10;
  4074   001940  C01E  FFD9         	movff	space@mR,fsr2l
  4075   001944  C01F  FFDA         	movff	space@mR+1,fsr2h
  4076   001948  0E0A               	movlw	10
  4077   00194A  26DF               	addwf	indf2,f,c
  4078   00194C                     
  4079                           ;dc_motor.c: 233:         setMotorPWM(mL);
  4080   00194C  C01C  F010         	movff	space@mL,setMotorPWM@m
  4081   001950  C01D  F011         	movff	space@mL+1,setMotorPWM@m+1
  4082   001954  EC6A  F009         	call	_setMotorPWM	;wreg free
  4083   001958                     
  4084                           ;dc_motor.c: 234:         setMotorPWM(mR);
  4085   001958  C01E  F010         	movff	space@mR,setMotorPWM@m
  4086   00195C  C01F  F011         	movff	space@mR+1,setMotorPWM@m+1
  4087   001960  EC6A  F009         	call	_setMotorPWM	;wreg free
  4088   001964                     
  4089                           ;dc_motor.c: 235:         _delay((unsigned long)((20)*(64000000/4000000.0)));
  4090   001964  0E6A               	movlw	106
  4091   001966                     u2797:
  4092   001966  2EE8               	decfsz	wreg,f,c
  4093   001968  D7FE               	bra	u2797
  4094   00196A  D000               	nop2	
  4095   00196C                     l2605:
  4096                           
  4097                           ;dc_motor.c: 230:     while ((mL->power <30) && (mR->power <30)){
  4098   00196C  C01C  FFD9         	movff	space@mL,fsr2l
  4099   001970  C01D  FFDA         	movff	space@mL+1,fsr2h
  4100   001974  0E1E               	movlw	30
  4101   001976  60DF               	cpfslt	indf2,c
  4102   001978  EFC0  F00C         	goto	u1591
  4103   00197C  EFC2  F00C         	goto	u1590
  4104   001980                     u1591:
  4105   001980  EFCE  F00C         	goto	l2609
  4106   001984                     u1590:
  4107   001984  C01E  FFD9         	movff	space@mR,fsr2l
  4108   001988  C01F  FFDA         	movff	space@mR+1,fsr2h
  4109   00198C  0E1D               	movlw	29
  4110   00198E  64DF               	cpfsgt	indf2,c
  4111   001990  EFCC  F00C         	goto	u1601
  4112   001994  EFCE  F00C         	goto	u1600
  4113   001998                     u1601:
  4114   001998  EF9A  F00C         	goto	l2597
  4115   00199C                     u1600:
  4116   00199C                     l2609:
  4117                           
  4118                           ;dc_motor.c: 237:     _delay((unsigned long)((350)*(64000000/4000.0)));
  4119   00199C  0E1D               	movlw	29
  4120   00199E  6E21               	movwf	(??_space+1)^0,c
  4121   0019A0  0E69               	movlw	105
  4122   0019A2  6E20               	movwf	??_space^0,c
  4123   0019A4  0EA5               	movlw	165
  4124   0019A6                     u2807:
  4125   0019A6  2EE8               	decfsz	wreg,f,c
  4126   0019A8  D7FE               	bra	u2807
  4127   0019AA  2E20               	decfsz	??_space^0,f,c
  4128   0019AC  D7FC               	bra	u2807
  4129   0019AE  2E21               	decfsz	(??_space+1)^0,f,c
  4130   0019B0  D7FA               	bra	u2807
  4131   0019B2  F000               	nop	
  4132   0019B4                     
  4133                           ;dc_motor.c: 238:     stop(mL,mR);
  4134   0019B4  C01C  F016         	movff	space@mL,stop@mL
  4135   0019B8  C01D  F017         	movff	space@mL+1,stop@mL+1
  4136   0019BC  C01E  F018         	movff	space@mR,stop@mR
  4137   0019C0  C01F  F019         	movff	space@mR+1,stop@mR+1
  4138   0019C4  ECDC  F00D         	call	_stop	;wreg free
  4139   0019C8                     
  4140                           ;dc_motor.c: 239:     _delay((unsigned long)((200)*(64000000/4000.0)));
  4141   0019C8  0E11               	movlw	17
  4142   0019CA  6E21               	movwf	(??_space+1)^0,c
  4143   0019CC  0E3C               	movlw	60
  4144   0019CE  6E20               	movwf	??_space^0,c
  4145   0019D0  0ECB               	movlw	203
  4146   0019D2                     u2817:
  4147   0019D2  2EE8               	decfsz	wreg,f,c
  4148   0019D4  D7FE               	bra	u2817
  4149   0019D6  2E20               	decfsz	??_space^0,f,c
  4150   0019D8  D7FC               	bra	u2817
  4151   0019DA  2E21               	decfsz	(??_space+1)^0,f,c
  4152   0019DC  D7FA               	bra	u2817
  4153   0019DE  F000               	nop	
  4154   0019E0                     
  4155                           ;dc_motor.c: 240:     LATHbits.LATH1 = 0;
  4156   0019E0  9280               	bcf	128,1,c	;volatile
  4157   0019E2  0012               	return		;funcret
  4158   0019E4                     __end_of_space:
  4159                           	callstack 0
  4160                           
  4161 ;; *************** function _right_45 *****************
  4162 ;; Defined at:
  4163 ;;		line 201 in file "dc_motor.c"
  4164 ;; Parameters:    Size  Location     Type
  4165 ;;  mL              2   27[COMRAM] PTR struct DC_motor
  4166 ;;		 -> motorL(9), 
  4167 ;;  mR              2   29[COMRAM] PTR struct DC_motor
  4168 ;;		 -> motorR(9), 
  4169 ;;  count           2   31[COMRAM] int 
  4170 ;;  right_timer     2   33[COMRAM] int 
  4171 ;; Auto vars:     Size  Location     Type
  4172 ;;  i               2   37[COMRAM] int 
  4173 ;; Return value:  Size  Location     Type
  4174 ;;                  1    wreg      void 
  4175 ;; Registers used:
  4176 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4177 ;; Tracked objects:
  4178 ;;		On entry : 0/0
  4179 ;;		On exit  : 0/0
  4180 ;;		Unchanged: 0/0
  4181 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4182 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4183 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4184 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4185 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4186 ;;Total ram usage:       12 bytes
  4187 ;; Hardware stack levels used: 1
  4188 ;; Hardware stack levels required when called: 4
  4189 ;; This function calls:
  4190 ;;		_custom_delay
  4191 ;;		_setMotorPWM
  4192 ;;		_stop
  4193 ;; This function is called by:
  4194 ;;		_reverse_pink
  4195 ;;		_movement
  4196 ;;		_movement_return
  4197 ;;		_right_turn_calibration
  4198 ;; This function uses a non-reentrant model
  4199 ;;
  4200                           
  4201                           	psect	text23
  4202   0016B6                     __ptext23:
  4203                           	callstack 0
  4204   0016B6                     _right_45:
  4205                           	callstack 23
  4206   0016B6                     
  4207                           ;dc_motor.c: 201: void right_45(DC_motor *mL, DC_motor *mR, int count, int right_timer);
      +                          dc_motor.c: 202: {;dc_motor.c: 203:     mL-> direction = 1;
  4208   0016B6  EE20 F001          	lfsr	2,1
  4209   0016BA  501C               	movf	right_45@mL^0,w,c
  4210   0016BC  26D9               	addwf	fsr2l,f,c
  4211   0016BE  501D               	movf	(right_45@mL+1)^0,w,c
  4212   0016C0  22DA               	addwfc	fsr2h,f,c
  4213   0016C2  0E01               	movlw	1
  4214   0016C4  6EDF               	movwf	indf2,c
  4215                           
  4216                           ;dc_motor.c: 204:     mR-> direction = 0;
  4217   0016C6  EE20 F001          	lfsr	2,1
  4218   0016CA  501E               	movf	right_45@mR^0,w,c
  4219   0016CC  26D9               	addwf	fsr2l,f,c
  4220   0016CE  501F               	movf	(right_45@mR+1)^0,w,c
  4221   0016D0  22DA               	addwfc	fsr2h,f,c
  4222   0016D2  0E00               	movlw	0
  4223   0016D4  6EDF               	movwf	indf2,c
  4224   0016D6                     
  4225                           ;dc_motor.c: 205:     LATHbits.LATH0 = 1;
  4226   0016D6  8080               	bsf	128,0,c	;volatile
  4227   0016D8                     
  4228                           ;dc_motor.c: 206:     int i;;dc_motor.c: 207:     for (i = 0;i<count;i++){
  4229   0016D8  0E00               	movlw	0
  4230   0016DA  6E27               	movwf	(right_45@i+1)^0,c
  4231   0016DC  0E00               	movlw	0
  4232   0016DE  6E26               	movwf	right_45@i^0,c
  4233   0016E0  EFDF  F00B         	goto	l2479
  4234   0016E4                     l2451:
  4235                           
  4236                           ;dc_motor.c: 209:         if (mL->power <= 50){mL->power += 10;}
  4237   0016E4  C01C  FFD9         	movff	right_45@mL,fsr2l
  4238   0016E8  C01D  FFDA         	movff	right_45@mL+1,fsr2h
  4239   0016EC  0E33               	movlw	51
  4240   0016EE  60DF               	cpfslt	indf2,c
  4241   0016F0  EF7C  F00B         	goto	u1481
  4242   0016F4  EF7E  F00B         	goto	u1480
  4243   0016F8                     u1481:
  4244   0016F8  EF84  F00B         	goto	l2455
  4245   0016FC                     u1480:
  4246   0016FC  C01C  FFD9         	movff	right_45@mL,fsr2l
  4247   001700  C01D  FFDA         	movff	right_45@mL+1,fsr2h
  4248   001704  0E0A               	movlw	10
  4249   001706  26DF               	addwf	indf2,f,c
  4250   001708                     l2455:
  4251                           
  4252                           ;dc_motor.c: 210:         if (mR->power <= 50){mR->power += 10;}
  4253   001708  C01E  FFD9         	movff	right_45@mR,fsr2l
  4254   00170C  C01F  FFDA         	movff	right_45@mR+1,fsr2h
  4255   001710  0E33               	movlw	51
  4256   001712  60DF               	cpfslt	indf2,c
  4257   001714  EF8E  F00B         	goto	u1491
  4258   001718  EF90  F00B         	goto	u1490
  4259   00171C                     u1491:
  4260   00171C  EF96  F00B         	goto	l2459
  4261   001720                     u1490:
  4262   001720  C01E  FFD9         	movff	right_45@mR,fsr2l
  4263   001724  C01F  FFDA         	movff	right_45@mR+1,fsr2h
  4264   001728  0E0A               	movlw	10
  4265   00172A  26DF               	addwf	indf2,f,c
  4266   00172C                     l2459:
  4267                           
  4268                           ;dc_motor.c: 211:         setMotorPWM(mL);
  4269   00172C  C01C  F010         	movff	right_45@mL,setMotorPWM@m
  4270   001730  C01D  F011         	movff	right_45@mL+1,setMotorPWM@m+1
  4271   001734  EC6A  F009         	call	_setMotorPWM	;wreg free
  4272   001738                     
  4273                           ;dc_motor.c: 212:         setMotorPWM(mR);
  4274   001738  C01E  F010         	movff	right_45@mR,setMotorPWM@m
  4275   00173C  C01F  F011         	movff	right_45@mR+1,setMotorPWM@m+1
  4276   001740  EC6A  F009         	call	_setMotorPWM	;wreg free
  4277   001744                     
  4278                           ;dc_motor.c: 213:         _delay((unsigned long)((10)*(64000000/4000.0)));
  4279   001744  0ED0               	movlw	208
  4280   001746  6E24               	movwf	??_right_45^0,c
  4281   001748  0ECA               	movlw	202
  4282   00174A                     u2827:
  4283   00174A  2EE8               	decfsz	wreg,f,c
  4284   00174C  D7FE               	bra	u2827
  4285   00174E  2E24               	decfsz	??_right_45^0,f,c
  4286   001750  D7FC               	bra	u2827
  4287   001752                     l2465:
  4288                           
  4289                           ;dc_motor.c: 208:     while ((mL->power <= 50) || (mR->power <= 50)){
  4290   001752  C01C  FFD9         	movff	right_45@mL,fsr2l
  4291   001756  C01D  FFDA         	movff	right_45@mL+1,fsr2h
  4292   00175A  0E32               	movlw	50
  4293   00175C  64DF               	cpfsgt	indf2,c
  4294   00175E  EFB3  F00B         	goto	u1501
  4295   001762  EFB5  F00B         	goto	u1500
  4296   001766                     u1501:
  4297   001766  EF72  F00B         	goto	l2451
  4298   00176A                     u1500:
  4299   00176A  C01E  FFD9         	movff	right_45@mR,fsr2l
  4300   00176E  C01F  FFDA         	movff	right_45@mR+1,fsr2h
  4301   001772  0E32               	movlw	50
  4302   001774  64DF               	cpfsgt	indf2,c
  4303   001776  EFBF  F00B         	goto	u1511
  4304   00177A  EFC1  F00B         	goto	u1510
  4305   00177E                     u1511:
  4306   00177E  EF72  F00B         	goto	l2451
  4307   001782                     u1510:
  4308   001782                     
  4309                           ;dc_motor.c: 215:     custom_delay(right_timer);
  4310   001782  C022  F003         	movff	right_45@right_timer,custom_delay@temp
  4311   001786  C023  F004         	movff	right_45@right_timer+1,custom_delay@temp+1
  4312   00178A  ECDA  F010         	call	_custom_delay	;wreg free
  4313   00178E                     
  4314                           ;dc_motor.c: 216:     stop(mL,mR);
  4315   00178E  C01C  F016         	movff	right_45@mL,stop@mL
  4316   001792  C01D  F017         	movff	right_45@mL+1,stop@mL+1
  4317   001796  C01E  F018         	movff	right_45@mR,stop@mR
  4318   00179A  C01F  F019         	movff	right_45@mR+1,stop@mR+1
  4319   00179E  ECDC  F00D         	call	_stop	;wreg free
  4320   0017A2                     
  4321                           ;dc_motor.c: 217:     _delay((unsigned long)((150)*(64000000/4000.0)));
  4322   0017A2  0E0D               	movlw	13
  4323   0017A4  6E25               	movwf	(??_right_45+1)^0,c
  4324   0017A6  0E2D               	movlw	45
  4325   0017A8  6E24               	movwf	??_right_45^0,c
  4326   0017AA  0ED8               	movlw	216
  4327   0017AC                     u2837:
  4328   0017AC  2EE8               	decfsz	wreg,f,c
  4329   0017AE  D7FE               	bra	u2837
  4330   0017B0  2E24               	decfsz	??_right_45^0,f,c
  4331   0017B2  D7FC               	bra	u2837
  4332   0017B4  2E25               	decfsz	(??_right_45+1)^0,f,c
  4333   0017B6  D7FA               	bra	u2837
  4334   0017B8                     
  4335                           ;dc_motor.c: 218:     LATHbits.LATH0 = 0;
  4336   0017B8  9080               	bcf	128,0,c	;volatile
  4337   0017BA                     
  4338                           ;dc_motor.c: 219: }
  4339   0017BA  4A26               	infsnz	right_45@i^0,f,c
  4340   0017BC  2A27               	incf	(right_45@i+1)^0,f,c
  4341   0017BE                     l2479:
  4342   0017BE  5020               	movf	right_45@count^0,w,c
  4343   0017C0  5C26               	subwf	right_45@i^0,w,c
  4344   0017C2  5027               	movf	(right_45@i+1)^0,w,c
  4345   0017C4  0A80               	xorlw	128
  4346   0017C6  6E24               	movwf	??_right_45^0,c
  4347   0017C8  5021               	movf	(right_45@count+1)^0,w,c
  4348   0017CA  0A80               	xorlw	128
  4349   0017CC  5824               	subwfb	??_right_45^0,w,c
  4350   0017CE  A0D8               	btfss	status,0,c
  4351   0017D0  EFEC  F00B         	goto	u1521
  4352   0017D4  EFEE  F00B         	goto	u1520
  4353   0017D8                     u1521:
  4354   0017D8  EFA9  F00B         	goto	l2465
  4355   0017DC                     u1520:
  4356   0017DC  0012               	return		;funcret
  4357   0017DE                     __end_of_right_45:
  4358                           	callstack 0
  4359                           
  4360 ;; *************** function _reverse *****************
  4361 ;; Defined at:
  4362 ;;		line 137 in file "dc_motor.c"
  4363 ;; Parameters:    Size  Location     Type
  4364 ;;  mL              2   27[COMRAM] PTR struct DC_motor
  4365 ;;		 -> motorL(9), 
  4366 ;;  mR              2   29[COMRAM] PTR struct DC_motor
  4367 ;;		 -> motorR(9), 
  4368 ;; Auto vars:     Size  Location     Type
  4369 ;;		None
  4370 ;; Return value:  Size  Location     Type
  4371 ;;                  1    wreg      void 
  4372 ;; Registers used:
  4373 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4374 ;; Tracked objects:
  4375 ;;		On entry : 0/0
  4376 ;;		On exit  : 0/0
  4377 ;;		Unchanged: 0/0
  4378 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4379 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4380 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4381 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4382 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4383 ;;Total ram usage:        5 bytes
  4384 ;; Hardware stack levels used: 1
  4385 ;; Hardware stack levels required when called: 4
  4386 ;; This function calls:
  4387 ;;		_setMotorPWM
  4388 ;;		_stop
  4389 ;; This function is called by:
  4390 ;;		_return_home
  4391 ;;		_reverse_pink
  4392 ;;		_reverse_yellow
  4393 ;;		_movement
  4394 ;; This function uses a non-reentrant model
  4395 ;;
  4396                           
  4397                           	psect	text24
  4398   001ACE                     __ptext24:
  4399                           	callstack 0
  4400   001ACE                     _reverse:
  4401                           	callstack 24
  4402   001ACE                     
  4403                           ;dc_motor.c: 137: void reverse(DC_motor *mL, DC_motor *mR);dc_motor.c: 138: {;dc_motor.c
      +                          : 139:     stop(mL,mR);
  4404   001ACE  C01C  F016         	movff	reverse@mL,stop@mL
  4405   001AD2  C01D  F017         	movff	reverse@mL+1,stop@mL+1
  4406   001AD6  C01E  F018         	movff	reverse@mR,stop@mR
  4407   001ADA  C01F  F019         	movff	reverse@mR+1,stop@mR+1
  4408   001ADE  ECDC  F00D         	call	_stop	;wreg free
  4409   001AE2                     
  4410                           ;dc_motor.c: 140:     mL-> direction = 0;
  4411   001AE2  EE20 F001          	lfsr	2,1
  4412   001AE6  501C               	movf	reverse@mL^0,w,c
  4413   001AE8  26D9               	addwf	fsr2l,f,c
  4414   001AEA  501D               	movf	(reverse@mL+1)^0,w,c
  4415   001AEC  22DA               	addwfc	fsr2h,f,c
  4416   001AEE  0E00               	movlw	0
  4417   001AF0  6EDF               	movwf	indf2,c
  4418   001AF2                     
  4419                           ;dc_motor.c: 141:     mR-> direction = 0;
  4420   001AF2  EE20 F001          	lfsr	2,1
  4421   001AF6  501E               	movf	reverse@mR^0,w,c
  4422   001AF8  26D9               	addwf	fsr2l,f,c
  4423   001AFA  501F               	movf	(reverse@mR+1)^0,w,c
  4424   001AFC  22DA               	addwfc	fsr2h,f,c
  4425   001AFE  0E00               	movlw	0
  4426   001B00  6EDF               	movwf	indf2,c
  4427   001B02                     
  4428                           ;dc_motor.c: 142:     LATHbits.LATH1 = 1;
  4429   001B02  8280               	bsf	128,1,c	;volatile
  4430                           
  4431                           ;dc_motor.c: 143:     setMotorPWM(mR);
  4432   001B04  C01E  F010         	movff	reverse@mR,setMotorPWM@m
  4433   001B08  C01F  F011         	movff	reverse@mR+1,setMotorPWM@m+1
  4434   001B0C  EC6A  F009         	call	_setMotorPWM	;wreg free
  4435                           
  4436                           ;dc_motor.c: 144:     setMotorPWM(mL);
  4437   001B10  C01C  F010         	movff	reverse@mL,setMotorPWM@m
  4438   001B14  C01D  F011         	movff	reverse@mL+1,setMotorPWM@m+1
  4439   001B18  EC6A  F009         	call	_setMotorPWM	;wreg free
  4440                           
  4441                           ;dc_motor.c: 145:     while ((mL->power <= 50) || (mR->power <= 55)){
  4442   001B1C  EFC2  F00D         	goto	l307
  4443   001B20                     l2389:
  4444                           
  4445                           ;dc_motor.c: 146:         if (mL->power <= 50){mL->power += 1;}
  4446   001B20  C01C  FFD9         	movff	reverse@mL,fsr2l
  4447   001B24  C01D  FFDA         	movff	reverse@mL+1,fsr2h
  4448   001B28  0E33               	movlw	51
  4449   001B2A  60DF               	cpfslt	indf2,c
  4450   001B2C  EF9A  F00D         	goto	u1391
  4451   001B30  EF9C  F00D         	goto	u1390
  4452   001B34                     u1391:
  4453   001B34  EFA1  F00D         	goto	l2393
  4454   001B38                     u1390:
  4455   001B38  C01C  FFD9         	movff	reverse@mL,fsr2l
  4456   001B3C  C01D  FFDA         	movff	reverse@mL+1,fsr2h
  4457   001B40  2ADF               	incf	indf2,f,c
  4458   001B42                     l2393:
  4459                           
  4460                           ;dc_motor.c: 147:         if (mR->power <= 55){mR->power += 1;}
  4461   001B42  C01E  FFD9         	movff	reverse@mR,fsr2l
  4462   001B46  C01F  FFDA         	movff	reverse@mR+1,fsr2h
  4463   001B4A  0E38               	movlw	56
  4464   001B4C  60DF               	cpfslt	indf2,c
  4465   001B4E  EFAB  F00D         	goto	u1401
  4466   001B52  EFAD  F00D         	goto	u1400
  4467   001B56                     u1401:
  4468   001B56  EFB2  F00D         	goto	l2397
  4469   001B5A                     u1400:
  4470   001B5A  C01E  FFD9         	movff	reverse@mR,fsr2l
  4471   001B5E  C01F  FFDA         	movff	reverse@mR+1,fsr2h
  4472   001B62  2ADF               	incf	indf2,f,c
  4473   001B64                     l2397:
  4474                           
  4475                           ;dc_motor.c: 148:         setMotorPWM(mL);
  4476   001B64  C01C  F010         	movff	reverse@mL,setMotorPWM@m
  4477   001B68  C01D  F011         	movff	reverse@mL+1,setMotorPWM@m+1
  4478   001B6C  EC6A  F009         	call	_setMotorPWM	;wreg free
  4479   001B70                     
  4480                           ;dc_motor.c: 149:         setMotorPWM(mR);
  4481   001B70  C01E  F010         	movff	reverse@mR,setMotorPWM@m
  4482   001B74  C01F  F011         	movff	reverse@mR+1,setMotorPWM@m+1
  4483   001B78  EC6A  F009         	call	_setMotorPWM	;wreg free
  4484   001B7C                     
  4485                           ;dc_motor.c: 150:         _delay((unsigned long)((5)*(64000000/4000000.0)));
  4486   001B7C  0E1A               	movlw	26
  4487   001B7E                     u2847:
  4488   001B7E  2EE8               	decfsz	wreg,f,c
  4489   001B80  D7FE               	bra	u2847
  4490   001B82  D000               	nop2	
  4491   001B84                     l307:
  4492                           
  4493                           ;dc_motor.c: 145:     while ((mL->power <= 50) || (mR->power <= 55)){
  4494   001B84  C01C  FFD9         	movff	reverse@mL,fsr2l
  4495   001B88  C01D  FFDA         	movff	reverse@mL+1,fsr2h
  4496   001B8C  0E32               	movlw	50
  4497   001B8E  64DF               	cpfsgt	indf2,c
  4498   001B90  EFCC  F00D         	goto	u1411
  4499   001B94  EFCE  F00D         	goto	u1410
  4500   001B98                     u1411:
  4501   001B98  EF90  F00D         	goto	l2389
  4502   001B9C                     u1410:
  4503   001B9C  C01E  FFD9         	movff	reverse@mR,fsr2l
  4504   001BA0  C01F  FFDA         	movff	reverse@mR+1,fsr2h
  4505   001BA4  0E37               	movlw	55
  4506   001BA6  64DF               	cpfsgt	indf2,c
  4507   001BA8  EFD8  F00D         	goto	u1421
  4508   001BAC  EFDA  F00D         	goto	u1420
  4509   001BB0                     u1421:
  4510   001BB0  EF90  F00D         	goto	l2389
  4511   001BB4                     u1420:
  4512   001BB4                     
  4513                           ;dc_motor.c: 152:     LATHbits.LATH1 = 0;
  4514   001BB4  9280               	bcf	128,1,c	;volatile
  4515   001BB6  0012               	return		;funcret
  4516   001BB8                     __end_of_reverse:
  4517                           	callstack 0
  4518                           
  4519 ;; *************** function _left_45 *****************
  4520 ;; Defined at:
  4521 ;;		line 178 in file "dc_motor.c"
  4522 ;; Parameters:    Size  Location     Type
  4523 ;;  mL              2   27[COMRAM] PTR struct DC_motor
  4524 ;;		 -> motorL(9), 
  4525 ;;  mR              2   29[COMRAM] PTR struct DC_motor
  4526 ;;		 -> motorR(9), 
  4527 ;;  count           2   31[COMRAM] int 
  4528 ;;  left_timer      2   33[COMRAM] int 
  4529 ;; Auto vars:     Size  Location     Type
  4530 ;;  i               2   37[COMRAM] int 
  4531 ;; Return value:  Size  Location     Type
  4532 ;;                  1    wreg      void 
  4533 ;; Registers used:
  4534 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4535 ;; Tracked objects:
  4536 ;;		On entry : 0/0
  4537 ;;		On exit  : 0/0
  4538 ;;		Unchanged: 0/0
  4539 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4540 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4541 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4542 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4543 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4544 ;;Total ram usage:       12 bytes
  4545 ;; Hardware stack levels used: 1
  4546 ;; Hardware stack levels required when called: 4
  4547 ;; This function calls:
  4548 ;;		_custom_delay
  4549 ;;		_setMotorPWM
  4550 ;;		_stop
  4551 ;; This function is called by:
  4552 ;;		_reverse_yellow
  4553 ;;		_movement
  4554 ;;		_movement_return
  4555 ;;		_left_turn_calibration
  4556 ;; This function uses a non-reentrant model
  4557 ;;
  4558                           
  4559                           	psect	text25
  4560   001440                     __ptext25:
  4561                           	callstack 0
  4562   001440                     _left_45:
  4563                           	callstack 22
  4564   001440                     
  4565                           ;dc_motor.c: 178: void left_45(DC_motor *mL, DC_motor *mR, int count, int left_timer);dc
      +                          _motor.c: 179: {;dc_motor.c: 180:     stop(mL,mR);
  4566   001440  C01C  F016         	movff	left_45@mL,stop@mL
  4567   001444  C01D  F017         	movff	left_45@mL+1,stop@mL+1
  4568   001448  C01E  F018         	movff	left_45@mR,stop@mR
  4569   00144C  C01F  F019         	movff	left_45@mR+1,stop@mR+1
  4570   001450  ECDC  F00D         	call	_stop	;wreg free
  4571   001454                     
  4572                           ;dc_motor.c: 181:     mL-> direction = 0;
  4573   001454  EE20 F001          	lfsr	2,1
  4574   001458  501C               	movf	left_45@mL^0,w,c
  4575   00145A  26D9               	addwf	fsr2l,f,c
  4576   00145C  501D               	movf	(left_45@mL+1)^0,w,c
  4577   00145E  22DA               	addwfc	fsr2h,f,c
  4578   001460  0E00               	movlw	0
  4579   001462  6EDF               	movwf	indf2,c
  4580   001464                     
  4581                           ;dc_motor.c: 182:     mR-> direction = 1;
  4582   001464  EE20 F001          	lfsr	2,1
  4583   001468  501E               	movf	left_45@mR^0,w,c
  4584   00146A  26D9               	addwf	fsr2l,f,c
  4585   00146C  501F               	movf	(left_45@mR+1)^0,w,c
  4586   00146E  22DA               	addwfc	fsr2h,f,c
  4587   001470  0E01               	movlw	1
  4588   001472  6EDF               	movwf	indf2,c
  4589   001474                     
  4590                           ;dc_motor.c: 183:     LATFbits.LATF0 = 1;
  4591   001474  807E               	bsf	126,0,c	;volatile
  4592   001476                     
  4593                           ;dc_motor.c: 184:     int i;;dc_motor.c: 185:     for (i = 0;i<count;i++){
  4594   001476  0E00               	movlw	0
  4595   001478  6E27               	movwf	(left_45@i+1)^0,c
  4596   00147A  0E00               	movlw	0
  4597   00147C  6E26               	movwf	left_45@i^0,c
  4598   00147E  EFAE  F00A         	goto	l2443
  4599   001482                     l2415:
  4600                           
  4601                           ;dc_motor.c: 187:         if (mL->power <= 50){mL->power += 10;}
  4602   001482  C01C  FFD9         	movff	left_45@mL,fsr2l
  4603   001486  C01D  FFDA         	movff	left_45@mL+1,fsr2h
  4604   00148A  0E33               	movlw	51
  4605   00148C  60DF               	cpfslt	indf2,c
  4606   00148E  EF4B  F00A         	goto	u1431
  4607   001492  EF4D  F00A         	goto	u1430
  4608   001496                     u1431:
  4609   001496  EF53  F00A         	goto	l2419
  4610   00149A                     u1430:
  4611   00149A  C01C  FFD9         	movff	left_45@mL,fsr2l
  4612   00149E  C01D  FFDA         	movff	left_45@mL+1,fsr2h
  4613   0014A2  0E0A               	movlw	10
  4614   0014A4  26DF               	addwf	indf2,f,c
  4615   0014A6                     l2419:
  4616                           
  4617                           ;dc_motor.c: 188:         if (mR->power <= 50){mR->power += 10;}
  4618   0014A6  C01E  FFD9         	movff	left_45@mR,fsr2l
  4619   0014AA  C01F  FFDA         	movff	left_45@mR+1,fsr2h
  4620   0014AE  0E33               	movlw	51
  4621   0014B0  60DF               	cpfslt	indf2,c
  4622   0014B2  EF5D  F00A         	goto	u1441
  4623   0014B6  EF5F  F00A         	goto	u1440
  4624   0014BA                     u1441:
  4625   0014BA  EF65  F00A         	goto	l2423
  4626   0014BE                     u1440:
  4627   0014BE  C01E  FFD9         	movff	left_45@mR,fsr2l
  4628   0014C2  C01F  FFDA         	movff	left_45@mR+1,fsr2h
  4629   0014C6  0E0A               	movlw	10
  4630   0014C8  26DF               	addwf	indf2,f,c
  4631   0014CA                     l2423:
  4632                           
  4633                           ;dc_motor.c: 189:         setMotorPWM(mL);
  4634   0014CA  C01C  F010         	movff	left_45@mL,setMotorPWM@m
  4635   0014CE  C01D  F011         	movff	left_45@mL+1,setMotorPWM@m+1
  4636   0014D2  EC6A  F009         	call	_setMotorPWM	;wreg free
  4637   0014D6                     
  4638                           ;dc_motor.c: 190:         setMotorPWM(mR);
  4639   0014D6  C01E  F010         	movff	left_45@mR,setMotorPWM@m
  4640   0014DA  C01F  F011         	movff	left_45@mR+1,setMotorPWM@m+1
  4641   0014DE  EC6A  F009         	call	_setMotorPWM	;wreg free
  4642   0014E2                     
  4643                           ;dc_motor.c: 191:         _delay((unsigned long)((10)*(64000000/4000.0)));
  4644   0014E2  0ED0               	movlw	208
  4645   0014E4  6E24               	movwf	??_left_45^0,c
  4646   0014E6  0ECA               	movlw	202
  4647   0014E8                     u2857:
  4648   0014E8  2EE8               	decfsz	wreg,f,c
  4649   0014EA  D7FE               	bra	u2857
  4650   0014EC  2E24               	decfsz	??_left_45^0,f,c
  4651   0014EE  D7FC               	bra	u2857
  4652   0014F0                     l2429:
  4653                           
  4654                           ;dc_motor.c: 186:     while ((mL->power <= 50) || (mR->power <= 50)){
  4655   0014F0  C01C  FFD9         	movff	left_45@mL,fsr2l
  4656   0014F4  C01D  FFDA         	movff	left_45@mL+1,fsr2h
  4657   0014F8  0E32               	movlw	50
  4658   0014FA  64DF               	cpfsgt	indf2,c
  4659   0014FC  EF82  F00A         	goto	u1451
  4660   001500  EF84  F00A         	goto	u1450
  4661   001504                     u1451:
  4662   001504  EF41  F00A         	goto	l2415
  4663   001508                     u1450:
  4664   001508  C01E  FFD9         	movff	left_45@mR,fsr2l
  4665   00150C  C01F  FFDA         	movff	left_45@mR+1,fsr2h
  4666   001510  0E32               	movlw	50
  4667   001512  64DF               	cpfsgt	indf2,c
  4668   001514  EF8E  F00A         	goto	u1461
  4669   001518  EF90  F00A         	goto	u1460
  4670   00151C                     u1461:
  4671   00151C  EF41  F00A         	goto	l2415
  4672   001520                     u1460:
  4673   001520                     
  4674                           ;dc_motor.c: 193:     custom_delay(left_timer);
  4675   001520  C022  F003         	movff	left_45@left_timer,custom_delay@temp
  4676   001524  C023  F004         	movff	left_45@left_timer+1,custom_delay@temp+1
  4677   001528  ECDA  F010         	call	_custom_delay	;wreg free
  4678   00152C                     
  4679                           ;dc_motor.c: 194:     stop(mL,mR);
  4680   00152C  C01C  F016         	movff	left_45@mL,stop@mL
  4681   001530  C01D  F017         	movff	left_45@mL+1,stop@mL+1
  4682   001534  C01E  F018         	movff	left_45@mR,stop@mR
  4683   001538  C01F  F019         	movff	left_45@mR+1,stop@mR+1
  4684   00153C  ECDC  F00D         	call	_stop	;wreg free
  4685   001540                     
  4686                           ;dc_motor.c: 195:     _delay((unsigned long)((150)*(64000000/4000.0)));
  4687   001540  0E0D               	movlw	13
  4688   001542  6E25               	movwf	(??_left_45+1)^0,c
  4689   001544  0E2D               	movlw	45
  4690   001546  6E24               	movwf	??_left_45^0,c
  4691   001548  0ED8               	movlw	216
  4692   00154A                     u2867:
  4693   00154A  2EE8               	decfsz	wreg,f,c
  4694   00154C  D7FE               	bra	u2867
  4695   00154E  2E24               	decfsz	??_left_45^0,f,c
  4696   001550  D7FC               	bra	u2867
  4697   001552  2E25               	decfsz	(??_left_45+1)^0,f,c
  4698   001554  D7FA               	bra	u2867
  4699   001556                     
  4700                           ;dc_motor.c: 196:     LATFbits.LATF0 = 0;
  4701   001556  907E               	bcf	126,0,c	;volatile
  4702   001558                     
  4703                           ;dc_motor.c: 197:     }
  4704   001558  4A26               	infsnz	left_45@i^0,f,c
  4705   00155A  2A27               	incf	(left_45@i+1)^0,f,c
  4706   00155C                     l2443:
  4707   00155C  5020               	movf	left_45@count^0,w,c
  4708   00155E  5C26               	subwf	left_45@i^0,w,c
  4709   001560  5027               	movf	(left_45@i+1)^0,w,c
  4710   001562  0A80               	xorlw	128
  4711   001564  6E24               	movwf	??_left_45^0,c
  4712   001566  5021               	movf	(left_45@count+1)^0,w,c
  4713   001568  0A80               	xorlw	128
  4714   00156A  5824               	subwfb	??_left_45^0,w,c
  4715   00156C  A0D8               	btfss	status,0,c
  4716   00156E  EFBB  F00A         	goto	u1471
  4717   001572  EFBD  F00A         	goto	u1470
  4718   001576                     u1471:
  4719   001576  EF78  F00A         	goto	l2429
  4720   00157A                     u1470:
  4721   00157A  0012               	return		;funcret
  4722   00157C                     __end_of_left_45:
  4723                           	callstack 0
  4724                           
  4725 ;; *************** function _stop *****************
  4726 ;; Defined at:
  4727 ;;		line 156 in file "dc_motor.c"
  4728 ;; Parameters:    Size  Location     Type
  4729 ;;  mL              2   21[COMRAM] PTR struct DC_motor
  4730 ;;		 -> motorL(9), 
  4731 ;;  mR              2   23[COMRAM] PTR struct DC_motor
  4732 ;;		 -> motorR(9), 
  4733 ;; Auto vars:     Size  Location     Type
  4734 ;;  i               2   25[COMRAM] int 
  4735 ;; Return value:  Size  Location     Type
  4736 ;;                  1    wreg      void 
  4737 ;; Registers used:
  4738 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4739 ;; Tracked objects:
  4740 ;;		On entry : 0/0
  4741 ;;		On exit  : 0/0
  4742 ;;		Unchanged: 0/0
  4743 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4744 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4745 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4746 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4747 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4748 ;;Total ram usage:        6 bytes
  4749 ;; Hardware stack levels used: 1
  4750 ;; Hardware stack levels required when called: 3
  4751 ;; This function calls:
  4752 ;;		_setMotorPWM
  4753 ;; This function is called by:
  4754 ;;		_buggy_color_response
  4755 ;;		_return_home
  4756 ;;		_forward
  4757 ;;		_reverse
  4758 ;;		_left_45
  4759 ;;		_right_45
  4760 ;;		_space
  4761 ;;		_reverse_pink
  4762 ;;		_reverse_yellow
  4763 ;;		_movement
  4764 ;;		_movement_return
  4765 ;; This function uses a non-reentrant model
  4766 ;;
  4767                           
  4768                           	psect	text26
  4769   001BB8                     __ptext26:
  4770                           	callstack 0
  4771   001BB8                     _stop:
  4772                           	callstack 26
  4773   001BB8                     
  4774                           ;dc_motor.c: 156: void stop(DC_motor *mL, DC_motor *mR);dc_motor.c: 157: {;dc_motor.c: 1
      +                          58:     mL->brakemode = 1;
  4775   001BB8  EE20 F002          	lfsr	2,2
  4776   001BBC  5016               	movf	stop@mL^0,w,c
  4777   001BBE  26D9               	addwf	fsr2l,f,c
  4778   001BC0  5017               	movf	(stop@mL+1)^0,w,c
  4779   001BC2  22DA               	addwfc	fsr2h,f,c
  4780   001BC4  0E01               	movlw	1
  4781   001BC6  6EDF               	movwf	indf2,c
  4782                           
  4783                           ;dc_motor.c: 159:     mR->brakemode = 1;
  4784   001BC8  EE20 F002          	lfsr	2,2
  4785   001BCC  5018               	movf	stop@mR^0,w,c
  4786   001BCE  26D9               	addwf	fsr2l,f,c
  4787   001BD0  5019               	movf	(stop@mR+1)^0,w,c
  4788   001BD2  22DA               	addwfc	fsr2h,f,c
  4789   001BD4  0E01               	movlw	1
  4790   001BD6  6EDF               	movwf	indf2,c
  4791   001BD8                     
  4792                           ;dc_motor.c: 160:     LATDbits.LATD4 = 1;
  4793   001BD8  887C               	bsf	124,4,c	;volatile
  4794   001BDA                     
  4795                           ;dc_motor.c: 162:     for (int i = 70; i >= 0; i=i-10) {
  4796   001BDA  0E00               	movlw	0
  4797   001BDC  6E1B               	movwf	(stop@i+1)^0,c
  4798   001BDE  0E46               	movlw	70
  4799   001BE0  6E1A               	movwf	stop@i^0,c
  4800   001BE2                     l2351:
  4801                           
  4802                           ;dc_motor.c: 163:         mL -> power = i;
  4803   001BE2  C016  FFD9         	movff	stop@mL,fsr2l
  4804   001BE6  C017  FFDA         	movff	stop@mL+1,fsr2h
  4805   001BEA  C01A  FFDF         	movff	stop@i,indf2
  4806                           
  4807                           ;dc_motor.c: 164:         mR -> power = i;
  4808   001BEE  C018  FFD9         	movff	stop@mR,fsr2l
  4809   001BF2  C019  FFDA         	movff	stop@mR+1,fsr2h
  4810   001BF6  C01A  FFDF         	movff	stop@i,indf2
  4811   001BFA                     
  4812                           ;dc_motor.c: 165:         setMotorPWM(mL);
  4813   001BFA  C016  F010         	movff	stop@mL,setMotorPWM@m
  4814   001BFE  C017  F011         	movff	stop@mL+1,setMotorPWM@m+1
  4815   001C02  EC6A  F009         	call	_setMotorPWM	;wreg free
  4816   001C06                     
  4817                           ;dc_motor.c: 166:         setMotorPWM(mR);
  4818   001C06  C018  F010         	movff	stop@mR,setMotorPWM@m
  4819   001C0A  C019  F011         	movff	stop@mR+1,setMotorPWM@m+1
  4820   001C0E  EC6A  F009         	call	_setMotorPWM	;wreg free
  4821   001C12                     
  4822                           ;dc_motor.c: 167:         _delay((unsigned long)((20)*(64000000/4000000.0)));
  4823   001C12  0E6A               	movlw	106
  4824   001C14                     u2877:
  4825   001C14  2EE8               	decfsz	wreg,f,c
  4826   001C16  D7FE               	bra	u2877
  4827   001C18  D000               	nop2	
  4828   001C1A                     
  4829                           ;dc_motor.c: 168:     }
  4830   001C1A  0EF6               	movlw	246
  4831   001C1C  241A               	addwf	stop@i^0,w,c
  4832   001C1E  6E1A               	movwf	stop@i^0,c
  4833   001C20  0EFF               	movlw	255
  4834   001C22  201B               	addwfc	(stop@i+1)^0,w,c
  4835   001C24  6E1B               	movwf	(stop@i+1)^0,c
  4836   001C26  BE1B               	btfsc	(stop@i+1)^0,7,c
  4837   001C28  EF1A  F00E         	goto	u1350
  4838   001C2C  EF18  F00E         	goto	u1351
  4839   001C30                     u1351:
  4840   001C30  EFF1  F00D         	goto	l2351
  4841   001C34                     u1350:
  4842   001C34                     
  4843                           ;dc_motor.c: 170:     mL->power = 0;
  4844   001C34  C016  FFD9         	movff	stop@mL,fsr2l
  4845   001C38  C017  FFDA         	movff	stop@mL+1,fsr2h
  4846   001C3C  0E00               	movlw	0
  4847   001C3E  6EDF               	movwf	indf2,c
  4848                           
  4849                           ;dc_motor.c: 171:     mR->power = 0;
  4850   001C40  C018  FFD9         	movff	stop@mR,fsr2l
  4851   001C44  C019  FFDA         	movff	stop@mR+1,fsr2h
  4852   001C48  0E00               	movlw	0
  4853   001C4A  6EDF               	movwf	indf2,c
  4854   001C4C                     
  4855                           ;dc_motor.c: 172:     setMotorPWM(mL);
  4856   001C4C  C016  F010         	movff	stop@mL,setMotorPWM@m
  4857   001C50  C017  F011         	movff	stop@mL+1,setMotorPWM@m+1
  4858   001C54  EC6A  F009         	call	_setMotorPWM	;wreg free
  4859   001C58                     
  4860                           ;dc_motor.c: 173:     setMotorPWM(mR);
  4861   001C58  C018  F010         	movff	stop@mR,setMotorPWM@m
  4862   001C5C  C019  F011         	movff	stop@mR+1,setMotorPWM@m+1
  4863   001C60  EC6A  F009         	call	_setMotorPWM	;wreg free
  4864   001C64                     
  4865                           ;dc_motor.c: 174:     LATDbits.LATD4 = 0;
  4866   001C64  987C               	bcf	124,4,c	;volatile
  4867   001C66  0012               	return		;funcret
  4868   001C68                     __end_of_stop:
  4869                           	callstack 0
  4870                           
  4871 ;; *************** function _setMotorPWM *****************
  4872 ;; Defined at:
  4873 ;;		line 76 in file "dc_motor.c"
  4874 ;; Parameters:    Size  Location     Type
  4875 ;;  m               2   15[COMRAM] PTR struct DC_motor
  4876 ;;		 -> motorR(9), motorL(9), 
  4877 ;; Auto vars:     Size  Location     Type
  4878 ;;  negDuty         1   20[COMRAM] unsigned char 
  4879 ;;  posDuty         1   19[COMRAM] unsigned char 
  4880 ;; Return value:  Size  Location     Type
  4881 ;;                  1    wreg      void 
  4882 ;; Registers used:
  4883 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4884 ;; Tracked objects:
  4885 ;;		On entry : 0/0
  4886 ;;		On exit  : 0/0
  4887 ;;		Unchanged: 0/0
  4888 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4889 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4890 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4891 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4892 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4893 ;;Total ram usage:        6 bytes
  4894 ;; Hardware stack levels used: 1
  4895 ;; Hardware stack levels required when called: 2
  4896 ;; This function calls:
  4897 ;;		___lwdiv
  4898 ;;		___wmul
  4899 ;; This function is called by:
  4900 ;;		_forward
  4901 ;;		_reverse
  4902 ;;		_stop
  4903 ;;		_left_45
  4904 ;;		_right_45
  4905 ;;		_space
  4906 ;; This function uses a non-reentrant model
  4907 ;;
  4908                           
  4909                           	psect	text27
  4910   0012D4                     __ptext27:
  4911                           	callstack 0
  4912   0012D4                     _setMotorPWM:
  4913                           	callstack 26
  4914   0012D4                     
  4915                           ;dc_motor.c: 76: void setMotorPWM(DC_motor *m);dc_motor.c: 77: {;dc_motor.c: 78:     uns
      +                          igned char posDuty, negDuty;;dc_motor.c: 80:     if(m->brakemode) {
  4916   0012D4  EE20 F002          	lfsr	2,2
  4917   0012D8  5010               	movf	setMotorPWM@m^0,w,c
  4918   0012DA  26D9               	addwf	fsr2l,f,c
  4919   0012DC  5011               	movf	(setMotorPWM@m+1)^0,w,c
  4920   0012DE  22DA               	addwfc	fsr2h,f,c
  4921   0012E0  50DF               	movf	indf2,w,c
  4922   0012E2  B4D8               	btfsc	status,2,c
  4923   0012E4  EF76  F009         	goto	u1331
  4924   0012E8  EF78  F009         	goto	u1330
  4925   0012EC                     u1331:
  4926   0012EC  EFAC  F009         	goto	l2331
  4927   0012F0                     u1330:
  4928   0012F0                     
  4929                           ;dc_motor.c: 81:         posDuty = m->PWMperiod - ((unsigned int)(m->power)*(m->PWMperio
      +                          d))/100;
  4930   0012F0  C010  FFD9         	movff	setMotorPWM@m,fsr2l
  4931   0012F4  C011  FFDA         	movff	setMotorPWM@m+1,fsr2h
  4932   0012F8  50DF               	movf	indf2,w,c
  4933   0012FA  6E12               	movwf	??_setMotorPWM^0,c
  4934   0012FC  5012               	movf	??_setMotorPWM^0,w,c
  4935   0012FE  6E03               	movwf	___wmul@multiplier^0,c
  4936   001300  6A04               	clrf	(___wmul@multiplier+1)^0,c
  4937   001302  EE20 F003          	lfsr	2,3
  4938   001306  5010               	movf	setMotorPWM@m^0,w,c
  4939   001308  26D9               	addwf	fsr2l,f,c
  4940   00130A  5011               	movf	(setMotorPWM@m+1)^0,w,c
  4941   00130C  22DA               	addwfc	fsr2h,f,c
  4942   00130E  CFDE F005          	movff	postinc2,___wmul@multiplicand
  4943   001312  CFDD F006          	movff	postdec2,___wmul@multiplicand+1
  4944   001316  EC3D  F011         	call	___wmul	;wreg free
  4945   00131A  C003  F009         	movff	?___wmul,___lwdiv@dividend
  4946   00131E  C004  F00A         	movff	?___wmul+1,___lwdiv@dividend+1
  4947   001322  0E00               	movlw	0
  4948   001324  6E0C               	movwf	(___lwdiv@divisor+1)^0,c
  4949   001326  0E64               	movlw	100
  4950   001328  6E0B               	movwf	___lwdiv@divisor^0,c
  4951   00132A  EC0E  F00F         	call	___lwdiv	;wreg free
  4952   00132E  EE20 F003          	lfsr	2,3
  4953   001332  5010               	movf	setMotorPWM@m^0,w,c
  4954   001334  26D9               	addwf	fsr2l,f,c
  4955   001336  5011               	movf	(setMotorPWM@m+1)^0,w,c
  4956   001338  22DA               	addwfc	fsr2h,f,c
  4957   00133A  50DF               	movf	indf2,w,c
  4958   00133C  6E13               	movwf	(??_setMotorPWM+1)^0,c
  4959   00133E  5009               	movf	?___lwdiv^0,w,c
  4960   001340  5C13               	subwf	(??_setMotorPWM+1)^0,w,c
  4961   001342  6E14               	movwf	setMotorPWM@posDuty^0,c
  4962   001344                     
  4963                           ;dc_motor.c: 82:         negDuty = m->PWMperiod;
  4964   001344  EE20 F003          	lfsr	2,3
  4965   001348  5010               	movf	setMotorPWM@m^0,w,c
  4966   00134A  26D9               	addwf	fsr2l,f,c
  4967   00134C  5011               	movf	(setMotorPWM@m+1)^0,w,c
  4968   00134E  22DA               	addwfc	fsr2h,f,c
  4969   001350  50DF               	movf	indf2,w,c
  4970   001352  6E15               	movwf	setMotorPWM@negDuty^0,c
  4971                           
  4972                           ;dc_motor.c: 83:     }
  4973   001354  EFCF  F009         	goto	l2335
  4974   001358                     l2331:
  4975                           
  4976                           ;dc_motor.c: 85:         posDuty=0;
  4977   001358  0E00               	movlw	0
  4978   00135A  6E14               	movwf	setMotorPWM@posDuty^0,c
  4979   00135C                     
  4980                           ;dc_motor.c: 86:   negDuty=((unsigned int)(m->power)*(m->PWMperiod))/100;
  4981   00135C  C010  FFD9         	movff	setMotorPWM@m,fsr2l
  4982   001360  C011  FFDA         	movff	setMotorPWM@m+1,fsr2h
  4983   001364  50DF               	movf	indf2,w,c
  4984   001366  6E12               	movwf	??_setMotorPWM^0,c
  4985   001368  5012               	movf	??_setMotorPWM^0,w,c
  4986   00136A  6E03               	movwf	___wmul@multiplier^0,c
  4987   00136C  6A04               	clrf	(___wmul@multiplier+1)^0,c
  4988   00136E  EE20 F003          	lfsr	2,3
  4989   001372  5010               	movf	setMotorPWM@m^0,w,c
  4990   001374  26D9               	addwf	fsr2l,f,c
  4991   001376  5011               	movf	(setMotorPWM@m+1)^0,w,c
  4992   001378  22DA               	addwfc	fsr2h,f,c
  4993   00137A  CFDE F005          	movff	postinc2,___wmul@multiplicand
  4994   00137E  CFDD F006          	movff	postdec2,___wmul@multiplicand+1
  4995   001382  EC3D  F011         	call	___wmul	;wreg free
  4996   001386  C003  F009         	movff	?___wmul,___lwdiv@dividend
  4997   00138A  C004  F00A         	movff	?___wmul+1,___lwdiv@dividend+1
  4998   00138E  0E00               	movlw	0
  4999   001390  6E0C               	movwf	(___lwdiv@divisor+1)^0,c
  5000   001392  0E64               	movlw	100
  5001   001394  6E0B               	movwf	___lwdiv@divisor^0,c
  5002   001396  EC0E  F00F         	call	___lwdiv	;wreg free
  5003   00139A  5009               	movf	?___lwdiv^0,w,c
  5004   00139C  6E15               	movwf	setMotorPWM@negDuty^0,c
  5005   00139E                     l2335:
  5006                           
  5007                           ;dc_motor.c: 89:     if (m->direction) {
  5008   00139E  EE20 F001          	lfsr	2,1
  5009   0013A2  5010               	movf	setMotorPWM@m^0,w,c
  5010   0013A4  26D9               	addwf	fsr2l,f,c
  5011   0013A6  5011               	movf	(setMotorPWM@m+1)^0,w,c
  5012   0013A8  22DA               	addwfc	fsr2h,f,c
  5013   0013AA  50DF               	movf	indf2,w,c
  5014   0013AC  B4D8               	btfsc	status,2,c
  5015   0013AE  EFDB  F009         	goto	u1341
  5016   0013B2  EFDD  F009         	goto	u1340
  5017   0013B6                     u1341:
  5018   0013B6  EFFF  F009         	goto	l2339
  5019   0013BA                     u1340:
  5020   0013BA                     
  5021                           ;dc_motor.c: 90:         *(m->posDutyHighByte)= posDuty;
  5022   0013BA  EE20 F005          	lfsr	2,5
  5023   0013BE  5010               	movf	setMotorPWM@m^0,w,c
  5024   0013C0  26D9               	addwf	fsr2l,f,c
  5025   0013C2  5011               	movf	(setMotorPWM@m+1)^0,w,c
  5026   0013C4  22DA               	addwfc	fsr2h,f,c
  5027   0013C6  CFDE F012          	movff	postinc2,??_setMotorPWM
  5028   0013CA  CFDD F013          	movff	postdec2,??_setMotorPWM+1
  5029   0013CE  C012  FFD9         	movff	??_setMotorPWM,fsr2l
  5030   0013D2  C013  FFDA         	movff	??_setMotorPWM+1,fsr2h
  5031   0013D6  C014  FFDF         	movff	setMotorPWM@posDuty,indf2
  5032                           
  5033                           ;dc_motor.c: 91:         *(m->negDutyHighByte)= negDuty;
  5034   0013DA  EE20 F007          	lfsr	2,7
  5035   0013DE  5010               	movf	setMotorPWM@m^0,w,c
  5036   0013E0  26D9               	addwf	fsr2l,f,c
  5037   0013E2  5011               	movf	(setMotorPWM@m+1)^0,w,c
  5038   0013E4  22DA               	addwfc	fsr2h,f,c
  5039   0013E6  CFDE F012          	movff	postinc2,??_setMotorPWM
  5040   0013EA  CFDD F013          	movff	postdec2,??_setMotorPWM+1
  5041   0013EE  C012  FFD9         	movff	??_setMotorPWM,fsr2l
  5042   0013F2  C013  FFDA         	movff	??_setMotorPWM+1,fsr2h
  5043   0013F6  C015  FFDF         	movff	setMotorPWM@negDuty,indf2
  5044                           
  5045                           ;dc_motor.c: 92:     } else {
  5046   0013FA  EF1F  F00A         	goto	l293
  5047   0013FE                     l2339:
  5048                           
  5049                           ;dc_motor.c: 93:         *(m->posDutyHighByte)= negDuty;
  5050   0013FE  EE20 F005          	lfsr	2,5
  5051   001402  5010               	movf	setMotorPWM@m^0,w,c
  5052   001404  26D9               	addwf	fsr2l,f,c
  5053   001406  5011               	movf	(setMotorPWM@m+1)^0,w,c
  5054   001408  22DA               	addwfc	fsr2h,f,c
  5055   00140A  CFDE F012          	movff	postinc2,??_setMotorPWM
  5056   00140E  CFDD F013          	movff	postdec2,??_setMotorPWM+1
  5057   001412  C012  FFD9         	movff	??_setMotorPWM,fsr2l
  5058   001416  C013  FFDA         	movff	??_setMotorPWM+1,fsr2h
  5059   00141A  C015  FFDF         	movff	setMotorPWM@negDuty,indf2
  5060                           
  5061                           ;dc_motor.c: 94:         *(m->negDutyHighByte)= posDuty;
  5062   00141E  EE20 F007          	lfsr	2,7
  5063   001422  5010               	movf	setMotorPWM@m^0,w,c
  5064   001424  26D9               	addwf	fsr2l,f,c
  5065   001426  5011               	movf	(setMotorPWM@m+1)^0,w,c
  5066   001428  22DA               	addwfc	fsr2h,f,c
  5067   00142A  CFDE F012          	movff	postinc2,??_setMotorPWM
  5068   00142E  CFDD F013          	movff	postdec2,??_setMotorPWM+1
  5069   001432  C012  FFD9         	movff	??_setMotorPWM,fsr2l
  5070   001436  C013  FFDA         	movff	??_setMotorPWM+1,fsr2h
  5071   00143A  C014  FFDF         	movff	setMotorPWM@posDuty,indf2
  5072   00143E                     l293:
  5073   00143E  0012               	return		;funcret
  5074   001440                     __end_of_setMotorPWM:
  5075                           	callstack 0
  5076                           
  5077 ;; *************** function ___wmul *****************
  5078 ;; Defined at:
  5079 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\Umul16.c"
  5080 ;; Parameters:    Size  Location     Type
  5081 ;;  multiplier      2    2[COMRAM] unsigned int 
  5082 ;;  multiplicand    2    4[COMRAM] unsigned int 
  5083 ;; Auto vars:     Size  Location     Type
  5084 ;;  product         2    6[COMRAM] unsigned int 
  5085 ;; Return value:  Size  Location     Type
  5086 ;;                  2    2[COMRAM] unsigned int 
  5087 ;; Registers used:
  5088 ;;		wreg, status,2, status,0, prodl, prodh
  5089 ;; Tracked objects:
  5090 ;;		On entry : 0/0
  5091 ;;		On exit  : 0/0
  5092 ;;		Unchanged: 0/0
  5093 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5094 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5095 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5096 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5097 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5098 ;;Total ram usage:        6 bytes
  5099 ;; Hardware stack levels used: 1
  5100 ;; Hardware stack levels required when called: 1
  5101 ;; This function calls:
  5102 ;;		Nothing
  5103 ;; This function is called by:
  5104 ;;		_setMotorPWM
  5105 ;; This function uses a non-reentrant model
  5106 ;;
  5107                           
  5108                           	psect	text28
  5109   00227A                     __ptext28:
  5110                           	callstack 0
  5111   00227A                     ___wmul:
  5112                           	callstack 26
  5113   00227A  5003               	movf	___wmul@multiplier^0,w,c
  5114   00227C  0205               	mulwf	___wmul@multiplicand^0,c
  5115   00227E  CFF3 F007          	movff	prodl,___wmul@product
  5116   002282  CFF4 F008          	movff	prodh,___wmul@product+1
  5117   002286  5003               	movf	___wmul@multiplier^0,w,c
  5118   002288  0206               	mulwf	(___wmul@multiplicand+1)^0,c
  5119   00228A  50F3               	movf	243,w,c
  5120   00228C  2608               	addwf	(___wmul@product+1)^0,f,c
  5121   00228E  5004               	movf	(___wmul@multiplier+1)^0,w,c
  5122   002290  0205               	mulwf	___wmul@multiplicand^0,c
  5123   002292  50F3               	movf	243,w,c
  5124   002294  2608               	addwf	(___wmul@product+1)^0,f,c
  5125   002296  C007  F003         	movff	___wmul@product,?___wmul
  5126   00229A  C008  F004         	movff	___wmul@product+1,?___wmul+1
  5127   00229E  0012               	return		;funcret
  5128   0022A0                     __end_of___wmul:
  5129                           	callstack 0
  5130                           
  5131 ;; *************** function ___lwdiv *****************
  5132 ;; Defined at:
  5133 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\lwdiv.c"
  5134 ;; Parameters:    Size  Location     Type
  5135 ;;  dividend        2    8[COMRAM] unsigned int 
  5136 ;;  divisor         2   10[COMRAM] unsigned int 
  5137 ;; Auto vars:     Size  Location     Type
  5138 ;;  quotient        2   12[COMRAM] unsigned int 
  5139 ;;  counter         1   14[COMRAM] unsigned char 
  5140 ;; Return value:  Size  Location     Type
  5141 ;;                  2    8[COMRAM] unsigned int 
  5142 ;; Registers used:
  5143 ;;		wreg, status,2, status,0
  5144 ;; Tracked objects:
  5145 ;;		On entry : 0/0
  5146 ;;		On exit  : 0/0
  5147 ;;		Unchanged: 0/0
  5148 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5149 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5150 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5151 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5152 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5153 ;;Total ram usage:        7 bytes
  5154 ;; Hardware stack levels used: 1
  5155 ;; Hardware stack levels required when called: 1
  5156 ;; This function calls:
  5157 ;;		Nothing
  5158 ;; This function is called by:
  5159 ;;		_setMotorPWM
  5160 ;; This function uses a non-reentrant model
  5161 ;;
  5162                           
  5163                           	psect	text29
  5164   001E1C                     __ptext29:
  5165                           	callstack 0
  5166   001E1C                     ___lwdiv:
  5167                           	callstack 26
  5168   001E1C  0E00               	movlw	0
  5169   001E1E  6E0E               	movwf	(___lwdiv@quotient+1)^0,c
  5170   001E20  0E00               	movlw	0
  5171   001E22  6E0D               	movwf	___lwdiv@quotient^0,c
  5172   001E24  500B               	movf	___lwdiv@divisor^0,w,c
  5173   001E26  100C               	iorwf	(___lwdiv@divisor+1)^0,w,c
  5174   001E28  B4D8               	btfsc	status,2,c
  5175   001E2A  EF19  F00F         	goto	u1301
  5176   001E2E  EF1B  F00F         	goto	u1300
  5177   001E32                     u1301:
  5178   001E32  EF43  F00F         	goto	l1129
  5179   001E36                     u1300:
  5180   001E36  0E01               	movlw	1
  5181   001E38  6E0F               	movwf	___lwdiv@counter^0,c
  5182   001E3A  EF23  F00F         	goto	l2311
  5183   001E3E                     l2309:
  5184   001E3E  90D8               	bcf	status,0,c
  5185   001E40  360B               	rlcf	___lwdiv@divisor^0,f,c
  5186   001E42  360C               	rlcf	(___lwdiv@divisor+1)^0,f,c
  5187   001E44  2A0F               	incf	___lwdiv@counter^0,f,c
  5188   001E46                     l2311:
  5189   001E46  AE0C               	btfss	(___lwdiv@divisor+1)^0,7,c
  5190   001E48  EF28  F00F         	goto	u1311
  5191   001E4C  EF2A  F00F         	goto	u1310
  5192   001E50                     u1311:
  5193   001E50  EF1F  F00F         	goto	l2309
  5194   001E54                     u1310:
  5195   001E54                     l2313:
  5196   001E54  90D8               	bcf	status,0,c
  5197   001E56  360D               	rlcf	___lwdiv@quotient^0,f,c
  5198   001E58  360E               	rlcf	(___lwdiv@quotient+1)^0,f,c
  5199   001E5A  500B               	movf	___lwdiv@divisor^0,w,c
  5200   001E5C  5C09               	subwf	___lwdiv@dividend^0,w,c
  5201   001E5E  500C               	movf	(___lwdiv@divisor+1)^0,w,c
  5202   001E60  580A               	subwfb	(___lwdiv@dividend+1)^0,w,c
  5203   001E62  A0D8               	btfss	status,0,c
  5204   001E64  EF36  F00F         	goto	u1321
  5205   001E68  EF38  F00F         	goto	u1320
  5206   001E6C                     u1321:
  5207   001E6C  EF3D  F00F         	goto	l2321
  5208   001E70                     u1320:
  5209   001E70  500B               	movf	___lwdiv@divisor^0,w,c
  5210   001E72  5E09               	subwf	___lwdiv@dividend^0,f,c
  5211   001E74  500C               	movf	(___lwdiv@divisor+1)^0,w,c
  5212   001E76  5A0A               	subwfb	(___lwdiv@dividend+1)^0,f,c
  5213   001E78  800D               	bsf	___lwdiv@quotient^0,0,c
  5214   001E7A                     l2321:
  5215   001E7A  90D8               	bcf	status,0,c
  5216   001E7C  320C               	rrcf	(___lwdiv@divisor+1)^0,f,c
  5217   001E7E  320B               	rrcf	___lwdiv@divisor^0,f,c
  5218   001E80  2E0F               	decfsz	___lwdiv@counter^0,f,c
  5219   001E82  EF2A  F00F         	goto	l2313
  5220   001E86                     l1129:
  5221   001E86  C00D  F009         	movff	___lwdiv@quotient,?___lwdiv
  5222   001E8A  C00E  F00A         	movff	___lwdiv@quotient+1,?___lwdiv+1
  5223   001E8E  0012               	return		;funcret
  5224   001E90                     __end_of___lwdiv:
  5225                           	callstack 0
  5226                           
  5227 ;; *************** function _custom_delay *****************
  5228 ;; Defined at:
  5229 ;;		line 29 in file "calibration.c"
  5230 ;; Parameters:    Size  Location     Type
  5231 ;;  temp            2    2[COMRAM] int 
  5232 ;; Auto vars:     Size  Location     Type
  5233 ;;  i               2    5[COMRAM] int 
  5234 ;; Return value:  Size  Location     Type
  5235 ;;                  1    wreg      void 
  5236 ;; Registers used:
  5237 ;;		wreg, status,2, status,0
  5238 ;; Tracked objects:
  5239 ;;		On entry : 0/0
  5240 ;;		On exit  : 0/0
  5241 ;;		Unchanged: 0/0
  5242 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5243 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5244 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5245 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5246 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5247 ;;Total ram usage:        5 bytes
  5248 ;; Hardware stack levels used: 1
  5249 ;; Hardware stack levels required when called: 1
  5250 ;; This function calls:
  5251 ;;		Nothing
  5252 ;; This function is called by:
  5253 ;;		_left_45
  5254 ;;		_right_45
  5255 ;; This function uses a non-reentrant model
  5256 ;;
  5257                           
  5258                           	psect	text30
  5259   0021B4                     __ptext30:
  5260                           	callstack 0
  5261   0021B4                     _custom_delay:
  5262                           	callstack 25
  5263   0021B4                     
  5264                           ;calibration.c: 30: int i;;calibration.c: 31: for (i = 0; i < temp; i++){_delay((unsigne
      +                          d long)((1)*(64000000/4000.0)));}
  5265   0021B4  0E00               	movlw	0
  5266   0021B6  6E07               	movwf	(custom_delay@i+1)^0,c
  5267   0021B8  0E00               	movlw	0
  5268   0021BA  6E06               	movwf	custom_delay@i^0,c
  5269   0021BC  EFEA  F010         	goto	l543
  5270   0021C0                     l2373:
  5271   0021C0  0E15               	movlw	21
  5272   0021C2  6E05               	movwf	??_custom_delay^0,c
  5273   0021C4  0EC6               	movlw	198
  5274   0021C6                     u2887:
  5275   0021C6  2EE8               	decfsz	wreg,f,c
  5276   0021C8  D7FE               	bra	u2887
  5277   0021CA  2E05               	decfsz	??_custom_delay^0,f,c
  5278   0021CC  D7FC               	bra	u2887
  5279   0021CE  D000               	nop2	
  5280   0021D0  4A06               	infsnz	custom_delay@i^0,f,c
  5281   0021D2  2A07               	incf	(custom_delay@i+1)^0,f,c
  5282   0021D4                     l543:
  5283   0021D4  5003               	movf	custom_delay@temp^0,w,c
  5284   0021D6  5C06               	subwf	custom_delay@i^0,w,c
  5285   0021D8  5007               	movf	(custom_delay@i+1)^0,w,c
  5286   0021DA  0A80               	xorlw	128
  5287   0021DC  6E05               	movwf	??_custom_delay^0,c
  5288   0021DE  5004               	movf	(custom_delay@temp+1)^0,w,c
  5289   0021E0  0A80               	xorlw	128
  5290   0021E2  5805               	subwfb	??_custom_delay^0,w,c
  5291   0021E4  A0D8               	btfss	status,0,c
  5292   0021E6  EFF7  F010         	goto	u1361
  5293   0021EA  EFF9  F010         	goto	u1360
  5294   0021EE                     u1361:
  5295   0021EE  EFE0  F010         	goto	l2373
  5296   0021F2                     u1360:
  5297   0021F2  0012               	return		;funcret
  5298   0021F4                     __end_of_custom_delay:
  5299                           	callstack 0
  5300                           
  5301 ;; *************** function ___flge *****************
  5302 ;; Defined at:
  5303 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\flge.c"
  5304 ;; Parameters:    Size  Location     Type
  5305 ;;  ff1             4    2[COMRAM] void 
  5306 ;;  ff2             4    6[COMRAM] void 
  5307 ;; Auto vars:     Size  Location     Type
  5308 ;;		None
  5309 ;; Return value:  Size  Location     Type
  5310 ;;		None               void
  5311 ;; Registers used:
  5312 ;;		wreg, status,2, status,0
  5313 ;; Tracked objects:
  5314 ;;		On entry : 0/0
  5315 ;;		On exit  : 0/0
  5316 ;;		Unchanged: 0/0
  5317 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5318 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5319 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5320 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5321 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5322 ;;Total ram usage:       12 bytes
  5323 ;; Hardware stack levels used: 1
  5324 ;; Hardware stack levels required when called: 1
  5325 ;; This function calls:
  5326 ;;		Nothing
  5327 ;; This function is called by:
  5328 ;;		_buggy_color_response
  5329 ;; This function uses a non-reentrant model
  5330 ;;
  5331                           
  5332                           	psect	text31
  5333   0017DE                     __ptext31:
  5334                           	callstack 0
  5335   0017DE                     ___flge:
  5336                           	callstack 28
  5337   0017DE  0E00               	movlw	0
  5338   0017E0  1403               	andwf	___flge@ff1^0,w,c
  5339   0017E2  6E0B               	movwf	??___flge^0,c
  5340   0017E4  0E00               	movlw	0
  5341   0017E6  1404               	andwf	(___flge@ff1+1)^0,w,c
  5342   0017E8  6E0C               	movwf	(??___flge+1)^0,c
  5343   0017EA  0E80               	movlw	128
  5344   0017EC  1405               	andwf	(___flge@ff1+2)^0,w,c
  5345   0017EE  6E0D               	movwf	(??___flge+2)^0,c
  5346   0017F0  0E7F               	movlw	127
  5347   0017F2  1406               	andwf	(___flge@ff1+3)^0,w,c
  5348   0017F4  6E0E               	movwf	(??___flge+3)^0,c
  5349   0017F6  500B               	movf	??___flge^0,w,c
  5350   0017F8  100C               	iorwf	(??___flge+1)^0,w,c
  5351   0017FA  100D               	iorwf	(??___flge+2)^0,w,c
  5352   0017FC  100E               	iorwf	(??___flge+3)^0,w,c
  5353   0017FE  A4D8               	btfss	status,2,c
  5354   001800  EF04  F00C         	goto	u2111
  5355   001804  EF06  F00C         	goto	u2110
  5356   001808                     u2111:
  5357   001808  EF0E  F00C         	goto	l3013
  5358   00180C                     u2110:
  5359   00180C  0E00               	movlw	0
  5360   00180E  6E03               	movwf	___flge@ff1^0,c
  5361   001810  0E00               	movlw	0
  5362   001812  6E04               	movwf	(___flge@ff1+1)^0,c
  5363   001814  0E00               	movlw	0
  5364   001816  6E05               	movwf	(___flge@ff1+2)^0,c
  5365   001818  0E00               	movlw	0
  5366   00181A  6E06               	movwf	(___flge@ff1+3)^0,c
  5367   00181C                     l3013:
  5368   00181C  0E00               	movlw	0
  5369   00181E  1407               	andwf	___flge@ff2^0,w,c
  5370   001820  6E0B               	movwf	??___flge^0,c
  5371   001822  0E00               	movlw	0
  5372   001824  1408               	andwf	(___flge@ff2+1)^0,w,c
  5373   001826  6E0C               	movwf	(??___flge+1)^0,c
  5374   001828  0E80               	movlw	128
  5375   00182A  1409               	andwf	(___flge@ff2+2)^0,w,c
  5376   00182C  6E0D               	movwf	(??___flge+2)^0,c
  5377   00182E  0E7F               	movlw	127
  5378   001830  140A               	andwf	(___flge@ff2+3)^0,w,c
  5379   001832  6E0E               	movwf	(??___flge+3)^0,c
  5380   001834  500B               	movf	??___flge^0,w,c
  5381   001836  100C               	iorwf	(??___flge+1)^0,w,c
  5382   001838  100D               	iorwf	(??___flge+2)^0,w,c
  5383   00183A  100E               	iorwf	(??___flge+3)^0,w,c
  5384   00183C  A4D8               	btfss	status,2,c
  5385   00183E  EF23  F00C         	goto	u2121
  5386   001842  EF25  F00C         	goto	u2120
  5387   001846                     u2121:
  5388   001846  EF2D  F00C         	goto	l3017
  5389   00184A                     u2120:
  5390   00184A  0E00               	movlw	0
  5391   00184C  6E07               	movwf	___flge@ff2^0,c
  5392   00184E  0E00               	movlw	0
  5393   001850  6E08               	movwf	(___flge@ff2+1)^0,c
  5394   001852  0E00               	movlw	0
  5395   001854  6E09               	movwf	(___flge@ff2+2)^0,c
  5396   001856  0E00               	movlw	0
  5397   001858  6E0A               	movwf	(___flge@ff2+3)^0,c
  5398   00185A                     l3017:
  5399   00185A  AE06               	btfss	(___flge@ff1+3)^0,7,c
  5400   00185C  EF32  F00C         	goto	u2131
  5401   001860  EF34  F00C         	goto	u2130
  5402   001864                     u2131:
  5403   001864  EF3D  F00C         	goto	l3021
  5404   001868                     u2130:
  5405   001868  6C03               	negf	___flge@ff1^0,c
  5406   00186A  1E04               	comf	(___flge@ff1+1)^0,f,c
  5407   00186C  B0D8               	btfsc	status,0,c
  5408   00186E  2A04               	incf	(___flge@ff1+1)^0,f,c
  5409   001870  1E05               	comf	(___flge@ff1+2)^0,f,c
  5410   001872  B0D8               	btfsc	status,0,c
  5411   001874  2A05               	incf	(___flge@ff1+2)^0,f,c
  5412   001876  0E80               	movlw	128
  5413   001878  5606               	subfwb	(___flge@ff1+3)^0,f,c
  5414   00187A                     l3021:
  5415   00187A  AE0A               	btfss	(___flge@ff2+3)^0,7,c
  5416   00187C  EF42  F00C         	goto	u2141
  5417   001880  EF44  F00C         	goto	u2140
  5418   001884                     u2141:
  5419   001884  EF4D  F00C         	goto	l903
  5420   001888                     u2140:
  5421   001888  6C07               	negf	___flge@ff2^0,c
  5422   00188A  1E08               	comf	(___flge@ff2+1)^0,f,c
  5423   00188C  B0D8               	btfsc	status,0,c
  5424   00188E  2A08               	incf	(___flge@ff2+1)^0,f,c
  5425   001890  1E09               	comf	(___flge@ff2+2)^0,f,c
  5426   001892  B0D8               	btfsc	status,0,c
  5427   001894  2A09               	incf	(___flge@ff2+2)^0,f,c
  5428   001896  0E80               	movlw	128
  5429   001898  560A               	subfwb	(___flge@ff2+3)^0,f,c
  5430   00189A                     l903:
  5431   00189A  0E00               	movlw	0
  5432   00189C  1A03               	xorwf	___flge@ff1^0,f,c
  5433   00189E  0E00               	movlw	0
  5434   0018A0  1A04               	xorwf	(___flge@ff1+1)^0,f,c
  5435   0018A2  0E00               	movlw	0
  5436   0018A4  1A05               	xorwf	(___flge@ff1+2)^0,f,c
  5437   0018A6  0E80               	movlw	128
  5438   0018A8  1A06               	xorwf	(___flge@ff1+3)^0,f,c
  5439   0018AA  0E00               	movlw	0
  5440   0018AC  1A07               	xorwf	___flge@ff2^0,f,c
  5441   0018AE  0E00               	movlw	0
  5442   0018B0  1A08               	xorwf	(___flge@ff2+1)^0,f,c
  5443   0018B2  0E00               	movlw	0
  5444   0018B4  1A09               	xorwf	(___flge@ff2+2)^0,f,c
  5445   0018B6  0E80               	movlw	128
  5446   0018B8  1A0A               	xorwf	(___flge@ff2+3)^0,f,c
  5447   0018BA  5007               	movf	___flge@ff2^0,w,c
  5448   0018BC  5C03               	subwf	___flge@ff1^0,w,c
  5449   0018BE  5008               	movf	(___flge@ff2+1)^0,w,c
  5450   0018C0  5804               	subwfb	(___flge@ff1+1)^0,w,c
  5451   0018C2  5009               	movf	(___flge@ff2+2)^0,w,c
  5452   0018C4  5805               	subwfb	(___flge@ff1+2)^0,w,c
  5453   0018C6  500A               	movf	(___flge@ff2+3)^0,w,c
  5454   0018C8  5806               	subwfb	(___flge@ff1+3)^0,w,c
  5455   0018CA  B0D8               	btfsc	status,0,c
  5456   0018CC  EF6A  F00C         	goto	u2151
  5457   0018D0  EF6C  F00C         	goto	u2150
  5458   0018D4                     u2151:
  5459   0018D4  EF6F  F00C         	goto	l3027
  5460   0018D8                     u2150:
  5461   0018D8  90D8               	bcf	status,0,c
  5462   0018DA  EF70  F00C         	goto	l908
  5463   0018DE                     l3027:
  5464   0018DE  80D8               	bsf	status,0,c
  5465   0018E0                     l908:
  5466   0018E0  0012               	return		;funcret
  5467   0018E2                     __end_of___flge:
  5468                           	callstack 0
  5469                           
  5470 ;; *************** function _READcolor *****************
  5471 ;; Defined at:
  5472 ;;		line 91 in file "color.c"
  5473 ;; Parameters:    Size  Location     Type
  5474 ;;  c               2   41[COMRAM] PTR struct colors
  5475 ;;		 -> color(20), 
  5476 ;; Auto vars:     Size  Location     Type
  5477 ;;		None
  5478 ;; Return value:  Size  Location     Type
  5479 ;;                  1    wreg      void 
  5480 ;; Registers used:
  5481 ;;		wreg, status,2, status,0, cstack
  5482 ;; Tracked objects:
  5483 ;;		On entry : 0/0
  5484 ;;		On exit  : 0/0
  5485 ;;		Unchanged: 0/0
  5486 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5487 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5488 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5489 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5490 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5491 ;;Total ram usage:        2 bytes
  5492 ;; Hardware stack levels used: 1
  5493 ;; Hardware stack levels required when called: 4
  5494 ;; This function calls:
  5495 ;;		___fldiv
  5496 ;;		___xxtofl
  5497 ;;		_color_read_Blue
  5498 ;;		_color_read_Clear
  5499 ;;		_color_read_Green
  5500 ;;		_color_read_Red
  5501 ;; This function is called by:
  5502 ;;		_buggy_color_response
  5503 ;; This function uses a non-reentrant model
  5504 ;;
  5505                           
  5506                           	psect	text32
  5507   00157C                     __ptext32:
  5508                           	callstack 0
  5509   00157C                     _READcolor:
  5510                           	callstack 25
  5511   00157C                     
  5512                           ;color.c: 93:     color.R = color_read_Red();
  5513   00157C  ECB2  F00F         	call	_color_read_Red	;wreg free
  5514   001580  C007  F045         	movff	?_color_read_Red,_color
  5515   001584  C008  F046         	movff	?_color_read_Red+1,_color+1
  5516                           
  5517                           ;color.c: 94:     color.B = color_read_Blue();
  5518   001588  EC2A  F010         	call	_color_read_Blue	;wreg free
  5519   00158C  C007  F047         	movff	?_color_read_Blue,_color+2
  5520   001590  C008  F048         	movff	?_color_read_Blue+1,_color+3
  5521                           
  5522                           ;color.c: 95:     color.G = color_read_Green();
  5523   001594  ECDA  F00F         	call	_color_read_Green	;wreg free
  5524   001598  C007  F049         	movff	?_color_read_Green,_color+4
  5525   00159C  C008  F04A         	movff	?_color_read_Green+1,_color+5
  5526                           
  5527                           ;color.c: 96:     color.C = color_read_Clear();
  5528   0015A0  EC02  F010         	call	_color_read_Clear	;wreg free
  5529   0015A4  C007  F04B         	movff	?_color_read_Clear,_color+6
  5530   0015A8  C008  F04C         	movff	?_color_read_Clear+1,_color+7
  5531                           
  5532                           ;color.c: 98:     color.R_norm = (float)color.R / (float)color.C;
  5533   0015AC  C045  F003         	movff	_color,___xxtofl@val
  5534   0015B0  C046  F004         	movff	_color+1,___xxtofl@val+1
  5535   0015B4  6A05               	clrf	(___xxtofl@val+2)^0,c
  5536   0015B6  6A06               	clrf	(___xxtofl@val+3)^0,c
  5537   0015B8  0E00               	movlw	0
  5538   0015BA  ECD5  F007         	call	___xxtofl
  5539   0015BE  C003  F011         	movff	?___xxtofl,___fldiv@b
  5540   0015C2  C004  F012         	movff	?___xxtofl+1,___fldiv@b+1
  5541   0015C6  C005  F013         	movff	?___xxtofl+2,___fldiv@b+2
  5542   0015CA  C006  F014         	movff	?___xxtofl+3,___fldiv@b+3
  5543   0015CE  C04B  F003         	movff	_color+6,___xxtofl@val
  5544   0015D2  C04C  F004         	movff	_color+7,___xxtofl@val+1
  5545   0015D6  6A05               	clrf	(___xxtofl@val+2)^0,c
  5546   0015D8  6A06               	clrf	(___xxtofl@val+3)^0,c
  5547   0015DA  0E00               	movlw	0
  5548   0015DC  ECD5  F007         	call	___xxtofl
  5549   0015E0  C003  F015         	movff	?___xxtofl,___fldiv@a
  5550   0015E4  C004  F016         	movff	?___xxtofl+1,___fldiv@a+1
  5551   0015E8  C005  F017         	movff	?___xxtofl+2,___fldiv@a+2
  5552   0015EC  C006  F018         	movff	?___xxtofl+3,___fldiv@a+3
  5553   0015F0  EC94  F003         	call	___fldiv	;wreg free
  5554   0015F4  C011  F04D         	movff	?___fldiv,_color+8
  5555   0015F8  C012  F04E         	movff	?___fldiv+1,_color+9
  5556   0015FC  C013  F04F         	movff	?___fldiv+2,_color+10
  5557   001600  C014  F050         	movff	?___fldiv+3,_color+11
  5558                           
  5559                           ;color.c: 99:     color.B_norm = (float)color.B / (float)color.C;
  5560   001604  C047  F003         	movff	_color+2,___xxtofl@val
  5561   001608  C048  F004         	movff	_color+3,___xxtofl@val+1
  5562   00160C  6A05               	clrf	(___xxtofl@val+2)^0,c
  5563   00160E  6A06               	clrf	(___xxtofl@val+3)^0,c
  5564   001610  0E00               	movlw	0
  5565   001612  ECD5  F007         	call	___xxtofl
  5566   001616  C003  F011         	movff	?___xxtofl,___fldiv@b
  5567   00161A  C004  F012         	movff	?___xxtofl+1,___fldiv@b+1
  5568   00161E  C005  F013         	movff	?___xxtofl+2,___fldiv@b+2
  5569   001622  C006  F014         	movff	?___xxtofl+3,___fldiv@b+3
  5570   001626  C04B  F003         	movff	_color+6,___xxtofl@val
  5571   00162A  C04C  F004         	movff	_color+7,___xxtofl@val+1
  5572   00162E  6A05               	clrf	(___xxtofl@val+2)^0,c
  5573   001630  6A06               	clrf	(___xxtofl@val+3)^0,c
  5574   001632  0E00               	movlw	0
  5575   001634  ECD5  F007         	call	___xxtofl
  5576   001638  C003  F015         	movff	?___xxtofl,___fldiv@a
  5577   00163C  C004  F016         	movff	?___xxtofl+1,___fldiv@a+1
  5578   001640  C005  F017         	movff	?___xxtofl+2,___fldiv@a+2
  5579   001644  C006  F018         	movff	?___xxtofl+3,___fldiv@a+3
  5580   001648  EC94  F003         	call	___fldiv	;wreg free
  5581   00164C  C011  F051         	movff	?___fldiv,_color+12
  5582   001650  C012  F052         	movff	?___fldiv+1,_color+13
  5583   001654  C013  F053         	movff	?___fldiv+2,_color+14
  5584   001658  C014  F054         	movff	?___fldiv+3,_color+15
  5585                           
  5586                           ;color.c: 100:     color.G_norm = (float)color.G / (float)color.C;
  5587   00165C  C049  F003         	movff	_color+4,___xxtofl@val
  5588   001660  C04A  F004         	movff	_color+5,___xxtofl@val+1
  5589   001664  6A05               	clrf	(___xxtofl@val+2)^0,c
  5590   001666  6A06               	clrf	(___xxtofl@val+3)^0,c
  5591   001668  0E00               	movlw	0
  5592   00166A  ECD5  F007         	call	___xxtofl
  5593   00166E  C003  F011         	movff	?___xxtofl,___fldiv@b
  5594   001672  C004  F012         	movff	?___xxtofl+1,___fldiv@b+1
  5595   001676  C005  F013         	movff	?___xxtofl+2,___fldiv@b+2
  5596   00167A  C006  F014         	movff	?___xxtofl+3,___fldiv@b+3
  5597   00167E  C04B  F003         	movff	_color+6,___xxtofl@val
  5598   001682  C04C  F004         	movff	_color+7,___xxtofl@val+1
  5599   001686  6A05               	clrf	(___xxtofl@val+2)^0,c
  5600   001688  6A06               	clrf	(___xxtofl@val+3)^0,c
  5601   00168A  0E00               	movlw	0
  5602   00168C  ECD5  F007         	call	___xxtofl
  5603   001690  C003  F015         	movff	?___xxtofl,___fldiv@a
  5604   001694  C004  F016         	movff	?___xxtofl+1,___fldiv@a+1
  5605   001698  C005  F017         	movff	?___xxtofl+2,___fldiv@a+2
  5606   00169C  C006  F018         	movff	?___xxtofl+3,___fldiv@a+3
  5607   0016A0  EC94  F003         	call	___fldiv	;wreg free
  5608   0016A4  C011  F055         	movff	?___fldiv,_color+16
  5609   0016A8  C012  F056         	movff	?___fldiv+1,_color+17
  5610   0016AC  C013  F057         	movff	?___fldiv+2,_color+18
  5611   0016B0  C014  F058         	movff	?___fldiv+3,_color+19
  5612   0016B4  0012               	return		;funcret
  5613   0016B6                     __end_of_READcolor:
  5614                           	callstack 0
  5615                           
  5616 ;; *************** function _color_read_Red *****************
  5617 ;; Defined at:
  5618 ;;		line 31 in file "color.c"
  5619 ;; Parameters:    Size  Location     Type
  5620 ;;		None
  5621 ;; Auto vars:     Size  Location     Type
  5622 ;;  tmp             2   11[COMRAM] unsigned int 
  5623 ;; Return value:  Size  Location     Type
  5624 ;;                  2    6[COMRAM] unsigned int 
  5625 ;; Registers used:
  5626 ;;		wreg, status,2, status,0, cstack
  5627 ;; Tracked objects:
  5628 ;;		On entry : 0/0
  5629 ;;		On exit  : 0/0
  5630 ;;		Unchanged: 0/0
  5631 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5632 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5633 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5634 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5635 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5636 ;;Total ram usage:        7 bytes
  5637 ;; Hardware stack levels used: 1
  5638 ;; Hardware stack levels required when called: 3
  5639 ;; This function calls:
  5640 ;;		_I2C_2_Master_Read
  5641 ;;		_I2C_2_Master_RepStart
  5642 ;;		_I2C_2_Master_Start
  5643 ;;		_I2C_2_Master_Stop
  5644 ;;		_I2C_2_Master_Write
  5645 ;; This function is called by:
  5646 ;;		_READcolor
  5647 ;; This function uses a non-reentrant model
  5648 ;;
  5649                           
  5650                           	psect	text33
  5651   001F64                     __ptext33:
  5652                           	callstack 0
  5653   001F64                     _color_read_Red:
  5654                           	callstack 25
  5655   001F64                     
  5656                           ;color.c: 33:  unsigned int tmp;;color.c: 34:  I2C_2_Master_Start();
  5657   001F64  ECC5  F011         	call	_I2C_2_Master_Start	;wreg free
  5658                           
  5659                           ;color.c: 35:  I2C_2_Master_Write(0x52 | 0x00);
  5660   001F68  0E52               	movlw	82
  5661   001F6A  ECBA  F011         	call	_I2C_2_Master_Write
  5662                           
  5663                           ;color.c: 37:  I2C_2_Master_Write(0xA0 | 0x16);
  5664   001F6E  0EB6               	movlw	182
  5665   001F70  ECBA  F011         	call	_I2C_2_Master_Write
  5666                           
  5667                           ;color.c: 38:  I2C_2_Master_RepStart();
  5668   001F74  ECCA  F011         	call	_I2C_2_Master_RepStart	;wreg free
  5669                           
  5670                           ;color.c: 39:  I2C_2_Master_Write(0x52 | 0x01);
  5671   001F78  0E53               	movlw	83
  5672   001F7A  ECBA  F011         	call	_I2C_2_Master_Write
  5673                           
  5674                           ;color.c: 40:  tmp=I2C_2_Master_Read(1);
  5675   001F7E  0E01               	movlw	1
  5676   001F80  EC99  F010         	call	_I2C_2_Master_Read
  5677   001F84  6E09               	movwf	??_color_read_Red^0,c
  5678   001F86  5009               	movf	??_color_read_Red^0,w,c
  5679   001F88  6E0C               	movwf	color_read_Red@tmp^0,c
  5680   001F8A  6A0D               	clrf	(color_read_Red@tmp+1)^0,c
  5681                           
  5682                           ;color.c: 41:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  5683   001F8C  0E00               	movlw	0
  5684   001F8E  EC99  F010         	call	_I2C_2_Master_Read
  5685   001F92  6E09               	movwf	??_color_read_Red^0,c
  5686   001F94  5009               	movf	??_color_read_Red^0,w,c
  5687   001F96  6E0B               	movwf	(??_color_read_Red+2)^0,c
  5688   001F98  6A0A               	clrf	(??_color_read_Red+1)^0,c
  5689   001F9A  500C               	movf	color_read_Red@tmp^0,w,c
  5690   001F9C  100A               	iorwf	(??_color_read_Red+1)^0,w,c
  5691   001F9E  6E0C               	movwf	color_read_Red@tmp^0,c
  5692   001FA0  500D               	movf	(color_read_Red@tmp+1)^0,w,c
  5693   001FA2  100B               	iorwf	(??_color_read_Red+2)^0,w,c
  5694   001FA4  6E0D               	movwf	(color_read_Red@tmp+1)^0,c
  5695                           
  5696                           ;color.c: 42:  I2C_2_Master_Stop();
  5697   001FA6  ECC0  F011         	call	_I2C_2_Master_Stop	;wreg free
  5698   001FAA                     
  5699                           ;color.c: 43:  return tmp;
  5700   001FAA  C00C  F007         	movff	color_read_Red@tmp,?_color_read_Red
  5701   001FAE  C00D  F008         	movff	color_read_Red@tmp+1,?_color_read_Red+1
  5702   001FB2  0012               	return		;funcret
  5703   001FB4                     __end_of_color_read_Red:
  5704                           	callstack 0
  5705                           
  5706 ;; *************** function _color_read_Green *****************
  5707 ;; Defined at:
  5708 ;;		line 61 in file "color.c"
  5709 ;; Parameters:    Size  Location     Type
  5710 ;;		None
  5711 ;; Auto vars:     Size  Location     Type
  5712 ;;  tmp             2   11[COMRAM] unsigned int 
  5713 ;; Return value:  Size  Location     Type
  5714 ;;                  2    6[COMRAM] unsigned int 
  5715 ;; Registers used:
  5716 ;;		wreg, status,2, status,0, cstack
  5717 ;; Tracked objects:
  5718 ;;		On entry : 0/0
  5719 ;;		On exit  : 0/0
  5720 ;;		Unchanged: 0/0
  5721 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5722 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5723 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5724 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5725 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5726 ;;Total ram usage:        7 bytes
  5727 ;; Hardware stack levels used: 1
  5728 ;; Hardware stack levels required when called: 3
  5729 ;; This function calls:
  5730 ;;		_I2C_2_Master_Read
  5731 ;;		_I2C_2_Master_RepStart
  5732 ;;		_I2C_2_Master_Start
  5733 ;;		_I2C_2_Master_Stop
  5734 ;;		_I2C_2_Master_Write
  5735 ;; This function is called by:
  5736 ;;		_READcolor
  5737 ;; This function uses a non-reentrant model
  5738 ;;
  5739                           
  5740                           	psect	text34
  5741   001FB4                     __ptext34:
  5742                           	callstack 0
  5743   001FB4                     _color_read_Green:
  5744                           	callstack 25
  5745   001FB4                     
  5746                           ;color.c: 63:  unsigned int tmp;;color.c: 64:  I2C_2_Master_Start();
  5747   001FB4  ECC5  F011         	call	_I2C_2_Master_Start	;wreg free
  5748                           
  5749                           ;color.c: 65:  I2C_2_Master_Write(0x52 | 0x00);
  5750   001FB8  0E52               	movlw	82
  5751   001FBA  ECBA  F011         	call	_I2C_2_Master_Write
  5752                           
  5753                           ;color.c: 67:  I2C_2_Master_Write(0xA0 | 0x18);
  5754   001FBE  0EB8               	movlw	184
  5755   001FC0  ECBA  F011         	call	_I2C_2_Master_Write
  5756                           
  5757                           ;color.c: 68:  I2C_2_Master_RepStart();
  5758   001FC4  ECCA  F011         	call	_I2C_2_Master_RepStart	;wreg free
  5759                           
  5760                           ;color.c: 69:  I2C_2_Master_Write(0x52 | 0x01);
  5761   001FC8  0E53               	movlw	83
  5762   001FCA  ECBA  F011         	call	_I2C_2_Master_Write
  5763                           
  5764                           ;color.c: 70:  tmp=I2C_2_Master_Read(1);
  5765   001FCE  0E01               	movlw	1
  5766   001FD0  EC99  F010         	call	_I2C_2_Master_Read
  5767   001FD4  6E09               	movwf	??_color_read_Green^0,c
  5768   001FD6  5009               	movf	??_color_read_Green^0,w,c
  5769   001FD8  6E0C               	movwf	color_read_Green@tmp^0,c
  5770   001FDA  6A0D               	clrf	(color_read_Green@tmp+1)^0,c
  5771                           
  5772                           ;color.c: 71:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  5773   001FDC  0E00               	movlw	0
  5774   001FDE  EC99  F010         	call	_I2C_2_Master_Read
  5775   001FE2  6E09               	movwf	??_color_read_Green^0,c
  5776   001FE4  5009               	movf	??_color_read_Green^0,w,c
  5777   001FE6  6E0B               	movwf	(??_color_read_Green+2)^0,c
  5778   001FE8  6A0A               	clrf	(??_color_read_Green+1)^0,c
  5779   001FEA  500C               	movf	color_read_Green@tmp^0,w,c
  5780   001FEC  100A               	iorwf	(??_color_read_Green+1)^0,w,c
  5781   001FEE  6E0C               	movwf	color_read_Green@tmp^0,c
  5782   001FF0  500D               	movf	(color_read_Green@tmp+1)^0,w,c
  5783   001FF2  100B               	iorwf	(??_color_read_Green+2)^0,w,c
  5784   001FF4  6E0D               	movwf	(color_read_Green@tmp+1)^0,c
  5785                           
  5786                           ;color.c: 72:  I2C_2_Master_Stop();
  5787   001FF6  ECC0  F011         	call	_I2C_2_Master_Stop	;wreg free
  5788   001FFA                     
  5789                           ;color.c: 73:  return tmp;
  5790   001FFA  C00C  F007         	movff	color_read_Green@tmp,?_color_read_Green
  5791   001FFE  C00D  F008         	movff	color_read_Green@tmp+1,?_color_read_Green+1
  5792   002002  0012               	return		;funcret
  5793   002004                     __end_of_color_read_Green:
  5794                           	callstack 0
  5795                           
  5796 ;; *************** function _color_read_Clear *****************
  5797 ;; Defined at:
  5798 ;;		line 76 in file "color.c"
  5799 ;; Parameters:    Size  Location     Type
  5800 ;;		None
  5801 ;; Auto vars:     Size  Location     Type
  5802 ;;  tmp             2   11[COMRAM] unsigned int 
  5803 ;; Return value:  Size  Location     Type
  5804 ;;                  2    6[COMRAM] unsigned int 
  5805 ;; Registers used:
  5806 ;;		wreg, status,2, status,0, cstack
  5807 ;; Tracked objects:
  5808 ;;		On entry : 0/0
  5809 ;;		On exit  : 0/0
  5810 ;;		Unchanged: 0/0
  5811 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5812 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5813 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5814 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5815 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5816 ;;Total ram usage:        7 bytes
  5817 ;; Hardware stack levels used: 1
  5818 ;; Hardware stack levels required when called: 3
  5819 ;; This function calls:
  5820 ;;		_I2C_2_Master_Read
  5821 ;;		_I2C_2_Master_RepStart
  5822 ;;		_I2C_2_Master_Start
  5823 ;;		_I2C_2_Master_Stop
  5824 ;;		_I2C_2_Master_Write
  5825 ;; This function is called by:
  5826 ;;		_READcolor
  5827 ;; This function uses a non-reentrant model
  5828 ;;
  5829                           
  5830                           	psect	text35
  5831   002004                     __ptext35:
  5832                           	callstack 0
  5833   002004                     _color_read_Clear:
  5834                           	callstack 25
  5835   002004                     
  5836                           ;color.c: 78:  unsigned int tmp;;color.c: 79:  I2C_2_Master_Start();
  5837   002004  ECC5  F011         	call	_I2C_2_Master_Start	;wreg free
  5838                           
  5839                           ;color.c: 80:  I2C_2_Master_Write(0x52 | 0x00);
  5840   002008  0E52               	movlw	82
  5841   00200A  ECBA  F011         	call	_I2C_2_Master_Write
  5842                           
  5843                           ;color.c: 82:  I2C_2_Master_Write(0xA0 | 0x14);
  5844   00200E  0EB4               	movlw	180
  5845   002010  ECBA  F011         	call	_I2C_2_Master_Write
  5846                           
  5847                           ;color.c: 83:  I2C_2_Master_RepStart();
  5848   002014  ECCA  F011         	call	_I2C_2_Master_RepStart	;wreg free
  5849                           
  5850                           ;color.c: 84:  I2C_2_Master_Write(0x52 | 0x01);
  5851   002018  0E53               	movlw	83
  5852   00201A  ECBA  F011         	call	_I2C_2_Master_Write
  5853                           
  5854                           ;color.c: 85:  tmp=I2C_2_Master_Read(1);
  5855   00201E  0E01               	movlw	1
  5856   002020  EC99  F010         	call	_I2C_2_Master_Read
  5857   002024  6E09               	movwf	??_color_read_Clear^0,c
  5858   002026  5009               	movf	??_color_read_Clear^0,w,c
  5859   002028  6E0C               	movwf	color_read_Clear@tmp^0,c
  5860   00202A  6A0D               	clrf	(color_read_Clear@tmp+1)^0,c
  5861                           
  5862                           ;color.c: 86:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  5863   00202C  0E00               	movlw	0
  5864   00202E  EC99  F010         	call	_I2C_2_Master_Read
  5865   002032  6E09               	movwf	??_color_read_Clear^0,c
  5866   002034  5009               	movf	??_color_read_Clear^0,w,c
  5867   002036  6E0B               	movwf	(??_color_read_Clear+2)^0,c
  5868   002038  6A0A               	clrf	(??_color_read_Clear+1)^0,c
  5869   00203A  500C               	movf	color_read_Clear@tmp^0,w,c
  5870   00203C  100A               	iorwf	(??_color_read_Clear+1)^0,w,c
  5871   00203E  6E0C               	movwf	color_read_Clear@tmp^0,c
  5872   002040  500D               	movf	(color_read_Clear@tmp+1)^0,w,c
  5873   002042  100B               	iorwf	(??_color_read_Clear+2)^0,w,c
  5874   002044  6E0D               	movwf	(color_read_Clear@tmp+1)^0,c
  5875                           
  5876                           ;color.c: 87:  I2C_2_Master_Stop();
  5877   002046  ECC0  F011         	call	_I2C_2_Master_Stop	;wreg free
  5878   00204A                     
  5879                           ;color.c: 88:  return tmp;
  5880   00204A  C00C  F007         	movff	color_read_Clear@tmp,?_color_read_Clear
  5881   00204E  C00D  F008         	movff	color_read_Clear@tmp+1,?_color_read_Clear+1
  5882   002052  0012               	return		;funcret
  5883   002054                     __end_of_color_read_Clear:
  5884                           	callstack 0
  5885                           
  5886 ;; *************** function _color_read_Blue *****************
  5887 ;; Defined at:
  5888 ;;		line 46 in file "color.c"
  5889 ;; Parameters:    Size  Location     Type
  5890 ;;		None
  5891 ;; Auto vars:     Size  Location     Type
  5892 ;;  tmp             2   11[COMRAM] unsigned int 
  5893 ;; Return value:  Size  Location     Type
  5894 ;;                  2    6[COMRAM] unsigned int 
  5895 ;; Registers used:
  5896 ;;		wreg, status,2, status,0, cstack
  5897 ;; Tracked objects:
  5898 ;;		On entry : 0/0
  5899 ;;		On exit  : 0/0
  5900 ;;		Unchanged: 0/0
  5901 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5902 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5903 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5904 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5905 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5906 ;;Total ram usage:        7 bytes
  5907 ;; Hardware stack levels used: 1
  5908 ;; Hardware stack levels required when called: 3
  5909 ;; This function calls:
  5910 ;;		_I2C_2_Master_Read
  5911 ;;		_I2C_2_Master_RepStart
  5912 ;;		_I2C_2_Master_Start
  5913 ;;		_I2C_2_Master_Stop
  5914 ;;		_I2C_2_Master_Write
  5915 ;; This function is called by:
  5916 ;;		_READcolor
  5917 ;; This function uses a non-reentrant model
  5918 ;;
  5919                           
  5920                           	psect	text36
  5921   002054                     __ptext36:
  5922                           	callstack 0
  5923   002054                     _color_read_Blue:
  5924                           	callstack 25
  5925   002054                     
  5926                           ;color.c: 48:  unsigned int tmp;;color.c: 49:  I2C_2_Master_Start();
  5927   002054  ECC5  F011         	call	_I2C_2_Master_Start	;wreg free
  5928                           
  5929                           ;color.c: 50:  I2C_2_Master_Write(0x52 | 0x00);
  5930   002058  0E52               	movlw	82
  5931   00205A  ECBA  F011         	call	_I2C_2_Master_Write
  5932                           
  5933                           ;color.c: 52:  I2C_2_Master_Write(0xA0 | 0x1A);
  5934   00205E  0EBA               	movlw	186
  5935   002060  ECBA  F011         	call	_I2C_2_Master_Write
  5936                           
  5937                           ;color.c: 53:  I2C_2_Master_RepStart();
  5938   002064  ECCA  F011         	call	_I2C_2_Master_RepStart	;wreg free
  5939                           
  5940                           ;color.c: 54:  I2C_2_Master_Write(0x52 | 0x01);
  5941   002068  0E53               	movlw	83
  5942   00206A  ECBA  F011         	call	_I2C_2_Master_Write
  5943                           
  5944                           ;color.c: 55:  tmp=I2C_2_Master_Read(1);
  5945   00206E  0E01               	movlw	1
  5946   002070  EC99  F010         	call	_I2C_2_Master_Read
  5947   002074  6E09               	movwf	??_color_read_Blue^0,c
  5948   002076  5009               	movf	??_color_read_Blue^0,w,c
  5949   002078  6E0C               	movwf	color_read_Blue@tmp^0,c
  5950   00207A  6A0D               	clrf	(color_read_Blue@tmp+1)^0,c
  5951                           
  5952                           ;color.c: 56:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  5953   00207C  0E00               	movlw	0
  5954   00207E  EC99  F010         	call	_I2C_2_Master_Read
  5955   002082  6E09               	movwf	??_color_read_Blue^0,c
  5956   002084  5009               	movf	??_color_read_Blue^0,w,c
  5957   002086  6E0B               	movwf	(??_color_read_Blue+2)^0,c
  5958   002088  6A0A               	clrf	(??_color_read_Blue+1)^0,c
  5959   00208A  500C               	movf	color_read_Blue@tmp^0,w,c
  5960   00208C  100A               	iorwf	(??_color_read_Blue+1)^0,w,c
  5961   00208E  6E0C               	movwf	color_read_Blue@tmp^0,c
  5962   002090  500D               	movf	(color_read_Blue@tmp+1)^0,w,c
  5963   002092  100B               	iorwf	(??_color_read_Blue+2)^0,w,c
  5964   002094  6E0D               	movwf	(color_read_Blue@tmp+1)^0,c
  5965                           
  5966                           ;color.c: 57:  I2C_2_Master_Stop();
  5967   002096  ECC0  F011         	call	_I2C_2_Master_Stop	;wreg free
  5968   00209A                     
  5969                           ;color.c: 58:  return tmp;
  5970   00209A  C00C  F007         	movff	color_read_Blue@tmp,?_color_read_Blue
  5971   00209E  C00D  F008         	movff	color_read_Blue@tmp+1,?_color_read_Blue+1
  5972   0020A2  0012               	return		;funcret
  5973   0020A4                     __end_of_color_read_Blue:
  5974                           	callstack 0
  5975                           
  5976 ;; *************** function _I2C_2_Master_Write *****************
  5977 ;; Defined at:
  5978 ;;		line 45 in file "i2c.c"
  5979 ;; Parameters:    Size  Location     Type
  5980 ;;  data_byte       1    wreg     unsigned char 
  5981 ;; Auto vars:     Size  Location     Type
  5982 ;;  data_byte       1    3[COMRAM] unsigned char 
  5983 ;; Return value:  Size  Location     Type
  5984 ;;                  1    wreg      void 
  5985 ;; Registers used:
  5986 ;;		wreg, status,2, status,0, cstack
  5987 ;; Tracked objects:
  5988 ;;		On entry : 0/0
  5989 ;;		On exit  : 0/0
  5990 ;;		Unchanged: 0/0
  5991 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5992 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5993 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5994 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5995 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5996 ;;Total ram usage:        1 bytes
  5997 ;; Hardware stack levels used: 1
  5998 ;; Hardware stack levels required when called: 2
  5999 ;; This function calls:
  6000 ;;		_I2C_2_Master_Idle
  6001 ;; This function is called by:
  6002 ;;		_color_writetoaddr
  6003 ;;		_color_read_Red
  6004 ;;		_color_read_Blue
  6005 ;;		_color_read_Green
  6006 ;;		_color_read_Clear
  6007 ;; This function uses a non-reentrant model
  6008 ;;
  6009                           
  6010                           	psect	text37
  6011   002374                     __ptext37:
  6012                           	callstack 0
  6013   002374                     _I2C_2_Master_Write:
  6014                           	callstack 25
  6015                           
  6016                           ;incstack = 0
  6017                           ;I2C_2_Master_Write@data_byte stored from wreg
  6018   002374  6E04               	movwf	I2C_2_Master_Write@data_byte^0,c
  6019   002376                     
  6020                           ;i2c.c: 45: void I2C_2_Master_Write(unsigned char data_byte);i2c.c: 46: {;i2c.c: 47:   I
      +                          2C_2_Master_Idle();
  6021   002376  EC29  F011         	call	_I2C_2_Master_Idle	;wreg free
  6022   00237A                     
  6023                           ;i2c.c: 48:   SSP2BUF = data_byte;
  6024   00237A  C004  FED5         	movff	I2C_2_Master_Write@data_byte,3797	;volatile
  6025   00237E  0012               	return		;funcret
  6026   002380                     __end_of_I2C_2_Master_Write:
  6027                           	callstack 0
  6028                           
  6029 ;; *************** function _I2C_2_Master_Stop *****************
  6030 ;; Defined at:
  6031 ;;		line 39 in file "i2c.c"
  6032 ;; Parameters:    Size  Location     Type
  6033 ;;		None
  6034 ;; Auto vars:     Size  Location     Type
  6035 ;;		None
  6036 ;; Return value:  Size  Location     Type
  6037 ;;                  1    wreg      void 
  6038 ;; Registers used:
  6039 ;;		wreg, status,2, status,0, cstack
  6040 ;; Tracked objects:
  6041 ;;		On entry : 0/0
  6042 ;;		On exit  : 0/0
  6043 ;;		Unchanged: 0/0
  6044 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6045 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6046 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6047 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6048 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6049 ;;Total ram usage:        0 bytes
  6050 ;; Hardware stack levels used: 1
  6051 ;; Hardware stack levels required when called: 2
  6052 ;; This function calls:
  6053 ;;		_I2C_2_Master_Idle
  6054 ;; This function is called by:
  6055 ;;		_color_writetoaddr
  6056 ;;		_color_read_Red
  6057 ;;		_color_read_Blue
  6058 ;;		_color_read_Green
  6059 ;;		_color_read_Clear
  6060 ;; This function uses a non-reentrant model
  6061 ;;
  6062                           
  6063                           	psect	text38
  6064   002380                     __ptext38:
  6065                           	callstack 0
  6066   002380                     _I2C_2_Master_Stop:
  6067                           	callstack 25
  6068   002380                     
  6069                           ;i2c.c: 41:   I2C_2_Master_Idle();
  6070   002380  EC29  F011         	call	_I2C_2_Master_Idle	;wreg free
  6071   002384                     
  6072                           ;i2c.c: 42:   SSP2CON2bits.PEN = 1;
  6073   002384  010E               	movlb	14	; () banked
  6074   002386  85DA               	bsf	218,2,b	;volatile
  6075   002388                     
  6076                           ; BSR set to: 14
  6077   002388  0012               	return		;funcret
  6078   00238A                     __end_of_I2C_2_Master_Stop:
  6079                           	callstack 0
  6080                           
  6081 ;; *************** function _I2C_2_Master_Start *****************
  6082 ;; Defined at:
  6083 ;;		line 27 in file "i2c.c"
  6084 ;; Parameters:    Size  Location     Type
  6085 ;;		None
  6086 ;; Auto vars:     Size  Location     Type
  6087 ;;		None
  6088 ;; Return value:  Size  Location     Type
  6089 ;;                  1    wreg      void 
  6090 ;; Registers used:
  6091 ;;		wreg, status,2, status,0, cstack
  6092 ;; Tracked objects:
  6093 ;;		On entry : 0/0
  6094 ;;		On exit  : 0/0
  6095 ;;		Unchanged: 0/0
  6096 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6097 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6098 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6099 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6100 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6101 ;;Total ram usage:        0 bytes
  6102 ;; Hardware stack levels used: 1
  6103 ;; Hardware stack levels required when called: 2
  6104 ;; This function calls:
  6105 ;;		_I2C_2_Master_Idle
  6106 ;; This function is called by:
  6107 ;;		_color_writetoaddr
  6108 ;;		_color_read_Red
  6109 ;;		_color_read_Blue
  6110 ;;		_color_read_Green
  6111 ;;		_color_read_Clear
  6112 ;; This function uses a non-reentrant model
  6113 ;;
  6114                           
  6115                           	psect	text39
  6116   00238A                     __ptext39:
  6117                           	callstack 0
  6118   00238A                     _I2C_2_Master_Start:
  6119                           	callstack 25
  6120   00238A                     
  6121                           ;i2c.c: 29:   I2C_2_Master_Idle();
  6122   00238A  EC29  F011         	call	_I2C_2_Master_Idle	;wreg free
  6123   00238E                     
  6124                           ;i2c.c: 30:   SSP2CON2bits.SEN = 1;
  6125   00238E  010E               	movlb	14	; () banked
  6126   002390  81DA               	bsf	218,0,b	;volatile
  6127   002392                     
  6128                           ; BSR set to: 14
  6129   002392  0012               	return		;funcret
  6130   002394                     __end_of_I2C_2_Master_Start:
  6131                           	callstack 0
  6132                           
  6133 ;; *************** function _I2C_2_Master_RepStart *****************
  6134 ;; Defined at:
  6135 ;;		line 33 in file "i2c.c"
  6136 ;; Parameters:    Size  Location     Type
  6137 ;;		None
  6138 ;; Auto vars:     Size  Location     Type
  6139 ;;		None
  6140 ;; Return value:  Size  Location     Type
  6141 ;;                  1    wreg      void 
  6142 ;; Registers used:
  6143 ;;		wreg, status,2, status,0, cstack
  6144 ;; Tracked objects:
  6145 ;;		On entry : 0/0
  6146 ;;		On exit  : 0/0
  6147 ;;		Unchanged: 0/0
  6148 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6149 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6150 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6151 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6152 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6153 ;;Total ram usage:        0 bytes
  6154 ;; Hardware stack levels used: 1
  6155 ;; Hardware stack levels required when called: 2
  6156 ;; This function calls:
  6157 ;;		_I2C_2_Master_Idle
  6158 ;; This function is called by:
  6159 ;;		_color_read_Red
  6160 ;;		_color_read_Blue
  6161 ;;		_color_read_Green
  6162 ;;		_color_read_Clear
  6163 ;; This function uses a non-reentrant model
  6164 ;;
  6165                           
  6166                           	psect	text40
  6167   002394                     __ptext40:
  6168                           	callstack 0
  6169   002394                     _I2C_2_Master_RepStart:
  6170                           	callstack 25
  6171   002394                     
  6172                           ;i2c.c: 35:   I2C_2_Master_Idle();
  6173   002394  EC29  F011         	call	_I2C_2_Master_Idle	;wreg free
  6174   002398                     
  6175                           ;i2c.c: 36:   SSP2CON2bits.RSEN = 1;
  6176   002398  010E               	movlb	14	; () banked
  6177   00239A  83DA               	bsf	218,1,b	;volatile
  6178   00239C                     
  6179                           ; BSR set to: 14
  6180   00239C  0012               	return		;funcret
  6181   00239E                     __end_of_I2C_2_Master_RepStart:
  6182                           	callstack 0
  6183                           
  6184 ;; *************** function _I2C_2_Master_Read *****************
  6185 ;; Defined at:
  6186 ;;		line 51 in file "i2c.c"
  6187 ;; Parameters:    Size  Location     Type
  6188 ;;  ack             1    wreg     unsigned char 
  6189 ;; Auto vars:     Size  Location     Type
  6190 ;;  ack             1    4[COMRAM] unsigned char 
  6191 ;;  tmp             1    5[COMRAM] unsigned char 
  6192 ;; Return value:  Size  Location     Type
  6193 ;;                  1    wreg      unsigned char 
  6194 ;; Registers used:
  6195 ;;		wreg, status,2, status,0, cstack
  6196 ;; Tracked objects:
  6197 ;;		On entry : 0/0
  6198 ;;		On exit  : 0/0
  6199 ;;		Unchanged: 0/0
  6200 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6201 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6202 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6203 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6204 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6205 ;;Total ram usage:        3 bytes
  6206 ;; Hardware stack levels used: 1
  6207 ;; Hardware stack levels required when called: 2
  6208 ;; This function calls:
  6209 ;;		_I2C_2_Master_Idle
  6210 ;; This function is called by:
  6211 ;;		_color_read_Red
  6212 ;;		_color_read_Blue
  6213 ;;		_color_read_Green
  6214 ;;		_color_read_Clear
  6215 ;; This function uses a non-reentrant model
  6216 ;;
  6217                           
  6218                           	psect	text41
  6219   002132                     __ptext41:
  6220                           	callstack 0
  6221   002132                     _I2C_2_Master_Read:
  6222                           	callstack 25
  6223                           
  6224                           ; BSR set to: 14
  6225                           ;incstack = 0
  6226                           ;I2C_2_Master_Read@ack stored from wreg
  6227   002132  6E05               	movwf	I2C_2_Master_Read@ack^0,c
  6228   002134                     
  6229                           ;i2c.c: 51: unsigned char I2C_2_Master_Read(unsigned char ack);i2c.c: 52: {;i2c.c: 53:  
      +                           unsigned char tmp;;i2c.c: 54:   I2C_2_Master_Idle();
  6230   002134  EC29  F011         	call	_I2C_2_Master_Idle	;wreg free
  6231   002138                     
  6232                           ;i2c.c: 55:   SSP2CON2bits.RCEN = 1;
  6233   002138  010E               	movlb	14	; () banked
  6234   00213A  87DA               	bsf	218,3,b	;volatile
  6235                           
  6236                           ;i2c.c: 56:   I2C_2_Master_Idle();
  6237   00213C  EC29  F011         	call	_I2C_2_Master_Idle	;wreg free
  6238   002140                     
  6239                           ;i2c.c: 57:   tmp = SSP2BUF;
  6240   002140  CED5 F006          	movff	3797,I2C_2_Master_Read@tmp	;volatile
  6241                           
  6242                           ;i2c.c: 58:   I2C_2_Master_Idle();
  6243   002144  EC29  F011         	call	_I2C_2_Master_Idle	;wreg free
  6244   002148                     
  6245                           ;i2c.c: 59:   SSP2CON2bits.ACKDT = !ack;
  6246   002148  5005               	movf	I2C_2_Master_Read@ack^0,w,c
  6247   00214A  B4D8               	btfsc	status,2,c
  6248   00214C  EFAA  F010         	goto	u1531
  6249   002150  EFAE  F010         	goto	u1530
  6250   002154                     u1531:
  6251   002154  6A04               	clrf	??_I2C_2_Master_Read^0,c
  6252   002156  2A04               	incf	??_I2C_2_Master_Read^0,f,c
  6253   002158  EFAF  F010         	goto	u1548
  6254   00215C                     u1530:
  6255   00215C  6A04               	clrf	??_I2C_2_Master_Read^0,c
  6256   00215E                     u1548:
  6257   00215E  3A04               	swapf	??_I2C_2_Master_Read^0,f,c
  6258   002160  4604               	rlncf	??_I2C_2_Master_Read^0,f,c
  6259   002162  010E               	movlb	14	; () banked
  6260   002164  51DA               	movf	218,w,b	;volatile
  6261   002166  1804               	xorwf	??_I2C_2_Master_Read^0,w,c
  6262   002168  0BDF               	andlw	-33
  6263   00216A  1804               	xorwf	??_I2C_2_Master_Read^0,w,c
  6264   00216C  6FDA               	movwf	218,b	;volatile
  6265   00216E                     
  6266                           ; BSR set to: 14
  6267                           ;i2c.c: 60:   SSP2CON2bits.ACKEN = 1;
  6268   00216E  89DA               	bsf	218,4,b	;volatile
  6269   002170                     
  6270                           ; BSR set to: 14
  6271                           ;i2c.c: 61:   return tmp;
  6272   002170  5006               	movf	I2C_2_Master_Read@tmp^0,w,c
  6273   002172                     
  6274                           ; BSR set to: 14
  6275   002172  0012               	return		;funcret
  6276   002174                     __end_of_I2C_2_Master_Read:
  6277                           	callstack 0
  6278                           
  6279 ;; *************** function _I2C_2_Master_Idle *****************
  6280 ;; Defined at:
  6281 ;;		line 22 in file "i2c.c"
  6282 ;; Parameters:    Size  Location     Type
  6283 ;;		None
  6284 ;; Auto vars:     Size  Location     Type
  6285 ;;		None
  6286 ;; Return value:  Size  Location     Type
  6287 ;;                  1    wreg      void 
  6288 ;; Registers used:
  6289 ;;		wreg, status,2, status,0
  6290 ;; Tracked objects:
  6291 ;;		On entry : 0/0
  6292 ;;		On exit  : 0/0
  6293 ;;		Unchanged: 0/0
  6294 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6295 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6296 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6297 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6298 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6299 ;;Total ram usage:        1 bytes
  6300 ;; Hardware stack levels used: 1
  6301 ;; Hardware stack levels required when called: 1
  6302 ;; This function calls:
  6303 ;;		Nothing
  6304 ;; This function is called by:
  6305 ;;		_I2C_2_Master_Start
  6306 ;;		_I2C_2_Master_RepStart
  6307 ;;		_I2C_2_Master_Stop
  6308 ;;		_I2C_2_Master_Write
  6309 ;;		_I2C_2_Master_Read
  6310 ;; This function uses a non-reentrant model
  6311 ;;
  6312                           
  6313                           	psect	text42
  6314   002252                     __ptext42:
  6315                           	callstack 0
  6316   002252                     _I2C_2_Master_Idle:
  6317                           	callstack 25
  6318   002252                     l30:
  6319   002252  010E               	movlb	14	; () banked
  6320   002254  B5D8               	btfsc	216,2,b	;volatile
  6321   002256  EF2F  F011         	goto	u1371
  6322   00225A  EF31  F011         	goto	u1370
  6323   00225E                     u1371:
  6324   00225E  EF29  F011         	goto	l30
  6325   002262                     u1370:
  6326   002262                     
  6327                           ; BSR set to: 14
  6328   002262  CEDA F003          	movff	3802,??_I2C_2_Master_Idle	;volatile
  6329   002266  0E1F               	movlw	31
  6330   002268  1603               	andwf	??_I2C_2_Master_Idle^0,f,c
  6331   00226A  A4D8               	btfss	status,2,c
  6332   00226C  EF3A  F011         	goto	u1381
  6333   002270  EF3C  F011         	goto	u1380
  6334   002274                     u1381:
  6335   002274  EF29  F011         	goto	l30
  6336   002278                     u1380:
  6337   002278                     
  6338                           ; BSR set to: 14
  6339   002278  0012               	return		;funcret
  6340   00227A                     __end_of_I2C_2_Master_Idle:
  6341                           	callstack 0
  6342                           
  6343 ;; *************** function ___xxtofl *****************
  6344 ;; Defined at:
  6345 ;;		line 10 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\xxtofl.c"
  6346 ;; Parameters:    Size  Location     Type
  6347 ;;  sign            1    wreg     unsigned char 
  6348 ;;  val             4    2[COMRAM] long 
  6349 ;; Auto vars:     Size  Location     Type
  6350 ;;  sign            1   10[COMRAM] unsigned char 
  6351 ;;  arg             4   12[COMRAM] unsigned long 
  6352 ;;  exp             1   11[COMRAM] unsigned char 
  6353 ;; Return value:  Size  Location     Type
  6354 ;;                  4    2[COMRAM] unsigned char 
  6355 ;; Registers used:
  6356 ;;		wreg, status,2, status,0
  6357 ;; Tracked objects:
  6358 ;;		On entry : 0/0
  6359 ;;		On exit  : 0/0
  6360 ;;		Unchanged: 0/0
  6361 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6362 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6363 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6364 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6365 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6366 ;;Total ram usage:       14 bytes
  6367 ;; Hardware stack levels used: 1
  6368 ;; Hardware stack levels required when called: 1
  6369 ;; This function calls:
  6370 ;;		Nothing
  6371 ;; This function is called by:
  6372 ;;		_READcolor
  6373 ;; This function uses a non-reentrant model
  6374 ;;
  6375                           
  6376                           	psect	text43
  6377   000FAA                     __ptext43:
  6378                           	callstack 0
  6379   000FAA                     ___xxtofl:
  6380                           	callstack 27
  6381                           
  6382                           ; BSR set to: 14
  6383                           ;incstack = 0
  6384                           ;___xxtofl@sign stored from wreg
  6385   000FAA  6E0B               	movwf	___xxtofl@sign^0,c
  6386   000FAC  500B               	movf	___xxtofl@sign^0,w,c
  6387   000FAE  B4D8               	btfsc	status,2,c
  6388   000FB0  EFDC  F007         	goto	u1921
  6389   000FB4  EFDE  F007         	goto	u1920
  6390   000FB8                     u1921:
  6391   000FB8  EF00  F008         	goto	l1293
  6392   000FBC                     u1920:
  6393   000FBC  BE06               	btfsc	(___xxtofl@val+3)^0,7,c
  6394   000FBE  EFE5  F007         	goto	u1930
  6395   000FC2  EFE3  F007         	goto	u1931
  6396   000FC6                     u1931:
  6397   000FC6  EF00  F008         	goto	l1293
  6398   000FCA                     u1930:
  6399   000FCA  C003  F007         	movff	___xxtofl@val,??___xxtofl
  6400   000FCE  C004  F008         	movff	___xxtofl@val+1,??___xxtofl+1
  6401   000FD2  C005  F009         	movff	___xxtofl@val+2,??___xxtofl+2
  6402   000FD6  C006  F00A         	movff	___xxtofl@val+3,??___xxtofl+3
  6403   000FDA  1E07               	comf	??___xxtofl^0,f,c
  6404   000FDC  1E08               	comf	(??___xxtofl+1)^0,f,c
  6405   000FDE  1E09               	comf	(??___xxtofl+2)^0,f,c
  6406   000FE0  1E0A               	comf	(??___xxtofl+3)^0,f,c
  6407   000FE2  2A07               	incf	??___xxtofl^0,f,c
  6408   000FE4  0E00               	movlw	0
  6409   000FE6  2208               	addwfc	(??___xxtofl+1)^0,f,c
  6410   000FE8  2209               	addwfc	(??___xxtofl+2)^0,f,c
  6411   000FEA  220A               	addwfc	(??___xxtofl+3)^0,f,c
  6412   000FEC  C007  F00D         	movff	??___xxtofl,___xxtofl@arg
  6413   000FF0  C008  F00E         	movff	??___xxtofl+1,___xxtofl@arg+1
  6414   000FF4  C009  F00F         	movff	??___xxtofl+2,___xxtofl@arg+2
  6415   000FF8  C00A  F010         	movff	??___xxtofl+3,___xxtofl@arg+3
  6416   000FFC  EF08  F008         	goto	l2795
  6417   001000                     l1293:
  6418   001000  C003  F00D         	movff	___xxtofl@val,___xxtofl@arg
  6419   001004  C004  F00E         	movff	___xxtofl@val+1,___xxtofl@arg+1
  6420   001008  C005  F00F         	movff	___xxtofl@val+2,___xxtofl@arg+2
  6421   00100C  C006  F010         	movff	___xxtofl@val+3,___xxtofl@arg+3
  6422   001010                     l2795:
  6423   001010  5003               	movf	___xxtofl@val^0,w,c
  6424   001012  1004               	iorwf	(___xxtofl@val+1)^0,w,c
  6425   001014  1005               	iorwf	(___xxtofl@val+2)^0,w,c
  6426   001016  1006               	iorwf	(___xxtofl@val+3)^0,w,c
  6427   001018  A4D8               	btfss	status,2,c
  6428   00101A  EF11  F008         	goto	u1941
  6429   00101E  EF13  F008         	goto	u1940
  6430   001022                     u1941:
  6431   001022  EF1D  F008         	goto	l2801
  6432   001026                     u1940:
  6433   001026  0E00               	movlw	0
  6434   001028  6E03               	movwf	?___xxtofl^0,c
  6435   00102A  0E00               	movlw	0
  6436   00102C  6E04               	movwf	(?___xxtofl+1)^0,c
  6437   00102E  0E00               	movlw	0
  6438   001030  6E05               	movwf	(?___xxtofl+2)^0,c
  6439   001032  0E00               	movlw	0
  6440   001034  6E06               	movwf	(?___xxtofl+3)^0,c
  6441   001036  EFAE  F008         	goto	l1296
  6442   00103A                     l2801:
  6443   00103A  0E96               	movlw	150
  6444   00103C  6E0C               	movwf	___xxtofl@exp^0,c
  6445   00103E  EF27  F008         	goto	l2805
  6446   001042                     l2803:
  6447   001042  2A0C               	incf	___xxtofl@exp^0,f,c
  6448   001044  90D8               	bcf	status,0,c
  6449   001046  3210               	rrcf	(___xxtofl@arg+3)^0,f,c
  6450   001048  320F               	rrcf	(___xxtofl@arg+2)^0,f,c
  6451   00104A  320E               	rrcf	(___xxtofl@arg+1)^0,f,c
  6452   00104C  320D               	rrcf	___xxtofl@arg^0,f,c
  6453   00104E                     l2805:
  6454   00104E  0E00               	movlw	0
  6455   001050  140D               	andwf	___xxtofl@arg^0,w,c
  6456   001052  6E07               	movwf	??___xxtofl^0,c
  6457   001054  0E00               	movlw	0
  6458   001056  140E               	andwf	(___xxtofl@arg+1)^0,w,c
  6459   001058  6E08               	movwf	(??___xxtofl+1)^0,c
  6460   00105A  0E00               	movlw	0
  6461   00105C  140F               	andwf	(___xxtofl@arg+2)^0,w,c
  6462   00105E  6E09               	movwf	(??___xxtofl+2)^0,c
  6463   001060  0EFE               	movlw	254
  6464   001062  1410               	andwf	(___xxtofl@arg+3)^0,w,c
  6465   001064  6E0A               	movwf	(??___xxtofl+3)^0,c
  6466   001066  5007               	movf	??___xxtofl^0,w,c
  6467   001068  1008               	iorwf	(??___xxtofl+1)^0,w,c
  6468   00106A  1009               	iorwf	(??___xxtofl+2)^0,w,c
  6469   00106C  100A               	iorwf	(??___xxtofl+3)^0,w,c
  6470   00106E  A4D8               	btfss	status,2,c
  6471   001070  EF3C  F008         	goto	u1951
  6472   001074  EF3E  F008         	goto	u1950
  6473   001078                     u1951:
  6474   001078  EF21  F008         	goto	l2803
  6475   00107C                     u1950:
  6476   00107C  EF4C  F008         	goto	l1300
  6477   001080                     l2807:
  6478   001080  2A0C               	incf	___xxtofl@exp^0,f,c
  6479   001082  0E01               	movlw	1
  6480   001084  260D               	addwf	___xxtofl@arg^0,f,c
  6481   001086  0E00               	movlw	0
  6482   001088  220E               	addwfc	(___xxtofl@arg+1)^0,f,c
  6483   00108A  220F               	addwfc	(___xxtofl@arg+2)^0,f,c
  6484   00108C  2210               	addwfc	(___xxtofl@arg+3)^0,f,c
  6485   00108E  90D8               	bcf	status,0,c
  6486   001090  3210               	rrcf	(___xxtofl@arg+3)^0,f,c
  6487   001092  320F               	rrcf	(___xxtofl@arg+2)^0,f,c
  6488   001094  320E               	rrcf	(___xxtofl@arg+1)^0,f,c
  6489   001096  320D               	rrcf	___xxtofl@arg^0,f,c
  6490   001098                     l1300:
  6491   001098  0E00               	movlw	0
  6492   00109A  140D               	andwf	___xxtofl@arg^0,w,c
  6493   00109C  6E07               	movwf	??___xxtofl^0,c
  6494   00109E  0E00               	movlw	0
  6495   0010A0  140E               	andwf	(___xxtofl@arg+1)^0,w,c
  6496   0010A2  6E08               	movwf	(??___xxtofl+1)^0,c
  6497   0010A4  0E00               	movlw	0
  6498   0010A6  140F               	andwf	(___xxtofl@arg+2)^0,w,c
  6499   0010A8  6E09               	movwf	(??___xxtofl+2)^0,c
  6500   0010AA  0EFF               	movlw	255
  6501   0010AC  1410               	andwf	(___xxtofl@arg+3)^0,w,c
  6502   0010AE  6E0A               	movwf	(??___xxtofl+3)^0,c
  6503   0010B0  5007               	movf	??___xxtofl^0,w,c
  6504   0010B2  1008               	iorwf	(??___xxtofl+1)^0,w,c
  6505   0010B4  1009               	iorwf	(??___xxtofl+2)^0,w,c
  6506   0010B6  100A               	iorwf	(??___xxtofl+3)^0,w,c
  6507   0010B8  A4D8               	btfss	status,2,c
  6508   0010BA  EF61  F008         	goto	u1961
  6509   0010BE  EF63  F008         	goto	u1960
  6510   0010C2                     u1961:
  6511   0010C2  EF40  F008         	goto	l2807
  6512   0010C6                     u1960:
  6513   0010C6  EF6B  F008         	goto	l2815
  6514   0010CA                     l2813:
  6515   0010CA  060C               	decf	___xxtofl@exp^0,f,c
  6516   0010CC  90D8               	bcf	status,0,c
  6517   0010CE  360D               	rlcf	___xxtofl@arg^0,f,c
  6518   0010D0  360E               	rlcf	(___xxtofl@arg+1)^0,f,c
  6519   0010D2  360F               	rlcf	(___xxtofl@arg+2)^0,f,c
  6520   0010D4  3610               	rlcf	(___xxtofl@arg+3)^0,f,c
  6521   0010D6                     l2815:
  6522   0010D6  BE0F               	btfsc	(___xxtofl@arg+2)^0,7,c
  6523   0010D8  EF70  F008         	goto	u1971
  6524   0010DC  EF72  F008         	goto	u1970
  6525   0010E0                     u1971:
  6526   0010E0  EF7A  F008         	goto	l1307
  6527   0010E4                     u1970:
  6528   0010E4  0E02               	movlw	2
  6529   0010E6  600C               	cpfslt	___xxtofl@exp^0,c
  6530   0010E8  EF78  F008         	goto	u1981
  6531   0010EC  EF7A  F008         	goto	u1980
  6532   0010F0                     u1981:
  6533   0010F0  EF65  F008         	goto	l2813
  6534   0010F4                     u1980:
  6535   0010F4                     l1307:
  6536   0010F4  B00C               	btfsc	___xxtofl@exp^0,0,c
  6537   0010F6  EF7F  F008         	goto	u1991
  6538   0010FA  EF81  F008         	goto	u1990
  6539   0010FE                     u1991:
  6540   0010FE  EF82  F008         	goto	l2821
  6541   001102                     u1990:
  6542   001102  9E0F               	bcf	(___xxtofl@arg+2)^0,7,c
  6543   001104                     l2821:
  6544   001104  90D8               	bcf	status,0,c
  6545   001106  320C               	rrcf	___xxtofl@exp^0,f,c
  6546   001108  C00C  F007         	movff	___xxtofl@exp,??___xxtofl
  6547   00110C  6A08               	clrf	(??___xxtofl+1)^0,c
  6548   00110E  6A09               	clrf	(??___xxtofl+2)^0,c
  6549   001110  6A0A               	clrf	(??___xxtofl+3)^0,c
  6550   001112  C007  F00A         	movff	??___xxtofl,??___xxtofl+3
  6551   001116  6A09               	clrf	(??___xxtofl+2)^0,c
  6552   001118  6A08               	clrf	(??___xxtofl+1)^0,c
  6553   00111A  6A07               	clrf	??___xxtofl^0,c
  6554   00111C  5007               	movf	??___xxtofl^0,w,c
  6555   00111E  120D               	iorwf	___xxtofl@arg^0,f,c
  6556   001120  5008               	movf	(??___xxtofl+1)^0,w,c
  6557   001122  120E               	iorwf	(___xxtofl@arg+1)^0,f,c
  6558   001124  5009               	movf	(??___xxtofl+2)^0,w,c
  6559   001126  120F               	iorwf	(___xxtofl@arg+2)^0,f,c
  6560   001128  500A               	movf	(??___xxtofl+3)^0,w,c
  6561   00112A  1210               	iorwf	(___xxtofl@arg+3)^0,f,c
  6562   00112C  500B               	movf	___xxtofl@sign^0,w,c
  6563   00112E  B4D8               	btfsc	status,2,c
  6564   001130  EF9C  F008         	goto	u2001
  6565   001134  EF9E  F008         	goto	u2000
  6566   001138                     u2001:
  6567   001138  EFA6  F008         	goto	l2831
  6568   00113C                     u2000:
  6569   00113C  BE06               	btfsc	(___xxtofl@val+3)^0,7,c
  6570   00113E  EFA5  F008         	goto	u2010
  6571   001142  EFA3  F008         	goto	u2011
  6572   001146                     u2011:
  6573   001146  EFA6  F008         	goto	l2831
  6574   00114A                     u2010:
  6575   00114A  8E10               	bsf	(___xxtofl@arg+3)^0,7,c
  6576   00114C                     l2831:
  6577   00114C  C00D  F003         	movff	___xxtofl@arg,?___xxtofl
  6578   001150  C00E  F004         	movff	___xxtofl@arg+1,?___xxtofl+1
  6579   001154  C00F  F005         	movff	___xxtofl@arg+2,?___xxtofl+2
  6580   001158  C010  F006         	movff	___xxtofl@arg+3,?___xxtofl+3
  6581   00115C                     l1296:
  6582   00115C  0012               	return		;funcret
  6583   00115E                     __end_of___xxtofl:
  6584                           	callstack 0
  6585                           
  6586 ;; *************** function ___fldiv *****************
  6587 ;; Defined at:
  6588 ;;		line 11 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\sprcdiv.c"
  6589 ;; Parameters:    Size  Location     Type
  6590 ;;  b               4   16[COMRAM] unsigned char 
  6591 ;;  a               4   20[COMRAM] unsigned char 
  6592 ;; Auto vars:     Size  Location     Type
  6593 ;;  grs             4   35[COMRAM] unsigned long 
  6594 ;;  rem             4   28[COMRAM] unsigned long 
  6595 ;;  new_exp         2   33[COMRAM] short 
  6596 ;;  aexp            1   40[COMRAM] unsigned char 
  6597 ;;  bexp            1   39[COMRAM] unsigned char 
  6598 ;;  sign            1   32[COMRAM] unsigned char 
  6599 ;; Return value:  Size  Location     Type
  6600 ;;                  4   16[COMRAM] unsigned char 
  6601 ;; Registers used:
  6602 ;;		wreg, status,2, status,0
  6603 ;; Tracked objects:
  6604 ;;		On entry : 0/0
  6605 ;;		On exit  : 0/0
  6606 ;;		Unchanged: 0/0
  6607 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6608 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6609 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6610 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6611 ;;      Totals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6612 ;;Total ram usage:       25 bytes
  6613 ;; Hardware stack levels used: 1
  6614 ;; Hardware stack levels required when called: 1
  6615 ;; This function calls:
  6616 ;;		Nothing
  6617 ;; This function is called by:
  6618 ;;		_READcolor
  6619 ;; This function uses a non-reentrant model
  6620 ;;
  6621                           
  6622                           	psect	text44
  6623   000728                     __ptext44:
  6624                           	callstack 0
  6625   000728                     ___fldiv:
  6626                           	callstack 27
  6627   000728  5014               	movf	(___fldiv@b+3)^0,w,c
  6628   00072A  0B80               	andlw	128
  6629   00072C  6E21               	movwf	___fldiv@sign^0,c
  6630   00072E  5014               	movf	(___fldiv@b+3)^0,w,c
  6631   000730  2414               	addwf	(___fldiv@b+3)^0,w,c
  6632   000732  6E28               	movwf	___fldiv@bexp^0,c
  6633   000734  AE13               	btfss	(___fldiv@b+2)^0,7,c
  6634   000736  EF9F  F003         	goto	u1691
  6635   00073A  EFA1  F003         	goto	u1690
  6636   00073E                     u1691:
  6637   00073E  EFA2  F003         	goto	l2657
  6638   000742                     u1690:
  6639   000742  8028               	bsf	___fldiv@bexp^0,0,c
  6640   000744                     l2657:
  6641   000744  5028               	movf	___fldiv@bexp^0,w,c
  6642   000746  B4D8               	btfsc	status,2,c
  6643   000748  EFA8  F003         	goto	u1701
  6644   00074C  EFAA  F003         	goto	u1700
  6645   000750                     u1701:
  6646   000750  EFBF  F003         	goto	l2667
  6647   000754                     u1700:
  6648   000754  2828               	incf	___fldiv@bexp^0,w,c
  6649   000756  A4D8               	btfss	status,2,c
  6650   000758  EFB0  F003         	goto	u1711
  6651   00075C  EFB2  F003         	goto	u1710
  6652   000760                     u1711:
  6653   000760  EFBA  F003         	goto	l2663
  6654   000764                     u1710:
  6655   000764  0E00               	movlw	0
  6656   000766  6E11               	movwf	___fldiv@b^0,c
  6657   000768  0E00               	movlw	0
  6658   00076A  6E12               	movwf	(___fldiv@b+1)^0,c
  6659   00076C  0E00               	movlw	0
  6660   00076E  6E13               	movwf	(___fldiv@b+2)^0,c
  6661   000770  0E00               	movlw	0
  6662   000772  6E14               	movwf	(___fldiv@b+3)^0,c
  6663   000774                     l2663:
  6664   000774  8E13               	bsf	(___fldiv@b+2)^0,7,c
  6665   000776  0E00               	movlw	0
  6666   000778  6E14               	movwf	(___fldiv@b+3)^0,c
  6667   00077A  EFC7  F003         	goto	l2669
  6668   00077E                     l2667:
  6669   00077E  0E00               	movlw	0
  6670   000780  6E11               	movwf	___fldiv@b^0,c
  6671   000782  0E00               	movlw	0
  6672   000784  6E12               	movwf	(___fldiv@b+1)^0,c
  6673   000786  0E00               	movlw	0
  6674   000788  6E13               	movwf	(___fldiv@b+2)^0,c
  6675   00078A  0E00               	movlw	0
  6676   00078C  6E14               	movwf	(___fldiv@b+3)^0,c
  6677   00078E                     l2669:
  6678   00078E  5018               	movf	(___fldiv@a+3)^0,w,c
  6679   000790  0B80               	andlw	128
  6680   000792  1A21               	xorwf	___fldiv@sign^0,f,c
  6681   000794  5018               	movf	(___fldiv@a+3)^0,w,c
  6682   000796  2418               	addwf	(___fldiv@a+3)^0,w,c
  6683   000798  6E29               	movwf	___fldiv@aexp^0,c
  6684   00079A  AE17               	btfss	(___fldiv@a+2)^0,7,c
  6685   00079C  EFD2  F003         	goto	u1721
  6686   0007A0  EFD4  F003         	goto	u1720
  6687   0007A4                     u1721:
  6688   0007A4  EFD5  F003         	goto	l2677
  6689   0007A8                     u1720:
  6690   0007A8  8029               	bsf	___fldiv@aexp^0,0,c
  6691   0007AA                     l2677:
  6692   0007AA  5029               	movf	___fldiv@aexp^0,w,c
  6693   0007AC  B4D8               	btfsc	status,2,c
  6694   0007AE  EFDB  F003         	goto	u1731
  6695   0007B2  EFDD  F003         	goto	u1730
  6696   0007B6                     u1731:
  6697   0007B6  EFF2  F003         	goto	l2687
  6698   0007BA                     u1730:
  6699   0007BA  2829               	incf	___fldiv@aexp^0,w,c
  6700   0007BC  A4D8               	btfss	status,2,c
  6701   0007BE  EFE3  F003         	goto	u1741
  6702   0007C2  EFE5  F003         	goto	u1740
  6703   0007C6                     u1741:
  6704   0007C6  EFED  F003         	goto	l2683
  6705   0007CA                     u1740:
  6706   0007CA  0E00               	movlw	0
  6707   0007CC  6E15               	movwf	___fldiv@a^0,c
  6708   0007CE  0E00               	movlw	0
  6709   0007D0  6E16               	movwf	(___fldiv@a+1)^0,c
  6710   0007D2  0E00               	movlw	0
  6711   0007D4  6E17               	movwf	(___fldiv@a+2)^0,c
  6712   0007D6  0E00               	movlw	0
  6713   0007D8  6E18               	movwf	(___fldiv@a+3)^0,c
  6714   0007DA                     l2683:
  6715   0007DA  8E17               	bsf	(___fldiv@a+2)^0,7,c
  6716   0007DC  0E00               	movlw	0
  6717   0007DE  6E18               	movwf	(___fldiv@a+3)^0,c
  6718   0007E0  EFFA  F003         	goto	l2689
  6719   0007E4                     l2687:
  6720   0007E4  0E00               	movlw	0
  6721   0007E6  6E15               	movwf	___fldiv@a^0,c
  6722   0007E8  0E00               	movlw	0
  6723   0007EA  6E16               	movwf	(___fldiv@a+1)^0,c
  6724   0007EC  0E00               	movlw	0
  6725   0007EE  6E17               	movwf	(___fldiv@a+2)^0,c
  6726   0007F0  0E00               	movlw	0
  6727   0007F2  6E18               	movwf	(___fldiv@a+3)^0,c
  6728   0007F4                     l2689:
  6729   0007F4  5015               	movf	___fldiv@a^0,w,c
  6730   0007F6  1016               	iorwf	(___fldiv@a+1)^0,w,c
  6731   0007F8  1017               	iorwf	(___fldiv@a+2)^0,w,c
  6732   0007FA  1018               	iorwf	(___fldiv@a+3)^0,w,c
  6733   0007FC  A4D8               	btfss	status,2,c
  6734   0007FE  EF03  F004         	goto	u1751
  6735   000802  EF05  F004         	goto	u1750
  6736   000806                     u1751:
  6737   000806  EF1D  F004         	goto	l2701
  6738   00080A                     u1750:
  6739   00080A  0E00               	movlw	0
  6740   00080C  6E11               	movwf	___fldiv@b^0,c
  6741   00080E  0E00               	movlw	0
  6742   000810  6E12               	movwf	(___fldiv@b+1)^0,c
  6743   000812  0E00               	movlw	0
  6744   000814  6E13               	movwf	(___fldiv@b+2)^0,c
  6745   000816  0E00               	movlw	0
  6746   000818  6E14               	movwf	(___fldiv@b+3)^0,c
  6747   00081A  0E80               	movlw	128
  6748   00081C  1213               	iorwf	(___fldiv@b+2)^0,f,c
  6749   00081E  0E7F               	movlw	127
  6750   000820  1214               	iorwf	(___fldiv@b+3)^0,f,c
  6751   000822                     l2695:
  6752   000822  5021               	movf	___fldiv@sign^0,w,c
  6753   000824  1214               	iorwf	(___fldiv@b+3)^0,f,c
  6754   000826  C011  F011         	movff	___fldiv@b,?___fldiv
  6755   00082A  C012  F012         	movff	___fldiv@b+1,?___fldiv+1
  6756   00082E  C013  F013         	movff	___fldiv@b+2,?___fldiv+2
  6757   000832  C014  F014         	movff	___fldiv@b+3,?___fldiv+3
  6758   000836  EF60  F005         	goto	l1220
  6759   00083A                     l2701:
  6760   00083A  5028               	movf	___fldiv@bexp^0,w,c
  6761   00083C  A4D8               	btfss	status,2,c
  6762   00083E  EF23  F004         	goto	u1761
  6763   000842  EF25  F004         	goto	u1760
  6764   000846                     u1761:
  6765   000846  EF2F  F004         	goto	l2709
  6766   00084A                     u1760:
  6767   00084A  0E00               	movlw	0
  6768   00084C  6E11               	movwf	?___fldiv^0,c
  6769   00084E  0E00               	movlw	0
  6770   000850  6E12               	movwf	(?___fldiv+1)^0,c
  6771   000852  0E00               	movlw	0
  6772   000854  6E13               	movwf	(?___fldiv+2)^0,c
  6773   000856  0E00               	movlw	0
  6774   000858  6E14               	movwf	(?___fldiv+3)^0,c
  6775   00085A  EF60  F005         	goto	l1220
  6776   00085E                     l2709:
  6777   00085E  5029               	movf	___fldiv@aexp^0,w,c
  6778   000860  C028  F019         	movff	___fldiv@bexp,??___fldiv
  6779   000864  6A1A               	clrf	(??___fldiv+1)^0,c
  6780   000866  5E19               	subwf	??___fldiv^0,f,c
  6781   000868  0E00               	movlw	0
  6782   00086A  5A1A               	subwfb	(??___fldiv+1)^0,f,c
  6783   00086C  0E7F               	movlw	127
  6784   00086E  2419               	addwf	??___fldiv^0,w,c
  6785   000870  6E22               	movwf	___fldiv@new_exp^0,c
  6786   000872  0E00               	movlw	0
  6787   000874  201A               	addwfc	(??___fldiv+1)^0,w,c
  6788   000876  6E23               	movwf	(___fldiv@new_exp+1)^0,c
  6789   000878  C011  F01D         	movff	___fldiv@b,___fldiv@rem
  6790   00087C  C012  F01E         	movff	___fldiv@b+1,___fldiv@rem+1
  6791   000880  C013  F01F         	movff	___fldiv@b+2,___fldiv@rem+2
  6792   000884  C014  F020         	movff	___fldiv@b+3,___fldiv@rem+3
  6793   000888  0E00               	movlw	0
  6794   00088A  6E11               	movwf	___fldiv@b^0,c
  6795   00088C  0E00               	movlw	0
  6796   00088E  6E12               	movwf	(___fldiv@b+1)^0,c
  6797   000890  0E00               	movlw	0
  6798   000892  6E13               	movwf	(___fldiv@b+2)^0,c
  6799   000894  0E00               	movlw	0
  6800   000896  6E14               	movwf	(___fldiv@b+3)^0,c
  6801   000898  0E00               	movlw	0
  6802   00089A  6E24               	movwf	___fldiv@grs^0,c
  6803   00089C  0E00               	movlw	0
  6804   00089E  6E25               	movwf	(___fldiv@grs+1)^0,c
  6805   0008A0  0E00               	movlw	0
  6806   0008A2  6E26               	movwf	(___fldiv@grs+2)^0,c
  6807   0008A4  0E00               	movlw	0
  6808   0008A6  6E27               	movwf	(___fldiv@grs+3)^0,c
  6809   0008A8  0E00               	movlw	0
  6810   0008AA  6E29               	movwf	___fldiv@aexp^0,c
  6811   0008AC  EF90  F004         	goto	l1222
  6812   0008B0                     l2719:
  6813   0008B0  5029               	movf	___fldiv@aexp^0,w,c
  6814   0008B2  B4D8               	btfsc	status,2,c
  6815   0008B4  EF5E  F004         	goto	u1771
  6816   0008B8  EF60  F004         	goto	u1770
  6817   0008BC                     u1771:
  6818   0008BC  EF77  F004         	goto	l2727
  6819   0008C0                     u1770:
  6820   0008C0  90D8               	bcf	status,0,c
  6821   0008C2  361D               	rlcf	___fldiv@rem^0,f,c
  6822   0008C4  361E               	rlcf	(___fldiv@rem+1)^0,f,c
  6823   0008C6  361F               	rlcf	(___fldiv@rem+2)^0,f,c
  6824   0008C8  3620               	rlcf	(___fldiv@rem+3)^0,f,c
  6825   0008CA  90D8               	bcf	status,0,c
  6826   0008CC  3611               	rlcf	___fldiv@b^0,f,c
  6827   0008CE  3612               	rlcf	(___fldiv@b+1)^0,f,c
  6828   0008D0  3613               	rlcf	(___fldiv@b+2)^0,f,c
  6829   0008D2  3614               	rlcf	(___fldiv@b+3)^0,f,c
  6830   0008D4  AE27               	btfss	(___fldiv@grs+3)^0,7,c
  6831   0008D6  EF6F  F004         	goto	u1781
  6832   0008DA  EF71  F004         	goto	u1780
  6833   0008DE                     u1781:
  6834   0008DE  EF72  F004         	goto	l1225
  6835   0008E2                     u1780:
  6836   0008E2  8011               	bsf	___fldiv@b^0,0,c
  6837   0008E4                     l1225:
  6838   0008E4  90D8               	bcf	status,0,c
  6839   0008E6  3624               	rlcf	___fldiv@grs^0,f,c
  6840   0008E8  3625               	rlcf	(___fldiv@grs+1)^0,f,c
  6841   0008EA  3626               	rlcf	(___fldiv@grs+2)^0,f,c
  6842   0008EC  3627               	rlcf	(___fldiv@grs+3)^0,f,c
  6843   0008EE                     l2727:
  6844   0008EE  5015               	movf	___fldiv@a^0,w,c
  6845   0008F0  5C1D               	subwf	___fldiv@rem^0,w,c
  6846   0008F2  5016               	movf	(___fldiv@a+1)^0,w,c
  6847   0008F4  581E               	subwfb	(___fldiv@rem+1)^0,w,c
  6848   0008F6  5017               	movf	(___fldiv@a+2)^0,w,c
  6849   0008F8  581F               	subwfb	(___fldiv@rem+2)^0,w,c
  6850   0008FA  5018               	movf	(___fldiv@a+3)^0,w,c
  6851   0008FC  5820               	subwfb	(___fldiv@rem+3)^0,w,c
  6852   0008FE  A0D8               	btfss	status,0,c
  6853   000900  EF84  F004         	goto	u1791
  6854   000904  EF86  F004         	goto	u1790
  6855   000908                     u1791:
  6856   000908  EF8F  F004         	goto	l2733
  6857   00090C                     u1790:
  6858   00090C  8C27               	bsf	(___fldiv@grs+3)^0,6,c
  6859   00090E  5015               	movf	___fldiv@a^0,w,c
  6860   000910  5E1D               	subwf	___fldiv@rem^0,f,c
  6861   000912  5016               	movf	(___fldiv@a+1)^0,w,c
  6862   000914  5A1E               	subwfb	(___fldiv@rem+1)^0,f,c
  6863   000916  5017               	movf	(___fldiv@a+2)^0,w,c
  6864   000918  5A1F               	subwfb	(___fldiv@rem+2)^0,f,c
  6865   00091A  5018               	movf	(___fldiv@a+3)^0,w,c
  6866   00091C  5A20               	subwfb	(___fldiv@rem+3)^0,f,c
  6867   00091E                     l2733:
  6868   00091E  2A29               	incf	___fldiv@aexp^0,f,c
  6869   000920                     l1222:
  6870   000920  0E19               	movlw	25
  6871   000922  6429               	cpfsgt	___fldiv@aexp^0,c
  6872   000924  EF96  F004         	goto	u1801
  6873   000928  EF98  F004         	goto	u1800
  6874   00092C                     u1801:
  6875   00092C  EF58  F004         	goto	l2719
  6876   000930                     u1800:
  6877   000930  501D               	movf	___fldiv@rem^0,w,c
  6878   000932  101E               	iorwf	(___fldiv@rem+1)^0,w,c
  6879   000934  101F               	iorwf	(___fldiv@rem+2)^0,w,c
  6880   000936  1020               	iorwf	(___fldiv@rem+3)^0,w,c
  6881   000938  B4D8               	btfsc	status,2,c
  6882   00093A  EFA1  F004         	goto	u1811
  6883   00093E  EFA3  F004         	goto	u1810
  6884   000942                     u1811:
  6885   000942  EFBB  F004         	goto	l2745
  6886   000946                     u1810:
  6887   000946  8024               	bsf	___fldiv@grs^0,0,c
  6888   000948  EFBB  F004         	goto	l2745
  6889   00094C                     l2739:
  6890   00094C  90D8               	bcf	status,0,c
  6891   00094E  3611               	rlcf	___fldiv@b^0,f,c
  6892   000950  3612               	rlcf	(___fldiv@b+1)^0,f,c
  6893   000952  3613               	rlcf	(___fldiv@b+2)^0,f,c
  6894   000954  3614               	rlcf	(___fldiv@b+3)^0,f,c
  6895   000956  AE27               	btfss	(___fldiv@grs+3)^0,7,c
  6896   000958  EFB0  F004         	goto	u1821
  6897   00095C  EFB2  F004         	goto	u1820
  6898   000960                     u1821:
  6899   000960  EFB3  F004         	goto	l1231
  6900   000964                     u1820:
  6901   000964  8011               	bsf	___fldiv@b^0,0,c
  6902   000966                     l1231:
  6903   000966  90D8               	bcf	status,0,c
  6904   000968  3624               	rlcf	___fldiv@grs^0,f,c
  6905   00096A  3625               	rlcf	(___fldiv@grs+1)^0,f,c
  6906   00096C  3626               	rlcf	(___fldiv@grs+2)^0,f,c
  6907   00096E  3627               	rlcf	(___fldiv@grs+3)^0,f,c
  6908   000970  0622               	decf	___fldiv@new_exp^0,f,c
  6909   000972  A0D8               	btfss	status,0,c
  6910   000974  0623               	decf	(___fldiv@new_exp+1)^0,f,c
  6911   000976                     l2745:
  6912   000976  AE13               	btfss	(___fldiv@b+2)^0,7,c
  6913   000978  EFC0  F004         	goto	u1831
  6914   00097C  EFC2  F004         	goto	u1830
  6915   000980                     u1831:
  6916   000980  EFA6  F004         	goto	l2739
  6917   000984                     u1830:
  6918   000984  0E00               	movlw	0
  6919   000986  6E29               	movwf	___fldiv@aexp^0,c
  6920   000988  AE27               	btfss	(___fldiv@grs+3)^0,7,c
  6921   00098A  EFC9  F004         	goto	u1841
  6922   00098E  EFCB  F004         	goto	u1840
  6923   000992                     u1841:
  6924   000992  EFEF  F004         	goto	l1233
  6925   000996                     u1840:
  6926   000996  0EFF               	movlw	255
  6927   000998  1424               	andwf	___fldiv@grs^0,w,c
  6928   00099A  6E19               	movwf	??___fldiv^0,c
  6929   00099C  0EFF               	movlw	255
  6930   00099E  1425               	andwf	(___fldiv@grs+1)^0,w,c
  6931   0009A0  6E1A               	movwf	(??___fldiv+1)^0,c
  6932   0009A2  0EFF               	movlw	255
  6933   0009A4  1426               	andwf	(___fldiv@grs+2)^0,w,c
  6934   0009A6  6E1B               	movwf	(??___fldiv+2)^0,c
  6935   0009A8  0E7F               	movlw	127
  6936   0009AA  1427               	andwf	(___fldiv@grs+3)^0,w,c
  6937   0009AC  6E1C               	movwf	(??___fldiv+3)^0,c
  6938   0009AE  5019               	movf	??___fldiv^0,w,c
  6939   0009B0  101A               	iorwf	(??___fldiv+1)^0,w,c
  6940   0009B2  101B               	iorwf	(??___fldiv+2)^0,w,c
  6941   0009B4  101C               	iorwf	(??___fldiv+3)^0,w,c
  6942   0009B6  B4D8               	btfsc	status,2,c
  6943   0009B8  EFE0  F004         	goto	u1851
  6944   0009BC  EFE2  F004         	goto	u1850
  6945   0009C0                     u1851:
  6946   0009C0  EFE6  F004         	goto	l1234
  6947   0009C4                     u1850:
  6948   0009C4                     l2753:
  6949   0009C4  0E01               	movlw	1
  6950   0009C6  6E29               	movwf	___fldiv@aexp^0,c
  6951   0009C8  EFEF  F004         	goto	l1233
  6952   0009CC                     l1234:
  6953   0009CC  A011               	btfss	___fldiv@b^0,0,c
  6954   0009CE  EFEB  F004         	goto	u1861
  6955   0009D2  EFED  F004         	goto	u1860
  6956   0009D6                     u1861:
  6957   0009D6  EFEF  F004         	goto	l1233
  6958   0009DA                     u1860:
  6959   0009DA  EFE2  F004         	goto	l2753
  6960   0009DE                     l1233:
  6961   0009DE  5029               	movf	___fldiv@aexp^0,w,c
  6962   0009E0  B4D8               	btfsc	status,2,c
  6963   0009E2  EFF5  F004         	goto	u1871
  6964   0009E6  EFF7  F004         	goto	u1870
  6965   0009EA                     u1871:
  6966   0009EA  EF1B  F005         	goto	l2765
  6967   0009EE                     u1870:
  6968   0009EE  0E01               	movlw	1
  6969   0009F0  2611               	addwf	___fldiv@b^0,f,c
  6970   0009F2  0E00               	movlw	0
  6971   0009F4  2212               	addwfc	(___fldiv@b+1)^0,f,c
  6972   0009F6  2213               	addwfc	(___fldiv@b+2)^0,f,c
  6973   0009F8  2214               	addwfc	(___fldiv@b+3)^0,f,c
  6974   0009FA  A014               	btfss	(___fldiv@b+3)^0,0,c
  6975   0009FC  EF02  F005         	goto	u1881
  6976   000A00  EF04  F005         	goto	u1880
  6977   000A04                     u1881:
  6978   000A04  EF1B  F005         	goto	l2765
  6979   000A08                     u1880:
  6980   000A08  C011  F019         	movff	___fldiv@b,??___fldiv
  6981   000A0C  C012  F01A         	movff	___fldiv@b+1,??___fldiv+1
  6982   000A10  C013  F01B         	movff	___fldiv@b+2,??___fldiv+2
  6983   000A14  C014  F01C         	movff	___fldiv@b+3,??___fldiv+3
  6984   000A18  341C               	rlcf	(??___fldiv+3)^0,w,c
  6985   000A1A  321C               	rrcf	(??___fldiv+3)^0,f,c
  6986   000A1C  321B               	rrcf	(??___fldiv+2)^0,f,c
  6987   000A1E  321A               	rrcf	(??___fldiv+1)^0,f,c
  6988   000A20  3219               	rrcf	??___fldiv^0,f,c
  6989   000A22  C019  F011         	movff	??___fldiv,___fldiv@b
  6990   000A26  C01A  F012         	movff	??___fldiv+1,___fldiv@b+1
  6991   000A2A  C01B  F013         	movff	??___fldiv+2,___fldiv@b+2
  6992   000A2E  C01C  F014         	movff	??___fldiv+3,___fldiv@b+3
  6993   000A32  4A22               	infsnz	___fldiv@new_exp^0,f,c
  6994   000A34  2A23               	incf	(___fldiv@new_exp+1)^0,f,c
  6995   000A36                     l2765:
  6996   000A36  BE23               	btfsc	(___fldiv@new_exp+1)^0,7,c
  6997   000A38  EF26  F005         	goto	u1891
  6998   000A3C  5023               	movf	(___fldiv@new_exp+1)^0,w,c
  6999   000A3E  E108               	bnz	u1890
  7000   000A40  2822               	incf	___fldiv@new_exp^0,w,c
  7001   000A42  A0D8               	btfss	status,0,c
  7002   000A44  EF26  F005         	goto	u1891
  7003   000A48  EF28  F005         	goto	u1890
  7004   000A4C                     u1891:
  7005   000A4C  EF33  F005         	goto	l2769
  7006   000A50                     u1890:
  7007   000A50  0E00               	movlw	0
  7008   000A52  6E23               	movwf	(___fldiv@new_exp+1)^0,c
  7009   000A54  6822               	setf	___fldiv@new_exp^0,c
  7010   000A56  0E00               	movlw	0
  7011   000A58  6E11               	movwf	___fldiv@b^0,c
  7012   000A5A  0E00               	movlw	0
  7013   000A5C  6E12               	movwf	(___fldiv@b+1)^0,c
  7014   000A5E  0E00               	movlw	0
  7015   000A60  6E13               	movwf	(___fldiv@b+2)^0,c
  7016   000A62  0E00               	movlw	0
  7017   000A64  6E14               	movwf	(___fldiv@b+3)^0,c
  7018   000A66                     l2769:
  7019   000A66  BE23               	btfsc	(___fldiv@new_exp+1)^0,7,c
  7020   000A68  EF40  F005         	goto	u1900
  7021   000A6C  5023               	movf	(___fldiv@new_exp+1)^0,w,c
  7022   000A6E  E106               	bnz	u1901
  7023   000A70  0422               	decf	___fldiv@new_exp^0,w,c
  7024   000A72  B0D8               	btfsc	status,0,c
  7025   000A74  EF3E  F005         	goto	u1901
  7026   000A78  EF40  F005         	goto	u1900
  7027   000A7C                     u1901:
  7028   000A7C  EF4E  F005         	goto	l2773
  7029   000A80                     u1900:
  7030   000A80  0E00               	movlw	0
  7031   000A82  6E23               	movwf	(___fldiv@new_exp+1)^0,c
  7032   000A84  0E00               	movlw	0
  7033   000A86  6E22               	movwf	___fldiv@new_exp^0,c
  7034   000A88  0E00               	movlw	0
  7035   000A8A  6E11               	movwf	___fldiv@b^0,c
  7036   000A8C  0E00               	movlw	0
  7037   000A8E  6E12               	movwf	(___fldiv@b+1)^0,c
  7038   000A90  0E00               	movlw	0
  7039   000A92  6E13               	movwf	(___fldiv@b+2)^0,c
  7040   000A94  0E00               	movlw	0
  7041   000A96  6E14               	movwf	(___fldiv@b+3)^0,c
  7042   000A98  0E00               	movlw	0
  7043   000A9A  6E21               	movwf	___fldiv@sign^0,c
  7044   000A9C                     l2773:
  7045   000A9C  C022  F028         	movff	___fldiv@new_exp,___fldiv@bexp
  7046   000AA0  A028               	btfss	___fldiv@bexp^0,0,c
  7047   000AA2  EF55  F005         	goto	u1911
  7048   000AA6  EF57  F005         	goto	u1910
  7049   000AAA                     u1911:
  7050   000AAA  EF5A  F005         	goto	l2779
  7051   000AAE                     u1910:
  7052   000AAE  8E13               	bsf	(___fldiv@b+2)^0,7,c
  7053   000AB0  EF5B  F005         	goto	l2781
  7054   000AB4                     l2779:
  7055   000AB4  9E13               	bcf	(___fldiv@b+2)^0,7,c
  7056   000AB6                     l2781:
  7057   000AB6  90D8               	bcf	status,0,c
  7058   000AB8  3028               	rrcf	___fldiv@bexp^0,w,c
  7059   000ABA  6E14               	movwf	(___fldiv@b+3)^0,c
  7060   000ABC  EF11  F004         	goto	l2695
  7061   000AC0                     l1220:
  7062   000AC0  0012               	return		;funcret
  7063   000AC2                     __end_of___fldiv:
  7064                           	callstack 0
  7065                           
  7066 ;; *************** function _LowISR *****************
  7067 ;; Defined at:
  7068 ;;		line 54 in file "interrupts.c"
  7069 ;; Parameters:    Size  Location     Type
  7070 ;;		None
  7071 ;; Auto vars:     Size  Location     Type
  7072 ;;		None
  7073 ;; Return value:  Size  Location     Type
  7074 ;;                  1    wreg      void 
  7075 ;; Registers used:
  7076 ;;		status,2, status,0
  7077 ;; Tracked objects:
  7078 ;;		On entry : 0/0
  7079 ;;		On exit  : 0/0
  7080 ;;		Unchanged: 0/0
  7081 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7082 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7083 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7084 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7085 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7086 ;;Total ram usage:        2 bytes
  7087 ;; Hardware stack levels used: 1
  7088 ;; This function calls:
  7089 ;;		Nothing
  7090 ;; This function is called by:
  7091 ;;		Interrupt level 1
  7092 ;; This function uses a non-reentrant model
  7093 ;;
  7094                           
  7095                           	psect	intcodelo
  7096   000018                     __pintcodelo:
  7097                           	callstack 0
  7098   000018                     _LowISR:
  7099                           	callstack 22
  7100                           
  7101                           ;incstack = 0
  7102   000018  805D               	bsf	int$flags,0,c	;set compiler interrupt flag (level 1)
  7103   00001A  CFD8 F001          	movff	status,??_LowISR
  7104   00001E  CFE0 F002          	movff	bsr,??_LowISR+1
  7105   000022                     
  7106                           ;interrupts.c: 56:     if (PIR0bits.TMR0IF) {
  7107   000022  010E               	movlb	14	; () banked
  7108   000024  AB33               	btfss	51,5,b	;volatile
  7109   000026  EF17  F000         	goto	i1u241_21
  7110   00002A  EF19  F000         	goto	i1u241_20
  7111   00002E                     i1u241_21:
  7112   00002E  EF1E  F000         	goto	i1l456
  7113   000032                     i1u241_20:
  7114   000032                     
  7115                           ; BSR set to: 14
  7116                           ;interrupts.c: 57:         timer_val += 1;
  7117   000032  0100               	movlb	0	; () banked
  7118   000034  4BC4               	infsnz	_timer_val& (0+255),f,b
  7119   000036  2BC5               	incf	(_timer_val+1)& (0+255),f,b
  7120   000038                     
  7121                           ; BSR set to: 0
  7122                           ;interrupts.c: 58:         PIR0bits.TMR0IF = 0;
  7123   000038  010E               	movlb	14	; () banked
  7124   00003A  9B33               	bcf	51,5,b	;volatile
  7125   00003C                     i1l456:
  7126                           
  7127                           ; BSR set to: 14
  7128   00003C  C002  FFE0         	movff	??_LowISR+1,bsr
  7129   000040  C001  FFD8         	movff	??_LowISR,status
  7130   000044  905D               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  7131   000046  0010               	retfie	
  7132   000048                     __end_of_LowISR:
  7133                           	callstack 0
  7134   000000                     
  7135                           	psect	rparam
  7136   000000                     
  7137                           	psect	temp
  7138   00005D                     btemp:
  7139                           	callstack 0
  7140   00005D                     	ds	1
  7141   000000                     int$flags	set	btemp
  7142   000000                     wtemp8	set	btemp+1
  7143   000000                     ttemp5	set	btemp+1
  7144   000000                     ttemp6	set	btemp+4
  7145   000000                     ttemp7	set	btemp+8
  7146                           
  7147                           	psect	idloc
  7148                           
  7149                           ;Config register IDLOC0 @ 0x200000
  7150                           ;	unspecified, using default values
  7151   200000                     	org	2097152
  7152   200000  0FFF               	dw	4095
  7153                           
  7154                           ;Config register IDLOC1 @ 0x200002
  7155                           ;	unspecified, using default values
  7156   200002                     	org	2097154
  7157   200002  0FFF               	dw	4095
  7158                           
  7159                           ;Config register IDLOC2 @ 0x200004
  7160                           ;	unspecified, using default values
  7161   200004                     	org	2097156
  7162   200004  0FFF               	dw	4095
  7163                           
  7164                           ;Config register IDLOC3 @ 0x200006
  7165                           ;	unspecified, using default values
  7166   200006                     	org	2097158
  7167   200006  0FFF               	dw	4095
  7168                           
  7169                           ;Config register IDLOC4 @ 0x200008
  7170                           ;	unspecified, using default values
  7171   200008                     	org	2097160
  7172   200008  0FFF               	dw	4095
  7173                           
  7174                           ;Config register IDLOC5 @ 0x20000A
  7175                           ;	unspecified, using default values
  7176   20000A                     	org	2097162
  7177   20000A  0FFF               	dw	4095
  7178                           
  7179                           ;Config register IDLOC6 @ 0x20000C
  7180                           ;	unspecified, using default values
  7181   20000C                     	org	2097164
  7182   20000C  0FFF               	dw	4095
  7183                           
  7184                           ;Config register IDLOC7 @ 0x20000E
  7185                           ;	unspecified, using default values
  7186   20000E                     	org	2097166
  7187   20000E  0FFF               	dw	4095
  7188                           
  7189                           	psect	config
  7190                           
  7191                           ;Config register CONFIG1L @ 0x300000
  7192                           ;	External Oscillator mode Selection bits
  7193                           ;	FEXTOSC = HS, HS (crystal oscillator) above 8 MHz; PFM set to high power
  7194                           ;	Power-up default value for COSC bits
  7195                           ;	RSTOSC = EXTOSC_4PLL, EXTOSC with 4x PLL, with EXTOSC operating per FEXTOSC bits
  7196   300000                     	org	3145728
  7197   300000  AA                 	db	170
  7198                           
  7199                           ;Config register CONFIG1H @ 0x300001
  7200                           ;	unspecified, using default values
  7201                           ;	Clock Out Enable bit
  7202                           ;	CLKOUTEN = 0x1, unprogrammed default
  7203                           ;	Clock Switch Enable bit
  7204                           ;	CSWEN = 0x1, unprogrammed default
  7205                           ;	Fail-Safe Clock Monitor Enable bit
  7206                           ;	FCMEN = 0x1, unprogrammed default
  7207   300001                     	org	3145729
  7208   300001  FF                 	db	255
  7209                           
  7210                           ;Config register CONFIG2L @ 0x300002
  7211                           ;	unspecified, using default values
  7212                           ;	Master Clear Enable bit
  7213                           ;	MCLRE = 0x1, unprogrammed default
  7214                           ;	Power-up Timer Enable bit
  7215                           ;	PWRTE = 0x1, unprogrammed default
  7216                           ;	Low-power BOR enable bit
  7217                           ;	LPBOREN = 0x1, unprogrammed default
  7218                           ;	Brown-out Reset Enable bits
  7219                           ;	BOREN = 0x3, unprogrammed default
  7220   300002                     	org	3145730
  7221   300002  FF                 	db	255
  7222                           
  7223                           ;Config register CONFIG2H @ 0x300003
  7224                           ;	unspecified, using default values
  7225                           ;	Brown Out Reset Voltage selection bits
  7226                           ;	BORV = 0x3, unprogrammed default
  7227                           ;	ZCD Disable bit
  7228                           ;	ZCD = 0x1, unprogrammed default
  7229                           ;	PPSLOCK bit One-Way Set Enable bit
  7230                           ;	PPS1WAY = 0x1, unprogrammed default
  7231                           ;	Stack Full/Underflow Reset Enable bit
  7232                           ;	STVREN = 0x1, unprogrammed default
  7233                           ;	Debugger Enable bit
  7234                           ;	DEBUG = 0x1, unprogrammed default
  7235                           ;	Extended Instruction Set Enable bit
  7236                           ;	XINST = 0x1, unprogrammed default
  7237   300003                     	org	3145731
  7238   300003  FF                 	db	255
  7239                           
  7240                           ;Config register CONFIG3L @ 0x300004
  7241                           ;	WDT Period Select bits
  7242                           ;	WDTCPS = WDTCPS_31, Divider ratio 1:65536; software control of WDTPS
  7243                           ;	WDT operating mode
  7244                           ;	WDTE = OFF, WDT Disabled
  7245   300004                     	org	3145732
  7246   300004  9F                 	db	159
  7247                           
  7248                           ;Config register CONFIG3H @ 0x300005
  7249                           ;	unspecified, using default values
  7250                           ;	WDT Window Select bits
  7251                           ;	WDTCWS = 0x7, unprogrammed default
  7252                           ;	WDT input clock selector
  7253                           ;	WDTCCS = 0x7, unprogrammed default
  7254   300005                     	org	3145733
  7255   300005  FF                 	db	255
  7256                           
  7257                           ;Config register CONFIG4L @ 0x300006
  7258                           ;	unspecified, using default values
  7259                           ;	Write Protection Block 0
  7260                           ;	WRT0 = 0x1, unprogrammed default
  7261                           ;	Write Protection Block 1
  7262                           ;	WRT1 = 0x1, unprogrammed default
  7263                           ;	Write Protection Block 2
  7264                           ;	WRT2 = 0x1, unprogrammed default
  7265                           ;	Write Protection Block 3
  7266                           ;	WRT3 = 0x1, unprogrammed default
  7267                           ;	Write Protection Block 3
  7268                           ;	WRT4 = 0x1, unprogrammed default
  7269                           ;	Write Protection Block 3
  7270                           ;	WRT5 = 0x1, unprogrammed default
  7271                           ;	Write Protection Block 3
  7272                           ;	WRT6 = 0x1, unprogrammed default
  7273                           ;	Write Protection Block 3
  7274                           ;	WRT7 = 0x1, unprogrammed default
  7275   300006                     	org	3145734
  7276   300006  FF                 	db	255
  7277                           
  7278                           ;Config register CONFIG4H @ 0x300007
  7279                           ;	unspecified, using default values
  7280                           ;	Configuration Register Write Protection bit
  7281                           ;	WRTC = 0x1, unprogrammed default
  7282                           ;	Boot Block Write Protection bit
  7283                           ;	WRTB = 0x1, unprogrammed default
  7284                           ;	Data EEPROM Write Protection bit
  7285                           ;	WRTD = 0x1, unprogrammed default
  7286                           ;	Scanner Enable bit
  7287                           ;	SCANE = 0x1, unprogrammed default
  7288                           ;	Low Voltage Programming Enable bit
  7289                           ;	LVP = 0x1, unprogrammed default
  7290   300007                     	org	3145735
  7291   300007  FF                 	db	255
  7292                           
  7293                           ;Config register CONFIG5L @ 0x300008
  7294                           ;	unspecified, using default values
  7295                           ;	UserNVM Program Memory Code Protection bit
  7296                           ;	CP = 0x1, unprogrammed default
  7297                           ;	DataNVM Memory Code Protection bit
  7298                           ;	CPD = 0x1, unprogrammed default
  7299   300008                     	org	3145736
  7300   300008  FF                 	db	255
  7301                           
  7302                           ;Config register CONFIG5H @ 0x300009
  7303                           ;	unspecified, using default values
  7304   300009                     	org	3145737
  7305   300009  FF                 	db	255
  7306                           
  7307                           ;Config register CONFIG6L @ 0x30000A
  7308                           ;	unspecified, using default values
  7309                           ;	Table Read Protection Block 0
  7310                           ;	EBTR0 = 0x1, unprogrammed default
  7311                           ;	Table Read Protection Block 1
  7312                           ;	EBTR1 = 0x1, unprogrammed default
  7313                           ;	Table Read Protection Block 2
  7314                           ;	EBTR2 = 0x1, unprogrammed default
  7315                           ;	Table Read Protection Block 3
  7316                           ;	EBTR3 = 0x1, unprogrammed default
  7317                           ;	Table Read Protection Block 4
  7318                           ;	EBTR4 = 0x1, unprogrammed default
  7319                           ;	Table Read Protection Block 5
  7320                           ;	EBTR5 = 0x1, unprogrammed default
  7321                           ;	Table Read Protection Block 6
  7322                           ;	EBTR6 = 0x1, unprogrammed default
  7323                           ;	Table Read Protection Block 7
  7324                           ;	EBTR7 = 0x1, unprogrammed default
  7325   30000A                     	org	3145738
  7326   30000A  FF                 	db	255
  7327                           
  7328                           ;Config register CONFIG6H @ 0x30000B
  7329                           ;	unspecified, using default values
  7330                           ;	Boot Block Table Read Protection bit
  7331                           ;	EBTRB = 0x1, unprogrammed default
  7332   30000B                     	org	3145739
  7333   30000B  FF                 	db	255
  7334                           tosu	equ	0xFFF
  7335                           tosh	equ	0xFFE
  7336                           tosl	equ	0xFFD
  7337                           stkptr	equ	0xFFC
  7338                           pclatu	equ	0xFFB
  7339                           pclath	equ	0xFFA
  7340                           pcl	equ	0xFF9
  7341                           tblptru	equ	0xFF8
  7342                           tblptrh	equ	0xFF7
  7343                           tblptrl	equ	0xFF6
  7344                           tablat	equ	0xFF5
  7345                           prodh	equ	0xFF4
  7346                           prodl	equ	0xFF3
  7347                           indf0	equ	0xFEF
  7348                           postinc0	equ	0xFEE
  7349                           postdec0	equ	0xFED
  7350                           preinc0	equ	0xFEC
  7351                           plusw0	equ	0xFEB
  7352                           fsr0h	equ	0xFEA
  7353                           fsr0l	equ	0xFE9
  7354                           wreg	equ	0xFE8
  7355                           indf1	equ	0xFE7
  7356                           postinc1	equ	0xFE6
  7357                           postdec1	equ	0xFE5
  7358                           preinc1	equ	0xFE4
  7359                           plusw1	equ	0xFE3
  7360                           fsr1h	equ	0xFE2
  7361                           fsr1l	equ	0xFE1
  7362                           bsr	equ	0xFE0
  7363                           indf2	equ	0xFDF
  7364                           postinc2	equ	0xFDE
  7365                           postdec2	equ	0xFDD
  7366                           preinc2	equ	0xFDC
  7367                           plusw2	equ	0xFDB
  7368                           fsr2h	equ	0xFDA
  7369                           fsr2l	equ	0xFD9
  7370                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    0
    Data        6
    BSS         209
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     65      92
    BANK0           160      2     130
    BANK1           256      0      60
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          234      0       0

Pointer List with Targets:

    motor_init@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> motorR(BANK0[9]), 

    motor_init@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> motorL(BANK0[9]), 

    buggy_color_response@c	PTR struct colors size(2) Largest target is 20
		 -> color(COMRAM[20]), 

    READcolor@c	PTR struct colors size(2) Largest target is 20
		 -> color(COMRAM[20]), 

    movement_return@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> motorR(BANK0[9]), 

    movement_return@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> motorL(BANK0[9]), 

    movement@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> motorR(BANK0[9]), 

    movement@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> motorL(BANK0[9]), 

    reverse_yellow@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> motorR(BANK0[9]), 

    reverse_yellow@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> motorL(BANK0[9]), 

    reverse_pink@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> motorR(BANK0[9]), 

    reverse_pink@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> motorL(BANK0[9]), 

    space@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllhll[1]), CCPR2H(BITBIGSFRhhhllll[1]), 

    space@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllhll[1]), CCPR1H(BITBIGSFRhhhllll[1]), 

    space@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllhll[1]), CCPR2H(BITBIGSFRhhhllll[1]), 

    space@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllhll[1]), CCPR1H(BITBIGSFRhhhllll[1]), 

    space@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> motorR(BANK0[9]), 

    space@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> motorL(BANK0[9]), 

    right_45@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllhll[1]), CCPR2H(BITBIGSFRhhhllll[1]), 

    right_45@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllhll[1]), CCPR1H(BITBIGSFRhhhllll[1]), 

    right_45@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> motorR(BANK0[9]), 

    right_45@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllhll[1]), CCPR2H(BITBIGSFRhhhllll[1]), 

    right_45@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllhll[1]), CCPR1H(BITBIGSFRhhhllll[1]), 

    right_45@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> motorL(BANK0[9]), 

    left_45@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllhll[1]), CCPR2H(BITBIGSFRhhhllll[1]), 

    left_45@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllhll[1]), CCPR1H(BITBIGSFRhhhllll[1]), 

    left_45@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllhll[1]), CCPR2H(BITBIGSFRhhhllll[1]), 

    left_45@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllhll[1]), CCPR1H(BITBIGSFRhhhllll[1]), 

    left_45@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> motorR(BANK0[9]), 

    left_45@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> motorL(BANK0[9]), 

    stop@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllhll[1]), CCPR2H(BITBIGSFRhhhllll[1]), 

    stop@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllhll[1]), CCPR1H(BITBIGSFRhhhllll[1]), 

    stop@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> motorR(BANK0[9]), 

    stop@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllhll[1]), CCPR2H(BITBIGSFRhhhllll[1]), 

    stop@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllhll[1]), CCPR1H(BITBIGSFRhhhllll[1]), 

    stop@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> motorL(BANK0[9]), 

    reverse@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllhll[1]), CCPR2H(BITBIGSFRhhhllll[1]), 

    reverse@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllhll[1]), CCPR1H(BITBIGSFRhhhllll[1]), 

    reverse@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllhll[1]), CCPR2H(BITBIGSFRhhhllll[1]), 

    reverse@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllhll[1]), CCPR1H(BITBIGSFRhhhllll[1]), 

    reverse@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> motorR(BANK0[9]), 

    reverse@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> motorL(BANK0[9]), 

    forward@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllhll[1]), CCPR2H(BITBIGSFRhhhllll[1]), 

    forward@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllhll[1]), CCPR1H(BITBIGSFRhhhllll[1]), 

    forward@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllhll[1]), CCPR2H(BITBIGSFRhhhllll[1]), 

    forward@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllhll[1]), CCPR1H(BITBIGSFRhhhllll[1]), 

    forward@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> motorR(BANK0[9]), 

    forward@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> motorL(BANK0[9]), 

    setMotorPWM@m.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllhll[1]), CCPR2H(BITBIGSFRhhhllll[1]), 

    setMotorPWM@m.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllhll[1]), CCPR1H(BITBIGSFRhhhllll[1]), 

    setMotorPWM@m	PTR struct DC_motor size(2) Largest target is 11
		 -> motorR(BANK0[9]), motorL(BANK0[9]), 

    return_home@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> motorR(BANK0[9]), 

    return_home@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> motorL(BANK0[9]), 

    buggy_color_response@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> motorR(BANK0[9]), 

    buggy_color_response@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> motorL(BANK0[9]), 

    motorR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllhll[1]), CCPR2H(BITBIGSFRhhhllll[1]), 

    motorR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllhll[1]), CCPR1H(BITBIGSFRhhhllll[1]), 

    S236DC_motor$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllhll[1]), CCPR2H(BITBIGSFRhhhllll[1]), 

    motorL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllhll[1]), CCPR2H(BITBIGSFRhhhllll[1]), 

    S236DC_motor$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllhll[1]), CCPR1H(BITBIGSFRhhhllll[1]), 

    motorL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllhll[1]), CCPR1H(BITBIGSFRhhhllll[1]), 


Critical Paths under _main in COMRAM

    _main->_buggy_color_response
    _complete_initialisation->_color_click_init
    _color_click_init->_color_writetoaddr
    _color_writetoaddr->_I2C_2_Master_Write
    _buggy_color_response->_return_home
    _return_home->_movement_return
    _movement_return->_reverse_pink
    _movement_return->_reverse_yellow
    _reverse_yellow->_left_45
    _reverse_pink->_right_45
    _forward->_stop
    _movement->_left_45
    _movement->_right_45
    _space->_stop
    _right_45->_stop
    _reverse->_stop
    _left_45->_stop
    _stop->_setMotorPWM
    _setMotorPWM->___lwdiv
    ___lwdiv->___wmul
    _READcolor->___fldiv
    _color_read_Red->_I2C_2_Master_Read
    _color_read_Green->_I2C_2_Master_Read
    _color_read_Clear->_I2C_2_Master_Read
    _color_read_Blue->_I2C_2_Master_Read
    _I2C_2_Master_Write->_I2C_2_Master_Idle
    _I2C_2_Master_Stop->_I2C_2_Master_Idle
    _I2C_2_Master_Start->_I2C_2_Master_Idle
    _I2C_2_Master_RepStart->_I2C_2_Master_Idle
    _I2C_2_Master_Read->_I2C_2_Master_Idle
    ___fldiv->___xxtofl

Critical Paths under _LowISR in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _LowISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _LowISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _LowISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _LowISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _LowISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _LowISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _LowISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _LowISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _LowISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _LowISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _LowISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _LowISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _LowISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _LowISR in BANK13

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0  331996
                                              0 BANK0      2     2      0
               _buggy_color_response
            _complete_initialisation
                        _timer_reset
 ---------------------------------------------------------------------------------
 (1) _complete_initialisation                              0     0      0     544
                           _ADC_init
                  _I2C_2_Master_Init
                        _Timer0_init
                     _buggyLEDs_init
                   _color_click_init
                    _initDCmotorsPWM
                         _initUSART4
                    _interrupts_init
                         _motor_init
                         _ports_init
 ---------------------------------------------------------------------------------
 (2) _ports_init                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _motor_init                                           4     0      4     152
                                              2 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (2) _interrupts_init                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _initUSART4                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _initDCmotorsPWM                                      2     0      2      98
                                              2 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _color_click_init                                     1     1      0     294
                                              6 COMRAM     1     1      0
                  _I2C_2_Master_Init
                  _color_writetoaddr
 ---------------------------------------------------------------------------------
 (3) _color_writetoaddr                                    2     1      1     294
                                              4 COMRAM     2     1      1
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Init                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _buggyLEDs_init                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Timer0_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _buggy_color_response                                 8     2      6  331452
                                             57 COMRAM     8     2      6
                          _READcolor
                             ___flge
                            _forward
                           _movement
                    _movement_return
                        _return_home
                              _space
                               _stop
                        _timer_reset
 ---------------------------------------------------------------------------------
 (1) _timer_reset                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _return_home                                          6     2      4  132868
                                             51 COMRAM     6     2      4
                      _delay_ms_func
                            _forward
                    _movement_return
                            _reverse
                               _stop
 ---------------------------------------------------------------------------------
 (3) _movement_return                                      6     0      6  101769
                                             45 COMRAM     6     0      6
                            _left_45
                       _reverse_pink
                     _reverse_yellow
                           _right_45
                               _stop
 ---------------------------------------------------------------------------------
 (4) _reverse_yellow                                       6     2      4   32783
                                             39 COMRAM     6     2      4
                            _left_45
                            _reverse
                               _stop
 ---------------------------------------------------------------------------------
 (4) _reverse_pink                                         6     2      4   33347
                                             39 COMRAM     6     2      4
                            _reverse
                           _right_45
                               _stop
 ---------------------------------------------------------------------------------
 (3) _forward                                              5     1      4   11138
                                             27 COMRAM     5     1      4
                        _setMotorPWM
                               _stop
 ---------------------------------------------------------------------------------
 (3) _delay_ms_func                                        6     4      2     122
                                              2 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (2) _movement                                             8     2      6   59711
                                             39 COMRAM     8     2      6
                            _left_45
                            _reverse
                           _right_45
                              _space
                               _stop
 ---------------------------------------------------------------------------------
 (2) _space                                                6     2      4   10986
                                             27 COMRAM     6     2      4
                        _setMotorPWM
                               _stop
 ---------------------------------------------------------------------------------
 (4) _right_45                                            12     4      8   13640
                                             27 COMRAM    12     4      8
                       _custom_delay
                        _setMotorPWM
                               _stop
 ---------------------------------------------------------------------------------
 (3) _reverse                                              5     1      4   11594
                                             27 COMRAM     5     1      4
                        _setMotorPWM
                               _stop
 ---------------------------------------------------------------------------------
 (5) _left_45                                             12     4      8   13076
                                             27 COMRAM    12     4      8
                       _custom_delay
                        _setMotorPWM
                               _stop
 ---------------------------------------------------------------------------------
 (2) _stop                                                 6     2      4    7785
                                             21 COMRAM     6     2      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (3) _setMotorPWM                                          6     4      2    2589
                                             15 COMRAM     6     4      2
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     355
                                              2 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              7     3      4     358
                                              8 COMRAM     7     3      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (5) _custom_delay                                         5     3      2     198
                                              2 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (2) ___flge                                              12     4      8    3222
                                              2 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (2) _READcolor                                            2     0      2    3085
                                             41 COMRAM     2     0      2
                            ___fldiv
                           ___xxtofl
                    _color_read_Blue
                   _color_read_Clear
                   _color_read_Green
                     _color_read_Red
 ---------------------------------------------------------------------------------
 (3) _color_read_Red                                       7     5      2     113
                                              6 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (3) _color_read_Green                                     7     5      2     113
                                              6 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (3) _color_read_Clear                                     7     5      2     113
                                              6 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (3) _color_read_Blue                                      7     5      2     113
                                              6 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (4) _I2C_2_Master_Write                                   1     1      0      22
                                              3 COMRAM     1     1      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (4) _I2C_2_Master_Stop                                    0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (4) _I2C_2_Master_Start                                   0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (4) _I2C_2_Master_RepStart                                0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (4) _I2C_2_Master_Read                                    3     3      0      45
                                              3 COMRAM     3     3      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (5) _I2C_2_Master_Idle                                    1     1      0       0
                                              2 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) ___xxtofl                                            14    10      4     778
                                              2 COMRAM    14    10      4
 ---------------------------------------------------------------------------------
 (3) ___fldiv                                             25    17      8    1703
                                             16 COMRAM    25    17      8
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _LowISR                                               2     2      0       0
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _buggy_color_response
     _READcolor
       ___fldiv
         ___xxtofl (ARG)
       ___xxtofl
       _color_read_Blue
         _I2C_2_Master_Read
           _I2C_2_Master_Idle
         _I2C_2_Master_RepStart
           _I2C_2_Master_Idle
         _I2C_2_Master_Start
           _I2C_2_Master_Idle
         _I2C_2_Master_Stop
           _I2C_2_Master_Idle
         _I2C_2_Master_Write
           _I2C_2_Master_Idle
       _color_read_Clear
         _I2C_2_Master_Read
         _I2C_2_Master_RepStart
         _I2C_2_Master_Start
         _I2C_2_Master_Stop
         _I2C_2_Master_Write
       _color_read_Green
         _I2C_2_Master_Read
         _I2C_2_Master_RepStart
         _I2C_2_Master_Start
         _I2C_2_Master_Stop
         _I2C_2_Master_Write
       _color_read_Red
         _I2C_2_Master_Read
         _I2C_2_Master_RepStart
         _I2C_2_Master_Start
         _I2C_2_Master_Stop
         _I2C_2_Master_Write
     ___flge
     _forward
       _setMotorPWM
         ___lwdiv
           ___wmul (ARG)
         ___wmul
       _stop
         _setMotorPWM
     _movement
       _left_45
         _custom_delay
         _setMotorPWM
         _stop
       _reverse
         _setMotorPWM
         _stop
       _right_45
         _custom_delay
         _setMotorPWM
         _stop
       _space
         _setMotorPWM
         _stop
       _stop
     _movement_return
       _left_45
       _reverse_pink
         _reverse
         _right_45
         _stop
       _reverse_yellow
         _left_45
         _reverse
         _stop
       _right_45
       _stop
     _return_home
       _delay_ms_func
       _forward
       _movement_return
       _reverse
       _stop
     _space
     _stop
     _timer_reset
   _complete_initialisation
     _ADC_init
     _I2C_2_Master_Init
     _Timer0_init
     _buggyLEDs_init
     _color_click_init
       _I2C_2_Master_Init
       _color_writetoaddr
         _I2C_2_Master_Start
         _I2C_2_Master_Stop
         _I2C_2_Master_Write
     _initDCmotorsPWM
     _initUSART4
     _interrupts_init
     _motor_init
     _ports_init
   _timer_reset

 _LowISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             DE9      0       0      66        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      3C       7       23.4%
BITBANK13           EA      0       0      30        0.0%
BANK13              EA      0       0      31        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      2      82       5       81.2%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     41      5C       1       97.9%
BITBIGSFRhlllhl     37      0       0      47        0.0%
BITBIGSFRhlllhh     31      0       0      45        0.0%
BITBIGSFRlllhll     2A      0       0      58        0.0%
BITBIGSFRlllll      26      0       0      64        0.0%
BITBIGSFRllhh       20      0       0      50        0.0%
BITBIGSFRlllhhh     1E      0       0      52        0.0%
BITBIGSFRhhhhlh     1B      0       0      33        0.0%
BITBIGSFRhhhlll     17      0       0      38        0.0%
BITBIGSFRhlllhh     14      0       0      42        0.0%
BITBIGSFRhhhhll     13      0       0      34        0.0%
BITBIGSFRlllhhh     11      0       0      53        0.0%
BITBIGSFRhhhlhh      E      0       0      35        0.0%
BITBIGSFRhhhhh       D      0       0      32        0.0%
BITBIGSFRllhl        C      0       0      51        0.0%
BITBIGSFRlllhll      9      0       0      61        0.0%
BITBIGSFRlllhll      9      0       0      60        0.0%
BITBIGSFRhlllll      8      0       0      48        0.0%
BITBIGSFRhlllhh      6      0       0      44        0.0%
BITBIGSFRllllh       6      0       0      63        0.0%
BITBIGSFRlllhlh      6      0       0      57        0.0%
BITBIGSFRlllhlh      5      0       0      56        0.0%
BITBIGSFRhhhlll      5      0       0      39        0.0%
BITBIGSFRhlllhh      3      0       0      43        0.0%
BITBIGSFRlllhll      3      0       0      59        0.0%
BITBIGSFRlllhhl      3      0       0      55        0.0%
BITBIGSFRhlllhl      2      0       0      46        0.0%
BITBIGSFRhhhllh      2      0       0      37        0.0%
BITBIGSFRhhhlhl      1      0       0      36        0.0%
BITBIGSFRlllhhh      1      0       0      54        0.0%
BITBIGSFRhllhl       1      0       0      41        0.0%
BITBIGSFRhlh         1      0       0      40        0.0%
BITBIGSFRlllhll      1      0       0      62        0.0%
BITBIGSFRlh          1      0       0      49        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     11A      65        0.0%
DATA                 0      0     11A       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.40 build 20220703182018 
Symbol Table                                                                                   Wed Mar 15 20:32:06 2023

                 _color_read_Red 1F64                     ___fldiv@aexp 0029  
                   ___fldiv@bexp 0028                     ___fldiv@sign 0021  
                _color_read_Blue 2054                               l30 2252  
                             l33 2278                               l42 2388  
                             l27 2250                               l36 2392  
                             l45 237E                               l39 239C  
                             l48 2172                               bsr 000FE0  
            ___wmul@multiplicand 0005                 custom_delay@temp 0003  
               _color_read_Clear 2004                 _color_read_Green 1FB4  
        _complete_initialisation 20F0                delay_ms_func@time 0003  
                            l120 22FE                              l123 1FB2  
                            l132 2052                              l117 2226  
                            l126 20A2                              l135 16B4  
                            l311 1BB4                              l303 1ACA  
                            l312 1BB6                              l304 1ACC  
                            l129 2002                              l162 21B2  
                            l307 1B84                              l156 12D2  
                            l148 0726                              l317 1C66  
                            l350 1D8A                              l502 234E  
                            l414 1E94                              l159 219C  
                            l423 1EFA                              l328 157A  
                            l353 1CF8                              l450 2372  
                            l418 1EB0                              l339 17DC  
                            l347 19E2                              l363 0DDC  
                            l293 143E                              l373 0FA8  
                            l286 1E1A                              l614 2130  
                            l543 21D4                              l471 231E  
                            l199 22DE                              l296 20EE  
                            l546 21F2                              l474 2362  
                            l299 1A9A                              l629 2338  
                            l638 229E                              l903 189A  
                            l499 22BE                              l908 18E0  
                            wreg 000FE8                    return_home@mL 0034  
                  return_home@mR 0036                             l1220 0AC0  
                           l1300 1098                             l1222 0920  
                           l1231 0966                             l1136 1E8E  
                           l1233 09DE                             l1225 08E4  
                           l1129 1E86                             l3001 232A  
                           l1234 09CC                             l1307 10F4  
                           l3011 180C                             l3003 2332  
                           l3021 187A                             l3013 181C  
                           l3101 043E                             l3005 2334  
                           l3023 1888                             l3015 184A  
                           l2311 1E46                             l2303 1E1C  
                           l3111 04D0                             l3103 044E  
                           l3031 004C                             l3007 2336  
                           l3025 18D8                             l3017 185A  
                           l3009 17DE                             l2321 1E7A  
                           l2313 1E54                             l2305 1E24  
                           l2401 1B7C                             l3121 0562  
                           l3113 0502                             l3105 0450  
                           l3041 0094                             l3033 0058  
                           l3027 18DE                             l3019 1868  
                           l2323 1E80                             l2315 1E5A  
                           l2307 1E36                             l2331 1358  
                           l2411 1474                             l2403 1B9C  
                           l3123 0594                             l3131 05F4  
                           l3115 0512                             l3107 046C  
                           l3051 00FC                             l3043 00AC  
                           l3035 006E                             l1293 1000  
                           l2501 2140                             l2317 1E70  
                           l2309 1E3E                             l2333 135C  
                           l2325 12D4                             l2341 1BB8  
                           l2421 14BE                             l2413 1476  
                           l2405 1440                             l3141 0650  
                           l3133 0626                             l3125 05C6  
                           l3117 0514                             l3109 049E  
                           l3061 01A4                             l3053 012E  
                           l3045 00C0                             l3037 007E  
                           l2503 2148                             l2319 1E78  
                           l2335 139E                             l2327 12F0  
                           l2351 1BE2                             l2343 1BD8  
                           l2431 1508                             l2423 14CA  
                           l2415 1482                             l2407 1454  
                           l2511 1CFA                             l3151 0694  
                           l3143 0652                             l3135 063C  
                           l3127 05D6                             l3119 0530  
                           l3071 0236                             l3055 0160  
                           l3063 01C0                             l3047 00D8  
                           l3039 0080                             l1296 115C  
                           l2505 216E                             l2337 13BA  
                           l2329 1344                             l2361 1C26  
                           l2353 1BFA                             l2345 1BDA  
                           l2441 1558                             l2433 1520  
                           l2425 14D6                             l2417 149A  
                           l2409 1464                             l2601 1958  
                           l2513 1D32                             l2521 1CA0  
                           l3153 06AC                             l3145 0654  
                           l3137 064C                             l3161 070A  
                           l3129 05D8                             l3081 02F8  
                           l3065 01F2                             l3073 0252  
                           l3057 0192                             l3049 00E4  
                           l2507 2170                             l2371 21B4  
                           l2339 13FE                             l2363 1C34  
                           l2355 1C06                             l2435 152C  
                           l2427 14E2                             l2419 14A6  
                           l2443 155C                             l2451 16E4  
                           l2611 19B4                             l2603 1964  
                           l2515 1D4A                             l2523 1CB8  
                           l3155 06C0                             l3147 0668  
                           l3139 064E                             l3091 038A  
                           l3083 02FA                             l3075 0284  
                           l3067 0224                             l3059 01A2  
                           l3163 0712                             l2531 2238  
                           l3171 2104                             l2701 083A  
                           l2541 1F64                             l2373 21C0  
                           l2365 1C4C                             l2357 1C12  
                           l2437 1540                             l2429 14F0  
                           l2381 1ACE                             l2461 1738  
                           l2453 16FC                             l2445 16B6  
                           l2613 19C8                             l2605 196C  
                           l2517 1D76                             l2525 1CE4  
                           l2621 0E28                             l3157 06D4  
                           l3149 0680                             l3093 038C  
                           l3077 02B6                             l3085 0316  
                           l3069 0234                             l2533 223A  
                           l3181 212C                             l3173 2118  
                           l3165 20F0                             l3261 1EA2  
                           l2711 0878                             l2703 084A  
                           l2543 1FAA                             l2375 21D0  
                           l2367 1C58                             l2359 1C1A  
                           l2439 1556                             l2391 1B38  
                           l2383 1AE2                             l2471 178E  
                           l2463 1744                             l2455 1708  
                           l2447 16D6                             l2615 19E0  
                           l2607 1984                             l2519 1C68  
                           l2631 0ED4                             l2623 0E3C  
                           l3159 06EC                             l3087 0348  
                           l3095 03A8                             l3079 02E8  
                           l2535 223C                             l2527 2228  
                           l3175 2120                             l3167 20FC  
                           l3263 1EBE                             l2721 08C0  
                           l2713 0888                             l2705 084A  
                           l2801 103A                             l2377 2252  
                           l2481 238A                             l2561 204A  
                           l2553 1FB4                             l2297 227A  
                           l2369 1C64                             l2393 1B42  
                           l2385 1AF2                             l2473 17A2  
                           l2465 1752                             l2457 1720  
                           l2449 16D8                             l2609 199C  
                           l2641 0F80                             l2633 0F0C  
                           l2625 0E74                             l2617 0DDE  
                           l3097 03DA                             l3089 037A  
                           l2537 223E                             l2529 2232  
                           l3177 2124                             l3169 2100  
                           l3265 1ED6                             l2731 090E  
                           l2723 08D4                             l2715 0898  
                           l2651 0728                             l2811 108E  
                           l2803 1042                             l2379 2262  
                           l2483 238E                             l2491 2384  
                           l2547 2054                             l2555 1FFA  
                           l2299 2296                             l2395 1B5A  
                           l2387 1B02                             l2475 17B8  
                           l2467 176A                             l2459 172C  
                           l2571 1A18                             l2643 0F94  
                           l2635 0F20                             l2627 0E88  
                           l2619 0DF0                             l3099 040C  
                           l2539 22E2                             l3179 2128  
                           l3267 1EDA                             l3259 1E90  
                           l2741 0956                             l2733 091E  
                           l2725 08E2                             l2717 08A8  
                           l2709 085E                             l2661 0764  
                           l2653 0734                             l2821 1104  
                           l2813 10CA                             l2805 104E  
                           l2485 2394                             l2493 2376  
                           l2549 209A                             l2397 1B64  
                           l2389 1B20                             l2477 17BA  
                           l2469 1782                             l2645 2174  
                           l2581 1A7A                             l2573 1A36  
                           l2565 19E4                             l2637 0F58  
                           l2629 0EC0                             l2901 118C  
                           l2751 0996                             l2743 0964  
                           l2735 0930                             l2727 08EE  
                           l2719 08B0                             l2671 0794  
                           l2663 0774                             l2655 0742  
                           l2831 114C                             l2823 1108  
                           l2815 10D6                             l2807 1080  
                           l2487 2398                             l2495 237A  
                           l2559 2004                             l2399 1B70  
                           l2479 17BE                             l2591 18F6  
                           l2647 2180                             l2583 1A86  
                           l2575 1A4E                             l2567 19F8  
                           l2639 0F6C                             l2911 11E6  
                           l2903 118E                             l2761 0A08  
                           l2753 09C4                             l2737 0946  
                           l2745 0976                             l2729 090C  
                           l2681 07CA                             l2673 079A  
                           l2665 0776                             l2657 0744  
                           l2825 112C                             l2817 10E4  
                           l2809 1082                             l2497 2134  
                           l2489 2380                             l2593 18F8  
                           l2649 2198                             l2585 1A92  
                           l2577 1A58                             l2569 1A08  
                           l2921 1242                             l2913 11FE  
                           l2905 11A6                             l2841 2212  
                           l2771 0A80                             l2763 0A32  
                           l2747 0984                             l2739 094C  
                           l2691 080A                             l2683 07DA  
                           l2675 07A8                             l2659 0754  
                           l2667 077E                             l2827 113C  
                           l2819 1102                             l2499 2138  
                           l2595 1908                             l2851 0AEE  
                           l2587 1AB2                             l2579 1A70  
                           l2923 125A                             l2915 1212  
                           l2907 11BA                             l2931 12B2  
                           l2843 221C                             l2835 21F4  
                           l2781 0AB6                             l2773 0A9C  
                           l2757 09EE                             l2765 0A36  
                           l2749 0988                             l2693 081A  
                           l2685 07DC                             l2677 07AA  
                           l2669 078E                             l2829 114A  
                           l2845 157C                             l2597 1934  
                           l2589 18E2                             l2861 0BB0  
                           l2853 0B1A                             l2933 12C2  
                           l2925 126E                             l2917 122C  
                           l2909 11D2                             l2837 21F8  
                           l2941 22CC                             l2775 0AA0  
                           l2767 0A50                             l2759 09FA  
                           l2695 0822                             l2679 07BA  
                           l2687 07E4                             l2791 0FBC  
                           l2599 194C                             l2871 0C3C  
                           l2863 0BC4                             l2855 0B2C  
                           l2847 0AC2                             l2927 1286  
                           l2919 122E                             l2935 2350  
                           l2839 2202                             l2951 1D8C  
                           l2943 22CE                             l2777 0AAE  
                           l2769 0A66                             l2697 0826  
                           l2689 07F4                             l2793 0FCA  
                           l2881 0CC8                             l2873 0C68  
                           l2865 0BFC                             l2857 0B64  
                           l2849 0AD6                             l2929 129A  
                           l2961 1DF4                             l2953 1D9C  
                           l2945 22D8                             l2937 22C0  
                           l2779 0AB4                             l2795 1010  
                           l2891 0D58                             l2883 0CE0  
                           l2875 0C8C                             l2867 0C10  
                           l2859 0B78                             l2971 1E0E  
                           l2963 1DF6                             l2955 1DC2  
                           l2947 22DA                             l2939 22CA  
                           l2797 1026                             l2789 0FAC  
                           l2893 0D90                             l2885 0D0C  
                           l2869 0C24                             l2877 0CA0  
                           l2973 1E18                             l2965 1E00  
                           l2957 1DC6                             l2949 22DC  
                           l2981 20D6                             l2895 0DA4  
                           l2887 0D30                             l2879 0CB4  
                           l2991 2312                             l2967 1E02  
                           l2959 1DEA                             l2983 20DE  
                           l2975 20A4                             l2889 0D44  
                           l2897 115E                             l2993 231C  
                           l2969 1E0C                             l2985 2364  
                           l2977 20B2                             l2899 1162  
                           l2987 2300                             l2979 20BA  
                           l2995 22A0                             l2989 2308  
                           l2997 233A                             l2999 2320  
                           u2000 113C                             u2001 1138  
                           u2010 114A                             u2011 1146  
                           u1300 1E36                             u2020 0B2C  
                           u2100 12D2                             u1301 1E32  
                           u2021 0B28                             u2101 12CE  
                           u2110 180C                             u1310 1E54  
                           u2030 0B78                             u2111 1808  
                           u1311 1E50                             u2031 0B74  
                           u2120 184A                             u1320 1E70  
                           u1400 1B5A                             u2040 0BC4  
                           u2200 01F2                             u2121 1846  
                           u1321 1E6C                             u1401 1B56  
                           u2041 0BC0                             u2201 01EE  
                           u2130 1868                             u1330 12F0  
                           u1410 1B9C                             u2050 0C10  
                           u2210 0224                             u2131 1864  
                           u1331 12EC                             u1411 1B98  
                           u2051 0C0C                             u2211 0220  
                           u2140 1888                             u1340 13BA  
                           u1420 1BB4                             u1500 176A  
                           u2060 0CB4                             u2300 049E  
                           u2220 0284                             u2141 1884  
                           u1341 13B6                             u1421 1BB0  
                           u1501 1766                             u2061 0CB0  
                           u2301 049A                             u2221 0280  
                           u2150 18D8                             u1350 1C34  
                           u1430 149A                             u1510 1782  
                           u2070 0D58                             u2310 04D0  
                           u2230 02B6                             u2151 18D4  
                           u1351 1C30                             u1431 1496  
                           u1511 177E                             u2071 0D54  
                           u2311 04CC                             u2231 02B2  
                           u1360 21F2                             u1440 14BE  
                           u1520 17DC                             u1600 199C  
                           u2080 0DA4                             u2320 0502  
                           u2240 02E8                             u2160 006E  
                   _BAUD4CONbits 000EE9                             u1361 21EE  
                           u1441 14BA                             u1521 17D8  
                           u1601 1998                             u2081 0DA0  
                           u2321 04FE                             u2241 02E4  
                           u2161 006A                             u1370 2262  
                           u1530 215C                             u1450 1508  
                           u1610 0DF0                             u2090 12C2  
                           u2330 0562                             u2250 0348  
                           u2170 012E                             u1371 225E  
                           u1531 2154                             u1451 1504  
                           u1611 0DEC                             u2091 12BE  
                           u2331 055E                             u2251 0344  
                           u2171 012A                             u1700 0754  
                           u1380 2278                             u1460 1520  
                           u1620 0E3C                             u2340 0594  
                           u2260 037A                             u2180 0160  
                           u2500 1EA2                             u1701 0750  
                           u1381 2274                             u1461 151C  
                           u1621 0E38                             u2341 0590  
                           u2261 0376                             u2181 015C  
                           u2501 1E9E                             u1710 0764  
                           u1470 157A                             u1390 1B38  
                           u1550 1A4E                             u1630 0E88  
                           u2350 05C6                             u2270 03DA  
                           u2190 0192                             u2510 1EB0  
                           u1711 0760                             u1471 1576  
                           u1391 1B34                             u1551 1A4A  
                           u1631 0E84                             u2351 05C2  
                           u2271 03D6                             u2191 018E  
                           u2511 1EAC                             u1800 0930  
                           u1720 07A8                             u1480 16FC  
                           u1560 1A70                             u1640 0ED4  
                           u2360 0626                             u2280 040C  
                           u2520 1EBE                             u1801 092C  
                           u1721 07A4                             u1481 16F8  
                           u1561 1A6C                             u1641 0ED0  
                           u2361 0622                             u2281 0408  
                           u2521 1EBA                             u1810 0946  
                           u1730 07BA                             u1490 1720  
                           u1570 1AB2                             u1650 0F20  
                           u2370 063C                             u2290 043E  
                           _T2PR 000FBC                             u1811 0942  
                           u1731 07B6                             u1491 171C  
                           u1571 1AAE                             u1651 0F1C  
                           u2371 0638                             u2291 043A  
                           u1900 0A80                             u1820 0964  
                           u1740 07CA                             u1548 215E  
                           u1580 1ACA                             u1660 0F6C  
                           u1901 0A7C                             u1821 0960  
                           u1741 07C6                             u1581 1AC6  
                           u1661 0F68                             u1910 0AAE  
                           u1830 0984                             u1750 080A  
                           u1590 1984                             u1670 0F94  
                           u1911 0AAA                             u1831 0980  
                           u1751 0806                             u1591 1980  
                           u1671 0F90                             u2607 06DE  
                           u1840 0996                             u1760 084A  
                           u1920 0FBC                             u1680 21B2  
                           u1841 0992                             u1761 0846  
                           u1921 0FB8                             u1681 21AE  
                           u2617 1198                             u2537 1ECA  
                           u1850 09C4                             u1770 08C0  
                           u1690 0742                             u1930 0FCA  
                           u1851 09C0                             u1771 08BC  
                           u1691 073E                             u1931 0FC6  
                           u2707 1D68                             u2627 11C4  
                           u2547 2208                             u1860 09DA  
                           u1780 08E2                             u1940 1026  
                           u1861 09D6                             u1781 08DE  
                           u1941 1022                             u2717 1A94  
                           u2637 11F0                             u2557 009E  
                           u1870 09EE                             u1790 090C  
                           u1950 107C                             u1871 09EA  
                           u1791 0908                             u1951 1078  
                           u2807 19A6                             u2727 218A  
                           u2647 124C                             u2567 00CA  
                           u1880 0A08                             u1960 10C6  
                           u1881 0A04                             u1961 10C2  
                           u2817 19D2                             u2737 0AE0  
                           u2657 1278                             u2577 00EE  
                           u1890 0A50                             u1970 10E4  
                           u1891 0A4C                             u1971 10E0  
                           u2827 174A                             u2747 0B0C  
                           u2667 12A4                             u2587 0672  
                           u1980 10F4                             u1981 10F0  
                           u2837 17AC                             u2757 0C2E  
                           u2677 1CAA                             u2597 069E  
                           u1990 1102                             u1991 10FE  
                           u2847 1B7E                             u2767 0C5A  
                           u2687 1CD6                             u2857 14E8  
                           u2777 0CD2                             u2697 1D3C  
                           u2867 154A                             u2787 0CFE  
                           u2877 1C14                             u2797 1966  
                           u2887 21C6          __end_of_interrupts_init 2374  
                _movement_return 0DDE                             _main 1E90  
                           fsr2h 000FDA                             indf2 000FDF  
                           fsr1l 000FE1                             fsr2l 000FD9  
                           btemp 005D                             _stop 1BB8  
                           prodh 000FF4                             prodl 000FF3  
                           start 0048                 __end_of_ADC_init 233A  
                ___fldiv@new_exp 0022           __end_of_color_read_Red 1FB4  
                   ___param_bank 000000                 _color_lowerbound 00C6  
                          ?_main 0001                            _ADPCH 000F5F  
                __end_of___fldiv 0AC2                            ?_stop 0016  
                __end_of___lwdiv 1E90                            i1l456 003C  
                          _TMR0H 000FD4                            _TMR0L 000FD3  
                   left_45@count 0020       __end_of_I2C_2_Master_Start 2394  
     __end_of_I2C_2_Master_Write 2380                  __end_of_left_45 157C  
                          _color 0045                  __end_of_forward 1ACE  
                          _space 18E2                            tablat 000FF5  
                __end_of_reverse 1BB8                            ttemp5 005E  
                          ttemp6 0061                            ttemp7 0065  
                          stop@i 001A                            status 000FD8  
                          wtemp8 005E          __end_of_color_read_Blue 20A4  
          _I2C_2_Master_RepStart 2394                   delay_ms_func@i 0007  
                ?_color_read_Red 0007                  __initialization 1EFE  
                   __end_of_main 1EFE                     __end_of_stop 1C68  
               _color_upperbound 00DE        ??_complete_initialisation 0008  
              left_45@left_timer 0022                           ??_main 00E0  
                         ??_stop 001A                    __activetblptr 000000  
        __end_of_movement_return 0FAA                     ?_setMotorPWM 0010  
                         _ADRESH 000F64                           _CCPR1H 000FAA  
                         _CCPR2H 000FA6                           _CCPR3H 000F25  
                         _CCPR4H 000F21                           ?_space 001C  
          __end_of_delay_ms_func 21B4                __end_of_READcolor 16B6  
                         _RC0PPS 000E62                           _RC4REG 000EE3  
                         _RE2PPS 000E74                           _RC7PPS 000E69  
                         _RD5PPS 000E6F                           i1l3193 0022  
                         i1l3195 0032                           _RE4PPS 000E76  
                         _RD6PPS 000E70                           i1l3197 0038  
                         _RG6PPS 000E88                 ?_interrupts_init 0001  
       __end_of_color_click_init 2228                           _RX4PPS 000E15  
                         _TX4REG 000EE4                 __end_of___xxtofl 115E  
                         _LowISR 0018                           _T_flag 0042  
                  ??_Timer0_init 0003                     _CCPTMRS0bits 000FAD  
                         ___flge 17DE                           ___wmul 227A  
                      ??___fldiv 0019                        ??___lwdiv 000D  
               ??_buggyLEDs_init 0003                           clear_0 1F3C  
                         clear_1 1F48                           clear_2 1F54  
                  ?_custom_delay 0003                           _motorL 00D5  
                         _motorR 00CC                           isa$std 000001  
                      ??_left_45 0024                 __end_of_right_45 17DE  
                   __pdataCOMRAM 0059                        ??_forward 0020  
               __end_of_movement 0DDE                           tblptrh 000FF7  
                         tblptrl 000FF6                           tblptru 000FF8  
                      ?_ADC_init 0001                        ??_reverse 0020  
                   ?_return_home 0034                           stop@mL 0016  
                         stop@mR 0018                     ?_timer_reset 0001  
              ??_initDCmotorsPWM 0005  __end_of_complete_initialisation 2132  
   __end_of_buggy_color_response 0728                       ___flge@ff1 0003  
                     ___flge@ff2 0007                     ___xxtofl@arg 000D  
                   ___xxtofl@exp 000C                     ___xxtofl@val 0003  
                     __accesstop 0060          __end_of__initialization 1F5A  
       __end_of_color_read_Clear 2054         __end_of_color_read_Green 2004  
         ?_I2C_2_Master_RepStart 0001                    ___rparam_used 000001  
               ?_color_read_Blue 0007                   __pcstackCOMRAM 0001  
                   __pidataBANK0 23A2                   ??_custom_delay 0005  
                  __end_of_space 19E4              __end_of_Timer0_init 2320  
                     ??_ADC_init 0003                 ?_movement_return 002E  
                        ??_space 0020                       _card_count 0044  
                     __pbssBANK0 0060                       __pbssBANK1 0100  
                        ?_LowISR 0001                _color_writetoaddr 22E0  
                   _T2CLKCONbits 000FBF                          ?___flge 0003  
             ?_color_writetoaddr 0005                          ?___wmul 0003  
            ??_color_writetoaddr 0006                        ?___xxtofl 0003  
                        _SP4BRGH 000EE6                          _SP4BRGL 000EE5  
                        _SSP2ADD 000ED6                          _SSP2BUF 000ED5  
         color_writetoaddr@value 0005                 ??_color_read_Red 0009  
      __end_of_color_writetoaddr 2300                        _ADREFbits 000F58  
             _I2C_2_Master_Start 238A                       _initUSART4 22C0  
             _I2C_2_Master_Write 2374                        ?_right_45 001C  
                        __Hparam 0000                       _left_timer 005B  
                        __Lparam 0000                color_read_Red@tmp 000C  
                      ?_movement 0028                      _Timer0_init 2300  
                        ___fldiv 0728              ?_I2C_2_Master_Start 0001  
                        ___lwdiv 1E1C              ?_I2C_2_Master_Write 0001  
           _buggy_color_response 004C                          __pcinit 1EFE  
                        __ramtop 0E00                          __ptext0 1E90  
                        __ptext1 20F0                          __ptext2 22A0  
                        __ptext3 20A4                          __ptext4 2364  
                        __ptext5 22C0                          __ptext6 1D8C  
                        __ptext7 21F4                          __ptext8 22E0  
                        __ptext9 2228                          _left_45 1440  
                      _T2CONbits 000FBD                          _forward 19E4  
                     ??___xxtofl 0007                    ?_reverse_pink 0028  
                      _T2HLTbits 000FBE                          _reverse 1ACE  
                  right_45@count 0020                    _RxBufWriteCnt 00CB  
           ??_I2C_2_Master_Start 0004             ??_I2C_2_Master_Write 0004  
           end_of_initialization 1F5A             __end_of_custom_delay 21F4  
              ?_color_click_init 0001                        _READcolor 157C  
                     ??_right_45 0024               ??_color_click_init 0007  
                        space@mL 001C                          space@mR 001E  
                     ??_movement 002E                          postdec1 000FE5  
                        postdec2 000FDD                          postinc0 000FEE  
                        postinc2 000FDE                       _motor_init 20A4  
          ?_buggy_color_response 003A                  _initDCmotorsPWM 1D8C  
                      _PORTFbits 000F8E               setMotorPWM@negDuty 0015  
                 ??_reverse_pink 002C                    ___xxtofl@sign 000B  
                      _TRISAbits 000F81               setMotorPWM@posDuty 0014  
                      _TRISCbits 000F83                        _TRISDbits 000F84  
                      _TRISEbits 000F85                        _TRISFbits 000F86  
                      _TRISGbits 000F87                        _TRISHbits 000F88  
                    ___fldiv@grs 0024                       _ports_init 22A0  
                    ___fldiv@rem 001D         color_writetoaddr@address 0006  
        ??_I2C_2_Master_RepStart 0004                      _CCP1CONbits 000FAB  
              ?_color_read_Clear 0007                     _EUSART4RXbuf 00B0  
                   _EUSART4TXbuf 0100                      _CCP2CONbits 000FA7  
              ?_color_read_Green 0007                       ?_READcolor 002A  
                    _CCP3CONbits 000F26                      ?_initUSART4 0001  
                    _CCP4CONbits 000F22               ??_color_read_Clear 0009  
       ?_complete_initialisation 0001               ??_color_read_Green 0009  
                 __end_of_LowISR 0048                   __end_of___flge 18E2  
                 __end_of___wmul 22A0                    __pidataCOMRAM 239E  
            color_read_Clear@tmp 000C              start_initialization 1EFE  
                  _TxBufWriteCnt 00C9           buggy_color_response@mL 003A  
         buggy_color_response@mR 003C              color_read_Green@tmp 000C  
                       ??_LowISR 0001                   _reverse_yellow 1C68  
        __end_of_initDCmotorsPWM 1E1C                         ??___flge 000B  
         ??_buggy_color_response 0040                         ??___wmul 0007  
                    ?_motor_init 0003                       READcolor@c 002A  
                    __pdataBANK0 00DE                      _card_memory 0088  
                      ___fldiv@a 0015                        ___fldiv@b 0011  
                    __pbssCOMRAM 0042                    __pcstackBANK0 00E0  
                    ?_ports_init 0001                    _delay_ms_func 2174  
         __end_of_reverse_yellow 1CFA                      ??_READcolor 002C  
           __end_of_reverse_pink 1D8C                 ___lwdiv@dividend 0009  
                   ?_Timer0_init 0001                         ?___fldiv 0011  
                       ?___lwdiv 0009                       right_45@mL 001C  
                     right_45@mR 001E                      __pintcodelo 0018  
                   _custom_delay 21B4             I2C_2_Master_Read@ack 0005  
              ??_interrupts_init 0003             I2C_2_Master_Read@tmp 0006  
                       ?_left_45 001C                         ?_forward 001C  
              _I2C_2_Master_Idle 2252                _I2C_2_Master_Init 2228  
              _I2C_2_Master_Read 2132                _I2C_2_Master_Stop 2380  
                   _RxBufReadCnt 00CA                         _ADC_init 2320  
                       ?_reverse 001C               ?_I2C_2_Master_Idle 0001  
             ?_I2C_2_Master_Init 0001               ?_I2C_2_Master_Read 0001  
                  ??_setMotorPWM 0012               ?_I2C_2_Master_Stop 0001  
               ___lwdiv@quotient 000D         initDCmotorsPWM@PWMperiod 0003  
                 ?_delay_ms_func 0003              ??_I2C_2_Master_Idle 0003  
            ??_I2C_2_Master_Init 0003              ??_I2C_2_Master_Read 0004  
                 ___wmul@product 0007                         _LATAbits 000F79  
            ??_I2C_2_Master_Stop 0004                         _LATCbits 000F7B  
                       _LATDbits 000F7C                       movement@mL 0028  
                       _LATEbits 000F7D                       movement@mR 002A  
                       _LATFbits 000F7E                   reverse_pink@mL 0028  
                       _LATGbits 000F7F                   reverse_pink@mR 002A  
                       _LATHbits 000F80                  ?_reverse_yellow 0028  
                       _IPR0bits 000E1F                         _PIE0bits 000E29  
              movement_return@mL 002E                movement_return@mR 0030  
                       i1u241_20 0032                         i1u241_21 002E  
                       _PIR0bits 000E33                         _PIR4bits 000E37  
               ?_initDCmotorsPWM 0003                         _SSP2CON2 000EDA  
                       _SSP2STAT 000ED8                        _timer_val 00C4  
                     _ADCON0bits 000F60        __end_of_I2C_2_Master_Idle 227A  
      __end_of_I2C_2_Master_Init 2252        __end_of_I2C_2_Master_Read 2174  
              ___wmul@multiplier 0003        __end_of_I2C_2_Master_Stop 238A  
                   setMotorPWM@m 0010      I2C_2_Master_Write@data_byte 0004  
                      left_45@mL 001C                        left_45@mR 001E  
              ??_color_read_Blue 0009                     _TxBufReadCnt 00C8  
                  ??_return_home 0038                    ??_timer_reset 0003  
                      copy_data0 1F2A                    movement@count 002C  
  __end_of_I2C_2_Master_RepStart 239E               color_read_Blue@tmp 000C  
            __end_of_setMotorPWM 1440                     ??_initUSART4 0003  
          buggy_color_response@c 003E                         __Hrparam 0000  
                       __Lrparam 0000                        forward@mL 001C  
                      forward@mR 001E                ??_movement_return 0034  
                     _ANSELDbits 000EA7                       _ANSELFbits 000EB4  
                       ___xxtofl 0FAA             movement_return@count 0032  
                     _T0CON0bits 000FD5                       _T0CON1bits 000FD6  
                 _buggyLEDs_init 233A                  ___lwdiv@divisor 000B  
             __end_of_initUSART4 22E0                  ___lwdiv@counter 000F  
                ??_delay_ms_func 0005                         __ptext10 233A  
                       __ptext11 2300                         __ptext20 2174  
                       __ptext12 2320                         __ptext21 0AC2  
                       __ptext13 004C                         __ptext30 21B4  
                       __ptext22 18E2                         __ptext14 2350  
                       __ptext31 17DE                         __ptext23 16B6  
                       __ptext15 115E                         __ptext40 2394  
                       __ptext32 157C                         __ptext24 1ACE  
                       __ptext16 0DDE                         __ptext41 2132  
                       __ptext33 1F64                         __ptext25 1440  
                       __ptext17 1C68                         __ptext42 2252  
                       __ptext34 1FB4                         __ptext26 1BB8  
                       __ptext18 1CFA                         __ptext43 0FAA  
                       __ptext35 2004                         __ptext27 12D4  
                       __ptext19 19E4                         __ptext44 0728  
                       __ptext36 2054                         __ptext28 227A  
                       __ptext37 2374                         __ptext29 1E1C  
                       __ptext38 2380                         __ptext39 238A  
                      right_45@i 0026                     _SSP2CON1bits 000ED9  
                   _SSP2CON2bits 000EDA              __end_of_return_home 12D4  
            __end_of_timer_reset 2364                         _right_45 16B6  
                      reverse@mL 001C                        reverse@mR 001E  
                       _movement 0AC2                         isa$xinst 000000  
                     _RC4STAbits 000EE7                         int$flags 005D  
                   ??_motor_init 0007                         left_45@i 0026  
         __end_of_buggyLEDs_init 2350                       _INTCONbits 000FF2  
                   _reverse_pink 1CFA                     ??_ports_init 0003  
                    _setMotorPWM 12D4                         intlevel1 0000  
             __end_of_motor_init 20F0                      _right_timer 0059  
               reverse_yellow@mL 0028                 reverse_yellow@mR 002A  
                _interrupts_init 2364                     _timer_memory 0060  
             __end_of_ports_init 22C0                     motor_init@mL 0003  
                   motor_init@mR 0005                 _color_click_init 21F4  
            right_45@right_timer 0022                  ?_buggyLEDs_init 0001  
                     _SSP2DATPPS 000E1D                       _SSP2CLKPPS 000E1C  
                    _timer_index 0043                      _return_home 115E  
                    _timer_reset 2350                 ??_reverse_yellow 002C  
                     _TX4STAbits 000EE8                    custom_delay@i 0006  
