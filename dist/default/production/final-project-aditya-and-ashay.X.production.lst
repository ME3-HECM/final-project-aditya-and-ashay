

Microchip MPLAB XC8 Assembler V2.40 build 20220703182018 
                                                                                               Thu Mar 16 02:23:44 2023

Microchip MPLAB XC8 C Compiler v2.40 (Free license) build 20220703182018 Og1 
     1                           	processor	18F67K40
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1,group=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1,group=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1,group=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1
    47                           	psect	text33,global,reloc=2,class=CODE,delta=1
    48                           	psect	text34,global,reloc=2,class=CODE,delta=1
    49                           	psect	text35,global,reloc=2,class=CODE,delta=1
    50                           	psect	text36,global,reloc=2,class=CODE,delta=1
    51                           	psect	text37,global,reloc=2,class=CODE,delta=1
    52                           	psect	text38,global,reloc=2,class=CODE,delta=1
    53                           	psect	text39,global,reloc=2,class=CODE,delta=1
    54                           	psect	text40,global,reloc=2,class=CODE,delta=1
    55                           	psect	text41,global,reloc=2,class=CODE,delta=1
    56                           	psect	text42,global,reloc=2,class=CODE,delta=1
    57                           	psect	text43,global,reloc=2,class=CODE,delta=1,group=1
    58                           	psect	text44,global,reloc=2,class=CODE,delta=1,group=1
    59                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    60                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    61                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    62                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    63                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    64                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    65   000000                     
    66                           ; Generated 06/04/2022 GMT
    67                           ; 
    68                           ; Copyright Â© 2022, Microchip Technology Inc. and its subsidiaries ("Microchip")
    69                           ; All rights reserved.
    70                           ; 
    71                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    72                           ; 
    73                           ; Redistribution and use in source and binary forms, with or without modification, are
    74                           ; permitted provided that the following conditions are met:
    75                           ; 
    76                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    77                           ;        conditions and the following disclaimer.
    78                           ; 
    79                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    80                           ;        of conditions and the following disclaimer in the documentation and/or other
    81                           ;        materials provided with the distribution. Publication is not required when
    82                           ;        this file is used in an embedded application.
    83                           ; 
    84                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    85                           ;        software without specific prior written permission.
    86                           ; 
    87                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    88                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    89                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    90                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    91                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    92                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    93                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    94                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    95                           ; 
    96                           ; 
    97                           ; Code-generator required, PIC18F67K40 Definitions
    98                           ; 
    99                           ; SFR Addresses
   100   000000                     
   101                           	psect	idataCOMRAM
   102   00235A                     __pidataCOMRAM:
   103                           	callstack 0
   104                           
   105                           ;initializer for _right_timer
   106   00235A  0060               	dw	96
   107                           
   108                           ;initializer for _left_timer
   109   00235C  0062               	dw	98
   110                           
   111                           	psect	idataBANK0
   112   00235E                     __pidataBANK0:
   113                           	callstack 0
   114                           
   115                           ;initializer for _color_upperbound
   116   00235E  09C4               	dw	2500
   117   000000                     _TRISFbits	set	3974
   118   000000                     _LATDbits	set	3964
   119   000000                     _TRISGbits	set	3975
   120   000000                     _TRISEbits	set	3973
   121   000000                     _TX4REG	set	3812
   122   000000                     _RC4STAbits	set	3815
   123   000000                     _SP4BRGH	set	3814
   124   000000                     _SSP2CON2bits	set	3802
   125   000000                     _RX4PPS	set	3605
   126   000000                     _SSP2CLKPPS	set	3612
   127   000000                     _SSP2DATPPS	set	3613
   128   000000                     _ANSELDbits	set	3751
   129   000000                     _SSP2ADD	set	3798
   130   000000                     _SSP2CON1bits	set	3801
   131   000000                     _RC4REG	set	3811
   132   000000                     _SP4BRGL	set	3813
   133   000000                     _TX4STAbits	set	3816
   134   000000                     _BAUD4CONbits	set	3817
   135   000000                     _LATAbits	set	3961
   136   000000                     _LATGbits	set	3967
   137   000000                     _SSP2CON2	set	3802
   138   000000                     _TRISDbits	set	3972
   139   000000                     _SSP2STAT	set	3800
   140   000000                     _ANSELFbits	set	3764
   141   000000                     _SSP2BUF	set	3797
   142   000000                     _IPR0bits	set	3615
   143   000000                     _PIE0bits	set	3625
   144   000000                     _PIR4bits	set	3639
   145   000000                     _RC0PPS	set	3682
   146   000000                     _RD5PPS	set	3695
   147   000000                     _RE2PPS	set	3700
   148   000000                     _RD6PPS	set	3696
   149   000000                     _TRISAbits	set	3969
   150   000000                     _LATHbits	set	3968
   151   000000                     _TRISCbits	set	3971
   152   000000                     _LATCbits	set	3963
   153   000000                     _LATEbits	set	3965
   154   000000                     _LATFbits	set	3966
   155   000000                     _RC7PPS	set	3689
   156   000000                     _CCPR4H	set	3873
   157   000000                     _CCPR3H	set	3877
   158   000000                     _TRISHbits	set	3976
   159   000000                     _PORTFbits	set	3982
   160   000000                     _T2PR	set	4028
   161   000000                     _T2CONbits	set	4029
   162   000000                     _CCPR2H	set	4006
   163   000000                     _CCPR1H	set	4010
   164   000000                     _RE4PPS	set	3702
   165   000000                     _RG6PPS	set	3720
   166   000000                     _TMR0L	set	4051
   167   000000                     _TMR0H	set	4052
   168   000000                     _T0CON0bits	set	4053
   169   000000                     _T0CON1bits	set	4054
   170   000000                     _INTCONbits	set	4082
   171   000000                     _T2CLKCONbits	set	4031
   172   000000                     _T2HLTbits	set	4030
   173   000000                     _CCP1CONbits	set	4011
   174   000000                     _CCPTMRS0bits	set	4013
   175   000000                     _CCP2CONbits	set	4007
   176   000000                     _ADREFbits	set	3928
   177   000000                     _CCP3CONbits	set	3878
   178   000000                     _CCP4CONbits	set	3874
   179   000000                     _PIR0bits	set	3635
   180   000000                     _ADPCH	set	3935
   181   000000                     _ADRESH	set	3940
   182   000000                     _ADCON0bits	set	3936
   183                           
   184                           ; #config settings
   185                           
   186                           	psect	cinit
   187   001EC8                     __pcinit:
   188                           	callstack 0
   189   001EC8                     start_initialization:
   190                           	callstack 0
   191   001EC8                     __initialization:
   192                           	callstack 0
   193                           
   194                           ; Initialize objects allocated to BANK0 (2 bytes)
   195                           ; load TBLPTR registers with __pidataBANK0
   196   001EC8  0E5E               	movlw	low __pidataBANK0
   197   001ECA  6EF6               	movwf	tblptrl,c
   198   001ECC  0E23               	movlw	high __pidataBANK0
   199   001ECE  6EF7               	movwf	tblptrh,c
   200   001ED0  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   201   001ED2  6EF8               	movwf	tblptru,c
   202   001ED4  0009               	tblrd		*+	;fetch initializer
   203   001ED6  CFF5 F0C2          	movff	tablat,__pdataBANK0
   204   001EDA  0009               	tblrd		*+	;fetch initializer
   205   001EDC  CFF5 F0C3          	movff	tablat,__pdataBANK0+1
   206                           
   207                           ; Initialize objects allocated to COMRAM (4 bytes)
   208                           ; load TBLPTR registers with __pidataCOMRAM
   209   001EE0  0E5A               	movlw	low __pidataCOMRAM
   210   001EE2  6EF6               	movwf	tblptrl,c
   211   001EE4  0E23               	movlw	high __pidataCOMRAM
   212   001EE6  6EF7               	movwf	tblptrh,c
   213   001EE8  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   214   001EEA  6EF8               	movwf	tblptru,c
   215   001EEC  EE00  F059         	lfsr	0,__pdataCOMRAM
   216   001EF0  EE10 F004          	lfsr	1,4
   217   001EF4                     copy_data0:
   218   001EF4  0009               	tblrd		*+
   219   001EF6  CFF5 FFEE          	movff	tablat,postinc0
   220   001EFA  50E5               	movf	postdec1,w,c
   221   001EFC  50E1               	movf	fsr1l,w,c
   222   001EFE  E1FA               	bnz	copy_data0
   223                           
   224                           ; Clear objects allocated to BANK0 (98 bytes)
   225   001F00  EE00  F060         	lfsr	0,__pbssBANK0
   226   001F04  0E62               	movlw	98
   227   001F06                     clear_0:
   228   001F06  6AEE               	clrf	postinc0,c
   229   001F08  06E8               	decf	wreg,f,c
   230   001F0A  E1FD               	bnz	clear_0
   231                           
   232                           ; Clear objects allocated to COMRAM (24 bytes)
   233   001F0C  EE00  F041         	lfsr	0,__pbssCOMRAM
   234   001F10  0E18               	movlw	24
   235   001F12                     clear_1:
   236   001F12  6AEE               	clrf	postinc0,c
   237   001F14  06E8               	decf	wreg,f,c
   238   001F16  E1FD               	bnz	clear_1
   239   001F18                     end_of_initialization:
   240                           	callstack 0
   241   001F18                     __end_of__initialization:
   242                           	callstack 0
   243   001F18  905D               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   244   001F1A  925D               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   245   001F1C  0100               	movlb	0
   246   001F1E  EFF8  F00E         	goto	_main	;jump to C main() function
   247                           
   248                           	psect	bssCOMRAM
   249   000041                     __pbssCOMRAM:
   250                           	callstack 0
   251   000041                     _timer_val:
   252                           	callstack 0
   253   000041                     	ds	2
   254   000043                     _timer_index:
   255                           	callstack 0
   256   000043                     	ds	1
   257   000044                     _card_count:
   258                           	callstack 0
   259   000044                     	ds	1
   260   000045                     _color:
   261                           	callstack 0
   262   000045                     	ds	20
   263                           
   264                           	psect	dataCOMRAM
   265   000059                     __pdataCOMRAM:
   266                           	callstack 0
   267   000059                     _right_timer:
   268                           	callstack 0
   269   000059                     	ds	2
   270   00005B                     _left_timer:
   271                           	callstack 0
   272   00005B                     	ds	2
   273                           
   274                           	psect	bssBANK0
   275   000060                     __pbssBANK0:
   276                           	callstack 0
   277   000060                     _timer_memory:
   278                           	callstack 0
   279   000060                     	ds	40
   280   000088                     _card_memory:
   281                           	callstack 0
   282   000088                     	ds	40
   283   0000B0                     _motorR:
   284                           	callstack 0
   285   0000B0                     	ds	9
   286   0000B9                     _motorL:
   287                           	callstack 0
   288   0000B9                     	ds	9
   289                           
   290                           	psect	dataBANK0
   291   0000C2                     __pdataBANK0:
   292                           	callstack 0
   293   0000C2                     _color_upperbound:
   294                           	callstack 0
   295   0000C2                     	ds	2
   296                           
   297                           	psect	cstackBANK0
   298   0000C4                     __pcstackBANK0:
   299                           	callstack 0
   300   0000C4                     ??_main:
   301                           
   302                           ; 1 bytes @ 0x0
   303   0000C4                     	ds	2
   304                           
   305                           	psect	cstackCOMRAM
   306   000001                     __pcstackCOMRAM:
   307                           	callstack 0
   308   000001                     ??_LowISR:
   309   000001                     
   310                           ; 1 bytes @ 0x0
   311   000001                     	ds	2
   312   000003                     ??_I2C_2_Master_Idle:
   313   000003                     ?___wmul:
   314                           	callstack 0
   315   000003                     ?___xxtofl:
   316                           	callstack 0
   317   000003                     delay_ms_func@time:
   318                           	callstack 0
   319   000003                     initDCmotorsPWM@PWMperiod:
   320                           	callstack 0
   321   000003                     motor_init@mL:
   322                           	callstack 0
   323   000003                     custom_delay@temp:
   324                           	callstack 0
   325   000003                     ___wmul@multiplier:
   326                           	callstack 0
   327   000003                     ___flge@ff1:
   328                           	callstack 0
   329   000003                     ___xxtofl@val:
   330                           	callstack 0
   331                           
   332                           ; 4 bytes @ 0x2
   333   000003                     	ds	1
   334   000004                     ??_I2C_2_Master_Read:
   335   000004                     I2C_2_Master_Write@data_byte:
   336                           	callstack 0
   337                           
   338                           ; 1 bytes @ 0x3
   339   000004                     	ds	1
   340   000005                     ??_delay_ms_func:
   341   000005                     ??_custom_delay:
   342   000005                     I2C_2_Master_Read@ack:
   343                           	callstack 0
   344   000005                     color_writetoaddr@value:
   345                           	callstack 0
   346   000005                     motor_init@mR:
   347                           	callstack 0
   348   000005                     ___wmul@multiplicand:
   349                           	callstack 0
   350                           
   351                           ; 2 bytes @ 0x4
   352   000005                     	ds	1
   353   000006                     I2C_2_Master_Read@tmp:
   354                           	callstack 0
   355   000006                     color_writetoaddr@address:
   356                           	callstack 0
   357   000006                     custom_delay@i:
   358                           	callstack 0
   359                           
   360                           ; 2 bytes @ 0x5
   361   000006                     	ds	1
   362   000007                     ??_color_click_init:
   363   000007                     ??___xxtofl:
   364   000007                     ?_color_read_Red:
   365                           	callstack 0
   366   000007                     ?_color_read_Blue:
   367                           	callstack 0
   368   000007                     ?_color_read_Green:
   369                           	callstack 0
   370   000007                     ?_color_read_Clear:
   371                           	callstack 0
   372   000007                     delay_ms_func@i:
   373                           	callstack 0
   374   000007                     ___wmul@product:
   375                           	callstack 0
   376   000007                     ___flge@ff2:
   377                           	callstack 0
   378                           
   379                           ; 4 bytes @ 0x6
   380   000007                     	ds	1
   381   000008                     
   382                           ; 1 bytes @ 0x7
   383   000008                     	ds	1
   384   000009                     ??_color_read_Red:
   385   000009                     ??_color_read_Blue:
   386   000009                     ??_color_read_Green:
   387   000009                     ??_color_read_Clear:
   388   000009                     ?___lwdiv:
   389                           	callstack 0
   390   000009                     ___lwdiv@dividend:
   391                           	callstack 0
   392                           
   393                           ; 2 bytes @ 0x8
   394   000009                     	ds	2
   395   00000B                     ??___flge:
   396   00000B                     ___xxtofl@sign:
   397                           	callstack 0
   398   00000B                     ___lwdiv@divisor:
   399                           	callstack 0
   400                           
   401                           ; 2 bytes @ 0xA
   402   00000B                     	ds	1
   403   00000C                     ___xxtofl@exp:
   404                           	callstack 0
   405   00000C                     color_read_Red@tmp:
   406                           	callstack 0
   407   00000C                     color_read_Blue@tmp:
   408                           	callstack 0
   409   00000C                     color_read_Green@tmp:
   410                           	callstack 0
   411   00000C                     color_read_Clear@tmp:
   412                           	callstack 0
   413                           
   414                           ; 2 bytes @ 0xB
   415   00000C                     	ds	1
   416   00000D                     ___lwdiv@quotient:
   417                           	callstack 0
   418   00000D                     ___xxtofl@arg:
   419                           	callstack 0
   420                           
   421                           ; 4 bytes @ 0xC
   422   00000D                     	ds	2
   423   00000F                     ___lwdiv@counter:
   424                           	callstack 0
   425                           
   426                           ; 1 bytes @ 0xE
   427   00000F                     	ds	1
   428   000010                     setMotorPWM@m:
   429                           	callstack 0
   430                           
   431                           ; 2 bytes @ 0xF
   432   000010                     	ds	1
   433   000011                     ?___fldiv:
   434                           	callstack 0
   435   000011                     ___fldiv@b:
   436                           	callstack 0
   437                           
   438                           ; 4 bytes @ 0x10
   439   000011                     	ds	1
   440   000012                     ??_setMotorPWM:
   441                           
   442                           ; 1 bytes @ 0x11
   443   000012                     	ds	2
   444   000014                     setMotorPWM@posDuty:
   445                           	callstack 0
   446                           
   447                           ; 1 bytes @ 0x13
   448   000014                     	ds	1
   449   000015                     setMotorPWM@negDuty:
   450                           	callstack 0
   451   000015                     ___fldiv@a:
   452                           	callstack 0
   453                           
   454                           ; 4 bytes @ 0x14
   455   000015                     	ds	1
   456   000016                     stop@mL:
   457                           	callstack 0
   458                           
   459                           ; 2 bytes @ 0x15
   460   000016                     	ds	2
   461   000018                     stop@mR:
   462                           	callstack 0
   463                           
   464                           ; 2 bytes @ 0x17
   465   000018                     	ds	1
   466   000019                     ??___fldiv:
   467                           
   468                           ; 1 bytes @ 0x18
   469   000019                     	ds	1
   470   00001A                     stop@i:
   471                           	callstack 0
   472                           
   473                           ; 1 bytes @ 0x19
   474   00001A                     	ds	1
   475   00001B                     forward@mL:
   476                           	callstack 0
   477   00001B                     reverse@mL:
   478                           	callstack 0
   479   00001B                     left_45@mL:
   480                           	callstack 0
   481   00001B                     right_45@mL:
   482                           	callstack 0
   483   00001B                     space@mL:
   484                           	callstack 0
   485                           
   486                           ; 2 bytes @ 0x1A
   487   00001B                     	ds	2
   488   00001D                     forward@mR:
   489                           	callstack 0
   490   00001D                     reverse@mR:
   491                           	callstack 0
   492   00001D                     left_45@mR:
   493                           	callstack 0
   494   00001D                     right_45@mR:
   495                           	callstack 0
   496   00001D                     space@mR:
   497                           	callstack 0
   498   00001D                     ___fldiv@rem:
   499                           	callstack 0
   500                           
   501                           ; 4 bytes @ 0x1C
   502   00001D                     	ds	2
   503   00001F                     ??_space:
   504   00001F                     left_45@count:
   505                           	callstack 0
   506   00001F                     right_45@count:
   507                           	callstack 0
   508                           
   509                           ; 2 bytes @ 0x1E
   510   00001F                     	ds	2
   511   000021                     ___fldiv@sign:
   512                           	callstack 0
   513   000021                     left_45@left_timer:
   514                           	callstack 0
   515   000021                     right_45@right_timer:
   516                           	callstack 0
   517                           
   518                           ; 2 bytes @ 0x20
   519   000021                     	ds	1
   520   000022                     ___fldiv@new_exp:
   521                           	callstack 0
   522                           
   523                           ; 2 bytes @ 0x21
   524   000022                     	ds	1
   525   000023                     ??_left_45:
   526   000023                     ??_right_45:
   527                           
   528                           ; 1 bytes @ 0x22
   529   000023                     	ds	1
   530   000024                     ___fldiv@grs:
   531                           	callstack 0
   532                           
   533                           ; 4 bytes @ 0x23
   534   000024                     	ds	1
   535   000025                     left_45@i:
   536                           	callstack 0
   537   000025                     right_45@i:
   538                           	callstack 0
   539                           
   540                           ; 2 bytes @ 0x24
   541   000025                     	ds	2
   542   000027                     reverse_yellow@mL:
   543                           	callstack 0
   544   000027                     reverse_pink@mL:
   545                           	callstack 0
   546   000027                     movement@mL:
   547                           	callstack 0
   548                           
   549                           ; 2 bytes @ 0x26
   550   000027                     	ds	1
   551   000028                     ___fldiv@bexp:
   552                           	callstack 0
   553                           
   554                           ; 1 bytes @ 0x27
   555   000028                     	ds	1
   556   000029                     ___fldiv@aexp:
   557                           	callstack 0
   558   000029                     reverse_yellow@mR:
   559                           	callstack 0
   560   000029                     reverse_pink@mR:
   561                           	callstack 0
   562   000029                     movement@mR:
   563                           	callstack 0
   564                           
   565                           ; 2 bytes @ 0x28
   566   000029                     	ds	1
   567   00002A                     READcolor@c:
   568                           	callstack 0
   569                           
   570                           ; 2 bytes @ 0x29
   571   00002A                     	ds	1
   572   00002B                     ??_reverse_yellow:
   573   00002B                     ??_reverse_pink:
   574   00002B                     movement@count:
   575                           	callstack 0
   576                           
   577                           ; 2 bytes @ 0x2A
   578   00002B                     	ds	1
   579   00002C                     
   580                           ; 1 bytes @ 0x2B
   581   00002C                     	ds	1
   582   00002D                     ??_movement:
   583   00002D                     movement_return@mL:
   584                           	callstack 0
   585                           
   586                           ; 2 bytes @ 0x2C
   587   00002D                     	ds	2
   588   00002F                     movement_return@mR:
   589                           	callstack 0
   590                           
   591                           ; 2 bytes @ 0x2E
   592   00002F                     	ds	2
   593   000031                     movement_return@count:
   594                           	callstack 0
   595                           
   596                           ; 2 bytes @ 0x30
   597   000031                     	ds	2
   598   000033                     return_home@mL:
   599                           	callstack 0
   600                           
   601                           ; 2 bytes @ 0x32
   602   000033                     	ds	2
   603   000035                     return_home@mR:
   604                           	callstack 0
   605                           
   606                           ; 2 bytes @ 0x34
   607   000035                     	ds	2
   608   000037                     ??_return_home:
   609                           
   610                           ; 1 bytes @ 0x36
   611   000037                     	ds	2
   612   000039                     buggy_color_response@mL:
   613                           	callstack 0
   614                           
   615                           ; 2 bytes @ 0x38
   616   000039                     	ds	2
   617   00003B                     buggy_color_response@mR:
   618                           	callstack 0
   619                           
   620                           ; 2 bytes @ 0x3A
   621   00003B                     	ds	2
   622   00003D                     buggy_color_response@c:
   623                           	callstack 0
   624                           
   625                           ; 2 bytes @ 0x3C
   626   00003D                     	ds	2
   627   00003F                     ??_buggy_color_response:
   628                           
   629                           ; 1 bytes @ 0x3E
   630   00003F                     	ds	2
   631                           
   632 ;;
   633 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   634 ;;
   635 ;; *************** function _main *****************
   636 ;; Defined at:
   637 ;;		line 19 in file "main.c"
   638 ;; Parameters:    Size  Location     Type
   639 ;;		None
   640 ;; Auto vars:     Size  Location     Type
   641 ;;		None
   642 ;; Return value:  Size  Location     Type
   643 ;;                  1    wreg      void 
   644 ;; Registers used:
   645 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   646 ;; Tracked objects:
   647 ;;		On entry : 0/0
   648 ;;		On exit  : 0/0
   649 ;;		Unchanged: 0/0
   650 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   651 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   652 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   653 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   654 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   655 ;;Total ram usage:        2 bytes
   656 ;; Hardware stack levels required when called: 9
   657 ;; This function calls:
   658 ;;		_buggy_color_response
   659 ;;		_complete_initialisation
   660 ;;		_timer_reset
   661 ;; This function is called by:
   662 ;;		Startup code after reset
   663 ;; This function uses a non-reentrant model
   664 ;;
   665                           
   666                           	psect	text0
   667   001DF0                     __ptext0:
   668                           	callstack 0
   669   001DF0                     _main:
   670                           	callstack 22
   671   001DF0                     
   672                           ;main.c: 21:     complete_initialisation();
   673   001DF0  EC57  F010         	call	_complete_initialisation	;wreg free
   674   001DF4                     l394:
   675   001DF4  A48E               	btfss	142,2,c	;volatile
   676   001DF6  EFFF  F00E         	goto	u2471
   677   001DFA  EF01  F00F         	goto	u2470
   678   001DFE                     u2471:
   679   001DFE  EF08  F00F         	goto	l398
   680   001E02                     u2470:
   681   001E02  B68E               	btfsc	142,3,c	;volatile
   682   001E04  EF06  F00F         	goto	u2481
   683   001E08  EF08  F00F         	goto	u2480
   684   001E0C                     u2481:
   685   001E0C  EFFA  F00E         	goto	l394
   686   001E10                     u2480:
   687   001E10                     l398:
   688                           
   689                           ;main.c: 27:     if (!PORTFbits.RF3){_delay((unsigned long)((500)*(64000000/4000.0)));ti
      +                          mer_reset();
   690   001E10  B68E               	btfsc	142,3,c	;volatile
   691   001E12  EF0D  F00F         	goto	u2491
   692   001E16  EF0F  F00F         	goto	u2490
   693   001E1A                     u2491:
   694   001E1A  EF2D  F00F         	goto	l403
   695   001E1E                     u2490:
   696   001E1E  0E29               	movlw	41
   697   001E20  0100               	movlb	0	; () banked
   698   001E22  6FC5               	movwf	(??_main+1)& (0+255),b
   699   001E24  0E96               	movlw	150
   700   001E26  6FC4               	movwf	??_main& (0+255),b
   701   001E28  0E7F               	movlw	127
   702   001E2A                     u2507:
   703   001E2A  2EE8               	decfsz	wreg,f,c
   704   001E2C  D7FE               	bra	u2507
   705   001E2E  2FC4               	decfsz	??_main& (0+255),f,b
   706   001E30  D7FC               	bra	u2507
   707   001E32  2FC5               	decfsz	(??_main+1)& (0+255),f,b
   708   001E34  D7FA               	bra	u2507
   709   001E36  EC87  F011         	call	_timer_reset	;wreg free
   710   001E3A                     l3209:
   711                           
   712                           ;main.c: 29:         buggy_color_response(&motorL,&motorR,&color);
   713   001E3A  0EB9               	movlw	low _motorL
   714   001E3C  6E39               	movwf	buggy_color_response@mL^0,c
   715   001E3E  0E00               	movlw	high _motorL
   716   001E40  6E3A               	movwf	(buggy_color_response@mL+1)^0,c
   717   001E42  0EB0               	movlw	low _motorR
   718   001E44  6E3B               	movwf	buggy_color_response@mR^0,c
   719   001E46  0E00               	movlw	high _motorR
   720   001E48  6E3C               	movwf	(buggy_color_response@mR+1)^0,c
   721   001E4A  0E45               	movlw	low _color
   722   001E4C  6E3D               	movwf	buggy_color_response@c^0,c
   723   001E4E  0E00               	movlw	high _color
   724   001E50  6E3E               	movwf	(buggy_color_response@c+1)^0,c
   725   001E52  EC24  F000         	call	_buggy_color_response	;wreg free
   726   001E56  EF1D  F00F         	goto	l3209
   727   001E5A                     l403:
   728   001E5A  EF22  F000         	goto	start
   729   001E5E                     __end_of_main:
   730                           	callstack 0
   731                           
   732 ;; *************** function _complete_initialisation *****************
   733 ;; Defined at:
   734 ;;		line 16 in file "initialisation.c"
   735 ;; Parameters:    Size  Location     Type
   736 ;;		None
   737 ;; Auto vars:     Size  Location     Type
   738 ;;		None
   739 ;; Return value:  Size  Location     Type
   740 ;;                  1    wreg      void 
   741 ;; Registers used:
   742 ;;		wreg, status,2, status,0, cstack
   743 ;; Tracked objects:
   744 ;;		On entry : 0/0
   745 ;;		On exit  : 0/0
   746 ;;		Unchanged: 0/0
   747 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   748 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   749 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   750 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   751 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   752 ;;Total ram usage:        0 bytes
   753 ;; Hardware stack levels used: 1
   754 ;; Hardware stack levels required when called: 5
   755 ;; This function calls:
   756 ;;		_ADC_init
   757 ;;		_I2C_2_Master_Init
   758 ;;		_Timer0_init
   759 ;;		_buggyLEDs_init
   760 ;;		_color_click_init
   761 ;;		_initDCmotorsPWM
   762 ;;		_initUSART4
   763 ;;		_interrupts_init
   764 ;;		_motor_init
   765 ;;		_ports_init
   766 ;; This function is called by:
   767 ;;		_main
   768 ;; This function uses a non-reentrant model
   769 ;;
   770                           
   771                           	psect	text1
   772   0020AE                     __ptext1:
   773                           	callstack 0
   774   0020AE                     _complete_initialisation:
   775                           	callstack 25
   776   0020AE                     
   777                           ;initialisation.c: 18:     initDCmotorsPWM(99);
   778   0020AE  0E00               	movlw	0
   779   0020B0  6E04               	movwf	(initDCmotorsPWM@PWMperiod+1)^0,c
   780   0020B2  0E63               	movlw	99
   781   0020B4  6E03               	movwf	initDCmotorsPWM@PWMperiod^0,c
   782   0020B6  EC76  F00E         	call	_initDCmotorsPWM	;wreg free
   783   0020BA                     
   784                           ;initialisation.c: 19:     buggyLEDs_init();
   785   0020BA  EC7C  F011         	call	_buggyLEDs_init	;wreg free
   786   0020BE                     
   787                           ;initialisation.c: 20:     ports_init();
   788   0020BE  EC2F  F011         	call	_ports_init	;wreg free
   789   0020C2                     
   790                           ;initialisation.c: 21:     motor_init(&motorL,&motorR);
   791   0020C2  0EB9               	movlw	low _motorL
   792   0020C4  6E03               	movwf	motor_init@mL^0,c
   793   0020C6  0E00               	movlw	high _motorL
   794   0020C8  6E04               	movwf	(motor_init@mL+1)^0,c
   795   0020CA  0EB0               	movlw	low _motorR
   796   0020CC  6E05               	movwf	motor_init@mR^0,c
   797   0020CE  0E00               	movlw	high _motorR
   798   0020D0  6E06               	movwf	(motor_init@mR+1)^0,c
   799   0020D2  EC31  F010         	call	_motor_init	;wreg free
   800   0020D6                     
   801                           ;initialisation.c: 22:     I2C_2_Master_Init();
   802   0020D6  ECF3  F010         	call	_I2C_2_Master_Init	;wreg free
   803                           
   804                           ;initialisation.c: 23:     color_click_init();
   805   0020DA  ECD9  F010         	call	_color_click_init	;wreg free
   806   0020DE                     
   807                           ;initialisation.c: 24:     Timer0_init();
   808   0020DE  EC5F  F011         	call	_Timer0_init	;wreg free
   809   0020E2                     
   810                           ;initialisation.c: 25:     interrupts_init();
   811   0020E2  EC90  F011         	call	_interrupts_init	;wreg free
   812   0020E6                     
   813                           ;initialisation.c: 26:     initUSART4();
   814   0020E6  EC3F  F011         	call	_initUSART4	;wreg free
   815   0020EA                     
   816                           ;initialisation.c: 27:     ADC_init();
   817   0020EA  EC6F  F011         	call	_ADC_init	;wreg free
   818   0020EE  0012               	return		;funcret
   819   0020F0                     __end_of_complete_initialisation:
   820                           	callstack 0
   821                           
   822 ;; *************** function _ports_init *****************
   823 ;; Defined at:
   824 ;;		line 8 in file "lights_buttons.c"
   825 ;; Parameters:    Size  Location     Type
   826 ;;		None
   827 ;; Auto vars:     Size  Location     Type
   828 ;;		None
   829 ;; Return value:  Size  Location     Type
   830 ;;                  1    wreg      void 
   831 ;; Registers used:
   832 ;;		None
   833 ;; Tracked objects:
   834 ;;		On entry : 0/0
   835 ;;		On exit  : 0/0
   836 ;;		Unchanged: 0/0
   837 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   838 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   839 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   840 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   841 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   842 ;;Total ram usage:        0 bytes
   843 ;; Hardware stack levels used: 1
   844 ;; Hardware stack levels required when called: 1
   845 ;; This function calls:
   846 ;;		Nothing
   847 ;; This function is called by:
   848 ;;		_complete_initialisation
   849 ;; This function uses a non-reentrant model
   850 ;;
   851                           
   852                           	psect	text2
   853   00225E                     __ptext2:
   854                           	callstack 0
   855   00225E                     _ports_init:
   856                           	callstack 28
   857   00225E                     
   858                           ;lights_buttons.c: 10:     TRISGbits.TRISG1 = 0;
   859   00225E  9287               	bcf	135,1,c	;volatile
   860                           
   861                           ;lights_buttons.c: 11:     TRISAbits.TRISA4 = 0;
   862   002260  9881               	bcf	129,4,c	;volatile
   863                           
   864                           ;lights_buttons.c: 12:     TRISFbits.TRISF7 = 0;
   865   002262  9E86               	bcf	134,7,c	;volatile
   866                           
   867                           ;lights_buttons.c: 14:     LATGbits.LATG1 = 1;
   868   002264  827F               	bsf	127,1,c	;volatile
   869                           
   870                           ;lights_buttons.c: 15:     LATAbits.LATA4 = 1;
   871   002266  8879               	bsf	121,4,c	;volatile
   872                           
   873                           ;lights_buttons.c: 16:     LATFbits.LATF7 = 1;
   874   002268  8E7E               	bsf	126,7,c	;volatile
   875                           
   876                           ;lights_buttons.c: 18:     TRISFbits.TRISF2=1;
   877   00226A  8486               	bsf	134,2,c	;volatile
   878                           
   879                           ;lights_buttons.c: 19:     ANSELFbits.ANSELF2=0;
   880   00226C  010E               	movlb	14	; () banked
   881   00226E  95B4               	bcf	180,2,b	;volatile
   882                           
   883                           ;lights_buttons.c: 21:     TRISFbits.TRISF3= 1;
   884   002270  8686               	bsf	134,3,c	;volatile
   885                           
   886                           ;lights_buttons.c: 22:     ANSELFbits.ANSELF3 = 0;
   887   002272  97B4               	bcf	180,3,b	;volatile
   888                           
   889                           ;lights_buttons.c: 24:     TRISDbits.TRISD7 = 0;
   890   002274  9E84               	bcf	132,7,c	;volatile
   891                           
   892                           ;lights_buttons.c: 25:     LATDbits.LATD7 = 0;
   893   002276  9E7C               	bcf	124,7,c	;volatile
   894                           
   895                           ;lights_buttons.c: 27:     TRISHbits.TRISH3 = 0;
   896   002278  9688               	bcf	136,3,c	;volatile
   897                           
   898                           ;lights_buttons.c: 28:     LATHbits.LATH3 = 0;
   899   00227A  9680               	bcf	128,3,c	;volatile
   900   00227C                     
   901                           ; BSR set to: 14
   902   00227C  0012               	return		;funcret
   903   00227E                     __end_of_ports_init:
   904                           	callstack 0
   905                           
   906 ;; *************** function _motor_init *****************
   907 ;; Defined at:
   908 ;;		line 101 in file "dc_motor.c"
   909 ;; Parameters:    Size  Location     Type
   910 ;;  mL              2    2[COMRAM] PTR struct DC_motor
   911 ;;		 -> motorL(9), 
   912 ;;  mR              2    4[COMRAM] PTR struct DC_motor
   913 ;;		 -> motorR(9), 
   914 ;; Auto vars:     Size  Location     Type
   915 ;;		None
   916 ;; Return value:  Size  Location     Type
   917 ;;                  1    wreg      void 
   918 ;; Registers used:
   919 ;;		wreg, status,2, status,0
   920 ;; Tracked objects:
   921 ;;		On entry : 0/0
   922 ;;		On exit  : 0/0
   923 ;;		Unchanged: 0/0
   924 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   925 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   926 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   927 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   928 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   929 ;;Total ram usage:        4 bytes
   930 ;; Hardware stack levels used: 1
   931 ;; Hardware stack levels required when called: 1
   932 ;; This function calls:
   933 ;;		Nothing
   934 ;; This function is called by:
   935 ;;		_complete_initialisation
   936 ;; This function uses a non-reentrant model
   937 ;;
   938                           
   939                           	psect	text3
   940   002062                     __ptext3:
   941                           	callstack 0
   942   002062                     _motor_init:
   943                           	callstack 28
   944   002062                     
   945                           ;dc_motor.c: 101: void motor_init(DC_motor *mL, DC_motor *mR);dc_motor.c: 102: {;dc_moto
      +                          r.c: 103:     motorL.power=0;
   946   002062  0E00               	movlw	0
   947   002064  0100               	movlb	0	; () banked
   948   002066  6FB9               	movwf	_motorL& (0+255),b
   949                           
   950                           ;dc_motor.c: 104:     motorL.direction=1;
   951   002068  0E01               	movlw	1
   952   00206A  6FBA               	movwf	(_motorL+1)& (0+255),b
   953                           
   954                           ;dc_motor.c: 105:     motorL.brakemode=1;
   955   00206C  0E01               	movlw	1
   956   00206E  6FBB               	movwf	(_motorL+2)& (0+255),b
   957   002070                     
   958                           ; BSR set to: 0
   959                           ;dc_motor.c: 106:     motorL.posDutyHighByte=(unsigned char *)(&CCPR1H);
   960   002070  0EAA               	movlw	170
   961   002072  6FBE               	movwf	(_motorL+5)& (0+255),b
   962   002074  0E0F               	movlw	15
   963   002076  6FBF               	movwf	(_motorL+6)& (0+255),b
   964   002078                     
   965                           ; BSR set to: 0
   966                           ;dc_motor.c: 107:     motorL.negDutyHighByte=(unsigned char *)(&CCPR2H);
   967   002078  0EA6               	movlw	166
   968   00207A  6FC0               	movwf	(_motorL+7)& (0+255),b
   969   00207C  0E0F               	movlw	15
   970   00207E  6FC1               	movwf	(_motorL+8)& (0+255),b
   971                           
   972                           ;dc_motor.c: 108:     motorL.PWMperiod=99;
   973   002080  0E00               	movlw	0
   974   002082  6FBD               	movwf	(_motorL+4)& (0+255),b
   975   002084  0E63               	movlw	99
   976   002086  6FBC               	movwf	(_motorL+3)& (0+255),b
   977                           
   978                           ;dc_motor.c: 110:     motorR.power=0;
   979   002088  0E00               	movlw	0
   980   00208A  6FB0               	movwf	_motorR& (0+255),b
   981                           
   982                           ;dc_motor.c: 111:     motorR.direction=1;
   983   00208C  0E01               	movlw	1
   984   00208E  6FB1               	movwf	(_motorR+1)& (0+255),b
   985                           
   986                           ;dc_motor.c: 112:     motorR.brakemode=1;
   987   002090  0E01               	movlw	1
   988   002092  6FB2               	movwf	(_motorR+2)& (0+255),b
   989   002094                     
   990                           ; BSR set to: 0
   991                           ;dc_motor.c: 113:     motorR.posDutyHighByte=(unsigned char *)(&CCPR3H);
   992   002094  0E25               	movlw	37
   993   002096  6FB5               	movwf	(_motorR+5)& (0+255),b
   994   002098  0E0F               	movlw	15
   995   00209A  6FB6               	movwf	(_motorR+6)& (0+255),b
   996   00209C                     
   997                           ; BSR set to: 0
   998                           ;dc_motor.c: 114:     motorR.negDutyHighByte=(unsigned char *)(&CCPR4H);
   999   00209C  0E21               	movlw	33
  1000   00209E  6FB7               	movwf	(_motorR+7)& (0+255),b
  1001   0020A0  0E0F               	movlw	15
  1002   0020A2  6FB8               	movwf	(_motorR+8)& (0+255),b
  1003                           
  1004                           ;dc_motor.c: 115:     motorR.PWMperiod=99;
  1005   0020A4  0E00               	movlw	0
  1006   0020A6  6FB4               	movwf	(_motorR+4)& (0+255),b
  1007   0020A8  0E63               	movlw	99
  1008   0020AA  6FB3               	movwf	(_motorR+3)& (0+255),b
  1009   0020AC                     
  1010                           ; BSR set to: 0
  1011   0020AC  0012               	return		;funcret
  1012   0020AE                     __end_of_motor_init:
  1013                           	callstack 0
  1014                           
  1015 ;; *************** function _interrupts_init *****************
  1016 ;; Defined at:
  1017 ;;		line 9 in file "interrupts.c"
  1018 ;; Parameters:    Size  Location     Type
  1019 ;;		None
  1020 ;; Auto vars:     Size  Location     Type
  1021 ;;		None
  1022 ;; Return value:  Size  Location     Type
  1023 ;;                  1    wreg      void 
  1024 ;; Registers used:
  1025 ;;		None
  1026 ;; Tracked objects:
  1027 ;;		On entry : 0/0
  1028 ;;		On exit  : 0/0
  1029 ;;		Unchanged: 0/0
  1030 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1031 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1032 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1033 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1034 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1035 ;;Total ram usage:        0 bytes
  1036 ;; Hardware stack levels used: 1
  1037 ;; Hardware stack levels required when called: 1
  1038 ;; This function calls:
  1039 ;;		Nothing
  1040 ;; This function is called by:
  1041 ;;		_complete_initialisation
  1042 ;; This function uses a non-reentrant model
  1043 ;;
  1044                           
  1045                           	psect	text4
  1046   002320                     __ptext4:
  1047                           	callstack 0
  1048   002320                     _interrupts_init:
  1049                           	callstack 28
  1050   002320                     
  1051                           ;interrupts.c: 11:     PIE0bits.TMR0IE = 1;
  1052   002320  010E               	movlb	14	; () banked
  1053   002322  8B29               	bsf	41,5,b	;volatile
  1054                           
  1055                           ;interrupts.c: 12:     PIR0bits.TMR0IF = 0;
  1056   002324  9B33               	bcf	51,5,b	;volatile
  1057                           
  1058                           ;interrupts.c: 13:     IPR0bits.TMR0IP = 0;
  1059   002326  9B1F               	bcf	31,5,b	;volatile
  1060                           
  1061                           ;interrupts.c: 15:     INTCONbits.IPEN = 1;
  1062   002328  8AF2               	bsf	242,5,c	;volatile
  1063                           
  1064                           ;interrupts.c: 16:     INTCONbits.PEIE = 1;
  1065   00232A  8CF2               	bsf	242,6,c	;volatile
  1066                           
  1067                           ;interrupts.c: 17:     INTCONbits.GIE = 1;
  1068   00232C  8EF2               	bsf	242,7,c	;volatile
  1069   00232E                     
  1070                           ; BSR set to: 14
  1071   00232E  0012               	return		;funcret
  1072   002330                     __end_of_interrupts_init:
  1073                           	callstack 0
  1074                           
  1075 ;; *************** function _initUSART4 *****************
  1076 ;; Defined at:
  1077 ;;		line 7 in file "serial.c"
  1078 ;; Parameters:    Size  Location     Type
  1079 ;;		None
  1080 ;; Auto vars:     Size  Location     Type
  1081 ;;		None
  1082 ;; Return value:  Size  Location     Type
  1083 ;;                  1    wreg      void 
  1084 ;; Registers used:
  1085 ;;		wreg, status,2
  1086 ;; Tracked objects:
  1087 ;;		On entry : 0/0
  1088 ;;		On exit  : 0/0
  1089 ;;		Unchanged: 0/0
  1090 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1091 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1092 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1093 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1094 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1095 ;;Total ram usage:        0 bytes
  1096 ;; Hardware stack levels used: 1
  1097 ;; Hardware stack levels required when called: 1
  1098 ;; This function calls:
  1099 ;;		Nothing
  1100 ;; This function is called by:
  1101 ;;		_complete_initialisation
  1102 ;; This function uses a non-reentrant model
  1103 ;;
  1104                           
  1105                           	psect	text5
  1106   00227E                     __ptext5:
  1107                           	callstack 0
  1108   00227E                     _initUSART4:
  1109                           	callstack 28
  1110   00227E                     
  1111                           ;serial.c: 9:     RC0PPS = 0x12;
  1112   00227E  0E12               	movlw	18
  1113   002280  010E               	movlb	14	; () banked
  1114   002282  6F62               	movwf	98,b	;volatile
  1115                           
  1116                           ;serial.c: 10:     RX4PPS = 0x11;
  1117   002284  0E11               	movlw	17
  1118   002286  6F15               	movwf	21,b	;volatile
  1119   002288                     
  1120                           ; BSR set to: 14
  1121                           ;serial.c: 11:     TRISCbits.TRISC1 = 1;
  1122   002288  8283               	bsf	131,1,c	;volatile
  1123   00228A                     
  1124                           ; BSR set to: 14
  1125                           ;serial.c: 14:     BAUD4CONbits.BRG16 = 0;
  1126   00228A  97E9               	bcf	233,3,b	;volatile
  1127   00228C                     
  1128                           ; BSR set to: 14
  1129                           ;serial.c: 15:     TX4STAbits.BRGH = 0;
  1130   00228C  95E8               	bcf	232,2,b	;volatile
  1131                           
  1132                           ;serial.c: 16:     SP4BRGL = 51;
  1133   00228E  0E33               	movlw	51
  1134   002290  6FE5               	movwf	229,b	;volatile
  1135                           
  1136                           ;serial.c: 17:     SP4BRGH = 0;
  1137   002292  0E00               	movlw	0
  1138   002294  6FE6               	movwf	230,b	;volatile
  1139   002296                     
  1140                           ; BSR set to: 14
  1141                           ;serial.c: 19:     RC4STAbits.CREN = 1;
  1142   002296  89E7               	bsf	231,4,b	;volatile
  1143   002298                     
  1144                           ; BSR set to: 14
  1145                           ;serial.c: 20:     TX4STAbits.TXEN = 1;
  1146   002298  8BE8               	bsf	232,5,b	;volatile
  1147   00229A                     
  1148                           ; BSR set to: 14
  1149                           ;serial.c: 21:     RC4STAbits.SPEN = 1;
  1150   00229A  8FE7               	bsf	231,7,b	;volatile
  1151   00229C                     
  1152                           ; BSR set to: 14
  1153   00229C  0012               	return		;funcret
  1154   00229E                     __end_of_initUSART4:
  1155                           	callstack 0
  1156                           
  1157 ;; *************** function _initDCmotorsPWM *****************
  1158 ;; Defined at:
  1159 ;;		line 9 in file "dc_motor.c"
  1160 ;; Parameters:    Size  Location     Type
  1161 ;;  PWMperiod       2    2[COMRAM] unsigned int 
  1162 ;; Auto vars:     Size  Location     Type
  1163 ;;		None
  1164 ;; Return value:  Size  Location     Type
  1165 ;;                  1    wreg      void 
  1166 ;; Registers used:
  1167 ;;		wreg, status,2
  1168 ;; Tracked objects:
  1169 ;;		On entry : 0/0
  1170 ;;		On exit  : 0/0
  1171 ;;		Unchanged: 0/0
  1172 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1173 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1174 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1175 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1176 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1177 ;;Total ram usage:        2 bytes
  1178 ;; Hardware stack levels used: 1
  1179 ;; Hardware stack levels required when called: 1
  1180 ;; This function calls:
  1181 ;;		Nothing
  1182 ;; This function is called by:
  1183 ;;		_complete_initialisation
  1184 ;; This function uses a non-reentrant model
  1185 ;;
  1186                           
  1187                           	psect	text6
  1188   001CEC                     __ptext6:
  1189                           	callstack 0
  1190   001CEC                     _initDCmotorsPWM:
  1191                           	callstack 28
  1192   001CEC                     
  1193                           ;dc_motor.c: 11:     TRISEbits.TRISE2 = 0;
  1194   001CEC  9485               	bcf	133,2,c	;volatile
  1195                           
  1196                           ;dc_motor.c: 12:     TRISEbits.TRISE4 = 0;
  1197   001CEE  9885               	bcf	133,4,c	;volatile
  1198                           
  1199                           ;dc_motor.c: 13:     TRISCbits.TRISC7 = 0;
  1200   001CF0  9E83               	bcf	131,7,c	;volatile
  1201                           
  1202                           ;dc_motor.c: 14:     TRISGbits.TRISG6 = 0;
  1203   001CF2  9C87               	bcf	135,6,c	;volatile
  1204                           
  1205                           ;dc_motor.c: 16:     LATEbits.LATE2 = 0;
  1206   001CF4  947D               	bcf	125,2,c	;volatile
  1207                           
  1208                           ;dc_motor.c: 17:     LATEbits.LATE4 = 0;
  1209   001CF6  987D               	bcf	125,4,c	;volatile
  1210                           
  1211                           ;dc_motor.c: 18:     LATCbits.LATC7 = 0;
  1212   001CF8  9E7B               	bcf	123,7,c	;volatile
  1213                           
  1214                           ;dc_motor.c: 19:     LATGbits.LATG6 = 0;
  1215   001CFA  9C7F               	bcf	127,6,c	;volatile
  1216   001CFC                     
  1217                           ;dc_motor.c: 22:     RE2PPS=0x05;
  1218   001CFC  0E05               	movlw	5
  1219   001CFE  010E               	movlb	14	; () banked
  1220   001D00  6F74               	movwf	116,b	;volatile
  1221                           
  1222                           ;dc_motor.c: 23:     RE4PPS=0x06;
  1223   001D02  0E06               	movlw	6
  1224   001D04  6F76               	movwf	118,b	;volatile
  1225                           
  1226                           ;dc_motor.c: 24:     RC7PPS=0x07;
  1227   001D06  0E07               	movlw	7
  1228   001D08  6F69               	movwf	105,b	;volatile
  1229                           
  1230                           ;dc_motor.c: 25:     RG6PPS=0x08;
  1231   001D0A  0E08               	movlw	8
  1232   001D0C  6F88               	movwf	136,b	;volatile
  1233                           
  1234                           ;dc_motor.c: 28:     T2CONbits.CKPS=0b100;
  1235   001D0E  50BD               	movf	189,w,c	;volatile
  1236   001D10  0B8F               	andlw	-113
  1237   001D12  0940               	iorlw	64
  1238   001D14  6EBD               	movwf	189,c	;volatile
  1239                           
  1240                           ;dc_motor.c: 29:     T2HLTbits.MODE=0b00000;
  1241   001D16  0EE0               	movlw	-32
  1242   001D18  16BE               	andwf	190,f,c	;volatile
  1243                           
  1244                           ;dc_motor.c: 30:     T2CLKCONbits.CS=0b0001;
  1245   001D1A  50BF               	movf	191,w,c	;volatile
  1246   001D1C  0BF0               	andlw	-16
  1247   001D1E  0901               	iorlw	1
  1248   001D20  6EBF               	movwf	191,c	;volatile
  1249   001D22                     
  1250                           ; BSR set to: 14
  1251                           ;dc_motor.c: 34:     T2PR=PWMperiod;
  1252   001D22  C003  FFBC         	movff	initDCmotorsPWM@PWMperiod,4028	;volatile
  1253   001D26                     
  1254                           ; BSR set to: 14
  1255                           ;dc_motor.c: 35:     T2CONbits.ON=1;
  1256   001D26  8EBD               	bsf	189,7,c	;volatile
  1257                           
  1258                           ;dc_motor.c: 39:     CCPR1H=0;
  1259   001D28  0E00               	movlw	0
  1260   001D2A  6EAA               	movwf	170,c	;volatile
  1261                           
  1262                           ;dc_motor.c: 40:     CCPR2H=0;
  1263   001D2C  0E00               	movlw	0
  1264   001D2E  6EA6               	movwf	166,c	;volatile
  1265                           
  1266                           ;dc_motor.c: 41:     CCPR3H=0;
  1267   001D30  0E00               	movlw	0
  1268   001D32  010F               	movlb	15	; () banked
  1269   001D34  6F25               	movwf	37,b	;volatile
  1270                           
  1271                           ;dc_motor.c: 42:     CCPR4H=0;
  1272   001D36  0E00               	movlw	0
  1273   001D38  6F21               	movwf	33,b	;volatile
  1274                           
  1275                           ;dc_motor.c: 45:     CCPTMRS0bits.C1TSEL=0;
  1276   001D3A  0EFC               	movlw	-4
  1277   001D3C  16AD               	andwf	173,f,c	;volatile
  1278                           
  1279                           ;dc_motor.c: 46:     CCPTMRS0bits.C2TSEL=0;
  1280   001D3E  0EF3               	movlw	-13
  1281   001D40  16AD               	andwf	173,f,c	;volatile
  1282                           
  1283                           ;dc_motor.c: 47:     CCPTMRS0bits.C3TSEL=0;
  1284   001D42  0ECF               	movlw	-49
  1285   001D44  16AD               	andwf	173,f,c	;volatile
  1286                           
  1287                           ;dc_motor.c: 48:     CCPTMRS0bits.C4TSEL=0;
  1288   001D46  0E3F               	movlw	-193
  1289   001D48  16AD               	andwf	173,f,c	;volatile
  1290   001D4A                     
  1291                           ; BSR set to: 15
  1292                           ;dc_motor.c: 51:     CCP1CONbits.FMT=1;
  1293   001D4A  88AB               	bsf	171,4,c	;volatile
  1294                           
  1295                           ;dc_motor.c: 52:     CCP1CONbits.CCP1MODE=0b1100;
  1296   001D4C  50AB               	movf	171,w,c	;volatile
  1297   001D4E  0BF0               	andlw	-16
  1298   001D50  090C               	iorlw	12
  1299   001D52  6EAB               	movwf	171,c	;volatile
  1300   001D54                     
  1301                           ; BSR set to: 15
  1302                           ;dc_motor.c: 53:     CCP1CONbits.EN=1;
  1303   001D54  8EAB               	bsf	171,7,c	;volatile
  1304   001D56                     
  1305                           ; BSR set to: 15
  1306                           ;dc_motor.c: 56:     CCP2CONbits.FMT=1;
  1307   001D56  88A7               	bsf	167,4,c	;volatile
  1308                           
  1309                           ;dc_motor.c: 57:     CCP2CONbits.CCP2MODE=0b1100;
  1310   001D58  50A7               	movf	167,w,c	;volatile
  1311   001D5A  0BF0               	andlw	-16
  1312   001D5C  090C               	iorlw	12
  1313   001D5E  6EA7               	movwf	167,c	;volatile
  1314   001D60                     
  1315                           ; BSR set to: 15
  1316                           ;dc_motor.c: 58:     CCP2CONbits.EN=1;
  1317   001D60  8EA7               	bsf	167,7,c	;volatile
  1318   001D62                     
  1319                           ; BSR set to: 15
  1320                           ;dc_motor.c: 62:     CCP3CONbits.FMT=1;
  1321   001D62  8926               	bsf	38,4,b	;volatile
  1322                           
  1323                           ;dc_motor.c: 63:     CCP3CONbits.CCP3MODE=0b1100;
  1324   001D64  5126               	movf	38,w,b	;volatile
  1325   001D66  0BF0               	andlw	-16
  1326   001D68  090C               	iorlw	12
  1327   001D6A  6F26               	movwf	38,b	;volatile
  1328   001D6C                     
  1329                           ; BSR set to: 15
  1330                           ;dc_motor.c: 64:     CCP3CONbits.EN=1;
  1331   001D6C  8F26               	bsf	38,7,b	;volatile
  1332   001D6E                     
  1333                           ; BSR set to: 15
  1334                           ;dc_motor.c: 67:     CCP4CONbits.FMT=1;
  1335   001D6E  8922               	bsf	34,4,b	;volatile
  1336                           
  1337                           ;dc_motor.c: 68:     CCP4CONbits.CCP4MODE=0b1100;
  1338   001D70  5122               	movf	34,w,b	;volatile
  1339   001D72  0BF0               	andlw	-16
  1340   001D74  090C               	iorlw	12
  1341   001D76  6F22               	movwf	34,b	;volatile
  1342   001D78                     
  1343                           ; BSR set to: 15
  1344                           ;dc_motor.c: 69:     CCP4CONbits.EN=1;
  1345   001D78  8F22               	bsf	34,7,b	;volatile
  1346   001D7A                     
  1347                           ; BSR set to: 15
  1348   001D7A  0012               	return		;funcret
  1349   001D7C                     __end_of_initDCmotorsPWM:
  1350                           	callstack 0
  1351                           
  1352 ;; *************** function _color_click_init *****************
  1353 ;; Defined at:
  1354 ;;		line 13 in file "color.c"
  1355 ;; Parameters:    Size  Location     Type
  1356 ;;		None
  1357 ;; Auto vars:     Size  Location     Type
  1358 ;;		None
  1359 ;; Return value:  Size  Location     Type
  1360 ;;                  1    wreg      void 
  1361 ;; Registers used:
  1362 ;;		wreg, status,2, status,0, cstack
  1363 ;; Tracked objects:
  1364 ;;		On entry : 0/0
  1365 ;;		On exit  : 0/0
  1366 ;;		Unchanged: 0/0
  1367 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1368 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1369 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1370 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1371 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1372 ;;Total ram usage:        1 bytes
  1373 ;; Hardware stack levels used: 1
  1374 ;; Hardware stack levels required when called: 4
  1375 ;; This function calls:
  1376 ;;		_I2C_2_Master_Init
  1377 ;;		_color_writetoaddr
  1378 ;; This function is called by:
  1379 ;;		_complete_initialisation
  1380 ;; This function uses a non-reentrant model
  1381 ;;
  1382                           
  1383                           	psect	text7
  1384   0021B2                     __ptext7:
  1385                           	callstack 0
  1386   0021B2                     _color_click_init:
  1387                           	callstack 25
  1388   0021B2                     
  1389                           ;color.c: 16:     I2C_2_Master_Init();
  1390   0021B2  ECF3  F010         	call	_I2C_2_Master_Init	;wreg free
  1391   0021B6                     
  1392                           ;color.c: 18:   color_writetoaddr(0x00, 0x01);
  1393   0021B6  0E01               	movlw	1
  1394   0021B8  6E05               	movwf	color_writetoaddr@value^0,c
  1395   0021BA  0E00               	movlw	0
  1396   0021BC  EC4F  F011         	call	_color_writetoaddr
  1397   0021C0                     
  1398                           ;color.c: 19:     _delay((unsigned long)((3)*(64000000/4000.0)));
  1399   0021C0  0E3F               	movlw	63
  1400   0021C2  6E07               	movwf	??_color_click_init^0,c
  1401   0021C4  0E55               	movlw	85
  1402   0021C6                     u2517:
  1403   0021C6  2EE8               	decfsz	wreg,f,c
  1404   0021C8  D7FE               	bra	u2517
  1405   0021CA  2E07               	decfsz	??_color_click_init^0,f,c
  1406   0021CC  D7FC               	bra	u2517
  1407   0021CE  F000               	nop	
  1408   0021D0                     
  1409                           ;color.c: 21:  color_writetoaddr(0x00, 0x03);
  1410   0021D0  0E03               	movlw	3
  1411   0021D2  6E05               	movwf	color_writetoaddr@value^0,c
  1412   0021D4  0E00               	movlw	0
  1413   0021D6  EC4F  F011         	call	_color_writetoaddr
  1414   0021DA                     
  1415                           ;color.c: 23:  color_writetoaddr(0x01, 0xD5);
  1416   0021DA  0ED5               	movlw	213
  1417   0021DC  6E05               	movwf	color_writetoaddr@value^0,c
  1418   0021DE  0E01               	movlw	1
  1419   0021E0  EC4F  F011         	call	_color_writetoaddr
  1420   0021E4  0012               	return		;funcret
  1421   0021E6                     __end_of_color_click_init:
  1422                           	callstack 0
  1423                           
  1424 ;; *************** function _color_writetoaddr *****************
  1425 ;; Defined at:
  1426 ;;		line 28 in file "color.c"
  1427 ;; Parameters:    Size  Location     Type
  1428 ;;  address         1    wreg     unsigned char 
  1429 ;;  value           1    4[COMRAM] unsigned char 
  1430 ;; Auto vars:     Size  Location     Type
  1431 ;;  address         1    5[COMRAM] unsigned char 
  1432 ;; Return value:  Size  Location     Type
  1433 ;;                  1    wreg      void 
  1434 ;; Registers used:
  1435 ;;		wreg, status,2, status,0, cstack
  1436 ;; Tracked objects:
  1437 ;;		On entry : 0/0
  1438 ;;		On exit  : 0/0
  1439 ;;		Unchanged: 0/0
  1440 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1441 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1442 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1443 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1444 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1445 ;;Total ram usage:        2 bytes
  1446 ;; Hardware stack levels used: 1
  1447 ;; Hardware stack levels required when called: 3
  1448 ;; This function calls:
  1449 ;;		_I2C_2_Master_Start
  1450 ;;		_I2C_2_Master_Stop
  1451 ;;		_I2C_2_Master_Write
  1452 ;; This function is called by:
  1453 ;;		_color_click_init
  1454 ;; This function uses a non-reentrant model
  1455 ;;
  1456                           
  1457                           	psect	text8
  1458   00229E                     __ptext8:
  1459                           	callstack 0
  1460   00229E                     _color_writetoaddr:
  1461                           	callstack 25
  1462                           
  1463                           ;incstack = 0
  1464                           ;color_writetoaddr@address stored from wreg
  1465   00229E  6E06               	movwf	color_writetoaddr@address^0,c
  1466   0022A0                     
  1467                           ;color.c: 29:     I2C_2_Master_Start();
  1468   0022A0  ECA3  F011         	call	_I2C_2_Master_Start	;wreg free
  1469                           
  1470                           ;color.c: 30:     I2C_2_Master_Write(0x52 | 0x00);
  1471   0022A4  0E52               	movlw	82
  1472   0022A6  EC98  F011         	call	_I2C_2_Master_Write
  1473                           
  1474                           ;color.c: 31:     I2C_2_Master_Write(0x80 | address);
  1475   0022AA  5006               	movf	color_writetoaddr@address^0,w,c
  1476   0022AC  0980               	iorlw	128
  1477   0022AE  EC98  F011         	call	_I2C_2_Master_Write
  1478                           
  1479                           ;color.c: 32:     I2C_2_Master_Write(value);
  1480   0022B2  5005               	movf	color_writetoaddr@value^0,w,c
  1481   0022B4  EC98  F011         	call	_I2C_2_Master_Write
  1482                           
  1483                           ;color.c: 33:     I2C_2_Master_Stop();
  1484   0022B8  EC9E  F011         	call	_I2C_2_Master_Stop	;wreg free
  1485   0022BC  0012               	return		;funcret
  1486   0022BE                     __end_of_color_writetoaddr:
  1487                           	callstack 0
  1488                           
  1489 ;; *************** function _I2C_2_Master_Init *****************
  1490 ;; Defined at:
  1491 ;;		line 7 in file "i2c.c"
  1492 ;; Parameters:    Size  Location     Type
  1493 ;;		None
  1494 ;; Auto vars:     Size  Location     Type
  1495 ;;		None
  1496 ;; Return value:  Size  Location     Type
  1497 ;;                  1    wreg      void 
  1498 ;; Registers used:
  1499 ;;		wreg, status,2
  1500 ;; Tracked objects:
  1501 ;;		On entry : 0/0
  1502 ;;		On exit  : 0/0
  1503 ;;		Unchanged: 0/0
  1504 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1505 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1506 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1507 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1508 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1509 ;;Total ram usage:        0 bytes
  1510 ;; Hardware stack levels used: 1
  1511 ;; Hardware stack levels required when called: 1
  1512 ;; This function calls:
  1513 ;;		Nothing
  1514 ;; This function is called by:
  1515 ;;		_color_click_init
  1516 ;;		_complete_initialisation
  1517 ;; This function uses a non-reentrant model
  1518 ;;
  1519                           
  1520                           	psect	text9
  1521   0021E6                     __ptext9:
  1522                           	callstack 0
  1523   0021E6                     _I2C_2_Master_Init:
  1524                           	callstack 27
  1525   0021E6                     
  1526                           ;i2c.c: 10:   SSP2CON1bits.SSPM= 0b1000;
  1527   0021E6  010E               	movlb	14	; () banked
  1528   0021E8  51D9               	movf	217,w,b	;volatile
  1529   0021EA  0BF0               	andlw	-16
  1530   0021EC  0908               	iorlw	8
  1531   0021EE  6FD9               	movwf	217,b	;volatile
  1532   0021F0                     
  1533                           ; BSR set to: 14
  1534                           ;i2c.c: 11:   SSP2CON1bits.SSPEN = 1;
  1535   0021F0  8BD9               	bsf	217,5,b	;volatile
  1536                           
  1537                           ;i2c.c: 12:   SSP2ADD = (64000000/(4*100000))-1;
  1538   0021F2  0E9F               	movlw	159
  1539   0021F4  6FD6               	movwf	214,b	;volatile
  1540   0021F6                     
  1541                           ; BSR set to: 14
  1542                           ;i2c.c: 15:   TRISDbits.TRISD5 = 1;
  1543   0021F6  8A84               	bsf	132,5,c	;volatile
  1544   0021F8                     
  1545                           ; BSR set to: 14
  1546                           ;i2c.c: 16:   TRISDbits.TRISD6 = 1;
  1547   0021F8  8C84               	bsf	132,6,c	;volatile
  1548   0021FA                     
  1549                           ; BSR set to: 14
  1550                           ;i2c.c: 17:   ANSELDbits.ANSELD5=0;
  1551   0021FA  9BA7               	bcf	167,5,b	;volatile
  1552   0021FC                     
  1553                           ; BSR set to: 14
  1554                           ;i2c.c: 18:   ANSELDbits.ANSELD6=0;
  1555   0021FC  9DA7               	bcf	167,6,b	;volatile
  1556                           
  1557                           ;i2c.c: 19:   SSP2DATPPS=0x1D;
  1558   0021FE  0E1D               	movlw	29
  1559   002200  6F1D               	movwf	29,b	;volatile
  1560                           
  1561                           ;i2c.c: 20:   SSP2CLKPPS=0x1E;
  1562   002202  0E1E               	movlw	30
  1563   002204  6F1C               	movwf	28,b	;volatile
  1564                           
  1565                           ;i2c.c: 21:   RD5PPS=0x1C;
  1566   002206  0E1C               	movlw	28
  1567   002208  6F6F               	movwf	111,b	;volatile
  1568                           
  1569                           ;i2c.c: 22:   RD6PPS=0x1B;
  1570   00220A  0E1B               	movlw	27
  1571   00220C  6F70               	movwf	112,b	;volatile
  1572   00220E                     
  1573                           ; BSR set to: 14
  1574   00220E  0012               	return		;funcret
  1575   002210                     __end_of_I2C_2_Master_Init:
  1576                           	callstack 0
  1577                           
  1578 ;; *************** function _buggyLEDs_init *****************
  1579 ;; Defined at:
  1580 ;;		line 34 in file "lights_buttons.c"
  1581 ;; Parameters:    Size  Location     Type
  1582 ;;		None
  1583 ;; Auto vars:     Size  Location     Type
  1584 ;;		None
  1585 ;; Return value:  Size  Location     Type
  1586 ;;                  1    wreg      void 
  1587 ;; Registers used:
  1588 ;;		None
  1589 ;; Tracked objects:
  1590 ;;		On entry : 0/0
  1591 ;;		On exit  : 0/0
  1592 ;;		Unchanged: 0/0
  1593 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1594 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1595 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1596 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1597 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1598 ;;Total ram usage:        0 bytes
  1599 ;; Hardware stack levels used: 1
  1600 ;; Hardware stack levels required when called: 1
  1601 ;; This function calls:
  1602 ;;		Nothing
  1603 ;; This function is called by:
  1604 ;;		_complete_initialisation
  1605 ;; This function uses a non-reentrant model
  1606 ;;
  1607                           
  1608                           	psect	text10
  1609   0022F8                     __ptext10:
  1610                           	callstack 0
  1611   0022F8                     _buggyLEDs_init:
  1612                           	callstack 28
  1613   0022F8                     
  1614                           ;lights_buttons.c: 35:     LATHbits.LATH1 = 0;
  1615   0022F8  9280               	bcf	128,1,c	;volatile
  1616                           
  1617                           ;lights_buttons.c: 36:     LATDbits.LATD3 = 0;
  1618   0022FA  967C               	bcf	124,3,c	;volatile
  1619                           
  1620                           ;lights_buttons.c: 37:     LATDbits.LATD4 = 0;
  1621   0022FC  987C               	bcf	124,4,c	;volatile
  1622                           
  1623                           ;lights_buttons.c: 38:     LATFbits.LATF0 = 0;
  1624   0022FE  907E               	bcf	126,0,c	;volatile
  1625                           
  1626                           ;lights_buttons.c: 39:     LATHbits.LATH0 = 0;
  1627   002300  9080               	bcf	128,0,c	;volatile
  1628                           
  1629                           ;lights_buttons.c: 41:     TRISHbits.TRISH1 = 0;
  1630   002302  9288               	bcf	136,1,c	;volatile
  1631                           
  1632                           ;lights_buttons.c: 42:     TRISDbits.TRISD3 = 0;
  1633   002304  9684               	bcf	132,3,c	;volatile
  1634                           
  1635                           ;lights_buttons.c: 43:     TRISDbits.TRISD4 = 0;
  1636   002306  9884               	bcf	132,4,c	;volatile
  1637                           
  1638                           ;lights_buttons.c: 44:     TRISFbits.TRISF0 = 0;
  1639   002308  9086               	bcf	134,0,c	;volatile
  1640                           
  1641                           ;lights_buttons.c: 45:     TRISHbits.TRISH0 = 0;
  1642   00230A  9088               	bcf	136,0,c	;volatile
  1643   00230C  0012               	return		;funcret
  1644   00230E                     __end_of_buggyLEDs_init:
  1645                           	callstack 0
  1646                           
  1647 ;; *************** function _Timer0_init *****************
  1648 ;; Defined at:
  1649 ;;		line 8 in file "timers.c"
  1650 ;; Parameters:    Size  Location     Type
  1651 ;;		None
  1652 ;; Auto vars:     Size  Location     Type
  1653 ;;		None
  1654 ;; Return value:  Size  Location     Type
  1655 ;;                  1    wreg      void 
  1656 ;; Registers used:
  1657 ;;		wreg, status,2
  1658 ;; Tracked objects:
  1659 ;;		On entry : 0/0
  1660 ;;		On exit  : 0/0
  1661 ;;		Unchanged: 0/0
  1662 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1663 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1664 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1665 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1666 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1667 ;;Total ram usage:        0 bytes
  1668 ;; Hardware stack levels used: 1
  1669 ;; Hardware stack levels required when called: 1
  1670 ;; This function calls:
  1671 ;;		Nothing
  1672 ;; This function is called by:
  1673 ;;		_complete_initialisation
  1674 ;; This function uses a non-reentrant model
  1675 ;;
  1676                           
  1677                           	psect	text11
  1678   0022BE                     __ptext11:
  1679                           	callstack 0
  1680   0022BE                     _Timer0_init:
  1681                           	callstack 28
  1682   0022BE                     
  1683                           ;timers.c: 10:     T0CON1bits.T0CS=0b010;
  1684   0022BE  50D6               	movf	214,w,c	;volatile
  1685   0022C0  0B1F               	andlw	-225
  1686   0022C2  0940               	iorlw	64
  1687   0022C4  6ED6               	movwf	214,c	;volatile
  1688   0022C6                     
  1689                           ;timers.c: 11:     T0CON1bits.T0ASYNC=1;
  1690   0022C6  88D6               	bsf	214,4,c	;volatile
  1691                           
  1692                           ;timers.c: 12:     T0CON1bits.T0CKPS=0b0101;
  1693   0022C8  50D6               	movf	214,w,c	;volatile
  1694   0022CA  0BF0               	andlw	-16
  1695   0022CC  0905               	iorlw	5
  1696   0022CE  6ED6               	movwf	214,c	;volatile
  1697   0022D0                     
  1698                           ;timers.c: 13:     T0CON0bits.T016BIT=1;
  1699   0022D0  88D5               	bsf	213,4,c	;volatile
  1700                           
  1701                           ;timers.c: 16:     TMR0H=0;
  1702   0022D2  0E00               	movlw	0
  1703   0022D4  6ED4               	movwf	212,c	;volatile
  1704                           
  1705                           ;timers.c: 17:     TMR0L=0b00100011;
  1706   0022D6  0E23               	movlw	35
  1707   0022D8  6ED3               	movwf	211,c	;volatile
  1708   0022DA                     
  1709                           ;timers.c: 18:     T0CON0bits.T0EN=1;
  1710   0022DA  8ED5               	bsf	213,7,c	;volatile
  1711   0022DC  0012               	return		;funcret
  1712   0022DE                     __end_of_Timer0_init:
  1713                           	callstack 0
  1714                           
  1715 ;; *************** function _ADC_init *****************
  1716 ;; Defined at:
  1717 ;;		line 8 in file "ADC.c"
  1718 ;; Parameters:    Size  Location     Type
  1719 ;;		None
  1720 ;; Auto vars:     Size  Location     Type
  1721 ;;		None
  1722 ;; Return value:  Size  Location     Type
  1723 ;;                  1    wreg      void 
  1724 ;; Registers used:
  1725 ;;		wreg, status,2
  1726 ;; Tracked objects:
  1727 ;;		On entry : 0/0
  1728 ;;		On exit  : 0/0
  1729 ;;		Unchanged: 0/0
  1730 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1731 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1732 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1733 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1734 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1735 ;;Total ram usage:        0 bytes
  1736 ;; Hardware stack levels used: 1
  1737 ;; Hardware stack levels required when called: 1
  1738 ;; This function calls:
  1739 ;;		Nothing
  1740 ;; This function is called by:
  1741 ;;		_complete_initialisation
  1742 ;; This function uses a non-reentrant model
  1743 ;;
  1744                           
  1745                           	psect	text12
  1746   0022DE                     __ptext12:
  1747                           	callstack 0
  1748   0022DE                     _ADC_init:
  1749                           	callstack 28
  1750   0022DE                     
  1751                           ;ADC.c: 10:     TRISFbits.TRISF6=1;
  1752   0022DE  8C86               	bsf	134,6,c	;volatile
  1753                           
  1754                           ;ADC.c: 11:     ANSELFbits.ANSELF6=1;
  1755   0022E0  010E               	movlb	14	; () banked
  1756   0022E2  8DB4               	bsf	180,6,b	;volatile
  1757                           
  1758                           ;ADC.c: 13:     ADREFbits.ADNREF = 0;
  1759   0022E4  010F               	movlb	15	; () banked
  1760   0022E6  9958               	bcf	88,4,b	;volatile
  1761   0022E8                     
  1762                           ; BSR set to: 15
  1763                           ;ADC.c: 14:     ADREFbits.ADPREF = 0b00;
  1764   0022E8  0EFC               	movlw	-4
  1765   0022EA  1758               	andwf	88,f,b	;volatile
  1766                           
  1767                           ;ADC.c: 15:     ADPCH=0b101110;
  1768   0022EC  0E2E               	movlw	46
  1769   0022EE  6F5F               	movwf	95,b	;volatile
  1770   0022F0                     
  1771                           ; BSR set to: 15
  1772                           ;ADC.c: 16:     ADCON0bits.ADFM = 0;
  1773   0022F0  9460               	bcf	96,2,c	;volatile
  1774   0022F2                     
  1775                           ; BSR set to: 15
  1776                           ;ADC.c: 17:     ADCON0bits.ADCS = 1;
  1777   0022F2  8860               	bsf	96,4,c	;volatile
  1778   0022F4                     
  1779                           ; BSR set to: 15
  1780                           ;ADC.c: 18:     ADCON0bits.ADON = 1;
  1781   0022F4  8E60               	bsf	96,7,c	;volatile
  1782   0022F6                     
  1783                           ; BSR set to: 15
  1784   0022F6  0012               	return		;funcret
  1785   0022F8                     __end_of_ADC_init:
  1786                           	callstack 0
  1787                           
  1788 ;; *************** function _buggy_color_response *****************
  1789 ;; Defined at:
  1790 ;;		line 128 in file "color.c"
  1791 ;; Parameters:    Size  Location     Type
  1792 ;;  mL              2   56[COMRAM] PTR struct DC_motor
  1793 ;;		 -> motorL(9), 
  1794 ;;  mR              2   58[COMRAM] PTR struct DC_motor
  1795 ;;		 -> motorR(9), 
  1796 ;;  c               2   60[COMRAM] PTR struct colors
  1797 ;;		 -> color(20), 
  1798 ;; Auto vars:     Size  Location     Type
  1799 ;;		None
  1800 ;; Return value:  Size  Location     Type
  1801 ;;                  1    wreg      void 
  1802 ;; Registers used:
  1803 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1804 ;; Tracked objects:
  1805 ;;		On entry : 0/0
  1806 ;;		On exit  : 0/0
  1807 ;;		Unchanged: 0/0
  1808 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1809 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1810 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1811 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1812 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1813 ;;Total ram usage:        8 bytes
  1814 ;; Hardware stack levels used: 1
  1815 ;; Hardware stack levels required when called: 8
  1816 ;; This function calls:
  1817 ;;		_READcolor
  1818 ;;		___flge
  1819 ;;		_forward
  1820 ;;		_movement
  1821 ;;		_movement_return
  1822 ;;		_return_home
  1823 ;;		_space
  1824 ;;		_stop
  1825 ;;		_timer_reset
  1826 ;; This function is called by:
  1827 ;;		_main
  1828 ;; This function uses a non-reentrant model
  1829 ;;
  1830                           
  1831                           	psect	text13
  1832   000048                     __ptext13:
  1833                           	callstack 0
  1834   000048                     _buggy_color_response:
  1835                           	callstack 22
  1836   000048                     
  1837                           ;color.c: 130:     READcolor(&color);
  1838   000048  0E45               	movlw	low _color
  1839   00004A  6E2A               	movwf	READcolor@c^0,c
  1840   00004C  0E00               	movlw	high _color
  1841   00004E  6E2B               	movwf	(READcolor@c+1)^0,c
  1842   000050  EC5A  F00B         	call	_READcolor	;wreg free
  1843   000054  0EC5               	movlw	197
  1844   000056  5C4B               	subwf	(_color+6)^0,w,c
  1845   000058  0E09               	movlw	9
  1846   00005A  584C               	subwfb	(_color+7)^0,w,c
  1847   00005C  A0D8               	btfss	status,0,c
  1848   00005E  EF33  F000         	goto	u2141
  1849   000062  EF35  F000         	goto	u2140
  1850   000066                     u2141:
  1851   000066  EF87  F003         	goto	l3111
  1852   00006A                     u2140:
  1853   00006A                     
  1854                           ;color.c: 133:         timer_memory[timer_index] = timer_val;
  1855   00006A  0E60               	movlw	low _timer_memory
  1856   00006C  2443               	addwf	_timer_index^0,w,c
  1857   00006E  6ED9               	movwf	fsr2l,c
  1858   000070  6ADA               	clrf	fsr2h,c
  1859   000072  0E00               	movlw	high _timer_memory
  1860   000074  22DA               	addwfc	fsr2h,f,c
  1861   000076  C041  FFDF         	movff	_timer_val,indf2
  1862   00007A                     
  1863                           ;color.c: 134:         timer_index ++;
  1864   00007A  2A43               	incf	_timer_index^0,f,c
  1865   00007C                     
  1866                           ;color.c: 135:         forward(mL,mR);
  1867   00007C  C039  F01B         	movff	buggy_color_response@mL,forward@mL
  1868   000080  C03A  F01C         	movff	buggy_color_response@mL+1,forward@mL+1
  1869   000084  C03B  F01D         	movff	buggy_color_response@mR,forward@mR
  1870   000088  C03C  F01E         	movff	buggy_color_response@mR+1,forward@mR+1
  1871   00008C  ECFA  F00C         	call	_forward	;wreg free
  1872   000090                     
  1873                           ;color.c: 136:         _delay((unsigned long)((50)*(64000000/4000.0)));
  1874   000090  0E05               	movlw	5
  1875   000092  6E40               	movwf	(??_buggy_color_response+1)^0,c
  1876   000094  0E0F               	movlw	15
  1877   000096  6E3F               	movwf	??_buggy_color_response^0,c
  1878   000098  0EF1               	movlw	241
  1879   00009A                     u2527:
  1880   00009A  2EE8               	decfsz	wreg,f,c
  1881   00009C  D7FE               	bra	u2527
  1882   00009E  2E3F               	decfsz	??_buggy_color_response^0,f,c
  1883   0000A0  D7FC               	bra	u2527
  1884   0000A2  2E40               	decfsz	(??_buggy_color_response+1)^0,f,c
  1885   0000A4  D7FA               	bra	u2527
  1886   0000A6  F000               	nop	
  1887   0000A8                     
  1888                           ;color.c: 137:         stop(mL,mR); _delay((unsigned long)((500)*(64000000/4000.0)));
  1889   0000A8  C039  F016         	movff	buggy_color_response@mL,stop@mL
  1890   0000AC  C03A  F017         	movff	buggy_color_response@mL+1,stop@mL+1
  1891   0000B0  C03B  F018         	movff	buggy_color_response@mR,stop@mR
  1892   0000B4  C03C  F019         	movff	buggy_color_response@mR+1,stop@mR+1
  1893   0000B8  EC2F  F00F         	call	_stop	;wreg free
  1894   0000BC  0E29               	movlw	41
  1895   0000BE  6E40               	movwf	(??_buggy_color_response+1)^0,c
  1896   0000C0  0E96               	movlw	150
  1897   0000C2  6E3F               	movwf	??_buggy_color_response^0,c
  1898   0000C4  0E7F               	movlw	127
  1899   0000C6                     u2537:
  1900   0000C6  2EE8               	decfsz	wreg,f,c
  1901   0000C8  D7FE               	bra	u2537
  1902   0000CA  2E3F               	decfsz	??_buggy_color_response^0,f,c
  1903   0000CC  D7FC               	bra	u2537
  1904   0000CE  2E40               	decfsz	(??_buggy_color_response+1)^0,f,c
  1905   0000D0  D7FA               	bra	u2537
  1906   0000D2  F000               	nop	
  1907   0000D4                     
  1908                           ;color.c: 138:         READcolor(&color); _delay((unsigned long)((500)*(64000000/4000.0)
      +                          ));
  1909   0000D4  0E45               	movlw	low _color
  1910   0000D6  6E2A               	movwf	READcolor@c^0,c
  1911   0000D8  0E00               	movlw	high _color
  1912   0000DA  6E2B               	movwf	(READcolor@c+1)^0,c
  1913   0000DC  EC5A  F00B         	call	_READcolor	;wreg free
  1914   0000E0  0E29               	movlw	41
  1915   0000E2  6E40               	movwf	(??_buggy_color_response+1)^0,c
  1916   0000E4  0E96               	movlw	150
  1917   0000E6  6E3F               	movwf	??_buggy_color_response^0,c
  1918   0000E8  0E7F               	movlw	127
  1919   0000EA                     u2547:
  1920   0000EA  2EE8               	decfsz	wreg,f,c
  1921   0000EC  D7FE               	bra	u2547
  1922   0000EE  2E3F               	decfsz	??_buggy_color_response^0,f,c
  1923   0000F0  D7FC               	bra	u2547
  1924   0000F2  2E40               	decfsz	(??_buggy_color_response+1)^0,f,c
  1925   0000F4  D7FA               	bra	u2547
  1926   0000F6  F000               	nop	
  1927   0000F8                     
  1928                           ;color.c: 140:         if (color.R_norm > 0.77 && color.B_norm < 0.18 && color.G_norm < 
      +                          0.14){
  1929   0000F8  0EB8               	movlw	184
  1930   0000FA  6E03               	movwf	___flge@ff1^0,c
  1931   0000FC  0E1E               	movlw	30
  1932   0000FE  6E04               	movwf	(___flge@ff1+1)^0,c
  1933   000100  0E45               	movlw	69
  1934   000102  6E05               	movwf	(___flge@ff1+2)^0,c
  1935   000104  0E3F               	movlw	63
  1936   000106  6E06               	movwf	(___flge@ff1+3)^0,c
  1937   000108  C04D  F007         	movff	_color+8,___flge@ff2
  1938   00010C  C04E  F008         	movff	_color+9,___flge@ff2+1
  1939   000110  C04F  F009         	movff	_color+10,___flge@ff2+2
  1940   000114  C050  F00A         	movff	_color+11,___flge@ff2+3
  1941   000118  ECF7  F00B         	call	___flge	;wreg free
  1942   00011C  B0D8               	btfsc	status,0,c
  1943   00011E  EF93  F000         	goto	u2151
  1944   000122  EF95  F000         	goto	u2150
  1945   000126                     u2151:
  1946   000126  EFDE  F000         	goto	l3011
  1947   00012A                     u2150:
  1948   00012A  C051  F003         	movff	_color+12,___flge@ff1
  1949   00012E  C052  F004         	movff	_color+13,___flge@ff1+1
  1950   000132  C053  F005         	movff	_color+14,___flge@ff1+2
  1951   000136  C054  F006         	movff	_color+15,___flge@ff1+3
  1952   00013A  0EEC               	movlw	236
  1953   00013C  6E07               	movwf	___flge@ff2^0,c
  1954   00013E  0E51               	movlw	81
  1955   000140  6E08               	movwf	(___flge@ff2+1)^0,c
  1956   000142  0E38               	movlw	56
  1957   000144  6E09               	movwf	(___flge@ff2+2)^0,c
  1958   000146  0E3E               	movlw	62
  1959   000148  6E0A               	movwf	(___flge@ff2+3)^0,c
  1960   00014A  ECF7  F00B         	call	___flge	;wreg free
  1961   00014E  B0D8               	btfsc	status,0,c
  1962   000150  EFAC  F000         	goto	u2161
  1963   000154  EFAE  F000         	goto	u2160
  1964   000158                     u2161:
  1965   000158  EFDE  F000         	goto	l3011
  1966   00015C                     u2160:
  1967   00015C  C055  F003         	movff	_color+16,___flge@ff1
  1968   000160  C056  F004         	movff	_color+17,___flge@ff1+1
  1969   000164  C057  F005         	movff	_color+18,___flge@ff1+2
  1970   000168  C058  F006         	movff	_color+19,___flge@ff1+3
  1971   00016C  0E29               	movlw	41
  1972   00016E  6E07               	movwf	___flge@ff2^0,c
  1973   000170  0E5C               	movlw	92
  1974   000172  6E08               	movwf	(___flge@ff2+1)^0,c
  1975   000174  0E0F               	movlw	15
  1976   000176  6E09               	movwf	(___flge@ff2+2)^0,c
  1977   000178  0E3E               	movlw	62
  1978   00017A  6E0A               	movwf	(___flge@ff2+3)^0,c
  1979   00017C  ECF7  F00B         	call	___flge	;wreg free
  1980   000180  B0D8               	btfsc	status,0,c
  1981   000182  EFC5  F000         	goto	u2171
  1982   000186  EFC7  F000         	goto	u2170
  1983   00018A                     u2171:
  1984   00018A  EFDE  F000         	goto	l3011
  1985   00018E                     u2170:
  1986   00018E                     
  1987                           ;color.c: 141:             card_memory[card_count] = 2;
  1988   00018E  0E88               	movlw	low _card_memory
  1989   000190  2444               	addwf	_card_count^0,w,c
  1990   000192  6ED9               	movwf	fsr2l,c
  1991   000194  6ADA               	clrf	fsr2h,c
  1992   000196  0E00               	movlw	high _card_memory
  1993   000198  22DA               	addwfc	fsr2h,f,c
  1994   00019A  0E02               	movlw	2
  1995   00019C  6EDF               	movwf	indf2,c
  1996   00019E                     
  1997                           ;color.c: 142:             card_count ++;
  1998   00019E  2A44               	incf	_card_count^0,f,c
  1999   0001A0                     
  2000                           ;color.c: 143:             movement(mL,mR,1);
  2001   0001A0  C039  F027         	movff	buggy_color_response@mL,movement@mL
  2002   0001A4  C03A  F028         	movff	buggy_color_response@mL+1,movement@mL+1
  2003   0001A8  C03B  F029         	movff	buggy_color_response@mR,movement@mR
  2004   0001AC  C03C  F02A         	movff	buggy_color_response@mR+1,movement@mR+1
  2005   0001B0  0E00               	movlw	0
  2006   0001B2  6E2C               	movwf	(movement@count+1)^0,c
  2007   0001B4  0E01               	movlw	1
  2008   0001B6  6E2B               	movwf	movement@count^0,c
  2009   0001B8  EC5F  F005         	call	_movement	;wreg free
  2010   0001BC                     l3011:
  2011                           
  2012                           ;color.c: 147:         if (color.B_norm < 0.25 && color.G_norm > 0.40) {
  2013   0001BC  C051  F003         	movff	_color+12,___flge@ff1
  2014   0001C0  C052  F004         	movff	_color+13,___flge@ff1+1
  2015   0001C4  C053  F005         	movff	_color+14,___flge@ff1+2
  2016   0001C8  C054  F006         	movff	_color+15,___flge@ff1+3
  2017   0001CC  0E00               	movlw	0
  2018   0001CE  6E07               	movwf	___flge@ff2^0,c
  2019   0001D0  0E00               	movlw	0
  2020   0001D2  6E08               	movwf	(___flge@ff2+1)^0,c
  2021   0001D4  0E80               	movlw	128
  2022   0001D6  6E09               	movwf	(___flge@ff2+2)^0,c
  2023   0001D8  0E3E               	movlw	62
  2024   0001DA  6E0A               	movwf	(___flge@ff2+3)^0,c
  2025   0001DC  ECF7  F00B         	call	___flge	;wreg free
  2026   0001E0  B0D8               	btfsc	status,0,c
  2027   0001E2  EFF5  F000         	goto	u2181
  2028   0001E6  EFF7  F000         	goto	u2180
  2029   0001EA                     u2181:
  2030   0001EA  EF27  F001         	goto	l3021
  2031   0001EE                     u2180:
  2032   0001EE  0ECD               	movlw	205
  2033   0001F0  6E03               	movwf	___flge@ff1^0,c
  2034   0001F2  0ECC               	movlw	204
  2035   0001F4  6E04               	movwf	(___flge@ff1+1)^0,c
  2036   0001F6  0ECC               	movlw	204
  2037   0001F8  6E05               	movwf	(___flge@ff1+2)^0,c
  2038   0001FA  0E3E               	movlw	62
  2039   0001FC  6E06               	movwf	(___flge@ff1+3)^0,c
  2040   0001FE  C055  F007         	movff	_color+16,___flge@ff2
  2041   000202  C056  F008         	movff	_color+17,___flge@ff2+1
  2042   000206  C057  F009         	movff	_color+18,___flge@ff2+2
  2043   00020A  C058  F00A         	movff	_color+19,___flge@ff2+3
  2044   00020E  ECF7  F00B         	call	___flge	;wreg free
  2045   000212  B0D8               	btfsc	status,0,c
  2046   000214  EF0E  F001         	goto	u2191
  2047   000218  EF10  F001         	goto	u2190
  2048   00021C                     u2191:
  2049   00021C  EF27  F001         	goto	l3021
  2050   000220                     u2190:
  2051   000220                     
  2052                           ;color.c: 148:             card_memory[card_count] = 1;
  2053   000220  0E88               	movlw	low _card_memory
  2054   000222  2444               	addwf	_card_count^0,w,c
  2055   000224  6ED9               	movwf	fsr2l,c
  2056   000226  6ADA               	clrf	fsr2h,c
  2057   000228  0E00               	movlw	high _card_memory
  2058   00022A  22DA               	addwfc	fsr2h,f,c
  2059   00022C  0E01               	movlw	1
  2060   00022E  6EDF               	movwf	indf2,c
  2061   000230                     
  2062                           ;color.c: 149:             card_count ++;
  2063   000230  2A44               	incf	_card_count^0,f,c
  2064   000232                     
  2065                           ;color.c: 150:             movement(mL,mR,2);
  2066   000232  C039  F027         	movff	buggy_color_response@mL,movement@mL
  2067   000236  C03A  F028         	movff	buggy_color_response@mL+1,movement@mL+1
  2068   00023A  C03B  F029         	movff	buggy_color_response@mR,movement@mR
  2069   00023E  C03C  F02A         	movff	buggy_color_response@mR+1,movement@mR+1
  2070   000242  0E00               	movlw	0
  2071   000244  6E2C               	movwf	(movement@count+1)^0,c
  2072   000246  0E02               	movlw	2
  2073   000248  6E2B               	movwf	movement@count^0,c
  2074   00024A  EC5F  F005         	call	_movement	;wreg free
  2075   00024E                     l3021:
  2076                           
  2077                           ;color.c: 154:         if (color.R_norm < 0.38 && color.B_norm > 0.32 && color.G_norm > 
      +                          0.34){
  2078   00024E  C04D  F003         	movff	_color+8,___flge@ff1
  2079   000252  C04E  F004         	movff	_color+9,___flge@ff1+1
  2080   000256  C04F  F005         	movff	_color+10,___flge@ff1+2
  2081   00025A  C050  F006         	movff	_color+11,___flge@ff1+3
  2082   00025E  0E5C               	movlw	92
  2083   000260  6E07               	movwf	___flge@ff2^0,c
  2084   000262  0E8F               	movlw	143
  2085   000264  6E08               	movwf	(___flge@ff2+1)^0,c
  2086   000266  0EC2               	movlw	194
  2087   000268  6E09               	movwf	(___flge@ff2+2)^0,c
  2088   00026A  0E3E               	movlw	62
  2089   00026C  6E0A               	movwf	(___flge@ff2+3)^0,c
  2090   00026E  ECF7  F00B         	call	___flge	;wreg free
  2091   000272  B0D8               	btfsc	status,0,c
  2092   000274  EF3E  F001         	goto	u2201
  2093   000278  EF40  F001         	goto	u2200
  2094   00027C                     u2201:
  2095   00027C  EF89  F001         	goto	l3033
  2096   000280                     u2200:
  2097   000280  0E0A               	movlw	10
  2098   000282  6E03               	movwf	___flge@ff1^0,c
  2099   000284  0ED7               	movlw	215
  2100   000286  6E04               	movwf	(___flge@ff1+1)^0,c
  2101   000288  0EA3               	movlw	163
  2102   00028A  6E05               	movwf	(___flge@ff1+2)^0,c
  2103   00028C  0E3E               	movlw	62
  2104   00028E  6E06               	movwf	(___flge@ff1+3)^0,c
  2105   000290  C051  F007         	movff	_color+12,___flge@ff2
  2106   000294  C052  F008         	movff	_color+13,___flge@ff2+1
  2107   000298  C053  F009         	movff	_color+14,___flge@ff2+2
  2108   00029C  C054  F00A         	movff	_color+15,___flge@ff2+3
  2109   0002A0  ECF7  F00B         	call	___flge	;wreg free
  2110   0002A4  B0D8               	btfsc	status,0,c
  2111   0002A6  EF57  F001         	goto	u2211
  2112   0002AA  EF59  F001         	goto	u2210
  2113   0002AE                     u2211:
  2114   0002AE  EF89  F001         	goto	l3033
  2115   0002B2                     u2210:
  2116   0002B2  0E7B               	movlw	123
  2117   0002B4  6E03               	movwf	___flge@ff1^0,c
  2118   0002B6  0E14               	movlw	20
  2119   0002B8  6E04               	movwf	(___flge@ff1+1)^0,c
  2120   0002BA  0EAE               	movlw	174
  2121   0002BC  6E05               	movwf	(___flge@ff1+2)^0,c
  2122   0002BE  0E3E               	movlw	62
  2123   0002C0  6E06               	movwf	(___flge@ff1+3)^0,c
  2124   0002C2  C055  F007         	movff	_color+16,___flge@ff2
  2125   0002C6  C056  F008         	movff	_color+17,___flge@ff2+1
  2126   0002CA  C057  F009         	movff	_color+18,___flge@ff2+2
  2127   0002CE  C058  F00A         	movff	_color+19,___flge@ff2+3
  2128   0002D2  ECF7  F00B         	call	___flge	;wreg free
  2129   0002D6  B0D8               	btfsc	status,0,c
  2130   0002D8  EF70  F001         	goto	u2221
  2131   0002DC  EF72  F001         	goto	u2220
  2132   0002E0                     u2221:
  2133   0002E0  EF89  F001         	goto	l3033
  2134   0002E4                     u2220:
  2135   0002E4                     
  2136                           ;color.c: 155:             card_memory[card_count] = 3;
  2137   0002E4  0E88               	movlw	low _card_memory
  2138   0002E6  2444               	addwf	_card_count^0,w,c
  2139   0002E8  6ED9               	movwf	fsr2l,c
  2140   0002EA  6ADA               	clrf	fsr2h,c
  2141   0002EC  0E00               	movlw	high _card_memory
  2142   0002EE  22DA               	addwfc	fsr2h,f,c
  2143   0002F0  0E03               	movlw	3
  2144   0002F2  6EDF               	movwf	indf2,c
  2145   0002F4                     
  2146                           ;color.c: 156:             card_count ++;
  2147   0002F4  2A44               	incf	_card_count^0,f,c
  2148   0002F6                     
  2149                           ;color.c: 157:             movement(mL,mR,3);
  2150   0002F6  C039  F027         	movff	buggy_color_response@mL,movement@mL
  2151   0002FA  C03A  F028         	movff	buggy_color_response@mL+1,movement@mL+1
  2152   0002FE  C03B  F029         	movff	buggy_color_response@mR,movement@mR
  2153   000302  C03C  F02A         	movff	buggy_color_response@mR+1,movement@mR+1
  2154   000306  0E00               	movlw	0
  2155   000308  6E2C               	movwf	(movement@count+1)^0,c
  2156   00030A  0E03               	movlw	3
  2157   00030C  6E2B               	movwf	movement@count^0,c
  2158   00030E  EC5F  F005         	call	_movement	;wreg free
  2159   000312                     l3033:
  2160                           
  2161                           ;color.c: 161:         if (color.R_norm > 0.52 && color.G_norm > 0.32){
  2162   000312  0EB8               	movlw	184
  2163   000314  6E03               	movwf	___flge@ff1^0,c
  2164   000316  0E1E               	movlw	30
  2165   000318  6E04               	movwf	(___flge@ff1+1)^0,c
  2166   00031A  0E05               	movlw	5
  2167   00031C  6E05               	movwf	(___flge@ff1+2)^0,c
  2168   00031E  0E3F               	movlw	63
  2169   000320  6E06               	movwf	(___flge@ff1+3)^0,c
  2170   000322  C04D  F007         	movff	_color+8,___flge@ff2
  2171   000326  C04E  F008         	movff	_color+9,___flge@ff2+1
  2172   00032A  C04F  F009         	movff	_color+10,___flge@ff2+2
  2173   00032E  C050  F00A         	movff	_color+11,___flge@ff2+3
  2174   000332  ECF7  F00B         	call	___flge	;wreg free
  2175   000336  B0D8               	btfsc	status,0,c
  2176   000338  EFA0  F001         	goto	u2231
  2177   00033C  EFA2  F001         	goto	u2230
  2178   000340                     u2231:
  2179   000340  EFD2  F001         	goto	l3043
  2180   000344                     u2230:
  2181   000344  0E0A               	movlw	10
  2182   000346  6E03               	movwf	___flge@ff1^0,c
  2183   000348  0ED7               	movlw	215
  2184   00034A  6E04               	movwf	(___flge@ff1+1)^0,c
  2185   00034C  0EA3               	movlw	163
  2186   00034E  6E05               	movwf	(___flge@ff1+2)^0,c
  2187   000350  0E3E               	movlw	62
  2188   000352  6E06               	movwf	(___flge@ff1+3)^0,c
  2189   000354  C055  F007         	movff	_color+16,___flge@ff2
  2190   000358  C056  F008         	movff	_color+17,___flge@ff2+1
  2191   00035C  C057  F009         	movff	_color+18,___flge@ff2+2
  2192   000360  C058  F00A         	movff	_color+19,___flge@ff2+3
  2193   000364  ECF7  F00B         	call	___flge	;wreg free
  2194   000368  B0D8               	btfsc	status,0,c
  2195   00036A  EFB9  F001         	goto	u2241
  2196   00036E  EFBB  F001         	goto	u2240
  2197   000372                     u2241:
  2198   000372  EFD2  F001         	goto	l3043
  2199   000376                     u2240:
  2200   000376                     
  2201                           ;color.c: 162:             card_memory[card_count] = 9;
  2202   000376  0E88               	movlw	low _card_memory
  2203   000378  2444               	addwf	_card_count^0,w,c
  2204   00037A  6ED9               	movwf	fsr2l,c
  2205   00037C  6ADA               	clrf	fsr2h,c
  2206   00037E  0E00               	movlw	high _card_memory
  2207   000380  22DA               	addwfc	fsr2h,f,c
  2208   000382  0E09               	movlw	9
  2209   000384  6EDF               	movwf	indf2,c
  2210   000386                     
  2211                           ;color.c: 163:             card_count ++;
  2212   000386  2A44               	incf	_card_count^0,f,c
  2213   000388                     
  2214                           ;color.c: 164:             movement(mL,mR,4);
  2215   000388  C039  F027         	movff	buggy_color_response@mL,movement@mL
  2216   00038C  C03A  F028         	movff	buggy_color_response@mL+1,movement@mL+1
  2217   000390  C03B  F029         	movff	buggy_color_response@mR,movement@mR
  2218   000394  C03C  F02A         	movff	buggy_color_response@mR+1,movement@mR+1
  2219   000398  0E00               	movlw	0
  2220   00039A  6E2C               	movwf	(movement@count+1)^0,c
  2221   00039C  0E04               	movlw	4
  2222   00039E  6E2B               	movwf	movement@count^0,c
  2223   0003A0  EC5F  F005         	call	_movement	;wreg free
  2224   0003A4                     l3043:
  2225                           
  2226                           ;color.c: 168:         if (color.R_norm > 0.50 && color.B_norm > 0.24 && color.G_norm < 
      +                          0.33){
  2227   0003A4  0E00               	movlw	0
  2228   0003A6  6E03               	movwf	___flge@ff1^0,c
  2229   0003A8  0E00               	movlw	0
  2230   0003AA  6E04               	movwf	(___flge@ff1+1)^0,c
  2231   0003AC  0E00               	movlw	0
  2232   0003AE  6E05               	movwf	(___flge@ff1+2)^0,c
  2233   0003B0  0E3F               	movlw	63
  2234   0003B2  6E06               	movwf	(___flge@ff1+3)^0,c
  2235   0003B4  C04D  F007         	movff	_color+8,___flge@ff2
  2236   0003B8  C04E  F008         	movff	_color+9,___flge@ff2+1
  2237   0003BC  C04F  F009         	movff	_color+10,___flge@ff2+2
  2238   0003C0  C050  F00A         	movff	_color+11,___flge@ff2+3
  2239   0003C4  ECF7  F00B         	call	___flge	;wreg free
  2240   0003C8  B0D8               	btfsc	status,0,c
  2241   0003CA  EFE9  F001         	goto	u2251
  2242   0003CE  EFEB  F001         	goto	u2250
  2243   0003D2                     u2251:
  2244   0003D2  EF34  F002         	goto	l3055
  2245   0003D6                     u2250:
  2246   0003D6  0E8F               	movlw	143
  2247   0003D8  6E03               	movwf	___flge@ff1^0,c
  2248   0003DA  0EC2               	movlw	194
  2249   0003DC  6E04               	movwf	(___flge@ff1+1)^0,c
  2250   0003DE  0E75               	movlw	117
  2251   0003E0  6E05               	movwf	(___flge@ff1+2)^0,c
  2252   0003E2  0E3E               	movlw	62
  2253   0003E4  6E06               	movwf	(___flge@ff1+3)^0,c
  2254   0003E6  C051  F007         	movff	_color+12,___flge@ff2
  2255   0003EA  C052  F008         	movff	_color+13,___flge@ff2+1
  2256   0003EE  C053  F009         	movff	_color+14,___flge@ff2+2
  2257   0003F2  C054  F00A         	movff	_color+15,___flge@ff2+3
  2258   0003F6  ECF7  F00B         	call	___flge	;wreg free
  2259   0003FA  B0D8               	btfsc	status,0,c
  2260   0003FC  EF02  F002         	goto	u2261
  2261   000400  EF04  F002         	goto	u2260
  2262   000404                     u2261:
  2263   000404  EF34  F002         	goto	l3055
  2264   000408                     u2260:
  2265   000408  C055  F003         	movff	_color+16,___flge@ff1
  2266   00040C  C056  F004         	movff	_color+17,___flge@ff1+1
  2267   000410  C057  F005         	movff	_color+18,___flge@ff1+2
  2268   000414  C058  F006         	movff	_color+19,___flge@ff1+3
  2269   000418  0EC3               	movlw	195
  2270   00041A  6E07               	movwf	___flge@ff2^0,c
  2271   00041C  0EF5               	movlw	245
  2272   00041E  6E08               	movwf	(___flge@ff2+1)^0,c
  2273   000420  0EA8               	movlw	168
  2274   000422  6E09               	movwf	(___flge@ff2+2)^0,c
  2275   000424  0E3E               	movlw	62
  2276   000426  6E0A               	movwf	(___flge@ff2+3)^0,c
  2277   000428  ECF7  F00B         	call	___flge	;wreg free
  2278   00042C  B0D8               	btfsc	status,0,c
  2279   00042E  EF1B  F002         	goto	u2271
  2280   000432  EF1D  F002         	goto	u2270
  2281   000436                     u2271:
  2282   000436  EF34  F002         	goto	l3055
  2283   00043A                     u2270:
  2284   00043A                     
  2285                           ;color.c: 169:             card_memory[card_count] = 10;
  2286   00043A  0E88               	movlw	low _card_memory
  2287   00043C  2444               	addwf	_card_count^0,w,c
  2288   00043E  6ED9               	movwf	fsr2l,c
  2289   000440  6ADA               	clrf	fsr2h,c
  2290   000442  0E00               	movlw	high _card_memory
  2291   000444  22DA               	addwfc	fsr2h,f,c
  2292   000446  0E0A               	movlw	10
  2293   000448  6EDF               	movwf	indf2,c
  2294   00044A                     
  2295                           ;color.c: 170:             card_count ++;
  2296   00044A  2A44               	incf	_card_count^0,f,c
  2297   00044C                     
  2298                           ;color.c: 171:             movement(mL,mR,5);
  2299   00044C  C039  F027         	movff	buggy_color_response@mL,movement@mL
  2300   000450  C03A  F028         	movff	buggy_color_response@mL+1,movement@mL+1
  2301   000454  C03B  F029         	movff	buggy_color_response@mR,movement@mR
  2302   000458  C03C  F02A         	movff	buggy_color_response@mR+1,movement@mR+1
  2303   00045C  0E00               	movlw	0
  2304   00045E  6E2C               	movwf	(movement@count+1)^0,c
  2305   000460  0E05               	movlw	5
  2306   000462  6E2B               	movwf	movement@count^0,c
  2307   000464  EC5F  F005         	call	_movement	;wreg free
  2308   000468                     l3055:
  2309                           
  2310                           ;color.c: 175:         if (color.R_norm > 0.60 && color.B_norm < 0.22 && color.G_norm > 
      +                          0.23){
  2311   000468  0E9A               	movlw	154
  2312   00046A  6E03               	movwf	___flge@ff1^0,c
  2313   00046C  0E99               	movlw	153
  2314   00046E  6E04               	movwf	(___flge@ff1+1)^0,c
  2315   000470  0E19               	movlw	25
  2316   000472  6E05               	movwf	(___flge@ff1+2)^0,c
  2317   000474  0E3F               	movlw	63
  2318   000476  6E06               	movwf	(___flge@ff1+3)^0,c
  2319   000478  C04D  F007         	movff	_color+8,___flge@ff2
  2320   00047C  C04E  F008         	movff	_color+9,___flge@ff2+1
  2321   000480  C04F  F009         	movff	_color+10,___flge@ff2+2
  2322   000484  C050  F00A         	movff	_color+11,___flge@ff2+3
  2323   000488  ECF7  F00B         	call	___flge	;wreg free
  2324   00048C  B0D8               	btfsc	status,0,c
  2325   00048E  EF4B  F002         	goto	u2281
  2326   000492  EF4D  F002         	goto	u2280
  2327   000496                     u2281:
  2328   000496  EF96  F002         	goto	l3067
  2329   00049A                     u2280:
  2330   00049A  C051  F003         	movff	_color+12,___flge@ff1
  2331   00049E  C052  F004         	movff	_color+13,___flge@ff1+1
  2332   0004A2  C053  F005         	movff	_color+14,___flge@ff1+2
  2333   0004A6  C054  F006         	movff	_color+15,___flge@ff1+3
  2334   0004AA  0EAE               	movlw	174
  2335   0004AC  6E07               	movwf	___flge@ff2^0,c
  2336   0004AE  0E47               	movlw	71
  2337   0004B0  6E08               	movwf	(___flge@ff2+1)^0,c
  2338   0004B2  0E61               	movlw	97
  2339   0004B4  6E09               	movwf	(___flge@ff2+2)^0,c
  2340   0004B6  0E3E               	movlw	62
  2341   0004B8  6E0A               	movwf	(___flge@ff2+3)^0,c
  2342   0004BA  ECF7  F00B         	call	___flge	;wreg free
  2343   0004BE  B0D8               	btfsc	status,0,c
  2344   0004C0  EF64  F002         	goto	u2291
  2345   0004C4  EF66  F002         	goto	u2290
  2346   0004C8                     u2291:
  2347   0004C8  EF96  F002         	goto	l3067
  2348   0004CC                     u2290:
  2349   0004CC  0E1F               	movlw	31
  2350   0004CE  6E03               	movwf	___flge@ff1^0,c
  2351   0004D0  0E85               	movlw	133
  2352   0004D2  6E04               	movwf	(___flge@ff1+1)^0,c
  2353   0004D4  0E6B               	movlw	107
  2354   0004D6  6E05               	movwf	(___flge@ff1+2)^0,c
  2355   0004D8  0E3E               	movlw	62
  2356   0004DA  6E06               	movwf	(___flge@ff1+3)^0,c
  2357   0004DC  C055  F007         	movff	_color+16,___flge@ff2
  2358   0004E0  C056  F008         	movff	_color+17,___flge@ff2+1
  2359   0004E4  C057  F009         	movff	_color+18,___flge@ff2+2
  2360   0004E8  C058  F00A         	movff	_color+19,___flge@ff2+3
  2361   0004EC  ECF7  F00B         	call	___flge	;wreg free
  2362   0004F0  B0D8               	btfsc	status,0,c
  2363   0004F2  EF7D  F002         	goto	u2301
  2364   0004F6  EF7F  F002         	goto	u2300
  2365   0004FA                     u2301:
  2366   0004FA  EF96  F002         	goto	l3067
  2367   0004FE                     u2300:
  2368   0004FE                     
  2369                           ;color.c: 176:             card_memory[card_count] = 7;
  2370   0004FE  0E88               	movlw	low _card_memory
  2371   000500  2444               	addwf	_card_count^0,w,c
  2372   000502  6ED9               	movwf	fsr2l,c
  2373   000504  6ADA               	clrf	fsr2h,c
  2374   000506  0E00               	movlw	high _card_memory
  2375   000508  22DA               	addwfc	fsr2h,f,c
  2376   00050A  0E07               	movlw	7
  2377   00050C  6EDF               	movwf	indf2,c
  2378   00050E                     
  2379                           ;color.c: 177:             card_count ++;
  2380   00050E  2A44               	incf	_card_count^0,f,c
  2381   000510                     
  2382                           ;color.c: 178:             movement(mL,mR,6);
  2383   000510  C039  F027         	movff	buggy_color_response@mL,movement@mL
  2384   000514  C03A  F028         	movff	buggy_color_response@mL+1,movement@mL+1
  2385   000518  C03B  F029         	movff	buggy_color_response@mR,movement@mR
  2386   00051C  C03C  F02A         	movff	buggy_color_response@mR+1,movement@mR+1
  2387   000520  0E00               	movlw	0
  2388   000522  6E2C               	movwf	(movement@count+1)^0,c
  2389   000524  0E06               	movlw	6
  2390   000526  6E2B               	movwf	movement@count^0,c
  2391   000528  EC5F  F005         	call	_movement	;wreg free
  2392   00052C                     l3067:
  2393                           
  2394                           ;color.c: 182:         if (color.R_norm < 0.40 && color.B_norm > 0.30 && color.G_norm > 
      +                          0.4){
  2395   00052C  C04D  F003         	movff	_color+8,___flge@ff1
  2396   000530  C04E  F004         	movff	_color+9,___flge@ff1+1
  2397   000534  C04F  F005         	movff	_color+10,___flge@ff1+2
  2398   000538  C050  F006         	movff	_color+11,___flge@ff1+3
  2399   00053C  0ECD               	movlw	205
  2400   00053E  6E07               	movwf	___flge@ff2^0,c
  2401   000540  0ECC               	movlw	204
  2402   000542  6E08               	movwf	(___flge@ff2+1)^0,c
  2403   000544  0ECC               	movlw	204
  2404   000546  6E09               	movwf	(___flge@ff2+2)^0,c
  2405   000548  0E3E               	movlw	62
  2406   00054A  6E0A               	movwf	(___flge@ff2+3)^0,c
  2407   00054C  ECF7  F00B         	call	___flge	;wreg free
  2408   000550  B0D8               	btfsc	status,0,c
  2409   000552  EFAD  F002         	goto	u2311
  2410   000556  EFAF  F002         	goto	u2310
  2411   00055A                     u2311:
  2412   00055A  EFF8  F002         	goto	l3079
  2413   00055E                     u2310:
  2414   00055E  0E9A               	movlw	154
  2415   000560  6E03               	movwf	___flge@ff1^0,c
  2416   000562  0E99               	movlw	153
  2417   000564  6E04               	movwf	(___flge@ff1+1)^0,c
  2418   000566  0E99               	movlw	153
  2419   000568  6E05               	movwf	(___flge@ff1+2)^0,c
  2420   00056A  0E3E               	movlw	62
  2421   00056C  6E06               	movwf	(___flge@ff1+3)^0,c
  2422   00056E  C051  F007         	movff	_color+12,___flge@ff2
  2423   000572  C052  F008         	movff	_color+13,___flge@ff2+1
  2424   000576  C053  F009         	movff	_color+14,___flge@ff2+2
  2425   00057A  C054  F00A         	movff	_color+15,___flge@ff2+3
  2426   00057E  ECF7  F00B         	call	___flge	;wreg free
  2427   000582  B0D8               	btfsc	status,0,c
  2428   000584  EFC6  F002         	goto	u2321
  2429   000588  EFC8  F002         	goto	u2320
  2430   00058C                     u2321:
  2431   00058C  EFF8  F002         	goto	l3079
  2432   000590                     u2320:
  2433   000590  0ECD               	movlw	205
  2434   000592  6E03               	movwf	___flge@ff1^0,c
  2435   000594  0ECC               	movlw	204
  2436   000596  6E04               	movwf	(___flge@ff1+1)^0,c
  2437   000598  0ECC               	movlw	204
  2438   00059A  6E05               	movwf	(___flge@ff1+2)^0,c
  2439   00059C  0E3E               	movlw	62
  2440   00059E  6E06               	movwf	(___flge@ff1+3)^0,c
  2441   0005A0  C055  F007         	movff	_color+16,___flge@ff2
  2442   0005A4  C056  F008         	movff	_color+17,___flge@ff2+1
  2443   0005A8  C057  F009         	movff	_color+18,___flge@ff2+2
  2444   0005AC  C058  F00A         	movff	_color+19,___flge@ff2+3
  2445   0005B0  ECF7  F00B         	call	___flge	;wreg free
  2446   0005B4  B0D8               	btfsc	status,0,c
  2447   0005B6  EFDF  F002         	goto	u2331
  2448   0005BA  EFE1  F002         	goto	u2330
  2449   0005BE                     u2331:
  2450   0005BE  EFF8  F002         	goto	l3079
  2451   0005C2                     u2330:
  2452   0005C2                     
  2453                           ;color.c: 183:             card_memory[card_count] = 6;
  2454   0005C2  0E88               	movlw	low _card_memory
  2455   0005C4  2444               	addwf	_card_count^0,w,c
  2456   0005C6  6ED9               	movwf	fsr2l,c
  2457   0005C8  6ADA               	clrf	fsr2h,c
  2458   0005CA  0E00               	movlw	high _card_memory
  2459   0005CC  22DA               	addwfc	fsr2h,f,c
  2460   0005CE  0E06               	movlw	6
  2461   0005D0  6EDF               	movwf	indf2,c
  2462   0005D2                     
  2463                           ;color.c: 184:             card_count ++;
  2464   0005D2  2A44               	incf	_card_count^0,f,c
  2465   0005D4                     
  2466                           ;color.c: 185:             movement(mL,mR,7);
  2467   0005D4  C039  F027         	movff	buggy_color_response@mL,movement@mL
  2468   0005D8  C03A  F028         	movff	buggy_color_response@mL+1,movement@mL+1
  2469   0005DC  C03B  F029         	movff	buggy_color_response@mR,movement@mR
  2470   0005E0  C03C  F02A         	movff	buggy_color_response@mR+1,movement@mR+1
  2471   0005E4  0E00               	movlw	0
  2472   0005E6  6E2C               	movwf	(movement@count+1)^0,c
  2473   0005E8  0E07               	movlw	7
  2474   0005EA  6E2B               	movwf	movement@count^0,c
  2475   0005EC  EC5F  F005         	call	_movement	;wreg free
  2476   0005F0                     l3079:
  2477                           
  2478                           ;color.c: 189:         if (color.R_norm < 0.5 && color.C > 16000 ){
  2479   0005F0  C04D  F003         	movff	_color+8,___flge@ff1
  2480   0005F4  C04E  F004         	movff	_color+9,___flge@ff1+1
  2481   0005F8  C04F  F005         	movff	_color+10,___flge@ff1+2
  2482   0005FC  C050  F006         	movff	_color+11,___flge@ff1+3
  2483   000600  0E00               	movlw	0
  2484   000602  6E07               	movwf	___flge@ff2^0,c
  2485   000604  0E00               	movlw	0
  2486   000606  6E08               	movwf	(___flge@ff2+1)^0,c
  2487   000608  0E00               	movlw	0
  2488   00060A  6E09               	movwf	(___flge@ff2+2)^0,c
  2489   00060C  0E3F               	movlw	63
  2490   00060E  6E0A               	movwf	(___flge@ff2+3)^0,c
  2491   000610  ECF7  F00B         	call	___flge	;wreg free
  2492   000614  B0D8               	btfsc	status,0,c
  2493   000616  EF0F  F003         	goto	u2341
  2494   00061A  EF11  F003         	goto	u2340
  2495   00061E                     u2341:
  2496   00061E  EF83  F003         	goto	l3109
  2497   000622                     u2340:
  2498   000622  0E81               	movlw	129
  2499   000624  5C4B               	subwf	(_color+6)^0,w,c
  2500   000626  0E3E               	movlw	62
  2501   000628  584C               	subwfb	(_color+7)^0,w,c
  2502   00062A  A0D8               	btfss	status,0,c
  2503   00062C  EF1A  F003         	goto	u2351
  2504   000630  EF1C  F003         	goto	u2350
  2505   000634                     u2351:
  2506   000634  EF83  F003         	goto	l3109
  2507   000638                     u2350:
  2508   000638                     
  2509                           ;color.c: 192:             card_memory[card_count] = 3;
  2510   000638  0E88               	movlw	low _card_memory
  2511   00063A  2444               	addwf	_card_count^0,w,c
  2512   00063C  6ED9               	movwf	fsr2l,c
  2513   00063E  6ADA               	clrf	fsr2h,c
  2514   000640  0E00               	movlw	high _card_memory
  2515   000642  22DA               	addwfc	fsr2h,f,c
  2516   000644  0E03               	movlw	3
  2517   000646  6EDF               	movwf	indf2,c
  2518   000648                     
  2519                           ;color.c: 193:             card_count ++;
  2520   000648  2A44               	incf	_card_count^0,f,c
  2521   00064A                     
  2522                           ;color.c: 195:             LATGbits.LATG1 = 0;
  2523   00064A  927F               	bcf	127,1,c	;volatile
  2524   00064C                     
  2525                           ;color.c: 196:             LATAbits.LATA4 = 0;
  2526   00064C  9879               	bcf	121,4,c	;volatile
  2527   00064E                     
  2528                           ;color.c: 197:             LATFbits.LATF7 = 0;
  2529   00064E  9E7E               	bcf	126,7,c	;volatile
  2530   000650                     
  2531                           ;color.c: 199:             space(mL,mR);
  2532   000650  C039  F01B         	movff	buggy_color_response@mL,space@mL
  2533   000654  C03A  F01C         	movff	buggy_color_response@mL+1,space@mL+1
  2534   000658  C03B  F01D         	movff	buggy_color_response@mR,space@mR
  2535   00065C  C03C  F01E         	movff	buggy_color_response@mR+1,space@mR+1
  2536   000660  EC79  F00C         	call	_space	;wreg free
  2537   000664                     
  2538                           ;color.c: 200:             _delay((unsigned long)((500)*(64000000/4000.0)));
  2539   000664  0E29               	movlw	41
  2540   000666  6E40               	movwf	(??_buggy_color_response+1)^0,c
  2541   000668  0E96               	movlw	150
  2542   00066A  6E3F               	movwf	??_buggy_color_response^0,c
  2543   00066C  0E7F               	movlw	127
  2544   00066E                     u2557:
  2545   00066E  2EE8               	decfsz	wreg,f,c
  2546   000670  D7FE               	bra	u2557
  2547   000672  2E3F               	decfsz	??_buggy_color_response^0,f,c
  2548   000674  D7FC               	bra	u2557
  2549   000676  2E40               	decfsz	(??_buggy_color_response+1)^0,f,c
  2550   000678  D7FA               	bra	u2557
  2551   00067A  F000               	nop	
  2552   00067C                     
  2553                           ;color.c: 201:             stop(mL,mR);
  2554   00067C  C039  F016         	movff	buggy_color_response@mL,stop@mL
  2555   000680  C03A  F017         	movff	buggy_color_response@mL+1,stop@mL+1
  2556   000684  C03B  F018         	movff	buggy_color_response@mR,stop@mR
  2557   000688  C03C  F019         	movff	buggy_color_response@mR+1,stop@mR+1
  2558   00068C  EC2F  F00F         	call	_stop	;wreg free
  2559   000690                     
  2560                           ;color.c: 202:             _delay((unsigned long)((500)*(64000000/4000.0)));
  2561   000690  0E29               	movlw	41
  2562   000692  6E40               	movwf	(??_buggy_color_response+1)^0,c
  2563   000694  0E96               	movlw	150
  2564   000696  6E3F               	movwf	??_buggy_color_response^0,c
  2565   000698  0E7F               	movlw	127
  2566   00069A                     u2567:
  2567   00069A  2EE8               	decfsz	wreg,f,c
  2568   00069C  D7FE               	bra	u2567
  2569   00069E  2E3F               	decfsz	??_buggy_color_response^0,f,c
  2570   0006A0  D7FC               	bra	u2567
  2571   0006A2  2E40               	decfsz	(??_buggy_color_response+1)^0,f,c
  2572   0006A4  D7FA               	bra	u2567
  2573   0006A6  F000               	nop	
  2574   0006A8                     
  2575                           ;color.c: 204:             return_home(mL,mR);
  2576   0006A8  C039  F033         	movff	buggy_color_response@mL,return_home@mL
  2577   0006AC  C03A  F034         	movff	buggy_color_response@mL+1,return_home@mL+1
  2578   0006B0  C03B  F035         	movff	buggy_color_response@mR,return_home@mR
  2579   0006B4  C03C  F036         	movff	buggy_color_response@mR+1,return_home@mR+1
  2580   0006B8  ECAD  F008         	call	_return_home	;wreg free
  2581   0006BC                     
  2582                           ;color.c: 206:             stop(mL,mR);
  2583   0006BC  C039  F016         	movff	buggy_color_response@mL,stop@mL
  2584   0006C0  C03A  F017         	movff	buggy_color_response@mL+1,stop@mL+1
  2585   0006C4  C03B  F018         	movff	buggy_color_response@mR,stop@mR
  2586   0006C8  C03C  F019         	movff	buggy_color_response@mR+1,stop@mR+1
  2587   0006CC  EC2F  F00F         	call	_stop	;wreg free
  2588   0006D0                     
  2589                           ;color.c: 207:             _delay((unsigned long)((500)*(64000000/4000.0)));
  2590   0006D0  0E29               	movlw	41
  2591   0006D2  6E40               	movwf	(??_buggy_color_response+1)^0,c
  2592   0006D4  0E96               	movlw	150
  2593   0006D6  6E3F               	movwf	??_buggy_color_response^0,c
  2594   0006D8  0E7F               	movlw	127
  2595   0006DA                     u2577:
  2596   0006DA  2EE8               	decfsz	wreg,f,c
  2597   0006DC  D7FE               	bra	u2577
  2598   0006DE  2E3F               	decfsz	??_buggy_color_response^0,f,c
  2599   0006E0  D7FC               	bra	u2577
  2600   0006E2  2E40               	decfsz	(??_buggy_color_response+1)^0,f,c
  2601   0006E4  D7FA               	bra	u2577
  2602   0006E6  F000               	nop	
  2603   0006E8                     
  2604                           ;color.c: 209:             movement_return(mL,mR,3);
  2605   0006E8  C039  F02D         	movff	buggy_color_response@mL,movement_return@mL
  2606   0006EC  C03A  F02E         	movff	buggy_color_response@mL+1,movement_return@mL+1
  2607   0006F0  C03B  F02F         	movff	buggy_color_response@mR,movement_return@mR
  2608   0006F4  C03C  F030         	movff	buggy_color_response@mR+1,movement_return@mR+1
  2609   0006F8  0E00               	movlw	0
  2610   0006FA  6E32               	movwf	(movement_return@count+1)^0,c
  2611   0006FC  0E03               	movlw	3
  2612   0006FE  6E31               	movwf	movement_return@count^0,c
  2613   000700  ECED  F006         	call	_movement_return	;wreg free
  2614   000704  0003               	sleep		;# 
  2615   000706                     l3109:
  2616                           
  2617                           ;color.c: 213:         timer_reset();
  2618   000706  EC87  F011         	call	_timer_reset	;wreg free
  2619                           
  2620                           ;color.c: 214:     }
  2621   00070A  EF91  F003         	goto	l144
  2622   00070E                     l3111:
  2623   00070E  C039  F01B         	movff	buggy_color_response@mL,forward@mL
  2624   000712  C03A  F01C         	movff	buggy_color_response@mL+1,forward@mL+1
  2625   000716  C03B  F01D         	movff	buggy_color_response@mR,forward@mR
  2626   00071A  C03C  F01E         	movff	buggy_color_response@mR+1,forward@mR+1
  2627   00071E  ECFA  F00C         	call	_forward	;wreg free
  2628   000722                     l144:
  2629   000722  0012               	return		;funcret
  2630   000724                     __end_of_buggy_color_response:
  2631                           	callstack 0
  2632                           
  2633 ;; *************** function _timer_reset *****************
  2634 ;; Defined at:
  2635 ;;		line 25 in file "timers.c"
  2636 ;; Parameters:    Size  Location     Type
  2637 ;;		None
  2638 ;; Auto vars:     Size  Location     Type
  2639 ;;		None
  2640 ;; Return value:  Size  Location     Type
  2641 ;;                  1    wreg      void 
  2642 ;; Registers used:
  2643 ;;		wreg, status,2
  2644 ;; Tracked objects:
  2645 ;;		On entry : 0/0
  2646 ;;		On exit  : 0/0
  2647 ;;		Unchanged: 0/0
  2648 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2649 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2650 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2651 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2652 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2653 ;;Total ram usage:        0 bytes
  2654 ;; Hardware stack levels used: 1
  2655 ;; Hardware stack levels required when called: 1
  2656 ;; This function calls:
  2657 ;;		Nothing
  2658 ;; This function is called by:
  2659 ;;		_buggy_color_response
  2660 ;;		_main
  2661 ;; This function uses a non-reentrant model
  2662 ;;
  2663                           
  2664                           	psect	text14
  2665   00230E                     __ptext14:
  2666                           	callstack 0
  2667   00230E                     _timer_reset:
  2668                           	callstack 29
  2669   00230E                     
  2670                           ;timers.c: 26:     timer_val = 0;
  2671   00230E  0E00               	movlw	0
  2672   002310  6E42               	movwf	(_timer_val+1)^0,c
  2673   002312  0E00               	movlw	0
  2674   002314  6E41               	movwf	_timer_val^0,c
  2675                           
  2676                           ;timers.c: 27:     TMR0H=0;
  2677   002316  0E00               	movlw	0
  2678   002318  6ED4               	movwf	212,c	;volatile
  2679                           
  2680                           ;timers.c: 28:     TMR0L=0b00100011;
  2681   00231A  0E23               	movlw	35
  2682   00231C  6ED3               	movwf	211,c	;volatile
  2683   00231E  0012               	return		;funcret
  2684   002320                     __end_of_timer_reset:
  2685                           	callstack 0
  2686                           
  2687 ;; *************** function _return_home *****************
  2688 ;; Defined at:
  2689 ;;		line 248 in file "color.c"
  2690 ;; Parameters:    Size  Location     Type
  2691 ;;  mL              2   50[COMRAM] PTR struct DC_motor
  2692 ;;		 -> motorL(9), 
  2693 ;;  mR              2   52[COMRAM] PTR struct DC_motor
  2694 ;;		 -> motorR(9), 
  2695 ;; Auto vars:     Size  Location     Type
  2696 ;;		None
  2697 ;; Return value:  Size  Location     Type
  2698 ;;                  1    wreg      void 
  2699 ;; Registers used:
  2700 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2701 ;; Tracked objects:
  2702 ;;		On entry : 0/0
  2703 ;;		On exit  : 0/0
  2704 ;;		Unchanged: 0/0
  2705 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2706 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2707 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2708 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2709 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2710 ;;Total ram usage:        6 bytes
  2711 ;; Hardware stack levels used: 1
  2712 ;; Hardware stack levels required when called: 7
  2713 ;; This function calls:
  2714 ;;		_delay_ms_func
  2715 ;;		_forward
  2716 ;;		_movement_return
  2717 ;;		_reverse
  2718 ;;		_stop
  2719 ;; This function is called by:
  2720 ;;		_buggy_color_response
  2721 ;; This function uses a non-reentrant model
  2722 ;;
  2723                           
  2724                           	psect	text15
  2725   00115A                     __ptext15:
  2726                           	callstack 0
  2727   00115A                     _return_home:
  2728                           	callstack 22
  2729   00115A                     
  2730                           ;color.c: 249:     while(timer_index > 0 && card_count > 0 ) {
  2731   00115A  EF57  F009         	goto	l2879
  2732   00115E                     l2847:
  2733                           
  2734                           ;color.c: 251:         movement_return(mL,mR,card_memory[card_count-1]);
  2735   00115E  C033  F02D         	movff	return_home@mL,movement_return@mL
  2736   001162  C034  F02E         	movff	return_home@mL+1,movement_return@mL+1
  2737   001166  C035  F02F         	movff	return_home@mR,movement_return@mR
  2738   00116A  C036  F030         	movff	return_home@mR+1,movement_return@mR+1
  2739   00116E  0E87               	movlw	low (_card_memory+65535)
  2740   001170  2444               	addwf	_card_count^0,w,c
  2741   001172  6ED9               	movwf	fsr2l,c
  2742   001174  6ADA               	clrf	fsr2h,c
  2743   001176  0E00               	movlw	high (_card_memory+65535)
  2744   001178  22DA               	addwfc	fsr2h,f,c
  2745   00117A  50DF               	movf	indf2,w,c
  2746   00117C  6E37               	movwf	??_return_home^0,c
  2747   00117E  5037               	movf	??_return_home^0,w,c
  2748   001180  6E31               	movwf	movement_return@count^0,c
  2749   001182  6A32               	clrf	(movement_return@count+1)^0,c
  2750   001184  ECED  F006         	call	_movement_return	;wreg free
  2751   001188                     
  2752                           ;color.c: 252:         card_count--;
  2753   001188  0644               	decf	_card_count^0,f,c
  2754   00118A                     
  2755                           ;color.c: 253:         _delay((unsigned long)((250)*(64000000/4000.0)));
  2756   00118A  0E15               	movlw	21
  2757   00118C  6E38               	movwf	(??_return_home+1)^0,c
  2758   00118E  0E4B               	movlw	75
  2759   001190  6E37               	movwf	??_return_home^0,c
  2760   001192  0EBE               	movlw	190
  2761   001194                     u2587:
  2762   001194  2EE8               	decfsz	wreg,f,c
  2763   001196  D7FE               	bra	u2587
  2764   001198  2E37               	decfsz	??_return_home^0,f,c
  2765   00119A  D7FC               	bra	u2587
  2766   00119C  2E38               	decfsz	(??_return_home+1)^0,f,c
  2767   00119E  D7FA               	bra	u2587
  2768   0011A0  D000               	nop2	
  2769   0011A2                     
  2770                           ;color.c: 254:         reverse(mL,mR);
  2771   0011A2  C033  F01B         	movff	return_home@mL,reverse@mL
  2772   0011A6  C034  F01C         	movff	return_home@mL+1,reverse@mL+1
  2773   0011AA  C035  F01D         	movff	return_home@mR,reverse@mR
  2774   0011AE  C036  F01E         	movff	return_home@mR+1,reverse@mR+1
  2775   0011B2  EC6F  F00D         	call	_reverse	;wreg free
  2776   0011B6                     
  2777                           ;color.c: 255:         _delay((unsigned long)((500)*(64000000/4000.0)));
  2778   0011B6  0E29               	movlw	41
  2779   0011B8  6E38               	movwf	(??_return_home+1)^0,c
  2780   0011BA  0E96               	movlw	150
  2781   0011BC  6E37               	movwf	??_return_home^0,c
  2782   0011BE  0E7F               	movlw	127
  2783   0011C0                     u2597:
  2784   0011C0  2EE8               	decfsz	wreg,f,c
  2785   0011C2  D7FE               	bra	u2597
  2786   0011C4  2E37               	decfsz	??_return_home^0,f,c
  2787   0011C6  D7FC               	bra	u2597
  2788   0011C8  2E38               	decfsz	(??_return_home+1)^0,f,c
  2789   0011CA  D7FA               	bra	u2597
  2790   0011CC  F000               	nop	
  2791   0011CE                     
  2792                           ;color.c: 256:         stop(mL,mR);
  2793   0011CE  C033  F016         	movff	return_home@mL,stop@mL
  2794   0011D2  C034  F017         	movff	return_home@mL+1,stop@mL+1
  2795   0011D6  C035  F018         	movff	return_home@mR,stop@mR
  2796   0011DA  C036  F019         	movff	return_home@mR+1,stop@mR+1
  2797   0011DE  EC2F  F00F         	call	_stop	;wreg free
  2798   0011E2                     
  2799                           ;color.c: 257:         _delay((unsigned long)((500)*(64000000/4000.0)));
  2800   0011E2  0E29               	movlw	41
  2801   0011E4  6E38               	movwf	(??_return_home+1)^0,c
  2802   0011E6  0E96               	movlw	150
  2803   0011E8  6E37               	movwf	??_return_home^0,c
  2804   0011EA  0E7F               	movlw	127
  2805   0011EC                     u2607:
  2806   0011EC  2EE8               	decfsz	wreg,f,c
  2807   0011EE  D7FE               	bra	u2607
  2808   0011F0  2E37               	decfsz	??_return_home^0,f,c
  2809   0011F2  D7FC               	bra	u2607
  2810   0011F4  2E38               	decfsz	(??_return_home+1)^0,f,c
  2811   0011F6  D7FA               	bra	u2607
  2812   0011F8  F000               	nop	
  2813   0011FA                     
  2814                           ;color.c: 258:         forward(mL,mR);
  2815   0011FA  C033  F01B         	movff	return_home@mL,forward@mL
  2816   0011FE  C034  F01C         	movff	return_home@mL+1,forward@mL+1
  2817   001202  C035  F01D         	movff	return_home@mR,forward@mR
  2818   001206  C036  F01E         	movff	return_home@mR+1,forward@mR+1
  2819   00120A  ECFA  F00C         	call	_forward	;wreg free
  2820   00120E                     
  2821                           ;color.c: 259:         delay_ms_func(timer_memory[timer_index-1]);
  2822   00120E  0E5F               	movlw	low (_timer_memory+65535)
  2823   001210  2443               	addwf	_timer_index^0,w,c
  2824   001212  6ED9               	movwf	fsr2l,c
  2825   001214  6ADA               	clrf	fsr2h,c
  2826   001216  0E00               	movlw	high (_timer_memory+65535)
  2827   001218  22DA               	addwfc	fsr2h,f,c
  2828   00121A  50DF               	movf	indf2,w,c
  2829   00121C  6E37               	movwf	??_return_home^0,c
  2830   00121E  5037               	movf	??_return_home^0,w,c
  2831   001220  6E03               	movwf	delay_ms_func@time^0,c
  2832   001222  6A04               	clrf	(delay_ms_func@time+1)^0,c
  2833   001224  EC99  F010         	call	_delay_ms_func	;wreg free
  2834   001228                     
  2835                           ;color.c: 260:         timer_index--;
  2836   001228  0643               	decf	_timer_index^0,f,c
  2837   00122A                     
  2838                           ;color.c: 261:         stop(mL,mR);
  2839   00122A  C033  F016         	movff	return_home@mL,stop@mL
  2840   00122E  C034  F017         	movff	return_home@mL+1,stop@mL+1
  2841   001232  C035  F018         	movff	return_home@mR,stop@mR
  2842   001236  C036  F019         	movff	return_home@mR+1,stop@mR+1
  2843   00123A  EC2F  F00F         	call	_stop	;wreg free
  2844   00123E                     
  2845                           ;color.c: 262:         _delay((unsigned long)((200)*(64000000/4000.0)));
  2846   00123E  0E11               	movlw	17
  2847   001240  6E38               	movwf	(??_return_home+1)^0,c
  2848   001242  0E3C               	movlw	60
  2849   001244  6E37               	movwf	??_return_home^0,c
  2850   001246  0ECB               	movlw	203
  2851   001248                     u2617:
  2852   001248  2EE8               	decfsz	wreg,f,c
  2853   00124A  D7FE               	bra	u2617
  2854   00124C  2E37               	decfsz	??_return_home^0,f,c
  2855   00124E  D7FC               	bra	u2617
  2856   001250  2E38               	decfsz	(??_return_home+1)^0,f,c
  2857   001252  D7FA               	bra	u2617
  2858   001254  F000               	nop	
  2859   001256                     
  2860                           ;color.c: 263:          reverse(mL,mR);
  2861   001256  C033  F01B         	movff	return_home@mL,reverse@mL
  2862   00125A  C034  F01C         	movff	return_home@mL+1,reverse@mL+1
  2863   00125E  C035  F01D         	movff	return_home@mR,reverse@mR
  2864   001262  C036  F01E         	movff	return_home@mR+1,reverse@mR+1
  2865   001266  EC6F  F00D         	call	_reverse	;wreg free
  2866   00126A                     
  2867                           ;color.c: 264:         _delay((unsigned long)((100)*(64000000/4000.0)));
  2868   00126A  0E09               	movlw	9
  2869   00126C  6E38               	movwf	(??_return_home+1)^0,c
  2870   00126E  0E1E               	movlw	30
  2871   001270  6E37               	movwf	??_return_home^0,c
  2872   001272  0EE4               	movlw	228
  2873   001274                     u2627:
  2874   001274  2EE8               	decfsz	wreg,f,c
  2875   001276  D7FE               	bra	u2627
  2876   001278  2E37               	decfsz	??_return_home^0,f,c
  2877   00127A  D7FC               	bra	u2627
  2878   00127C  2E38               	decfsz	(??_return_home+1)^0,f,c
  2879   00127E  D7FA               	bra	u2627
  2880   001280  D000               	nop2	
  2881   001282                     
  2882                           ;color.c: 265:         stop(mL,mR);
  2883   001282  C033  F016         	movff	return_home@mL,stop@mL
  2884   001286  C034  F017         	movff	return_home@mL+1,stop@mL+1
  2885   00128A  C035  F018         	movff	return_home@mR,stop@mR
  2886   00128E  C036  F019         	movff	return_home@mR+1,stop@mR+1
  2887   001292  EC2F  F00F         	call	_stop	;wreg free
  2888   001296                     
  2889                           ;color.c: 266:         _delay((unsigned long)((250)*(64000000/4000.0)));
  2890   001296  0E15               	movlw	21
  2891   001298  6E38               	movwf	(??_return_home+1)^0,c
  2892   00129A  0E4B               	movlw	75
  2893   00129C  6E37               	movwf	??_return_home^0,c
  2894   00129E  0EBE               	movlw	190
  2895   0012A0                     u2637:
  2896   0012A0  2EE8               	decfsz	wreg,f,c
  2897   0012A2  D7FE               	bra	u2637
  2898   0012A4  2E37               	decfsz	??_return_home^0,f,c
  2899   0012A6  D7FC               	bra	u2637
  2900   0012A8  2E38               	decfsz	(??_return_home+1)^0,f,c
  2901   0012AA  D7FA               	bra	u2637
  2902   0012AC  D000               	nop2	
  2903   0012AE                     l2879:
  2904                           
  2905                           ;color.c: 249:     while(timer_index > 0 && card_count > 0 ) {
  2906   0012AE  5043               	movf	_timer_index^0,w,c
  2907   0012B0  B4D8               	btfsc	status,2,c
  2908   0012B2  EF5D  F009         	goto	u2071
  2909   0012B6  EF5F  F009         	goto	u2070
  2910   0012BA                     u2071:
  2911   0012BA  EF67  F009         	goto	l152
  2912   0012BE                     u2070:
  2913   0012BE  5044               	movf	_card_count^0,w,c
  2914   0012C0  A4D8               	btfss	status,2,c
  2915   0012C2  EF65  F009         	goto	u2081
  2916   0012C6  EF67  F009         	goto	u2080
  2917   0012CA                     u2081:
  2918   0012CA  EFAF  F008         	goto	l2847
  2919   0012CE                     u2080:
  2920   0012CE                     l152:
  2921   0012CE  0012               	return		;funcret
  2922   0012D0                     __end_of_return_home:
  2923                           	callstack 0
  2924                           
  2925 ;; *************** function _movement_return *****************
  2926 ;; Defined at:
  2927 ;;		line 322 in file "dc_motor.c"
  2928 ;; Parameters:    Size  Location     Type
  2929 ;;  mL              2   44[COMRAM] PTR struct DC_motor
  2930 ;;		 -> motorL(9), 
  2931 ;;  mR              2   46[COMRAM] PTR struct DC_motor
  2932 ;;		 -> motorR(9), 
  2933 ;;  count           2   48[COMRAM] int 
  2934 ;; Auto vars:     Size  Location     Type
  2935 ;;		None
  2936 ;; Return value:  Size  Location     Type
  2937 ;;                  1    wreg      void 
  2938 ;; Registers used:
  2939 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2940 ;; Tracked objects:
  2941 ;;		On entry : 0/0
  2942 ;;		On exit  : 0/0
  2943 ;;		Unchanged: 0/0
  2944 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2945 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2946 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2947 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2948 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2949 ;;Total ram usage:        6 bytes
  2950 ;; Hardware stack levels used: 1
  2951 ;; Hardware stack levels required when called: 6
  2952 ;; This function calls:
  2953 ;;		_left_45
  2954 ;;		_reverse_pink
  2955 ;;		_reverse_yellow
  2956 ;;		_right_45
  2957 ;;		_stop
  2958 ;; This function is called by:
  2959 ;;		_buggy_color_response
  2960 ;;		_return_home
  2961 ;; This function uses a non-reentrant model
  2962 ;;
  2963                           
  2964                           	psect	text16
  2965   000DDA                     __ptext16:
  2966                           	callstack 0
  2967   000DDA                     _movement_return:
  2968                           	callstack 22
  2969   000DDA                     
  2970                           ;dc_motor.c: 322: void movement_return(DC_motor *mL, DC_motor *mR, int count);dc_motor.c
      +                          : 323: {;dc_motor.c: 325:     if (count == 1){right_45(mL,mR,2,right_timer); stop(mL,mR)
      +                          ;}
  2971   000DDA  0431               	decf	movement_return@count^0,w,c
  2972   000DDC  1032               	iorwf	(movement_return@count+1)^0,w,c
  2973   000DDE  A4D8               	btfss	status,2,c
  2974   000DE0  EFF4  F006         	goto	u1591
  2975   000DE4  EFF6  F006         	goto	u1590
  2976   000DE8                     u1591:
  2977   000DE8  EF12  F007         	goto	l2569
  2978   000DEC                     u1590:
  2979   000DEC  C02D  F01B         	movff	movement_return@mL,right_45@mL
  2980   000DF0  C02E  F01C         	movff	movement_return@mL+1,right_45@mL+1
  2981   000DF4  C02F  F01D         	movff	movement_return@mR,right_45@mR
  2982   000DF8  C030  F01E         	movff	movement_return@mR+1,right_45@mR+1
  2983   000DFC  0E00               	movlw	0
  2984   000DFE  6E20               	movwf	(right_45@count+1)^0,c
  2985   000E00  0E02               	movlw	2
  2986   000E02  6E1F               	movwf	right_45@count^0,c
  2987   000E04  C059  F021         	movff	_right_timer,right_45@right_timer
  2988   000E08  C05A  F022         	movff	_right_timer+1,right_45@right_timer+1
  2989   000E0C  EC1E  F00A         	call	_right_45	;wreg free
  2990   000E10  C02D  F016         	movff	movement_return@mL,stop@mL
  2991   000E14  C02E  F017         	movff	movement_return@mL+1,stop@mL+1
  2992   000E18  C02F  F018         	movff	movement_return@mR,stop@mR
  2993   000E1C  C030  F019         	movff	movement_return@mR+1,stop@mR+1
  2994   000E20  EC2F  F00F         	call	_stop	;wreg free
  2995   000E24                     l2569:
  2996                           
  2997                           ;dc_motor.c: 326:     if (count == 2){left_45(mL,mR,2,left_timer); stop(mL,mR);}
  2998   000E24  0E02               	movlw	2
  2999   000E26  1831               	xorwf	movement_return@count^0,w,c
  3000   000E28  1032               	iorwf	(movement_return@count+1)^0,w,c
  3001   000E2A  A4D8               	btfss	status,2,c
  3002   000E2C  EF1A  F007         	goto	u1601
  3003   000E30  EF1C  F007         	goto	u1600
  3004   000E34                     u1601:
  3005   000E34  EF38  F007         	goto	l2573
  3006   000E38                     u1600:
  3007   000E38  C02D  F01B         	movff	movement_return@mL,left_45@mL
  3008   000E3C  C02E  F01C         	movff	movement_return@mL+1,left_45@mL+1
  3009   000E40  C02F  F01D         	movff	movement_return@mR,left_45@mR
  3010   000E44  C030  F01E         	movff	movement_return@mR+1,left_45@mR+1
  3011   000E48  0E00               	movlw	0
  3012   000E4A  6E20               	movwf	(left_45@count+1)^0,c
  3013   000E4C  0E02               	movlw	2
  3014   000E4E  6E1F               	movwf	left_45@count^0,c
  3015   000E50  C05B  F021         	movff	_left_timer,left_45@left_timer
  3016   000E54  C05C  F022         	movff	_left_timer+1,left_45@left_timer+1
  3017   000E58  ECBC  F00A         	call	_left_45	;wreg free
  3018   000E5C  C02D  F016         	movff	movement_return@mL,stop@mL
  3019   000E60  C02E  F017         	movff	movement_return@mL+1,stop@mL+1
  3020   000E64  C02F  F018         	movff	movement_return@mR,stop@mR
  3021   000E68  C030  F019         	movff	movement_return@mR+1,stop@mR+1
  3022   000E6C  EC2F  F00F         	call	_stop	;wreg free
  3023   000E70                     l2573:
  3024                           
  3025                           ;dc_motor.c: 327:     if (count == 3){right_45(mL,mR,4,right_timer); stop(mL,mR);}
  3026   000E70  0E03               	movlw	3
  3027   000E72  1831               	xorwf	movement_return@count^0,w,c
  3028   000E74  1032               	iorwf	(movement_return@count+1)^0,w,c
  3029   000E76  A4D8               	btfss	status,2,c
  3030   000E78  EF40  F007         	goto	u1611
  3031   000E7C  EF42  F007         	goto	u1610
  3032   000E80                     u1611:
  3033   000E80  EF5E  F007         	goto	l2577
  3034   000E84                     u1610:
  3035   000E84  C02D  F01B         	movff	movement_return@mL,right_45@mL
  3036   000E88  C02E  F01C         	movff	movement_return@mL+1,right_45@mL+1
  3037   000E8C  C02F  F01D         	movff	movement_return@mR,right_45@mR
  3038   000E90  C030  F01E         	movff	movement_return@mR+1,right_45@mR+1
  3039   000E94  0E00               	movlw	0
  3040   000E96  6E20               	movwf	(right_45@count+1)^0,c
  3041   000E98  0E04               	movlw	4
  3042   000E9A  6E1F               	movwf	right_45@count^0,c
  3043   000E9C  C059  F021         	movff	_right_timer,right_45@right_timer
  3044   000EA0  C05A  F022         	movff	_right_timer+1,right_45@right_timer+1
  3045   000EA4  EC1E  F00A         	call	_right_45	;wreg free
  3046   000EA8  C02D  F016         	movff	movement_return@mL,stop@mL
  3047   000EAC  C02E  F017         	movff	movement_return@mL+1,stop@mL+1
  3048   000EB0  C02F  F018         	movff	movement_return@mR,stop@mR
  3049   000EB4  C030  F019         	movff	movement_return@mR+1,stop@mR+1
  3050   000EB8  EC2F  F00F         	call	_stop	;wreg free
  3051   000EBC                     l2577:
  3052                           
  3053                           ;dc_motor.c: 328:     if (count == 6){right_45(mL,mR,3,right_timer); stop(mL,mR);}
  3054   000EBC  0E06               	movlw	6
  3055   000EBE  1831               	xorwf	movement_return@count^0,w,c
  3056   000EC0  1032               	iorwf	(movement_return@count+1)^0,w,c
  3057   000EC2  A4D8               	btfss	status,2,c
  3058   000EC4  EF66  F007         	goto	u1621
  3059   000EC8  EF68  F007         	goto	u1620
  3060   000ECC                     u1621:
  3061   000ECC  EF84  F007         	goto	l2581
  3062   000ED0                     u1620:
  3063   000ED0  C02D  F01B         	movff	movement_return@mL,right_45@mL
  3064   000ED4  C02E  F01C         	movff	movement_return@mL+1,right_45@mL+1
  3065   000ED8  C02F  F01D         	movff	movement_return@mR,right_45@mR
  3066   000EDC  C030  F01E         	movff	movement_return@mR+1,right_45@mR+1
  3067   000EE0  0E00               	movlw	0
  3068   000EE2  6E20               	movwf	(right_45@count+1)^0,c
  3069   000EE4  0E03               	movlw	3
  3070   000EE6  6E1F               	movwf	right_45@count^0,c
  3071   000EE8  C059  F021         	movff	_right_timer,right_45@right_timer
  3072   000EEC  C05A  F022         	movff	_right_timer+1,right_45@right_timer+1
  3073   000EF0  EC1E  F00A         	call	_right_45	;wreg free
  3074   000EF4  C02D  F016         	movff	movement_return@mL,stop@mL
  3075   000EF8  C02E  F017         	movff	movement_return@mL+1,stop@mL+1
  3076   000EFC  C02F  F018         	movff	movement_return@mR,stop@mR
  3077   000F00  C030  F019         	movff	movement_return@mR+1,stop@mR+1
  3078   000F04  EC2F  F00F         	call	_stop	;wreg free
  3079   000F08                     l2581:
  3080                           
  3081                           ;dc_motor.c: 329:     if (count == 7){left_45(mL,mR,3,right_timer); stop(mL,mR);}
  3082   000F08  0E07               	movlw	7
  3083   000F0A  1831               	xorwf	movement_return@count^0,w,c
  3084   000F0C  1032               	iorwf	(movement_return@count+1)^0,w,c
  3085   000F0E  A4D8               	btfss	status,2,c
  3086   000F10  EF8C  F007         	goto	u1631
  3087   000F14  EF8E  F007         	goto	u1630
  3088   000F18                     u1631:
  3089   000F18  EFAA  F007         	goto	l2585
  3090   000F1C                     u1630:
  3091   000F1C  C02D  F01B         	movff	movement_return@mL,left_45@mL
  3092   000F20  C02E  F01C         	movff	movement_return@mL+1,left_45@mL+1
  3093   000F24  C02F  F01D         	movff	movement_return@mR,left_45@mR
  3094   000F28  C030  F01E         	movff	movement_return@mR+1,left_45@mR+1
  3095   000F2C  0E00               	movlw	0
  3096   000F2E  6E20               	movwf	(left_45@count+1)^0,c
  3097   000F30  0E03               	movlw	3
  3098   000F32  6E1F               	movwf	left_45@count^0,c
  3099   000F34  C059  F021         	movff	_right_timer,left_45@left_timer
  3100   000F38  C05A  F022         	movff	_right_timer+1,left_45@left_timer+1
  3101   000F3C  ECBC  F00A         	call	_left_45	;wreg free
  3102   000F40  C02D  F016         	movff	movement_return@mL,stop@mL
  3103   000F44  C02E  F017         	movff	movement_return@mL+1,stop@mL+1
  3104   000F48  C02F  F018         	movff	movement_return@mR,stop@mR
  3105   000F4C  C030  F019         	movff	movement_return@mR+1,stop@mR+1
  3106   000F50  EC2F  F00F         	call	_stop	;wreg free
  3107   000F54                     l2585:
  3108                           
  3109                           ;dc_motor.c: 331:     if (count == 9){reverse_yellow(mL,mR);}
  3110   000F54  0E09               	movlw	9
  3111   000F56  1831               	xorwf	movement_return@count^0,w,c
  3112   000F58  1032               	iorwf	(movement_return@count+1)^0,w,c
  3113   000F5A  A4D8               	btfss	status,2,c
  3114   000F5C  EFB2  F007         	goto	u1641
  3115   000F60  EFB4  F007         	goto	u1640
  3116   000F64                     u1641:
  3117   000F64  EFBE  F007         	goto	l2589
  3118   000F68                     u1640:
  3119   000F68  C02D  F027         	movff	movement_return@mL,reverse_yellow@mL
  3120   000F6C  C02E  F028         	movff	movement_return@mL+1,reverse_yellow@mL+1
  3121   000F70  C02F  F029         	movff	movement_return@mR,reverse_yellow@mR
  3122   000F74  C030  F02A         	movff	movement_return@mR+1,reverse_yellow@mR+1
  3123   000F78  ECE4  F00D         	call	_reverse_yellow	;wreg free
  3124   000F7C                     l2589:
  3125                           
  3126                           ;dc_motor.c: 332:     if (count == 10) {reverse_pink(mL,mR);}
  3127   000F7C  0E0A               	movlw	10
  3128   000F7E  1831               	xorwf	movement_return@count^0,w,c
  3129   000F80  1032               	iorwf	(movement_return@count+1)^0,w,c
  3130   000F82  A4D8               	btfss	status,2,c
  3131   000F84  EFC6  F007         	goto	u1651
  3132   000F88  EFC8  F007         	goto	u1650
  3133   000F8C                     u1651:
  3134   000F8C  EFD2  F007         	goto	l357
  3135   000F90                     u1650:
  3136   000F90  C02D  F027         	movff	movement_return@mL,reverse_pink@mL
  3137   000F94  C02E  F028         	movff	movement_return@mL+1,reverse_pink@mL+1
  3138   000F98  C02F  F029         	movff	movement_return@mR,reverse_pink@mR
  3139   000F9C  C030  F02A         	movff	movement_return@mR+1,reverse_pink@mR+1
  3140   000FA0  EC2D  F00E         	call	_reverse_pink	;wreg free
  3141   000FA4                     l357:
  3142   000FA4  0012               	return		;funcret
  3143   000FA6                     __end_of_movement_return:
  3144                           	callstack 0
  3145                           
  3146 ;; *************** function _reverse_yellow *****************
  3147 ;; Defined at:
  3148 ;;		line 269 in file "dc_motor.c"
  3149 ;; Parameters:    Size  Location     Type
  3150 ;;  mL              2   38[COMRAM] PTR struct DC_motor
  3151 ;;		 -> motorL(9), 
  3152 ;;  mR              2   40[COMRAM] PTR struct DC_motor
  3153 ;;		 -> motorR(9), 
  3154 ;; Auto vars:     Size  Location     Type
  3155 ;;		None
  3156 ;; Return value:  Size  Location     Type
  3157 ;;                  1    wreg      void 
  3158 ;; Registers used:
  3159 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3160 ;; Tracked objects:
  3161 ;;		On entry : 0/0
  3162 ;;		On exit  : 0/0
  3163 ;;		Unchanged: 0/0
  3164 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3165 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3166 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3167 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3168 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3169 ;;Total ram usage:        6 bytes
  3170 ;; Hardware stack levels used: 1
  3171 ;; Hardware stack levels required when called: 5
  3172 ;; This function calls:
  3173 ;;		_left_45
  3174 ;;		_reverse
  3175 ;;		_stop
  3176 ;; This function is called by:
  3177 ;;		_movement_return
  3178 ;; This function uses a non-reentrant model
  3179 ;;
  3180                           
  3181                           	psect	text17
  3182   001BC8                     __ptext17:
  3183                           	callstack 0
  3184   001BC8                     _reverse_yellow:
  3185                           	callstack 22
  3186   001BC8                     
  3187                           ;dc_motor.c: 271:     left_45(mL,mR,2,left_timer);
  3188   001BC8  C027  F01B         	movff	reverse_yellow@mL,left_45@mL
  3189   001BCC  C028  F01C         	movff	reverse_yellow@mL+1,left_45@mL+1
  3190   001BD0  C029  F01D         	movff	reverse_yellow@mR,left_45@mR
  3191   001BD4  C02A  F01E         	movff	reverse_yellow@mR+1,left_45@mR+1
  3192   001BD8  0E00               	movlw	0
  3193   001BDA  6E20               	movwf	(left_45@count+1)^0,c
  3194   001BDC  0E02               	movlw	2
  3195   001BDE  6E1F               	movwf	left_45@count^0,c
  3196   001BE0  C05B  F021         	movff	_left_timer,left_45@left_timer
  3197   001BE4  C05C  F022         	movff	_left_timer+1,left_45@left_timer+1
  3198   001BE8  ECBC  F00A         	call	_left_45	;wreg free
  3199                           
  3200                           ;dc_motor.c: 272:     stop(mL,mR);
  3201   001BEC  C027  F016         	movff	reverse_yellow@mL,stop@mL
  3202   001BF0  C028  F017         	movff	reverse_yellow@mL+1,stop@mL+1
  3203   001BF4  C029  F018         	movff	reverse_yellow@mR,stop@mR
  3204   001BF8  C02A  F019         	movff	reverse_yellow@mR+1,stop@mR+1
  3205   001BFC  EC2F  F00F         	call	_stop	;wreg free
  3206   001C00                     
  3207                           ;dc_motor.c: 273:     _delay((unsigned long)((200)*(64000000/4000.0)));
  3208   001C00  0E11               	movlw	17
  3209   001C02  6E2C               	movwf	(??_reverse_yellow+1)^0,c
  3210   001C04  0E3C               	movlw	60
  3211   001C06  6E2B               	movwf	??_reverse_yellow^0,c
  3212   001C08  0ECB               	movlw	203
  3213   001C0A                     u2647:
  3214   001C0A  2EE8               	decfsz	wreg,f,c
  3215   001C0C  D7FE               	bra	u2647
  3216   001C0E  2E2B               	decfsz	??_reverse_yellow^0,f,c
  3217   001C10  D7FC               	bra	u2647
  3218   001C12  2E2C               	decfsz	(??_reverse_yellow+1)^0,f,c
  3219   001C14  D7FA               	bra	u2647
  3220   001C16  F000               	nop	
  3221   001C18                     
  3222                           ;dc_motor.c: 275:      reverse(mL,mR);
  3223   001C18  C027  F01B         	movff	reverse_yellow@mL,reverse@mL
  3224   001C1C  C028  F01C         	movff	reverse_yellow@mL+1,reverse@mL+1
  3225   001C20  C029  F01D         	movff	reverse_yellow@mR,reverse@mR
  3226   001C24  C02A  F01E         	movff	reverse_yellow@mR+1,reverse@mR+1
  3227   001C28  EC6F  F00D         	call	_reverse	;wreg free
  3228                           
  3229                           ;dc_motor.c: 276:     _delay((unsigned long)((900)*(64000000/4000.0)));
  3230   001C2C  0E4A               	movlw	74
  3231   001C2E  6E2C               	movwf	(??_reverse_yellow+1)^0,c
  3232   001C30  0E0E               	movlw	14
  3233   001C32  6E2B               	movwf	??_reverse_yellow^0,c
  3234   001C34  0E19               	movlw	25
  3235   001C36                     u2657:
  3236   001C36  2EE8               	decfsz	wreg,f,c
  3237   001C38  D7FE               	bra	u2657
  3238   001C3A  2E2B               	decfsz	??_reverse_yellow^0,f,c
  3239   001C3C  D7FC               	bra	u2657
  3240   001C3E  2E2C               	decfsz	(??_reverse_yellow+1)^0,f,c
  3241   001C40  D7FA               	bra	u2657
  3242   001C42  F000               	nop	
  3243   001C44                     
  3244                           ;dc_motor.c: 277:     stop(mL,mR);
  3245   001C44  C027  F016         	movff	reverse_yellow@mL,stop@mL
  3246   001C48  C028  F017         	movff	reverse_yellow@mL+1,stop@mL+1
  3247   001C4C  C029  F018         	movff	reverse_yellow@mR,stop@mR
  3248   001C50  C02A  F019         	movff	reverse_yellow@mR+1,stop@mR+1
  3249   001C54  EC2F  F00F         	call	_stop	;wreg free
  3250   001C58  0012               	return		;funcret
  3251   001C5A                     __end_of_reverse_yellow:
  3252                           	callstack 0
  3253                           
  3254 ;; *************** function _reverse_pink *****************
  3255 ;; Defined at:
  3256 ;;		line 283 in file "dc_motor.c"
  3257 ;; Parameters:    Size  Location     Type
  3258 ;;  mL              2   38[COMRAM] PTR struct DC_motor
  3259 ;;		 -> motorL(9), 
  3260 ;;  mR              2   40[COMRAM] PTR struct DC_motor
  3261 ;;		 -> motorR(9), 
  3262 ;; Auto vars:     Size  Location     Type
  3263 ;;		None
  3264 ;; Return value:  Size  Location     Type
  3265 ;;                  1    wreg      void 
  3266 ;; Registers used:
  3267 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3268 ;; Tracked objects:
  3269 ;;		On entry : 0/0
  3270 ;;		On exit  : 0/0
  3271 ;;		Unchanged: 0/0
  3272 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3273 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3274 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3275 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3276 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3277 ;;Total ram usage:        6 bytes
  3278 ;; Hardware stack levels used: 1
  3279 ;; Hardware stack levels required when called: 5
  3280 ;; This function calls:
  3281 ;;		_reverse
  3282 ;;		_right_45
  3283 ;;		_stop
  3284 ;; This function is called by:
  3285 ;;		_movement_return
  3286 ;; This function uses a non-reentrant model
  3287 ;;
  3288                           
  3289                           	psect	text18
  3290   001C5A                     __ptext18:
  3291                           	callstack 0
  3292   001C5A                     _reverse_pink:
  3293                           	callstack 22
  3294   001C5A                     
  3295                           ;dc_motor.c: 285:     right_45(mL,mR,2,right_timer);
  3296   001C5A  C027  F01B         	movff	reverse_pink@mL,right_45@mL
  3297   001C5E  C028  F01C         	movff	reverse_pink@mL+1,right_45@mL+1
  3298   001C62  C029  F01D         	movff	reverse_pink@mR,right_45@mR
  3299   001C66  C02A  F01E         	movff	reverse_pink@mR+1,right_45@mR+1
  3300   001C6A  0E00               	movlw	0
  3301   001C6C  6E20               	movwf	(right_45@count+1)^0,c
  3302   001C6E  0E02               	movlw	2
  3303   001C70  6E1F               	movwf	right_45@count^0,c
  3304   001C72  C059  F021         	movff	_right_timer,right_45@right_timer
  3305   001C76  C05A  F022         	movff	_right_timer+1,right_45@right_timer+1
  3306   001C7A  EC1E  F00A         	call	_right_45	;wreg free
  3307                           
  3308                           ;dc_motor.c: 286:     stop(mL,mR);
  3309   001C7E  C027  F016         	movff	reverse_pink@mL,stop@mL
  3310   001C82  C028  F017         	movff	reverse_pink@mL+1,stop@mL+1
  3311   001C86  C029  F018         	movff	reverse_pink@mR,stop@mR
  3312   001C8A  C02A  F019         	movff	reverse_pink@mR+1,stop@mR+1
  3313   001C8E  EC2F  F00F         	call	_stop	;wreg free
  3314   001C92                     
  3315                           ;dc_motor.c: 287:     _delay((unsigned long)((200)*(64000000/4000.0)));
  3316   001C92  0E11               	movlw	17
  3317   001C94  6E2C               	movwf	(??_reverse_pink+1)^0,c
  3318   001C96  0E3C               	movlw	60
  3319   001C98  6E2B               	movwf	??_reverse_pink^0,c
  3320   001C9A  0ECB               	movlw	203
  3321   001C9C                     u2667:
  3322   001C9C  2EE8               	decfsz	wreg,f,c
  3323   001C9E  D7FE               	bra	u2667
  3324   001CA0  2E2B               	decfsz	??_reverse_pink^0,f,c
  3325   001CA2  D7FC               	bra	u2667
  3326   001CA4  2E2C               	decfsz	(??_reverse_pink+1)^0,f,c
  3327   001CA6  D7FA               	bra	u2667
  3328   001CA8  F000               	nop	
  3329   001CAA                     
  3330                           ;dc_motor.c: 289:     reverse(mL,mR);
  3331   001CAA  C027  F01B         	movff	reverse_pink@mL,reverse@mL
  3332   001CAE  C028  F01C         	movff	reverse_pink@mL+1,reverse@mL+1
  3333   001CB2  C029  F01D         	movff	reverse_pink@mR,reverse@mR
  3334   001CB6  C02A  F01E         	movff	reverse_pink@mR+1,reverse@mR+1
  3335   001CBA  EC6F  F00D         	call	_reverse	;wreg free
  3336                           
  3337                           ;dc_motor.c: 290:     _delay((unsigned long)((900)*(64000000/4000.0)));
  3338   001CBE  0E4A               	movlw	74
  3339   001CC0  6E2C               	movwf	(??_reverse_pink+1)^0,c
  3340   001CC2  0E0E               	movlw	14
  3341   001CC4  6E2B               	movwf	??_reverse_pink^0,c
  3342   001CC6  0E19               	movlw	25
  3343   001CC8                     u2677:
  3344   001CC8  2EE8               	decfsz	wreg,f,c
  3345   001CCA  D7FE               	bra	u2677
  3346   001CCC  2E2B               	decfsz	??_reverse_pink^0,f,c
  3347   001CCE  D7FC               	bra	u2677
  3348   001CD0  2E2C               	decfsz	(??_reverse_pink+1)^0,f,c
  3349   001CD2  D7FA               	bra	u2677
  3350   001CD4  F000               	nop	
  3351   001CD6                     
  3352                           ;dc_motor.c: 291:     stop(mL,mR);
  3353   001CD6  C027  F016         	movff	reverse_pink@mL,stop@mL
  3354   001CDA  C028  F017         	movff	reverse_pink@mL+1,stop@mL+1
  3355   001CDE  C029  F018         	movff	reverse_pink@mR,stop@mR
  3356   001CE2  C02A  F019         	movff	reverse_pink@mR+1,stop@mR+1
  3357   001CE6  EC2F  F00F         	call	_stop	;wreg free
  3358   001CEA  0012               	return		;funcret
  3359   001CEC                     __end_of_reverse_pink:
  3360                           	callstack 0
  3361                           
  3362 ;; *************** function _forward *****************
  3363 ;; Defined at:
  3364 ;;		line 124 in file "dc_motor.c"
  3365 ;; Parameters:    Size  Location     Type
  3366 ;;  mL              2   26[COMRAM] PTR struct DC_motor
  3367 ;;		 -> motorL(9), 
  3368 ;;  mR              2   28[COMRAM] PTR struct DC_motor
  3369 ;;		 -> motorR(9), 
  3370 ;; Auto vars:     Size  Location     Type
  3371 ;;		None
  3372 ;; Return value:  Size  Location     Type
  3373 ;;                  1    wreg      void 
  3374 ;; Registers used:
  3375 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3376 ;; Tracked objects:
  3377 ;;		On entry : 0/0
  3378 ;;		On exit  : 0/0
  3379 ;;		Unchanged: 0/0
  3380 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3381 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3382 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3383 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3384 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3385 ;;Total ram usage:        5 bytes
  3386 ;; Hardware stack levels used: 1
  3387 ;; Hardware stack levels required when called: 4
  3388 ;; This function calls:
  3389 ;;		_setMotorPWM
  3390 ;;		_stop
  3391 ;; This function is called by:
  3392 ;;		_buggy_color_response
  3393 ;;		_return_home
  3394 ;; This function uses a non-reentrant model
  3395 ;;
  3396                           
  3397                           	psect	text19
  3398   0019F4                     __ptext19:
  3399                           	callstack 0
  3400   0019F4                     _forward:
  3401                           	callstack 24
  3402   0019F4                     
  3403                           ;dc_motor.c: 124: void forward(DC_motor *mL, DC_motor *mR);dc_motor.c: 125: {;dc_motor.c
      +                          : 126:     stop(mL,mR);
  3404   0019F4  C01B  F016         	movff	forward@mL,stop@mL
  3405   0019F8  C01C  F017         	movff	forward@mL+1,stop@mL+1
  3406   0019FC  C01D  F018         	movff	forward@mR,stop@mR
  3407   001A00  C01E  F019         	movff	forward@mR+1,stop@mR+1
  3408   001A04  EC2F  F00F         	call	_stop	;wreg free
  3409   001A08                     
  3410                           ;dc_motor.c: 127:     mL-> direction = 1;
  3411   001A08  EE20 F001          	lfsr	2,1
  3412   001A0C  501B               	movf	forward@mL^0,w,c
  3413   001A0E  26D9               	addwf	fsr2l,f,c
  3414   001A10  501C               	movf	(forward@mL+1)^0,w,c
  3415   001A12  22DA               	addwfc	fsr2h,f,c
  3416   001A14  0E01               	movlw	1
  3417   001A16  6EDF               	movwf	indf2,c
  3418   001A18                     
  3419                           ;dc_motor.c: 128:     mR-> direction = 1;
  3420   001A18  EE20 F001          	lfsr	2,1
  3421   001A1C  501D               	movf	forward@mR^0,w,c
  3422   001A1E  26D9               	addwf	fsr2l,f,c
  3423   001A20  501E               	movf	(forward@mR+1)^0,w,c
  3424   001A22  22DA               	addwfc	fsr2h,f,c
  3425   001A24  0E01               	movlw	1
  3426   001A26  6EDF               	movwf	indf2,c
  3427   001A28                     
  3428                           ;dc_motor.c: 129:     LATDbits.LATD3 = 1;
  3429   001A28  867C               	bsf	124,3,c	;volatile
  3430                           
  3431                           ;dc_motor.c: 130:     setMotorPWM(mR);
  3432   001A2A  C01D  F010         	movff	forward@mR,setMotorPWM@m
  3433   001A2E  C01E  F011         	movff	forward@mR+1,setMotorPWM@m+1
  3434   001A32  EC68  F009         	call	_setMotorPWM	;wreg free
  3435                           
  3436                           ;dc_motor.c: 131:     setMotorPWM(mL);
  3437   001A36  C01B  F010         	movff	forward@mL,setMotorPWM@m
  3438   001A3A  C01C  F011         	movff	forward@mL+1,setMotorPWM@m+1
  3439   001A3E  EC68  F009         	call	_setMotorPWM	;wreg free
  3440                           
  3441                           ;dc_motor.c: 132:     while ((mL->power <= 50) || (mR->power <= 55)){
  3442   001A42  EF55  F00D         	goto	l283
  3443   001A46                     l2521:
  3444                           
  3445                           ;dc_motor.c: 133:         if (mL->power <= 50){mL->power += 1;}
  3446   001A46  C01B  FFD9         	movff	forward@mL,fsr2l
  3447   001A4A  C01C  FFDA         	movff	forward@mL+1,fsr2h
  3448   001A4E  0E33               	movlw	51
  3449   001A50  60DF               	cpfslt	indf2,c
  3450   001A52  EF2D  F00D         	goto	u1531
  3451   001A56  EF2F  F00D         	goto	u1530
  3452   001A5A                     u1531:
  3453   001A5A  EF34  F00D         	goto	l2525
  3454   001A5E                     u1530:
  3455   001A5E  C01B  FFD9         	movff	forward@mL,fsr2l
  3456   001A62  C01C  FFDA         	movff	forward@mL+1,fsr2h
  3457   001A66  2ADF               	incf	indf2,f,c
  3458   001A68                     l2525:
  3459                           
  3460                           ;dc_motor.c: 134:         if (mR->power <= 55){mR->power += 1;}
  3461   001A68  C01D  FFD9         	movff	forward@mR,fsr2l
  3462   001A6C  C01E  FFDA         	movff	forward@mR+1,fsr2h
  3463   001A70  0E38               	movlw	56
  3464   001A72  60DF               	cpfslt	indf2,c
  3465   001A74  EF3E  F00D         	goto	u1541
  3466   001A78  EF40  F00D         	goto	u1540
  3467   001A7C                     u1541:
  3468   001A7C  EF45  F00D         	goto	l2529
  3469   001A80                     u1540:
  3470   001A80  C01D  FFD9         	movff	forward@mR,fsr2l
  3471   001A84  C01E  FFDA         	movff	forward@mR+1,fsr2h
  3472   001A88  2ADF               	incf	indf2,f,c
  3473   001A8A                     l2529:
  3474                           
  3475                           ;dc_motor.c: 135:         setMotorPWM(mL);
  3476   001A8A  C01B  F010         	movff	forward@mL,setMotorPWM@m
  3477   001A8E  C01C  F011         	movff	forward@mL+1,setMotorPWM@m+1
  3478   001A92  EC68  F009         	call	_setMotorPWM	;wreg free
  3479   001A96                     
  3480                           ;dc_motor.c: 136:         setMotorPWM(mR);
  3481   001A96  C01D  F010         	movff	forward@mR,setMotorPWM@m
  3482   001A9A  C01E  F011         	movff	forward@mR+1,setMotorPWM@m+1
  3483   001A9E  EC68  F009         	call	_setMotorPWM	;wreg free
  3484   001AA2                     
  3485                           ;dc_motor.c: 137:         _delay((unsigned long)((5)*(64000000/4000000.0)));
  3486   001AA2  0E1A               	movlw	26
  3487   001AA4                     u2687:
  3488   001AA4  2EE8               	decfsz	wreg,f,c
  3489   001AA6  D7FE               	bra	u2687
  3490   001AA8  D000               	nop2	
  3491   001AAA                     l283:
  3492                           
  3493                           ;dc_motor.c: 132:     while ((mL->power <= 50) || (mR->power <= 55)){
  3494   001AAA  C01B  FFD9         	movff	forward@mL,fsr2l
  3495   001AAE  C01C  FFDA         	movff	forward@mL+1,fsr2h
  3496   001AB2  0E32               	movlw	50
  3497   001AB4  64DF               	cpfsgt	indf2,c
  3498   001AB6  EF5F  F00D         	goto	u1551
  3499   001ABA  EF61  F00D         	goto	u1550
  3500   001ABE                     u1551:
  3501   001ABE  EF23  F00D         	goto	l2521
  3502   001AC2                     u1550:
  3503   001AC2  C01D  FFD9         	movff	forward@mR,fsr2l
  3504   001AC6  C01E  FFDA         	movff	forward@mR+1,fsr2h
  3505   001ACA  0E37               	movlw	55
  3506   001ACC  64DF               	cpfsgt	indf2,c
  3507   001ACE  EF6B  F00D         	goto	u1561
  3508   001AD2  EF6D  F00D         	goto	u1560
  3509   001AD6                     u1561:
  3510   001AD6  EF23  F00D         	goto	l2521
  3511   001ADA                     u1560:
  3512   001ADA                     
  3513                           ;dc_motor.c: 139:     LATDbits.LATD3 = 0;
  3514   001ADA  967C               	bcf	124,3,c	;volatile
  3515   001ADC  0012               	return		;funcret
  3516   001ADE                     __end_of_forward:
  3517                           	callstack 0
  3518                           
  3519 ;; *************** function _delay_ms_func *****************
  3520 ;; Defined at:
  3521 ;;		line 275 in file "color.c"
  3522 ;; Parameters:    Size  Location     Type
  3523 ;;  time            2    2[COMRAM] unsigned int 
  3524 ;; Auto vars:     Size  Location     Type
  3525 ;;  i               2    6[COMRAM] unsigned int 
  3526 ;; Return value:  Size  Location     Type
  3527 ;;                  1    wreg      void 
  3528 ;; Registers used:
  3529 ;;		wreg, status,2, status,0
  3530 ;; Tracked objects:
  3531 ;;		On entry : 0/0
  3532 ;;		On exit  : 0/0
  3533 ;;		Unchanged: 0/0
  3534 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3535 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3536 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3537 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3538 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3539 ;;Total ram usage:        6 bytes
  3540 ;; Hardware stack levels used: 1
  3541 ;; Hardware stack levels required when called: 1
  3542 ;; This function calls:
  3543 ;;		Nothing
  3544 ;; This function is called by:
  3545 ;;		_return_home
  3546 ;; This function uses a non-reentrant model
  3547 ;;
  3548                           
  3549                           	psect	text20
  3550   002132                     __ptext20:
  3551                           	callstack 0
  3552   002132                     _delay_ms_func:
  3553                           	callstack 27
  3554   002132                     
  3555                           ;color.c: 276:     unsigned int i;;color.c: 277:     for (i=0; i < time; i++) {_delay((u
      +                          nsigned long)((131)*(64000000/4000.0)));}
  3556   002132  0E00               	movlw	0
  3557   002134  6E08               	movwf	(delay_ms_func@i+1)^0,c
  3558   002136  0E00               	movlw	0
  3559   002138  6E07               	movwf	delay_ms_func@i^0,c
  3560   00213A  EFAD  F010         	goto	l155
  3561   00213E                     l2595:
  3562   00213E  0E0B               	movlw	11
  3563   002140  6E06               	movwf	(??_delay_ms_func+1)^0,c
  3564   002142  0EA3               	movlw	163
  3565   002144  6E05               	movwf	??_delay_ms_func^0,c
  3566   002146  0E0A               	movlw	10
  3567   002148                     u2697:
  3568   002148  2EE8               	decfsz	wreg,f,c
  3569   00214A  D7FE               	bra	u2697
  3570   00214C  2E05               	decfsz	??_delay_ms_func^0,f,c
  3571   00214E  D7FC               	bra	u2697
  3572   002150  2E06               	decfsz	(??_delay_ms_func+1)^0,f,c
  3573   002152  D7FA               	bra	u2697
  3574   002154  D000               	nop2	
  3575   002156  4A07               	infsnz	delay_ms_func@i^0,f,c
  3576   002158  2A08               	incf	(delay_ms_func@i+1)^0,f,c
  3577   00215A                     l155:
  3578   00215A  5003               	movf	delay_ms_func@time^0,w,c
  3579   00215C  5C07               	subwf	delay_ms_func@i^0,w,c
  3580   00215E  5004               	movf	(delay_ms_func@time+1)^0,w,c
  3581   002160  5808               	subwfb	(delay_ms_func@i+1)^0,w,c
  3582   002162  A0D8               	btfss	status,0,c
  3583   002164  EFB6  F010         	goto	u1661
  3584   002168  EFB8  F010         	goto	u1660
  3585   00216C                     u1661:
  3586   00216C  EF9F  F010         	goto	l2595
  3587   002170                     u1660:
  3588   002170  0012               	return		;funcret
  3589   002172                     __end_of_delay_ms_func:
  3590                           	callstack 0
  3591                           
  3592 ;; *************** function _movement *****************
  3593 ;; Defined at:
  3594 ;;		line 299 in file "dc_motor.c"
  3595 ;; Parameters:    Size  Location     Type
  3596 ;;  mL              2   38[COMRAM] PTR struct DC_motor
  3597 ;;		 -> motorL(9), 
  3598 ;;  mR              2   40[COMRAM] PTR struct DC_motor
  3599 ;;		 -> motorR(9), 
  3600 ;;  count           2   42[COMRAM] int 
  3601 ;; Auto vars:     Size  Location     Type
  3602 ;;		None
  3603 ;; Return value:  Size  Location     Type
  3604 ;;                  1    wreg      void 
  3605 ;; Registers used:
  3606 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3607 ;; Tracked objects:
  3608 ;;		On entry : 0/0
  3609 ;;		On exit  : 0/0
  3610 ;;		Unchanged: 0/0
  3611 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3612 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3613 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3614 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3615 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3616 ;;Total ram usage:        8 bytes
  3617 ;; Hardware stack levels used: 1
  3618 ;; Hardware stack levels required when called: 5
  3619 ;; This function calls:
  3620 ;;		_left_45
  3621 ;;		_reverse
  3622 ;;		_right_45
  3623 ;;		_space
  3624 ;;		_stop
  3625 ;; This function is called by:
  3626 ;;		_buggy_color_response
  3627 ;; This function uses a non-reentrant model
  3628 ;;
  3629                           
  3630                           	psect	text21
  3631   000ABE                     __ptext21:
  3632                           	callstack 0
  3633   000ABE                     _movement:
  3634                           	callstack 24
  3635   000ABE                     
  3636                           ;dc_motor.c: 299: void movement(DC_motor *mL, DC_motor *mR, int count);dc_motor.c: 300: 
      +                          {;dc_motor.c: 301:     space(mL,mR);
  3637   000ABE  C027  F01B         	movff	movement@mL,space@mL
  3638   000AC2  C028  F01C         	movff	movement@mL+1,space@mL+1
  3639   000AC6  C029  F01D         	movff	movement@mR,space@mR
  3640   000ACA  C02A  F01E         	movff	movement@mR+1,space@mR+1
  3641   000ACE  EC79  F00C         	call	_space	;wreg free
  3642   000AD2                     
  3643                           ;dc_motor.c: 302:     _delay((unsigned long)((500)*(64000000/4000.0)));
  3644   000AD2  0E29               	movlw	41
  3645   000AD4  6E2E               	movwf	(??_movement+1)^0,c
  3646   000AD6  0E96               	movlw	150
  3647   000AD8  6E2D               	movwf	??_movement^0,c
  3648   000ADA  0E7F               	movlw	127
  3649   000ADC                     u2707:
  3650   000ADC  2EE8               	decfsz	wreg,f,c
  3651   000ADE  D7FE               	bra	u2707
  3652   000AE0  2E2D               	decfsz	??_movement^0,f,c
  3653   000AE2  D7FC               	bra	u2707
  3654   000AE4  2E2E               	decfsz	(??_movement+1)^0,f,c
  3655   000AE6  D7FA               	bra	u2707
  3656   000AE8  F000               	nop	
  3657   000AEA                     
  3658                           ;dc_motor.c: 303:     stop(mL,mR);
  3659   000AEA  C027  F016         	movff	movement@mL,stop@mL
  3660   000AEE  C028  F017         	movff	movement@mL+1,stop@mL+1
  3661   000AF2  C029  F018         	movff	movement@mR,stop@mR
  3662   000AF6  C02A  F019         	movff	movement@mR+1,stop@mR+1
  3663   000AFA  EC2F  F00F         	call	_stop	;wreg free
  3664                           
  3665                           ;dc_motor.c: 304:     _delay((unsigned long)((500)*(64000000/4000.0)));
  3666   000AFE  0E29               	movlw	41
  3667   000B00  6E2E               	movwf	(??_movement+1)^0,c
  3668   000B02  0E96               	movlw	150
  3669   000B04  6E2D               	movwf	??_movement^0,c
  3670   000B06  0E7F               	movlw	127
  3671   000B08                     u2717:
  3672   000B08  2EE8               	decfsz	wreg,f,c
  3673   000B0A  D7FE               	bra	u2717
  3674   000B0C  2E2D               	decfsz	??_movement^0,f,c
  3675   000B0E  D7FC               	bra	u2717
  3676   000B10  2E2E               	decfsz	(??_movement+1)^0,f,c
  3677   000B12  D7FA               	bra	u2717
  3678   000B14  F000               	nop	
  3679   000B16                     
  3680                           ;dc_motor.c: 306:     if (count == 1){right_45(mL,mR,2,right_timer); stop(mL,mR);}
  3681   000B16  042B               	decf	movement@count^0,w,c
  3682   000B18  102C               	iorwf	(movement@count+1)^0,w,c
  3683   000B1A  A4D8               	btfss	status,2,c
  3684   000B1C  EF92  F005         	goto	u2001
  3685   000B20  EF94  F005         	goto	u2000
  3686   000B24                     u2001:
  3687   000B24  EFB0  F005         	goto	l2805
  3688   000B28                     u2000:
  3689   000B28  C027  F01B         	movff	movement@mL,right_45@mL
  3690   000B2C  C028  F01C         	movff	movement@mL+1,right_45@mL+1
  3691   000B30  C029  F01D         	movff	movement@mR,right_45@mR
  3692   000B34  C02A  F01E         	movff	movement@mR+1,right_45@mR+1
  3693   000B38  0E00               	movlw	0
  3694   000B3A  6E20               	movwf	(right_45@count+1)^0,c
  3695   000B3C  0E02               	movlw	2
  3696   000B3E  6E1F               	movwf	right_45@count^0,c
  3697   000B40  C059  F021         	movff	_right_timer,right_45@right_timer
  3698   000B44  C05A  F022         	movff	_right_timer+1,right_45@right_timer+1
  3699   000B48  EC1E  F00A         	call	_right_45	;wreg free
  3700   000B4C  C027  F016         	movff	movement@mL,stop@mL
  3701   000B50  C028  F017         	movff	movement@mL+1,stop@mL+1
  3702   000B54  C029  F018         	movff	movement@mR,stop@mR
  3703   000B58  C02A  F019         	movff	movement@mR+1,stop@mR+1
  3704   000B5C  EC2F  F00F         	call	_stop	;wreg free
  3705   000B60                     l2805:
  3706                           
  3707                           ;dc_motor.c: 307:     if (count == 2){left_45(mL,mR,2,left_timer); stop(mL,mR);}
  3708   000B60  0E02               	movlw	2
  3709   000B62  182B               	xorwf	movement@count^0,w,c
  3710   000B64  102C               	iorwf	(movement@count+1)^0,w,c
  3711   000B66  A4D8               	btfss	status,2,c
  3712   000B68  EFB8  F005         	goto	u2011
  3713   000B6C  EFBA  F005         	goto	u2010
  3714   000B70                     u2011:
  3715   000B70  EFD6  F005         	goto	l2809
  3716   000B74                     u2010:
  3717   000B74  C027  F01B         	movff	movement@mL,left_45@mL
  3718   000B78  C028  F01C         	movff	movement@mL+1,left_45@mL+1
  3719   000B7C  C029  F01D         	movff	movement@mR,left_45@mR
  3720   000B80  C02A  F01E         	movff	movement@mR+1,left_45@mR+1
  3721   000B84  0E00               	movlw	0
  3722   000B86  6E20               	movwf	(left_45@count+1)^0,c
  3723   000B88  0E02               	movlw	2
  3724   000B8A  6E1F               	movwf	left_45@count^0,c
  3725   000B8C  C05B  F021         	movff	_left_timer,left_45@left_timer
  3726   000B90  C05C  F022         	movff	_left_timer+1,left_45@left_timer+1
  3727   000B94  ECBC  F00A         	call	_left_45	;wreg free
  3728   000B98  C027  F016         	movff	movement@mL,stop@mL
  3729   000B9C  C028  F017         	movff	movement@mL+1,stop@mL+1
  3730   000BA0  C029  F018         	movff	movement@mR,stop@mR
  3731   000BA4  C02A  F019         	movff	movement@mR+1,stop@mR+1
  3732   000BA8  EC2F  F00F         	call	_stop	;wreg free
  3733   000BAC                     l2809:
  3734                           
  3735                           ;dc_motor.c: 308:     if (count == 3){right_45(mL,mR,4,right_timer); stop(mL,mR);}
  3736   000BAC  0E03               	movlw	3
  3737   000BAE  182B               	xorwf	movement@count^0,w,c
  3738   000BB0  102C               	iorwf	(movement@count+1)^0,w,c
  3739   000BB2  A4D8               	btfss	status,2,c
  3740   000BB4  EFDE  F005         	goto	u2021
  3741   000BB8  EFE0  F005         	goto	u2020
  3742   000BBC                     u2021:
  3743   000BBC  EFFC  F005         	goto	l2813
  3744   000BC0                     u2020:
  3745   000BC0  C027  F01B         	movff	movement@mL,right_45@mL
  3746   000BC4  C028  F01C         	movff	movement@mL+1,right_45@mL+1
  3747   000BC8  C029  F01D         	movff	movement@mR,right_45@mR
  3748   000BCC  C02A  F01E         	movff	movement@mR+1,right_45@mR+1
  3749   000BD0  0E00               	movlw	0
  3750   000BD2  6E20               	movwf	(right_45@count+1)^0,c
  3751   000BD4  0E04               	movlw	4
  3752   000BD6  6E1F               	movwf	right_45@count^0,c
  3753   000BD8  C059  F021         	movff	_right_timer,right_45@right_timer
  3754   000BDC  C05A  F022         	movff	_right_timer+1,right_45@right_timer+1
  3755   000BE0  EC1E  F00A         	call	_right_45	;wreg free
  3756   000BE4  C027  F016         	movff	movement@mL,stop@mL
  3757   000BE8  C028  F017         	movff	movement@mL+1,stop@mL+1
  3758   000BEC  C029  F018         	movff	movement@mR,stop@mR
  3759   000BF0  C02A  F019         	movff	movement@mR+1,stop@mR+1
  3760   000BF4  EC2F  F00F         	call	_stop	;wreg free
  3761   000BF8                     l2813:
  3762                           
  3763                           ;dc_motor.c: 309:     if (count == 4){reverse(mL,mR); _delay((unsigned long)((900)*(6400
      +                          0000/4000.0)));;stop(mL,mR);_delay((unsigned long)((500)*(64000000/4000.0)));right_45(mL
      +                          ,mR,2,right_timer); stop(mL,mR);}
  3764   000BF8  0E04               	movlw	4
  3765   000BFA  182B               	xorwf	movement@count^0,w,c
  3766   000BFC  102C               	iorwf	(movement@count+1)^0,w,c
  3767   000BFE  A4D8               	btfss	status,2,c
  3768   000C00  EF04  F006         	goto	u2031
  3769   000C04  EF06  F006         	goto	u2030
  3770   000C08                     u2031:
  3771   000C08  EF4E  F006         	goto	l2825
  3772   000C0C                     u2030:
  3773   000C0C  C027  F01B         	movff	movement@mL,reverse@mL
  3774   000C10  C028  F01C         	movff	movement@mL+1,reverse@mL+1
  3775   000C14  C029  F01D         	movff	movement@mR,reverse@mR
  3776   000C18  C02A  F01E         	movff	movement@mR+1,reverse@mR+1
  3777   000C1C  EC6F  F00D         	call	_reverse	;wreg free
  3778   000C20  0E4A               	movlw	74
  3779   000C22  6E2E               	movwf	(??_movement+1)^0,c
  3780   000C24  0E0E               	movlw	14
  3781   000C26  6E2D               	movwf	??_movement^0,c
  3782   000C28  0E19               	movlw	25
  3783   000C2A                     u2727:
  3784   000C2A  2EE8               	decfsz	wreg,f,c
  3785   000C2C  D7FE               	bra	u2727
  3786   000C2E  2E2D               	decfsz	??_movement^0,f,c
  3787   000C30  D7FC               	bra	u2727
  3788   000C32  2E2E               	decfsz	(??_movement+1)^0,f,c
  3789   000C34  D7FA               	bra	u2727
  3790   000C36  F000               	nop	
  3791   000C38  C027  F016         	movff	movement@mL,stop@mL
  3792   000C3C  C028  F017         	movff	movement@mL+1,stop@mL+1
  3793   000C40  C029  F018         	movff	movement@mR,stop@mR
  3794   000C44  C02A  F019         	movff	movement@mR+1,stop@mR+1
  3795   000C48  EC2F  F00F         	call	_stop	;wreg free
  3796   000C4C  0E29               	movlw	41
  3797   000C4E  6E2E               	movwf	(??_movement+1)^0,c
  3798   000C50  0E96               	movlw	150
  3799   000C52  6E2D               	movwf	??_movement^0,c
  3800   000C54  0E7F               	movlw	127
  3801   000C56                     u2737:
  3802   000C56  2EE8               	decfsz	wreg,f,c
  3803   000C58  D7FE               	bra	u2737
  3804   000C5A  2E2D               	decfsz	??_movement^0,f,c
  3805   000C5C  D7FC               	bra	u2737
  3806   000C5E  2E2E               	decfsz	(??_movement+1)^0,f,c
  3807   000C60  D7FA               	bra	u2737
  3808   000C62  F000               	nop	
  3809   000C64  C027  F01B         	movff	movement@mL,right_45@mL
  3810   000C68  C028  F01C         	movff	movement@mL+1,right_45@mL+1
  3811   000C6C  C029  F01D         	movff	movement@mR,right_45@mR
  3812   000C70  C02A  F01E         	movff	movement@mR+1,right_45@mR+1
  3813   000C74  0E00               	movlw	0
  3814   000C76  6E20               	movwf	(right_45@count+1)^0,c
  3815   000C78  0E02               	movlw	2
  3816   000C7A  6E1F               	movwf	right_45@count^0,c
  3817   000C7C  C059  F021         	movff	_right_timer,right_45@right_timer
  3818   000C80  C05A  F022         	movff	_right_timer+1,right_45@right_timer+1
  3819   000C84  EC1E  F00A         	call	_right_45	;wreg free
  3820   000C88  C027  F016         	movff	movement@mL,stop@mL
  3821   000C8C  C028  F017         	movff	movement@mL+1,stop@mL+1
  3822   000C90  C029  F018         	movff	movement@mR,stop@mR
  3823   000C94  C02A  F019         	movff	movement@mR+1,stop@mR+1
  3824   000C98  EC2F  F00F         	call	_stop	;wreg free
  3825   000C9C                     l2825:
  3826                           
  3827                           ;dc_motor.c: 310:     if (count == 5){reverse(mL,mR); _delay((unsigned long)((900)*(6400
      +                          0000/4000.0)));;stop(mL,mR);_delay((unsigned long)((500)*(64000000/4000.0)));left_45(mL,
      +                          mR,2,left_timer); stop(mL,mR);}
  3828   000C9C  0E05               	movlw	5
  3829   000C9E  182B               	xorwf	movement@count^0,w,c
  3830   000CA0  102C               	iorwf	(movement@count+1)^0,w,c
  3831   000CA2  A4D8               	btfss	status,2,c
  3832   000CA4  EF56  F006         	goto	u2041
  3833   000CA8  EF58  F006         	goto	u2040
  3834   000CAC                     u2041:
  3835   000CAC  EFA0  F006         	goto	l2837
  3836   000CB0                     u2040:
  3837   000CB0  C027  F01B         	movff	movement@mL,reverse@mL
  3838   000CB4  C028  F01C         	movff	movement@mL+1,reverse@mL+1
  3839   000CB8  C029  F01D         	movff	movement@mR,reverse@mR
  3840   000CBC  C02A  F01E         	movff	movement@mR+1,reverse@mR+1
  3841   000CC0  EC6F  F00D         	call	_reverse	;wreg free
  3842   000CC4  0E4A               	movlw	74
  3843   000CC6  6E2E               	movwf	(??_movement+1)^0,c
  3844   000CC8  0E0E               	movlw	14
  3845   000CCA  6E2D               	movwf	??_movement^0,c
  3846   000CCC  0E19               	movlw	25
  3847   000CCE                     u2747:
  3848   000CCE  2EE8               	decfsz	wreg,f,c
  3849   000CD0  D7FE               	bra	u2747
  3850   000CD2  2E2D               	decfsz	??_movement^0,f,c
  3851   000CD4  D7FC               	bra	u2747
  3852   000CD6  2E2E               	decfsz	(??_movement+1)^0,f,c
  3853   000CD8  D7FA               	bra	u2747
  3854   000CDA  F000               	nop	
  3855   000CDC  C027  F016         	movff	movement@mL,stop@mL
  3856   000CE0  C028  F017         	movff	movement@mL+1,stop@mL+1
  3857   000CE4  C029  F018         	movff	movement@mR,stop@mR
  3858   000CE8  C02A  F019         	movff	movement@mR+1,stop@mR+1
  3859   000CEC  EC2F  F00F         	call	_stop	;wreg free
  3860   000CF0  0E29               	movlw	41
  3861   000CF2  6E2E               	movwf	(??_movement+1)^0,c
  3862   000CF4  0E96               	movlw	150
  3863   000CF6  6E2D               	movwf	??_movement^0,c
  3864   000CF8  0E7F               	movlw	127
  3865   000CFA                     u2757:
  3866   000CFA  2EE8               	decfsz	wreg,f,c
  3867   000CFC  D7FE               	bra	u2757
  3868   000CFE  2E2D               	decfsz	??_movement^0,f,c
  3869   000D00  D7FC               	bra	u2757
  3870   000D02  2E2E               	decfsz	(??_movement+1)^0,f,c
  3871   000D04  D7FA               	bra	u2757
  3872   000D06  F000               	nop	
  3873   000D08  C027  F01B         	movff	movement@mL,left_45@mL
  3874   000D0C  C028  F01C         	movff	movement@mL+1,left_45@mL+1
  3875   000D10  C029  F01D         	movff	movement@mR,left_45@mR
  3876   000D14  C02A  F01E         	movff	movement@mR+1,left_45@mR+1
  3877   000D18  0E00               	movlw	0
  3878   000D1A  6E20               	movwf	(left_45@count+1)^0,c
  3879   000D1C  0E02               	movlw	2
  3880   000D1E  6E1F               	movwf	left_45@count^0,c
  3881   000D20  C05B  F021         	movff	_left_timer,left_45@left_timer
  3882   000D24  C05C  F022         	movff	_left_timer+1,left_45@left_timer+1
  3883   000D28  ECBC  F00A         	call	_left_45	;wreg free
  3884   000D2C  C027  F016         	movff	movement@mL,stop@mL
  3885   000D30  C028  F017         	movff	movement@mL+1,stop@mL+1
  3886   000D34  C029  F018         	movff	movement@mR,stop@mR
  3887   000D38  C02A  F019         	movff	movement@mR+1,stop@mR+1
  3888   000D3C  EC2F  F00F         	call	_stop	;wreg free
  3889   000D40                     l2837:
  3890                           
  3891                           ;dc_motor.c: 311:     if (count == 6){right_45(mL,mR,3,right_timer); stop(mL,mR);}
  3892   000D40  0E06               	movlw	6
  3893   000D42  182B               	xorwf	movement@count^0,w,c
  3894   000D44  102C               	iorwf	(movement@count+1)^0,w,c
  3895   000D46  A4D8               	btfss	status,2,c
  3896   000D48  EFA8  F006         	goto	u2051
  3897   000D4C  EFAA  F006         	goto	u2050
  3898   000D50                     u2051:
  3899   000D50  EFC6  F006         	goto	l2841
  3900   000D54                     u2050:
  3901   000D54  C027  F01B         	movff	movement@mL,right_45@mL
  3902   000D58  C028  F01C         	movff	movement@mL+1,right_45@mL+1
  3903   000D5C  C029  F01D         	movff	movement@mR,right_45@mR
  3904   000D60  C02A  F01E         	movff	movement@mR+1,right_45@mR+1
  3905   000D64  0E00               	movlw	0
  3906   000D66  6E20               	movwf	(right_45@count+1)^0,c
  3907   000D68  0E03               	movlw	3
  3908   000D6A  6E1F               	movwf	right_45@count^0,c
  3909   000D6C  C059  F021         	movff	_right_timer,right_45@right_timer
  3910   000D70  C05A  F022         	movff	_right_timer+1,right_45@right_timer+1
  3911   000D74  EC1E  F00A         	call	_right_45	;wreg free
  3912   000D78  C027  F016         	movff	movement@mL,stop@mL
  3913   000D7C  C028  F017         	movff	movement@mL+1,stop@mL+1
  3914   000D80  C029  F018         	movff	movement@mR,stop@mR
  3915   000D84  C02A  F019         	movff	movement@mR+1,stop@mR+1
  3916   000D88  EC2F  F00F         	call	_stop	;wreg free
  3917   000D8C                     l2841:
  3918                           
  3919                           ;dc_motor.c: 312:     if (count == 7){left_45(mL,mR,3,left_timer); stop(mL,mR);}
  3920   000D8C  0E07               	movlw	7
  3921   000D8E  182B               	xorwf	movement@count^0,w,c
  3922   000D90  102C               	iorwf	(movement@count+1)^0,w,c
  3923   000D92  A4D8               	btfss	status,2,c
  3924   000D94  EFCE  F006         	goto	u2061
  3925   000D98  EFD0  F006         	goto	u2060
  3926   000D9C                     u2061:
  3927   000D9C  EFEC  F006         	goto	l347
  3928   000DA0                     u2060:
  3929   000DA0  C027  F01B         	movff	movement@mL,left_45@mL
  3930   000DA4  C028  F01C         	movff	movement@mL+1,left_45@mL+1
  3931   000DA8  C029  F01D         	movff	movement@mR,left_45@mR
  3932   000DAC  C02A  F01E         	movff	movement@mR+1,left_45@mR+1
  3933   000DB0  0E00               	movlw	0
  3934   000DB2  6E20               	movwf	(left_45@count+1)^0,c
  3935   000DB4  0E03               	movlw	3
  3936   000DB6  6E1F               	movwf	left_45@count^0,c
  3937   000DB8  C05B  F021         	movff	_left_timer,left_45@left_timer
  3938   000DBC  C05C  F022         	movff	_left_timer+1,left_45@left_timer+1
  3939   000DC0  ECBC  F00A         	call	_left_45	;wreg free
  3940   000DC4  C027  F016         	movff	movement@mL,stop@mL
  3941   000DC8  C028  F017         	movff	movement@mL+1,stop@mL+1
  3942   000DCC  C029  F018         	movff	movement@mR,stop@mR
  3943   000DD0  C02A  F019         	movff	movement@mR+1,stop@mR+1
  3944   000DD4  EC2F  F00F         	call	_stop	;wreg free
  3945   000DD8                     l347:
  3946   000DD8  0012               	return		;funcret
  3947   000DDA                     __end_of_movement:
  3948                           	callstack 0
  3949                           
  3950 ;; *************** function _space *****************
  3951 ;; Defined at:
  3952 ;;		line 244 in file "dc_motor.c"
  3953 ;; Parameters:    Size  Location     Type
  3954 ;;  mL              2   26[COMRAM] PTR struct DC_motor
  3955 ;;		 -> motorL(9), 
  3956 ;;  mR              2   28[COMRAM] PTR struct DC_motor
  3957 ;;		 -> motorR(9), 
  3958 ;; Auto vars:     Size  Location     Type
  3959 ;;		None
  3960 ;; Return value:  Size  Location     Type
  3961 ;;                  1    wreg      void 
  3962 ;; Registers used:
  3963 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3964 ;; Tracked objects:
  3965 ;;		On entry : 0/0
  3966 ;;		On exit  : 0/0
  3967 ;;		Unchanged: 0/0
  3968 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3969 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3970 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3971 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3972 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3973 ;;Total ram usage:        6 bytes
  3974 ;; Hardware stack levels used: 1
  3975 ;; Hardware stack levels required when called: 4
  3976 ;; This function calls:
  3977 ;;		_setMotorPWM
  3978 ;;		_stop
  3979 ;; This function is called by:
  3980 ;;		_buggy_color_response
  3981 ;;		_movement
  3982 ;; This function uses a non-reentrant model
  3983 ;;
  3984                           
  3985                           	psect	text22
  3986   0018F2                     __ptext22:
  3987                           	callstack 0
  3988   0018F2                     _space:
  3989                           	callstack 25
  3990   0018F2                     
  3991                           ;dc_motor.c: 244: void space(DC_motor *mL, DC_motor *mR);dc_motor.c: 245: {;dc_motor.c: 
      +                          246:     stop(mL,mR);
  3992   0018F2  C01B  F016         	movff	space@mL,stop@mL
  3993   0018F6  C01C  F017         	movff	space@mL+1,stop@mL+1
  3994   0018FA  C01D  F018         	movff	space@mR,stop@mR
  3995   0018FE  C01E  F019         	movff	space@mR+1,stop@mR+1
  3996   001902  EC2F  F00F         	call	_stop	;wreg free
  3997   001906                     
  3998                           ;dc_motor.c: 247:     LATHbits.LATH1 = 1;
  3999   001906  8280               	bsf	128,1,c	;volatile
  4000   001908                     
  4001                           ;dc_motor.c: 248:     mL-> direction = 0;
  4002   001908  EE20 F001          	lfsr	2,1
  4003   00190C  501B               	movf	space@mL^0,w,c
  4004   00190E  26D9               	addwf	fsr2l,f,c
  4005   001910  501C               	movf	(space@mL+1)^0,w,c
  4006   001912  22DA               	addwfc	fsr2h,f,c
  4007   001914  0E00               	movlw	0
  4008   001916  6EDF               	movwf	indf2,c
  4009   001918                     
  4010                           ;dc_motor.c: 249:     mR-> direction = 0;
  4011   001918  EE20 F001          	lfsr	2,1
  4012   00191C  501D               	movf	space@mR^0,w,c
  4013   00191E  26D9               	addwf	fsr2l,f,c
  4014   001920  501E               	movf	(space@mR+1)^0,w,c
  4015   001922  22DA               	addwfc	fsr2h,f,c
  4016   001924  0E00               	movlw	0
  4017   001926  6EDF               	movwf	indf2,c
  4018                           
  4019                           ;dc_motor.c: 250:     setMotorPWM(mR);
  4020   001928  C01D  F010         	movff	space@mR,setMotorPWM@m
  4021   00192C  C01E  F011         	movff	space@mR+1,setMotorPWM@m+1
  4022   001930  EC68  F009         	call	_setMotorPWM	;wreg free
  4023                           
  4024                           ;dc_motor.c: 251:     setMotorPWM(mL);
  4025   001934  C01B  F010         	movff	space@mL,setMotorPWM@m
  4026   001938  C01C  F011         	movff	space@mL+1,setMotorPWM@m+1
  4027   00193C  EC68  F009         	call	_setMotorPWM	;wreg free
  4028                           
  4029                           ;dc_motor.c: 252:     while ((mL->power <30) && (mR->power <30)){
  4030   001940  EFBE  F00C         	goto	l2553
  4031   001944                     l2545:
  4032                           
  4033                           ;dc_motor.c: 253:         mL->power += 10;
  4034   001944  C01B  FFD9         	movff	space@mL,fsr2l
  4035   001948  C01C  FFDA         	movff	space@mL+1,fsr2h
  4036   00194C  0E0A               	movlw	10
  4037   00194E  26DF               	addwf	indf2,f,c
  4038                           
  4039                           ;dc_motor.c: 254:         mR->power += 10;
  4040   001950  C01D  FFD9         	movff	space@mR,fsr2l
  4041   001954  C01E  FFDA         	movff	space@mR+1,fsr2h
  4042   001958  0E0A               	movlw	10
  4043   00195A  26DF               	addwf	indf2,f,c
  4044   00195C                     
  4045                           ;dc_motor.c: 255:         setMotorPWM(mL);
  4046   00195C  C01B  F010         	movff	space@mL,setMotorPWM@m
  4047   001960  C01C  F011         	movff	space@mL+1,setMotorPWM@m+1
  4048   001964  EC68  F009         	call	_setMotorPWM	;wreg free
  4049   001968                     
  4050                           ;dc_motor.c: 256:         setMotorPWM(mR);
  4051   001968  C01D  F010         	movff	space@mR,setMotorPWM@m
  4052   00196C  C01E  F011         	movff	space@mR+1,setMotorPWM@m+1
  4053   001970  EC68  F009         	call	_setMotorPWM	;wreg free
  4054   001974                     
  4055                           ;dc_motor.c: 257:         _delay((unsigned long)((20)*(64000000/4000000.0)));
  4056   001974  0E6A               	movlw	106
  4057   001976                     u2767:
  4058   001976  2EE8               	decfsz	wreg,f,c
  4059   001978  D7FE               	bra	u2767
  4060   00197A  D000               	nop2	
  4061   00197C                     l2553:
  4062                           
  4063                           ;dc_motor.c: 252:     while ((mL->power <30) && (mR->power <30)){
  4064   00197C  C01B  FFD9         	movff	space@mL,fsr2l
  4065   001980  C01C  FFDA         	movff	space@mL+1,fsr2h
  4066   001984  0E1E               	movlw	30
  4067   001986  60DF               	cpfslt	indf2,c
  4068   001988  EFC8  F00C         	goto	u1571
  4069   00198C  EFCA  F00C         	goto	u1570
  4070   001990                     u1571:
  4071   001990  EFD6  F00C         	goto	l2557
  4072   001994                     u1570:
  4073   001994  C01D  FFD9         	movff	space@mR,fsr2l
  4074   001998  C01E  FFDA         	movff	space@mR+1,fsr2h
  4075   00199C  0E1D               	movlw	29
  4076   00199E  64DF               	cpfsgt	indf2,c
  4077   0019A0  EFD4  F00C         	goto	u1581
  4078   0019A4  EFD6  F00C         	goto	u1580
  4079   0019A8                     u1581:
  4080   0019A8  EFA2  F00C         	goto	l2545
  4081   0019AC                     u1580:
  4082   0019AC                     l2557:
  4083                           
  4084                           ;dc_motor.c: 259:     _delay((unsigned long)((350)*(64000000/4000.0)));
  4085   0019AC  0E1D               	movlw	29
  4086   0019AE  6E20               	movwf	(??_space+1)^0,c
  4087   0019B0  0E69               	movlw	105
  4088   0019B2  6E1F               	movwf	??_space^0,c
  4089   0019B4  0EA5               	movlw	165
  4090   0019B6                     u2777:
  4091   0019B6  2EE8               	decfsz	wreg,f,c
  4092   0019B8  D7FE               	bra	u2777
  4093   0019BA  2E1F               	decfsz	??_space^0,f,c
  4094   0019BC  D7FC               	bra	u2777
  4095   0019BE  2E20               	decfsz	(??_space+1)^0,f,c
  4096   0019C0  D7FA               	bra	u2777
  4097   0019C2  F000               	nop	
  4098   0019C4                     
  4099                           ;dc_motor.c: 260:     stop(mL,mR);
  4100   0019C4  C01B  F016         	movff	space@mL,stop@mL
  4101   0019C8  C01C  F017         	movff	space@mL+1,stop@mL+1
  4102   0019CC  C01D  F018         	movff	space@mR,stop@mR
  4103   0019D0  C01E  F019         	movff	space@mR+1,stop@mR+1
  4104   0019D4  EC2F  F00F         	call	_stop	;wreg free
  4105   0019D8                     
  4106                           ;dc_motor.c: 261:     _delay((unsigned long)((200)*(64000000/4000.0)));
  4107   0019D8  0E11               	movlw	17
  4108   0019DA  6E20               	movwf	(??_space+1)^0,c
  4109   0019DC  0E3C               	movlw	60
  4110   0019DE  6E1F               	movwf	??_space^0,c
  4111   0019E0  0ECB               	movlw	203
  4112   0019E2                     u2787:
  4113   0019E2  2EE8               	decfsz	wreg,f,c
  4114   0019E4  D7FE               	bra	u2787
  4115   0019E6  2E1F               	decfsz	??_space^0,f,c
  4116   0019E8  D7FC               	bra	u2787
  4117   0019EA  2E20               	decfsz	(??_space+1)^0,f,c
  4118   0019EC  D7FA               	bra	u2787
  4119   0019EE  F000               	nop	
  4120   0019F0                     
  4121                           ;dc_motor.c: 262:     LATHbits.LATH1 = 0;
  4122   0019F0  9280               	bcf	128,1,c	;volatile
  4123   0019F2  0012               	return		;funcret
  4124   0019F4                     __end_of_space:
  4125                           	callstack 0
  4126                           
  4127 ;; *************** function _right_45 *****************
  4128 ;; Defined at:
  4129 ;;		line 219 in file "dc_motor.c"
  4130 ;; Parameters:    Size  Location     Type
  4131 ;;  mL              2   26[COMRAM] PTR struct DC_motor
  4132 ;;		 -> motorL(9), 
  4133 ;;  mR              2   28[COMRAM] PTR struct DC_motor
  4134 ;;		 -> motorR(9), 
  4135 ;;  count           2   30[COMRAM] int 
  4136 ;;  right_timer     2   32[COMRAM] int 
  4137 ;; Auto vars:     Size  Location     Type
  4138 ;;  i               2   36[COMRAM] int 
  4139 ;; Return value:  Size  Location     Type
  4140 ;;                  1    wreg      void 
  4141 ;; Registers used:
  4142 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4143 ;; Tracked objects:
  4144 ;;		On entry : 0/0
  4145 ;;		On exit  : 0/0
  4146 ;;		Unchanged: 0/0
  4147 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4148 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4149 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4150 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4151 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4152 ;;Total ram usage:       12 bytes
  4153 ;; Hardware stack levels used: 1
  4154 ;; Hardware stack levels required when called: 4
  4155 ;; This function calls:
  4156 ;;		_custom_delay
  4157 ;;		_setMotorPWM
  4158 ;;		_stop
  4159 ;; This function is called by:
  4160 ;;		_reverse_pink
  4161 ;;		_movement
  4162 ;;		_movement_return
  4163 ;;		_right_turn_calibration
  4164 ;; This function uses a non-reentrant model
  4165 ;;
  4166                           
  4167                           	psect	text23
  4168   00143C                     __ptext23:
  4169                           	callstack 0
  4170   00143C                     _right_45:
  4171                           	callstack 23
  4172   00143C                     
  4173                           ;dc_motor.c: 219: void right_45(DC_motor *mL, DC_motor *mR, int count, int right_timer);
      +                          dc_motor.c: 220: {;dc_motor.c: 221:     stop(mL,mR);
  4174   00143C  C01B  F016         	movff	right_45@mL,stop@mL
  4175   001440  C01C  F017         	movff	right_45@mL+1,stop@mL+1
  4176   001444  C01D  F018         	movff	right_45@mR,stop@mR
  4177   001448  C01E  F019         	movff	right_45@mR+1,stop@mR+1
  4178   00144C  EC2F  F00F         	call	_stop	;wreg free
  4179   001450                     
  4180                           ;dc_motor.c: 222:     mL-> direction = 1;
  4181   001450  EE20 F001          	lfsr	2,1
  4182   001454  501B               	movf	right_45@mL^0,w,c
  4183   001456  26D9               	addwf	fsr2l,f,c
  4184   001458  501C               	movf	(right_45@mL+1)^0,w,c
  4185   00145A  22DA               	addwfc	fsr2h,f,c
  4186   00145C  0E01               	movlw	1
  4187   00145E  6EDF               	movwf	indf2,c
  4188   001460                     
  4189                           ;dc_motor.c: 223:     mR-> direction = 0;
  4190   001460  EE20 F001          	lfsr	2,1
  4191   001464  501D               	movf	right_45@mR^0,w,c
  4192   001466  26D9               	addwf	fsr2l,f,c
  4193   001468  501E               	movf	(right_45@mR+1)^0,w,c
  4194   00146A  22DA               	addwfc	fsr2h,f,c
  4195   00146C  0E00               	movlw	0
  4196   00146E  6EDF               	movwf	indf2,c
  4197   001470                     
  4198                           ;dc_motor.c: 224:     LATHbits.LATH0 = 1;
  4199   001470  8080               	bsf	128,0,c	;volatile
  4200   001472                     
  4201                           ;dc_motor.c: 225:     int i;;dc_motor.c: 226:     for (i = 0;i<count;i++){
  4202   001472  0E00               	movlw	0
  4203   001474  6E26               	movwf	(right_45@i+1)^0,c
  4204   001476  0E00               	movlw	0
  4205   001478  6E25               	movwf	right_45@i^0,c
  4206   00147A  EFAC  F00A         	goto	l2427
  4207   00147E                     l2399:
  4208                           
  4209                           ;dc_motor.c: 228:         if (mL->power <= 50){mL->power += 10;}
  4210   00147E  C01B  FFD9         	movff	right_45@mL,fsr2l
  4211   001482  C01C  FFDA         	movff	right_45@mL+1,fsr2h
  4212   001486  0E33               	movlw	51
  4213   001488  60DF               	cpfslt	indf2,c
  4214   00148A  EF49  F00A         	goto	u1461
  4215   00148E  EF4B  F00A         	goto	u1460
  4216   001492                     u1461:
  4217   001492  EF51  F00A         	goto	l2403
  4218   001496                     u1460:
  4219   001496  C01B  FFD9         	movff	right_45@mL,fsr2l
  4220   00149A  C01C  FFDA         	movff	right_45@mL+1,fsr2h
  4221   00149E  0E0A               	movlw	10
  4222   0014A0  26DF               	addwf	indf2,f,c
  4223   0014A2                     l2403:
  4224                           
  4225                           ;dc_motor.c: 229:         if (mR->power <= 50){mR->power += 10;}
  4226   0014A2  C01D  FFD9         	movff	right_45@mR,fsr2l
  4227   0014A6  C01E  FFDA         	movff	right_45@mR+1,fsr2h
  4228   0014AA  0E33               	movlw	51
  4229   0014AC  60DF               	cpfslt	indf2,c
  4230   0014AE  EF5B  F00A         	goto	u1471
  4231   0014B2  EF5D  F00A         	goto	u1470
  4232   0014B6                     u1471:
  4233   0014B6  EF63  F00A         	goto	l2407
  4234   0014BA                     u1470:
  4235   0014BA  C01D  FFD9         	movff	right_45@mR,fsr2l
  4236   0014BE  C01E  FFDA         	movff	right_45@mR+1,fsr2h
  4237   0014C2  0E0A               	movlw	10
  4238   0014C4  26DF               	addwf	indf2,f,c
  4239   0014C6                     l2407:
  4240                           
  4241                           ;dc_motor.c: 230:         setMotorPWM(mL);
  4242   0014C6  C01B  F010         	movff	right_45@mL,setMotorPWM@m
  4243   0014CA  C01C  F011         	movff	right_45@mL+1,setMotorPWM@m+1
  4244   0014CE  EC68  F009         	call	_setMotorPWM	;wreg free
  4245   0014D2                     
  4246                           ;dc_motor.c: 231:         setMotorPWM(mR);
  4247   0014D2  C01D  F010         	movff	right_45@mR,setMotorPWM@m
  4248   0014D6  C01E  F011         	movff	right_45@mR+1,setMotorPWM@m+1
  4249   0014DA  EC68  F009         	call	_setMotorPWM	;wreg free
  4250   0014DE                     
  4251                           ;dc_motor.c: 232:         _delay((unsigned long)((10)*(64000000/4000.0)));
  4252   0014DE  0ED0               	movlw	208
  4253   0014E0  6E23               	movwf	??_right_45^0,c
  4254   0014E2  0ECA               	movlw	202
  4255   0014E4                     u2797:
  4256   0014E4  2EE8               	decfsz	wreg,f,c
  4257   0014E6  D7FE               	bra	u2797
  4258   0014E8  2E23               	decfsz	??_right_45^0,f,c
  4259   0014EA  D7FC               	bra	u2797
  4260   0014EC                     l2413:
  4261                           
  4262                           ;dc_motor.c: 227:     while ((mL->power <= 50) || (mR->power <= 50)){
  4263   0014EC  C01B  FFD9         	movff	right_45@mL,fsr2l
  4264   0014F0  C01C  FFDA         	movff	right_45@mL+1,fsr2h
  4265   0014F4  0E32               	movlw	50
  4266   0014F6  64DF               	cpfsgt	indf2,c
  4267   0014F8  EF80  F00A         	goto	u1481
  4268   0014FC  EF82  F00A         	goto	u1480
  4269   001500                     u1481:
  4270   001500  EF3F  F00A         	goto	l2399
  4271   001504                     u1480:
  4272   001504  C01D  FFD9         	movff	right_45@mR,fsr2l
  4273   001508  C01E  FFDA         	movff	right_45@mR+1,fsr2h
  4274   00150C  0E32               	movlw	50
  4275   00150E  64DF               	cpfsgt	indf2,c
  4276   001510  EF8C  F00A         	goto	u1491
  4277   001514  EF8E  F00A         	goto	u1490
  4278   001518                     u1491:
  4279   001518  EF3F  F00A         	goto	l2399
  4280   00151C                     u1490:
  4281   00151C                     
  4282                           ;dc_motor.c: 234:     custom_delay(right_timer);
  4283   00151C  C021  F003         	movff	right_45@right_timer,custom_delay@temp
  4284   001520  C022  F004         	movff	right_45@right_timer+1,custom_delay@temp+1
  4285   001524  ECB9  F010         	call	_custom_delay	;wreg free
  4286   001528                     
  4287                           ;dc_motor.c: 235:     stop(mL,mR);
  4288   001528  C01B  F016         	movff	right_45@mL,stop@mL
  4289   00152C  C01C  F017         	movff	right_45@mL+1,stop@mL+1
  4290   001530  C01D  F018         	movff	right_45@mR,stop@mR
  4291   001534  C01E  F019         	movff	right_45@mR+1,stop@mR+1
  4292   001538  EC2F  F00F         	call	_stop	;wreg free
  4293   00153C                     
  4294                           ;dc_motor.c: 236:     _delay((unsigned long)((150)*(64000000/4000.0)));
  4295   00153C  0E0D               	movlw	13
  4296   00153E  6E24               	movwf	(??_right_45+1)^0,c
  4297   001540  0E2D               	movlw	45
  4298   001542  6E23               	movwf	??_right_45^0,c
  4299   001544  0ED8               	movlw	216
  4300   001546                     u2807:
  4301   001546  2EE8               	decfsz	wreg,f,c
  4302   001548  D7FE               	bra	u2807
  4303   00154A  2E23               	decfsz	??_right_45^0,f,c
  4304   00154C  D7FC               	bra	u2807
  4305   00154E  2E24               	decfsz	(??_right_45+1)^0,f,c
  4306   001550  D7FA               	bra	u2807
  4307   001552                     
  4308                           ;dc_motor.c: 237:     LATHbits.LATH0 = 0;
  4309   001552  9080               	bcf	128,0,c	;volatile
  4310   001554                     
  4311                           ;dc_motor.c: 238:     }
  4312   001554  4A25               	infsnz	right_45@i^0,f,c
  4313   001556  2A26               	incf	(right_45@i+1)^0,f,c
  4314   001558                     l2427:
  4315   001558  501F               	movf	right_45@count^0,w,c
  4316   00155A  5C25               	subwf	right_45@i^0,w,c
  4317   00155C  5026               	movf	(right_45@i+1)^0,w,c
  4318   00155E  0A80               	xorlw	128
  4319   001560  6E23               	movwf	??_right_45^0,c
  4320   001562  5020               	movf	(right_45@count+1)^0,w,c
  4321   001564  0A80               	xorlw	128
  4322   001566  5823               	subwfb	??_right_45^0,w,c
  4323   001568  A0D8               	btfss	status,0,c
  4324   00156A  EFB9  F00A         	goto	u1501
  4325   00156E  EFBB  F00A         	goto	u1500
  4326   001572                     u1501:
  4327   001572  EF76  F00A         	goto	l2413
  4328   001576                     u1500:
  4329   001576  0012               	return		;funcret
  4330   001578                     __end_of_right_45:
  4331                           	callstack 0
  4332                           
  4333 ;; *************** function _reverse *****************
  4334 ;; Defined at:
  4335 ;;		line 145 in file "dc_motor.c"
  4336 ;; Parameters:    Size  Location     Type
  4337 ;;  mL              2   26[COMRAM] PTR struct DC_motor
  4338 ;;		 -> motorL(9), 
  4339 ;;  mR              2   28[COMRAM] PTR struct DC_motor
  4340 ;;		 -> motorR(9), 
  4341 ;; Auto vars:     Size  Location     Type
  4342 ;;		None
  4343 ;; Return value:  Size  Location     Type
  4344 ;;                  1    wreg      void 
  4345 ;; Registers used:
  4346 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4347 ;; Tracked objects:
  4348 ;;		On entry : 0/0
  4349 ;;		On exit  : 0/0
  4350 ;;		Unchanged: 0/0
  4351 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4352 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4353 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4354 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4355 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4356 ;;Total ram usage:        5 bytes
  4357 ;; Hardware stack levels used: 1
  4358 ;; Hardware stack levels required when called: 4
  4359 ;; This function calls:
  4360 ;;		_setMotorPWM
  4361 ;;		_stop
  4362 ;; This function is called by:
  4363 ;;		_return_home
  4364 ;;		_reverse_yellow
  4365 ;;		_reverse_pink
  4366 ;;		_movement
  4367 ;; This function uses a non-reentrant model
  4368 ;;
  4369                           
  4370                           	psect	text24
  4371   001ADE                     __ptext24:
  4372                           	callstack 0
  4373   001ADE                     _reverse:
  4374                           	callstack 24
  4375   001ADE                     
  4376                           ;dc_motor.c: 145: void reverse(DC_motor *mL, DC_motor *mR);dc_motor.c: 146: {;dc_motor.c
      +                          : 147:     stop(mL,mR);
  4377   001ADE  C01B  F016         	movff	reverse@mL,stop@mL
  4378   001AE2  C01C  F017         	movff	reverse@mL+1,stop@mL+1
  4379   001AE6  C01D  F018         	movff	reverse@mR,stop@mR
  4380   001AEA  C01E  F019         	movff	reverse@mR+1,stop@mR+1
  4381   001AEE  EC2F  F00F         	call	_stop	;wreg free
  4382   001AF2                     
  4383                           ;dc_motor.c: 148:     mL-> direction = 0;
  4384   001AF2  EE20 F001          	lfsr	2,1
  4385   001AF6  501B               	movf	reverse@mL^0,w,c
  4386   001AF8  26D9               	addwf	fsr2l,f,c
  4387   001AFA  501C               	movf	(reverse@mL+1)^0,w,c
  4388   001AFC  22DA               	addwfc	fsr2h,f,c
  4389   001AFE  0E00               	movlw	0
  4390   001B00  6EDF               	movwf	indf2,c
  4391   001B02                     
  4392                           ;dc_motor.c: 149:     mR-> direction = 0;
  4393   001B02  EE20 F001          	lfsr	2,1
  4394   001B06  501D               	movf	reverse@mR^0,w,c
  4395   001B08  26D9               	addwf	fsr2l,f,c
  4396   001B0A  501E               	movf	(reverse@mR+1)^0,w,c
  4397   001B0C  22DA               	addwfc	fsr2h,f,c
  4398   001B0E  0E00               	movlw	0
  4399   001B10  6EDF               	movwf	indf2,c
  4400   001B12                     
  4401                           ;dc_motor.c: 150:     LATHbits.LATH1 = 1;
  4402   001B12  8280               	bsf	128,1,c	;volatile
  4403                           
  4404                           ;dc_motor.c: 151:     setMotorPWM(mR);
  4405   001B14  C01D  F010         	movff	reverse@mR,setMotorPWM@m
  4406   001B18  C01E  F011         	movff	reverse@mR+1,setMotorPWM@m+1
  4407   001B1C  EC68  F009         	call	_setMotorPWM	;wreg free
  4408                           
  4409                           ;dc_motor.c: 152:     setMotorPWM(mL);
  4410   001B20  C01B  F010         	movff	reverse@mL,setMotorPWM@m
  4411   001B24  C01C  F011         	movff	reverse@mL+1,setMotorPWM@m+1
  4412   001B28  EC68  F009         	call	_setMotorPWM	;wreg free
  4413                           
  4414                           ;dc_motor.c: 153:     while ((mL->power <= 50) || (mR->power <= 55)){
  4415   001B2C  EFCA  F00D         	goto	l291
  4416   001B30                     l2333:
  4417                           
  4418                           ;dc_motor.c: 154:         if (mL->power <= 50){mL->power += 1;}
  4419   001B30  C01B  FFD9         	movff	reverse@mL,fsr2l
  4420   001B34  C01C  FFDA         	movff	reverse@mL+1,fsr2h
  4421   001B38  0E33               	movlw	51
  4422   001B3A  60DF               	cpfslt	indf2,c
  4423   001B3C  EFA2  F00D         	goto	u1371
  4424   001B40  EFA4  F00D         	goto	u1370
  4425   001B44                     u1371:
  4426   001B44  EFA9  F00D         	goto	l2337
  4427   001B48                     u1370:
  4428   001B48  C01B  FFD9         	movff	reverse@mL,fsr2l
  4429   001B4C  C01C  FFDA         	movff	reverse@mL+1,fsr2h
  4430   001B50  2ADF               	incf	indf2,f,c
  4431   001B52                     l2337:
  4432                           
  4433                           ;dc_motor.c: 155:         if (mR->power <= 55){mR->power += 1;}
  4434   001B52  C01D  FFD9         	movff	reverse@mR,fsr2l
  4435   001B56  C01E  FFDA         	movff	reverse@mR+1,fsr2h
  4436   001B5A  0E38               	movlw	56
  4437   001B5C  60DF               	cpfslt	indf2,c
  4438   001B5E  EFB3  F00D         	goto	u1381
  4439   001B62  EFB5  F00D         	goto	u1380
  4440   001B66                     u1381:
  4441   001B66  EFBA  F00D         	goto	l2341
  4442   001B6A                     u1380:
  4443   001B6A  C01D  FFD9         	movff	reverse@mR,fsr2l
  4444   001B6E  C01E  FFDA         	movff	reverse@mR+1,fsr2h
  4445   001B72  2ADF               	incf	indf2,f,c
  4446   001B74                     l2341:
  4447                           
  4448                           ;dc_motor.c: 156:         setMotorPWM(mL);
  4449   001B74  C01B  F010         	movff	reverse@mL,setMotorPWM@m
  4450   001B78  C01C  F011         	movff	reverse@mL+1,setMotorPWM@m+1
  4451   001B7C  EC68  F009         	call	_setMotorPWM	;wreg free
  4452   001B80                     
  4453                           ;dc_motor.c: 157:         setMotorPWM(mR);
  4454   001B80  C01D  F010         	movff	reverse@mR,setMotorPWM@m
  4455   001B84  C01E  F011         	movff	reverse@mR+1,setMotorPWM@m+1
  4456   001B88  EC68  F009         	call	_setMotorPWM	;wreg free
  4457   001B8C                     
  4458                           ;dc_motor.c: 158:         _delay((unsigned long)((5)*(64000000/4000000.0)));
  4459   001B8C  0E1A               	movlw	26
  4460   001B8E                     u2817:
  4461   001B8E  2EE8               	decfsz	wreg,f,c
  4462   001B90  D7FE               	bra	u2817
  4463   001B92  D000               	nop2	
  4464   001B94                     l291:
  4465                           
  4466                           ;dc_motor.c: 153:     while ((mL->power <= 50) || (mR->power <= 55)){
  4467   001B94  C01B  FFD9         	movff	reverse@mL,fsr2l
  4468   001B98  C01C  FFDA         	movff	reverse@mL+1,fsr2h
  4469   001B9C  0E32               	movlw	50
  4470   001B9E  64DF               	cpfsgt	indf2,c
  4471   001BA0  EFD4  F00D         	goto	u1391
  4472   001BA4  EFD6  F00D         	goto	u1390
  4473   001BA8                     u1391:
  4474   001BA8  EF98  F00D         	goto	l2333
  4475   001BAC                     u1390:
  4476   001BAC  C01D  FFD9         	movff	reverse@mR,fsr2l
  4477   001BB0  C01E  FFDA         	movff	reverse@mR+1,fsr2h
  4478   001BB4  0E37               	movlw	55
  4479   001BB6  64DF               	cpfsgt	indf2,c
  4480   001BB8  EFE0  F00D         	goto	u1401
  4481   001BBC  EFE2  F00D         	goto	u1400
  4482   001BC0                     u1401:
  4483   001BC0  EF98  F00D         	goto	l2333
  4484   001BC4                     u1400:
  4485   001BC4                     
  4486                           ;dc_motor.c: 160:     LATHbits.LATH1 = 0;
  4487   001BC4  9280               	bcf	128,1,c	;volatile
  4488   001BC6  0012               	return		;funcret
  4489   001BC8                     __end_of_reverse:
  4490                           	callstack 0
  4491                           
  4492 ;; *************** function _left_45 *****************
  4493 ;; Defined at:
  4494 ;;		line 192 in file "dc_motor.c"
  4495 ;; Parameters:    Size  Location     Type
  4496 ;;  mL              2   26[COMRAM] PTR struct DC_motor
  4497 ;;		 -> motorL(9), 
  4498 ;;  mR              2   28[COMRAM] PTR struct DC_motor
  4499 ;;		 -> motorR(9), 
  4500 ;;  count           2   30[COMRAM] int 
  4501 ;;  left_timer      2   32[COMRAM] int 
  4502 ;; Auto vars:     Size  Location     Type
  4503 ;;  i               2   36[COMRAM] int 
  4504 ;; Return value:  Size  Location     Type
  4505 ;;                  1    wreg      void 
  4506 ;; Registers used:
  4507 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4508 ;; Tracked objects:
  4509 ;;		On entry : 0/0
  4510 ;;		On exit  : 0/0
  4511 ;;		Unchanged: 0/0
  4512 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4513 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4514 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4515 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4516 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4517 ;;Total ram usage:       12 bytes
  4518 ;; Hardware stack levels used: 1
  4519 ;; Hardware stack levels required when called: 4
  4520 ;; This function calls:
  4521 ;;		_custom_delay
  4522 ;;		_setMotorPWM
  4523 ;;		_stop
  4524 ;; This function is called by:
  4525 ;;		_reverse_yellow
  4526 ;;		_movement
  4527 ;;		_movement_return
  4528 ;;		_left_turn_calibration
  4529 ;; This function uses a non-reentrant model
  4530 ;;
  4531                           
  4532                           	psect	text25
  4533   001578                     __ptext25:
  4534                           	callstack 0
  4535   001578                     _left_45:
  4536                           	callstack 22
  4537   001578                     
  4538                           ;dc_motor.c: 192: void left_45(DC_motor *mL, DC_motor *mR, int count, int left_timer);dc
      +                          _motor.c: 193: {;dc_motor.c: 194:     stop(mL,mR);
  4539   001578  C01B  F016         	movff	left_45@mL,stop@mL
  4540   00157C  C01C  F017         	movff	left_45@mL+1,stop@mL+1
  4541   001580  C01D  F018         	movff	left_45@mR,stop@mR
  4542   001584  C01E  F019         	movff	left_45@mR+1,stop@mR+1
  4543   001588  EC2F  F00F         	call	_stop	;wreg free
  4544   00158C                     
  4545                           ;dc_motor.c: 195:     mL-> direction = 0;
  4546   00158C  EE20 F001          	lfsr	2,1
  4547   001590  501B               	movf	left_45@mL^0,w,c
  4548   001592  26D9               	addwf	fsr2l,f,c
  4549   001594  501C               	movf	(left_45@mL+1)^0,w,c
  4550   001596  22DA               	addwfc	fsr2h,f,c
  4551   001598  0E00               	movlw	0
  4552   00159A  6EDF               	movwf	indf2,c
  4553   00159C                     
  4554                           ;dc_motor.c: 196:     mR-> direction = 1;
  4555   00159C  EE20 F001          	lfsr	2,1
  4556   0015A0  501D               	movf	left_45@mR^0,w,c
  4557   0015A2  26D9               	addwf	fsr2l,f,c
  4558   0015A4  501E               	movf	(left_45@mR+1)^0,w,c
  4559   0015A6  22DA               	addwfc	fsr2h,f,c
  4560   0015A8  0E01               	movlw	1
  4561   0015AA  6EDF               	movwf	indf2,c
  4562   0015AC                     
  4563                           ;dc_motor.c: 197:     LATFbits.LATF0 = 1;
  4564   0015AC  807E               	bsf	126,0,c	;volatile
  4565   0015AE                     
  4566                           ;dc_motor.c: 198:     int i;;dc_motor.c: 199:     for (i = 0;i<count;i++){
  4567   0015AE  0E00               	movlw	0
  4568   0015B0  6E26               	movwf	(left_45@i+1)^0,c
  4569   0015B2  0E00               	movlw	0
  4570   0015B4  6E25               	movwf	left_45@i^0,c
  4571   0015B6  EF4A  F00B         	goto	l2387
  4572   0015BA                     l2359:
  4573                           
  4574                           ;dc_motor.c: 201:         if (mL->power <= 50){mL->power += 10;}
  4575   0015BA  C01B  FFD9         	movff	left_45@mL,fsr2l
  4576   0015BE  C01C  FFDA         	movff	left_45@mL+1,fsr2h
  4577   0015C2  0E33               	movlw	51
  4578   0015C4  60DF               	cpfslt	indf2,c
  4579   0015C6  EFE7  F00A         	goto	u1411
  4580   0015CA  EFE9  F00A         	goto	u1410
  4581   0015CE                     u1411:
  4582   0015CE  EFEF  F00A         	goto	l2363
  4583   0015D2                     u1410:
  4584   0015D2  C01B  FFD9         	movff	left_45@mL,fsr2l
  4585   0015D6  C01C  FFDA         	movff	left_45@mL+1,fsr2h
  4586   0015DA  0E0A               	movlw	10
  4587   0015DC  26DF               	addwf	indf2,f,c
  4588   0015DE                     l2363:
  4589                           
  4590                           ;dc_motor.c: 202:         if (mR->power <= 50){mR->power += 10;}
  4591   0015DE  C01D  FFD9         	movff	left_45@mR,fsr2l
  4592   0015E2  C01E  FFDA         	movff	left_45@mR+1,fsr2h
  4593   0015E6  0E33               	movlw	51
  4594   0015E8  60DF               	cpfslt	indf2,c
  4595   0015EA  EFF9  F00A         	goto	u1421
  4596   0015EE  EFFB  F00A         	goto	u1420
  4597   0015F2                     u1421:
  4598   0015F2  EF01  F00B         	goto	l2367
  4599   0015F6                     u1420:
  4600   0015F6  C01D  FFD9         	movff	left_45@mR,fsr2l
  4601   0015FA  C01E  FFDA         	movff	left_45@mR+1,fsr2h
  4602   0015FE  0E0A               	movlw	10
  4603   001600  26DF               	addwf	indf2,f,c
  4604   001602                     l2367:
  4605                           
  4606                           ;dc_motor.c: 203:         setMotorPWM(mL);
  4607   001602  C01B  F010         	movff	left_45@mL,setMotorPWM@m
  4608   001606  C01C  F011         	movff	left_45@mL+1,setMotorPWM@m+1
  4609   00160A  EC68  F009         	call	_setMotorPWM	;wreg free
  4610   00160E                     
  4611                           ;dc_motor.c: 204:         setMotorPWM(mR);
  4612   00160E  C01D  F010         	movff	left_45@mR,setMotorPWM@m
  4613   001612  C01E  F011         	movff	left_45@mR+1,setMotorPWM@m+1
  4614   001616  EC68  F009         	call	_setMotorPWM	;wreg free
  4615   00161A                     
  4616                           ;dc_motor.c: 205:         _delay((unsigned long)((10)*(64000000/4000.0)));
  4617   00161A  0ED0               	movlw	208
  4618   00161C  6E23               	movwf	??_left_45^0,c
  4619   00161E  0ECA               	movlw	202
  4620   001620                     u2827:
  4621   001620  2EE8               	decfsz	wreg,f,c
  4622   001622  D7FE               	bra	u2827
  4623   001624  2E23               	decfsz	??_left_45^0,f,c
  4624   001626  D7FC               	bra	u2827
  4625   001628                     l2373:
  4626                           
  4627                           ;dc_motor.c: 200:     while ((mL->power <= 50) || (mR->power <= 50)){
  4628   001628  C01B  FFD9         	movff	left_45@mL,fsr2l
  4629   00162C  C01C  FFDA         	movff	left_45@mL+1,fsr2h
  4630   001630  0E32               	movlw	50
  4631   001632  64DF               	cpfsgt	indf2,c
  4632   001634  EF1E  F00B         	goto	u1431
  4633   001638  EF20  F00B         	goto	u1430
  4634   00163C                     u1431:
  4635   00163C  EFDD  F00A         	goto	l2359
  4636   001640                     u1430:
  4637   001640  C01D  FFD9         	movff	left_45@mR,fsr2l
  4638   001644  C01E  FFDA         	movff	left_45@mR+1,fsr2h
  4639   001648  0E32               	movlw	50
  4640   00164A  64DF               	cpfsgt	indf2,c
  4641   00164C  EF2A  F00B         	goto	u1441
  4642   001650  EF2C  F00B         	goto	u1440
  4643   001654                     u1441:
  4644   001654  EFDD  F00A         	goto	l2359
  4645   001658                     u1440:
  4646   001658                     
  4647                           ;dc_motor.c: 207:     custom_delay(left_timer);
  4648   001658  C021  F003         	movff	left_45@left_timer,custom_delay@temp
  4649   00165C  C022  F004         	movff	left_45@left_timer+1,custom_delay@temp+1
  4650   001660  ECB9  F010         	call	_custom_delay	;wreg free
  4651   001664                     
  4652                           ;dc_motor.c: 208:     stop(mL,mR);
  4653   001664  C01B  F016         	movff	left_45@mL,stop@mL
  4654   001668  C01C  F017         	movff	left_45@mL+1,stop@mL+1
  4655   00166C  C01D  F018         	movff	left_45@mR,stop@mR
  4656   001670  C01E  F019         	movff	left_45@mR+1,stop@mR+1
  4657   001674  EC2F  F00F         	call	_stop	;wreg free
  4658   001678                     
  4659                           ;dc_motor.c: 209:     _delay((unsigned long)((150)*(64000000/4000.0)));
  4660   001678  0E0D               	movlw	13
  4661   00167A  6E24               	movwf	(??_left_45+1)^0,c
  4662   00167C  0E2D               	movlw	45
  4663   00167E  6E23               	movwf	??_left_45^0,c
  4664   001680  0ED8               	movlw	216
  4665   001682                     u2837:
  4666   001682  2EE8               	decfsz	wreg,f,c
  4667   001684  D7FE               	bra	u2837
  4668   001686  2E23               	decfsz	??_left_45^0,f,c
  4669   001688  D7FC               	bra	u2837
  4670   00168A  2E24               	decfsz	(??_left_45+1)^0,f,c
  4671   00168C  D7FA               	bra	u2837
  4672   00168E                     
  4673                           ;dc_motor.c: 210:     LATFbits.LATF0 = 0;
  4674   00168E  907E               	bcf	126,0,c	;volatile
  4675   001690                     
  4676                           ;dc_motor.c: 211:     }
  4677   001690  4A25               	infsnz	left_45@i^0,f,c
  4678   001692  2A26               	incf	(left_45@i+1)^0,f,c
  4679   001694                     l2387:
  4680   001694  501F               	movf	left_45@count^0,w,c
  4681   001696  5C25               	subwf	left_45@i^0,w,c
  4682   001698  5026               	movf	(left_45@i+1)^0,w,c
  4683   00169A  0A80               	xorlw	128
  4684   00169C  6E23               	movwf	??_left_45^0,c
  4685   00169E  5020               	movf	(left_45@count+1)^0,w,c
  4686   0016A0  0A80               	xorlw	128
  4687   0016A2  5823               	subwfb	??_left_45^0,w,c
  4688   0016A4  A0D8               	btfss	status,0,c
  4689   0016A6  EF57  F00B         	goto	u1451
  4690   0016AA  EF59  F00B         	goto	u1450
  4691   0016AE                     u1451:
  4692   0016AE  EF14  F00B         	goto	l2373
  4693   0016B2                     u1450:
  4694   0016B2  0012               	return		;funcret
  4695   0016B4                     __end_of_left_45:
  4696                           	callstack 0
  4697                           
  4698 ;; *************** function _stop *****************
  4699 ;; Defined at:
  4700 ;;		line 166 in file "dc_motor.c"
  4701 ;; Parameters:    Size  Location     Type
  4702 ;;  mL              2   21[COMRAM] PTR struct DC_motor
  4703 ;;		 -> motorL(9), 
  4704 ;;  mR              2   23[COMRAM] PTR struct DC_motor
  4705 ;;		 -> motorR(9), 
  4706 ;; Auto vars:     Size  Location     Type
  4707 ;;  i               1   25[COMRAM] unsigned char 
  4708 ;; Return value:  Size  Location     Type
  4709 ;;                  1    wreg      void 
  4710 ;; Registers used:
  4711 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4712 ;; Tracked objects:
  4713 ;;		On entry : 0/0
  4714 ;;		On exit  : 0/0
  4715 ;;		Unchanged: 0/0
  4716 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4717 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4718 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4719 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4720 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4721 ;;Total ram usage:        5 bytes
  4722 ;; Hardware stack levels used: 1
  4723 ;; Hardware stack levels required when called: 3
  4724 ;; This function calls:
  4725 ;;		_setMotorPWM
  4726 ;; This function is called by:
  4727 ;;		_buggy_color_response
  4728 ;;		_return_home
  4729 ;;		_forward
  4730 ;;		_reverse
  4731 ;;		_left_45
  4732 ;;		_right_45
  4733 ;;		_space
  4734 ;;		_reverse_yellow
  4735 ;;		_reverse_pink
  4736 ;;		_movement
  4737 ;;		_movement_return
  4738 ;; This function uses a non-reentrant model
  4739 ;;
  4740                           
  4741                           	psect	text26
  4742   001E5E                     __ptext26:
  4743                           	callstack 0
  4744   001E5E                     _stop:
  4745                           	callstack 26
  4746   001E5E                     
  4747                           ;dc_motor.c: 166: void stop(DC_motor *mL, DC_motor *mR);dc_motor.c: 167: {;dc_motor.c: 1
      +                          68:     mL->brakemode = 1;
  4748   001E5E  EE20 F002          	lfsr	2,2
  4749   001E62  5016               	movf	stop@mL^0,w,c
  4750   001E64  26D9               	addwf	fsr2l,f,c
  4751   001E66  5017               	movf	(stop@mL+1)^0,w,c
  4752   001E68  22DA               	addwfc	fsr2h,f,c
  4753   001E6A  0E01               	movlw	1
  4754   001E6C  6EDF               	movwf	indf2,c
  4755                           
  4756                           ;dc_motor.c: 169:     mR->brakemode = 1;
  4757   001E6E  EE20 F002          	lfsr	2,2
  4758   001E72  5018               	movf	stop@mR^0,w,c
  4759   001E74  26D9               	addwf	fsr2l,f,c
  4760   001E76  5019               	movf	(stop@mR+1)^0,w,c
  4761   001E78  22DA               	addwfc	fsr2h,f,c
  4762   001E7A  0E01               	movlw	1
  4763   001E7C  6EDF               	movwf	indf2,c
  4764   001E7E                     
  4765                           ;dc_motor.c: 170:     LATDbits.LATD4 = 1;
  4766   001E7E  887C               	bsf	124,4,c	;volatile
  4767   001E80                     
  4768                           ;dc_motor.c: 172:     for (char i = 70; i >= 0; i=i-10) {
  4769   001E80  0E46               	movlw	70
  4770   001E82  6E1A               	movwf	stop@i^0,c
  4771   001E84                     l2297:
  4772                           
  4773                           ;dc_motor.c: 173:         mL -> power = i;
  4774   001E84  C016  FFD9         	movff	stop@mL,fsr2l
  4775   001E88  C017  FFDA         	movff	stop@mL+1,fsr2h
  4776   001E8C  C01A  FFDF         	movff	stop@i,indf2
  4777                           
  4778                           ;dc_motor.c: 174:         mR -> power = i;
  4779   001E90  C018  FFD9         	movff	stop@mR,fsr2l
  4780   001E94  C019  FFDA         	movff	stop@mR+1,fsr2h
  4781   001E98  C01A  FFDF         	movff	stop@i,indf2
  4782   001E9C                     
  4783                           ;dc_motor.c: 175:         setMotorPWM(mL);
  4784   001E9C  C016  F010         	movff	stop@mL,setMotorPWM@m
  4785   001EA0  C017  F011         	movff	stop@mL+1,setMotorPWM@m+1
  4786   001EA4  EC68  F009         	call	_setMotorPWM	;wreg free
  4787   001EA8                     
  4788                           ;dc_motor.c: 176:         setMotorPWM(mR);
  4789   001EA8  C018  F010         	movff	stop@mR,setMotorPWM@m
  4790   001EAC  C019  F011         	movff	stop@mR+1,setMotorPWM@m+1
  4791   001EB0  EC68  F009         	call	_setMotorPWM	;wreg free
  4792   001EB4                     
  4793                           ;dc_motor.c: 177:         _delay((unsigned long)((20)*(64000000/4000000.0)));
  4794   001EB4  0E6A               	movlw	106
  4795   001EB6                     u2847:
  4796   001EB6  2EE8               	decfsz	wreg,f,c
  4797   001EB8  D7FE               	bra	u2847
  4798   001EBA  D000               	nop2	
  4799   001EBC                     
  4800                           ;dc_motor.c: 178:     }
  4801   001EBC  501A               	movf	stop@i^0,w,c
  4802   001EBE  0FF6               	addlw	246
  4803   001EC0  6E1A               	movwf	stop@i^0,c
  4804   001EC2  EF42  F00F         	goto	l2297
  4805   001EC6  0012               	return		;funcret
  4806   001EC8                     __end_of_stop:
  4807                           	callstack 0
  4808                           
  4809 ;; *************** function _setMotorPWM *****************
  4810 ;; Defined at:
  4811 ;;		line 76 in file "dc_motor.c"
  4812 ;; Parameters:    Size  Location     Type
  4813 ;;  m               2   15[COMRAM] PTR struct DC_motor
  4814 ;;		 -> motorR(9), motorL(9), 
  4815 ;; Auto vars:     Size  Location     Type
  4816 ;;  negDuty         1   20[COMRAM] unsigned char 
  4817 ;;  posDuty         1   19[COMRAM] unsigned char 
  4818 ;; Return value:  Size  Location     Type
  4819 ;;                  1    wreg      void 
  4820 ;; Registers used:
  4821 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4822 ;; Tracked objects:
  4823 ;;		On entry : 0/0
  4824 ;;		On exit  : 0/0
  4825 ;;		Unchanged: 0/0
  4826 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4827 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4828 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4829 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4830 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4831 ;;Total ram usage:        6 bytes
  4832 ;; Hardware stack levels used: 1
  4833 ;; Hardware stack levels required when called: 2
  4834 ;; This function calls:
  4835 ;;		___lwdiv
  4836 ;;		___wmul
  4837 ;; This function is called by:
  4838 ;;		_forward
  4839 ;;		_reverse
  4840 ;;		_stop
  4841 ;;		_left_45
  4842 ;;		_right_45
  4843 ;;		_space
  4844 ;; This function uses a non-reentrant model
  4845 ;;
  4846                           
  4847                           	psect	text27
  4848   0012D0                     __ptext27:
  4849                           	callstack 0
  4850   0012D0                     _setMotorPWM:
  4851                           	callstack 26
  4852   0012D0                     
  4853                           ;dc_motor.c: 76: void setMotorPWM(DC_motor *m);dc_motor.c: 77: {;dc_motor.c: 78:     uns
      +                          igned char posDuty, negDuty;;dc_motor.c: 80:     if(m->brakemode) {
  4854   0012D0  EE20 F002          	lfsr	2,2
  4855   0012D4  5010               	movf	setMotorPWM@m^0,w,c
  4856   0012D6  26D9               	addwf	fsr2l,f,c
  4857   0012D8  5011               	movf	(setMotorPWM@m+1)^0,w,c
  4858   0012DA  22DA               	addwfc	fsr2h,f,c
  4859   0012DC  50DF               	movf	indf2,w,c
  4860   0012DE  B4D8               	btfsc	status,2,c
  4861   0012E0  EF74  F009         	goto	u1321
  4862   0012E4  EF76  F009         	goto	u1320
  4863   0012E8                     u1321:
  4864   0012E8  EFAA  F009         	goto	l2279
  4865   0012EC                     u1320:
  4866   0012EC                     
  4867                           ;dc_motor.c: 81:         posDuty = m->PWMperiod - ((unsigned int)(m->power)*(m->PWMperio
      +                          d))/100;
  4868   0012EC  C010  FFD9         	movff	setMotorPWM@m,fsr2l
  4869   0012F0  C011  FFDA         	movff	setMotorPWM@m+1,fsr2h
  4870   0012F4  50DF               	movf	indf2,w,c
  4871   0012F6  6E12               	movwf	??_setMotorPWM^0,c
  4872   0012F8  5012               	movf	??_setMotorPWM^0,w,c
  4873   0012FA  6E03               	movwf	___wmul@multiplier^0,c
  4874   0012FC  6A04               	clrf	(___wmul@multiplier+1)^0,c
  4875   0012FE  EE20 F003          	lfsr	2,3
  4876   001302  5010               	movf	setMotorPWM@m^0,w,c
  4877   001304  26D9               	addwf	fsr2l,f,c
  4878   001306  5011               	movf	(setMotorPWM@m+1)^0,w,c
  4879   001308  22DA               	addwfc	fsr2h,f,c
  4880   00130A  CFDE F005          	movff	postinc2,___wmul@multiplicand
  4881   00130E  CFDD F006          	movff	postdec2,___wmul@multiplicand+1
  4882   001312  EC1C  F011         	call	___wmul	;wreg free
  4883   001316  C003  F009         	movff	?___wmul,___lwdiv@dividend
  4884   00131A  C004  F00A         	movff	?___wmul+1,___lwdiv@dividend+1
  4885   00131E  0E00               	movlw	0
  4886   001320  6E0C               	movwf	(___lwdiv@divisor+1)^0,c
  4887   001322  0E64               	movlw	100
  4888   001324  6E0B               	movwf	___lwdiv@divisor^0,c
  4889   001326  ECBE  F00E         	call	___lwdiv	;wreg free
  4890   00132A  EE20 F003          	lfsr	2,3
  4891   00132E  5010               	movf	setMotorPWM@m^0,w,c
  4892   001330  26D9               	addwf	fsr2l,f,c
  4893   001332  5011               	movf	(setMotorPWM@m+1)^0,w,c
  4894   001334  22DA               	addwfc	fsr2h,f,c
  4895   001336  50DF               	movf	indf2,w,c
  4896   001338  6E13               	movwf	(??_setMotorPWM+1)^0,c
  4897   00133A  5009               	movf	?___lwdiv^0,w,c
  4898   00133C  5C13               	subwf	(??_setMotorPWM+1)^0,w,c
  4899   00133E  6E14               	movwf	setMotorPWM@posDuty^0,c
  4900   001340                     
  4901                           ;dc_motor.c: 82:         negDuty = m->PWMperiod;
  4902   001340  EE20 F003          	lfsr	2,3
  4903   001344  5010               	movf	setMotorPWM@m^0,w,c
  4904   001346  26D9               	addwf	fsr2l,f,c
  4905   001348  5011               	movf	(setMotorPWM@m+1)^0,w,c
  4906   00134A  22DA               	addwfc	fsr2h,f,c
  4907   00134C  50DF               	movf	indf2,w,c
  4908   00134E  6E15               	movwf	setMotorPWM@negDuty^0,c
  4909                           
  4910                           ;dc_motor.c: 83:     }
  4911   001350  EFCD  F009         	goto	l2283
  4912   001354                     l2279:
  4913                           
  4914                           ;dc_motor.c: 85:         posDuty=0;
  4915   001354  0E00               	movlw	0
  4916   001356  6E14               	movwf	setMotorPWM@posDuty^0,c
  4917   001358                     
  4918                           ;dc_motor.c: 86:   negDuty=((unsigned int)(m->power)*(m->PWMperiod))/100;
  4919   001358  C010  FFD9         	movff	setMotorPWM@m,fsr2l
  4920   00135C  C011  FFDA         	movff	setMotorPWM@m+1,fsr2h
  4921   001360  50DF               	movf	indf2,w,c
  4922   001362  6E12               	movwf	??_setMotorPWM^0,c
  4923   001364  5012               	movf	??_setMotorPWM^0,w,c
  4924   001366  6E03               	movwf	___wmul@multiplier^0,c
  4925   001368  6A04               	clrf	(___wmul@multiplier+1)^0,c
  4926   00136A  EE20 F003          	lfsr	2,3
  4927   00136E  5010               	movf	setMotorPWM@m^0,w,c
  4928   001370  26D9               	addwf	fsr2l,f,c
  4929   001372  5011               	movf	(setMotorPWM@m+1)^0,w,c
  4930   001374  22DA               	addwfc	fsr2h,f,c
  4931   001376  CFDE F005          	movff	postinc2,___wmul@multiplicand
  4932   00137A  CFDD F006          	movff	postdec2,___wmul@multiplicand+1
  4933   00137E  EC1C  F011         	call	___wmul	;wreg free
  4934   001382  C003  F009         	movff	?___wmul,___lwdiv@dividend
  4935   001386  C004  F00A         	movff	?___wmul+1,___lwdiv@dividend+1
  4936   00138A  0E00               	movlw	0
  4937   00138C  6E0C               	movwf	(___lwdiv@divisor+1)^0,c
  4938   00138E  0E64               	movlw	100
  4939   001390  6E0B               	movwf	___lwdiv@divisor^0,c
  4940   001392  ECBE  F00E         	call	___lwdiv	;wreg free
  4941   001396  5009               	movf	?___lwdiv^0,w,c
  4942   001398  6E15               	movwf	setMotorPWM@negDuty^0,c
  4943   00139A                     l2283:
  4944                           
  4945                           ;dc_motor.c: 89:     if (m->direction) {
  4946   00139A  EE20 F001          	lfsr	2,1
  4947   00139E  5010               	movf	setMotorPWM@m^0,w,c
  4948   0013A0  26D9               	addwf	fsr2l,f,c
  4949   0013A2  5011               	movf	(setMotorPWM@m+1)^0,w,c
  4950   0013A4  22DA               	addwfc	fsr2h,f,c
  4951   0013A6  50DF               	movf	indf2,w,c
  4952   0013A8  B4D8               	btfsc	status,2,c
  4953   0013AA  EFD9  F009         	goto	u1331
  4954   0013AE  EFDB  F009         	goto	u1330
  4955   0013B2                     u1331:
  4956   0013B2  EFFD  F009         	goto	l2287
  4957   0013B6                     u1330:
  4958   0013B6                     
  4959                           ;dc_motor.c: 90:         *(m->posDutyHighByte)= posDuty;
  4960   0013B6  EE20 F005          	lfsr	2,5
  4961   0013BA  5010               	movf	setMotorPWM@m^0,w,c
  4962   0013BC  26D9               	addwf	fsr2l,f,c
  4963   0013BE  5011               	movf	(setMotorPWM@m+1)^0,w,c
  4964   0013C0  22DA               	addwfc	fsr2h,f,c
  4965   0013C2  CFDE F012          	movff	postinc2,??_setMotorPWM
  4966   0013C6  CFDD F013          	movff	postdec2,??_setMotorPWM+1
  4967   0013CA  C012  FFD9         	movff	??_setMotorPWM,fsr2l
  4968   0013CE  C013  FFDA         	movff	??_setMotorPWM+1,fsr2h
  4969   0013D2  C014  FFDF         	movff	setMotorPWM@posDuty,indf2
  4970                           
  4971                           ;dc_motor.c: 91:         *(m->negDutyHighByte)= negDuty;
  4972   0013D6  EE20 F007          	lfsr	2,7
  4973   0013DA  5010               	movf	setMotorPWM@m^0,w,c
  4974   0013DC  26D9               	addwf	fsr2l,f,c
  4975   0013DE  5011               	movf	(setMotorPWM@m+1)^0,w,c
  4976   0013E0  22DA               	addwfc	fsr2h,f,c
  4977   0013E2  CFDE F012          	movff	postinc2,??_setMotorPWM
  4978   0013E6  CFDD F013          	movff	postdec2,??_setMotorPWM+1
  4979   0013EA  C012  FFD9         	movff	??_setMotorPWM,fsr2l
  4980   0013EE  C013  FFDA         	movff	??_setMotorPWM+1,fsr2h
  4981   0013F2  C015  FFDF         	movff	setMotorPWM@negDuty,indf2
  4982                           
  4983                           ;dc_motor.c: 92:     } else {
  4984   0013F6  EF1D  F00A         	goto	l277
  4985   0013FA                     l2287:
  4986                           
  4987                           ;dc_motor.c: 93:         *(m->posDutyHighByte)= negDuty;
  4988   0013FA  EE20 F005          	lfsr	2,5
  4989   0013FE  5010               	movf	setMotorPWM@m^0,w,c
  4990   001400  26D9               	addwf	fsr2l,f,c
  4991   001402  5011               	movf	(setMotorPWM@m+1)^0,w,c
  4992   001404  22DA               	addwfc	fsr2h,f,c
  4993   001406  CFDE F012          	movff	postinc2,??_setMotorPWM
  4994   00140A  CFDD F013          	movff	postdec2,??_setMotorPWM+1
  4995   00140E  C012  FFD9         	movff	??_setMotorPWM,fsr2l
  4996   001412  C013  FFDA         	movff	??_setMotorPWM+1,fsr2h
  4997   001416  C015  FFDF         	movff	setMotorPWM@negDuty,indf2
  4998                           
  4999                           ;dc_motor.c: 94:         *(m->negDutyHighByte)= posDuty;
  5000   00141A  EE20 F007          	lfsr	2,7
  5001   00141E  5010               	movf	setMotorPWM@m^0,w,c
  5002   001420  26D9               	addwf	fsr2l,f,c
  5003   001422  5011               	movf	(setMotorPWM@m+1)^0,w,c
  5004   001424  22DA               	addwfc	fsr2h,f,c
  5005   001426  CFDE F012          	movff	postinc2,??_setMotorPWM
  5006   00142A  CFDD F013          	movff	postdec2,??_setMotorPWM+1
  5007   00142E  C012  FFD9         	movff	??_setMotorPWM,fsr2l
  5008   001432  C013  FFDA         	movff	??_setMotorPWM+1,fsr2h
  5009   001436  C014  FFDF         	movff	setMotorPWM@posDuty,indf2
  5010   00143A                     l277:
  5011   00143A  0012               	return		;funcret
  5012   00143C                     __end_of_setMotorPWM:
  5013                           	callstack 0
  5014                           
  5015 ;; *************** function ___wmul *****************
  5016 ;; Defined at:
  5017 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\Umul16.c"
  5018 ;; Parameters:    Size  Location     Type
  5019 ;;  multiplier      2    2[COMRAM] unsigned int 
  5020 ;;  multiplicand    2    4[COMRAM] unsigned int 
  5021 ;; Auto vars:     Size  Location     Type
  5022 ;;  product         2    6[COMRAM] unsigned int 
  5023 ;; Return value:  Size  Location     Type
  5024 ;;                  2    2[COMRAM] unsigned int 
  5025 ;; Registers used:
  5026 ;;		wreg, status,2, status,0, prodl, prodh
  5027 ;; Tracked objects:
  5028 ;;		On entry : 0/0
  5029 ;;		On exit  : 0/0
  5030 ;;		Unchanged: 0/0
  5031 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5032 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5033 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5034 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5035 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5036 ;;Total ram usage:        6 bytes
  5037 ;; Hardware stack levels used: 1
  5038 ;; Hardware stack levels required when called: 1
  5039 ;; This function calls:
  5040 ;;		Nothing
  5041 ;; This function is called by:
  5042 ;;		_setMotorPWM
  5043 ;; This function uses a non-reentrant model
  5044 ;;
  5045                           
  5046                           	psect	text28
  5047   002238                     __ptext28:
  5048                           	callstack 0
  5049   002238                     ___wmul:
  5050                           	callstack 26
  5051   002238  5003               	movf	___wmul@multiplier^0,w,c
  5052   00223A  0205               	mulwf	___wmul@multiplicand^0,c
  5053   00223C  CFF3 F007          	movff	prodl,___wmul@product
  5054   002240  CFF4 F008          	movff	prodh,___wmul@product+1
  5055   002244  5003               	movf	___wmul@multiplier^0,w,c
  5056   002246  0206               	mulwf	(___wmul@multiplicand+1)^0,c
  5057   002248  50F3               	movf	243,w,c
  5058   00224A  2608               	addwf	(___wmul@product+1)^0,f,c
  5059   00224C  5004               	movf	(___wmul@multiplier+1)^0,w,c
  5060   00224E  0205               	mulwf	___wmul@multiplicand^0,c
  5061   002250  50F3               	movf	243,w,c
  5062   002252  2608               	addwf	(___wmul@product+1)^0,f,c
  5063   002254  C007  F003         	movff	___wmul@product,?___wmul
  5064   002258  C008  F004         	movff	___wmul@product+1,?___wmul+1
  5065   00225C  0012               	return		;funcret
  5066   00225E                     __end_of___wmul:
  5067                           	callstack 0
  5068                           
  5069 ;; *************** function ___lwdiv *****************
  5070 ;; Defined at:
  5071 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\lwdiv.c"
  5072 ;; Parameters:    Size  Location     Type
  5073 ;;  dividend        2    8[COMRAM] unsigned int 
  5074 ;;  divisor         2   10[COMRAM] unsigned int 
  5075 ;; Auto vars:     Size  Location     Type
  5076 ;;  quotient        2   12[COMRAM] unsigned int 
  5077 ;;  counter         1   14[COMRAM] unsigned char 
  5078 ;; Return value:  Size  Location     Type
  5079 ;;                  2    8[COMRAM] unsigned int 
  5080 ;; Registers used:
  5081 ;;		wreg, status,2, status,0
  5082 ;; Tracked objects:
  5083 ;;		On entry : 0/0
  5084 ;;		On exit  : 0/0
  5085 ;;		Unchanged: 0/0
  5086 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5087 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5088 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5089 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5090 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5091 ;;Total ram usage:        7 bytes
  5092 ;; Hardware stack levels used: 1
  5093 ;; Hardware stack levels required when called: 1
  5094 ;; This function calls:
  5095 ;;		Nothing
  5096 ;; This function is called by:
  5097 ;;		_setMotorPWM
  5098 ;; This function uses a non-reentrant model
  5099 ;;
  5100                           
  5101                           	psect	text29
  5102   001D7C                     __ptext29:
  5103                           	callstack 0
  5104   001D7C                     ___lwdiv:
  5105                           	callstack 26
  5106   001D7C  0E00               	movlw	0
  5107   001D7E  6E0E               	movwf	(___lwdiv@quotient+1)^0,c
  5108   001D80  0E00               	movlw	0
  5109   001D82  6E0D               	movwf	___lwdiv@quotient^0,c
  5110   001D84  500B               	movf	___lwdiv@divisor^0,w,c
  5111   001D86  100C               	iorwf	(___lwdiv@divisor+1)^0,w,c
  5112   001D88  B4D8               	btfsc	status,2,c
  5113   001D8A  EFC9  F00E         	goto	u1291
  5114   001D8E  EFCB  F00E         	goto	u1290
  5115   001D92                     u1291:
  5116   001D92  EFF3  F00E         	goto	l1077
  5117   001D96                     u1290:
  5118   001D96  0E01               	movlw	1
  5119   001D98  6E0F               	movwf	___lwdiv@counter^0,c
  5120   001D9A  EFD3  F00E         	goto	l2259
  5121   001D9E                     l2257:
  5122   001D9E  90D8               	bcf	status,0,c
  5123   001DA0  360B               	rlcf	___lwdiv@divisor^0,f,c
  5124   001DA2  360C               	rlcf	(___lwdiv@divisor+1)^0,f,c
  5125   001DA4  2A0F               	incf	___lwdiv@counter^0,f,c
  5126   001DA6                     l2259:
  5127   001DA6  AE0C               	btfss	(___lwdiv@divisor+1)^0,7,c
  5128   001DA8  EFD8  F00E         	goto	u1301
  5129   001DAC  EFDA  F00E         	goto	u1300
  5130   001DB0                     u1301:
  5131   001DB0  EFCF  F00E         	goto	l2257
  5132   001DB4                     u1300:
  5133   001DB4                     l2261:
  5134   001DB4  90D8               	bcf	status,0,c
  5135   001DB6  360D               	rlcf	___lwdiv@quotient^0,f,c
  5136   001DB8  360E               	rlcf	(___lwdiv@quotient+1)^0,f,c
  5137   001DBA  500B               	movf	___lwdiv@divisor^0,w,c
  5138   001DBC  5C09               	subwf	___lwdiv@dividend^0,w,c
  5139   001DBE  500C               	movf	(___lwdiv@divisor+1)^0,w,c
  5140   001DC0  580A               	subwfb	(___lwdiv@dividend+1)^0,w,c
  5141   001DC2  A0D8               	btfss	status,0,c
  5142   001DC4  EFE6  F00E         	goto	u1311
  5143   001DC8  EFE8  F00E         	goto	u1310
  5144   001DCC                     u1311:
  5145   001DCC  EFED  F00E         	goto	l2269
  5146   001DD0                     u1310:
  5147   001DD0  500B               	movf	___lwdiv@divisor^0,w,c
  5148   001DD2  5E09               	subwf	___lwdiv@dividend^0,f,c
  5149   001DD4  500C               	movf	(___lwdiv@divisor+1)^0,w,c
  5150   001DD6  5A0A               	subwfb	(___lwdiv@dividend+1)^0,f,c
  5151   001DD8  800D               	bsf	___lwdiv@quotient^0,0,c
  5152   001DDA                     l2269:
  5153   001DDA  90D8               	bcf	status,0,c
  5154   001DDC  320C               	rrcf	(___lwdiv@divisor+1)^0,f,c
  5155   001DDE  320B               	rrcf	___lwdiv@divisor^0,f,c
  5156   001DE0  2E0F               	decfsz	___lwdiv@counter^0,f,c
  5157   001DE2  EFDA  F00E         	goto	l2261
  5158   001DE6                     l1077:
  5159   001DE6  C00D  F009         	movff	___lwdiv@quotient,?___lwdiv
  5160   001DEA  C00E  F00A         	movff	___lwdiv@quotient+1,?___lwdiv+1
  5161   001DEE  0012               	return		;funcret
  5162   001DF0                     __end_of___lwdiv:
  5163                           	callstack 0
  5164                           
  5165 ;; *************** function _custom_delay *****************
  5166 ;; Defined at:
  5167 ;;		line 37 in file "calibration.c"
  5168 ;; Parameters:    Size  Location     Type
  5169 ;;  temp            2    2[COMRAM] int 
  5170 ;; Auto vars:     Size  Location     Type
  5171 ;;  i               2    5[COMRAM] int 
  5172 ;; Return value:  Size  Location     Type
  5173 ;;                  1    wreg      void 
  5174 ;; Registers used:
  5175 ;;		wreg, status,2, status,0
  5176 ;; Tracked objects:
  5177 ;;		On entry : 0/0
  5178 ;;		On exit  : 0/0
  5179 ;;		Unchanged: 0/0
  5180 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5181 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5182 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5183 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5184 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5185 ;;Total ram usage:        5 bytes
  5186 ;; Hardware stack levels used: 1
  5187 ;; Hardware stack levels required when called: 1
  5188 ;; This function calls:
  5189 ;;		Nothing
  5190 ;; This function is called by:
  5191 ;;		_left_45
  5192 ;;		_right_45
  5193 ;; This function uses a non-reentrant model
  5194 ;;
  5195                           
  5196                           	psect	text30
  5197   002172                     __ptext30:
  5198                           	callstack 0
  5199   002172                     _custom_delay:
  5200                           	callstack 25
  5201   002172                     
  5202                           ;calibration.c: 38: int i;;calibration.c: 39: for (i = 0; i < temp; i++){_delay((unsigne
      +                          d long)((1)*(64000000/4000.0)));}
  5203   002172  0E00               	movlw	0
  5204   002174  6E07               	movwf	(custom_delay@i+1)^0,c
  5205   002176  0E00               	movlw	0
  5206   002178  6E06               	movwf	custom_delay@i^0,c
  5207   00217A  EFC9  F010         	goto	l507
  5208   00217E                     l2317:
  5209   00217E  0E15               	movlw	21
  5210   002180  6E05               	movwf	??_custom_delay^0,c
  5211   002182  0EC6               	movlw	198
  5212   002184                     u2857:
  5213   002184  2EE8               	decfsz	wreg,f,c
  5214   002186  D7FE               	bra	u2857
  5215   002188  2E05               	decfsz	??_custom_delay^0,f,c
  5216   00218A  D7FC               	bra	u2857
  5217   00218C  D000               	nop2	
  5218   00218E  4A06               	infsnz	custom_delay@i^0,f,c
  5219   002190  2A07               	incf	(custom_delay@i+1)^0,f,c
  5220   002192                     l507:
  5221   002192  5003               	movf	custom_delay@temp^0,w,c
  5222   002194  5C06               	subwf	custom_delay@i^0,w,c
  5223   002196  5007               	movf	(custom_delay@i+1)^0,w,c
  5224   002198  0A80               	xorlw	128
  5225   00219A  6E05               	movwf	??_custom_delay^0,c
  5226   00219C  5004               	movf	(custom_delay@temp+1)^0,w,c
  5227   00219E  0A80               	xorlw	128
  5228   0021A0  5805               	subwfb	??_custom_delay^0,w,c
  5229   0021A2  A0D8               	btfss	status,0,c
  5230   0021A4  EFD6  F010         	goto	u1341
  5231   0021A8  EFD8  F010         	goto	u1340
  5232   0021AC                     u1341:
  5233   0021AC  EFBF  F010         	goto	l2317
  5234   0021B0                     u1340:
  5235   0021B0  0012               	return		;funcret
  5236   0021B2                     __end_of_custom_delay:
  5237                           	callstack 0
  5238                           
  5239 ;; *************** function ___flge *****************
  5240 ;; Defined at:
  5241 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\flge.c"
  5242 ;; Parameters:    Size  Location     Type
  5243 ;;  ff1             4    2[COMRAM] void 
  5244 ;;  ff2             4    6[COMRAM] void 
  5245 ;; Auto vars:     Size  Location     Type
  5246 ;;		None
  5247 ;; Return value:  Size  Location     Type
  5248 ;;		None               void
  5249 ;; Registers used:
  5250 ;;		wreg, status,2, status,0
  5251 ;; Tracked objects:
  5252 ;;		On entry : 0/0
  5253 ;;		On exit  : 0/0
  5254 ;;		Unchanged: 0/0
  5255 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5256 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5257 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5258 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5259 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5260 ;;Total ram usage:       12 bytes
  5261 ;; Hardware stack levels used: 1
  5262 ;; Hardware stack levels required when called: 1
  5263 ;; This function calls:
  5264 ;;		Nothing
  5265 ;; This function is called by:
  5266 ;;		_buggy_color_response
  5267 ;; This function uses a non-reentrant model
  5268 ;;
  5269                           
  5270                           	psect	text31
  5271   0017EE                     __ptext31:
  5272                           	callstack 0
  5273   0017EE                     ___flge:
  5274                           	callstack 28
  5275   0017EE  0E00               	movlw	0
  5276   0017F0  1403               	andwf	___flge@ff1^0,w,c
  5277   0017F2  6E0B               	movwf	??___flge^0,c
  5278   0017F4  0E00               	movlw	0
  5279   0017F6  1404               	andwf	(___flge@ff1+1)^0,w,c
  5280   0017F8  6E0C               	movwf	(??___flge+1)^0,c
  5281   0017FA  0E80               	movlw	128
  5282   0017FC  1405               	andwf	(___flge@ff1+2)^0,w,c
  5283   0017FE  6E0D               	movwf	(??___flge+2)^0,c
  5284   001800  0E7F               	movlw	127
  5285   001802  1406               	andwf	(___flge@ff1+3)^0,w,c
  5286   001804  6E0E               	movwf	(??___flge+3)^0,c
  5287   001806  500B               	movf	??___flge^0,w,c
  5288   001808  100C               	iorwf	(??___flge+1)^0,w,c
  5289   00180A  100D               	iorwf	(??___flge+2)^0,w,c
  5290   00180C  100E               	iorwf	(??___flge+3)^0,w,c
  5291   00180E  A4D8               	btfss	status,2,c
  5292   001810  EF0C  F00C         	goto	u2091
  5293   001814  EF0E  F00C         	goto	u2090
  5294   001818                     u2091:
  5295   001818  EF16  F00C         	goto	l2961
  5296   00181C                     u2090:
  5297   00181C  0E00               	movlw	0
  5298   00181E  6E03               	movwf	___flge@ff1^0,c
  5299   001820  0E00               	movlw	0
  5300   001822  6E04               	movwf	(___flge@ff1+1)^0,c
  5301   001824  0E00               	movlw	0
  5302   001826  6E05               	movwf	(___flge@ff1+2)^0,c
  5303   001828  0E00               	movlw	0
  5304   00182A  6E06               	movwf	(___flge@ff1+3)^0,c
  5305   00182C                     l2961:
  5306   00182C  0E00               	movlw	0
  5307   00182E  1407               	andwf	___flge@ff2^0,w,c
  5308   001830  6E0B               	movwf	??___flge^0,c
  5309   001832  0E00               	movlw	0
  5310   001834  1408               	andwf	(___flge@ff2+1)^0,w,c
  5311   001836  6E0C               	movwf	(??___flge+1)^0,c
  5312   001838  0E80               	movlw	128
  5313   00183A  1409               	andwf	(___flge@ff2+2)^0,w,c
  5314   00183C  6E0D               	movwf	(??___flge+2)^0,c
  5315   00183E  0E7F               	movlw	127
  5316   001840  140A               	andwf	(___flge@ff2+3)^0,w,c
  5317   001842  6E0E               	movwf	(??___flge+3)^0,c
  5318   001844  500B               	movf	??___flge^0,w,c
  5319   001846  100C               	iorwf	(??___flge+1)^0,w,c
  5320   001848  100D               	iorwf	(??___flge+2)^0,w,c
  5321   00184A  100E               	iorwf	(??___flge+3)^0,w,c
  5322   00184C  A4D8               	btfss	status,2,c
  5323   00184E  EF2B  F00C         	goto	u2101
  5324   001852  EF2D  F00C         	goto	u2100
  5325   001856                     u2101:
  5326   001856  EF35  F00C         	goto	l2965
  5327   00185A                     u2100:
  5328   00185A  0E00               	movlw	0
  5329   00185C  6E07               	movwf	___flge@ff2^0,c
  5330   00185E  0E00               	movlw	0
  5331   001860  6E08               	movwf	(___flge@ff2+1)^0,c
  5332   001862  0E00               	movlw	0
  5333   001864  6E09               	movwf	(___flge@ff2+2)^0,c
  5334   001866  0E00               	movlw	0
  5335   001868  6E0A               	movwf	(___flge@ff2+3)^0,c
  5336   00186A                     l2965:
  5337   00186A  AE06               	btfss	(___flge@ff1+3)^0,7,c
  5338   00186C  EF3A  F00C         	goto	u2111
  5339   001870  EF3C  F00C         	goto	u2110
  5340   001874                     u2111:
  5341   001874  EF45  F00C         	goto	l2969
  5342   001878                     u2110:
  5343   001878  6C03               	negf	___flge@ff1^0,c
  5344   00187A  1E04               	comf	(___flge@ff1+1)^0,f,c
  5345   00187C  B0D8               	btfsc	status,0,c
  5346   00187E  2A04               	incf	(___flge@ff1+1)^0,f,c
  5347   001880  1E05               	comf	(___flge@ff1+2)^0,f,c
  5348   001882  B0D8               	btfsc	status,0,c
  5349   001884  2A05               	incf	(___flge@ff1+2)^0,f,c
  5350   001886  0E80               	movlw	128
  5351   001888  5606               	subfwb	(___flge@ff1+3)^0,f,c
  5352   00188A                     l2969:
  5353   00188A  AE0A               	btfss	(___flge@ff2+3)^0,7,c
  5354   00188C  EF4A  F00C         	goto	u2121
  5355   001890  EF4C  F00C         	goto	u2120
  5356   001894                     u2121:
  5357   001894  EF55  F00C         	goto	l851
  5358   001898                     u2120:
  5359   001898  6C07               	negf	___flge@ff2^0,c
  5360   00189A  1E08               	comf	(___flge@ff2+1)^0,f,c
  5361   00189C  B0D8               	btfsc	status,0,c
  5362   00189E  2A08               	incf	(___flge@ff2+1)^0,f,c
  5363   0018A0  1E09               	comf	(___flge@ff2+2)^0,f,c
  5364   0018A2  B0D8               	btfsc	status,0,c
  5365   0018A4  2A09               	incf	(___flge@ff2+2)^0,f,c
  5366   0018A6  0E80               	movlw	128
  5367   0018A8  560A               	subfwb	(___flge@ff2+3)^0,f,c
  5368   0018AA                     l851:
  5369   0018AA  0E00               	movlw	0
  5370   0018AC  1A03               	xorwf	___flge@ff1^0,f,c
  5371   0018AE  0E00               	movlw	0
  5372   0018B0  1A04               	xorwf	(___flge@ff1+1)^0,f,c
  5373   0018B2  0E00               	movlw	0
  5374   0018B4  1A05               	xorwf	(___flge@ff1+2)^0,f,c
  5375   0018B6  0E80               	movlw	128
  5376   0018B8  1A06               	xorwf	(___flge@ff1+3)^0,f,c
  5377   0018BA  0E00               	movlw	0
  5378   0018BC  1A07               	xorwf	___flge@ff2^0,f,c
  5379   0018BE  0E00               	movlw	0
  5380   0018C0  1A08               	xorwf	(___flge@ff2+1)^0,f,c
  5381   0018C2  0E00               	movlw	0
  5382   0018C4  1A09               	xorwf	(___flge@ff2+2)^0,f,c
  5383   0018C6  0E80               	movlw	128
  5384   0018C8  1A0A               	xorwf	(___flge@ff2+3)^0,f,c
  5385   0018CA  5007               	movf	___flge@ff2^0,w,c
  5386   0018CC  5C03               	subwf	___flge@ff1^0,w,c
  5387   0018CE  5008               	movf	(___flge@ff2+1)^0,w,c
  5388   0018D0  5804               	subwfb	(___flge@ff1+1)^0,w,c
  5389   0018D2  5009               	movf	(___flge@ff2+2)^0,w,c
  5390   0018D4  5805               	subwfb	(___flge@ff1+2)^0,w,c
  5391   0018D6  500A               	movf	(___flge@ff2+3)^0,w,c
  5392   0018D8  5806               	subwfb	(___flge@ff1+3)^0,w,c
  5393   0018DA  B0D8               	btfsc	status,0,c
  5394   0018DC  EF72  F00C         	goto	u2131
  5395   0018E0  EF74  F00C         	goto	u2130
  5396   0018E4                     u2131:
  5397   0018E4  EF77  F00C         	goto	l2975
  5398   0018E8                     u2130:
  5399   0018E8  90D8               	bcf	status,0,c
  5400   0018EA  EF78  F00C         	goto	l856
  5401   0018EE                     l2975:
  5402   0018EE  80D8               	bsf	status,0,c
  5403   0018F0                     l856:
  5404   0018F0  0012               	return		;funcret
  5405   0018F2                     __end_of___flge:
  5406                           	callstack 0
  5407                           
  5408 ;; *************** function _READcolor *****************
  5409 ;; Defined at:
  5410 ;;		line 112 in file "color.c"
  5411 ;; Parameters:    Size  Location     Type
  5412 ;;  c               2   41[COMRAM] PTR struct colors
  5413 ;;		 -> color(20), 
  5414 ;; Auto vars:     Size  Location     Type
  5415 ;;		None
  5416 ;; Return value:  Size  Location     Type
  5417 ;;                  1    wreg      void 
  5418 ;; Registers used:
  5419 ;;		wreg, status,2, status,0, cstack
  5420 ;; Tracked objects:
  5421 ;;		On entry : 0/0
  5422 ;;		On exit  : 0/0
  5423 ;;		Unchanged: 0/0
  5424 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5425 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5426 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5427 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5428 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5429 ;;Total ram usage:        2 bytes
  5430 ;; Hardware stack levels used: 1
  5431 ;; Hardware stack levels required when called: 4
  5432 ;; This function calls:
  5433 ;;		___fldiv
  5434 ;;		___xxtofl
  5435 ;;		_color_read_Blue
  5436 ;;		_color_read_Clear
  5437 ;;		_color_read_Green
  5438 ;;		_color_read_Red
  5439 ;; This function is called by:
  5440 ;;		_buggy_color_response
  5441 ;; This function uses a non-reentrant model
  5442 ;;
  5443                           
  5444                           	psect	text32
  5445   0016B4                     __ptext32:
  5446                           	callstack 0
  5447   0016B4                     _READcolor:
  5448                           	callstack 25
  5449   0016B4                     
  5450                           ;color.c: 114:     color.R = color_read_Red();
  5451   0016B4  EC91  F00F         	call	_color_read_Red	;wreg free
  5452   0016B8  C007  F045         	movff	?_color_read_Red,_color
  5453   0016BC  C008  F046         	movff	?_color_read_Red+1,_color+1
  5454                           
  5455                           ;color.c: 115:     color.B = color_read_Blue();
  5456   0016C0  EC09  F010         	call	_color_read_Blue	;wreg free
  5457   0016C4  C007  F047         	movff	?_color_read_Blue,_color+2
  5458   0016C8  C008  F048         	movff	?_color_read_Blue+1,_color+3
  5459                           
  5460                           ;color.c: 116:     color.G = color_read_Green();
  5461   0016CC  ECB9  F00F         	call	_color_read_Green	;wreg free
  5462   0016D0  C007  F049         	movff	?_color_read_Green,_color+4
  5463   0016D4  C008  F04A         	movff	?_color_read_Green+1,_color+5
  5464                           
  5465                           ;color.c: 117:     color.C = color_read_Clear();
  5466   0016D8  ECE1  F00F         	call	_color_read_Clear	;wreg free
  5467   0016DC  C007  F04B         	movff	?_color_read_Clear,_color+6
  5468   0016E0  C008  F04C         	movff	?_color_read_Clear+1,_color+7
  5469                           
  5470                           ;color.c: 119:     color.R_norm = (float)color.R / (float)color.C;
  5471   0016E4  C045  F003         	movff	_color,___xxtofl@val
  5472   0016E8  C046  F004         	movff	_color+1,___xxtofl@val+1
  5473   0016EC  6A05               	clrf	(___xxtofl@val+2)^0,c
  5474   0016EE  6A06               	clrf	(___xxtofl@val+3)^0,c
  5475   0016F0  0E00               	movlw	0
  5476   0016F2  ECD3  F007         	call	___xxtofl
  5477   0016F6  C003  F011         	movff	?___xxtofl,___fldiv@b
  5478   0016FA  C004  F012         	movff	?___xxtofl+1,___fldiv@b+1
  5479   0016FE  C005  F013         	movff	?___xxtofl+2,___fldiv@b+2
  5480   001702  C006  F014         	movff	?___xxtofl+3,___fldiv@b+3
  5481   001706  C04B  F003         	movff	_color+6,___xxtofl@val
  5482   00170A  C04C  F004         	movff	_color+7,___xxtofl@val+1
  5483   00170E  6A05               	clrf	(___xxtofl@val+2)^0,c
  5484   001710  6A06               	clrf	(___xxtofl@val+3)^0,c
  5485   001712  0E00               	movlw	0
  5486   001714  ECD3  F007         	call	___xxtofl
  5487   001718  C003  F015         	movff	?___xxtofl,___fldiv@a
  5488   00171C  C004  F016         	movff	?___xxtofl+1,___fldiv@a+1
  5489   001720  C005  F017         	movff	?___xxtofl+2,___fldiv@a+2
  5490   001724  C006  F018         	movff	?___xxtofl+3,___fldiv@a+3
  5491   001728  EC92  F003         	call	___fldiv	;wreg free
  5492   00172C  C011  F04D         	movff	?___fldiv,_color+8
  5493   001730  C012  F04E         	movff	?___fldiv+1,_color+9
  5494   001734  C013  F04F         	movff	?___fldiv+2,_color+10
  5495   001738  C014  F050         	movff	?___fldiv+3,_color+11
  5496                           
  5497                           ;color.c: 120:     color.B_norm = (float)color.B / (float)color.C;
  5498   00173C  C047  F003         	movff	_color+2,___xxtofl@val
  5499   001740  C048  F004         	movff	_color+3,___xxtofl@val+1
  5500   001744  6A05               	clrf	(___xxtofl@val+2)^0,c
  5501   001746  6A06               	clrf	(___xxtofl@val+3)^0,c
  5502   001748  0E00               	movlw	0
  5503   00174A  ECD3  F007         	call	___xxtofl
  5504   00174E  C003  F011         	movff	?___xxtofl,___fldiv@b
  5505   001752  C004  F012         	movff	?___xxtofl+1,___fldiv@b+1
  5506   001756  C005  F013         	movff	?___xxtofl+2,___fldiv@b+2
  5507   00175A  C006  F014         	movff	?___xxtofl+3,___fldiv@b+3
  5508   00175E  C04B  F003         	movff	_color+6,___xxtofl@val
  5509   001762  C04C  F004         	movff	_color+7,___xxtofl@val+1
  5510   001766  6A05               	clrf	(___xxtofl@val+2)^0,c
  5511   001768  6A06               	clrf	(___xxtofl@val+3)^0,c
  5512   00176A  0E00               	movlw	0
  5513   00176C  ECD3  F007         	call	___xxtofl
  5514   001770  C003  F015         	movff	?___xxtofl,___fldiv@a
  5515   001774  C004  F016         	movff	?___xxtofl+1,___fldiv@a+1
  5516   001778  C005  F017         	movff	?___xxtofl+2,___fldiv@a+2
  5517   00177C  C006  F018         	movff	?___xxtofl+3,___fldiv@a+3
  5518   001780  EC92  F003         	call	___fldiv	;wreg free
  5519   001784  C011  F051         	movff	?___fldiv,_color+12
  5520   001788  C012  F052         	movff	?___fldiv+1,_color+13
  5521   00178C  C013  F053         	movff	?___fldiv+2,_color+14
  5522   001790  C014  F054         	movff	?___fldiv+3,_color+15
  5523                           
  5524                           ;color.c: 121:     color.G_norm = (float)color.G / (float)color.C;
  5525   001794  C049  F003         	movff	_color+4,___xxtofl@val
  5526   001798  C04A  F004         	movff	_color+5,___xxtofl@val+1
  5527   00179C  6A05               	clrf	(___xxtofl@val+2)^0,c
  5528   00179E  6A06               	clrf	(___xxtofl@val+3)^0,c
  5529   0017A0  0E00               	movlw	0
  5530   0017A2  ECD3  F007         	call	___xxtofl
  5531   0017A6  C003  F011         	movff	?___xxtofl,___fldiv@b
  5532   0017AA  C004  F012         	movff	?___xxtofl+1,___fldiv@b+1
  5533   0017AE  C005  F013         	movff	?___xxtofl+2,___fldiv@b+2
  5534   0017B2  C006  F014         	movff	?___xxtofl+3,___fldiv@b+3
  5535   0017B6  C04B  F003         	movff	_color+6,___xxtofl@val
  5536   0017BA  C04C  F004         	movff	_color+7,___xxtofl@val+1
  5537   0017BE  6A05               	clrf	(___xxtofl@val+2)^0,c
  5538   0017C0  6A06               	clrf	(___xxtofl@val+3)^0,c
  5539   0017C2  0E00               	movlw	0
  5540   0017C4  ECD3  F007         	call	___xxtofl
  5541   0017C8  C003  F015         	movff	?___xxtofl,___fldiv@a
  5542   0017CC  C004  F016         	movff	?___xxtofl+1,___fldiv@a+1
  5543   0017D0  C005  F017         	movff	?___xxtofl+2,___fldiv@a+2
  5544   0017D4  C006  F018         	movff	?___xxtofl+3,___fldiv@a+3
  5545   0017D8  EC92  F003         	call	___fldiv	;wreg free
  5546   0017DC  C011  F055         	movff	?___fldiv,_color+16
  5547   0017E0  C012  F056         	movff	?___fldiv+1,_color+17
  5548   0017E4  C013  F057         	movff	?___fldiv+2,_color+18
  5549   0017E8  C014  F058         	movff	?___fldiv+3,_color+19
  5550   0017EC  0012               	return		;funcret
  5551   0017EE                     __end_of_READcolor:
  5552                           	callstack 0
  5553                           
  5554 ;; *************** function _color_read_Red *****************
  5555 ;; Defined at:
  5556 ;;		line 39 in file "color.c"
  5557 ;; Parameters:    Size  Location     Type
  5558 ;;		None
  5559 ;; Auto vars:     Size  Location     Type
  5560 ;;  tmp             2   11[COMRAM] unsigned int 
  5561 ;; Return value:  Size  Location     Type
  5562 ;;                  2    6[COMRAM] unsigned int 
  5563 ;; Registers used:
  5564 ;;		wreg, status,2, status,0, cstack
  5565 ;; Tracked objects:
  5566 ;;		On entry : 0/0
  5567 ;;		On exit  : 0/0
  5568 ;;		Unchanged: 0/0
  5569 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5570 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5571 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5572 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5573 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5574 ;;Total ram usage:        7 bytes
  5575 ;; Hardware stack levels used: 1
  5576 ;; Hardware stack levels required when called: 3
  5577 ;; This function calls:
  5578 ;;		_I2C_2_Master_Read
  5579 ;;		_I2C_2_Master_RepStart
  5580 ;;		_I2C_2_Master_Start
  5581 ;;		_I2C_2_Master_Stop
  5582 ;;		_I2C_2_Master_Write
  5583 ;; This function is called by:
  5584 ;;		_READcolor
  5585 ;; This function uses a non-reentrant model
  5586 ;;
  5587                           
  5588                           	psect	text33
  5589   001F22                     __ptext33:
  5590                           	callstack 0
  5591   001F22                     _color_read_Red:
  5592                           	callstack 25
  5593   001F22                     
  5594                           ;color.c: 41:  unsigned int tmp;;color.c: 42:  I2C_2_Master_Start();
  5595   001F22  ECA3  F011         	call	_I2C_2_Master_Start	;wreg free
  5596                           
  5597                           ;color.c: 43:  I2C_2_Master_Write(0x52 | 0x00);
  5598   001F26  0E52               	movlw	82
  5599   001F28  EC98  F011         	call	_I2C_2_Master_Write
  5600                           
  5601                           ;color.c: 45:  I2C_2_Master_Write(0xA0 | 0x16);
  5602   001F2C  0EB6               	movlw	182
  5603   001F2E  EC98  F011         	call	_I2C_2_Master_Write
  5604                           
  5605                           ;color.c: 46:  I2C_2_Master_RepStart();
  5606   001F32  ECA8  F011         	call	_I2C_2_Master_RepStart	;wreg free
  5607                           
  5608                           ;color.c: 47:  I2C_2_Master_Write(0x52 | 0x01);
  5609   001F36  0E53               	movlw	83
  5610   001F38  EC98  F011         	call	_I2C_2_Master_Write
  5611                           
  5612                           ;color.c: 48:  tmp=I2C_2_Master_Read(1);
  5613   001F3C  0E01               	movlw	1
  5614   001F3E  EC78  F010         	call	_I2C_2_Master_Read
  5615   001F42  6E09               	movwf	??_color_read_Red^0,c
  5616   001F44  5009               	movf	??_color_read_Red^0,w,c
  5617   001F46  6E0C               	movwf	color_read_Red@tmp^0,c
  5618   001F48  6A0D               	clrf	(color_read_Red@tmp+1)^0,c
  5619                           
  5620                           ;color.c: 49:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  5621   001F4A  0E00               	movlw	0
  5622   001F4C  EC78  F010         	call	_I2C_2_Master_Read
  5623   001F50  6E09               	movwf	??_color_read_Red^0,c
  5624   001F52  5009               	movf	??_color_read_Red^0,w,c
  5625   001F54  6E0B               	movwf	(??_color_read_Red+2)^0,c
  5626   001F56  6A0A               	clrf	(??_color_read_Red+1)^0,c
  5627   001F58  500C               	movf	color_read_Red@tmp^0,w,c
  5628   001F5A  100A               	iorwf	(??_color_read_Red+1)^0,w,c
  5629   001F5C  6E0C               	movwf	color_read_Red@tmp^0,c
  5630   001F5E  500D               	movf	(color_read_Red@tmp+1)^0,w,c
  5631   001F60  100B               	iorwf	(??_color_read_Red+2)^0,w,c
  5632   001F62  6E0D               	movwf	(color_read_Red@tmp+1)^0,c
  5633                           
  5634                           ;color.c: 50:  I2C_2_Master_Stop();
  5635   001F64  EC9E  F011         	call	_I2C_2_Master_Stop	;wreg free
  5636   001F68                     
  5637                           ;color.c: 51:  return tmp;
  5638   001F68  C00C  F007         	movff	color_read_Red@tmp,?_color_read_Red
  5639   001F6C  C00D  F008         	movff	color_read_Red@tmp+1,?_color_read_Red+1
  5640   001F70  0012               	return		;funcret
  5641   001F72                     __end_of_color_read_Red:
  5642                           	callstack 0
  5643                           
  5644 ;; *************** function _color_read_Green *****************
  5645 ;; Defined at:
  5646 ;;		line 75 in file "color.c"
  5647 ;; Parameters:    Size  Location     Type
  5648 ;;		None
  5649 ;; Auto vars:     Size  Location     Type
  5650 ;;  tmp             2   11[COMRAM] unsigned int 
  5651 ;; Return value:  Size  Location     Type
  5652 ;;                  2    6[COMRAM] unsigned int 
  5653 ;; Registers used:
  5654 ;;		wreg, status,2, status,0, cstack
  5655 ;; Tracked objects:
  5656 ;;		On entry : 0/0
  5657 ;;		On exit  : 0/0
  5658 ;;		Unchanged: 0/0
  5659 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5660 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5661 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5662 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5663 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5664 ;;Total ram usage:        7 bytes
  5665 ;; Hardware stack levels used: 1
  5666 ;; Hardware stack levels required when called: 3
  5667 ;; This function calls:
  5668 ;;		_I2C_2_Master_Read
  5669 ;;		_I2C_2_Master_RepStart
  5670 ;;		_I2C_2_Master_Start
  5671 ;;		_I2C_2_Master_Stop
  5672 ;;		_I2C_2_Master_Write
  5673 ;; This function is called by:
  5674 ;;		_READcolor
  5675 ;; This function uses a non-reentrant model
  5676 ;;
  5677                           
  5678                           	psect	text34
  5679   001F72                     __ptext34:
  5680                           	callstack 0
  5681   001F72                     _color_read_Green:
  5682                           	callstack 25
  5683   001F72                     
  5684                           ;color.c: 77:  unsigned int tmp;;color.c: 78:  I2C_2_Master_Start();
  5685   001F72  ECA3  F011         	call	_I2C_2_Master_Start	;wreg free
  5686                           
  5687                           ;color.c: 79:  I2C_2_Master_Write(0x52 | 0x00);
  5688   001F76  0E52               	movlw	82
  5689   001F78  EC98  F011         	call	_I2C_2_Master_Write
  5690                           
  5691                           ;color.c: 81:  I2C_2_Master_Write(0xA0 | 0x18);
  5692   001F7C  0EB8               	movlw	184
  5693   001F7E  EC98  F011         	call	_I2C_2_Master_Write
  5694                           
  5695                           ;color.c: 82:  I2C_2_Master_RepStart();
  5696   001F82  ECA8  F011         	call	_I2C_2_Master_RepStart	;wreg free
  5697                           
  5698                           ;color.c: 83:  I2C_2_Master_Write(0x52 | 0x01);
  5699   001F86  0E53               	movlw	83
  5700   001F88  EC98  F011         	call	_I2C_2_Master_Write
  5701                           
  5702                           ;color.c: 84:  tmp=I2C_2_Master_Read(1);
  5703   001F8C  0E01               	movlw	1
  5704   001F8E  EC78  F010         	call	_I2C_2_Master_Read
  5705   001F92  6E09               	movwf	??_color_read_Green^0,c
  5706   001F94  5009               	movf	??_color_read_Green^0,w,c
  5707   001F96  6E0C               	movwf	color_read_Green@tmp^0,c
  5708   001F98  6A0D               	clrf	(color_read_Green@tmp+1)^0,c
  5709                           
  5710                           ;color.c: 85:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  5711   001F9A  0E00               	movlw	0
  5712   001F9C  EC78  F010         	call	_I2C_2_Master_Read
  5713   001FA0  6E09               	movwf	??_color_read_Green^0,c
  5714   001FA2  5009               	movf	??_color_read_Green^0,w,c
  5715   001FA4  6E0B               	movwf	(??_color_read_Green+2)^0,c
  5716   001FA6  6A0A               	clrf	(??_color_read_Green+1)^0,c
  5717   001FA8  500C               	movf	color_read_Green@tmp^0,w,c
  5718   001FAA  100A               	iorwf	(??_color_read_Green+1)^0,w,c
  5719   001FAC  6E0C               	movwf	color_read_Green@tmp^0,c
  5720   001FAE  500D               	movf	(color_read_Green@tmp+1)^0,w,c
  5721   001FB0  100B               	iorwf	(??_color_read_Green+2)^0,w,c
  5722   001FB2  6E0D               	movwf	(color_read_Green@tmp+1)^0,c
  5723                           
  5724                           ;color.c: 86:  I2C_2_Master_Stop();
  5725   001FB4  EC9E  F011         	call	_I2C_2_Master_Stop	;wreg free
  5726   001FB8                     
  5727                           ;color.c: 87:  return tmp;
  5728   001FB8  C00C  F007         	movff	color_read_Green@tmp,?_color_read_Green
  5729   001FBC  C00D  F008         	movff	color_read_Green@tmp+1,?_color_read_Green+1
  5730   001FC0  0012               	return		;funcret
  5731   001FC2                     __end_of_color_read_Green:
  5732                           	callstack 0
  5733                           
  5734 ;; *************** function _color_read_Clear *****************
  5735 ;; Defined at:
  5736 ;;		line 93 in file "color.c"
  5737 ;; Parameters:    Size  Location     Type
  5738 ;;		None
  5739 ;; Auto vars:     Size  Location     Type
  5740 ;;  tmp             2   11[COMRAM] unsigned int 
  5741 ;; Return value:  Size  Location     Type
  5742 ;;                  2    6[COMRAM] unsigned int 
  5743 ;; Registers used:
  5744 ;;		wreg, status,2, status,0, cstack
  5745 ;; Tracked objects:
  5746 ;;		On entry : 0/0
  5747 ;;		On exit  : 0/0
  5748 ;;		Unchanged: 0/0
  5749 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5750 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5751 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5752 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5753 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5754 ;;Total ram usage:        7 bytes
  5755 ;; Hardware stack levels used: 1
  5756 ;; Hardware stack levels required when called: 3
  5757 ;; This function calls:
  5758 ;;		_I2C_2_Master_Read
  5759 ;;		_I2C_2_Master_RepStart
  5760 ;;		_I2C_2_Master_Start
  5761 ;;		_I2C_2_Master_Stop
  5762 ;;		_I2C_2_Master_Write
  5763 ;; This function is called by:
  5764 ;;		_READcolor
  5765 ;; This function uses a non-reentrant model
  5766 ;;
  5767                           
  5768                           	psect	text35
  5769   001FC2                     __ptext35:
  5770                           	callstack 0
  5771   001FC2                     _color_read_Clear:
  5772                           	callstack 25
  5773   001FC2                     
  5774                           ;color.c: 95:  unsigned int tmp;;color.c: 96:  I2C_2_Master_Start();
  5775   001FC2  ECA3  F011         	call	_I2C_2_Master_Start	;wreg free
  5776                           
  5777                           ;color.c: 97:  I2C_2_Master_Write(0x52 | 0x00);
  5778   001FC6  0E52               	movlw	82
  5779   001FC8  EC98  F011         	call	_I2C_2_Master_Write
  5780                           
  5781                           ;color.c: 99:  I2C_2_Master_Write(0xA0 | 0x14);
  5782   001FCC  0EB4               	movlw	180
  5783   001FCE  EC98  F011         	call	_I2C_2_Master_Write
  5784                           
  5785                           ;color.c: 100:  I2C_2_Master_RepStart();
  5786   001FD2  ECA8  F011         	call	_I2C_2_Master_RepStart	;wreg free
  5787                           
  5788                           ;color.c: 101:  I2C_2_Master_Write(0x52 | 0x01);
  5789   001FD6  0E53               	movlw	83
  5790   001FD8  EC98  F011         	call	_I2C_2_Master_Write
  5791                           
  5792                           ;color.c: 102:  tmp=I2C_2_Master_Read(1);
  5793   001FDC  0E01               	movlw	1
  5794   001FDE  EC78  F010         	call	_I2C_2_Master_Read
  5795   001FE2  6E09               	movwf	??_color_read_Clear^0,c
  5796   001FE4  5009               	movf	??_color_read_Clear^0,w,c
  5797   001FE6  6E0C               	movwf	color_read_Clear@tmp^0,c
  5798   001FE8  6A0D               	clrf	(color_read_Clear@tmp+1)^0,c
  5799                           
  5800                           ;color.c: 103:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  5801   001FEA  0E00               	movlw	0
  5802   001FEC  EC78  F010         	call	_I2C_2_Master_Read
  5803   001FF0  6E09               	movwf	??_color_read_Clear^0,c
  5804   001FF2  5009               	movf	??_color_read_Clear^0,w,c
  5805   001FF4  6E0B               	movwf	(??_color_read_Clear+2)^0,c
  5806   001FF6  6A0A               	clrf	(??_color_read_Clear+1)^0,c
  5807   001FF8  500C               	movf	color_read_Clear@tmp^0,w,c
  5808   001FFA  100A               	iorwf	(??_color_read_Clear+1)^0,w,c
  5809   001FFC  6E0C               	movwf	color_read_Clear@tmp^0,c
  5810   001FFE  500D               	movf	(color_read_Clear@tmp+1)^0,w,c
  5811   002000  100B               	iorwf	(??_color_read_Clear+2)^0,w,c
  5812   002002  6E0D               	movwf	(color_read_Clear@tmp+1)^0,c
  5813                           
  5814                           ;color.c: 104:  I2C_2_Master_Stop();
  5815   002004  EC9E  F011         	call	_I2C_2_Master_Stop	;wreg free
  5816   002008                     
  5817                           ;color.c: 105:  return tmp;
  5818   002008  C00C  F007         	movff	color_read_Clear@tmp,?_color_read_Clear
  5819   00200C  C00D  F008         	movff	color_read_Clear@tmp+1,?_color_read_Clear+1
  5820   002010  0012               	return		;funcret
  5821   002012                     __end_of_color_read_Clear:
  5822                           	callstack 0
  5823                           
  5824 ;; *************** function _color_read_Blue *****************
  5825 ;; Defined at:
  5826 ;;		line 57 in file "color.c"
  5827 ;; Parameters:    Size  Location     Type
  5828 ;;		None
  5829 ;; Auto vars:     Size  Location     Type
  5830 ;;  tmp             2   11[COMRAM] unsigned int 
  5831 ;; Return value:  Size  Location     Type
  5832 ;;                  2    6[COMRAM] unsigned int 
  5833 ;; Registers used:
  5834 ;;		wreg, status,2, status,0, cstack
  5835 ;; Tracked objects:
  5836 ;;		On entry : 0/0
  5837 ;;		On exit  : 0/0
  5838 ;;		Unchanged: 0/0
  5839 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5840 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5841 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5842 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5843 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5844 ;;Total ram usage:        7 bytes
  5845 ;; Hardware stack levels used: 1
  5846 ;; Hardware stack levels required when called: 3
  5847 ;; This function calls:
  5848 ;;		_I2C_2_Master_Read
  5849 ;;		_I2C_2_Master_RepStart
  5850 ;;		_I2C_2_Master_Start
  5851 ;;		_I2C_2_Master_Stop
  5852 ;;		_I2C_2_Master_Write
  5853 ;; This function is called by:
  5854 ;;		_READcolor
  5855 ;; This function uses a non-reentrant model
  5856 ;;
  5857                           
  5858                           	psect	text36
  5859   002012                     __ptext36:
  5860                           	callstack 0
  5861   002012                     _color_read_Blue:
  5862                           	callstack 25
  5863   002012                     
  5864                           ;color.c: 59:  unsigned int tmp;;color.c: 60:  I2C_2_Master_Start();
  5865   002012  ECA3  F011         	call	_I2C_2_Master_Start	;wreg free
  5866                           
  5867                           ;color.c: 61:  I2C_2_Master_Write(0x52 | 0x00);
  5868   002016  0E52               	movlw	82
  5869   002018  EC98  F011         	call	_I2C_2_Master_Write
  5870                           
  5871                           ;color.c: 63:  I2C_2_Master_Write(0xA0 | 0x1A);
  5872   00201C  0EBA               	movlw	186
  5873   00201E  EC98  F011         	call	_I2C_2_Master_Write
  5874                           
  5875                           ;color.c: 64:  I2C_2_Master_RepStart();
  5876   002022  ECA8  F011         	call	_I2C_2_Master_RepStart	;wreg free
  5877                           
  5878                           ;color.c: 65:  I2C_2_Master_Write(0x52 | 0x01);
  5879   002026  0E53               	movlw	83
  5880   002028  EC98  F011         	call	_I2C_2_Master_Write
  5881                           
  5882                           ;color.c: 66:  tmp=I2C_2_Master_Read(1);
  5883   00202C  0E01               	movlw	1
  5884   00202E  EC78  F010         	call	_I2C_2_Master_Read
  5885   002032  6E09               	movwf	??_color_read_Blue^0,c
  5886   002034  5009               	movf	??_color_read_Blue^0,w,c
  5887   002036  6E0C               	movwf	color_read_Blue@tmp^0,c
  5888   002038  6A0D               	clrf	(color_read_Blue@tmp+1)^0,c
  5889                           
  5890                           ;color.c: 67:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  5891   00203A  0E00               	movlw	0
  5892   00203C  EC78  F010         	call	_I2C_2_Master_Read
  5893   002040  6E09               	movwf	??_color_read_Blue^0,c
  5894   002042  5009               	movf	??_color_read_Blue^0,w,c
  5895   002044  6E0B               	movwf	(??_color_read_Blue+2)^0,c
  5896   002046  6A0A               	clrf	(??_color_read_Blue+1)^0,c
  5897   002048  500C               	movf	color_read_Blue@tmp^0,w,c
  5898   00204A  100A               	iorwf	(??_color_read_Blue+1)^0,w,c
  5899   00204C  6E0C               	movwf	color_read_Blue@tmp^0,c
  5900   00204E  500D               	movf	(color_read_Blue@tmp+1)^0,w,c
  5901   002050  100B               	iorwf	(??_color_read_Blue+2)^0,w,c
  5902   002052  6E0D               	movwf	(color_read_Blue@tmp+1)^0,c
  5903                           
  5904                           ;color.c: 68:  I2C_2_Master_Stop();
  5905   002054  EC9E  F011         	call	_I2C_2_Master_Stop	;wreg free
  5906   002058                     
  5907                           ;color.c: 69:  return tmp;
  5908   002058  C00C  F007         	movff	color_read_Blue@tmp,?_color_read_Blue
  5909   00205C  C00D  F008         	movff	color_read_Blue@tmp+1,?_color_read_Blue+1
  5910   002060  0012               	return		;funcret
  5911   002062                     __end_of_color_read_Blue:
  5912                           	callstack 0
  5913                           
  5914 ;; *************** function _I2C_2_Master_Write *****************
  5915 ;; Defined at:
  5916 ;;		line 63 in file "i2c.c"
  5917 ;; Parameters:    Size  Location     Type
  5918 ;;  data_byte       1    wreg     unsigned char 
  5919 ;; Auto vars:     Size  Location     Type
  5920 ;;  data_byte       1    3[COMRAM] unsigned char 
  5921 ;; Return value:  Size  Location     Type
  5922 ;;                  1    wreg      void 
  5923 ;; Registers used:
  5924 ;;		wreg, status,2, status,0, cstack
  5925 ;; Tracked objects:
  5926 ;;		On entry : 0/0
  5927 ;;		On exit  : 0/0
  5928 ;;		Unchanged: 0/0
  5929 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5930 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5931 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5932 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5933 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5934 ;;Total ram usage:        1 bytes
  5935 ;; Hardware stack levels used: 1
  5936 ;; Hardware stack levels required when called: 2
  5937 ;; This function calls:
  5938 ;;		_I2C_2_Master_Idle
  5939 ;; This function is called by:
  5940 ;;		_color_writetoaddr
  5941 ;;		_color_read_Red
  5942 ;;		_color_read_Blue
  5943 ;;		_color_read_Green
  5944 ;;		_color_read_Clear
  5945 ;; This function uses a non-reentrant model
  5946 ;;
  5947                           
  5948                           	psect	text37
  5949   002330                     __ptext37:
  5950                           	callstack 0
  5951   002330                     _I2C_2_Master_Write:
  5952                           	callstack 25
  5953                           
  5954                           ;incstack = 0
  5955                           ;I2C_2_Master_Write@data_byte stored from wreg
  5956   002330  6E04               	movwf	I2C_2_Master_Write@data_byte^0,c
  5957   002332                     
  5958                           ;i2c.c: 63: void I2C_2_Master_Write(unsigned char data_byte);i2c.c: 64: {;i2c.c: 65:   I
      +                          2C_2_Master_Idle();
  5959   002332  EC08  F011         	call	_I2C_2_Master_Idle	;wreg free
  5960   002336                     
  5961                           ;i2c.c: 66:   SSP2BUF = data_byte;
  5962   002336  C004  FED5         	movff	I2C_2_Master_Write@data_byte,3797	;volatile
  5963   00233A  0012               	return		;funcret
  5964   00233C                     __end_of_I2C_2_Master_Write:
  5965                           	callstack 0
  5966                           
  5967 ;; *************** function _I2C_2_Master_Stop *****************
  5968 ;; Defined at:
  5969 ;;		line 54 in file "i2c.c"
  5970 ;; Parameters:    Size  Location     Type
  5971 ;;		None
  5972 ;; Auto vars:     Size  Location     Type
  5973 ;;		None
  5974 ;; Return value:  Size  Location     Type
  5975 ;;                  1    wreg      void 
  5976 ;; Registers used:
  5977 ;;		wreg, status,2, status,0, cstack
  5978 ;; Tracked objects:
  5979 ;;		On entry : 0/0
  5980 ;;		On exit  : 0/0
  5981 ;;		Unchanged: 0/0
  5982 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5983 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5984 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5985 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5986 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5987 ;;Total ram usage:        0 bytes
  5988 ;; Hardware stack levels used: 1
  5989 ;; Hardware stack levels required when called: 2
  5990 ;; This function calls:
  5991 ;;		_I2C_2_Master_Idle
  5992 ;; This function is called by:
  5993 ;;		_color_writetoaddr
  5994 ;;		_color_read_Red
  5995 ;;		_color_read_Blue
  5996 ;;		_color_read_Green
  5997 ;;		_color_read_Clear
  5998 ;; This function uses a non-reentrant model
  5999 ;;
  6000                           
  6001                           	psect	text38
  6002   00233C                     __ptext38:
  6003                           	callstack 0
  6004   00233C                     _I2C_2_Master_Stop:
  6005                           	callstack 25
  6006   00233C                     
  6007                           ;i2c.c: 56:   I2C_2_Master_Idle();
  6008   00233C  EC08  F011         	call	_I2C_2_Master_Idle	;wreg free
  6009   002340                     
  6010                           ;i2c.c: 57:   SSP2CON2bits.PEN = 1;
  6011   002340  010E               	movlb	14	; () banked
  6012   002342  85DA               	bsf	218,2,b	;volatile
  6013   002344                     
  6014                           ; BSR set to: 14
  6015   002344  0012               	return		;funcret
  6016   002346                     __end_of_I2C_2_Master_Stop:
  6017                           	callstack 0
  6018                           
  6019 ;; *************** function _I2C_2_Master_Start *****************
  6020 ;; Defined at:
  6021 ;;		line 36 in file "i2c.c"
  6022 ;; Parameters:    Size  Location     Type
  6023 ;;		None
  6024 ;; Auto vars:     Size  Location     Type
  6025 ;;		None
  6026 ;; Return value:  Size  Location     Type
  6027 ;;                  1    wreg      void 
  6028 ;; Registers used:
  6029 ;;		wreg, status,2, status,0, cstack
  6030 ;; Tracked objects:
  6031 ;;		On entry : 0/0
  6032 ;;		On exit  : 0/0
  6033 ;;		Unchanged: 0/0
  6034 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6035 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6036 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6037 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6038 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6039 ;;Total ram usage:        0 bytes
  6040 ;; Hardware stack levels used: 1
  6041 ;; Hardware stack levels required when called: 2
  6042 ;; This function calls:
  6043 ;;		_I2C_2_Master_Idle
  6044 ;; This function is called by:
  6045 ;;		_color_writetoaddr
  6046 ;;		_color_read_Red
  6047 ;;		_color_read_Blue
  6048 ;;		_color_read_Green
  6049 ;;		_color_read_Clear
  6050 ;; This function uses a non-reentrant model
  6051 ;;
  6052                           
  6053                           	psect	text39
  6054   002346                     __ptext39:
  6055                           	callstack 0
  6056   002346                     _I2C_2_Master_Start:
  6057                           	callstack 25
  6058   002346                     
  6059                           ;i2c.c: 38:   I2C_2_Master_Idle();
  6060   002346  EC08  F011         	call	_I2C_2_Master_Idle	;wreg free
  6061   00234A                     
  6062                           ;i2c.c: 39:   SSP2CON2bits.SEN = 1;
  6063   00234A  010E               	movlb	14	; () banked
  6064   00234C  81DA               	bsf	218,0,b	;volatile
  6065   00234E                     
  6066                           ; BSR set to: 14
  6067   00234E  0012               	return		;funcret
  6068   002350                     __end_of_I2C_2_Master_Start:
  6069                           	callstack 0
  6070                           
  6071 ;; *************** function _I2C_2_Master_RepStart *****************
  6072 ;; Defined at:
  6073 ;;		line 45 in file "i2c.c"
  6074 ;; Parameters:    Size  Location     Type
  6075 ;;		None
  6076 ;; Auto vars:     Size  Location     Type
  6077 ;;		None
  6078 ;; Return value:  Size  Location     Type
  6079 ;;                  1    wreg      void 
  6080 ;; Registers used:
  6081 ;;		wreg, status,2, status,0, cstack
  6082 ;; Tracked objects:
  6083 ;;		On entry : 0/0
  6084 ;;		On exit  : 0/0
  6085 ;;		Unchanged: 0/0
  6086 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6087 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6088 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6089 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6090 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6091 ;;Total ram usage:        0 bytes
  6092 ;; Hardware stack levels used: 1
  6093 ;; Hardware stack levels required when called: 2
  6094 ;; This function calls:
  6095 ;;		_I2C_2_Master_Idle
  6096 ;; This function is called by:
  6097 ;;		_color_read_Red
  6098 ;;		_color_read_Blue
  6099 ;;		_color_read_Green
  6100 ;;		_color_read_Clear
  6101 ;; This function uses a non-reentrant model
  6102 ;;
  6103                           
  6104                           	psect	text40
  6105   002350                     __ptext40:
  6106                           	callstack 0
  6107   002350                     _I2C_2_Master_RepStart:
  6108                           	callstack 25
  6109   002350                     
  6110                           ;i2c.c: 47:   I2C_2_Master_Idle();
  6111   002350  EC08  F011         	call	_I2C_2_Master_Idle	;wreg free
  6112   002354                     
  6113                           ;i2c.c: 48:   SSP2CON2bits.RSEN = 1;
  6114   002354  010E               	movlb	14	; () banked
  6115   002356  83DA               	bsf	218,1,b	;volatile
  6116   002358                     
  6117                           ; BSR set to: 14
  6118   002358  0012               	return		;funcret
  6119   00235A                     __end_of_I2C_2_Master_RepStart:
  6120                           	callstack 0
  6121                           
  6122 ;; *************** function _I2C_2_Master_Read *****************
  6123 ;; Defined at:
  6124 ;;		line 72 in file "i2c.c"
  6125 ;; Parameters:    Size  Location     Type
  6126 ;;  ack             1    wreg     unsigned char 
  6127 ;; Auto vars:     Size  Location     Type
  6128 ;;  ack             1    4[COMRAM] unsigned char 
  6129 ;;  tmp             1    5[COMRAM] unsigned char 
  6130 ;; Return value:  Size  Location     Type
  6131 ;;                  1    wreg      unsigned char 
  6132 ;; Registers used:
  6133 ;;		wreg, status,2, status,0, cstack
  6134 ;; Tracked objects:
  6135 ;;		On entry : 0/0
  6136 ;;		On exit  : 0/0
  6137 ;;		Unchanged: 0/0
  6138 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6139 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6140 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6141 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6142 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6143 ;;Total ram usage:        3 bytes
  6144 ;; Hardware stack levels used: 1
  6145 ;; Hardware stack levels required when called: 2
  6146 ;; This function calls:
  6147 ;;		_I2C_2_Master_Idle
  6148 ;; This function is called by:
  6149 ;;		_color_read_Red
  6150 ;;		_color_read_Blue
  6151 ;;		_color_read_Green
  6152 ;;		_color_read_Clear
  6153 ;; This function uses a non-reentrant model
  6154 ;;
  6155                           
  6156                           	psect	text41
  6157   0020F0                     __ptext41:
  6158                           	callstack 0
  6159   0020F0                     _I2C_2_Master_Read:
  6160                           	callstack 25
  6161                           
  6162                           ; BSR set to: 14
  6163                           ;incstack = 0
  6164                           ;I2C_2_Master_Read@ack stored from wreg
  6165   0020F0  6E05               	movwf	I2C_2_Master_Read@ack^0,c
  6166   0020F2                     
  6167                           ;i2c.c: 72: unsigned char I2C_2_Master_Read(unsigned char ack);i2c.c: 73: {;i2c.c: 74:  
      +                           unsigned char tmp;;i2c.c: 75:   I2C_2_Master_Idle();
  6168   0020F2  EC08  F011         	call	_I2C_2_Master_Idle	;wreg free
  6169   0020F6                     
  6170                           ;i2c.c: 76:   SSP2CON2bits.RCEN = 1;
  6171   0020F6  010E               	movlb	14	; () banked
  6172   0020F8  87DA               	bsf	218,3,b	;volatile
  6173                           
  6174                           ;i2c.c: 77:   I2C_2_Master_Idle();
  6175   0020FA  EC08  F011         	call	_I2C_2_Master_Idle	;wreg free
  6176   0020FE                     
  6177                           ;i2c.c: 78:   tmp = SSP2BUF;
  6178   0020FE  CED5 F006          	movff	3797,I2C_2_Master_Read@tmp	;volatile
  6179                           
  6180                           ;i2c.c: 79:   I2C_2_Master_Idle();
  6181   002102  EC08  F011         	call	_I2C_2_Master_Idle	;wreg free
  6182   002106                     
  6183                           ;i2c.c: 80:   SSP2CON2bits.ACKDT = !ack;
  6184   002106  5005               	movf	I2C_2_Master_Read@ack^0,w,c
  6185   002108  B4D8               	btfsc	status,2,c
  6186   00210A  EF89  F010         	goto	u1511
  6187   00210E  EF8D  F010         	goto	u1510
  6188   002112                     u1511:
  6189   002112  6A04               	clrf	??_I2C_2_Master_Read^0,c
  6190   002114  2A04               	incf	??_I2C_2_Master_Read^0,f,c
  6191   002116  EF8E  F010         	goto	u1528
  6192   00211A                     u1510:
  6193   00211A  6A04               	clrf	??_I2C_2_Master_Read^0,c
  6194   00211C                     u1528:
  6195   00211C  3A04               	swapf	??_I2C_2_Master_Read^0,f,c
  6196   00211E  4604               	rlncf	??_I2C_2_Master_Read^0,f,c
  6197   002120  010E               	movlb	14	; () banked
  6198   002122  51DA               	movf	218,w,b	;volatile
  6199   002124  1804               	xorwf	??_I2C_2_Master_Read^0,w,c
  6200   002126  0BDF               	andlw	-33
  6201   002128  1804               	xorwf	??_I2C_2_Master_Read^0,w,c
  6202   00212A  6FDA               	movwf	218,b	;volatile
  6203   00212C                     
  6204                           ; BSR set to: 14
  6205                           ;i2c.c: 81:   SSP2CON2bits.ACKEN = 1;
  6206   00212C  89DA               	bsf	218,4,b	;volatile
  6207   00212E                     
  6208                           ; BSR set to: 14
  6209                           ;i2c.c: 82:   return tmp;
  6210   00212E  5006               	movf	I2C_2_Master_Read@tmp^0,w,c
  6211   002130                     
  6212                           ; BSR set to: 14
  6213   002130  0012               	return		;funcret
  6214   002132                     __end_of_I2C_2_Master_Read:
  6215                           	callstack 0
  6216                           
  6217 ;; *************** function _I2C_2_Master_Idle *****************
  6218 ;; Defined at:
  6219 ;;		line 28 in file "i2c.c"
  6220 ;; Parameters:    Size  Location     Type
  6221 ;;		None
  6222 ;; Auto vars:     Size  Location     Type
  6223 ;;		None
  6224 ;; Return value:  Size  Location     Type
  6225 ;;                  1    wreg      void 
  6226 ;; Registers used:
  6227 ;;		wreg, status,2, status,0
  6228 ;; Tracked objects:
  6229 ;;		On entry : 0/0
  6230 ;;		On exit  : 0/0
  6231 ;;		Unchanged: 0/0
  6232 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6233 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6234 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6235 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6236 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6237 ;;Total ram usage:        1 bytes
  6238 ;; Hardware stack levels used: 1
  6239 ;; Hardware stack levels required when called: 1
  6240 ;; This function calls:
  6241 ;;		Nothing
  6242 ;; This function is called by:
  6243 ;;		_I2C_2_Master_Start
  6244 ;;		_I2C_2_Master_RepStart
  6245 ;;		_I2C_2_Master_Stop
  6246 ;;		_I2C_2_Master_Write
  6247 ;;		_I2C_2_Master_Read
  6248 ;; This function uses a non-reentrant model
  6249 ;;
  6250                           
  6251                           	psect	text42
  6252   002210                     __ptext42:
  6253                           	callstack 0
  6254   002210                     _I2C_2_Master_Idle:
  6255                           	callstack 25
  6256   002210                     l30:
  6257   002210  010E               	movlb	14	; () banked
  6258   002212  B5D8               	btfsc	216,2,b	;volatile
  6259   002214  EF0E  F011         	goto	u1351
  6260   002218  EF10  F011         	goto	u1350
  6261   00221C                     u1351:
  6262   00221C  EF08  F011         	goto	l30
  6263   002220                     u1350:
  6264   002220                     
  6265                           ; BSR set to: 14
  6266   002220  CEDA F003          	movff	3802,??_I2C_2_Master_Idle	;volatile
  6267   002224  0E1F               	movlw	31
  6268   002226  1603               	andwf	??_I2C_2_Master_Idle^0,f,c
  6269   002228  A4D8               	btfss	status,2,c
  6270   00222A  EF19  F011         	goto	u1361
  6271   00222E  EF1B  F011         	goto	u1360
  6272   002232                     u1361:
  6273   002232  EF08  F011         	goto	l30
  6274   002236                     u1360:
  6275   002236                     
  6276                           ; BSR set to: 14
  6277   002236  0012               	return		;funcret
  6278   002238                     __end_of_I2C_2_Master_Idle:
  6279                           	callstack 0
  6280                           
  6281 ;; *************** function ___xxtofl *****************
  6282 ;; Defined at:
  6283 ;;		line 10 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\xxtofl.c"
  6284 ;; Parameters:    Size  Location     Type
  6285 ;;  sign            1    wreg     unsigned char 
  6286 ;;  val             4    2[COMRAM] long 
  6287 ;; Auto vars:     Size  Location     Type
  6288 ;;  sign            1   10[COMRAM] unsigned char 
  6289 ;;  arg             4   12[COMRAM] unsigned long 
  6290 ;;  exp             1   11[COMRAM] unsigned char 
  6291 ;; Return value:  Size  Location     Type
  6292 ;;                  4    2[COMRAM] unsigned char 
  6293 ;; Registers used:
  6294 ;;		wreg, status,2, status,0
  6295 ;; Tracked objects:
  6296 ;;		On entry : 0/0
  6297 ;;		On exit  : 0/0
  6298 ;;		Unchanged: 0/0
  6299 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6300 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6301 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6302 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6303 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6304 ;;Total ram usage:       14 bytes
  6305 ;; Hardware stack levels used: 1
  6306 ;; Hardware stack levels required when called: 1
  6307 ;; This function calls:
  6308 ;;		Nothing
  6309 ;; This function is called by:
  6310 ;;		_READcolor
  6311 ;; This function uses a non-reentrant model
  6312 ;;
  6313                           
  6314                           	psect	text43
  6315   000FA6                     __ptext43:
  6316                           	callstack 0
  6317   000FA6                     ___xxtofl:
  6318                           	callstack 27
  6319                           
  6320                           ; BSR set to: 14
  6321                           ;incstack = 0
  6322                           ;___xxtofl@sign stored from wreg
  6323   000FA6  6E0B               	movwf	___xxtofl@sign^0,c
  6324   000FA8  500B               	movf	___xxtofl@sign^0,w,c
  6325   000FAA  B4D8               	btfsc	status,2,c
  6326   000FAC  EFDA  F007         	goto	u1901
  6327   000FB0  EFDC  F007         	goto	u1900
  6328   000FB4                     u1901:
  6329   000FB4  EFFE  F007         	goto	l1241
  6330   000FB8                     u1900:
  6331   000FB8  BE06               	btfsc	(___xxtofl@val+3)^0,7,c
  6332   000FBA  EFE3  F007         	goto	u1910
  6333   000FBE  EFE1  F007         	goto	u1911
  6334   000FC2                     u1911:
  6335   000FC2  EFFE  F007         	goto	l1241
  6336   000FC6                     u1910:
  6337   000FC6  C003  F007         	movff	___xxtofl@val,??___xxtofl
  6338   000FCA  C004  F008         	movff	___xxtofl@val+1,??___xxtofl+1
  6339   000FCE  C005  F009         	movff	___xxtofl@val+2,??___xxtofl+2
  6340   000FD2  C006  F00A         	movff	___xxtofl@val+3,??___xxtofl+3
  6341   000FD6  1E07               	comf	??___xxtofl^0,f,c
  6342   000FD8  1E08               	comf	(??___xxtofl+1)^0,f,c
  6343   000FDA  1E09               	comf	(??___xxtofl+2)^0,f,c
  6344   000FDC  1E0A               	comf	(??___xxtofl+3)^0,f,c
  6345   000FDE  2A07               	incf	??___xxtofl^0,f,c
  6346   000FE0  0E00               	movlw	0
  6347   000FE2  2208               	addwfc	(??___xxtofl+1)^0,f,c
  6348   000FE4  2209               	addwfc	(??___xxtofl+2)^0,f,c
  6349   000FE6  220A               	addwfc	(??___xxtofl+3)^0,f,c
  6350   000FE8  C007  F00D         	movff	??___xxtofl,___xxtofl@arg
  6351   000FEC  C008  F00E         	movff	??___xxtofl+1,___xxtofl@arg+1
  6352   000FF0  C009  F00F         	movff	??___xxtofl+2,___xxtofl@arg+2
  6353   000FF4  C00A  F010         	movff	??___xxtofl+3,___xxtofl@arg+3
  6354   000FF8  EF06  F008         	goto	l2743
  6355   000FFC                     l1241:
  6356   000FFC  C003  F00D         	movff	___xxtofl@val,___xxtofl@arg
  6357   001000  C004  F00E         	movff	___xxtofl@val+1,___xxtofl@arg+1
  6358   001004  C005  F00F         	movff	___xxtofl@val+2,___xxtofl@arg+2
  6359   001008  C006  F010         	movff	___xxtofl@val+3,___xxtofl@arg+3
  6360   00100C                     l2743:
  6361   00100C  5003               	movf	___xxtofl@val^0,w,c
  6362   00100E  1004               	iorwf	(___xxtofl@val+1)^0,w,c
  6363   001010  1005               	iorwf	(___xxtofl@val+2)^0,w,c
  6364   001012  1006               	iorwf	(___xxtofl@val+3)^0,w,c
  6365   001014  A4D8               	btfss	status,2,c
  6366   001016  EF0F  F008         	goto	u1921
  6367   00101A  EF11  F008         	goto	u1920
  6368   00101E                     u1921:
  6369   00101E  EF1B  F008         	goto	l2749
  6370   001022                     u1920:
  6371   001022  0E00               	movlw	0
  6372   001024  6E03               	movwf	?___xxtofl^0,c
  6373   001026  0E00               	movlw	0
  6374   001028  6E04               	movwf	(?___xxtofl+1)^0,c
  6375   00102A  0E00               	movlw	0
  6376   00102C  6E05               	movwf	(?___xxtofl+2)^0,c
  6377   00102E  0E00               	movlw	0
  6378   001030  6E06               	movwf	(?___xxtofl+3)^0,c
  6379   001032  EFAC  F008         	goto	l1244
  6380   001036                     l2749:
  6381   001036  0E96               	movlw	150
  6382   001038  6E0C               	movwf	___xxtofl@exp^0,c
  6383   00103A  EF25  F008         	goto	l2753
  6384   00103E                     l2751:
  6385   00103E  2A0C               	incf	___xxtofl@exp^0,f,c
  6386   001040  90D8               	bcf	status,0,c
  6387   001042  3210               	rrcf	(___xxtofl@arg+3)^0,f,c
  6388   001044  320F               	rrcf	(___xxtofl@arg+2)^0,f,c
  6389   001046  320E               	rrcf	(___xxtofl@arg+1)^0,f,c
  6390   001048  320D               	rrcf	___xxtofl@arg^0,f,c
  6391   00104A                     l2753:
  6392   00104A  0E00               	movlw	0
  6393   00104C  140D               	andwf	___xxtofl@arg^0,w,c
  6394   00104E  6E07               	movwf	??___xxtofl^0,c
  6395   001050  0E00               	movlw	0
  6396   001052  140E               	andwf	(___xxtofl@arg+1)^0,w,c
  6397   001054  6E08               	movwf	(??___xxtofl+1)^0,c
  6398   001056  0E00               	movlw	0
  6399   001058  140F               	andwf	(___xxtofl@arg+2)^0,w,c
  6400   00105A  6E09               	movwf	(??___xxtofl+2)^0,c
  6401   00105C  0EFE               	movlw	254
  6402   00105E  1410               	andwf	(___xxtofl@arg+3)^0,w,c
  6403   001060  6E0A               	movwf	(??___xxtofl+3)^0,c
  6404   001062  5007               	movf	??___xxtofl^0,w,c
  6405   001064  1008               	iorwf	(??___xxtofl+1)^0,w,c
  6406   001066  1009               	iorwf	(??___xxtofl+2)^0,w,c
  6407   001068  100A               	iorwf	(??___xxtofl+3)^0,w,c
  6408   00106A  A4D8               	btfss	status,2,c
  6409   00106C  EF3A  F008         	goto	u1931
  6410   001070  EF3C  F008         	goto	u1930
  6411   001074                     u1931:
  6412   001074  EF1F  F008         	goto	l2751
  6413   001078                     u1930:
  6414   001078  EF4A  F008         	goto	l1248
  6415   00107C                     l2755:
  6416   00107C  2A0C               	incf	___xxtofl@exp^0,f,c
  6417   00107E  0E01               	movlw	1
  6418   001080  260D               	addwf	___xxtofl@arg^0,f,c
  6419   001082  0E00               	movlw	0
  6420   001084  220E               	addwfc	(___xxtofl@arg+1)^0,f,c
  6421   001086  220F               	addwfc	(___xxtofl@arg+2)^0,f,c
  6422   001088  2210               	addwfc	(___xxtofl@arg+3)^0,f,c
  6423   00108A  90D8               	bcf	status,0,c
  6424   00108C  3210               	rrcf	(___xxtofl@arg+3)^0,f,c
  6425   00108E  320F               	rrcf	(___xxtofl@arg+2)^0,f,c
  6426   001090  320E               	rrcf	(___xxtofl@arg+1)^0,f,c
  6427   001092  320D               	rrcf	___xxtofl@arg^0,f,c
  6428   001094                     l1248:
  6429   001094  0E00               	movlw	0
  6430   001096  140D               	andwf	___xxtofl@arg^0,w,c
  6431   001098  6E07               	movwf	??___xxtofl^0,c
  6432   00109A  0E00               	movlw	0
  6433   00109C  140E               	andwf	(___xxtofl@arg+1)^0,w,c
  6434   00109E  6E08               	movwf	(??___xxtofl+1)^0,c
  6435   0010A0  0E00               	movlw	0
  6436   0010A2  140F               	andwf	(___xxtofl@arg+2)^0,w,c
  6437   0010A4  6E09               	movwf	(??___xxtofl+2)^0,c
  6438   0010A6  0EFF               	movlw	255
  6439   0010A8  1410               	andwf	(___xxtofl@arg+3)^0,w,c
  6440   0010AA  6E0A               	movwf	(??___xxtofl+3)^0,c
  6441   0010AC  5007               	movf	??___xxtofl^0,w,c
  6442   0010AE  1008               	iorwf	(??___xxtofl+1)^0,w,c
  6443   0010B0  1009               	iorwf	(??___xxtofl+2)^0,w,c
  6444   0010B2  100A               	iorwf	(??___xxtofl+3)^0,w,c
  6445   0010B4  A4D8               	btfss	status,2,c
  6446   0010B6  EF5F  F008         	goto	u1941
  6447   0010BA  EF61  F008         	goto	u1940
  6448   0010BE                     u1941:
  6449   0010BE  EF3E  F008         	goto	l2755
  6450   0010C2                     u1940:
  6451   0010C2  EF69  F008         	goto	l2763
  6452   0010C6                     l2761:
  6453   0010C6  060C               	decf	___xxtofl@exp^0,f,c
  6454   0010C8  90D8               	bcf	status,0,c
  6455   0010CA  360D               	rlcf	___xxtofl@arg^0,f,c
  6456   0010CC  360E               	rlcf	(___xxtofl@arg+1)^0,f,c
  6457   0010CE  360F               	rlcf	(___xxtofl@arg+2)^0,f,c
  6458   0010D0  3610               	rlcf	(___xxtofl@arg+3)^0,f,c
  6459   0010D2                     l2763:
  6460   0010D2  BE0F               	btfsc	(___xxtofl@arg+2)^0,7,c
  6461   0010D4  EF6E  F008         	goto	u1951
  6462   0010D8  EF70  F008         	goto	u1950
  6463   0010DC                     u1951:
  6464   0010DC  EF78  F008         	goto	l1255
  6465   0010E0                     u1950:
  6466   0010E0  0E02               	movlw	2
  6467   0010E2  600C               	cpfslt	___xxtofl@exp^0,c
  6468   0010E4  EF76  F008         	goto	u1961
  6469   0010E8  EF78  F008         	goto	u1960
  6470   0010EC                     u1961:
  6471   0010EC  EF63  F008         	goto	l2761
  6472   0010F0                     u1960:
  6473   0010F0                     l1255:
  6474   0010F0  B00C               	btfsc	___xxtofl@exp^0,0,c
  6475   0010F2  EF7D  F008         	goto	u1971
  6476   0010F6  EF7F  F008         	goto	u1970
  6477   0010FA                     u1971:
  6478   0010FA  EF80  F008         	goto	l2769
  6479   0010FE                     u1970:
  6480   0010FE  9E0F               	bcf	(___xxtofl@arg+2)^0,7,c
  6481   001100                     l2769:
  6482   001100  90D8               	bcf	status,0,c
  6483   001102  320C               	rrcf	___xxtofl@exp^0,f,c
  6484   001104  C00C  F007         	movff	___xxtofl@exp,??___xxtofl
  6485   001108  6A08               	clrf	(??___xxtofl+1)^0,c
  6486   00110A  6A09               	clrf	(??___xxtofl+2)^0,c
  6487   00110C  6A0A               	clrf	(??___xxtofl+3)^0,c
  6488   00110E  C007  F00A         	movff	??___xxtofl,??___xxtofl+3
  6489   001112  6A09               	clrf	(??___xxtofl+2)^0,c
  6490   001114  6A08               	clrf	(??___xxtofl+1)^0,c
  6491   001116  6A07               	clrf	??___xxtofl^0,c
  6492   001118  5007               	movf	??___xxtofl^0,w,c
  6493   00111A  120D               	iorwf	___xxtofl@arg^0,f,c
  6494   00111C  5008               	movf	(??___xxtofl+1)^0,w,c
  6495   00111E  120E               	iorwf	(___xxtofl@arg+1)^0,f,c
  6496   001120  5009               	movf	(??___xxtofl+2)^0,w,c
  6497   001122  120F               	iorwf	(___xxtofl@arg+2)^0,f,c
  6498   001124  500A               	movf	(??___xxtofl+3)^0,w,c
  6499   001126  1210               	iorwf	(___xxtofl@arg+3)^0,f,c
  6500   001128  500B               	movf	___xxtofl@sign^0,w,c
  6501   00112A  B4D8               	btfsc	status,2,c
  6502   00112C  EF9A  F008         	goto	u1981
  6503   001130  EF9C  F008         	goto	u1980
  6504   001134                     u1981:
  6505   001134  EFA4  F008         	goto	l2779
  6506   001138                     u1980:
  6507   001138  BE06               	btfsc	(___xxtofl@val+3)^0,7,c
  6508   00113A  EFA3  F008         	goto	u1990
  6509   00113E  EFA1  F008         	goto	u1991
  6510   001142                     u1991:
  6511   001142  EFA4  F008         	goto	l2779
  6512   001146                     u1990:
  6513   001146  8E10               	bsf	(___xxtofl@arg+3)^0,7,c
  6514   001148                     l2779:
  6515   001148  C00D  F003         	movff	___xxtofl@arg,?___xxtofl
  6516   00114C  C00E  F004         	movff	___xxtofl@arg+1,?___xxtofl+1
  6517   001150  C00F  F005         	movff	___xxtofl@arg+2,?___xxtofl+2
  6518   001154  C010  F006         	movff	___xxtofl@arg+3,?___xxtofl+3
  6519   001158                     l1244:
  6520   001158  0012               	return		;funcret
  6521   00115A                     __end_of___xxtofl:
  6522                           	callstack 0
  6523                           
  6524 ;; *************** function ___fldiv *****************
  6525 ;; Defined at:
  6526 ;;		line 11 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\sprcdiv.c"
  6527 ;; Parameters:    Size  Location     Type
  6528 ;;  b               4   16[COMRAM] unsigned char 
  6529 ;;  a               4   20[COMRAM] unsigned char 
  6530 ;; Auto vars:     Size  Location     Type
  6531 ;;  grs             4   35[COMRAM] unsigned long 
  6532 ;;  rem             4   28[COMRAM] unsigned long 
  6533 ;;  new_exp         2   33[COMRAM] short 
  6534 ;;  aexp            1   40[COMRAM] unsigned char 
  6535 ;;  bexp            1   39[COMRAM] unsigned char 
  6536 ;;  sign            1   32[COMRAM] unsigned char 
  6537 ;; Return value:  Size  Location     Type
  6538 ;;                  4   16[COMRAM] unsigned char 
  6539 ;; Registers used:
  6540 ;;		wreg, status,2, status,0
  6541 ;; Tracked objects:
  6542 ;;		On entry : 0/0
  6543 ;;		On exit  : 0/0
  6544 ;;		Unchanged: 0/0
  6545 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6546 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6547 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6548 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6549 ;;      Totals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6550 ;;Total ram usage:       25 bytes
  6551 ;; Hardware stack levels used: 1
  6552 ;; Hardware stack levels required when called: 1
  6553 ;; This function calls:
  6554 ;;		Nothing
  6555 ;; This function is called by:
  6556 ;;		_READcolor
  6557 ;; This function uses a non-reentrant model
  6558 ;;
  6559                           
  6560                           	psect	text44
  6561   000724                     __ptext44:
  6562                           	callstack 0
  6563   000724                     ___fldiv:
  6564                           	callstack 27
  6565   000724  5014               	movf	(___fldiv@b+3)^0,w,c
  6566   000726  0B80               	andlw	128
  6567   000728  6E21               	movwf	___fldiv@sign^0,c
  6568   00072A  5014               	movf	(___fldiv@b+3)^0,w,c
  6569   00072C  2414               	addwf	(___fldiv@b+3)^0,w,c
  6570   00072E  6E28               	movwf	___fldiv@bexp^0,c
  6571   000730  AE13               	btfss	(___fldiv@b+2)^0,7,c
  6572   000732  EF9D  F003         	goto	u1671
  6573   000736  EF9F  F003         	goto	u1670
  6574   00073A                     u1671:
  6575   00073A  EFA0  F003         	goto	l2605
  6576   00073E                     u1670:
  6577   00073E  8028               	bsf	___fldiv@bexp^0,0,c
  6578   000740                     l2605:
  6579   000740  5028               	movf	___fldiv@bexp^0,w,c
  6580   000742  B4D8               	btfsc	status,2,c
  6581   000744  EFA6  F003         	goto	u1681
  6582   000748  EFA8  F003         	goto	u1680
  6583   00074C                     u1681:
  6584   00074C  EFBD  F003         	goto	l2615
  6585   000750                     u1680:
  6586   000750  2828               	incf	___fldiv@bexp^0,w,c
  6587   000752  A4D8               	btfss	status,2,c
  6588   000754  EFAE  F003         	goto	u1691
  6589   000758  EFB0  F003         	goto	u1690
  6590   00075C                     u1691:
  6591   00075C  EFB8  F003         	goto	l2611
  6592   000760                     u1690:
  6593   000760  0E00               	movlw	0
  6594   000762  6E11               	movwf	___fldiv@b^0,c
  6595   000764  0E00               	movlw	0
  6596   000766  6E12               	movwf	(___fldiv@b+1)^0,c
  6597   000768  0E00               	movlw	0
  6598   00076A  6E13               	movwf	(___fldiv@b+2)^0,c
  6599   00076C  0E00               	movlw	0
  6600   00076E  6E14               	movwf	(___fldiv@b+3)^0,c
  6601   000770                     l2611:
  6602   000770  8E13               	bsf	(___fldiv@b+2)^0,7,c
  6603   000772  0E00               	movlw	0
  6604   000774  6E14               	movwf	(___fldiv@b+3)^0,c
  6605   000776  EFC5  F003         	goto	l2617
  6606   00077A                     l2615:
  6607   00077A  0E00               	movlw	0
  6608   00077C  6E11               	movwf	___fldiv@b^0,c
  6609   00077E  0E00               	movlw	0
  6610   000780  6E12               	movwf	(___fldiv@b+1)^0,c
  6611   000782  0E00               	movlw	0
  6612   000784  6E13               	movwf	(___fldiv@b+2)^0,c
  6613   000786  0E00               	movlw	0
  6614   000788  6E14               	movwf	(___fldiv@b+3)^0,c
  6615   00078A                     l2617:
  6616   00078A  5018               	movf	(___fldiv@a+3)^0,w,c
  6617   00078C  0B80               	andlw	128
  6618   00078E  1A21               	xorwf	___fldiv@sign^0,f,c
  6619   000790  5018               	movf	(___fldiv@a+3)^0,w,c
  6620   000792  2418               	addwf	(___fldiv@a+3)^0,w,c
  6621   000794  6E29               	movwf	___fldiv@aexp^0,c
  6622   000796  AE17               	btfss	(___fldiv@a+2)^0,7,c
  6623   000798  EFD0  F003         	goto	u1701
  6624   00079C  EFD2  F003         	goto	u1700
  6625   0007A0                     u1701:
  6626   0007A0  EFD3  F003         	goto	l2625
  6627   0007A4                     u1700:
  6628   0007A4  8029               	bsf	___fldiv@aexp^0,0,c
  6629   0007A6                     l2625:
  6630   0007A6  5029               	movf	___fldiv@aexp^0,w,c
  6631   0007A8  B4D8               	btfsc	status,2,c
  6632   0007AA  EFD9  F003         	goto	u1711
  6633   0007AE  EFDB  F003         	goto	u1710
  6634   0007B2                     u1711:
  6635   0007B2  EFF0  F003         	goto	l2635
  6636   0007B6                     u1710:
  6637   0007B6  2829               	incf	___fldiv@aexp^0,w,c
  6638   0007B8  A4D8               	btfss	status,2,c
  6639   0007BA  EFE1  F003         	goto	u1721
  6640   0007BE  EFE3  F003         	goto	u1720
  6641   0007C2                     u1721:
  6642   0007C2  EFEB  F003         	goto	l2631
  6643   0007C6                     u1720:
  6644   0007C6  0E00               	movlw	0
  6645   0007C8  6E15               	movwf	___fldiv@a^0,c
  6646   0007CA  0E00               	movlw	0
  6647   0007CC  6E16               	movwf	(___fldiv@a+1)^0,c
  6648   0007CE  0E00               	movlw	0
  6649   0007D0  6E17               	movwf	(___fldiv@a+2)^0,c
  6650   0007D2  0E00               	movlw	0
  6651   0007D4  6E18               	movwf	(___fldiv@a+3)^0,c
  6652   0007D6                     l2631:
  6653   0007D6  8E17               	bsf	(___fldiv@a+2)^0,7,c
  6654   0007D8  0E00               	movlw	0
  6655   0007DA  6E18               	movwf	(___fldiv@a+3)^0,c
  6656   0007DC  EFF8  F003         	goto	l2637
  6657   0007E0                     l2635:
  6658   0007E0  0E00               	movlw	0
  6659   0007E2  6E15               	movwf	___fldiv@a^0,c
  6660   0007E4  0E00               	movlw	0
  6661   0007E6  6E16               	movwf	(___fldiv@a+1)^0,c
  6662   0007E8  0E00               	movlw	0
  6663   0007EA  6E17               	movwf	(___fldiv@a+2)^0,c
  6664   0007EC  0E00               	movlw	0
  6665   0007EE  6E18               	movwf	(___fldiv@a+3)^0,c
  6666   0007F0                     l2637:
  6667   0007F0  5015               	movf	___fldiv@a^0,w,c
  6668   0007F2  1016               	iorwf	(___fldiv@a+1)^0,w,c
  6669   0007F4  1017               	iorwf	(___fldiv@a+2)^0,w,c
  6670   0007F6  1018               	iorwf	(___fldiv@a+3)^0,w,c
  6671   0007F8  A4D8               	btfss	status,2,c
  6672   0007FA  EF01  F004         	goto	u1731
  6673   0007FE  EF03  F004         	goto	u1730
  6674   000802                     u1731:
  6675   000802  EF1B  F004         	goto	l2649
  6676   000806                     u1730:
  6677   000806  0E00               	movlw	0
  6678   000808  6E11               	movwf	___fldiv@b^0,c
  6679   00080A  0E00               	movlw	0
  6680   00080C  6E12               	movwf	(___fldiv@b+1)^0,c
  6681   00080E  0E00               	movlw	0
  6682   000810  6E13               	movwf	(___fldiv@b+2)^0,c
  6683   000812  0E00               	movlw	0
  6684   000814  6E14               	movwf	(___fldiv@b+3)^0,c
  6685   000816  0E80               	movlw	128
  6686   000818  1213               	iorwf	(___fldiv@b+2)^0,f,c
  6687   00081A  0E7F               	movlw	127
  6688   00081C  1214               	iorwf	(___fldiv@b+3)^0,f,c
  6689   00081E                     l2643:
  6690   00081E  5021               	movf	___fldiv@sign^0,w,c
  6691   000820  1214               	iorwf	(___fldiv@b+3)^0,f,c
  6692   000822  C011  F011         	movff	___fldiv@b,?___fldiv
  6693   000826  C012  F012         	movff	___fldiv@b+1,?___fldiv+1
  6694   00082A  C013  F013         	movff	___fldiv@b+2,?___fldiv+2
  6695   00082E  C014  F014         	movff	___fldiv@b+3,?___fldiv+3
  6696   000832  EF5E  F005         	goto	l1168
  6697   000836                     l2649:
  6698   000836  5028               	movf	___fldiv@bexp^0,w,c
  6699   000838  A4D8               	btfss	status,2,c
  6700   00083A  EF21  F004         	goto	u1741
  6701   00083E  EF23  F004         	goto	u1740
  6702   000842                     u1741:
  6703   000842  EF2D  F004         	goto	l2657
  6704   000846                     u1740:
  6705   000846  0E00               	movlw	0
  6706   000848  6E11               	movwf	?___fldiv^0,c
  6707   00084A  0E00               	movlw	0
  6708   00084C  6E12               	movwf	(?___fldiv+1)^0,c
  6709   00084E  0E00               	movlw	0
  6710   000850  6E13               	movwf	(?___fldiv+2)^0,c
  6711   000852  0E00               	movlw	0
  6712   000854  6E14               	movwf	(?___fldiv+3)^0,c
  6713   000856  EF5E  F005         	goto	l1168
  6714   00085A                     l2657:
  6715   00085A  5029               	movf	___fldiv@aexp^0,w,c
  6716   00085C  C028  F019         	movff	___fldiv@bexp,??___fldiv
  6717   000860  6A1A               	clrf	(??___fldiv+1)^0,c
  6718   000862  5E19               	subwf	??___fldiv^0,f,c
  6719   000864  0E00               	movlw	0
  6720   000866  5A1A               	subwfb	(??___fldiv+1)^0,f,c
  6721   000868  0E7F               	movlw	127
  6722   00086A  2419               	addwf	??___fldiv^0,w,c
  6723   00086C  6E22               	movwf	___fldiv@new_exp^0,c
  6724   00086E  0E00               	movlw	0
  6725   000870  201A               	addwfc	(??___fldiv+1)^0,w,c
  6726   000872  6E23               	movwf	(___fldiv@new_exp+1)^0,c
  6727   000874  C011  F01D         	movff	___fldiv@b,___fldiv@rem
  6728   000878  C012  F01E         	movff	___fldiv@b+1,___fldiv@rem+1
  6729   00087C  C013  F01F         	movff	___fldiv@b+2,___fldiv@rem+2
  6730   000880  C014  F020         	movff	___fldiv@b+3,___fldiv@rem+3
  6731   000884  0E00               	movlw	0
  6732   000886  6E11               	movwf	___fldiv@b^0,c
  6733   000888  0E00               	movlw	0
  6734   00088A  6E12               	movwf	(___fldiv@b+1)^0,c
  6735   00088C  0E00               	movlw	0
  6736   00088E  6E13               	movwf	(___fldiv@b+2)^0,c
  6737   000890  0E00               	movlw	0
  6738   000892  6E14               	movwf	(___fldiv@b+3)^0,c
  6739   000894  0E00               	movlw	0
  6740   000896  6E24               	movwf	___fldiv@grs^0,c
  6741   000898  0E00               	movlw	0
  6742   00089A  6E25               	movwf	(___fldiv@grs+1)^0,c
  6743   00089C  0E00               	movlw	0
  6744   00089E  6E26               	movwf	(___fldiv@grs+2)^0,c
  6745   0008A0  0E00               	movlw	0
  6746   0008A2  6E27               	movwf	(___fldiv@grs+3)^0,c
  6747   0008A4  0E00               	movlw	0
  6748   0008A6  6E29               	movwf	___fldiv@aexp^0,c
  6749   0008A8  EF8E  F004         	goto	l1170
  6750   0008AC                     l2667:
  6751   0008AC  5029               	movf	___fldiv@aexp^0,w,c
  6752   0008AE  B4D8               	btfsc	status,2,c
  6753   0008B0  EF5C  F004         	goto	u1751
  6754   0008B4  EF5E  F004         	goto	u1750
  6755   0008B8                     u1751:
  6756   0008B8  EF75  F004         	goto	l2675
  6757   0008BC                     u1750:
  6758   0008BC  90D8               	bcf	status,0,c
  6759   0008BE  361D               	rlcf	___fldiv@rem^0,f,c
  6760   0008C0  361E               	rlcf	(___fldiv@rem+1)^0,f,c
  6761   0008C2  361F               	rlcf	(___fldiv@rem+2)^0,f,c
  6762   0008C4  3620               	rlcf	(___fldiv@rem+3)^0,f,c
  6763   0008C6  90D8               	bcf	status,0,c
  6764   0008C8  3611               	rlcf	___fldiv@b^0,f,c
  6765   0008CA  3612               	rlcf	(___fldiv@b+1)^0,f,c
  6766   0008CC  3613               	rlcf	(___fldiv@b+2)^0,f,c
  6767   0008CE  3614               	rlcf	(___fldiv@b+3)^0,f,c
  6768   0008D0  AE27               	btfss	(___fldiv@grs+3)^0,7,c
  6769   0008D2  EF6D  F004         	goto	u1761
  6770   0008D6  EF6F  F004         	goto	u1760
  6771   0008DA                     u1761:
  6772   0008DA  EF70  F004         	goto	l1173
  6773   0008DE                     u1760:
  6774   0008DE  8011               	bsf	___fldiv@b^0,0,c
  6775   0008E0                     l1173:
  6776   0008E0  90D8               	bcf	status,0,c
  6777   0008E2  3624               	rlcf	___fldiv@grs^0,f,c
  6778   0008E4  3625               	rlcf	(___fldiv@grs+1)^0,f,c
  6779   0008E6  3626               	rlcf	(___fldiv@grs+2)^0,f,c
  6780   0008E8  3627               	rlcf	(___fldiv@grs+3)^0,f,c
  6781   0008EA                     l2675:
  6782   0008EA  5015               	movf	___fldiv@a^0,w,c
  6783   0008EC  5C1D               	subwf	___fldiv@rem^0,w,c
  6784   0008EE  5016               	movf	(___fldiv@a+1)^0,w,c
  6785   0008F0  581E               	subwfb	(___fldiv@rem+1)^0,w,c
  6786   0008F2  5017               	movf	(___fldiv@a+2)^0,w,c
  6787   0008F4  581F               	subwfb	(___fldiv@rem+2)^0,w,c
  6788   0008F6  5018               	movf	(___fldiv@a+3)^0,w,c
  6789   0008F8  5820               	subwfb	(___fldiv@rem+3)^0,w,c
  6790   0008FA  A0D8               	btfss	status,0,c
  6791   0008FC  EF82  F004         	goto	u1771
  6792   000900  EF84  F004         	goto	u1770
  6793   000904                     u1771:
  6794   000904  EF8D  F004         	goto	l2681
  6795   000908                     u1770:
  6796   000908  8C27               	bsf	(___fldiv@grs+3)^0,6,c
  6797   00090A  5015               	movf	___fldiv@a^0,w,c
  6798   00090C  5E1D               	subwf	___fldiv@rem^0,f,c
  6799   00090E  5016               	movf	(___fldiv@a+1)^0,w,c
  6800   000910  5A1E               	subwfb	(___fldiv@rem+1)^0,f,c
  6801   000912  5017               	movf	(___fldiv@a+2)^0,w,c
  6802   000914  5A1F               	subwfb	(___fldiv@rem+2)^0,f,c
  6803   000916  5018               	movf	(___fldiv@a+3)^0,w,c
  6804   000918  5A20               	subwfb	(___fldiv@rem+3)^0,f,c
  6805   00091A                     l2681:
  6806   00091A  2A29               	incf	___fldiv@aexp^0,f,c
  6807   00091C                     l1170:
  6808   00091C  0E19               	movlw	25
  6809   00091E  6429               	cpfsgt	___fldiv@aexp^0,c
  6810   000920  EF94  F004         	goto	u1781
  6811   000924  EF96  F004         	goto	u1780
  6812   000928                     u1781:
  6813   000928  EF56  F004         	goto	l2667
  6814   00092C                     u1780:
  6815   00092C  501D               	movf	___fldiv@rem^0,w,c
  6816   00092E  101E               	iorwf	(___fldiv@rem+1)^0,w,c
  6817   000930  101F               	iorwf	(___fldiv@rem+2)^0,w,c
  6818   000932  1020               	iorwf	(___fldiv@rem+3)^0,w,c
  6819   000934  B4D8               	btfsc	status,2,c
  6820   000936  EF9F  F004         	goto	u1791
  6821   00093A  EFA1  F004         	goto	u1790
  6822   00093E                     u1791:
  6823   00093E  EFB9  F004         	goto	l2693
  6824   000942                     u1790:
  6825   000942  8024               	bsf	___fldiv@grs^0,0,c
  6826   000944  EFB9  F004         	goto	l2693
  6827   000948                     l2687:
  6828   000948  90D8               	bcf	status,0,c
  6829   00094A  3611               	rlcf	___fldiv@b^0,f,c
  6830   00094C  3612               	rlcf	(___fldiv@b+1)^0,f,c
  6831   00094E  3613               	rlcf	(___fldiv@b+2)^0,f,c
  6832   000950  3614               	rlcf	(___fldiv@b+3)^0,f,c
  6833   000952  AE27               	btfss	(___fldiv@grs+3)^0,7,c
  6834   000954  EFAE  F004         	goto	u1801
  6835   000958  EFB0  F004         	goto	u1800
  6836   00095C                     u1801:
  6837   00095C  EFB1  F004         	goto	l1179
  6838   000960                     u1800:
  6839   000960  8011               	bsf	___fldiv@b^0,0,c
  6840   000962                     l1179:
  6841   000962  90D8               	bcf	status,0,c
  6842   000964  3624               	rlcf	___fldiv@grs^0,f,c
  6843   000966  3625               	rlcf	(___fldiv@grs+1)^0,f,c
  6844   000968  3626               	rlcf	(___fldiv@grs+2)^0,f,c
  6845   00096A  3627               	rlcf	(___fldiv@grs+3)^0,f,c
  6846   00096C  0622               	decf	___fldiv@new_exp^0,f,c
  6847   00096E  A0D8               	btfss	status,0,c
  6848   000970  0623               	decf	(___fldiv@new_exp+1)^0,f,c
  6849   000972                     l2693:
  6850   000972  AE13               	btfss	(___fldiv@b+2)^0,7,c
  6851   000974  EFBE  F004         	goto	u1811
  6852   000978  EFC0  F004         	goto	u1810
  6853   00097C                     u1811:
  6854   00097C  EFA4  F004         	goto	l2687
  6855   000980                     u1810:
  6856   000980  0E00               	movlw	0
  6857   000982  6E29               	movwf	___fldiv@aexp^0,c
  6858   000984  AE27               	btfss	(___fldiv@grs+3)^0,7,c
  6859   000986  EFC7  F004         	goto	u1821
  6860   00098A  EFC9  F004         	goto	u1820
  6861   00098E                     u1821:
  6862   00098E  EFED  F004         	goto	l1181
  6863   000992                     u1820:
  6864   000992  0EFF               	movlw	255
  6865   000994  1424               	andwf	___fldiv@grs^0,w,c
  6866   000996  6E19               	movwf	??___fldiv^0,c
  6867   000998  0EFF               	movlw	255
  6868   00099A  1425               	andwf	(___fldiv@grs+1)^0,w,c
  6869   00099C  6E1A               	movwf	(??___fldiv+1)^0,c
  6870   00099E  0EFF               	movlw	255
  6871   0009A0  1426               	andwf	(___fldiv@grs+2)^0,w,c
  6872   0009A2  6E1B               	movwf	(??___fldiv+2)^0,c
  6873   0009A4  0E7F               	movlw	127
  6874   0009A6  1427               	andwf	(___fldiv@grs+3)^0,w,c
  6875   0009A8  6E1C               	movwf	(??___fldiv+3)^0,c
  6876   0009AA  5019               	movf	??___fldiv^0,w,c
  6877   0009AC  101A               	iorwf	(??___fldiv+1)^0,w,c
  6878   0009AE  101B               	iorwf	(??___fldiv+2)^0,w,c
  6879   0009B0  101C               	iorwf	(??___fldiv+3)^0,w,c
  6880   0009B2  B4D8               	btfsc	status,2,c
  6881   0009B4  EFDE  F004         	goto	u1831
  6882   0009B8  EFE0  F004         	goto	u1830
  6883   0009BC                     u1831:
  6884   0009BC  EFE4  F004         	goto	l1182
  6885   0009C0                     u1830:
  6886   0009C0                     l2701:
  6887   0009C0  0E01               	movlw	1
  6888   0009C2  6E29               	movwf	___fldiv@aexp^0,c
  6889   0009C4  EFED  F004         	goto	l1181
  6890   0009C8                     l1182:
  6891   0009C8  A011               	btfss	___fldiv@b^0,0,c
  6892   0009CA  EFE9  F004         	goto	u1841
  6893   0009CE  EFEB  F004         	goto	u1840
  6894   0009D2                     u1841:
  6895   0009D2  EFED  F004         	goto	l1181
  6896   0009D6                     u1840:
  6897   0009D6  EFE0  F004         	goto	l2701
  6898   0009DA                     l1181:
  6899   0009DA  5029               	movf	___fldiv@aexp^0,w,c
  6900   0009DC  B4D8               	btfsc	status,2,c
  6901   0009DE  EFF3  F004         	goto	u1851
  6902   0009E2  EFF5  F004         	goto	u1850
  6903   0009E6                     u1851:
  6904   0009E6  EF19  F005         	goto	l2713
  6905   0009EA                     u1850:
  6906   0009EA  0E01               	movlw	1
  6907   0009EC  2611               	addwf	___fldiv@b^0,f,c
  6908   0009EE  0E00               	movlw	0
  6909   0009F0  2212               	addwfc	(___fldiv@b+1)^0,f,c
  6910   0009F2  2213               	addwfc	(___fldiv@b+2)^0,f,c
  6911   0009F4  2214               	addwfc	(___fldiv@b+3)^0,f,c
  6912   0009F6  A014               	btfss	(___fldiv@b+3)^0,0,c
  6913   0009F8  EF00  F005         	goto	u1861
  6914   0009FC  EF02  F005         	goto	u1860
  6915   000A00                     u1861:
  6916   000A00  EF19  F005         	goto	l2713
  6917   000A04                     u1860:
  6918   000A04  C011  F019         	movff	___fldiv@b,??___fldiv
  6919   000A08  C012  F01A         	movff	___fldiv@b+1,??___fldiv+1
  6920   000A0C  C013  F01B         	movff	___fldiv@b+2,??___fldiv+2
  6921   000A10  C014  F01C         	movff	___fldiv@b+3,??___fldiv+3
  6922   000A14  341C               	rlcf	(??___fldiv+3)^0,w,c
  6923   000A16  321C               	rrcf	(??___fldiv+3)^0,f,c
  6924   000A18  321B               	rrcf	(??___fldiv+2)^0,f,c
  6925   000A1A  321A               	rrcf	(??___fldiv+1)^0,f,c
  6926   000A1C  3219               	rrcf	??___fldiv^0,f,c
  6927   000A1E  C019  F011         	movff	??___fldiv,___fldiv@b
  6928   000A22  C01A  F012         	movff	??___fldiv+1,___fldiv@b+1
  6929   000A26  C01B  F013         	movff	??___fldiv+2,___fldiv@b+2
  6930   000A2A  C01C  F014         	movff	??___fldiv+3,___fldiv@b+3
  6931   000A2E  4A22               	infsnz	___fldiv@new_exp^0,f,c
  6932   000A30  2A23               	incf	(___fldiv@new_exp+1)^0,f,c
  6933   000A32                     l2713:
  6934   000A32  BE23               	btfsc	(___fldiv@new_exp+1)^0,7,c
  6935   000A34  EF24  F005         	goto	u1871
  6936   000A38  5023               	movf	(___fldiv@new_exp+1)^0,w,c
  6937   000A3A  E108               	bnz	u1870
  6938   000A3C  2822               	incf	___fldiv@new_exp^0,w,c
  6939   000A3E  A0D8               	btfss	status,0,c
  6940   000A40  EF24  F005         	goto	u1871
  6941   000A44  EF26  F005         	goto	u1870
  6942   000A48                     u1871:
  6943   000A48  EF31  F005         	goto	l2717
  6944   000A4C                     u1870:
  6945   000A4C  0E00               	movlw	0
  6946   000A4E  6E23               	movwf	(___fldiv@new_exp+1)^0,c
  6947   000A50  6822               	setf	___fldiv@new_exp^0,c
  6948   000A52  0E00               	movlw	0
  6949   000A54  6E11               	movwf	___fldiv@b^0,c
  6950   000A56  0E00               	movlw	0
  6951   000A58  6E12               	movwf	(___fldiv@b+1)^0,c
  6952   000A5A  0E00               	movlw	0
  6953   000A5C  6E13               	movwf	(___fldiv@b+2)^0,c
  6954   000A5E  0E00               	movlw	0
  6955   000A60  6E14               	movwf	(___fldiv@b+3)^0,c
  6956   000A62                     l2717:
  6957   000A62  BE23               	btfsc	(___fldiv@new_exp+1)^0,7,c
  6958   000A64  EF3E  F005         	goto	u1880
  6959   000A68  5023               	movf	(___fldiv@new_exp+1)^0,w,c
  6960   000A6A  E106               	bnz	u1881
  6961   000A6C  0422               	decf	___fldiv@new_exp^0,w,c
  6962   000A6E  B0D8               	btfsc	status,0,c
  6963   000A70  EF3C  F005         	goto	u1881
  6964   000A74  EF3E  F005         	goto	u1880
  6965   000A78                     u1881:
  6966   000A78  EF4C  F005         	goto	l2721
  6967   000A7C                     u1880:
  6968   000A7C  0E00               	movlw	0
  6969   000A7E  6E23               	movwf	(___fldiv@new_exp+1)^0,c
  6970   000A80  0E00               	movlw	0
  6971   000A82  6E22               	movwf	___fldiv@new_exp^0,c
  6972   000A84  0E00               	movlw	0
  6973   000A86  6E11               	movwf	___fldiv@b^0,c
  6974   000A88  0E00               	movlw	0
  6975   000A8A  6E12               	movwf	(___fldiv@b+1)^0,c
  6976   000A8C  0E00               	movlw	0
  6977   000A8E  6E13               	movwf	(___fldiv@b+2)^0,c
  6978   000A90  0E00               	movlw	0
  6979   000A92  6E14               	movwf	(___fldiv@b+3)^0,c
  6980   000A94  0E00               	movlw	0
  6981   000A96  6E21               	movwf	___fldiv@sign^0,c
  6982   000A98                     l2721:
  6983   000A98  C022  F028         	movff	___fldiv@new_exp,___fldiv@bexp
  6984   000A9C  A028               	btfss	___fldiv@bexp^0,0,c
  6985   000A9E  EF53  F005         	goto	u1891
  6986   000AA2  EF55  F005         	goto	u1890
  6987   000AA6                     u1891:
  6988   000AA6  EF58  F005         	goto	l2727
  6989   000AAA                     u1890:
  6990   000AAA  8E13               	bsf	(___fldiv@b+2)^0,7,c
  6991   000AAC  EF59  F005         	goto	l2729
  6992   000AB0                     l2727:
  6993   000AB0  9E13               	bcf	(___fldiv@b+2)^0,7,c
  6994   000AB2                     l2729:
  6995   000AB2  90D8               	bcf	status,0,c
  6996   000AB4  3028               	rrcf	___fldiv@bexp^0,w,c
  6997   000AB6  6E14               	movwf	(___fldiv@b+3)^0,c
  6998   000AB8  EF0F  F004         	goto	l2643
  6999   000ABC                     l1168:
  7000   000ABC  0012               	return		;funcret
  7001   000ABE                     __end_of___fldiv:
  7002                           	callstack 0
  7003                           
  7004 ;; *************** function _LowISR *****************
  7005 ;; Defined at:
  7006 ;;		line 23 in file "interrupts.c"
  7007 ;; Parameters:    Size  Location     Type
  7008 ;;		None
  7009 ;; Auto vars:     Size  Location     Type
  7010 ;;		None
  7011 ;; Return value:  Size  Location     Type
  7012 ;;                  1    wreg      void 
  7013 ;; Registers used:
  7014 ;;		status,2, status,0
  7015 ;; Tracked objects:
  7016 ;;		On entry : 0/0
  7017 ;;		On exit  : 0/0
  7018 ;;		Unchanged: 0/0
  7019 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7020 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7021 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7022 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7023 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7024 ;;Total ram usage:        2 bytes
  7025 ;; Hardware stack levels used: 1
  7026 ;; This function calls:
  7027 ;;		Nothing
  7028 ;; This function is called by:
  7029 ;;		Interrupt level 1
  7030 ;; This function uses a non-reentrant model
  7031 ;;
  7032                           
  7033                           	psect	intcodelo
  7034   000018                     __pintcodelo:
  7035                           	callstack 0
  7036   000018                     _LowISR:
  7037                           	callstack 22
  7038                           
  7039                           ;incstack = 0
  7040   000018  805D               	bsf	int$flags,0,c	;set compiler interrupt flag (level 1)
  7041   00001A  CFD8 F001          	movff	status,??_LowISR
  7042   00001E  CFE0 F002          	movff	bsr,??_LowISR+1
  7043   000022                     
  7044                           ;interrupts.c: 25:     if (PIR0bits.TMR0IF) {
  7045   000022  010E               	movlb	14	; () banked
  7046   000024  AB33               	btfss	51,5,b	;volatile
  7047   000026  EF17  F000         	goto	i1u114_21
  7048   00002A  EF19  F000         	goto	i1u114_20
  7049   00002E                     i1u114_21:
  7050   00002E  EF1C  F000         	goto	i1l422
  7051   000032                     i1u114_20:
  7052   000032                     
  7053                           ; BSR set to: 14
  7054                           ;interrupts.c: 26:         timer_val += 1;
  7055   000032  4A41               	infsnz	_timer_val^0,f,c
  7056   000034  2A42               	incf	(_timer_val+1)^0,f,c
  7057   000036                     
  7058                           ; BSR set to: 14
  7059                           ;interrupts.c: 27:         PIR0bits.TMR0IF = 0;
  7060   000036  9B33               	bcf	51,5,b	;volatile
  7061   000038                     i1l422:
  7062                           
  7063                           ; BSR set to: 14
  7064   000038  C002  FFE0         	movff	??_LowISR+1,bsr
  7065   00003C  C001  FFD8         	movff	??_LowISR,status
  7066   000040  905D               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  7067   000042  0010               	retfie	
  7068   000044                     __end_of_LowISR:
  7069                           	callstack 0
  7070   000000                     
  7071                           	psect	rparam
  7072   000000                     
  7073                           	psect	temp
  7074   00005D                     btemp:
  7075                           	callstack 0
  7076   00005D                     	ds	1
  7077   000000                     int$flags	set	btemp
  7078   000000                     wtemp8	set	btemp+1
  7079   000000                     ttemp5	set	btemp+1
  7080   000000                     ttemp6	set	btemp+4
  7081   000000                     ttemp7	set	btemp+8
  7082                           
  7083                           	psect	idloc
  7084                           
  7085                           ;Config register IDLOC0 @ 0x200000
  7086                           ;	unspecified, using default values
  7087   200000                     	org	2097152
  7088   200000  0FFF               	dw	4095
  7089                           
  7090                           ;Config register IDLOC1 @ 0x200002
  7091                           ;	unspecified, using default values
  7092   200002                     	org	2097154
  7093   200002  0FFF               	dw	4095
  7094                           
  7095                           ;Config register IDLOC2 @ 0x200004
  7096                           ;	unspecified, using default values
  7097   200004                     	org	2097156
  7098   200004  0FFF               	dw	4095
  7099                           
  7100                           ;Config register IDLOC3 @ 0x200006
  7101                           ;	unspecified, using default values
  7102   200006                     	org	2097158
  7103   200006  0FFF               	dw	4095
  7104                           
  7105                           ;Config register IDLOC4 @ 0x200008
  7106                           ;	unspecified, using default values
  7107   200008                     	org	2097160
  7108   200008  0FFF               	dw	4095
  7109                           
  7110                           ;Config register IDLOC5 @ 0x20000A
  7111                           ;	unspecified, using default values
  7112   20000A                     	org	2097162
  7113   20000A  0FFF               	dw	4095
  7114                           
  7115                           ;Config register IDLOC6 @ 0x20000C
  7116                           ;	unspecified, using default values
  7117   20000C                     	org	2097164
  7118   20000C  0FFF               	dw	4095
  7119                           
  7120                           ;Config register IDLOC7 @ 0x20000E
  7121                           ;	unspecified, using default values
  7122   20000E                     	org	2097166
  7123   20000E  0FFF               	dw	4095
  7124                           
  7125                           	psect	config
  7126                           
  7127                           ;Config register CONFIG1L @ 0x300000
  7128                           ;	External Oscillator mode Selection bits
  7129                           ;	FEXTOSC = HS, HS (crystal oscillator) above 8 MHz; PFM set to high power
  7130                           ;	Power-up default value for COSC bits
  7131                           ;	RSTOSC = EXTOSC_4PLL, EXTOSC with 4x PLL, with EXTOSC operating per FEXTOSC bits
  7132   300000                     	org	3145728
  7133   300000  AA                 	db	170
  7134                           
  7135                           ;Config register CONFIG1H @ 0x300001
  7136                           ;	unspecified, using default values
  7137                           ;	Clock Out Enable bit
  7138                           ;	CLKOUTEN = 0x1, unprogrammed default
  7139                           ;	Clock Switch Enable bit
  7140                           ;	CSWEN = 0x1, unprogrammed default
  7141                           ;	Fail-Safe Clock Monitor Enable bit
  7142                           ;	FCMEN = 0x1, unprogrammed default
  7143   300001                     	org	3145729
  7144   300001  FF                 	db	255
  7145                           
  7146                           ;Config register CONFIG2L @ 0x300002
  7147                           ;	unspecified, using default values
  7148                           ;	Master Clear Enable bit
  7149                           ;	MCLRE = 0x1, unprogrammed default
  7150                           ;	Power-up Timer Enable bit
  7151                           ;	PWRTE = 0x1, unprogrammed default
  7152                           ;	Low-power BOR enable bit
  7153                           ;	LPBOREN = 0x1, unprogrammed default
  7154                           ;	Brown-out Reset Enable bits
  7155                           ;	BOREN = 0x3, unprogrammed default
  7156   300002                     	org	3145730
  7157   300002  FF                 	db	255
  7158                           
  7159                           ;Config register CONFIG2H @ 0x300003
  7160                           ;	unspecified, using default values
  7161                           ;	Brown Out Reset Voltage selection bits
  7162                           ;	BORV = 0x3, unprogrammed default
  7163                           ;	ZCD Disable bit
  7164                           ;	ZCD = 0x1, unprogrammed default
  7165                           ;	PPSLOCK bit One-Way Set Enable bit
  7166                           ;	PPS1WAY = 0x1, unprogrammed default
  7167                           ;	Stack Full/Underflow Reset Enable bit
  7168                           ;	STVREN = 0x1, unprogrammed default
  7169                           ;	Debugger Enable bit
  7170                           ;	DEBUG = 0x1, unprogrammed default
  7171                           ;	Extended Instruction Set Enable bit
  7172                           ;	XINST = 0x1, unprogrammed default
  7173   300003                     	org	3145731
  7174   300003  FF                 	db	255
  7175                           
  7176                           ;Config register CONFIG3L @ 0x300004
  7177                           ;	WDT Period Select bits
  7178                           ;	WDTCPS = WDTCPS_31, Divider ratio 1:65536; software control of WDTPS
  7179                           ;	WDT operating mode
  7180                           ;	WDTE = OFF, WDT Disabled
  7181   300004                     	org	3145732
  7182   300004  9F                 	db	159
  7183                           
  7184                           ;Config register CONFIG3H @ 0x300005
  7185                           ;	unspecified, using default values
  7186                           ;	WDT Window Select bits
  7187                           ;	WDTCWS = 0x7, unprogrammed default
  7188                           ;	WDT input clock selector
  7189                           ;	WDTCCS = 0x7, unprogrammed default
  7190   300005                     	org	3145733
  7191   300005  FF                 	db	255
  7192                           
  7193                           ;Config register CONFIG4L @ 0x300006
  7194                           ;	unspecified, using default values
  7195                           ;	Write Protection Block 0
  7196                           ;	WRT0 = 0x1, unprogrammed default
  7197                           ;	Write Protection Block 1
  7198                           ;	WRT1 = 0x1, unprogrammed default
  7199                           ;	Write Protection Block 2
  7200                           ;	WRT2 = 0x1, unprogrammed default
  7201                           ;	Write Protection Block 3
  7202                           ;	WRT3 = 0x1, unprogrammed default
  7203                           ;	Write Protection Block 3
  7204                           ;	WRT4 = 0x1, unprogrammed default
  7205                           ;	Write Protection Block 3
  7206                           ;	WRT5 = 0x1, unprogrammed default
  7207                           ;	Write Protection Block 3
  7208                           ;	WRT6 = 0x1, unprogrammed default
  7209                           ;	Write Protection Block 3
  7210                           ;	WRT7 = 0x1, unprogrammed default
  7211   300006                     	org	3145734
  7212   300006  FF                 	db	255
  7213                           
  7214                           ;Config register CONFIG4H @ 0x300007
  7215                           ;	unspecified, using default values
  7216                           ;	Configuration Register Write Protection bit
  7217                           ;	WRTC = 0x1, unprogrammed default
  7218                           ;	Boot Block Write Protection bit
  7219                           ;	WRTB = 0x1, unprogrammed default
  7220                           ;	Data EEPROM Write Protection bit
  7221                           ;	WRTD = 0x1, unprogrammed default
  7222                           ;	Scanner Enable bit
  7223                           ;	SCANE = 0x1, unprogrammed default
  7224                           ;	Low Voltage Programming Enable bit
  7225                           ;	LVP = 0x1, unprogrammed default
  7226   300007                     	org	3145735
  7227   300007  FF                 	db	255
  7228                           
  7229                           ;Config register CONFIG5L @ 0x300008
  7230                           ;	unspecified, using default values
  7231                           ;	UserNVM Program Memory Code Protection bit
  7232                           ;	CP = 0x1, unprogrammed default
  7233                           ;	DataNVM Memory Code Protection bit
  7234                           ;	CPD = 0x1, unprogrammed default
  7235   300008                     	org	3145736
  7236   300008  FF                 	db	255
  7237                           
  7238                           ;Config register CONFIG5H @ 0x300009
  7239                           ;	unspecified, using default values
  7240   300009                     	org	3145737
  7241   300009  FF                 	db	255
  7242                           
  7243                           ;Config register CONFIG6L @ 0x30000A
  7244                           ;	unspecified, using default values
  7245                           ;	Table Read Protection Block 0
  7246                           ;	EBTR0 = 0x1, unprogrammed default
  7247                           ;	Table Read Protection Block 1
  7248                           ;	EBTR1 = 0x1, unprogrammed default
  7249                           ;	Table Read Protection Block 2
  7250                           ;	EBTR2 = 0x1, unprogrammed default
  7251                           ;	Table Read Protection Block 3
  7252                           ;	EBTR3 = 0x1, unprogrammed default
  7253                           ;	Table Read Protection Block 4
  7254                           ;	EBTR4 = 0x1, unprogrammed default
  7255                           ;	Table Read Protection Block 5
  7256                           ;	EBTR5 = 0x1, unprogrammed default
  7257                           ;	Table Read Protection Block 6
  7258                           ;	EBTR6 = 0x1, unprogrammed default
  7259                           ;	Table Read Protection Block 7
  7260                           ;	EBTR7 = 0x1, unprogrammed default
  7261   30000A                     	org	3145738
  7262   30000A  FF                 	db	255
  7263                           
  7264                           ;Config register CONFIG6H @ 0x30000B
  7265                           ;	unspecified, using default values
  7266                           ;	Boot Block Table Read Protection bit
  7267                           ;	EBTRB = 0x1, unprogrammed default
  7268   30000B                     	org	3145739
  7269   30000B  FF                 	db	255
  7270                           tosu	equ	0xFFF
  7271                           tosh	equ	0xFFE
  7272                           tosl	equ	0xFFD
  7273                           stkptr	equ	0xFFC
  7274                           pclatu	equ	0xFFB
  7275                           pclath	equ	0xFFA
  7276                           pcl	equ	0xFF9
  7277                           tblptru	equ	0xFF8
  7278                           tblptrh	equ	0xFF7
  7279                           tblptrl	equ	0xFF6
  7280                           tablat	equ	0xFF5
  7281                           prodh	equ	0xFF4
  7282                           prodl	equ	0xFF3
  7283                           indf0	equ	0xFEF
  7284                           postinc0	equ	0xFEE
  7285                           postdec0	equ	0xFED
  7286                           preinc0	equ	0xFEC
  7287                           plusw0	equ	0xFEB
  7288                           fsr0h	equ	0xFEA
  7289                           fsr0l	equ	0xFE9
  7290                           wreg	equ	0xFE8
  7291                           indf1	equ	0xFE7
  7292                           postinc1	equ	0xFE6
  7293                           postdec1	equ	0xFE5
  7294                           preinc1	equ	0xFE4
  7295                           plusw1	equ	0xFE3
  7296                           fsr1h	equ	0xFE2
  7297                           fsr1l	equ	0xFE1
  7298                           bsr	equ	0xFE0
  7299                           indf2	equ	0xFDF
  7300                           postinc2	equ	0xFDE
  7301                           postdec2	equ	0xFDD
  7302                           preinc2	equ	0xFDC
  7303                           plusw2	equ	0xFDB
  7304                           fsr2h	equ	0xFDA
  7305                           fsr2l	equ	0xFD9
  7306                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    0
    Data        6
    BSS         122
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     64      92
    BANK0           160      2     102
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          234      0       0

Pointer List with Targets:

    motor_init@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> motorR(BANK0[9]), 

    motor_init@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> motorL(BANK0[9]), 

    buggy_color_response@c	PTR struct colors size(2) Largest target is 20
		 -> color(COMRAM[20]), 

    READcolor@c	PTR struct colors size(2) Largest target is 20
		 -> color(COMRAM[20]), 

    movement_return@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> motorR(BANK0[9]), 

    movement_return@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> motorL(BANK0[9]), 

    movement@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> motorR(BANK0[9]), 

    movement@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> motorL(BANK0[9]), 

    reverse_pink@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> motorR(BANK0[9]), 

    reverse_pink@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> motorL(BANK0[9]), 

    reverse_yellow@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> motorR(BANK0[9]), 

    reverse_yellow@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> motorL(BANK0[9]), 

    space@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllhll[1]), CCPR2H(BITBIGSFRhhhllll[1]), 

    space@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllhll[1]), CCPR1H(BITBIGSFRhhhllll[1]), 

    space@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllhll[1]), CCPR2H(BITBIGSFRhhhllll[1]), 

    space@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllhll[1]), CCPR1H(BITBIGSFRhhhllll[1]), 

    space@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> motorR(BANK0[9]), 

    space@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> motorL(BANK0[9]), 

    right_45@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllhll[1]), CCPR2H(BITBIGSFRhhhllll[1]), 

    right_45@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllhll[1]), CCPR1H(BITBIGSFRhhhllll[1]), 

    right_45@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllhll[1]), CCPR2H(BITBIGSFRhhhllll[1]), 

    right_45@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllhll[1]), CCPR1H(BITBIGSFRhhhllll[1]), 

    right_45@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> motorR(BANK0[9]), 

    right_45@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> motorL(BANK0[9]), 

    left_45@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllhll[1]), CCPR2H(BITBIGSFRhhhllll[1]), 

    left_45@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllhll[1]), CCPR1H(BITBIGSFRhhhllll[1]), 

    left_45@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllhll[1]), CCPR2H(BITBIGSFRhhhllll[1]), 

    left_45@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllhll[1]), CCPR1H(BITBIGSFRhhhllll[1]), 

    left_45@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> motorR(BANK0[9]), 

    left_45@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> motorL(BANK0[9]), 

    stop@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllhll[1]), CCPR2H(BITBIGSFRhhhllll[1]), 

    stop@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllhll[1]), CCPR1H(BITBIGSFRhhhllll[1]), 

    stop@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> motorR(BANK0[9]), 

    stop@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllhll[1]), CCPR2H(BITBIGSFRhhhllll[1]), 

    stop@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllhll[1]), CCPR1H(BITBIGSFRhhhllll[1]), 

    stop@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> motorL(BANK0[9]), 

    reverse@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllhll[1]), CCPR2H(BITBIGSFRhhhllll[1]), 

    reverse@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllhll[1]), CCPR1H(BITBIGSFRhhhllll[1]), 

    reverse@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllhll[1]), CCPR2H(BITBIGSFRhhhllll[1]), 

    reverse@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllhll[1]), CCPR1H(BITBIGSFRhhhllll[1]), 

    reverse@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> motorR(BANK0[9]), 

    reverse@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> motorL(BANK0[9]), 

    forward@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllhll[1]), CCPR2H(BITBIGSFRhhhllll[1]), 

    forward@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllhll[1]), CCPR1H(BITBIGSFRhhhllll[1]), 

    forward@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllhll[1]), CCPR2H(BITBIGSFRhhhllll[1]), 

    forward@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllhll[1]), CCPR1H(BITBIGSFRhhhllll[1]), 

    forward@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> motorR(BANK0[9]), 

    forward@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> motorL(BANK0[9]), 

    setMotorPWM@m.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllhll[1]), CCPR2H(BITBIGSFRhhhllll[1]), 

    setMotorPWM@m.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllhll[1]), CCPR1H(BITBIGSFRhhhllll[1]), 

    setMotorPWM@m	PTR struct DC_motor size(2) Largest target is 11
		 -> motorR(BANK0[9]), motorL(BANK0[9]), 

    return_home@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> motorR(BANK0[9]), 

    return_home@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> motorL(BANK0[9]), 

    buggy_color_response@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> motorR(BANK0[9]), 

    buggy_color_response@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> motorL(BANK0[9]), 

    motorR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllhll[1]), CCPR2H(BITBIGSFRhhhllll[1]), 

    motorR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllhll[1]), CCPR1H(BITBIGSFRhhhllll[1]), 

    S236DC_motor$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllhll[1]), CCPR2H(BITBIGSFRhhhllll[1]), 

    motorL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllhll[1]), CCPR2H(BITBIGSFRhhhllll[1]), 

    S236DC_motor$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllhll[1]), CCPR1H(BITBIGSFRhhhllll[1]), 

    motorL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllhll[1]), CCPR1H(BITBIGSFRhhhllll[1]), 


Critical Paths under _main in COMRAM

    _main->_buggy_color_response
    _complete_initialisation->_color_click_init
    _color_click_init->_color_writetoaddr
    _color_writetoaddr->_I2C_2_Master_Write
    _buggy_color_response->_return_home
    _return_home->_movement_return
    _movement_return->_reverse_pink
    _movement_return->_reverse_yellow
    _reverse_yellow->_left_45
    _reverse_pink->_right_45
    _forward->_stop
    _movement->_left_45
    _movement->_right_45
    _space->_stop
    _right_45->_stop
    _reverse->_stop
    _left_45->_stop
    _stop->_setMotorPWM
    _setMotorPWM->___lwdiv
    ___lwdiv->___wmul
    _READcolor->___fldiv
    _color_read_Red->_I2C_2_Master_Read
    _color_read_Green->_I2C_2_Master_Read
    _color_read_Clear->_I2C_2_Master_Read
    _color_read_Blue->_I2C_2_Master_Read
    _I2C_2_Master_Write->_I2C_2_Master_Idle
    _I2C_2_Master_Stop->_I2C_2_Master_Idle
    _I2C_2_Master_Start->_I2C_2_Master_Idle
    _I2C_2_Master_RepStart->_I2C_2_Master_Idle
    _I2C_2_Master_Read->_I2C_2_Master_Idle
    ___fldiv->___xxtofl

Critical Paths under _LowISR in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _LowISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _LowISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _LowISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _LowISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _LowISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _LowISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _LowISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _LowISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _LowISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _LowISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _LowISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _LowISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _LowISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _LowISR in BANK13

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0  335348
                                              0 BANK0      2     2      0
               _buggy_color_response
            _complete_initialisation
                        _timer_reset
 ---------------------------------------------------------------------------------
 (1) _complete_initialisation                              0     0      0     544
                           _ADC_init
                  _I2C_2_Master_Init
                        _Timer0_init
                     _buggyLEDs_init
                   _color_click_init
                    _initDCmotorsPWM
                         _initUSART4
                    _interrupts_init
                         _motor_init
                         _ports_init
 ---------------------------------------------------------------------------------
 (2) _ports_init                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _motor_init                                           4     0      4     152
                                              2 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (2) _interrupts_init                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _initUSART4                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _initDCmotorsPWM                                      2     0      2      98
                                              2 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _color_click_init                                     1     1      0     294
                                              6 COMRAM     1     1      0
                  _I2C_2_Master_Init
                  _color_writetoaddr
 ---------------------------------------------------------------------------------
 (3) _color_writetoaddr                                    2     1      1     294
                                              4 COMRAM     2     1      1
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Init                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _buggyLEDs_init                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Timer0_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _buggy_color_response                                 8     2      6  334804
                                             56 COMRAM     8     2      6
                          _READcolor
                             ___flge
                            _forward
                           _movement
                    _movement_return
                        _return_home
                              _space
                               _stop
                        _timer_reset
 ---------------------------------------------------------------------------------
 (1) _timer_reset                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _return_home                                          6     2      4  134252
                                             50 COMRAM     6     2      4
                      _delay_ms_func
                            _forward
                    _movement_return
                            _reverse
                               _stop
 ---------------------------------------------------------------------------------
 (3) _movement_return                                      6     0      6  102829
                                             44 COMRAM     6     0      6
                            _left_45
                       _reverse_pink
                     _reverse_yellow
                           _right_45
                               _stop
 ---------------------------------------------------------------------------------
 (4) _reverse_yellow                                       6     2      4   33107
                                             38 COMRAM     6     2      4
                            _left_45
                            _reverse
                               _stop
 ---------------------------------------------------------------------------------
 (4) _reverse_pink                                         6     2      4   33715
                                             38 COMRAM     6     2      4
                            _reverse
                           _right_45
                               _stop
 ---------------------------------------------------------------------------------
 (3) _forward                                              5     1      4   11246
                                             26 COMRAM     5     1      4
                        _setMotorPWM
                               _stop
 ---------------------------------------------------------------------------------
 (3) _delay_ms_func                                        6     4      2     122
                                              2 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (2) _movement                                             8     2      6   60295
                                             38 COMRAM     8     2      6
                            _left_45
                            _reverse
                           _right_45
                              _space
                               _stop
 ---------------------------------------------------------------------------------
 (2) _space                                                6     2      4   11094
                                             26 COMRAM     6     2      4
                        _setMotorPWM
                               _stop
 ---------------------------------------------------------------------------------
 (4) _right_45                                            12     4      8   13792
                                             26 COMRAM    12     4      8
                       _custom_delay
                        _setMotorPWM
                               _stop
 ---------------------------------------------------------------------------------
 (3) _reverse                                              5     1      4   11702
                                             26 COMRAM     5     1      4
                        _setMotorPWM
                               _stop
 ---------------------------------------------------------------------------------
 (5) _left_45                                             12     4      8   13184
                                             26 COMRAM    12     4      8
                       _custom_delay
                        _setMotorPWM
                               _stop
 ---------------------------------------------------------------------------------
 (2) _stop                                                 5     1      4    7893
                                             21 COMRAM     5     1      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (3) _setMotorPWM                                          6     4      2    2589
                                             15 COMRAM     6     4      2
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     355
                                              2 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              7     3      4     358
                                              8 COMRAM     7     3      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (5) _custom_delay                                         5     3      2     198
                                              2 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (2) ___flge                                              12     4      8    3222
                                              2 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (2) _READcolor                                            2     0      2    3085
                                             41 COMRAM     2     0      2
                            ___fldiv
                           ___xxtofl
                    _color_read_Blue
                   _color_read_Clear
                   _color_read_Green
                     _color_read_Red
 ---------------------------------------------------------------------------------
 (3) _color_read_Red                                       7     5      2     113
                                              6 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (3) _color_read_Green                                     7     5      2     113
                                              6 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (3) _color_read_Clear                                     7     5      2     113
                                              6 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (3) _color_read_Blue                                      7     5      2     113
                                              6 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (4) _I2C_2_Master_Write                                   1     1      0      22
                                              3 COMRAM     1     1      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (4) _I2C_2_Master_Stop                                    0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (4) _I2C_2_Master_Start                                   0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (4) _I2C_2_Master_RepStart                                0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (4) _I2C_2_Master_Read                                    3     3      0      45
                                              3 COMRAM     3     3      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (5) _I2C_2_Master_Idle                                    1     1      0       0
                                              2 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) ___xxtofl                                            14    10      4     778
                                              2 COMRAM    14    10      4
 ---------------------------------------------------------------------------------
 (3) ___fldiv                                             25    17      8    1703
                                             16 COMRAM    25    17      8
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _LowISR                                               2     2      0       0
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _buggy_color_response
     _READcolor
       ___fldiv
         ___xxtofl (ARG)
       ___xxtofl
       _color_read_Blue
         _I2C_2_Master_Read
           _I2C_2_Master_Idle
         _I2C_2_Master_RepStart
           _I2C_2_Master_Idle
         _I2C_2_Master_Start
           _I2C_2_Master_Idle
         _I2C_2_Master_Stop
           _I2C_2_Master_Idle
         _I2C_2_Master_Write
           _I2C_2_Master_Idle
       _color_read_Clear
         _I2C_2_Master_Read
         _I2C_2_Master_RepStart
         _I2C_2_Master_Start
         _I2C_2_Master_Stop
         _I2C_2_Master_Write
       _color_read_Green
         _I2C_2_Master_Read
         _I2C_2_Master_RepStart
         _I2C_2_Master_Start
         _I2C_2_Master_Stop
         _I2C_2_Master_Write
       _color_read_Red
         _I2C_2_Master_Read
         _I2C_2_Master_RepStart
         _I2C_2_Master_Start
         _I2C_2_Master_Stop
         _I2C_2_Master_Write
     ___flge
     _forward
       _setMotorPWM
         ___lwdiv
           ___wmul (ARG)
         ___wmul
       _stop
         _setMotorPWM
     _movement
       _left_45
         _custom_delay
         _setMotorPWM
         _stop
       _reverse
         _setMotorPWM
         _stop
       _right_45
         _custom_delay
         _setMotorPWM
         _stop
       _space
         _setMotorPWM
         _stop
       _stop
     _movement_return
       _left_45
       _reverse_pink
         _reverse
         _right_45
         _stop
       _reverse_yellow
         _left_45
         _reverse
         _stop
       _right_45
       _stop
     _return_home
       _delay_ms_func
       _forward
       _movement_return
       _reverse
       _stop
     _space
     _stop
     _timer_reset
   _complete_initialisation
     _ADC_init
     _I2C_2_Master_Init
     _Timer0_init
     _buggyLEDs_init
     _color_click_init
       _I2C_2_Master_Init
       _color_writetoaddr
         _I2C_2_Master_Start
         _I2C_2_Master_Stop
         _I2C_2_Master_Write
     _initDCmotorsPWM
     _initUSART4
     _interrupts_init
     _motor_init
     _ports_init
   _timer_reset

 _LowISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             DE9      0       0      66        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK13           EA      0       0      30        0.0%
BANK13              EA      0       0      31        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      2      66       5       63.7%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     40      5C       1       97.9%
BITBIGSFRhlllhl     37      0       0      47        0.0%
BITBIGSFRhlllhh     31      0       0      45        0.0%
BITBIGSFRlllhll     2A      0       0      58        0.0%
BITBIGSFRlllll      26      0       0      64        0.0%
BITBIGSFRllhh       20      0       0      50        0.0%
BITBIGSFRlllhhh     1E      0       0      52        0.0%
BITBIGSFRhhhhlh     1B      0       0      33        0.0%
BITBIGSFRhhhlll     17      0       0      38        0.0%
BITBIGSFRhlllhh     14      0       0      42        0.0%
BITBIGSFRhhhhll     13      0       0      34        0.0%
BITBIGSFRlllhhh     11      0       0      53        0.0%
BITBIGSFRhhhlhh      E      0       0      35        0.0%
BITBIGSFRhhhhh       D      0       0      32        0.0%
BITBIGSFRllhl        C      0       0      51        0.0%
BITBIGSFRlllhll      9      0       0      61        0.0%
BITBIGSFRlllhll      9      0       0      60        0.0%
BITBIGSFRhlllll      8      0       0      48        0.0%
BITBIGSFRhlllhh      6      0       0      44        0.0%
BITBIGSFRllllh       6      0       0      63        0.0%
BITBIGSFRlllhlh      6      0       0      57        0.0%
BITBIGSFRlllhlh      5      0       0      56        0.0%
BITBIGSFRhhhlll      5      0       0      39        0.0%
BITBIGSFRhlllhh      3      0       0      43        0.0%
BITBIGSFRlllhll      3      0       0      59        0.0%
BITBIGSFRlllhhl      3      0       0      55        0.0%
BITBIGSFRhlllhl      2      0       0      46        0.0%
BITBIGSFRhhhllh      2      0       0      37        0.0%
BITBIGSFRhhhlhl      1      0       0      36        0.0%
BITBIGSFRlllhhh      1      0       0      54        0.0%
BITBIGSFRhllhl       1      0       0      41        0.0%
BITBIGSFRhlh         1      0       0      40        0.0%
BITBIGSFRlllhll      1      0       0      62        0.0%
BITBIGSFRlh          1      0       0      49        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      C2      65        0.0%
DATA                 0      0      C2       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.40 build 20220703182018 
Symbol Table                                                                                   Thu Mar 16 02:23:44 2023

                 _color_read_Red 1F22                     ___fldiv@aexp 0029  
                   ___fldiv@bexp 0028                     ___fldiv@sign 0021  
                _color_read_Blue 2012                               l30 2210  
                             l33 2236                               l42 2344  
                             l27 220E                               l36 234E  
                             l45 233A                               l39 2358  
                             l48 2130                               bsr 000FE0  
            ___wmul@multiplicand 0005                 custom_delay@temp 0003  
               _color_read_Clear 1FC2                 _color_read_Green 1F72  
        _complete_initialisation 20AE                delay_ms_func@time 0003  
                            l113 21E4                              l122 2060  
                            l131 17EC                              l116 22BC  
                            l125 1FC0                              l119 1F70  
                            l128 2010                              l312 16B2  
                            l152 12CE                              l144 0722  
                            l323 1576                              l331 19F2  
                            l155 215A                              l403 1E5A  
                            l510 21B0                              l158 2170  
                            l334 1C58                              l270 1D7A  
                            l183 229C                              l416 232E  
                            l280 20AC                              l337 1CEA  
                            l507 2192                              l291 1B94  
                            l347 0DD8                              l283 1AAA  
                            l435 22DC                              l277 143A  
                            l357 0FA4                              l438 231E  
                            l295 1BC4                              l287 1ADA  
                            l463 227C                              l296 1BC6  
                            l288 1ADC                              l466 230C  
                            l562 20EE                              l394 1DF4  
                            l398 1E10                              l577 22F6  
                            l586 225C                              l851 18AA  
                            l856 18F0                              wreg 000FE8  
                  return_home@mL 0033                    return_home@mR 0035  
                           l1241 0FFC                             l3001 012A  
                           l1170 091C                             l3003 015C  
                           l3011 01BC                             l1244 1158  
                           l1084 1DEE                             l1181 09DA  
                           l1173 08E0                             l1077 1DE6  
                           l2301 1EA8                             l3101 06A8  
                           l3013 01EE                             l3021 024E  
                           l3005 018E                             l1182 09C8  
                           l1255 10F0                             l2303 1EB4  
                           l3103 06BC                             l3031 02F6  
                           l3023 0280                             l3015 0220  
                           l3007 019E                             l3111 070E  
                           l1168 0ABC                             l1248 1094  
                           l2321 2210                             l2305 1EBC  
                           l2401 1496                             l3105 06D0  
                           l3041 0388                             l3025 02B2  
                           l3033 0312                             l3017 0230  
                           l3009 01A0                             l3121 20D6  
                           l3113 20AE                             l3201 1DF0  
                           l1179 0962                             l2323 2220  
                           l2315 2172                             l2251 1D7C  
                           l2331 1B12                             l2411 14DE  
                           l2403 14A2                             l3107 06E8  
                           l3051 044A                             l3035 0344  
                           l3043 03A4                             l3027 02E4  
                           l3019 0232                             l3123 20DE  
                           l3115 20BA                             l3203 1E02  
                           l2501 1F72                             l2317 217E  
                           l2261 1DB4                             l2253 1D84  
                           l2245 2238                             l2341 1B74  
                           l2333 1B30                             l2325 1ADE  
                           l2421 153C                             l2413 14EC  
                           l2405 14BA                             l3109 0706  
                           l3061 04FE                             l3053 044C  
                           l3045 03D6                             l3037 0376  
                           l3029 02F4                             l3125 20E2  
                           l3117 20BE                             l3205 1E1E  
                           l2431 234A                             l2503 1FB8  
                           l2319 218E                             l2271 1DE0  
                           l2263 1DBA                             l2255 1D96  
                           l2247 2254                             l2351 158C  
                           l2343 1B80                             l2335 1B48  
                           l2327 1AF2                             l2423 1552  
                           l2415 1504                             l2407 14C6  
                           l3071 0590                             l3063 050E  
                           l3047 0408                             l3055 0468  
                           l3039 0386                             l3127 20E6  
                           l3119 20C2                             l3207 1E36  
                           l2601 0730                             l2433 2350  
                           l2441 2332                             l2265 1DD0  
                           l2257 1D9E                             l2281 1358  
                           l2273 12D0                             l2361 15D2  
                           l2353 159C                             l2345 1B8C  
                           l2337 1B52                             l2329 1B02  
                           l2425 1554                             l2417 151C  
                           l2409 14D2                             l2521 1A46  
                           l2513 19F4                             l3081 0622  
                           l3073 05C2                             l3065 0510  
                           l3057 049A                             l3049 043A  
                           l3129 20EA                             l3209 1E3A  
                           l2611 0770                             l2603 073E  
                           l2451 2106                             l2435 2354  
                           l2443 2336                             l2507 1FC2  
                           l2267 1DD8                             l2259 1DA6  
                           l2283 139A                             l2275 12EC  
                           l2291 1E7E                             l2371 161A  
                           l2363 15DE                             l2355 15AC  
                           l2347 1BAC                             l2339 1B6A  
                           l2419 1528                             l2427 1558  
                           l2531 1A96                             l2523 1A5E  
                           l2515 1A08                             l3091 064E  
                           l3083 0638                             l3075 05D2  
                           l3059 04CC                             l3067 052C  
                           l2701 09C0                             l2621 0796  
                           l2613 0772                             l2605 0740  
                           l2453 212C                             l2445 20F2  
                           l2429 2346                             l2437 233C  
                           l2509 2008                             l2269 1DDA  
                           l2285 13B6                             l2277 1340  
                           l2293 1E80                             l2381 1678  
                           l2373 1628                             l2365 15F6  
                           l2357 15AE                             l2349 1578  
                           l2541 1908                             l2533 1AA2  
                           l2525 1A68                             l2517 1A18  
                           l2461 1C00                             l3093 0650  
                           l3085 0648                             l3077 05D4  
                           l3069 055E                             l2711 0A2E  
                           l2631 07D6                             l2623 07A4  
                           l2607 0750                             l2615 077A  
                           l2455 212E                             l2447 20F6  
                           l2439 2340                             l2287 13FA  
                           l2279 1354                             l2383 168E  
                           l2375 1640                             l2367 1602  
                           l2359 15BA                             l2391 1450  
                           l2551 1974                             l2543 1918  
                           l2535 1AC2                             l2527 1A80  
                           l2519 1A28                             l2471 1CAA  
                           l2463 1C18                             l3095 0664  
                           l3087 064A                             l3079 05F0  
                           l2721 0A98                             l2705 09EA  
                           l2713 0A32                             l2641 0816  
                           l2633 07D8                             l2625 07A6  
                           l2617 078A                             l2609 0760  
                           l2449 20FE                             l2297 1E84  
                           l2289 1E5E                             l2385 1690  
                           l2377 1658                             l2369 160E  
                           l2393 1460                             l2561 19D8  
                           l2545 1944                             l2553 197C  
                           l2537 18F2                             l2801 0B16  
                           l2529 1A8A                             l2473 1CD6  
                           l2465 1C44                             l3097 067C  
                           l3089 064C                             l2481 21F8  
                           l2723 0A9C                             l2715 0A4C  
                           l2707 09F6                             l2651 0846  
                           l2643 081E                             l2627 07B6  
                           l2635 07E0                             l2619 0790  
                           l2491 1F68                             l2299 1E9C  
                           l2379 1664                             l2387 1694  
                           l2395 1470                             l2563 19F0  
                           l2555 1994                             l2547 195C  
                           l2539 1906                             l2811 0BC0  
                           l2803 0B28                             l2467 1C5A  
                           l2459 1BC8                             l2571 0E38  
                           l3099 0690                             l2483 21FA  
                           l2475 21E6                             l2725 0AAA  
                           l2717 0A62                             l2709 0A04  
                           l2661 0884                             l2653 0846  
                           l2645 0822                             l2637 07F0  
                           l2629 07C6                             l2741 0FC6  
                           l2397 1472                             l2389 143C  
                           l2557 19AC                             l2549 1968  
                           l2821 0C64                             l2813 0BF8  
                           l2805 0B60                             l2469 1C92  
                           l2581 0F08                             l2573 0E70  
                           l2565 0DDA                             l2485 21FC  
                           l2477 21F0                             l2901 1CFC  
                           l2727 0AB0                             l2719 0A7C  
                           l2671 08D0                             l2663 0894  
                           l2639 0806                             l2751 103E  
                           l2743 100C                             l2495 2012  
                           l2399 147E                             l2559 19C4  
                           l2831 0CDC                             l2823 0C88  
                           l2815 0C0C                             l2807 0B74  
                           l2591 0F90                             l2583 0F1C  
                           l2575 0E84                             l2567 0DEC  
                           l2479 21F6                             l2487 22A0  
                           l2911 1D56                             l2903 1D22  
                           l2729 0AB2                             l2681 091A  
                           l2673 08DE                             l2665 08A4  
                           l2657 085A                             l2649 0836  
                           l2761 10C6                             l2753 104A  
                           l2745 1022                             l2737 0FA8  
                           l2497 2058                             l2489 1F22  
                           l2841 0D8C                             l2833 0D08  
                           l2817 0C20                             l2825 0C9C  
                           l2809 0BAC                             l2593 2132  
                           l2585 0F54                             l2577 0EBC  
                           l2569 0E24                             l2921 1D78  
                           l2913 1D60                             l2905 1D26  
                           l2691 0960                             l2683 092C  
                           l2675 08EA                             l2667 08AC  
                           l2659 0874                             l2771 1104  
                           l2763 10D2                             l2755 107C  
                           l2739 0FB8                             l2843 0DA0  
                           l2835 0D2C                             l2827 0CB0  
                           l2819 0C38                             l2595 213E  
                           l2587 0F68                             l2579 0ED0  
                           l2851 118A                             l2915 1D62  
                           l2907 1D4A                             l2931 209C  
                           l2923 2062                             l2685 0942  
                           l2693 0972                             l2677 0908  
                           l2669 08BC                             l2773 1128  
                           l2765 10E0                             l2757 107E  
                           l2749 1036                             l2829 0CC4  
                           l2837 0D40                             l2597 2156  
                           l2589 0F7C                             l2861 11FA  
                           l2853 11A2                             l2845 115A  
                           l2941 22DA                             l2917 1D6C  
                           l2909 1D54                             l2933 2320  
                           l2925 2070                             l2695 0980  
                           l2687 0948                             l2679 090A  
                           l2599 0724                             l2775 1138  
                           l2767 10FE                             l2759 108A  
                           l2839 0D54                             l2871 1256  
                           l2863 120E                             l2855 11B6  
                           l2847 115E                             l2951 22F0  
                           l2935 22BE                             l2791 21DA  
                           l2783 21B2                             l2919 1D6E  
                           l2927 2078                             l2943 225E  
                           l2697 0984                             l2689 0952  
                           l2777 1146                             l2769 1100  
                           l2793 16B4                             l2961 182C  
                           l2881 12BE                             l2873 126A  
                           l2865 1228                             l2857 11CE  
                           l2849 1188                             l2953 22F2  
                           l2937 22C6                             l2945 22F8  
                           l2785 21B6                             l2929 2094  
                           l2699 0992                             l2779 1148  
                           l2971 1898                             l2963 185A  
                           l2795 0ABE                             l2875 1282  
                           l2867 122A                             l2859 11E2  
                           l2883 230E                             l2955 22F4  
                           l2947 22DE                             l2939 22D0  
                           l2787 21C0                             l2891 228C  
                           l2973 18E8                             l2965 186A  
                           l2957 17EE                             l2797 0AD2  
                           l2877 1296                             l2869 123E  
                           l2981 0054                             l2949 22E8  
                           l2789 21D0                             l2893 2296  
                           l2885 227E                             l2975 18EE  
                           l2967 1878                             l2959 181C  
                           l2799 0AEA                             l2879 12AE  
                           l2991 00A8                             l2983 006A  
                           l2895 2298                             l2887 2288  
                           l2969 188A                             l2993 00BC  
                           l2985 007A                             l2897 229A  
                           l2889 228A                             l2995 00D4  
                           l2987 007C                             l2979 0048  
                           l2899 1CEC                             l2997 00E0  
                           l2989 0090                             l2999 00F8  
                           u2000 0B28                             u2001 0B24  
                           u2010 0B74                             u2011 0B70  
                           u2100 185A                             u1300 1DB4  
                           u2020 0BC0                             u2101 1856  
                           u1301 1DB0                             u2021 0BBC  
                           u2110 1878                             u1310 1DD0  
                           u2030 0C0C                             u2111 1874  
                           u1311 1DCC                             u2031 0C08  
                           u2120 1898                             u1320 12EC  
                           u1400 1BC4                             u2040 0CB0  
                           u2200 0280                             u2121 1894  
                           u1321 12E8                             u1401 1BC0  
                           u2041 0CAC                             u2201 027C  
                           u2130 18E8                             u1330 13B6  
                           u1410 15D2                             u2050 0D54  
                           u2210 02B2                             u2131 18E4  
                           u1331 13B2                             u1411 15CE  
                           u2051 0D50                             u2211 02AE  
                           u1340 21B0                             u1420 15F6  
                           u1500 1576                             u2060 0DA0  
                           u2300 04FE                             u2220 02E4  
                           u2140 006A                             u1341 21AC  
                           u1421 15F2                             u1501 1572  
                           u2061 0D9C                             u2301 04FA  
                           u2221 02E0                             u2141 0066  
                           u1350 2220                             u1510 211A  
                           u1430 1640                             u2070 12BE  
                           u2310 055E                             u2230 0344  
                           u2150 012A                             u1351 221C  
                           u1511 2112                             u1431 163C  
                           u2071 12BA                             u2311 055A  
                           u2231 0340                             u2151 0126  
                           u1360 2236                             u1440 1658  
                           u1600 0E38                             u2080 12CE  
                           u2320 0590                             u2240 0376  
                           u2160 015C                     _BAUD4CONbits 000EE9  
                           u1361 2232                             u1441 1654  
                           u1601 0E34                             u2081 12CA  
                           u2321 058C                             u2241 0372  
                           u2161 0158                             u2090 181C  
                           u1290 1D96                             u1450 16B2  
                           u1370 1B48                             u1530 1A5E  
                           u1610 0E84                             u2330 05C2  
                           u2250 03D6                             u2170 018E  
                           u2091 1818                             u1291 1D92  
                           u1451 16AE                             u1371 1B44  
                           u1531 1A5A                             u1611 0E80  
                           u2331 05BE                             u2251 03D2  
                           u2171 018A                             u1700 07A4  
                           u1380 1B6A                             u1460 1496  
                           u1540 1A80                             u1620 0ED0  
                           u2340 0622                             u2260 0408  
                           u2180 01EE                             u1701 07A0  
                           u1381 1B66                             u1461 1492  
                           u1541 1A7C                             u1621 0ECC  
                           u2341 061E                             u2261 0404  
                           u2181 01EA                             u1710 07B6  
                           u1390 1BAC                             u1470 14BA  
                           u1550 1AC2                             u1630 0F1C  
                           u2350 0638                             u2270 043A  
                           u2190 0220                             u1711 07B2  
                           u1391 1BA8                             u1471 14B6  
                           u1551 1ABE                             u1631 0F18  
                           u2351 0634                             u2271 0436  
                           u2191 021C                             u1800 0960  
                           u1720 07C6                             u1528 211C  
                           u1480 1504                             u1560 1ADA  
                           u1640 0F68                             u2280 049A  
                           u1801 095C                             u1721 07C2  
                           u1481 1500                             u1561 1AD6  
                           u1641 0F64                             u2281 0496  
                           u1810 0980                             u1730 0806  
                           u1490 151C                             u1570 1994  
                           u1650 0F90                             u2290 04CC  
                           _T2PR 000FBC                             u1811 097C  
                           u1731 0802                             u1491 1518  
                           u1571 1990                             u1651 0F8C  
                           u2291 04C8                             u2507 1E2A  
                           u1820 0992                             u1740 0846  
                           u1900 0FB8                             u1580 19AC  
                           u1660 2170                             u1821 098E  
                           u1741 0842                             u1901 0FB4  
                           u1581 19A8                             u1661 216C  
                           u2517 21C6                             u1830 09C0  
                           u1750 08BC                             u1670 073E  
                           u1910 0FC6                             u1590 0DEC  
                           u2470 1E02                             u1831 09BC  
                           u1751 08B8                             u1671 073A  
                           u1911 0FC2                             u1591 0DE8  
                           u2607 11EC                             u2527 009A  
                           u2471 1DFE                             u1840 09D6  
                           u1760 08DE                             u1680 0750  
                           u1920 1022                             u2480 1E10  
                           u1841 09D2                             u1761 08DA  
                           u1681 074C                             u1921 101E  
                           u2617 1248                             u2537 00C6  
                           u2481 1E0C                             u1850 09EA  
                           u1770 0908                             u1690 0760  
                           u1930 1078                             u2490 1E1E  
                           u1851 09E6                             u1771 0904  
                           u1691 075C                             u1931 1074  
                           u2707 0ADC                             u2627 1274  
                           u2547 00EA                             u2491 1E1A  
                           u1860 0A04                             u1780 092C  
                           u1940 10C2                             u1861 0A00  
                           u1781 0928                             u1941 10BE  
                           u2717 0B08                             u2637 12A0  
                           u2557 066E                             u1870 0A4C  
                           u1790 0942                             u1950 10E0  
                           u1871 0A48                             u1791 093E  
                           u1951 10DC                             u2807 1546  
                           u2727 0C2A                             u2647 1C0A  
                           u2567 069A                             u1880 0A7C  
                           u1960 10F0                             u1881 0A78  
                           u1961 10EC                             u2817 1B8E  
                           u2737 0C56                             u2657 1C36  
                           u2577 06DA                             u1890 0AAA  
                           u1970 10FE                             u1891 0AA6  
                           u1971 10FA                             u2827 1620  
                           u2747 0CCE                             u2667 1C9C  
                           u2587 1194                             u1980 1138  
                           u1981 1134                             u2837 1682  
                           u2757 0CFA                             u2677 1CC8  
                           u2597 11C0                             u1990 1146  
                           u1991 1142                             u2847 1EB6  
                           u2767 1976                             u2687 1AA4  
                           u2857 2184                             u2777 19B6  
                           u2697 2148                             u2787 19E2  
                           u2797 14E4          __end_of_interrupts_init 2330  
                _movement_return 0DDA                             _main 1DF0  
                           fsr2h 000FDA                             indf2 000FDF  
                           fsr1l 000FE1                             fsr2l 000FD9  
                           btemp 005D                             _stop 1E5E  
                           prodh 000FF4                             prodl 000FF3  
                           start 0044                 __end_of_ADC_init 22F8  
                ___fldiv@new_exp 0022           __end_of_color_read_Red 1F72  
                   ___param_bank 000000                            ?_main 0001  
                          _ADPCH 000F5F                  __end_of___fldiv 0ABE  
                          ?_stop 0016                  __end_of___lwdiv 1DF0  
                          i1l422 0038                            _TMR0H 000FD4  
                          _TMR0L 000FD3                     left_45@count 001F  
     __end_of_I2C_2_Master_Start 2350       __end_of_I2C_2_Master_Write 233C  
                __end_of_left_45 16B4                            _color 0045  
                __end_of_forward 1ADE                            _space 18F2  
                          tablat 000FF5                  __end_of_reverse 1BC8  
                          ttemp5 005E                            ttemp6 0061  
                          ttemp7 0065                            stop@i 001A  
                          status 000FD8                            wtemp8 005E  
        __end_of_color_read_Blue 2062            _I2C_2_Master_RepStart 2350  
                 delay_ms_func@i 0007                  ?_color_read_Red 0007  
                __initialization 1EC8                     __end_of_main 1E5E  
                   __end_of_stop 1EC8                 _color_upperbound 00C2  
      ??_complete_initialisation 0008                left_45@left_timer 0021  
                         ??_main 00C4                           ??_stop 001A  
                  __activetblptr 000000          __end_of_movement_return 0FA6  
                   ?_setMotorPWM 0010                           _ADRESH 000F64  
                         _CCPR1H 000FAA                           _CCPR2H 000FA6  
                         _CCPR3H 000F25                           _CCPR4H 000F21  
                         ?_space 001B            __end_of_delay_ms_func 2172  
              __end_of_READcolor 17EE                           _RC0PPS 000E62  
                         _RC4REG 000EE3                           _RE2PPS 000E74  
                         i1l2173 0022                           i1l2175 0032  
                         i1l2177 0036                           _RC7PPS 000E69  
                         _RD5PPS 000E6F                           _RE4PPS 000E76  
                         _RD6PPS 000E70                           _RG6PPS 000E88  
               ?_interrupts_init 0001         __end_of_color_click_init 21E6  
                         _RX4PPS 000E15                           _TX4REG 000EE4  
               __end_of___xxtofl 115A                           _LowISR 0018  
                  ??_Timer0_init 0003                     _CCPTMRS0bits 000FAD  
                         ___flge 17EE                           ___wmul 2238  
                      ??___fldiv 0019                        ??___lwdiv 000D  
               ??_buggyLEDs_init 0003                           clear_0 1F06  
                         clear_1 1F12                    ?_custom_delay 0003  
                         _motorL 00B9                           _motorR 00B0  
                         isa$std 000001                        ??_left_45 0023  
               __end_of_right_45 1578                     __pdataCOMRAM 0059  
                      ??_forward 001F                 __end_of_movement 0DDA  
                         tblptrh 000FF7                           tblptrl 000FF6  
                         tblptru 000FF8                        ?_ADC_init 0001  
                      ??_reverse 001F                     ?_return_home 0033  
                         stop@mL 0016                           stop@mR 0018  
                   ?_timer_reset 0001                ??_initDCmotorsPWM 0005  
__end_of_complete_initialisation 20F0     __end_of_buggy_color_response 0724  
                     ___flge@ff1 0003                       ___flge@ff2 0007  
                   ___xxtofl@arg 000D                     ___xxtofl@exp 000C  
                   ___xxtofl@val 0003                       __accesstop 0060  
        __end_of__initialization 1F18         __end_of_color_read_Clear 2012  
       __end_of_color_read_Green 1FC2           ?_I2C_2_Master_RepStart 0001  
                  ___rparam_used 000001                 ?_color_read_Blue 0007  
                 __pcstackCOMRAM 0001                     __pidataBANK0 235E  
                 ??_custom_delay 0005                    __end_of_space 19F4  
            __end_of_Timer0_init 22DE                       ??_ADC_init 0003  
               ?_movement_return 002D                          ??_space 001F  
                     _card_count 0044                       __pbssBANK0 0060  
                        ?_LowISR 0001                _color_writetoaddr 229E  
                   _T2CLKCONbits 000FBF                          ?___flge 0003  
             ?_color_writetoaddr 0005                          ?___wmul 0003  
            ??_color_writetoaddr 0006                        ?___xxtofl 0003  
                        _SP4BRGH 000EE6                          _SP4BRGL 000EE5  
                        _SSP2ADD 000ED6                          _SSP2BUF 000ED5  
         color_writetoaddr@value 0005                 ??_color_read_Red 0009  
      __end_of_color_writetoaddr 22BE                        _ADREFbits 000F58  
             _I2C_2_Master_Start 2346                       _initUSART4 227E  
             _I2C_2_Master_Write 2330                        ?_right_45 001B  
                        __Hparam 0000                       _left_timer 005B  
                        __Lparam 0000                color_read_Red@tmp 000C  
                      ?_movement 0027                      _Timer0_init 22BE  
                        ___fldiv 0724              ?_I2C_2_Master_Start 0001  
                        ___lwdiv 1D7C              ?_I2C_2_Master_Write 0001  
           _buggy_color_response 0048                          __pcinit 1EC8  
                        __ramtop 0E00                          __ptext0 1DF0  
                        __ptext1 20AE                          __ptext2 225E  
                        __ptext3 2062                          __ptext4 2320  
                        __ptext5 227E                          __ptext6 1CEC  
                        __ptext7 21B2                          __ptext8 229E  
                        __ptext9 21E6                          _left_45 1578  
                      _T2CONbits 000FBD                          _forward 19F4  
                     ??___xxtofl 0007                    ?_reverse_pink 0027  
                      _T2HLTbits 000FBE                          _reverse 1ADE  
                  right_45@count 001F             ??_I2C_2_Master_Start 0004  
           ??_I2C_2_Master_Write 0004             end_of_initialization 1F18  
           __end_of_custom_delay 21B2                ?_color_click_init 0001  
                      _READcolor 16B4                       ??_right_45 0023  
             ??_color_click_init 0007                          space@mL 001B  
                        space@mR 001D                       ??_movement 002D  
                        postdec1 000FE5                          postdec2 000FDD  
                        postinc0 000FEE                          postinc2 000FDE  
                     _motor_init 2062            ?_buggy_color_response 0039  
                _initDCmotorsPWM 1CEC                        _PORTFbits 000F8E  
             setMotorPWM@negDuty 0015                   ??_reverse_pink 002B  
                  ___xxtofl@sign 000B                        _TRISAbits 000F81  
             setMotorPWM@posDuty 0014                        _TRISCbits 000F83  
                      _TRISDbits 000F84                        _TRISEbits 000F85  
                      _TRISFbits 000F86                        _TRISGbits 000F87  
                      _TRISHbits 000F88                      ___fldiv@grs 0024  
                     _ports_init 225E                      ___fldiv@rem 001D  
       color_writetoaddr@address 0006          ??_I2C_2_Master_RepStart 0004  
                    _CCP1CONbits 000FAB                ?_color_read_Clear 0007  
                    _CCP2CONbits 000FA7                ?_color_read_Green 0007  
                     ?_READcolor 002A                      _CCP3CONbits 000F26  
                    ?_initUSART4 0001                      _CCP4CONbits 000F22  
             ??_color_read_Clear 0009         ?_complete_initialisation 0001  
             ??_color_read_Green 0009                   __end_of_LowISR 0044  
                 __end_of___flge 18F2                   __end_of___wmul 225E  
                  __pidataCOMRAM 235A              color_read_Clear@tmp 000C  
            start_initialization 1EC8           buggy_color_response@mL 0039  
         buggy_color_response@mR 003B              color_read_Green@tmp 000C  
                       ??_LowISR 0001                   _reverse_yellow 1BC8  
        __end_of_initDCmotorsPWM 1D7C                         ??___flge 000B  
         ??_buggy_color_response 003F                         ??___wmul 0007  
                    ?_motor_init 0003                       READcolor@c 002A  
                    __pdataBANK0 00C2                      _card_memory 0088  
                      ___fldiv@a 0015                        ___fldiv@b 0011  
                    __pbssCOMRAM 0041                    __pcstackBANK0 00C4  
                    ?_ports_init 0001                    _delay_ms_func 2132  
         __end_of_reverse_yellow 1C5A                      ??_READcolor 002C  
           __end_of_reverse_pink 1CEC                 ___lwdiv@dividend 0009  
                   ?_Timer0_init 0001                         ?___fldiv 0011  
                       ?___lwdiv 0009                       right_45@mL 001B  
                     right_45@mR 001D                      __pintcodelo 0018  
                   _custom_delay 2172             I2C_2_Master_Read@ack 0005  
              ??_interrupts_init 0003             I2C_2_Master_Read@tmp 0006  
                       ?_left_45 001B                         ?_forward 001B  
              _I2C_2_Master_Idle 2210                _I2C_2_Master_Init 21E6  
              _I2C_2_Master_Read 20F0                _I2C_2_Master_Stop 233C  
                       _ADC_init 22DE                         ?_reverse 001B  
             ?_I2C_2_Master_Idle 0001               ?_I2C_2_Master_Init 0001  
             ?_I2C_2_Master_Read 0001                    ??_setMotorPWM 0012  
             ?_I2C_2_Master_Stop 0001                 ___lwdiv@quotient 000D  
       initDCmotorsPWM@PWMperiod 0003                   ?_delay_ms_func 0003  
            ??_I2C_2_Master_Idle 0003              ??_I2C_2_Master_Init 0003  
            ??_I2C_2_Master_Read 0004                   ___wmul@product 0007  
                       _LATAbits 000F79              ??_I2C_2_Master_Stop 0004  
                       _LATCbits 000F7B                         _LATDbits 000F7C  
                     movement@mL 0027                         _LATEbits 000F7D  
                     movement@mR 0029                         _LATFbits 000F7E  
                 reverse_pink@mL 0027                         _LATGbits 000F7F  
                 reverse_pink@mR 0029                         _LATHbits 000F80  
                ?_reverse_yellow 0027                         _IPR0bits 000E1F  
                       _PIE0bits 000E29                         i1u114_20 0032  
                       i1u114_21 002E                movement_return@mL 002D  
              movement_return@mR 002F                         _PIR0bits 000E33  
                       _PIR4bits 000E37                 ?_initDCmotorsPWM 0003  
                       _SSP2CON2 000EDA                         _SSP2STAT 000ED8  
                      _timer_val 0041                       _ADCON0bits 000F60  
      __end_of_I2C_2_Master_Idle 2238        __end_of_I2C_2_Master_Init 2210  
      __end_of_I2C_2_Master_Read 2132                ___wmul@multiplier 0003  
      __end_of_I2C_2_Master_Stop 2346                     setMotorPWM@m 0010  
    I2C_2_Master_Write@data_byte 0004                        left_45@mL 001B  
                      left_45@mR 001D                ??_color_read_Blue 0009  
                  ??_return_home 0037                    ??_timer_reset 0003  
                      copy_data0 1EF4                    movement@count 002B  
  __end_of_I2C_2_Master_RepStart 235A               color_read_Blue@tmp 000C  
            __end_of_setMotorPWM 143C                     ??_initUSART4 0003  
          buggy_color_response@c 003D                         __Hrparam 0000  
                       __Lrparam 0000                        forward@mL 001B  
                      forward@mR 001D                ??_movement_return 0033  
                     _ANSELDbits 000EA7                       _ANSELFbits 000EB4  
                       ___xxtofl 0FA6             movement_return@count 0031  
                     _T0CON0bits 000FD5                       _T0CON1bits 000FD6  
                 _buggyLEDs_init 22F8                  ___lwdiv@divisor 000B  
             __end_of_initUSART4 229E                  ___lwdiv@counter 000F  
                ??_delay_ms_func 0005                         __ptext10 22F8  
                       __ptext11 22BE                         __ptext20 2132  
                       __ptext12 22DE                         __ptext21 0ABE  
                       __ptext13 0048                         __ptext30 2172  
                       __ptext22 18F2                         __ptext14 230E  
                       __ptext31 17EE                         __ptext23 143C  
                       __ptext15 115A                         __ptext40 2350  
                       __ptext32 16B4                         __ptext24 1ADE  
                       __ptext16 0DDA                         __ptext41 20F0  
                       __ptext33 1F22                         __ptext25 1578  
                       __ptext17 1BC8                         __ptext42 2210  
                       __ptext34 1F72                         __ptext26 1E5E  
                       __ptext18 1C5A                         __ptext43 0FA6  
                       __ptext35 1FC2                         __ptext27 12D0  
                       __ptext19 19F4                         __ptext44 0724  
                       __ptext36 2012                         __ptext28 2238  
                       __ptext37 2330                         __ptext29 1D7C  
                       __ptext38 233C                         __ptext39 2346  
                      right_45@i 0025                     _SSP2CON1bits 000ED9  
                   _SSP2CON2bits 000EDA              __end_of_return_home 12D0  
            __end_of_timer_reset 2320                         _right_45 143C  
                      reverse@mL 001B                        reverse@mR 001D  
                       _movement 0ABE                         isa$xinst 000000  
                     _RC4STAbits 000EE7                         int$flags 005D  
                   ??_motor_init 0007                         left_45@i 0025  
         __end_of_buggyLEDs_init 230E                       _INTCONbits 000FF2  
                   _reverse_pink 1C5A                     ??_ports_init 0003  
                    _setMotorPWM 12D0                         intlevel1 0000  
             __end_of_motor_init 20AE                      _right_timer 0059  
               reverse_yellow@mL 0027                 reverse_yellow@mR 0029  
                _interrupts_init 2320                     _timer_memory 0060  
             __end_of_ports_init 227E                     motor_init@mL 0003  
                   motor_init@mR 0005                 _color_click_init 21B2  
            right_45@right_timer 0021                  ?_buggyLEDs_init 0001  
                     _SSP2DATPPS 000E1D                       _SSP2CLKPPS 000E1C  
                    _timer_index 0043                      _return_home 115A  
                    _timer_reset 230E                 ??_reverse_yellow 002B  
                     _TX4STAbits 000EE8                    custom_delay@i 0006  
