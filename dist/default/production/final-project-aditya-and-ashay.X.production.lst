

Microchip MPLAB XC8 Assembler V2.40 build 20220703182018 
                                                                                               Sun Mar 12 13:29:58 2023

Microchip MPLAB XC8 C Compiler v2.40 (Free license) build 20220703182018 Og1 
     1                           	processor	18F67K40
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1
    28                           	psect	text17,global,reloc=2,class=CODE,delta=1
    29                           	psect	text18,global,reloc=2,class=CODE,delta=1
    30                           	psect	text19,global,reloc=2,class=CODE,delta=1,group=1
    31                           	psect	text20,global,reloc=2,class=CODE,delta=1,group=1
    32                           	psect	text21,global,reloc=2,class=CODE,delta=1
    33                           	psect	text22,global,reloc=2,class=CODE,delta=1,group=1
    34                           	psect	text23,global,reloc=2,class=CODE,delta=1,group=1
    35                           	psect	text24,global,reloc=2,class=CODE,delta=1,group=1
    36                           	psect	text25,global,reloc=2,class=CODE,delta=1
    37                           	psect	text26,global,reloc=2,class=CODE,delta=1
    38                           	psect	text27,global,reloc=2,class=CODE,delta=1
    39                           	psect	text28,global,reloc=2,class=CODE,delta=1
    40                           	psect	text29,global,reloc=2,class=CODE,delta=1
    41                           	psect	text30,global,reloc=2,class=CODE,delta=1
    42                           	psect	text31,global,reloc=2,class=CODE,delta=1
    43                           	psect	text32,global,reloc=2,class=CODE,delta=1
    44                           	psect	text33,global,reloc=2,class=CODE,delta=1
    45                           	psect	text34,global,reloc=2,class=CODE,delta=1
    46                           	psect	text35,global,reloc=2,class=CODE,delta=1
    47                           	psect	text36,global,reloc=2,class=CODE,delta=1
    48                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    49                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    50                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    51                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    52                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    53                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    54   000000                     
    55                           ; Generated 06/04/2022 GMT
    56                           ; 
    57                           ; Copyright Â© 2022, Microchip Technology Inc. and its subsidiaries ("Microchip")
    58                           ; All rights reserved.
    59                           ; 
    60                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    61                           ; 
    62                           ; Redistribution and use in source and binary forms, with or without modification, are
    63                           ; permitted provided that the following conditions are met:
    64                           ; 
    65                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    66                           ;        conditions and the following disclaimer.
    67                           ; 
    68                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    69                           ;        of conditions and the following disclaimer in the documentation and/or other
    70                           ;        materials provided with the distribution. Publication is not required when
    71                           ;        this file is used in an embedded application.
    72                           ; 
    73                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    74                           ;        software without specific prior written permission.
    75                           ; 
    76                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    77                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    78                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    79                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    80                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    81                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    82                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    83                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    84                           ; 
    85                           ; 
    86                           ; Code-generator required, PIC18F67K40 Definitions
    87                           ; 
    88                           ; SFR Addresses
    89   000000                     
    90                           	psect	idataCOMRAM
    91   001BFA                     __pidataCOMRAM:
    92                           	callstack 0
    93                           
    94                           ;initializer for _color_upperbound
    95   001BFA  09C4               	dw	2500
    96                           
    97                           ;initializer for _color_lowerbound
    98   001BFC  0064               	dw	100
    99   000000                     _TRISBbits	set	3970
   100   000000                     _TRISAbits	set	3969
   101   000000                     _TRISFbits	set	3974
   102   000000                     _LATFbits	set	3966
   103   000000                     _LATDbits	set	3964
   104   000000                     _LATHbits	set	3968
   105   000000                     _LATGbits	set	3967
   106   000000                     _TRISGbits	set	3975
   107   000000                     _TRISEbits	set	3973
   108   000000                     _TX4REG	set	3812
   109   000000                     _RC4STAbits	set	3815
   110   000000                     _SP4BRGH	set	3814
   111   000000                     _SSP2CON2bits	set	3802
   112   000000                     _INT1PPS	set	3569
   113   000000                     _RX4PPS	set	3605
   114   000000                     _SSP2CLKPPS	set	3612
   115   000000                     _SSP2DATPPS	set	3613
   116   000000                     _ANSELDbits	set	3751
   117   000000                     _SSP2ADD	set	3798
   118   000000                     _SSP2CON1bits	set	3801
   119   000000                     _RC4REG	set	3811
   120   000000                     _SP4BRGL	set	3813
   121   000000                     _TX4STAbits	set	3816
   122   000000                     _BAUD4CONbits	set	3817
   123   000000                     _TRISCbits	set	3971
   124   000000                     _SSP2CON2	set	3802
   125   000000                     _TRISDbits	set	3972
   126   000000                     _SSP2STAT	set	3800
   127   000000                     _ANSELFbits	set	3764
   128   000000                     _SSP2BUF	set	3797
   129   000000                     _IPR0bits	set	3615
   130   000000                     _PIE0bits	set	3625
   131   000000                     _PIE4bits	set	3629
   132   000000                     _PIR4bits	set	3639
   133   000000                     _RC0PPS	set	3682
   134   000000                     _RD5PPS	set	3695
   135   000000                     _RE2PPS	set	3700
   136   000000                     _RD6PPS	set	3696
   137   000000                     _RC7PPS	set	3689
   138   000000                     _LATCbits	set	3963
   139   000000                     _LATEbits	set	3965
   140   000000                     _CCPR4H	set	3873
   141   000000                     _CCPR3H	set	3877
   142   000000                     _PIR0bits	set	3635
   143   000000                     _TRISHbits	set	3976
   144   000000                     _T2PR	set	4028
   145   000000                     _T2CONbits	set	4029
   146   000000                     _CCPR2H	set	4006
   147   000000                     _CCPR1H	set	4010
   148   000000                     _RE4PPS	set	3702
   149   000000                     _RG6PPS	set	3720
   150   000000                     _ANSELBbits	set	3738
   151   000000                     _INTCONbits	set	4082
   152   000000                     _T2CLKCONbits	set	4031
   153   000000                     _T2HLTbits	set	4030
   154   000000                     _CCP1CONbits	set	4011
   155   000000                     _CCPTMRS0bits	set	4013
   156   000000                     _CCP2CONbits	set	4007
   157   000000                     _LATAbits	set	3961
   158   000000                     _CCP3CONbits	set	3878
   159   000000                     _CCP4CONbits	set	3874
   160                           
   161                           ; #config settings
   162                           
   163                           	psect	cinit
   164   0019A4                     __pcinit:
   165                           	callstack 0
   166   0019A4                     start_initialization:
   167                           	callstack 0
   168   0019A4                     __initialization:
   169                           	callstack 0
   170                           
   171                           ; Initialize objects allocated to COMRAM (4 bytes)
   172                           ; load TBLPTR registers with __pidataCOMRAM
   173   0019A4  0EFA               	movlw	low __pidataCOMRAM
   174   0019A6  6EF6               	movwf	tblptrl,c
   175   0019A8  0E1B               	movlw	high __pidataCOMRAM
   176   0019AA  6EF7               	movwf	tblptrh,c
   177   0019AC  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   178   0019AE  6EF8               	movwf	tblptru,c
   179   0019B0  EE00  F053         	lfsr	0,__pdataCOMRAM
   180   0019B4  EE10 F004          	lfsr	1,4
   181   0019B8                     copy_data0:
   182   0019B8  0009               	tblrd		*+
   183   0019BA  CFF5 FFEE          	movff	tablat,postinc0
   184   0019BE  50E5               	movf	postdec1,w,c
   185   0019C0  50E1               	movf	fsr1l,w,c
   186   0019C2  E1FA               	bnz	copy_data0
   187                           
   188                           ; Clear objects allocated to BANK0 (98 bytes)
   189   0019C4  EE00  F060         	lfsr	0,__pbssBANK0
   190   0019C8  0E62               	movlw	98
   191   0019CA                     clear_0:
   192   0019CA  6AEE               	clrf	postinc0,c
   193   0019CC  06E8               	decf	wreg,f,c
   194   0019CE  E1FD               	bnz	clear_0
   195                           
   196                           ; Clear objects allocated to COMRAM (25 bytes)
   197   0019D0  EE00  F03A         	lfsr	0,__pbssCOMRAM
   198   0019D4  0E19               	movlw	25
   199   0019D6                     clear_1:
   200   0019D6  6AEE               	clrf	postinc0,c
   201   0019D8  06E8               	decf	wreg,f,c
   202   0019DA  E1FD               	bnz	clear_1
   203   0019DC                     end_of_initialization:
   204                           	callstack 0
   205   0019DC                     __end_of__initialization:
   206                           	callstack 0
   207   0019DC  9057               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   208   0019DE  9257               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   209   0019E0  0100               	movlb	0
   210   0019E2  EFD7  F00B         	goto	_main	;jump to C main() function
   211                           
   212                           	psect	bssCOMRAM
   213   00003A                     __pbssCOMRAM:
   214                           	callstack 0
   215   00003A                     _TxBufReadCnt:
   216                           	callstack 0
   217   00003A                     	ds	1
   218   00003B                     _TxBufWriteCnt:
   219                           	callstack 0
   220   00003B                     	ds	1
   221   00003C                     _RxBufReadCnt:
   222                           	callstack 0
   223   00003C                     	ds	1
   224   00003D                     _RxBufWriteCnt:
   225                           	callstack 0
   226   00003D                     	ds	1
   227   00003E                     _read_color_flag:
   228                           	callstack 0
   229   00003E                     	ds	1
   230   00003F                     _color:
   231                           	callstack 0
   232   00003F                     	ds	20
   233                           
   234                           	psect	dataCOMRAM
   235   000053                     __pdataCOMRAM:
   236                           	callstack 0
   237   000053                     _color_upperbound:
   238                           	callstack 0
   239   000053                     	ds	2
   240   000055                     _color_lowerbound:
   241                           	callstack 0
   242   000055                     	ds	2
   243                           
   244                           	psect	bssBANK0
   245   000060                     __pbssBANK0:
   246                           	callstack 0
   247   000060                     _EUSART4TXbuf:
   248                           	callstack 0
   249   000060                     	ds	60
   250   00009C                     _EUSART4RXbuf:
   251                           	callstack 0
   252   00009C                     	ds	20
   253   0000B0                     _motorR:
   254                           	callstack 0
   255   0000B0                     	ds	9
   256   0000B9                     _motorL:
   257                           	callstack 0
   258   0000B9                     	ds	9
   259                           
   260                           	psect	cstackCOMRAM
   261   000001                     __pcstackCOMRAM:
   262                           	callstack 0
   263   000001                     ??_I2C_2_Master_Idle:
   264   000001                     ?___wmul:
   265                           	callstack 0
   266   000001                     ?___xxtofl:
   267                           	callstack 0
   268   000001                     initDCmotorsPWM@PWMperiod:
   269                           	callstack 0
   270   000001                     motor_init@mL:
   271                           	callstack 0
   272   000001                     ___wmul@multiplier:
   273                           	callstack 0
   274   000001                     ___flge@ff1:
   275                           	callstack 0
   276   000001                     ___xxtofl@val:
   277                           	callstack 0
   278                           
   279                           ; 4 bytes @ 0x0
   280   000001                     	ds	1
   281   000002                     ??_I2C_2_Master_Read:
   282   000002                     I2C_2_Master_Write@data_byte:
   283                           	callstack 0
   284                           
   285                           ; 1 bytes @ 0x1
   286   000002                     	ds	1
   287   000003                     I2C_2_Master_Read@ack:
   288                           	callstack 0
   289   000003                     color_writetoaddr@value:
   290                           	callstack 0
   291   000003                     motor_init@mR:
   292                           	callstack 0
   293   000003                     ___wmul@multiplicand:
   294                           	callstack 0
   295                           
   296                           ; 2 bytes @ 0x2
   297   000003                     	ds	1
   298   000004                     I2C_2_Master_Read@tmp:
   299                           	callstack 0
   300   000004                     color_writetoaddr@address:
   301                           	callstack 0
   302                           
   303                           ; 1 bytes @ 0x3
   304   000004                     	ds	1
   305   000005                     ??_color_click_init:
   306   000005                     ??___xxtofl:
   307   000005                     ?_color_read_Red:
   308                           	callstack 0
   309   000005                     ?_color_read_Blue:
   310                           	callstack 0
   311   000005                     ?_color_read_Green:
   312                           	callstack 0
   313   000005                     ?_color_read_Clear:
   314                           	callstack 0
   315   000005                     ___wmul@product:
   316                           	callstack 0
   317   000005                     ___flge@ff2:
   318                           	callstack 0
   319                           
   320                           ; 4 bytes @ 0x4
   321   000005                     	ds	2
   322   000007                     ??_color_read_Red:
   323   000007                     ??_color_read_Blue:
   324   000007                     ??_color_read_Green:
   325   000007                     ??_color_read_Clear:
   326   000007                     ?___lwdiv:
   327                           	callstack 0
   328   000007                     ___lwdiv@dividend:
   329                           	callstack 0
   330                           
   331                           ; 2 bytes @ 0x6
   332   000007                     	ds	2
   333   000009                     ??___flge:
   334   000009                     ___xxtofl@sign:
   335                           	callstack 0
   336   000009                     ___lwdiv@divisor:
   337                           	callstack 0
   338                           
   339                           ; 2 bytes @ 0x8
   340   000009                     	ds	1
   341   00000A                     ___xxtofl@exp:
   342                           	callstack 0
   343   00000A                     color_read_Red@tmp:
   344                           	callstack 0
   345   00000A                     color_read_Blue@tmp:
   346                           	callstack 0
   347   00000A                     color_read_Green@tmp:
   348                           	callstack 0
   349   00000A                     color_read_Clear@tmp:
   350                           	callstack 0
   351                           
   352                           ; 2 bytes @ 0x9
   353   00000A                     	ds	1
   354   00000B                     ___lwdiv@quotient:
   355                           	callstack 0
   356   00000B                     ___xxtofl@arg:
   357                           	callstack 0
   358                           
   359                           ; 4 bytes @ 0xA
   360   00000B                     	ds	1
   361   00000C                     READcolor@c:
   362                           	callstack 0
   363                           
   364                           ; 2 bytes @ 0xB
   365   00000C                     	ds	1
   366   00000D                     ___lwdiv@counter:
   367                           	callstack 0
   368                           
   369                           ; 1 bytes @ 0xC
   370   00000D                     	ds	1
   371   00000E                     setMotorPWM@m:
   372                           	callstack 0
   373                           
   374                           ; 2 bytes @ 0xD
   375   00000E                     	ds	1
   376   00000F                     ?___fldiv:
   377                           	callstack 0
   378   00000F                     ___fldiv@b:
   379                           	callstack 0
   380                           
   381                           ; 4 bytes @ 0xE
   382   00000F                     	ds	1
   383   000010                     ??_setMotorPWM:
   384                           
   385                           ; 1 bytes @ 0xF
   386   000010                     	ds	2
   387   000012                     setMotorPWM@posDuty:
   388                           	callstack 0
   389                           
   390                           ; 1 bytes @ 0x11
   391   000012                     	ds	1
   392   000013                     setMotorPWM@negDuty:
   393                           	callstack 0
   394   000013                     ___fldiv@a:
   395                           	callstack 0
   396                           
   397                           ; 4 bytes @ 0x12
   398   000013                     	ds	1
   399   000014                     stop@mL:
   400                           	callstack 0
   401                           
   402                           ; 2 bytes @ 0x13
   403   000014                     	ds	2
   404   000016                     stop@mR:
   405                           	callstack 0
   406                           
   407                           ; 2 bytes @ 0x15
   408   000016                     	ds	1
   409   000017                     ??___fldiv:
   410                           
   411                           ; 1 bytes @ 0x16
   412   000017                     	ds	1
   413   000018                     stop@i:
   414                           	callstack 0
   415                           
   416                           ; 2 bytes @ 0x17
   417   000018                     	ds	2
   418   00001A                     forward@mL:
   419                           	callstack 0
   420   00001A                     reverse@mL:
   421                           	callstack 0
   422   00001A                     left_45@mL:
   423                           	callstack 0
   424   00001A                     right_45@mL:
   425                           	callstack 0
   426   00001A                     space@mL:
   427                           	callstack 0
   428                           
   429                           ; 2 bytes @ 0x19
   430   00001A                     	ds	1
   431   00001B                     ___fldiv@rem:
   432                           	callstack 0
   433                           
   434                           ; 4 bytes @ 0x1A
   435   00001B                     	ds	1
   436   00001C                     forward@mR:
   437                           	callstack 0
   438   00001C                     reverse@mR:
   439                           	callstack 0
   440   00001C                     left_45@mR:
   441                           	callstack 0
   442   00001C                     right_45@mR:
   443                           	callstack 0
   444   00001C                     space@mR:
   445                           	callstack 0
   446                           
   447                           ; 2 bytes @ 0x1B
   448   00001C                     	ds	2
   449   00001E                     ??_space:
   450   00001E                     left_45@count:
   451                           	callstack 0
   452   00001E                     right_45@count:
   453                           	callstack 0
   454                           
   455                           ; 2 bytes @ 0x1D
   456   00001E                     	ds	1
   457   00001F                     ___fldiv@sign:
   458                           	callstack 0
   459                           
   460                           ; 1 bytes @ 0x1E
   461   00001F                     	ds	1
   462   000020                     ??_left_45:
   463   000020                     ??_right_45:
   464   000020                     ___fldiv@new_exp:
   465                           	callstack 0
   466                           
   467                           ; 2 bytes @ 0x1F
   468   000020                     	ds	2
   469   000022                     left_45@i:
   470                           	callstack 0
   471   000022                     right_45@i:
   472                           	callstack 0
   473   000022                     ___fldiv@grs:
   474                           	callstack 0
   475                           
   476                           ; 4 bytes @ 0x21
   477   000022                     	ds	2
   478   000024                     instructions@mL:
   479                           	callstack 0
   480                           
   481                           ; 2 bytes @ 0x23
   482   000024                     	ds	2
   483   000026                     ___fldiv@bexp:
   484                           	callstack 0
   485   000026                     instructions@mR:
   486                           	callstack 0
   487                           
   488                           ; 2 bytes @ 0x25
   489   000026                     	ds	1
   490   000027                     ___fldiv@aexp:
   491                           	callstack 0
   492                           
   493                           ; 1 bytes @ 0x26
   494   000027                     	ds	1
   495   000028                     colourcards_normaliseRGBC@c:
   496                           	callstack 0
   497   000028                     instructions@count:
   498                           	callstack 0
   499                           
   500                           ; 2 bytes @ 0x27
   501   000028                     	ds	2
   502   00002A                     ??_instructions:
   503   00002A                     colourcards_normaliseRGBC@R:
   504                           	callstack 0
   505                           
   506                           ; 2 bytes @ 0x29
   507   00002A                     	ds	2
   508   00002C                     colourcards_normaliseRGBC@G:
   509                           	callstack 0
   510                           
   511                           ; 2 bytes @ 0x2B
   512   00002C                     	ds	2
   513   00002E                     colourcards_normaliseRGBC@B:
   514                           	callstack 0
   515                           
   516                           ; 2 bytes @ 0x2D
   517   00002E                     	ds	2
   518   000030                     colourcards_normaliseRGBC@C:
   519                           	callstack 0
   520                           
   521                           ; 2 bytes @ 0x2F
   522   000030                     	ds	2
   523   000032                     buggy_color_response@mL:
   524                           	callstack 0
   525                           
   526                           ; 2 bytes @ 0x31
   527   000032                     	ds	2
   528   000034                     buggy_color_response@mR:
   529                           	callstack 0
   530                           
   531                           ; 2 bytes @ 0x33
   532   000034                     	ds	2
   533   000036                     buggy_color_response@c:
   534                           	callstack 0
   535                           
   536                           ; 2 bytes @ 0x35
   537   000036                     	ds	2
   538   000038                     ??_buggy_color_response:
   539                           
   540                           ; 1 bytes @ 0x37
   541   000038                     	ds	2
   542   00003A                     
   543                           ; 1 bytes @ 0x39
   544 ;;
   545 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   546 ;;
   547 ;; *************** function _main *****************
   548 ;; Defined at:
   549 ;;		line 17 in file "main.c"
   550 ;; Parameters:    Size  Location     Type
   551 ;;		None
   552 ;; Auto vars:     Size  Location     Type
   553 ;;		None
   554 ;; Return value:  Size  Location     Type
   555 ;;                  1    wreg      void 
   556 ;; Registers used:
   557 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   558 ;; Tracked objects:
   559 ;;		On entry : 0/0
   560 ;;		On exit  : 0/0
   561 ;;		Unchanged: 0/0
   562 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   563 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   564 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   565 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   566 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   567 ;;Total ram usage:        0 bytes
   568 ;; Hardware stack levels required when called: 7
   569 ;; This function calls:
   570 ;;		_buggyLEDs_init
   571 ;;		_buggy_color_response
   572 ;;		_color_click_init
   573 ;;		_colorclick_interrupts_init
   574 ;;		_initDCmotorsPWM
   575 ;;		_initUSART4
   576 ;;		_interrupts_init
   577 ;;		_motor_init
   578 ;; This function is called by:
   579 ;;		Startup code after reset
   580 ;; This function uses a non-reentrant model
   581 ;;
   582                           
   583                           	psect	text0
   584   0017AE                     __ptext0:
   585                           	callstack 0
   586   0017AE                     _main:
   587                           	callstack 24
   588   0017AE                     
   589                           ;main.c: 19:     initDCmotorsPWM(99);
   590   0017AE  0E00               	movlw	0
   591   0017B0  6E02               	movwf	(initDCmotorsPWM@PWMperiod+1)^0,c
   592   0017B2  0E63               	movlw	99
   593   0017B4  6E01               	movwf	initDCmotorsPWM@PWMperiod^0,c
   594   0017B6  EC55  F00B         	call	_initDCmotorsPWM	;wreg free
   595   0017BA                     
   596                           ;main.c: 20:     motor_init(&motorL,&motorR);
   597   0017BA  0EB9               	movlw	low _motorL
   598   0017BC  6E01               	movwf	motor_init@mL^0,c
   599   0017BE  0E00               	movlw	high _motorL
   600   0017C0  6E02               	movwf	(motor_init@mL+1)^0,c
   601   0017C2  0EB0               	movlw	low _motorR
   602   0017C4  6E03               	movwf	motor_init@mR^0,c
   603   0017C6  0E00               	movlw	high _motorR
   604   0017C8  6E04               	movwf	(motor_init@mR+1)^0,c
   605   0017CA  ECAC  F00C         	call	_motor_init	;wreg free
   606   0017CE                     
   607                           ;main.c: 21:     buggyLEDs_init();
   608   0017CE  ECDD  F00D         	call	_buggyLEDs_init	;wreg free
   609   0017D2                     
   610                           ;main.c: 22:     initUSART4();
   611   0017D2  ECB2  F00D         	call	_initUSART4	;wreg free
   612   0017D6                     
   613                           ;main.c: 23:     color_click_init();
   614   0017D6  EC33  F00D         	call	_color_click_init	;wreg free
   615   0017DA                     
   616                           ;main.c: 25:     colorclick_interrupts_init();
   617   0017DA  EC14  F00D         	call	_colorclick_interrupts_init	;wreg free
   618   0017DE                     
   619                           ;main.c: 26:     interrupts_init();
   620   0017DE  ECA2  F00D         	call	_interrupts_init	;wreg free
   621   0017E2                     
   622                           ;main.c: 28:     TRISGbits.TRISG1 = 0;
   623   0017E2  9287               	bcf	135,1,c	;volatile
   624   0017E4                     
   625                           ;main.c: 29:     TRISAbits.TRISA4 = 0;
   626   0017E4  9881               	bcf	129,4,c	;volatile
   627   0017E6                     
   628                           ;main.c: 30:     TRISFbits.TRISF7 = 0;
   629   0017E6  9E86               	bcf	134,7,c	;volatile
   630   0017E8                     
   631                           ;main.c: 32:     LATGbits.LATG1 = 1;
   632   0017E8  827F               	bsf	127,1,c	;volatile
   633   0017EA                     
   634                           ;main.c: 33:     LATAbits.LATA4 = 1;
   635   0017EA  8879               	bsf	121,4,c	;volatile
   636   0017EC                     
   637                           ;main.c: 34:     LATFbits.LATF7 = 1;
   638   0017EC  8E7E               	bsf	126,7,c	;volatile
   639   0017EE                     
   640                           ;main.c: 36:     TRISFbits.TRISF2 = 1;
   641   0017EE  8486               	bsf	134,2,c	;volatile
   642   0017F0                     
   643                           ;main.c: 37:     ANSELFbits.ANSELF2 = 0;
   644   0017F0  010E               	movlb	14	; () banked
   645   0017F2  95B4               	bcf	180,2,b	;volatile
   646   0017F4                     l2754:
   647                           
   648                           ;main.c: 41:        buggy_color_response(&motorL,&motorR,&color);
   649   0017F4  0EB9               	movlw	low _motorL
   650   0017F6  6E32               	movwf	buggy_color_response@mL^0,c
   651   0017F8  0E00               	movlw	high _motorL
   652   0017FA  6E33               	movwf	(buggy_color_response@mL+1)^0,c
   653   0017FC  0EB0               	movlw	low _motorR
   654   0017FE  6E34               	movwf	buggy_color_response@mR^0,c
   655   001800  0E00               	movlw	high _motorR
   656   001802  6E35               	movwf	(buggy_color_response@mR+1)^0,c
   657   001804  0E3F               	movlw	low _color
   658   001806  6E36               	movwf	buggy_color_response@c^0,c
   659   001808  0E00               	movlw	high _color
   660   00180A  6E37               	movwf	(buggy_color_response@c+1)^0,c
   661   00180C  EC14  F000         	call	_buggy_color_response	;wreg free
   662   001810  EFFA  F00B         	goto	l2754
   663   001814  EF12  F000         	goto	start
   664   001818                     __end_of_main:
   665                           	callstack 0
   666                           
   667 ;; *************** function _motor_init *****************
   668 ;; Defined at:
   669 ;;		line 94 in file "dc_motor.c"
   670 ;; Parameters:    Size  Location     Type
   671 ;;  mL              2    0[COMRAM] PTR struct DC_motor
   672 ;;		 -> motorL(9), 
   673 ;;  mR              2    2[COMRAM] PTR struct DC_motor
   674 ;;		 -> motorR(9), 
   675 ;; Auto vars:     Size  Location     Type
   676 ;;		None
   677 ;; Return value:  Size  Location     Type
   678 ;;                  1    wreg      void 
   679 ;; Registers used:
   680 ;;		wreg, status,2, status,0
   681 ;; Tracked objects:
   682 ;;		On entry : 0/0
   683 ;;		On exit  : 0/0
   684 ;;		Unchanged: 0/0
   685 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   686 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   687 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   688 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   689 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   690 ;;Total ram usage:        4 bytes
   691 ;; Hardware stack levels used: 1
   692 ;; Hardware stack levels required when called: 1
   693 ;; This function calls:
   694 ;;		Nothing
   695 ;; This function is called by:
   696 ;;		_main
   697 ;; This function uses a non-reentrant model
   698 ;;
   699                           
   700                           	psect	text1
   701   001958                     __ptext1:
   702                           	callstack 0
   703   001958                     _motor_init:
   704                           	callstack 29
   705   001958                     
   706                           ;dc_motor.c: 94: void motor_init(DC_motor *mL, DC_motor *mR);dc_motor.c: 95: {;dc_motor.
      +                          c: 96:     motorL.power=0;
   707   001958  0E00               	movlw	0
   708   00195A  0100               	movlb	0	; () banked
   709   00195C  6FB9               	movwf	_motorL& (0+255),b
   710                           
   711                           ;dc_motor.c: 97:     motorL.direction=1;
   712   00195E  0E01               	movlw	1
   713   001960  6FBA               	movwf	(_motorL+1)& (0+255),b
   714                           
   715                           ;dc_motor.c: 98:     motorL.brakemode=1;
   716   001962  0E01               	movlw	1
   717   001964  6FBB               	movwf	(_motorL+2)& (0+255),b
   718   001966                     
   719                           ; BSR set to: 0
   720                           ;dc_motor.c: 99:     motorL.posDutyHighByte=(unsigned char *)(&CCPR1H);
   721   001966  0EAA               	movlw	170
   722   001968  6FBE               	movwf	(_motorL+5)& (0+255),b
   723   00196A  0E0F               	movlw	15
   724   00196C  6FBF               	movwf	(_motorL+6)& (0+255),b
   725   00196E                     
   726                           ; BSR set to: 0
   727                           ;dc_motor.c: 100:     motorL.negDutyHighByte=(unsigned char *)(&CCPR2H);
   728   00196E  0EA6               	movlw	166
   729   001970  6FC0               	movwf	(_motorL+7)& (0+255),b
   730   001972  0E0F               	movlw	15
   731   001974  6FC1               	movwf	(_motorL+8)& (0+255),b
   732                           
   733                           ;dc_motor.c: 101:     motorL.PWMperiod=99;
   734   001976  0E00               	movlw	0
   735   001978  6FBD               	movwf	(_motorL+4)& (0+255),b
   736   00197A  0E63               	movlw	99
   737   00197C  6FBC               	movwf	(_motorL+3)& (0+255),b
   738                           
   739                           ;dc_motor.c: 103:     motorR.power=0;
   740   00197E  0E00               	movlw	0
   741   001980  6FB0               	movwf	_motorR& (0+255),b
   742                           
   743                           ;dc_motor.c: 104:     motorR.direction=1;
   744   001982  0E01               	movlw	1
   745   001984  6FB1               	movwf	(_motorR+1)& (0+255),b
   746                           
   747                           ;dc_motor.c: 105:     motorR.brakemode=1;
   748   001986  0E01               	movlw	1
   749   001988  6FB2               	movwf	(_motorR+2)& (0+255),b
   750   00198A                     
   751                           ; BSR set to: 0
   752                           ;dc_motor.c: 106:     motorR.posDutyHighByte=(unsigned char *)(&CCPR3H);
   753   00198A  0E25               	movlw	37
   754   00198C  6FB5               	movwf	(_motorR+5)& (0+255),b
   755   00198E  0E0F               	movlw	15
   756   001990  6FB6               	movwf	(_motorR+6)& (0+255),b
   757   001992                     
   758                           ; BSR set to: 0
   759                           ;dc_motor.c: 107:     motorR.negDutyHighByte=(unsigned char *)(&CCPR4H);
   760   001992  0E21               	movlw	33
   761   001994  6FB7               	movwf	(_motorR+7)& (0+255),b
   762   001996  0E0F               	movlw	15
   763   001998  6FB8               	movwf	(_motorR+8)& (0+255),b
   764                           
   765                           ;dc_motor.c: 108:     motorR.PWMperiod=99;
   766   00199A  0E00               	movlw	0
   767   00199C  6FB4               	movwf	(_motorR+4)& (0+255),b
   768   00199E  0E63               	movlw	99
   769   0019A0  6FB3               	movwf	(_motorR+3)& (0+255),b
   770   0019A2                     
   771                           ; BSR set to: 0
   772   0019A2  0012               	return		;funcret
   773   0019A4                     __end_of_motor_init:
   774                           	callstack 0
   775                           
   776 ;; *************** function _interrupts_init *****************
   777 ;; Defined at:
   778 ;;		line 11 in file "interrupts.c"
   779 ;; Parameters:    Size  Location     Type
   780 ;;		None
   781 ;; Auto vars:     Size  Location     Type
   782 ;;		None
   783 ;; Return value:  Size  Location     Type
   784 ;;                  1    wreg      void 
   785 ;; Registers used:
   786 ;;		wreg, status,2, status,0, cstack
   787 ;; Tracked objects:
   788 ;;		On entry : 0/0
   789 ;;		On exit  : 0/0
   790 ;;		Unchanged: 0/0
   791 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   792 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   793 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   794 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   795 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   796 ;;Total ram usage:        0 bytes
   797 ;; Hardware stack levels used: 1
   798 ;; Hardware stack levels required when called: 4
   799 ;; This function calls:
   800 ;;		_interrupts_clear
   801 ;; This function is called by:
   802 ;;		_main
   803 ;; This function uses a non-reentrant model
   804 ;;
   805                           
   806                           	psect	text2
   807   001B44                     __ptext2:
   808                           	callstack 0
   809   001B44                     _interrupts_init:
   810                           	callstack 26
   811   001B44                     
   812                           ;interrupts.c: 13:     TRISBbits.TRISB0 = 1;
   813   001B44  8082               	bsf	130,0,c	;volatile
   814                           
   815                           ;interrupts.c: 14:     ANSELBbits.ANSELB0 = 0;
   816   001B46  010E               	movlb	14	; () banked
   817   001B48  919A               	bcf	154,0,b	;volatile
   818   001B4A                     
   819                           ; BSR set to: 14
   820                           ;interrupts.c: 15:     INT1PPS=0x09;
   821   001B4A  0E09               	movlw	9
   822   001B4C  010D               	movlb	13	; () banked
   823   001B4E  6FF1               	movwf	241,b	;volatile
   824   001B50                     
   825                           ; BSR set to: 13
   826                           ;interrupts.c: 17:     PIE0bits.INT1IE = 1;
   827   001B50  010E               	movlb	14	; () banked
   828   001B52  8329               	bsf	41,1,b	;volatile
   829   001B54                     
   830                           ; BSR set to: 14
   831                           ;interrupts.c: 20:     IPR0bits.INT1IP = 1;
   832   001B54  831F               	bsf	31,1,b	;volatile
   833   001B56                     
   834                           ; BSR set to: 14
   835                           ;interrupts.c: 22:     interrupts_clear();
   836   001B56  ECD2  F00D         	call	_interrupts_clear	;wreg free
   837   001B5A                     
   838                           ;interrupts.c: 24:     INTCONbits.INT1EDG = 0;
   839   001B5A  92F2               	bcf	242,1,c	;volatile
   840   001B5C                     
   841                           ;interrupts.c: 25:     INTCONbits.IPEN = 1;
   842   001B5C  8AF2               	bsf	242,5,c	;volatile
   843   001B5E                     
   844                           ;interrupts.c: 26:     INTCONbits.PEIE = 1;
   845   001B5E  8CF2               	bsf	242,6,c	;volatile
   846   001B60                     
   847                           ;interrupts.c: 27:     INTCONbits.GIE = 1;
   848   001B60  8EF2               	bsf	242,7,c	;volatile
   849   001B62  0012               	return		;funcret
   850   001B64                     __end_of_interrupts_init:
   851                           	callstack 0
   852                           
   853 ;; *************** function _interrupts_clear *****************
   854 ;; Defined at:
   855 ;;		line 39 in file "interrupts.c"
   856 ;; Parameters:    Size  Location     Type
   857 ;;		None
   858 ;; Auto vars:     Size  Location     Type
   859 ;;		None
   860 ;; Return value:  Size  Location     Type
   861 ;;                  1    wreg      void 
   862 ;; Registers used:
   863 ;;		wreg, status,2, status,0, cstack
   864 ;; Tracked objects:
   865 ;;		On entry : 0/0
   866 ;;		On exit  : 0/0
   867 ;;		Unchanged: 0/0
   868 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   869 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   870 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   871 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   872 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   873 ;;Total ram usage:        0 bytes
   874 ;; Hardware stack levels used: 1
   875 ;; Hardware stack levels required when called: 3
   876 ;; This function calls:
   877 ;;		_I2C_2_Master_Start
   878 ;;		_I2C_2_Master_Stop
   879 ;;		_I2C_2_Master_Write
   880 ;; This function is called by:
   881 ;;		_interrupts_init
   882 ;; This function uses a non-reentrant model
   883 ;;
   884                           
   885                           	psect	text3
   886   001BA4                     __ptext3:
   887                           	callstack 0
   888   001BA4                     _interrupts_clear:
   889                           	callstack 26
   890   001BA4                     
   891                           ;interrupts.c: 40:     I2C_2_Master_Start();
   892   001BA4  ECF3  F00D         	call	_I2C_2_Master_Start	;wreg free
   893                           
   894                           ;interrupts.c: 41:     I2C_2_Master_Write(0x52 | 0x00);
   895   001BA8  0E52               	movlw	82
   896   001BAA  ECE8  F00D         	call	_I2C_2_Master_Write
   897                           
   898                           ;interrupts.c: 42:     I2C_2_Master_Write(0b11100110);
   899   001BAE  0EE6               	movlw	230
   900   001BB0  ECE8  F00D         	call	_I2C_2_Master_Write
   901                           
   902                           ;interrupts.c: 43:     I2C_2_Master_Stop();
   903   001BB4  ECEE  F00D         	call	_I2C_2_Master_Stop	;wreg free
   904   001BB8  0012               	return		;funcret
   905   001BBA                     __end_of_interrupts_clear:
   906                           	callstack 0
   907                           
   908 ;; *************** function _initUSART4 *****************
   909 ;; Defined at:
   910 ;;		line 5 in file "serial.c"
   911 ;; Parameters:    Size  Location     Type
   912 ;;		None
   913 ;; Auto vars:     Size  Location     Type
   914 ;;		None
   915 ;; Return value:  Size  Location     Type
   916 ;;                  1    wreg      void 
   917 ;; Registers used:
   918 ;;		wreg, status,2
   919 ;; Tracked objects:
   920 ;;		On entry : 0/0
   921 ;;		On exit  : 0/0
   922 ;;		Unchanged: 0/0
   923 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   924 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   925 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   926 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   927 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   928 ;;Total ram usage:        0 bytes
   929 ;; Hardware stack levels used: 1
   930 ;; Hardware stack levels required when called: 1
   931 ;; This function calls:
   932 ;;		Nothing
   933 ;; This function is called by:
   934 ;;		_main
   935 ;; This function uses a non-reentrant model
   936 ;;
   937                           
   938                           	psect	text4
   939   001B64                     __ptext4:
   940                           	callstack 0
   941   001B64                     _initUSART4:
   942                           	callstack 29
   943   001B64                     
   944                           ;serial.c: 7:     RC0PPS = 0x12;
   945   001B64  0E12               	movlw	18
   946   001B66  010E               	movlb	14	; () banked
   947   001B68  6F62               	movwf	98,b	;volatile
   948                           
   949                           ;serial.c: 8:     RX4PPS = 0x11;
   950   001B6A  0E11               	movlw	17
   951   001B6C  6F15               	movwf	21,b	;volatile
   952   001B6E                     
   953                           ; BSR set to: 14
   954                           ;serial.c: 9:     TRISCbits.TRISC1 = 1;
   955   001B6E  8283               	bsf	131,1,c	;volatile
   956   001B70                     
   957                           ; BSR set to: 14
   958                           ;serial.c: 12:     BAUD4CONbits.BRG16 = 0;
   959   001B70  97E9               	bcf	233,3,b	;volatile
   960   001B72                     
   961                           ; BSR set to: 14
   962                           ;serial.c: 13:     TX4STAbits.BRGH = 0;
   963   001B72  95E8               	bcf	232,2,b	;volatile
   964                           
   965                           ;serial.c: 14:     SP4BRGL = 51;
   966   001B74  0E33               	movlw	51
   967   001B76  6FE5               	movwf	229,b	;volatile
   968                           
   969                           ;serial.c: 15:     SP4BRGH = 0;
   970   001B78  0E00               	movlw	0
   971   001B7A  6FE6               	movwf	230,b	;volatile
   972   001B7C                     
   973                           ; BSR set to: 14
   974                           ;serial.c: 17:     RC4STAbits.CREN = 1;
   975   001B7C  89E7               	bsf	231,4,b	;volatile
   976   001B7E                     
   977                           ; BSR set to: 14
   978                           ;serial.c: 18:     TX4STAbits.TXEN = 1;
   979   001B7E  8BE8               	bsf	232,5,b	;volatile
   980   001B80                     
   981                           ; BSR set to: 14
   982                           ;serial.c: 19:     RC4STAbits.SPEN = 1;
   983   001B80  8FE7               	bsf	231,7,b	;volatile
   984   001B82                     
   985                           ; BSR set to: 14
   986   001B82  0012               	return		;funcret
   987   001B84                     __end_of_initUSART4:
   988                           	callstack 0
   989                           
   990 ;; *************** function _initDCmotorsPWM *****************
   991 ;; Defined at:
   992 ;;		line 5 in file "dc_motor.c"
   993 ;; Parameters:    Size  Location     Type
   994 ;;  PWMperiod       2    0[COMRAM] unsigned int 
   995 ;; Auto vars:     Size  Location     Type
   996 ;;		None
   997 ;; Return value:  Size  Location     Type
   998 ;;                  1    wreg      void 
   999 ;; Registers used:
  1000 ;;		wreg, status,2
  1001 ;; Tracked objects:
  1002 ;;		On entry : 0/0
  1003 ;;		On exit  : 0/0
  1004 ;;		Unchanged: 0/0
  1005 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1006 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1007 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1008 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1009 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1010 ;;Total ram usage:        2 bytes
  1011 ;; Hardware stack levels used: 1
  1012 ;; Hardware stack levels required when called: 1
  1013 ;; This function calls:
  1014 ;;		Nothing
  1015 ;; This function is called by:
  1016 ;;		_main
  1017 ;; This function uses a non-reentrant model
  1018 ;;
  1019                           
  1020                           	psect	text5
  1021   0016AA                     __ptext5:
  1022                           	callstack 0
  1023   0016AA                     _initDCmotorsPWM:
  1024                           	callstack 29
  1025   0016AA                     
  1026                           ;dc_motor.c: 7:     TRISEbits.TRISE2 = 0;
  1027   0016AA  9485               	bcf	133,2,c	;volatile
  1028                           
  1029                           ;dc_motor.c: 8:     TRISEbits.TRISE4 = 0;
  1030   0016AC  9885               	bcf	133,4,c	;volatile
  1031                           
  1032                           ;dc_motor.c: 9:     TRISCbits.TRISC7 = 0;
  1033   0016AE  9E83               	bcf	131,7,c	;volatile
  1034                           
  1035                           ;dc_motor.c: 10:     TRISGbits.TRISG6 = 0;
  1036   0016B0  9C87               	bcf	135,6,c	;volatile
  1037                           
  1038                           ;dc_motor.c: 12:     LATEbits.LATE2 = 0;
  1039   0016B2  947D               	bcf	125,2,c	;volatile
  1040                           
  1041                           ;dc_motor.c: 13:     LATEbits.LATE4 = 0;
  1042   0016B4  987D               	bcf	125,4,c	;volatile
  1043                           
  1044                           ;dc_motor.c: 14:     LATCbits.LATC7 = 0;
  1045   0016B6  9E7B               	bcf	123,7,c	;volatile
  1046                           
  1047                           ;dc_motor.c: 15:     LATGbits.LATG6 = 0;
  1048   0016B8  9C7F               	bcf	127,6,c	;volatile
  1049   0016BA                     
  1050                           ;dc_motor.c: 18:     RE2PPS=0x05;
  1051   0016BA  0E05               	movlw	5
  1052   0016BC  010E               	movlb	14	; () banked
  1053   0016BE  6F74               	movwf	116,b	;volatile
  1054                           
  1055                           ;dc_motor.c: 19:     RE4PPS=0x06;
  1056   0016C0  0E06               	movlw	6
  1057   0016C2  6F76               	movwf	118,b	;volatile
  1058                           
  1059                           ;dc_motor.c: 20:     RC7PPS=0x07;
  1060   0016C4  0E07               	movlw	7
  1061   0016C6  6F69               	movwf	105,b	;volatile
  1062                           
  1063                           ;dc_motor.c: 21:     RG6PPS=0x08;
  1064   0016C8  0E08               	movlw	8
  1065   0016CA  6F88               	movwf	136,b	;volatile
  1066                           
  1067                           ;dc_motor.c: 24:     T2CONbits.CKPS=0b100;
  1068   0016CC  50BD               	movf	189,w,c	;volatile
  1069   0016CE  0B8F               	andlw	-113
  1070   0016D0  0940               	iorlw	64
  1071   0016D2  6EBD               	movwf	189,c	;volatile
  1072                           
  1073                           ;dc_motor.c: 25:     T2HLTbits.MODE=0b00000;
  1074   0016D4  0EE0               	movlw	-32
  1075   0016D6  16BE               	andwf	190,f,c	;volatile
  1076                           
  1077                           ;dc_motor.c: 26:     T2CLKCONbits.CS=0b0001;
  1078   0016D8  50BF               	movf	191,w,c	;volatile
  1079   0016DA  0BF0               	andlw	-16
  1080   0016DC  0901               	iorlw	1
  1081   0016DE  6EBF               	movwf	191,c	;volatile
  1082   0016E0                     
  1083                           ; BSR set to: 14
  1084                           ;dc_motor.c: 30:     T2PR=PWMperiod;
  1085   0016E0  C001  FFBC         	movff	initDCmotorsPWM@PWMperiod,4028	;volatile
  1086   0016E4                     
  1087                           ; BSR set to: 14
  1088                           ;dc_motor.c: 31:     T2CONbits.ON=1;
  1089   0016E4  8EBD               	bsf	189,7,c	;volatile
  1090                           
  1091                           ;dc_motor.c: 35:     CCPR1H=0;
  1092   0016E6  0E00               	movlw	0
  1093   0016E8  6EAA               	movwf	170,c	;volatile
  1094                           
  1095                           ;dc_motor.c: 36:     CCPR2H=0;
  1096   0016EA  0E00               	movlw	0
  1097   0016EC  6EA6               	movwf	166,c	;volatile
  1098                           
  1099                           ;dc_motor.c: 37:     CCPR3H=0;
  1100   0016EE  0E00               	movlw	0
  1101   0016F0  010F               	movlb	15	; () banked
  1102   0016F2  6F25               	movwf	37,b	;volatile
  1103                           
  1104                           ;dc_motor.c: 38:     CCPR4H=0;
  1105   0016F4  0E00               	movlw	0
  1106   0016F6  6F21               	movwf	33,b	;volatile
  1107                           
  1108                           ;dc_motor.c: 41:     CCPTMRS0bits.C1TSEL=0;
  1109   0016F8  0EFC               	movlw	-4
  1110   0016FA  16AD               	andwf	173,f,c	;volatile
  1111                           
  1112                           ;dc_motor.c: 42:     CCPTMRS0bits.C2TSEL=0;
  1113   0016FC  0EF3               	movlw	-13
  1114   0016FE  16AD               	andwf	173,f,c	;volatile
  1115                           
  1116                           ;dc_motor.c: 43:     CCPTMRS0bits.C3TSEL=0;
  1117   001700  0ECF               	movlw	-49
  1118   001702  16AD               	andwf	173,f,c	;volatile
  1119                           
  1120                           ;dc_motor.c: 44:     CCPTMRS0bits.C4TSEL=0;
  1121   001704  0E3F               	movlw	-193
  1122   001706  16AD               	andwf	173,f,c	;volatile
  1123   001708                     
  1124                           ; BSR set to: 15
  1125                           ;dc_motor.c: 47:     CCP1CONbits.FMT=1;
  1126   001708  88AB               	bsf	171,4,c	;volatile
  1127                           
  1128                           ;dc_motor.c: 48:     CCP1CONbits.CCP1MODE=0b1100;
  1129   00170A  50AB               	movf	171,w,c	;volatile
  1130   00170C  0BF0               	andlw	-16
  1131   00170E  090C               	iorlw	12
  1132   001710  6EAB               	movwf	171,c	;volatile
  1133   001712                     
  1134                           ; BSR set to: 15
  1135                           ;dc_motor.c: 49:     CCP1CONbits.EN=1;
  1136   001712  8EAB               	bsf	171,7,c	;volatile
  1137   001714                     
  1138                           ; BSR set to: 15
  1139                           ;dc_motor.c: 52:     CCP2CONbits.FMT=1;
  1140   001714  88A7               	bsf	167,4,c	;volatile
  1141                           
  1142                           ;dc_motor.c: 53:     CCP2CONbits.CCP2MODE=0b1100;
  1143   001716  50A7               	movf	167,w,c	;volatile
  1144   001718  0BF0               	andlw	-16
  1145   00171A  090C               	iorlw	12
  1146   00171C  6EA7               	movwf	167,c	;volatile
  1147   00171E                     
  1148                           ; BSR set to: 15
  1149                           ;dc_motor.c: 54:     CCP2CONbits.EN=1;
  1150   00171E  8EA7               	bsf	167,7,c	;volatile
  1151   001720                     
  1152                           ; BSR set to: 15
  1153                           ;dc_motor.c: 58:     CCP3CONbits.FMT=1;
  1154   001720  8926               	bsf	38,4,b	;volatile
  1155                           
  1156                           ;dc_motor.c: 59:     CCP3CONbits.CCP3MODE=0b1100;
  1157   001722  5126               	movf	38,w,b	;volatile
  1158   001724  0BF0               	andlw	-16
  1159   001726  090C               	iorlw	12
  1160   001728  6F26               	movwf	38,b	;volatile
  1161   00172A                     
  1162                           ; BSR set to: 15
  1163                           ;dc_motor.c: 60:     CCP3CONbits.EN=1;
  1164   00172A  8F26               	bsf	38,7,b	;volatile
  1165   00172C                     
  1166                           ; BSR set to: 15
  1167                           ;dc_motor.c: 63:     CCP4CONbits.FMT=1;
  1168   00172C  8922               	bsf	34,4,b	;volatile
  1169                           
  1170                           ;dc_motor.c: 64:     CCP4CONbits.CCP4MODE=0b1100;
  1171   00172E  5122               	movf	34,w,b	;volatile
  1172   001730  0BF0               	andlw	-16
  1173   001732  090C               	iorlw	12
  1174   001734  6F22               	movwf	34,b	;volatile
  1175   001736                     
  1176                           ; BSR set to: 15
  1177                           ;dc_motor.c: 65:     CCP4CONbits.EN=1;
  1178   001736  8F22               	bsf	34,7,b	;volatile
  1179   001738                     
  1180                           ; BSR set to: 15
  1181   001738  0012               	return		;funcret
  1182   00173A                     __end_of_initDCmotorsPWM:
  1183                           	callstack 0
  1184                           
  1185 ;; *************** function _colorclick_interrupts_init *****************
  1186 ;; Defined at:
  1187 ;;		line 30 in file "interrupts.c"
  1188 ;; Parameters:    Size  Location     Type
  1189 ;;		None
  1190 ;; Auto vars:     Size  Location     Type
  1191 ;;		None
  1192 ;; Return value:  Size  Location     Type
  1193 ;;                  1    wreg      void 
  1194 ;; Registers used:
  1195 ;;		wreg, status,2, status,0, cstack
  1196 ;; Tracked objects:
  1197 ;;		On entry : 0/0
  1198 ;;		On exit  : 0/0
  1199 ;;		Unchanged: 0/0
  1200 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1201 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1202 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1203 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1204 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1205 ;;Total ram usage:        0 bytes
  1206 ;; Hardware stack levels used: 1
  1207 ;; Hardware stack levels required when called: 4
  1208 ;; This function calls:
  1209 ;;		_color_writetoaddr
  1210 ;; This function is called by:
  1211 ;;		_main
  1212 ;; This function uses a non-reentrant model
  1213 ;;
  1214                           
  1215                           	psect	text6
  1216   001A28                     __ptext6:
  1217                           	callstack 0
  1218   001A28                     _colorclick_interrupts_init:
  1219                           	callstack 26
  1220   001A28                     
  1221                           ;interrupts.c: 31:     color_writetoaddr(0x00,0x13);
  1222   001A28  0E13               	movlw	19
  1223   001A2A  6E03               	movwf	color_writetoaddr@value^0,c
  1224   001A2C  0E00               	movlw	0
  1225   001A2E  ECC2  F00D         	call	_color_writetoaddr
  1226   001A32  0E64               	movlw	100
  1227   001A34  6E03               	movwf	color_writetoaddr@value^0,c
  1228   001A36  0E04               	movlw	4
  1229   001A38  ECC2  F00D         	call	_color_writetoaddr
  1230   001A3C  0E00               	movlw	0
  1231   001A3E  6E03               	movwf	color_writetoaddr@value^0,c
  1232   001A40  0E05               	movlw	5
  1233   001A42  ECC2  F00D         	call	_color_writetoaddr
  1234   001A46  0EC4               	movlw	196
  1235   001A48  6E03               	movwf	color_writetoaddr@value^0,c
  1236   001A4A  0E06               	movlw	6
  1237   001A4C  ECC2  F00D         	call	_color_writetoaddr
  1238   001A50  0E09               	movlw	9
  1239   001A52  6E03               	movwf	color_writetoaddr@value^0,c
  1240   001A54  0E07               	movlw	7
  1241   001A56  ECC2  F00D         	call	_color_writetoaddr
  1242                           
  1243                           ;interrupts.c: 36:     color_writetoaddr(0x0C, 0b0001);
  1244   001A5A  0E01               	movlw	1
  1245   001A5C  6E03               	movwf	color_writetoaddr@value^0,c
  1246   001A5E  0E0C               	movlw	12
  1247   001A60  ECC2  F00D         	call	_color_writetoaddr
  1248   001A64  0012               	return		;funcret
  1249   001A66                     __end_of_colorclick_interrupts_init:
  1250                           	callstack 0
  1251                           
  1252 ;; *************** function _color_click_init *****************
  1253 ;; Defined at:
  1254 ;;		line 8 in file "color.c"
  1255 ;; Parameters:    Size  Location     Type
  1256 ;;		None
  1257 ;; Auto vars:     Size  Location     Type
  1258 ;;		None
  1259 ;; Return value:  Size  Location     Type
  1260 ;;                  1    wreg      void 
  1261 ;; Registers used:
  1262 ;;		wreg, status,2, status,0, cstack
  1263 ;; Tracked objects:
  1264 ;;		On entry : 0/0
  1265 ;;		On exit  : 0/0
  1266 ;;		Unchanged: 0/0
  1267 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1268 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1269 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1270 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1271 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1272 ;;Total ram usage:        1 bytes
  1273 ;; Hardware stack levels used: 1
  1274 ;; Hardware stack levels required when called: 4
  1275 ;; This function calls:
  1276 ;;		_I2C_2_Master_Init
  1277 ;;		_color_writetoaddr
  1278 ;; This function is called by:
  1279 ;;		_main
  1280 ;; This function uses a non-reentrant model
  1281 ;;
  1282                           
  1283                           	psect	text7
  1284   001A66                     __ptext7:
  1285                           	callstack 0
  1286   001A66                     _color_click_init:
  1287                           	callstack 26
  1288   001A66                     
  1289                           ;color.c: 11:     I2C_2_Master_Init();
  1290   001A66  EC66  F00D         	call	_I2C_2_Master_Init	;wreg free
  1291   001A6A                     
  1292                           ;color.c: 13:   color_writetoaddr(0x00, 0x01);
  1293   001A6A  0E01               	movlw	1
  1294   001A6C  6E03               	movwf	color_writetoaddr@value^0,c
  1295   001A6E  0E00               	movlw	0
  1296   001A70  ECC2  F00D         	call	_color_writetoaddr
  1297   001A74                     
  1298                           ;color.c: 14:     _delay((unsigned long)((3)*(64000000/4000.0)));
  1299   001A74  0E3F               	movlw	63
  1300   001A76  6E05               	movwf	??_color_click_init^0,c
  1301   001A78  0E55               	movlw	85
  1302   001A7A                     u1987:
  1303   001A7A  2EE8               	decfsz	wreg,f,c
  1304   001A7C  D7FE               	bra	u1987
  1305   001A7E  2E05               	decfsz	??_color_click_init^0,f,c
  1306   001A80  D7FC               	bra	u1987
  1307   001A82  F000               	nop	
  1308   001A84                     
  1309                           ;color.c: 16:  color_writetoaddr(0x00, 0x03);
  1310   001A84  0E03               	movlw	3
  1311   001A86  6E03               	movwf	color_writetoaddr@value^0,c
  1312   001A88  0E00               	movlw	0
  1313   001A8A  ECC2  F00D         	call	_color_writetoaddr
  1314   001A8E                     
  1315                           ;color.c: 18:  color_writetoaddr(0x01, 0xD5);
  1316   001A8E  0ED5               	movlw	213
  1317   001A90  6E03               	movwf	color_writetoaddr@value^0,c
  1318   001A92  0E01               	movlw	1
  1319   001A94  ECC2  F00D         	call	_color_writetoaddr
  1320   001A98  0012               	return		;funcret
  1321   001A9A                     __end_of_color_click_init:
  1322                           	callstack 0
  1323                           
  1324 ;; *************** function _color_writetoaddr *****************
  1325 ;; Defined at:
  1326 ;;		line 21 in file "color.c"
  1327 ;; Parameters:    Size  Location     Type
  1328 ;;  address         1    wreg     unsigned char 
  1329 ;;  value           1    2[COMRAM] unsigned char 
  1330 ;; Auto vars:     Size  Location     Type
  1331 ;;  address         1    3[COMRAM] unsigned char 
  1332 ;; Return value:  Size  Location     Type
  1333 ;;                  1    wreg      void 
  1334 ;; Registers used:
  1335 ;;		wreg, status,2, status,0, cstack
  1336 ;; Tracked objects:
  1337 ;;		On entry : 0/0
  1338 ;;		On exit  : 0/0
  1339 ;;		Unchanged: 0/0
  1340 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1341 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1342 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1343 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1344 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1345 ;;Total ram usage:        2 bytes
  1346 ;; Hardware stack levels used: 1
  1347 ;; Hardware stack levels required when called: 3
  1348 ;; This function calls:
  1349 ;;		_I2C_2_Master_Start
  1350 ;;		_I2C_2_Master_Stop
  1351 ;;		_I2C_2_Master_Write
  1352 ;; This function is called by:
  1353 ;;		_color_click_init
  1354 ;;		_colorclick_interrupts_init
  1355 ;; This function uses a non-reentrant model
  1356 ;;
  1357                           
  1358                           	psect	text8
  1359   001B84                     __ptext8:
  1360                           	callstack 0
  1361   001B84                     _color_writetoaddr:
  1362                           	callstack 26
  1363                           
  1364                           ;incstack = 0
  1365                           ;color_writetoaddr@address stored from wreg
  1366   001B84  6E04               	movwf	color_writetoaddr@address^0,c
  1367   001B86                     
  1368                           ;color.c: 22:     I2C_2_Master_Start();
  1369   001B86  ECF3  F00D         	call	_I2C_2_Master_Start	;wreg free
  1370                           
  1371                           ;color.c: 23:     I2C_2_Master_Write(0x52 | 0x00);
  1372   001B8A  0E52               	movlw	82
  1373   001B8C  ECE8  F00D         	call	_I2C_2_Master_Write
  1374                           
  1375                           ;color.c: 24:     I2C_2_Master_Write(0x80 | address);
  1376   001B90  5004               	movf	color_writetoaddr@address^0,w,c
  1377   001B92  0980               	iorlw	128
  1378   001B94  ECE8  F00D         	call	_I2C_2_Master_Write
  1379                           
  1380                           ;color.c: 25:     I2C_2_Master_Write(value);
  1381   001B98  5003               	movf	color_writetoaddr@value^0,w,c
  1382   001B9A  ECE8  F00D         	call	_I2C_2_Master_Write
  1383                           
  1384                           ;color.c: 26:     I2C_2_Master_Stop();
  1385   001B9E  ECEE  F00D         	call	_I2C_2_Master_Stop	;wreg free
  1386   001BA2  0012               	return		;funcret
  1387   001BA4                     __end_of_color_writetoaddr:
  1388                           	callstack 0
  1389                           
  1390 ;; *************** function _I2C_2_Master_Init *****************
  1391 ;; Defined at:
  1392 ;;		line 4 in file "i2c.c"
  1393 ;; Parameters:    Size  Location     Type
  1394 ;;		None
  1395 ;; Auto vars:     Size  Location     Type
  1396 ;;		None
  1397 ;; Return value:  Size  Location     Type
  1398 ;;                  1    wreg      void 
  1399 ;; Registers used:
  1400 ;;		wreg, status,2
  1401 ;; Tracked objects:
  1402 ;;		On entry : 0/0
  1403 ;;		On exit  : 0/0
  1404 ;;		Unchanged: 0/0
  1405 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1406 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1407 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1408 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1409 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1410 ;;Total ram usage:        0 bytes
  1411 ;; Hardware stack levels used: 1
  1412 ;; Hardware stack levels required when called: 1
  1413 ;; This function calls:
  1414 ;;		Nothing
  1415 ;; This function is called by:
  1416 ;;		_color_click_init
  1417 ;; This function uses a non-reentrant model
  1418 ;;
  1419                           
  1420                           	psect	text9
  1421   001ACC                     __ptext9:
  1422                           	callstack 0
  1423   001ACC                     _I2C_2_Master_Init:
  1424                           	callstack 28
  1425   001ACC                     
  1426                           ;i2c.c: 7:   SSP2CON1bits.SSPM= 0b1000;
  1427   001ACC  010E               	movlb	14	; () banked
  1428   001ACE  51D9               	movf	217,w,b	;volatile
  1429   001AD0  0BF0               	andlw	-16
  1430   001AD2  0908               	iorlw	8
  1431   001AD4  6FD9               	movwf	217,b	;volatile
  1432   001AD6                     
  1433                           ; BSR set to: 14
  1434                           ;i2c.c: 8:   SSP2CON1bits.SSPEN = 1;
  1435   001AD6  8BD9               	bsf	217,5,b	;volatile
  1436                           
  1437                           ;i2c.c: 9:   SSP2ADD = (64000000/(4*100000))-1;
  1438   001AD8  0E9F               	movlw	159
  1439   001ADA  6FD6               	movwf	214,b	;volatile
  1440   001ADC                     
  1441                           ; BSR set to: 14
  1442                           ;i2c.c: 12:   TRISDbits.TRISD5 = 1;
  1443   001ADC  8A84               	bsf	132,5,c	;volatile
  1444   001ADE                     
  1445                           ; BSR set to: 14
  1446                           ;i2c.c: 13:   TRISDbits.TRISD6 = 1;
  1447   001ADE  8C84               	bsf	132,6,c	;volatile
  1448   001AE0                     
  1449                           ; BSR set to: 14
  1450                           ;i2c.c: 14:   ANSELDbits.ANSELD5=0;
  1451   001AE0  9BA7               	bcf	167,5,b	;volatile
  1452   001AE2                     
  1453                           ; BSR set to: 14
  1454                           ;i2c.c: 15:   ANSELDbits.ANSELD6=0;
  1455   001AE2  9DA7               	bcf	167,6,b	;volatile
  1456                           
  1457                           ;i2c.c: 16:   SSP2DATPPS=0x1D;
  1458   001AE4  0E1D               	movlw	29
  1459   001AE6  6F1D               	movwf	29,b	;volatile
  1460                           
  1461                           ;i2c.c: 17:   SSP2CLKPPS=0x1E;
  1462   001AE8  0E1E               	movlw	30
  1463   001AEA  6F1C               	movwf	28,b	;volatile
  1464                           
  1465                           ;i2c.c: 18:   RD5PPS=0x1C;
  1466   001AEC  0E1C               	movlw	28
  1467   001AEE  6F6F               	movwf	111,b	;volatile
  1468                           
  1469                           ;i2c.c: 19:   RD6PPS=0x1B;
  1470   001AF0  0E1B               	movlw	27
  1471   001AF2  6F70               	movwf	112,b	;volatile
  1472   001AF4                     
  1473                           ; BSR set to: 14
  1474   001AF4  0012               	return		;funcret
  1475   001AF6                     __end_of_I2C_2_Master_Init:
  1476                           	callstack 0
  1477                           
  1478 ;; *************** function _buggy_color_response *****************
  1479 ;; Defined at:
  1480 ;;		line 101 in file "color.c"
  1481 ;; Parameters:    Size  Location     Type
  1482 ;;  mL              2   49[COMRAM] PTR struct DC_motor
  1483 ;;		 -> motorL(9), 
  1484 ;;  mR              2   51[COMRAM] PTR struct DC_motor
  1485 ;;		 -> motorR(9), 
  1486 ;;  c               2   53[COMRAM] PTR struct colors
  1487 ;;		 -> color(20), 
  1488 ;; Auto vars:     Size  Location     Type
  1489 ;;		None
  1490 ;; Return value:  Size  Location     Type
  1491 ;;                  1    wreg      void 
  1492 ;; Registers used:
  1493 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1494 ;; Tracked objects:
  1495 ;;		On entry : 0/0
  1496 ;;		On exit  : 0/0
  1497 ;;		Unchanged: 0/0
  1498 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1499 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1500 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1501 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1502 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1503 ;;Total ram usage:        8 bytes
  1504 ;; Hardware stack levels used: 1
  1505 ;; Hardware stack levels required when called: 6
  1506 ;; This function calls:
  1507 ;;		_READcolor
  1508 ;;		___flge
  1509 ;;		_colourcards_normaliseRGBC
  1510 ;;		_forward
  1511 ;;		_instructions
  1512 ;;		_stop
  1513 ;; This function is called by:
  1514 ;;		_main
  1515 ;; This function uses a non-reentrant model
  1516 ;;
  1517                           
  1518                           	psect	text10
  1519   000028                     __ptext10:
  1520                           	callstack 0
  1521   000028                     _buggy_color_response:
  1522                           	callstack 24
  1523   000028                     
  1524                           ;color.c: 102:     READcolor(&color);
  1525   000028  0E3F               	movlw	low _color
  1526   00002A  6E0C               	movwf	READcolor@c^0,c
  1527   00002C  0E00               	movlw	high _color
  1528   00002E  6E0D               	movwf	(READcolor@c+1)^0,c
  1529   000030  EC4D  F00D         	call	_READcolor	;wreg free
  1530                           
  1531                           ;color.c: 103:     colourcards_normaliseRGBC(&color);
  1532   000034  0E3F               	movlw	low _color
  1533   000036  6E28               	movwf	colourcards_normaliseRGBC@c^0,c
  1534   000038  0E00               	movlw	high _color
  1535   00003A  6E29               	movwf	(colourcards_normaliseRGBC@c+1)^0,c
  1536   00003C  ECA8  F008         	call	_colourcards_normaliseRGBC	;wreg free
  1537   000040                     
  1538                           ;color.c: 105:     if (read_color_flag = 1 ){stop(mL,mR);_delay((unsigned long)((500)*(6
      +                          4000000/4000.0)));READcolor(&color);colourcards_normaliseRGBC(&color);_delay((unsigned l
      +                          ong)((500)*(64000000/4000.0)));
  1539   000040  0E01               	movlw	1
  1540   000042  6E3E               	movwf	_read_color_flag^0,c
  1541   000044  C032  F014         	movff	buggy_color_response@mL,stop@mL
  1542   000048  C033  F015         	movff	buggy_color_response@mL+1,stop@mL+1
  1543   00004C  C034  F016         	movff	buggy_color_response@mR,stop@mR
  1544   000050  C035  F017         	movff	buggy_color_response@mR+1,stop@mR+1
  1545   000054  ECFD  F00A         	call	_stop	;wreg free
  1546   000058  0E29               	movlw	41
  1547   00005A  6E39               	movwf	(??_buggy_color_response+1)^0,c
  1548   00005C  0E96               	movlw	150
  1549   00005E  6E38               	movwf	??_buggy_color_response^0,c
  1550   000060  0E7F               	movlw	127
  1551   000062                     u1997:
  1552   000062  2EE8               	decfsz	wreg,f,c
  1553   000064  D7FE               	bra	u1997
  1554   000066  2E38               	decfsz	??_buggy_color_response^0,f,c
  1555   000068  D7FC               	bra	u1997
  1556   00006A  2E39               	decfsz	(??_buggy_color_response+1)^0,f,c
  1557   00006C  D7FA               	bra	u1997
  1558   00006E  F000               	nop	
  1559   000070  0E3F               	movlw	low _color
  1560   000072  6E0C               	movwf	READcolor@c^0,c
  1561   000074  0E00               	movlw	high _color
  1562   000076  6E0D               	movwf	(READcolor@c+1)^0,c
  1563   000078  EC4D  F00D         	call	_READcolor	;wreg free
  1564   00007C  0E3F               	movlw	low _color
  1565   00007E  6E28               	movwf	colourcards_normaliseRGBC@c^0,c
  1566   000080  0E00               	movlw	high _color
  1567   000082  6E29               	movwf	(colourcards_normaliseRGBC@c+1)^0,c
  1568   000084  ECA8  F008         	call	_colourcards_normaliseRGBC	;wreg free
  1569   000088  0E29               	movlw	41
  1570   00008A  6E39               	movwf	(??_buggy_color_response+1)^0,c
  1571   00008C  0E96               	movlw	150
  1572   00008E  6E38               	movwf	??_buggy_color_response^0,c
  1573   000090  0E7F               	movlw	127
  1574   000092                     u2007:
  1575   000092  2EE8               	decfsz	wreg,f,c
  1576   000094  D7FE               	bra	u2007
  1577   000096  2E38               	decfsz	??_buggy_color_response^0,f,c
  1578   000098  D7FC               	bra	u2007
  1579   00009A  2E39               	decfsz	(??_buggy_color_response+1)^0,f,c
  1580   00009C  D7FA               	bra	u2007
  1581   00009E  F000               	nop	
  1582   0000A0                     
  1583                           ;color.c: 106:     if (color.R_norm > 0.77 && color.B_norm < 0.18 && color.G_norm < 0.14
      +                          ){
  1584   0000A0  0EB8               	movlw	184
  1585   0000A2  6E01               	movwf	___flge@ff1^0,c
  1586   0000A4  0E1E               	movlw	30
  1587   0000A6  6E02               	movwf	(___flge@ff1+1)^0,c
  1588   0000A8  0E45               	movlw	69
  1589   0000AA  6E03               	movwf	(___flge@ff1+2)^0,c
  1590   0000AC  0E3F               	movlw	63
  1591   0000AE  6E04               	movwf	(___flge@ff1+3)^0,c
  1592   0000B0  C047  F005         	movff	_color+8,___flge@ff2
  1593   0000B4  C048  F006         	movff	_color+9,___flge@ff2+1
  1594   0000B8  C049  F007         	movff	_color+10,___flge@ff2+2
  1595   0000BC  C04A  F008         	movff	_color+11,___flge@ff2+3
  1596   0000C0  EC3D  F009         	call	___flge	;wreg free
  1597   0000C4  B0D8               	btfsc	status,0,c
  1598   0000C6  EF67  F000         	goto	u1741
  1599   0000CA  EF69  F000         	goto	u1740
  1600   0000CE                     u1741:
  1601   0000CE  EFA9  F000         	goto	l2558
  1602   0000D2                     u1740:
  1603   0000D2  C04B  F001         	movff	_color+12,___flge@ff1
  1604   0000D6  C04C  F002         	movff	_color+13,___flge@ff1+1
  1605   0000DA  C04D  F003         	movff	_color+14,___flge@ff1+2
  1606   0000DE  C04E  F004         	movff	_color+15,___flge@ff1+3
  1607   0000E2  0EEC               	movlw	236
  1608   0000E4  6E05               	movwf	___flge@ff2^0,c
  1609   0000E6  0E51               	movlw	81
  1610   0000E8  6E06               	movwf	(___flge@ff2+1)^0,c
  1611   0000EA  0E38               	movlw	56
  1612   0000EC  6E07               	movwf	(___flge@ff2+2)^0,c
  1613   0000EE  0E3E               	movlw	62
  1614   0000F0  6E08               	movwf	(___flge@ff2+3)^0,c
  1615   0000F2  EC3D  F009         	call	___flge	;wreg free
  1616   0000F6  B0D8               	btfsc	status,0,c
  1617   0000F8  EF80  F000         	goto	u1751
  1618   0000FC  EF82  F000         	goto	u1750
  1619   000100                     u1751:
  1620   000100  EFA9  F000         	goto	l2558
  1621   000104                     u1750:
  1622   000104  C04F  F001         	movff	_color+16,___flge@ff1
  1623   000108  C050  F002         	movff	_color+17,___flge@ff1+1
  1624   00010C  C051  F003         	movff	_color+18,___flge@ff1+2
  1625   000110  C052  F004         	movff	_color+19,___flge@ff1+3
  1626   000114  0E29               	movlw	41
  1627   000116  6E05               	movwf	___flge@ff2^0,c
  1628   000118  0E5C               	movlw	92
  1629   00011A  6E06               	movwf	(___flge@ff2+1)^0,c
  1630   00011C  0E0F               	movlw	15
  1631   00011E  6E07               	movwf	(___flge@ff2+2)^0,c
  1632   000120  0E3E               	movlw	62
  1633   000122  6E08               	movwf	(___flge@ff2+3)^0,c
  1634   000124  EC3D  F009         	call	___flge	;wreg free
  1635   000128  B0D8               	btfsc	status,0,c
  1636   00012A  EF99  F000         	goto	u1761
  1637   00012E  EF9B  F000         	goto	u1760
  1638   000132                     u1761:
  1639   000132  EFA9  F000         	goto	l2558
  1640   000136                     u1760:
  1641   000136                     
  1642                           ;color.c: 107:     instructions(mL,mR,1);
  1643   000136  C032  F024         	movff	buggy_color_response@mL,instructions@mL
  1644   00013A  C033  F025         	movff	buggy_color_response@mL+1,instructions@mL+1
  1645   00013E  C034  F026         	movff	buggy_color_response@mR,instructions@mR
  1646   000142  C035  F027         	movff	buggy_color_response@mR+1,instructions@mR+1
  1647   000146  0E00               	movlw	0
  1648   000148  6E29               	movwf	(instructions@count+1)^0,c
  1649   00014A  0E01               	movlw	1
  1650   00014C  6E28               	movwf	instructions@count^0,c
  1651   00014E  EC6F  F004         	call	_instructions	;wreg free
  1652   000152                     l2558:
  1653                           
  1654                           ;color.c: 109:     if (color.B_norm < 0.25 && color.G_norm > 0.40) {
  1655   000152  C04B  F001         	movff	_color+12,___flge@ff1
  1656   000156  C04C  F002         	movff	_color+13,___flge@ff1+1
  1657   00015A  C04D  F003         	movff	_color+14,___flge@ff1+2
  1658   00015E  C04E  F004         	movff	_color+15,___flge@ff1+3
  1659   000162  0E00               	movlw	0
  1660   000164  6E05               	movwf	___flge@ff2^0,c
  1661   000166  0E00               	movlw	0
  1662   000168  6E06               	movwf	(___flge@ff2+1)^0,c
  1663   00016A  0E80               	movlw	128
  1664   00016C  6E07               	movwf	(___flge@ff2+2)^0,c
  1665   00016E  0E3E               	movlw	62
  1666   000170  6E08               	movwf	(___flge@ff2+3)^0,c
  1667   000172  EC3D  F009         	call	___flge	;wreg free
  1668   000176  B0D8               	btfsc	status,0,c
  1669   000178  EFC0  F000         	goto	u1771
  1670   00017C  EFC2  F000         	goto	u1770
  1671   000180                     u1771:
  1672   000180  EFE9  F000         	goto	l2564
  1673   000184                     u1770:
  1674   000184  0ECD               	movlw	205
  1675   000186  6E01               	movwf	___flge@ff1^0,c
  1676   000188  0ECC               	movlw	204
  1677   00018A  6E02               	movwf	(___flge@ff1+1)^0,c
  1678   00018C  0ECC               	movlw	204
  1679   00018E  6E03               	movwf	(___flge@ff1+2)^0,c
  1680   000190  0E3E               	movlw	62
  1681   000192  6E04               	movwf	(___flge@ff1+3)^0,c
  1682   000194  C04F  F005         	movff	_color+16,___flge@ff2
  1683   000198  C050  F006         	movff	_color+17,___flge@ff2+1
  1684   00019C  C051  F007         	movff	_color+18,___flge@ff2+2
  1685   0001A0  C052  F008         	movff	_color+19,___flge@ff2+3
  1686   0001A4  EC3D  F009         	call	___flge	;wreg free
  1687   0001A8  B0D8               	btfsc	status,0,c
  1688   0001AA  EFD9  F000         	goto	u1781
  1689   0001AE  EFDB  F000         	goto	u1780
  1690   0001B2                     u1781:
  1691   0001B2  EFE9  F000         	goto	l2564
  1692   0001B6                     u1780:
  1693   0001B6                     
  1694                           ;color.c: 110:     instructions(mL,mR,2);
  1695   0001B6  C032  F024         	movff	buggy_color_response@mL,instructions@mL
  1696   0001BA  C033  F025         	movff	buggy_color_response@mL+1,instructions@mL+1
  1697   0001BE  C034  F026         	movff	buggy_color_response@mR,instructions@mR
  1698   0001C2  C035  F027         	movff	buggy_color_response@mR+1,instructions@mR+1
  1699   0001C6  0E00               	movlw	0
  1700   0001C8  6E29               	movwf	(instructions@count+1)^0,c
  1701   0001CA  0E02               	movlw	2
  1702   0001CC  6E28               	movwf	instructions@count^0,c
  1703   0001CE  EC6F  F004         	call	_instructions	;wreg free
  1704   0001D2                     l2564:
  1705                           
  1706                           ;color.c: 112:     if (color.R_norm < 0.38 && color.B_norm > 0.32 && color.G_norm > 0.34
      +                          ){
  1707   0001D2  C047  F001         	movff	_color+8,___flge@ff1
  1708   0001D6  C048  F002         	movff	_color+9,___flge@ff1+1
  1709   0001DA  C049  F003         	movff	_color+10,___flge@ff1+2
  1710   0001DE  C04A  F004         	movff	_color+11,___flge@ff1+3
  1711   0001E2  0E5C               	movlw	92
  1712   0001E4  6E05               	movwf	___flge@ff2^0,c
  1713   0001E6  0E8F               	movlw	143
  1714   0001E8  6E06               	movwf	(___flge@ff2+1)^0,c
  1715   0001EA  0EC2               	movlw	194
  1716   0001EC  6E07               	movwf	(___flge@ff2+2)^0,c
  1717   0001EE  0E3E               	movlw	62
  1718   0001F0  6E08               	movwf	(___flge@ff2+3)^0,c
  1719   0001F2  EC3D  F009         	call	___flge	;wreg free
  1720   0001F6  B0D8               	btfsc	status,0,c
  1721   0001F8  EF00  F001         	goto	u1791
  1722   0001FC  EF02  F001         	goto	u1790
  1723   000200                     u1791:
  1724   000200  EF42  F001         	goto	l2572
  1725   000204                     u1790:
  1726   000204  0E0A               	movlw	10
  1727   000206  6E01               	movwf	___flge@ff1^0,c
  1728   000208  0ED7               	movlw	215
  1729   00020A  6E02               	movwf	(___flge@ff1+1)^0,c
  1730   00020C  0EA3               	movlw	163
  1731   00020E  6E03               	movwf	(___flge@ff1+2)^0,c
  1732   000210  0E3E               	movlw	62
  1733   000212  6E04               	movwf	(___flge@ff1+3)^0,c
  1734   000214  C04B  F005         	movff	_color+12,___flge@ff2
  1735   000218  C04C  F006         	movff	_color+13,___flge@ff2+1
  1736   00021C  C04D  F007         	movff	_color+14,___flge@ff2+2
  1737   000220  C04E  F008         	movff	_color+15,___flge@ff2+3
  1738   000224  EC3D  F009         	call	___flge	;wreg free
  1739   000228  B0D8               	btfsc	status,0,c
  1740   00022A  EF19  F001         	goto	u1801
  1741   00022E  EF1B  F001         	goto	u1800
  1742   000232                     u1801:
  1743   000232  EF42  F001         	goto	l2572
  1744   000236                     u1800:
  1745   000236  0E7B               	movlw	123
  1746   000238  6E01               	movwf	___flge@ff1^0,c
  1747   00023A  0E14               	movlw	20
  1748   00023C  6E02               	movwf	(___flge@ff1+1)^0,c
  1749   00023E  0EAE               	movlw	174
  1750   000240  6E03               	movwf	(___flge@ff1+2)^0,c
  1751   000242  0E3E               	movlw	62
  1752   000244  6E04               	movwf	(___flge@ff1+3)^0,c
  1753   000246  C04F  F005         	movff	_color+16,___flge@ff2
  1754   00024A  C050  F006         	movff	_color+17,___flge@ff2+1
  1755   00024E  C051  F007         	movff	_color+18,___flge@ff2+2
  1756   000252  C052  F008         	movff	_color+19,___flge@ff2+3
  1757   000256  EC3D  F009         	call	___flge	;wreg free
  1758   00025A  B0D8               	btfsc	status,0,c
  1759   00025C  EF32  F001         	goto	u1811
  1760   000260  EF34  F001         	goto	u1810
  1761   000264                     u1811:
  1762   000264  EF42  F001         	goto	l2572
  1763   000268                     u1810:
  1764   000268                     
  1765                           ;color.c: 113:     instructions(mL,mR,3);
  1766   000268  C032  F024         	movff	buggy_color_response@mL,instructions@mL
  1767   00026C  C033  F025         	movff	buggy_color_response@mL+1,instructions@mL+1
  1768   000270  C034  F026         	movff	buggy_color_response@mR,instructions@mR
  1769   000274  C035  F027         	movff	buggy_color_response@mR+1,instructions@mR+1
  1770   000278  0E00               	movlw	0
  1771   00027A  6E29               	movwf	(instructions@count+1)^0,c
  1772   00027C  0E03               	movlw	3
  1773   00027E  6E28               	movwf	instructions@count^0,c
  1774   000280  EC6F  F004         	call	_instructions	;wreg free
  1775   000284                     l2572:
  1776                           
  1777                           ;color.c: 115:     if (color.R_norm > 0.52 && color.G_norm > 0.32){
  1778   000284  0EB8               	movlw	184
  1779   000286  6E01               	movwf	___flge@ff1^0,c
  1780   000288  0E1E               	movlw	30
  1781   00028A  6E02               	movwf	(___flge@ff1+1)^0,c
  1782   00028C  0E05               	movlw	5
  1783   00028E  6E03               	movwf	(___flge@ff1+2)^0,c
  1784   000290  0E3F               	movlw	63
  1785   000292  6E04               	movwf	(___flge@ff1+3)^0,c
  1786   000294  C047  F005         	movff	_color+8,___flge@ff2
  1787   000298  C048  F006         	movff	_color+9,___flge@ff2+1
  1788   00029C  C049  F007         	movff	_color+10,___flge@ff2+2
  1789   0002A0  C04A  F008         	movff	_color+11,___flge@ff2+3
  1790   0002A4  EC3D  F009         	call	___flge	;wreg free
  1791   0002A8  B0D8               	btfsc	status,0,c
  1792   0002AA  EF59  F001         	goto	u1821
  1793   0002AE  EF5B  F001         	goto	u1820
  1794   0002B2                     u1821:
  1795   0002B2  EF82  F001         	goto	l2578
  1796   0002B6                     u1820:
  1797   0002B6  0E0A               	movlw	10
  1798   0002B8  6E01               	movwf	___flge@ff1^0,c
  1799   0002BA  0ED7               	movlw	215
  1800   0002BC  6E02               	movwf	(___flge@ff1+1)^0,c
  1801   0002BE  0EA3               	movlw	163
  1802   0002C0  6E03               	movwf	(___flge@ff1+2)^0,c
  1803   0002C2  0E3E               	movlw	62
  1804   0002C4  6E04               	movwf	(___flge@ff1+3)^0,c
  1805   0002C6  C04F  F005         	movff	_color+16,___flge@ff2
  1806   0002CA  C050  F006         	movff	_color+17,___flge@ff2+1
  1807   0002CE  C051  F007         	movff	_color+18,___flge@ff2+2
  1808   0002D2  C052  F008         	movff	_color+19,___flge@ff2+3
  1809   0002D6  EC3D  F009         	call	___flge	;wreg free
  1810   0002DA  B0D8               	btfsc	status,0,c
  1811   0002DC  EF72  F001         	goto	u1831
  1812   0002E0  EF74  F001         	goto	u1830
  1813   0002E4                     u1831:
  1814   0002E4  EF82  F001         	goto	l2578
  1815   0002E8                     u1830:
  1816   0002E8                     
  1817                           ;color.c: 116:     instructions(mL,mR,4);
  1818   0002E8  C032  F024         	movff	buggy_color_response@mL,instructions@mL
  1819   0002EC  C033  F025         	movff	buggy_color_response@mL+1,instructions@mL+1
  1820   0002F0  C034  F026         	movff	buggy_color_response@mR,instructions@mR
  1821   0002F4  C035  F027         	movff	buggy_color_response@mR+1,instructions@mR+1
  1822   0002F8  0E00               	movlw	0
  1823   0002FA  6E29               	movwf	(instructions@count+1)^0,c
  1824   0002FC  0E04               	movlw	4
  1825   0002FE  6E28               	movwf	instructions@count^0,c
  1826   000300  EC6F  F004         	call	_instructions	;wreg free
  1827   000304                     l2578:
  1828                           
  1829                           ;color.c: 118:     if (color.R_norm > 0.50 && color.B_norm > 0.24 && color.G_norm < 0.33
      +                          ){
  1830   000304  0E00               	movlw	0
  1831   000306  6E01               	movwf	___flge@ff1^0,c
  1832   000308  0E00               	movlw	0
  1833   00030A  6E02               	movwf	(___flge@ff1+1)^0,c
  1834   00030C  0E00               	movlw	0
  1835   00030E  6E03               	movwf	(___flge@ff1+2)^0,c
  1836   000310  0E3F               	movlw	63
  1837   000312  6E04               	movwf	(___flge@ff1+3)^0,c
  1838   000314  C047  F005         	movff	_color+8,___flge@ff2
  1839   000318  C048  F006         	movff	_color+9,___flge@ff2+1
  1840   00031C  C049  F007         	movff	_color+10,___flge@ff2+2
  1841   000320  C04A  F008         	movff	_color+11,___flge@ff2+3
  1842   000324  EC3D  F009         	call	___flge	;wreg free
  1843   000328  B0D8               	btfsc	status,0,c
  1844   00032A  EF99  F001         	goto	u1841
  1845   00032E  EF9B  F001         	goto	u1840
  1846   000332                     u1841:
  1847   000332  EFDB  F001         	goto	l2586
  1848   000336                     u1840:
  1849   000336  0E8F               	movlw	143
  1850   000338  6E01               	movwf	___flge@ff1^0,c
  1851   00033A  0EC2               	movlw	194
  1852   00033C  6E02               	movwf	(___flge@ff1+1)^0,c
  1853   00033E  0E75               	movlw	117
  1854   000340  6E03               	movwf	(___flge@ff1+2)^0,c
  1855   000342  0E3E               	movlw	62
  1856   000344  6E04               	movwf	(___flge@ff1+3)^0,c
  1857   000346  C04B  F005         	movff	_color+12,___flge@ff2
  1858   00034A  C04C  F006         	movff	_color+13,___flge@ff2+1
  1859   00034E  C04D  F007         	movff	_color+14,___flge@ff2+2
  1860   000352  C04E  F008         	movff	_color+15,___flge@ff2+3
  1861   000356  EC3D  F009         	call	___flge	;wreg free
  1862   00035A  B0D8               	btfsc	status,0,c
  1863   00035C  EFB2  F001         	goto	u1851
  1864   000360  EFB4  F001         	goto	u1850
  1865   000364                     u1851:
  1866   000364  EFDB  F001         	goto	l2586
  1867   000368                     u1850:
  1868   000368  C04F  F001         	movff	_color+16,___flge@ff1
  1869   00036C  C050  F002         	movff	_color+17,___flge@ff1+1
  1870   000370  C051  F003         	movff	_color+18,___flge@ff1+2
  1871   000374  C052  F004         	movff	_color+19,___flge@ff1+3
  1872   000378  0EC3               	movlw	195
  1873   00037A  6E05               	movwf	___flge@ff2^0,c
  1874   00037C  0EF5               	movlw	245
  1875   00037E  6E06               	movwf	(___flge@ff2+1)^0,c
  1876   000380  0EA8               	movlw	168
  1877   000382  6E07               	movwf	(___flge@ff2+2)^0,c
  1878   000384  0E3E               	movlw	62
  1879   000386  6E08               	movwf	(___flge@ff2+3)^0,c
  1880   000388  EC3D  F009         	call	___flge	;wreg free
  1881   00038C  B0D8               	btfsc	status,0,c
  1882   00038E  EFCB  F001         	goto	u1861
  1883   000392  EFCD  F001         	goto	u1860
  1884   000396                     u1861:
  1885   000396  EFDB  F001         	goto	l2586
  1886   00039A                     u1860:
  1887   00039A                     
  1888                           ;color.c: 119:     instructions(mL,mR,5);
  1889   00039A  C032  F024         	movff	buggy_color_response@mL,instructions@mL
  1890   00039E  C033  F025         	movff	buggy_color_response@mL+1,instructions@mL+1
  1891   0003A2  C034  F026         	movff	buggy_color_response@mR,instructions@mR
  1892   0003A6  C035  F027         	movff	buggy_color_response@mR+1,instructions@mR+1
  1893   0003AA  0E00               	movlw	0
  1894   0003AC  6E29               	movwf	(instructions@count+1)^0,c
  1895   0003AE  0E05               	movlw	5
  1896   0003B0  6E28               	movwf	instructions@count^0,c
  1897   0003B2  EC6F  F004         	call	_instructions	;wreg free
  1898   0003B6                     l2586:
  1899                           
  1900                           ;color.c: 121:     if (color.R_norm > 0.60 && color.B_norm < 0.22 && color.G_norm > 0.23
      +                          ){
  1901   0003B6  0E9A               	movlw	154
  1902   0003B8  6E01               	movwf	___flge@ff1^0,c
  1903   0003BA  0E99               	movlw	153
  1904   0003BC  6E02               	movwf	(___flge@ff1+1)^0,c
  1905   0003BE  0E19               	movlw	25
  1906   0003C0  6E03               	movwf	(___flge@ff1+2)^0,c
  1907   0003C2  0E3F               	movlw	63
  1908   0003C4  6E04               	movwf	(___flge@ff1+3)^0,c
  1909   0003C6  C047  F005         	movff	_color+8,___flge@ff2
  1910   0003CA  C048  F006         	movff	_color+9,___flge@ff2+1
  1911   0003CE  C049  F007         	movff	_color+10,___flge@ff2+2
  1912   0003D2  C04A  F008         	movff	_color+11,___flge@ff2+3
  1913   0003D6  EC3D  F009         	call	___flge	;wreg free
  1914   0003DA  B0D8               	btfsc	status,0,c
  1915   0003DC  EFF2  F001         	goto	u1871
  1916   0003E0  EFF4  F001         	goto	u1870
  1917   0003E4                     u1871:
  1918   0003E4  EF34  F002         	goto	l2594
  1919   0003E8                     u1870:
  1920   0003E8  C04B  F001         	movff	_color+12,___flge@ff1
  1921   0003EC  C04C  F002         	movff	_color+13,___flge@ff1+1
  1922   0003F0  C04D  F003         	movff	_color+14,___flge@ff1+2
  1923   0003F4  C04E  F004         	movff	_color+15,___flge@ff1+3
  1924   0003F8  0EAE               	movlw	174
  1925   0003FA  6E05               	movwf	___flge@ff2^0,c
  1926   0003FC  0E47               	movlw	71
  1927   0003FE  6E06               	movwf	(___flge@ff2+1)^0,c
  1928   000400  0E61               	movlw	97
  1929   000402  6E07               	movwf	(___flge@ff2+2)^0,c
  1930   000404  0E3E               	movlw	62
  1931   000406  6E08               	movwf	(___flge@ff2+3)^0,c
  1932   000408  EC3D  F009         	call	___flge	;wreg free
  1933   00040C  B0D8               	btfsc	status,0,c
  1934   00040E  EF0B  F002         	goto	u1881
  1935   000412  EF0D  F002         	goto	u1880
  1936   000416                     u1881:
  1937   000416  EF34  F002         	goto	l2594
  1938   00041A                     u1880:
  1939   00041A  0E1F               	movlw	31
  1940   00041C  6E01               	movwf	___flge@ff1^0,c
  1941   00041E  0E85               	movlw	133
  1942   000420  6E02               	movwf	(___flge@ff1+1)^0,c
  1943   000422  0E6B               	movlw	107
  1944   000424  6E03               	movwf	(___flge@ff1+2)^0,c
  1945   000426  0E3E               	movlw	62
  1946   000428  6E04               	movwf	(___flge@ff1+3)^0,c
  1947   00042A  C04F  F005         	movff	_color+16,___flge@ff2
  1948   00042E  C050  F006         	movff	_color+17,___flge@ff2+1
  1949   000432  C051  F007         	movff	_color+18,___flge@ff2+2
  1950   000436  C052  F008         	movff	_color+19,___flge@ff2+3
  1951   00043A  EC3D  F009         	call	___flge	;wreg free
  1952   00043E  B0D8               	btfsc	status,0,c
  1953   000440  EF24  F002         	goto	u1891
  1954   000444  EF26  F002         	goto	u1890
  1955   000448                     u1891:
  1956   000448  EF34  F002         	goto	l2594
  1957   00044C                     u1890:
  1958   00044C                     
  1959                           ;color.c: 122:     instructions(mL,mR,6);
  1960   00044C  C032  F024         	movff	buggy_color_response@mL,instructions@mL
  1961   000450  C033  F025         	movff	buggy_color_response@mL+1,instructions@mL+1
  1962   000454  C034  F026         	movff	buggy_color_response@mR,instructions@mR
  1963   000458  C035  F027         	movff	buggy_color_response@mR+1,instructions@mR+1
  1964   00045C  0E00               	movlw	0
  1965   00045E  6E29               	movwf	(instructions@count+1)^0,c
  1966   000460  0E06               	movlw	6
  1967   000462  6E28               	movwf	instructions@count^0,c
  1968   000464  EC6F  F004         	call	_instructions	;wreg free
  1969   000468                     l2594:
  1970                           
  1971                           ;color.c: 124:     if (color.R_norm < 0.40 && color.B_norm > 0.30 && color.G_norm > 0.4)
      +                          {
  1972   000468  C047  F001         	movff	_color+8,___flge@ff1
  1973   00046C  C048  F002         	movff	_color+9,___flge@ff1+1
  1974   000470  C049  F003         	movff	_color+10,___flge@ff1+2
  1975   000474  C04A  F004         	movff	_color+11,___flge@ff1+3
  1976   000478  0ECD               	movlw	205
  1977   00047A  6E05               	movwf	___flge@ff2^0,c
  1978   00047C  0ECC               	movlw	204
  1979   00047E  6E06               	movwf	(___flge@ff2+1)^0,c
  1980   000480  0ECC               	movlw	204
  1981   000482  6E07               	movwf	(___flge@ff2+2)^0,c
  1982   000484  0E3E               	movlw	62
  1983   000486  6E08               	movwf	(___flge@ff2+3)^0,c
  1984   000488  EC3D  F009         	call	___flge	;wreg free
  1985   00048C  B0D8               	btfsc	status,0,c
  1986   00048E  EF4B  F002         	goto	u1901
  1987   000492  EF4D  F002         	goto	u1900
  1988   000496                     u1901:
  1989   000496  EF8D  F002         	goto	l2602
  1990   00049A                     u1900:
  1991   00049A  0E9A               	movlw	154
  1992   00049C  6E01               	movwf	___flge@ff1^0,c
  1993   00049E  0E99               	movlw	153
  1994   0004A0  6E02               	movwf	(___flge@ff1+1)^0,c
  1995   0004A2  0E99               	movlw	153
  1996   0004A4  6E03               	movwf	(___flge@ff1+2)^0,c
  1997   0004A6  0E3E               	movlw	62
  1998   0004A8  6E04               	movwf	(___flge@ff1+3)^0,c
  1999   0004AA  C04B  F005         	movff	_color+12,___flge@ff2
  2000   0004AE  C04C  F006         	movff	_color+13,___flge@ff2+1
  2001   0004B2  C04D  F007         	movff	_color+14,___flge@ff2+2
  2002   0004B6  C04E  F008         	movff	_color+15,___flge@ff2+3
  2003   0004BA  EC3D  F009         	call	___flge	;wreg free
  2004   0004BE  B0D8               	btfsc	status,0,c
  2005   0004C0  EF64  F002         	goto	u1911
  2006   0004C4  EF66  F002         	goto	u1910
  2007   0004C8                     u1911:
  2008   0004C8  EF8D  F002         	goto	l2602
  2009   0004CC                     u1910:
  2010   0004CC  0ECD               	movlw	205
  2011   0004CE  6E01               	movwf	___flge@ff1^0,c
  2012   0004D0  0ECC               	movlw	204
  2013   0004D2  6E02               	movwf	(___flge@ff1+1)^0,c
  2014   0004D4  0ECC               	movlw	204
  2015   0004D6  6E03               	movwf	(___flge@ff1+2)^0,c
  2016   0004D8  0E3E               	movlw	62
  2017   0004DA  6E04               	movwf	(___flge@ff1+3)^0,c
  2018   0004DC  C04F  F005         	movff	_color+16,___flge@ff2
  2019   0004E0  C050  F006         	movff	_color+17,___flge@ff2+1
  2020   0004E4  C051  F007         	movff	_color+18,___flge@ff2+2
  2021   0004E8  C052  F008         	movff	_color+19,___flge@ff2+3
  2022   0004EC  EC3D  F009         	call	___flge	;wreg free
  2023   0004F0  B0D8               	btfsc	status,0,c
  2024   0004F2  EF7D  F002         	goto	u1921
  2025   0004F6  EF7F  F002         	goto	u1920
  2026   0004FA                     u1921:
  2027   0004FA  EF8D  F002         	goto	l2602
  2028   0004FE                     u1920:
  2029   0004FE                     
  2030                           ;color.c: 125:     instructions(mL,mR,7);
  2031   0004FE  C032  F024         	movff	buggy_color_response@mL,instructions@mL
  2032   000502  C033  F025         	movff	buggy_color_response@mL+1,instructions@mL+1
  2033   000506  C034  F026         	movff	buggy_color_response@mR,instructions@mR
  2034   00050A  C035  F027         	movff	buggy_color_response@mR+1,instructions@mR+1
  2035   00050E  0E00               	movlw	0
  2036   000510  6E29               	movwf	(instructions@count+1)^0,c
  2037   000512  0E07               	movlw	7
  2038   000514  6E28               	movwf	instructions@count^0,c
  2039   000516  EC6F  F004         	call	_instructions	;wreg free
  2040   00051A                     l2602:
  2041                           
  2042                           ;color.c: 127:     if (color.R_norm < 0.5 && color.C > 16000){
  2043   00051A  C047  F001         	movff	_color+8,___flge@ff1
  2044   00051E  C048  F002         	movff	_color+9,___flge@ff1+1
  2045   000522  C049  F003         	movff	_color+10,___flge@ff1+2
  2046   000526  C04A  F004         	movff	_color+11,___flge@ff1+3
  2047   00052A  0E00               	movlw	0
  2048   00052C  6E05               	movwf	___flge@ff2^0,c
  2049   00052E  0E00               	movlw	0
  2050   000530  6E06               	movwf	(___flge@ff2+1)^0,c
  2051   000532  0E00               	movlw	0
  2052   000534  6E07               	movwf	(___flge@ff2+2)^0,c
  2053   000536  0E3F               	movlw	63
  2054   000538  6E08               	movwf	(___flge@ff2+3)^0,c
  2055   00053A  EC3D  F009         	call	___flge	;wreg free
  2056   00053E                     
  2057                           ;color.c: 132:     read_color_flag = 0;
  2058   00053E  0E00               	movlw	0
  2059   000540  6E3E               	movwf	_read_color_flag^0,c
  2060   000542  0012               	return		;funcret
  2061   000544                     __end_of_buggy_color_response:
  2062                           	callstack 0
  2063                           
  2064 ;; *************** function _instructions *****************
  2065 ;; Defined at:
  2066 ;;		line 254 in file "dc_motor.c"
  2067 ;; Parameters:    Size  Location     Type
  2068 ;;  mL              2   35[COMRAM] PTR struct DC_motor
  2069 ;;		 -> motorL(9), 
  2070 ;;  mR              2   37[COMRAM] PTR struct DC_motor
  2071 ;;		 -> motorR(9), 
  2072 ;;  count           2   39[COMRAM] int 
  2073 ;; Auto vars:     Size  Location     Type
  2074 ;;		None
  2075 ;; Return value:  Size  Location     Type
  2076 ;;                  1    wreg      void 
  2077 ;; Registers used:
  2078 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2079 ;; Tracked objects:
  2080 ;;		On entry : 0/0
  2081 ;;		On exit  : 0/0
  2082 ;;		Unchanged: 0/0
  2083 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2084 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2085 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2086 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2087 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2088 ;;Total ram usage:        8 bytes
  2089 ;; Hardware stack levels used: 1
  2090 ;; Hardware stack levels required when called: 5
  2091 ;; This function calls:
  2092 ;;		_left_45
  2093 ;;		_reverse
  2094 ;;		_right_45
  2095 ;;		_space
  2096 ;;		_stop
  2097 ;; This function is called by:
  2098 ;;		_buggy_color_response
  2099 ;; This function uses a non-reentrant model
  2100 ;;
  2101                           
  2102                           	psect	text11
  2103   0008DE                     __ptext11:
  2104                           	callstack 0
  2105   0008DE                     _instructions:
  2106                           	callstack 24
  2107   0008DE                     
  2108                           ;dc_motor.c: 254: void instructions(DC_motor *mL, DC_motor *mR, int count);dc_motor.c: 2
      +                          55: {;dc_motor.c: 256:     space(mL,mR);
  2109   0008DE  C024  F01A         	movff	instructions@mL,space@mL
  2110   0008E2  C025  F01B         	movff	instructions@mL+1,space@mL+1
  2111   0008E6  C026  F01C         	movff	instructions@mR,space@mR
  2112   0008EA  C027  F01D         	movff	instructions@mR+1,space@mR+1
  2113   0008EE  ECBF  F009         	call	_space	;wreg free
  2114   0008F2                     
  2115                           ;dc_motor.c: 257:     _delay((unsigned long)((500)*(64000000/4000.0)));
  2116   0008F2  0E29               	movlw	41
  2117   0008F4  6E2B               	movwf	(??_instructions+1)^0,c
  2118   0008F6  0E96               	movlw	150
  2119   0008F8  6E2A               	movwf	??_instructions^0,c
  2120   0008FA  0E7F               	movlw	127
  2121   0008FC                     u2017:
  2122   0008FC  2EE8               	decfsz	wreg,f,c
  2123   0008FE  D7FE               	bra	u2017
  2124   000900  2E2A               	decfsz	??_instructions^0,f,c
  2125   000902  D7FC               	bra	u2017
  2126   000904  2E2B               	decfsz	(??_instructions+1)^0,f,c
  2127   000906  D7FA               	bra	u2017
  2128   000908  F000               	nop	
  2129   00090A                     
  2130                           ;dc_motor.c: 258:     stop(mL,mR);
  2131   00090A  C024  F014         	movff	instructions@mL,stop@mL
  2132   00090E  C025  F015         	movff	instructions@mL+1,stop@mL+1
  2133   000912  C026  F016         	movff	instructions@mR,stop@mR
  2134   000916  C027  F017         	movff	instructions@mR+1,stop@mR+1
  2135   00091A  ECFD  F00A         	call	_stop	;wreg free
  2136                           
  2137                           ;dc_motor.c: 259:     _delay((unsigned long)((500)*(64000000/4000.0)));
  2138   00091E  0E29               	movlw	41
  2139   000920  6E2B               	movwf	(??_instructions+1)^0,c
  2140   000922  0E96               	movlw	150
  2141   000924  6E2A               	movwf	??_instructions^0,c
  2142   000926  0E7F               	movlw	127
  2143   000928                     u2027:
  2144   000928  2EE8               	decfsz	wreg,f,c
  2145   00092A  D7FE               	bra	u2027
  2146   00092C  2E2A               	decfsz	??_instructions^0,f,c
  2147   00092E  D7FC               	bra	u2027
  2148   000930  2E2B               	decfsz	(??_instructions+1)^0,f,c
  2149   000932  D7FA               	bra	u2027
  2150   000934  F000               	nop	
  2151   000936                     
  2152                           ;dc_motor.c: 261:     if (count == 1){right_45(mL,mR,2); stop(mL,mR);}
  2153   000936  0428               	decf	instructions@count^0,w,c
  2154   000938  1029               	iorwf	(instructions@count+1)^0,w,c
  2155   00093A  A4D8               	btfss	status,2,c
  2156   00093C  EFA2  F004         	goto	u1601
  2157   000940  EFA4  F004         	goto	u1600
  2158   000944                     u1601:
  2159   000944  EFBC  F004         	goto	l2442
  2160   000948                     u1600:
  2161   000948  C024  F01A         	movff	instructions@mL,right_45@mL
  2162   00094C  C025  F01B         	movff	instructions@mL+1,right_45@mL+1
  2163   000950  C026  F01C         	movff	instructions@mR,right_45@mR
  2164   000954  C027  F01D         	movff	instructions@mR+1,right_45@mR+1
  2165   000958  0E00               	movlw	0
  2166   00095A  6E1F               	movwf	(right_45@count+1)^0,c
  2167   00095C  0E02               	movlw	2
  2168   00095E  6E1E               	movwf	right_45@count^0,c
  2169   000960  EC11  F008         	call	_right_45	;wreg free
  2170   000964  C024  F014         	movff	instructions@mL,stop@mL
  2171   000968  C025  F015         	movff	instructions@mL+1,stop@mL+1
  2172   00096C  C026  F016         	movff	instructions@mR,stop@mR
  2173   000970  C027  F017         	movff	instructions@mR+1,stop@mR+1
  2174   000974  ECFD  F00A         	call	_stop	;wreg free
  2175   000978                     l2442:
  2176                           
  2177                           ;dc_motor.c: 262:     if (count == 2){left_45(mL,mR,2); stop(mL,mR);}
  2178   000978  0E02               	movlw	2
  2179   00097A  1828               	xorwf	instructions@count^0,w,c
  2180   00097C  1029               	iorwf	(instructions@count+1)^0,w,c
  2181   00097E  A4D8               	btfss	status,2,c
  2182   000980  EFC4  F004         	goto	u1611
  2183   000984  EFC6  F004         	goto	u1610
  2184   000988                     u1611:
  2185   000988  EFDE  F004         	goto	l2446
  2186   00098C                     u1610:
  2187   00098C  C024  F01A         	movff	instructions@mL,left_45@mL
  2188   000990  C025  F01B         	movff	instructions@mL+1,left_45@mL+1
  2189   000994  C026  F01C         	movff	instructions@mR,left_45@mR
  2190   000998  C027  F01D         	movff	instructions@mR+1,left_45@mR+1
  2191   00099C  0E00               	movlw	0
  2192   00099E  6E1F               	movwf	(left_45@count+1)^0,c
  2193   0009A0  0E02               	movlw	2
  2194   0009A2  6E1E               	movwf	left_45@count^0,c
  2195   0009A4  EC71  F007         	call	_left_45	;wreg free
  2196   0009A8  C024  F014         	movff	instructions@mL,stop@mL
  2197   0009AC  C025  F015         	movff	instructions@mL+1,stop@mL+1
  2198   0009B0  C026  F016         	movff	instructions@mR,stop@mR
  2199   0009B4  C027  F017         	movff	instructions@mR+1,stop@mR+1
  2200   0009B8  ECFD  F00A         	call	_stop	;wreg free
  2201   0009BC                     l2446:
  2202                           
  2203                           ;dc_motor.c: 263:     if (count == 3){right_45(mL,mR,4); stop(mL,mR);}
  2204   0009BC  0E03               	movlw	3
  2205   0009BE  1828               	xorwf	instructions@count^0,w,c
  2206   0009C0  1029               	iorwf	(instructions@count+1)^0,w,c
  2207   0009C2  A4D8               	btfss	status,2,c
  2208   0009C4  EFE6  F004         	goto	u1621
  2209   0009C8  EFE8  F004         	goto	u1620
  2210   0009CC                     u1621:
  2211   0009CC  EF00  F005         	goto	l2450
  2212   0009D0                     u1620:
  2213   0009D0  C024  F01A         	movff	instructions@mL,right_45@mL
  2214   0009D4  C025  F01B         	movff	instructions@mL+1,right_45@mL+1
  2215   0009D8  C026  F01C         	movff	instructions@mR,right_45@mR
  2216   0009DC  C027  F01D         	movff	instructions@mR+1,right_45@mR+1
  2217   0009E0  0E00               	movlw	0
  2218   0009E2  6E1F               	movwf	(right_45@count+1)^0,c
  2219   0009E4  0E04               	movlw	4
  2220   0009E6  6E1E               	movwf	right_45@count^0,c
  2221   0009E8  EC11  F008         	call	_right_45	;wreg free
  2222   0009EC  C024  F014         	movff	instructions@mL,stop@mL
  2223   0009F0  C025  F015         	movff	instructions@mL+1,stop@mL+1
  2224   0009F4  C026  F016         	movff	instructions@mR,stop@mR
  2225   0009F8  C027  F017         	movff	instructions@mR+1,stop@mR+1
  2226   0009FC  ECFD  F00A         	call	_stop	;wreg free
  2227   000A00                     l2450:
  2228                           
  2229                           ;dc_motor.c: 264:     if (count == 4){reverse(mL,mR); _delay((unsigned long)((400)*(6400
      +                          0000/4000.0)));stop(mL,mR);_delay((unsigned long)((500)*(64000000/4000.0)));right_45(mL,
      +                          mR,2); stop(mL,mR);}
  2230   000A00  0E04               	movlw	4
  2231   000A02  1828               	xorwf	instructions@count^0,w,c
  2232   000A04  1029               	iorwf	(instructions@count+1)^0,w,c
  2233   000A06  A4D8               	btfss	status,2,c
  2234   000A08  EF08  F005         	goto	u1631
  2235   000A0C  EF0A  F005         	goto	u1630
  2236   000A10                     u1631:
  2237   000A10  EF4E  F005         	goto	l2462
  2238   000A14                     u1630:
  2239   000A14  C024  F01A         	movff	instructions@mL,reverse@mL
  2240   000A18  C025  F01B         	movff	instructions@mL+1,reverse@mL+1
  2241   000A1C  C026  F01C         	movff	instructions@mR,reverse@mR
  2242   000A20  C027  F01D         	movff	instructions@mR+1,reverse@mR+1
  2243   000A24  EC3F  F00A         	call	_reverse	;wreg free
  2244   000A28  0E21               	movlw	33
  2245   000A2A  6E2B               	movwf	(??_instructions+1)^0,c
  2246   000A2C  0E78               	movlw	120
  2247   000A2E  6E2A               	movwf	??_instructions^0,c
  2248   000A30  0E98               	movlw	152
  2249   000A32                     u2037:
  2250   000A32  2EE8               	decfsz	wreg,f,c
  2251   000A34  D7FE               	bra	u2037
  2252   000A36  2E2A               	decfsz	??_instructions^0,f,c
  2253   000A38  D7FC               	bra	u2037
  2254   000A3A  2E2B               	decfsz	(??_instructions+1)^0,f,c
  2255   000A3C  D7FA               	bra	u2037
  2256   000A3E  D000               	nop2	
  2257   000A40  C024  F014         	movff	instructions@mL,stop@mL
  2258   000A44  C025  F015         	movff	instructions@mL+1,stop@mL+1
  2259   000A48  C026  F016         	movff	instructions@mR,stop@mR
  2260   000A4C  C027  F017         	movff	instructions@mR+1,stop@mR+1
  2261   000A50  ECFD  F00A         	call	_stop	;wreg free
  2262   000A54  0E29               	movlw	41
  2263   000A56  6E2B               	movwf	(??_instructions+1)^0,c
  2264   000A58  0E96               	movlw	150
  2265   000A5A  6E2A               	movwf	??_instructions^0,c
  2266   000A5C  0E7F               	movlw	127
  2267   000A5E                     u2047:
  2268   000A5E  2EE8               	decfsz	wreg,f,c
  2269   000A60  D7FE               	bra	u2047
  2270   000A62  2E2A               	decfsz	??_instructions^0,f,c
  2271   000A64  D7FC               	bra	u2047
  2272   000A66  2E2B               	decfsz	(??_instructions+1)^0,f,c
  2273   000A68  D7FA               	bra	u2047
  2274   000A6A  F000               	nop	
  2275   000A6C  C024  F01A         	movff	instructions@mL,right_45@mL
  2276   000A70  C025  F01B         	movff	instructions@mL+1,right_45@mL+1
  2277   000A74  C026  F01C         	movff	instructions@mR,right_45@mR
  2278   000A78  C027  F01D         	movff	instructions@mR+1,right_45@mR+1
  2279   000A7C  0E00               	movlw	0
  2280   000A7E  6E1F               	movwf	(right_45@count+1)^0,c
  2281   000A80  0E02               	movlw	2
  2282   000A82  6E1E               	movwf	right_45@count^0,c
  2283   000A84  EC11  F008         	call	_right_45	;wreg free
  2284   000A88  C024  F014         	movff	instructions@mL,stop@mL
  2285   000A8C  C025  F015         	movff	instructions@mL+1,stop@mL+1
  2286   000A90  C026  F016         	movff	instructions@mR,stop@mR
  2287   000A94  C027  F017         	movff	instructions@mR+1,stop@mR+1
  2288   000A98  ECFD  F00A         	call	_stop	;wreg free
  2289   000A9C                     l2462:
  2290                           
  2291                           ;dc_motor.c: 265:     if (count == 5){reverse(mL,mR); _delay((unsigned long)((400)*(6400
      +                          0000/4000.0)));stop(mL,mR);_delay((unsigned long)((500)*(64000000/4000.0)));left_45(mL,m
      +                          R,2); stop(mL,mR);}
  2292   000A9C  0E05               	movlw	5
  2293   000A9E  1828               	xorwf	instructions@count^0,w,c
  2294   000AA0  1029               	iorwf	(instructions@count+1)^0,w,c
  2295   000AA2  A4D8               	btfss	status,2,c
  2296   000AA4  EF56  F005         	goto	u1641
  2297   000AA8  EF58  F005         	goto	u1640
  2298   000AAC                     u1641:
  2299   000AAC  EF9C  F005         	goto	l2474
  2300   000AB0                     u1640:
  2301   000AB0  C024  F01A         	movff	instructions@mL,reverse@mL
  2302   000AB4  C025  F01B         	movff	instructions@mL+1,reverse@mL+1
  2303   000AB8  C026  F01C         	movff	instructions@mR,reverse@mR
  2304   000ABC  C027  F01D         	movff	instructions@mR+1,reverse@mR+1
  2305   000AC0  EC3F  F00A         	call	_reverse	;wreg free
  2306   000AC4  0E21               	movlw	33
  2307   000AC6  6E2B               	movwf	(??_instructions+1)^0,c
  2308   000AC8  0E78               	movlw	120
  2309   000ACA  6E2A               	movwf	??_instructions^0,c
  2310   000ACC  0E98               	movlw	152
  2311   000ACE                     u2057:
  2312   000ACE  2EE8               	decfsz	wreg,f,c
  2313   000AD0  D7FE               	bra	u2057
  2314   000AD2  2E2A               	decfsz	??_instructions^0,f,c
  2315   000AD4  D7FC               	bra	u2057
  2316   000AD6  2E2B               	decfsz	(??_instructions+1)^0,f,c
  2317   000AD8  D7FA               	bra	u2057
  2318   000ADA  D000               	nop2	
  2319   000ADC  C024  F014         	movff	instructions@mL,stop@mL
  2320   000AE0  C025  F015         	movff	instructions@mL+1,stop@mL+1
  2321   000AE4  C026  F016         	movff	instructions@mR,stop@mR
  2322   000AE8  C027  F017         	movff	instructions@mR+1,stop@mR+1
  2323   000AEC  ECFD  F00A         	call	_stop	;wreg free
  2324   000AF0  0E29               	movlw	41
  2325   000AF2  6E2B               	movwf	(??_instructions+1)^0,c
  2326   000AF4  0E96               	movlw	150
  2327   000AF6  6E2A               	movwf	??_instructions^0,c
  2328   000AF8  0E7F               	movlw	127
  2329   000AFA                     u2067:
  2330   000AFA  2EE8               	decfsz	wreg,f,c
  2331   000AFC  D7FE               	bra	u2067
  2332   000AFE  2E2A               	decfsz	??_instructions^0,f,c
  2333   000B00  D7FC               	bra	u2067
  2334   000B02  2E2B               	decfsz	(??_instructions+1)^0,f,c
  2335   000B04  D7FA               	bra	u2067
  2336   000B06  F000               	nop	
  2337   000B08  C024  F01A         	movff	instructions@mL,left_45@mL
  2338   000B0C  C025  F01B         	movff	instructions@mL+1,left_45@mL+1
  2339   000B10  C026  F01C         	movff	instructions@mR,left_45@mR
  2340   000B14  C027  F01D         	movff	instructions@mR+1,left_45@mR+1
  2341   000B18  0E00               	movlw	0
  2342   000B1A  6E1F               	movwf	(left_45@count+1)^0,c
  2343   000B1C  0E02               	movlw	2
  2344   000B1E  6E1E               	movwf	left_45@count^0,c
  2345   000B20  EC71  F007         	call	_left_45	;wreg free
  2346   000B24  C024  F014         	movff	instructions@mL,stop@mL
  2347   000B28  C025  F015         	movff	instructions@mL+1,stop@mL+1
  2348   000B2C  C026  F016         	movff	instructions@mR,stop@mR
  2349   000B30  C027  F017         	movff	instructions@mR+1,stop@mR+1
  2350   000B34  ECFD  F00A         	call	_stop	;wreg free
  2351   000B38                     l2474:
  2352                           
  2353                           ;dc_motor.c: 266:     if (count == 6){right_45(mL,mR,3); stop(mL,mR);}
  2354   000B38  0E06               	movlw	6
  2355   000B3A  1828               	xorwf	instructions@count^0,w,c
  2356   000B3C  1029               	iorwf	(instructions@count+1)^0,w,c
  2357   000B3E  A4D8               	btfss	status,2,c
  2358   000B40  EFA4  F005         	goto	u1651
  2359   000B44  EFA6  F005         	goto	u1650
  2360   000B48                     u1651:
  2361   000B48  EFBE  F005         	goto	l2478
  2362   000B4C                     u1650:
  2363   000B4C  C024  F01A         	movff	instructions@mL,right_45@mL
  2364   000B50  C025  F01B         	movff	instructions@mL+1,right_45@mL+1
  2365   000B54  C026  F01C         	movff	instructions@mR,right_45@mR
  2366   000B58  C027  F01D         	movff	instructions@mR+1,right_45@mR+1
  2367   000B5C  0E00               	movlw	0
  2368   000B5E  6E1F               	movwf	(right_45@count+1)^0,c
  2369   000B60  0E03               	movlw	3
  2370   000B62  6E1E               	movwf	right_45@count^0,c
  2371   000B64  EC11  F008         	call	_right_45	;wreg free
  2372   000B68  C024  F014         	movff	instructions@mL,stop@mL
  2373   000B6C  C025  F015         	movff	instructions@mL+1,stop@mL+1
  2374   000B70  C026  F016         	movff	instructions@mR,stop@mR
  2375   000B74  C027  F017         	movff	instructions@mR+1,stop@mR+1
  2376   000B78  ECFD  F00A         	call	_stop	;wreg free
  2377   000B7C                     l2478:
  2378                           
  2379                           ;dc_motor.c: 267:     if (count == 7){left_45(mL,mR,3); stop(mL,mR);}
  2380   000B7C  0E07               	movlw	7
  2381   000B7E  1828               	xorwf	instructions@count^0,w,c
  2382   000B80  1029               	iorwf	(instructions@count+1)^0,w,c
  2383   000B82  A4D8               	btfss	status,2,c
  2384   000B84  EFC6  F005         	goto	u1661
  2385   000B88  EFC8  F005         	goto	u1660
  2386   000B8C                     u1661:
  2387   000B8C  EFE0  F005         	goto	l353
  2388   000B90                     u1660:
  2389   000B90  C024  F01A         	movff	instructions@mL,left_45@mL
  2390   000B94  C025  F01B         	movff	instructions@mL+1,left_45@mL+1
  2391   000B98  C026  F01C         	movff	instructions@mR,left_45@mR
  2392   000B9C  C027  F01D         	movff	instructions@mR+1,left_45@mR+1
  2393   000BA0  0E00               	movlw	0
  2394   000BA2  6E1F               	movwf	(left_45@count+1)^0,c
  2395   000BA4  0E03               	movlw	3
  2396   000BA6  6E1E               	movwf	left_45@count^0,c
  2397   000BA8  EC71  F007         	call	_left_45	;wreg free
  2398   000BAC  C024  F014         	movff	instructions@mL,stop@mL
  2399   000BB0  C025  F015         	movff	instructions@mL+1,stop@mL+1
  2400   000BB4  C026  F016         	movff	instructions@mR,stop@mR
  2401   000BB8  C027  F017         	movff	instructions@mR+1,stop@mR+1
  2402   000BBC  ECFD  F00A         	call	_stop	;wreg free
  2403   000BC0                     l353:
  2404   000BC0  0012               	return		;funcret
  2405   000BC2                     __end_of_instructions:
  2406                           	callstack 0
  2407                           
  2408 ;; *************** function _space *****************
  2409 ;; Defined at:
  2410 ;;		line 231 in file "dc_motor.c"
  2411 ;; Parameters:    Size  Location     Type
  2412 ;;  mL              2   25[COMRAM] PTR struct DC_motor
  2413 ;;		 -> motorL(9), 
  2414 ;;  mR              2   27[COMRAM] PTR struct DC_motor
  2415 ;;		 -> motorR(9), 
  2416 ;; Auto vars:     Size  Location     Type
  2417 ;;		None
  2418 ;; Return value:  Size  Location     Type
  2419 ;;                  1    wreg      void 
  2420 ;; Registers used:
  2421 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2422 ;; Tracked objects:
  2423 ;;		On entry : 0/0
  2424 ;;		On exit  : 0/0
  2425 ;;		Unchanged: 0/0
  2426 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2427 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2428 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2429 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2430 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2431 ;;Total ram usage:        6 bytes
  2432 ;; Hardware stack levels used: 1
  2433 ;; Hardware stack levels required when called: 4
  2434 ;; This function calls:
  2435 ;;		_setMotorPWM
  2436 ;;		_stop
  2437 ;; This function is called by:
  2438 ;;		_instructions
  2439 ;; This function uses a non-reentrant model
  2440 ;;
  2441                           
  2442                           	psect	text12
  2443   00137E                     __ptext12:
  2444                           	callstack 0
  2445   00137E                     _space:
  2446                           	callstack 24
  2447   00137E                     
  2448                           ;dc_motor.c: 231: void space(DC_motor *mL, DC_motor *mR);dc_motor.c: 232: {;dc_motor.c: 
      +                          233:     stop(mL,mR);
  2449   00137E  C01A  F014         	movff	space@mL,stop@mL
  2450   001382  C01B  F015         	movff	space@mL+1,stop@mL+1
  2451   001386  C01C  F016         	movff	space@mR,stop@mR
  2452   00138A  C01D  F017         	movff	space@mR+1,stop@mR+1
  2453   00138E  ECFD  F00A         	call	_stop	;wreg free
  2454   001392                     
  2455                           ;dc_motor.c: 234:     LATHbits.LATH1 = 1;
  2456   001392  8280               	bsf	128,1,c	;volatile
  2457   001394                     
  2458                           ;dc_motor.c: 235:     mL-> direction = 0;
  2459   001394  EE20 F001          	lfsr	2,1
  2460   001398  501A               	movf	space@mL^0,w,c
  2461   00139A  26D9               	addwf	fsr2l,f,c
  2462   00139C  501B               	movf	(space@mL+1)^0,w,c
  2463   00139E  22DA               	addwfc	fsr2h,f,c
  2464   0013A0  0E00               	movlw	0
  2465   0013A2  6EDF               	movwf	indf2,c
  2466   0013A4                     
  2467                           ;dc_motor.c: 236:     mR-> direction = 0;
  2468   0013A4  EE20 F001          	lfsr	2,1
  2469   0013A8  501C               	movf	space@mR^0,w,c
  2470   0013AA  26D9               	addwf	fsr2l,f,c
  2471   0013AC  501D               	movf	(space@mR+1)^0,w,c
  2472   0013AE  22DA               	addwfc	fsr2h,f,c
  2473   0013B0  0E00               	movlw	0
  2474   0013B2  6EDF               	movwf	indf2,c
  2475                           
  2476                           ;dc_motor.c: 237:     setMotorPWM(mR);
  2477   0013B4  C01C  F00E         	movff	space@mR,setMotorPWM@m
  2478   0013B8  C01D  F00F         	movff	space@mR+1,setMotorPWM@m+1
  2479   0013BC  ECBB  F006         	call	_setMotorPWM	;wreg free
  2480                           
  2481                           ;dc_motor.c: 238:     setMotorPWM(mL);
  2482   0013C0  C01A  F00E         	movff	space@mL,setMotorPWM@m
  2483   0013C4  C01B  F00F         	movff	space@mL+1,setMotorPWM@m+1
  2484   0013C8  ECBB  F006         	call	_setMotorPWM	;wreg free
  2485                           
  2486                           ;dc_motor.c: 239:     while ((mL->power <40) && (mR->power <40)){
  2487   0013CC  EF04  F00A         	goto	l2216
  2488   0013D0                     l2208:
  2489                           
  2490                           ;dc_motor.c: 240:         mL->power += 10;
  2491   0013D0  C01A  FFD9         	movff	space@mL,fsr2l
  2492   0013D4  C01B  FFDA         	movff	space@mL+1,fsr2h
  2493   0013D8  0E0A               	movlw	10
  2494   0013DA  26DF               	addwf	indf2,f,c
  2495                           
  2496                           ;dc_motor.c: 241:         mR->power += 10;
  2497   0013DC  C01C  FFD9         	movff	space@mR,fsr2l
  2498   0013E0  C01D  FFDA         	movff	space@mR+1,fsr2h
  2499   0013E4  0E0A               	movlw	10
  2500   0013E6  26DF               	addwf	indf2,f,c
  2501   0013E8                     
  2502                           ;dc_motor.c: 242:         setMotorPWM(mL);
  2503   0013E8  C01A  F00E         	movff	space@mL,setMotorPWM@m
  2504   0013EC  C01B  F00F         	movff	space@mL+1,setMotorPWM@m+1
  2505   0013F0  ECBB  F006         	call	_setMotorPWM	;wreg free
  2506   0013F4                     
  2507                           ;dc_motor.c: 243:         setMotorPWM(mR);
  2508   0013F4  C01C  F00E         	movff	space@mR,setMotorPWM@m
  2509   0013F8  C01D  F00F         	movff	space@mR+1,setMotorPWM@m+1
  2510   0013FC  ECBB  F006         	call	_setMotorPWM	;wreg free
  2511   001400                     
  2512                           ;dc_motor.c: 244:         _delay((unsigned long)((20)*(64000000/4000000.0)));
  2513   001400  0E6A               	movlw	106
  2514   001402                     u2077:
  2515   001402  2EE8               	decfsz	wreg,f,c
  2516   001404  D7FE               	bra	u2077
  2517   001406  D000               	nop2	
  2518   001408                     l2216:
  2519                           
  2520                           ;dc_motor.c: 239:     while ((mL->power <40) && (mR->power <40)){
  2521   001408  C01A  FFD9         	movff	space@mL,fsr2l
  2522   00140C  C01B  FFDA         	movff	space@mL+1,fsr2h
  2523   001410  0E28               	movlw	40
  2524   001412  60DF               	cpfslt	indf2,c
  2525   001414  EF0E  F00A         	goto	u1251
  2526   001418  EF10  F00A         	goto	u1250
  2527   00141C                     u1251:
  2528   00141C  EF1C  F00A         	goto	l2220
  2529   001420                     u1250:
  2530   001420  C01C  FFD9         	movff	space@mR,fsr2l
  2531   001424  C01D  FFDA         	movff	space@mR+1,fsr2h
  2532   001428  0E27               	movlw	39
  2533   00142A  64DF               	cpfsgt	indf2,c
  2534   00142C  EF1A  F00A         	goto	u1261
  2535   001430  EF1C  F00A         	goto	u1260
  2536   001434                     u1261:
  2537   001434  EFE8  F009         	goto	l2208
  2538   001438                     u1260:
  2539   001438                     l2220:
  2540                           
  2541                           ;dc_motor.c: 246:     _delay((unsigned long)((300)*(64000000/4000.0)));
  2542   001438  0E19               	movlw	25
  2543   00143A  6E1F               	movwf	(??_space+1)^0,c
  2544   00143C  0E5A               	movlw	90
  2545   00143E  6E1E               	movwf	??_space^0,c
  2546   001440  0EB2               	movlw	178
  2547   001442                     u2087:
  2548   001442  2EE8               	decfsz	wreg,f,c
  2549   001444  D7FE               	bra	u2087
  2550   001446  2E1E               	decfsz	??_space^0,f,c
  2551   001448  D7FC               	bra	u2087
  2552   00144A  2E1F               	decfsz	(??_space+1)^0,f,c
  2553   00144C  D7FA               	bra	u2087
  2554   00144E                     
  2555                           ;dc_motor.c: 247:     stop(mL,mR);
  2556   00144E  C01A  F014         	movff	space@mL,stop@mL
  2557   001452  C01B  F015         	movff	space@mL+1,stop@mL+1
  2558   001456  C01C  F016         	movff	space@mR,stop@mR
  2559   00145A  C01D  F017         	movff	space@mR+1,stop@mR+1
  2560   00145E  ECFD  F00A         	call	_stop	;wreg free
  2561   001462                     
  2562                           ;dc_motor.c: 248:     _delay((unsigned long)((200)*(64000000/4000.0)));
  2563   001462  0E11               	movlw	17
  2564   001464  6E1F               	movwf	(??_space+1)^0,c
  2565   001466  0E3C               	movlw	60
  2566   001468  6E1E               	movwf	??_space^0,c
  2567   00146A  0ECB               	movlw	203
  2568   00146C                     u2097:
  2569   00146C  2EE8               	decfsz	wreg,f,c
  2570   00146E  D7FE               	bra	u2097
  2571   001470  2E1E               	decfsz	??_space^0,f,c
  2572   001472  D7FC               	bra	u2097
  2573   001474  2E1F               	decfsz	(??_space+1)^0,f,c
  2574   001476  D7FA               	bra	u2097
  2575   001478  F000               	nop	
  2576   00147A                     
  2577                           ;dc_motor.c: 249:     LATHbits.LATH1 = 0;
  2578   00147A  9280               	bcf	128,1,c	;volatile
  2579   00147C  0012               	return		;funcret
  2580   00147E                     __end_of_space:
  2581                           	callstack 0
  2582                           
  2583 ;; *************** function _right_45 *****************
  2584 ;; Defined at:
  2585 ;;		line 210 in file "dc_motor.c"
  2586 ;; Parameters:    Size  Location     Type
  2587 ;;  mL              2   25[COMRAM] PTR struct DC_motor
  2588 ;;		 -> motorL(9), 
  2589 ;;  mR              2   27[COMRAM] PTR struct DC_motor
  2590 ;;		 -> motorR(9), 
  2591 ;;  count           2   29[COMRAM] int 
  2592 ;; Auto vars:     Size  Location     Type
  2593 ;;  i               2   33[COMRAM] int 
  2594 ;; Return value:  Size  Location     Type
  2595 ;;                  1    wreg      void 
  2596 ;; Registers used:
  2597 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2598 ;; Tracked objects:
  2599 ;;		On entry : 0/0
  2600 ;;		On exit  : 0/0
  2601 ;;		Unchanged: 0/0
  2602 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2603 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2604 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2605 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2606 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2607 ;;Total ram usage:       10 bytes
  2608 ;; Hardware stack levels used: 1
  2609 ;; Hardware stack levels required when called: 4
  2610 ;; This function calls:
  2611 ;;		_setMotorPWM
  2612 ;;		_stop
  2613 ;; This function is called by:
  2614 ;;		_instructions
  2615 ;; This function uses a non-reentrant model
  2616 ;;
  2617                           
  2618                           	psect	text13
  2619   001022                     __ptext13:
  2620                           	callstack 0
  2621   001022                     _right_45:
  2622                           	callstack 24
  2623   001022                     
  2624                           ;dc_motor.c: 210: void right_45(DC_motor *mL, DC_motor *mR, int count);dc_motor.c: 211: 
      +                          {;dc_motor.c: 212:     mL-> direction = 1;
  2625   001022  EE20 F001          	lfsr	2,1
  2626   001026  501A               	movf	right_45@mL^0,w,c
  2627   001028  26D9               	addwf	fsr2l,f,c
  2628   00102A  501B               	movf	(right_45@mL+1)^0,w,c
  2629   00102C  22DA               	addwfc	fsr2h,f,c
  2630   00102E  0E01               	movlw	1
  2631   001030  6EDF               	movwf	indf2,c
  2632                           
  2633                           ;dc_motor.c: 213:     mR-> direction = 0;
  2634   001032  EE20 F001          	lfsr	2,1
  2635   001036  501C               	movf	right_45@mR^0,w,c
  2636   001038  26D9               	addwf	fsr2l,f,c
  2637   00103A  501D               	movf	(right_45@mR+1)^0,w,c
  2638   00103C  22DA               	addwfc	fsr2h,f,c
  2639   00103E  0E00               	movlw	0
  2640   001040  6EDF               	movwf	indf2,c
  2641   001042                     
  2642                           ;dc_motor.c: 214:     LATHbits.LATH0 = 1;
  2643   001042  8080               	bsf	128,0,c	;volatile
  2644   001044                     
  2645                           ;dc_motor.c: 215:     int i;;dc_motor.c: 216:     for (i = 0;i<count;i++){
  2646   001044  0E00               	movlw	0
  2647   001046  6E23               	movwf	(right_45@i+1)^0,c
  2648   001048  0E00               	movlw	0
  2649   00104A  6E22               	movwf	right_45@i^0,c
  2650   00104C  EF98  F008         	goto	l2198
  2651   001050                     l2170:
  2652                           
  2653                           ;dc_motor.c: 218:         if (mL->power <= 30){mL->power += 10;}
  2654   001050  C01A  FFD9         	movff	right_45@mL,fsr2l
  2655   001054  C01B  FFDA         	movff	right_45@mL+1,fsr2h
  2656   001058  0E1F               	movlw	31
  2657   00105A  60DF               	cpfslt	indf2,c
  2658   00105C  EF32  F008         	goto	u1201
  2659   001060  EF34  F008         	goto	u1200
  2660   001064                     u1201:
  2661   001064  EF3A  F008         	goto	l2174
  2662   001068                     u1200:
  2663   001068  C01A  FFD9         	movff	right_45@mL,fsr2l
  2664   00106C  C01B  FFDA         	movff	right_45@mL+1,fsr2h
  2665   001070  0E0A               	movlw	10
  2666   001072  26DF               	addwf	indf2,f,c
  2667   001074                     l2174:
  2668                           
  2669                           ;dc_motor.c: 219:         if (mR->power <= 30){mR->power += 10;}
  2670   001074  C01C  FFD9         	movff	right_45@mR,fsr2l
  2671   001078  C01D  FFDA         	movff	right_45@mR+1,fsr2h
  2672   00107C  0E1F               	movlw	31
  2673   00107E  60DF               	cpfslt	indf2,c
  2674   001080  EF44  F008         	goto	u1211
  2675   001084  EF46  F008         	goto	u1210
  2676   001088                     u1211:
  2677   001088  EF4C  F008         	goto	l2178
  2678   00108C                     u1210:
  2679   00108C  C01C  FFD9         	movff	right_45@mR,fsr2l
  2680   001090  C01D  FFDA         	movff	right_45@mR+1,fsr2h
  2681   001094  0E0A               	movlw	10
  2682   001096  26DF               	addwf	indf2,f,c
  2683   001098                     l2178:
  2684                           
  2685                           ;dc_motor.c: 220:         setMotorPWM(mL);
  2686   001098  C01A  F00E         	movff	right_45@mL,setMotorPWM@m
  2687   00109C  C01B  F00F         	movff	right_45@mL+1,setMotorPWM@m+1
  2688   0010A0  ECBB  F006         	call	_setMotorPWM	;wreg free
  2689   0010A4                     
  2690                           ;dc_motor.c: 221:         setMotorPWM(mR);
  2691   0010A4  C01C  F00E         	movff	right_45@mR,setMotorPWM@m
  2692   0010A8  C01D  F00F         	movff	right_45@mR+1,setMotorPWM@m+1
  2693   0010AC  ECBB  F006         	call	_setMotorPWM	;wreg free
  2694   0010B0                     
  2695                           ;dc_motor.c: 222:         _delay((unsigned long)((50)*(64000000/4000000.0)));
  2696   0010B0  0EA0               	movlw	160
  2697   0010B2                     u2107:
  2698   0010B2  D000               	nop2	
  2699   0010B4  2EE8               	decfsz	wreg,f,c
  2700   0010B6  D7FD               	bra	u2107
  2701   0010B8                     l2184:
  2702                           
  2703                           ;dc_motor.c: 217:     while ((mL->power <= 30) || (mR->power <= 30)){
  2704   0010B8  C01A  FFD9         	movff	right_45@mL,fsr2l
  2705   0010BC  C01B  FFDA         	movff	right_45@mL+1,fsr2h
  2706   0010C0  0E1E               	movlw	30
  2707   0010C2  64DF               	cpfsgt	indf2,c
  2708   0010C4  EF66  F008         	goto	u1221
  2709   0010C8  EF68  F008         	goto	u1220
  2710   0010CC                     u1221:
  2711   0010CC  EF28  F008         	goto	l2170
  2712   0010D0                     u1220:
  2713   0010D0  C01C  FFD9         	movff	right_45@mR,fsr2l
  2714   0010D4  C01D  FFDA         	movff	right_45@mR+1,fsr2h
  2715   0010D8  0E1E               	movlw	30
  2716   0010DA  64DF               	cpfsgt	indf2,c
  2717   0010DC  EF72  F008         	goto	u1231
  2718   0010E0  EF74  F008         	goto	u1230
  2719   0010E4                     u1231:
  2720   0010E4  EF28  F008         	goto	l2170
  2721   0010E8                     u1230:
  2722   0010E8                     
  2723                           ;dc_motor.c: 224:     _delay((unsigned long)((250)*(64000000/4000.0)));
  2724   0010E8  0E15               	movlw	21
  2725   0010EA  6E21               	movwf	(??_right_45+1)^0,c
  2726   0010EC  0E4B               	movlw	75
  2727   0010EE  6E20               	movwf	??_right_45^0,c
  2728   0010F0  0EBE               	movlw	190
  2729   0010F2                     u2117:
  2730   0010F2  2EE8               	decfsz	wreg,f,c
  2731   0010F4  D7FE               	bra	u2117
  2732   0010F6  2E20               	decfsz	??_right_45^0,f,c
  2733   0010F8  D7FC               	bra	u2117
  2734   0010FA  2E21               	decfsz	(??_right_45+1)^0,f,c
  2735   0010FC  D7FA               	bra	u2117
  2736   0010FE  D000               	nop2	
  2737   001100                     
  2738                           ;dc_motor.c: 225:     stop(mL,mR);
  2739   001100  C01A  F014         	movff	right_45@mL,stop@mL
  2740   001104  C01B  F015         	movff	right_45@mL+1,stop@mL+1
  2741   001108  C01C  F016         	movff	right_45@mR,stop@mR
  2742   00110C  C01D  F017         	movff	right_45@mR+1,stop@mR+1
  2743   001110  ECFD  F00A         	call	_stop	;wreg free
  2744   001114                     
  2745                           ;dc_motor.c: 226:     _delay((unsigned long)((150)*(64000000/4000.0)));
  2746   001114  0E0D               	movlw	13
  2747   001116  6E21               	movwf	(??_right_45+1)^0,c
  2748   001118  0E2D               	movlw	45
  2749   00111A  6E20               	movwf	??_right_45^0,c
  2750   00111C  0ED8               	movlw	216
  2751   00111E                     u2127:
  2752   00111E  2EE8               	decfsz	wreg,f,c
  2753   001120  D7FE               	bra	u2127
  2754   001122  2E20               	decfsz	??_right_45^0,f,c
  2755   001124  D7FC               	bra	u2127
  2756   001126  2E21               	decfsz	(??_right_45+1)^0,f,c
  2757   001128  D7FA               	bra	u2127
  2758   00112A                     
  2759                           ;dc_motor.c: 227:     LATHbits.LATH0 = 0;
  2760   00112A  9080               	bcf	128,0,c	;volatile
  2761   00112C                     
  2762                           ;dc_motor.c: 228: }
  2763   00112C  4A22               	infsnz	right_45@i^0,f,c
  2764   00112E  2A23               	incf	(right_45@i+1)^0,f,c
  2765   001130                     l2198:
  2766   001130  501E               	movf	right_45@count^0,w,c
  2767   001132  5C22               	subwf	right_45@i^0,w,c
  2768   001134  5023               	movf	(right_45@i+1)^0,w,c
  2769   001136  0A80               	xorlw	128
  2770   001138  6E20               	movwf	??_right_45^0,c
  2771   00113A  501F               	movf	(right_45@count+1)^0,w,c
  2772   00113C  0A80               	xorlw	128
  2773   00113E  5820               	subwfb	??_right_45^0,w,c
  2774   001140  A0D8               	btfss	status,0,c
  2775   001142  EFA5  F008         	goto	u1241
  2776   001146  EFA7  F008         	goto	u1240
  2777   00114A                     u1241:
  2778   00114A  EF5C  F008         	goto	l2184
  2779   00114E                     u1240:
  2780   00114E  0012               	return		;funcret
  2781   001150                     __end_of_right_45:
  2782                           	callstack 0
  2783                           
  2784 ;; *************** function _reverse *****************
  2785 ;; Defined at:
  2786 ;;		line 146 in file "dc_motor.c"
  2787 ;; Parameters:    Size  Location     Type
  2788 ;;  mL              2   25[COMRAM] PTR struct DC_motor
  2789 ;;		 -> motorL(9), 
  2790 ;;  mR              2   27[COMRAM] PTR struct DC_motor
  2791 ;;		 -> motorR(9), 
  2792 ;; Auto vars:     Size  Location     Type
  2793 ;;		None
  2794 ;; Return value:  Size  Location     Type
  2795 ;;                  1    wreg      void 
  2796 ;; Registers used:
  2797 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2798 ;; Tracked objects:
  2799 ;;		On entry : 0/0
  2800 ;;		On exit  : 0/0
  2801 ;;		Unchanged: 0/0
  2802 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2803 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2804 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2805 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2806 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2807 ;;Total ram usage:        5 bytes
  2808 ;; Hardware stack levels used: 1
  2809 ;; Hardware stack levels required when called: 4
  2810 ;; This function calls:
  2811 ;;		_setMotorPWM
  2812 ;;		_stop
  2813 ;; This function is called by:
  2814 ;;		_instructions
  2815 ;; This function uses a non-reentrant model
  2816 ;;
  2817                           
  2818                           	psect	text14
  2819   00147E                     __ptext14:
  2820                           	callstack 0
  2821   00147E                     _reverse:
  2822                           	callstack 24
  2823   00147E                     
  2824                           ;dc_motor.c: 146: void reverse(DC_motor *mL, DC_motor *mR);dc_motor.c: 147: {;dc_motor.c
      +                          : 148:     stop(mL,mR);
  2825   00147E  C01A  F014         	movff	reverse@mL,stop@mL
  2826   001482  C01B  F015         	movff	reverse@mL+1,stop@mL+1
  2827   001486  C01C  F016         	movff	reverse@mR,stop@mR
  2828   00148A  C01D  F017         	movff	reverse@mR+1,stop@mR+1
  2829   00148E  ECFD  F00A         	call	_stop	;wreg free
  2830   001492                     
  2831                           ;dc_motor.c: 149:     mL-> direction = 0;
  2832   001492  EE20 F001          	lfsr	2,1
  2833   001496  501A               	movf	reverse@mL^0,w,c
  2834   001498  26D9               	addwf	fsr2l,f,c
  2835   00149A  501B               	movf	(reverse@mL+1)^0,w,c
  2836   00149C  22DA               	addwfc	fsr2h,f,c
  2837   00149E  0E00               	movlw	0
  2838   0014A0  6EDF               	movwf	indf2,c
  2839   0014A2                     
  2840                           ;dc_motor.c: 150:     mR-> direction = 0;
  2841   0014A2  EE20 F001          	lfsr	2,1
  2842   0014A6  501C               	movf	reverse@mR^0,w,c
  2843   0014A8  26D9               	addwf	fsr2l,f,c
  2844   0014AA  501D               	movf	(reverse@mR+1)^0,w,c
  2845   0014AC  22DA               	addwfc	fsr2h,f,c
  2846   0014AE  0E00               	movlw	0
  2847   0014B0  6EDF               	movwf	indf2,c
  2848   0014B2                     
  2849                           ;dc_motor.c: 151:     LATHbits.LATH1 = 1;
  2850   0014B2  8280               	bsf	128,1,c	;volatile
  2851                           
  2852                           ;dc_motor.c: 152:     setMotorPWM(mR);
  2853   0014B4  C01C  F00E         	movff	reverse@mR,setMotorPWM@m
  2854   0014B8  C01D  F00F         	movff	reverse@mR+1,setMotorPWM@m+1
  2855   0014BC  ECBB  F006         	call	_setMotorPWM	;wreg free
  2856                           
  2857                           ;dc_motor.c: 153:     setMotorPWM(mL);
  2858   0014C0  C01A  F00E         	movff	reverse@mL,setMotorPWM@m
  2859   0014C4  C01B  F00F         	movff	reverse@mL+1,setMotorPWM@m+1
  2860   0014C8  ECBB  F006         	call	_setMotorPWM	;wreg free
  2861                           
  2862                           ;dc_motor.c: 154:     while ((mL->power <40) && (mR->power <40)){
  2863   0014CC  EF84  F00A         	goto	l2120
  2864   0014D0                     l2112:
  2865                           
  2866                           ;dc_motor.c: 155:         mL->power += 10;
  2867   0014D0  C01A  FFD9         	movff	reverse@mL,fsr2l
  2868   0014D4  C01B  FFDA         	movff	reverse@mL+1,fsr2h
  2869   0014D8  0E0A               	movlw	10
  2870   0014DA  26DF               	addwf	indf2,f,c
  2871                           
  2872                           ;dc_motor.c: 156:         mR->power += 10;
  2873   0014DC  C01C  FFD9         	movff	reverse@mR,fsr2l
  2874   0014E0  C01D  FFDA         	movff	reverse@mR+1,fsr2h
  2875   0014E4  0E0A               	movlw	10
  2876   0014E6  26DF               	addwf	indf2,f,c
  2877   0014E8                     
  2878                           ;dc_motor.c: 157:         setMotorPWM(mL);
  2879   0014E8  C01A  F00E         	movff	reverse@mL,setMotorPWM@m
  2880   0014EC  C01B  F00F         	movff	reverse@mL+1,setMotorPWM@m+1
  2881   0014F0  ECBB  F006         	call	_setMotorPWM	;wreg free
  2882   0014F4                     
  2883                           ;dc_motor.c: 158:         setMotorPWM(mR);
  2884   0014F4  C01C  F00E         	movff	reverse@mR,setMotorPWM@m
  2885   0014F8  C01D  F00F         	movff	reverse@mR+1,setMotorPWM@m+1
  2886   0014FC  ECBB  F006         	call	_setMotorPWM	;wreg free
  2887   001500                     
  2888                           ;dc_motor.c: 159:         _delay((unsigned long)((20)*(64000000/4000000.0)));
  2889   001500  0E6A               	movlw	106
  2890   001502                     u2137:
  2891   001502  2EE8               	decfsz	wreg,f,c
  2892   001504  D7FE               	bra	u2137
  2893   001506  D000               	nop2	
  2894   001508                     l2120:
  2895                           
  2896                           ;dc_motor.c: 154:     while ((mL->power <40) && (mR->power <40)){
  2897   001508  C01A  FFD9         	movff	reverse@mL,fsr2l
  2898   00150C  C01B  FFDA         	movff	reverse@mL+1,fsr2h
  2899   001510  0E28               	movlw	40
  2900   001512  60DF               	cpfslt	indf2,c
  2901   001514  EF8E  F00A         	goto	u1131
  2902   001518  EF90  F00A         	goto	u1130
  2903   00151C                     u1131:
  2904   00151C  EF9C  F00A         	goto	l307
  2905   001520                     u1130:
  2906   001520  C01C  FFD9         	movff	reverse@mR,fsr2l
  2907   001524  C01D  FFDA         	movff	reverse@mR+1,fsr2h
  2908   001528  0E27               	movlw	39
  2909   00152A  64DF               	cpfsgt	indf2,c
  2910   00152C  EF9A  F00A         	goto	u1141
  2911   001530  EF9C  F00A         	goto	u1140
  2912   001534                     u1141:
  2913   001534  EF68  F00A         	goto	l2112
  2914   001538                     u1140:
  2915   001538                     l307:
  2916                           
  2917                           ;dc_motor.c: 161:     LATHbits.LATH1 = 0;
  2918   001538  9280               	bcf	128,1,c	;volatile
  2919   00153A  0012               	return		;funcret
  2920   00153C                     __end_of_reverse:
  2921                           	callstack 0
  2922                           
  2923 ;; *************** function _left_45 *****************
  2924 ;; Defined at:
  2925 ;;		line 187 in file "dc_motor.c"
  2926 ;; Parameters:    Size  Location     Type
  2927 ;;  mL              2   25[COMRAM] PTR struct DC_motor
  2928 ;;		 -> motorL(9), 
  2929 ;;  mR              2   27[COMRAM] PTR struct DC_motor
  2930 ;;		 -> motorR(9), 
  2931 ;;  count           2   29[COMRAM] int 
  2932 ;; Auto vars:     Size  Location     Type
  2933 ;;  i               2   33[COMRAM] int 
  2934 ;; Return value:  Size  Location     Type
  2935 ;;                  1    wreg      void 
  2936 ;; Registers used:
  2937 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2938 ;; Tracked objects:
  2939 ;;		On entry : 0/0
  2940 ;;		On exit  : 0/0
  2941 ;;		Unchanged: 0/0
  2942 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2943 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2944 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2945 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2946 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2947 ;;Total ram usage:       10 bytes
  2948 ;; Hardware stack levels used: 1
  2949 ;; Hardware stack levels required when called: 4
  2950 ;; This function calls:
  2951 ;;		_setMotorPWM
  2952 ;;		_stop
  2953 ;; This function is called by:
  2954 ;;		_instructions
  2955 ;; This function uses a non-reentrant model
  2956 ;;
  2957                           
  2958                           	psect	text15
  2959   000EE2                     __ptext15:
  2960                           	callstack 0
  2961   000EE2                     _left_45:
  2962                           	callstack 24
  2963   000EE2                     
  2964                           ;dc_motor.c: 187: void left_45(DC_motor *mL, DC_motor *mR, int count);dc_motor.c: 188: {
      +                          ;dc_motor.c: 189:     stop(mL,mR);
  2965   000EE2  C01A  F014         	movff	left_45@mL,stop@mL
  2966   000EE6  C01B  F015         	movff	left_45@mL+1,stop@mL+1
  2967   000EEA  C01C  F016         	movff	left_45@mR,stop@mR
  2968   000EEE  C01D  F017         	movff	left_45@mR+1,stop@mR+1
  2969   000EF2  ECFD  F00A         	call	_stop	;wreg free
  2970   000EF6                     
  2971                           ;dc_motor.c: 190:     mL-> direction = 0;
  2972   000EF6  EE20 F001          	lfsr	2,1
  2973   000EFA  501A               	movf	left_45@mL^0,w,c
  2974   000EFC  26D9               	addwf	fsr2l,f,c
  2975   000EFE  501B               	movf	(left_45@mL+1)^0,w,c
  2976   000F00  22DA               	addwfc	fsr2h,f,c
  2977   000F02  0E00               	movlw	0
  2978   000F04  6EDF               	movwf	indf2,c
  2979   000F06                     
  2980                           ;dc_motor.c: 191:     mR-> direction = 1;
  2981   000F06  EE20 F001          	lfsr	2,1
  2982   000F0A  501C               	movf	left_45@mR^0,w,c
  2983   000F0C  26D9               	addwf	fsr2l,f,c
  2984   000F0E  501D               	movf	(left_45@mR+1)^0,w,c
  2985   000F10  22DA               	addwfc	fsr2h,f,c
  2986   000F12  0E01               	movlw	1
  2987   000F14  6EDF               	movwf	indf2,c
  2988   000F16                     
  2989                           ;dc_motor.c: 192:     LATFbits.LATF0 = 1;
  2990   000F16  807E               	bsf	126,0,c	;volatile
  2991   000F18                     
  2992                           ;dc_motor.c: 193:     int i;;dc_motor.c: 194:     for (i = 0;i<count;i++){
  2993   000F18  0E00               	movlw	0
  2994   000F1A  6E23               	movwf	(left_45@i+1)^0,c
  2995   000F1C  0E00               	movlw	0
  2996   000F1E  6E22               	movwf	left_45@i^0,c
  2997   000F20  EF01  F008         	goto	l2162
  2998   000F24                     l2134:
  2999                           
  3000                           ;dc_motor.c: 196:         if (mL->power <= 30){mL->power += 10;}
  3001   000F24  C01A  FFD9         	movff	left_45@mL,fsr2l
  3002   000F28  C01B  FFDA         	movff	left_45@mL+1,fsr2h
  3003   000F2C  0E1F               	movlw	31
  3004   000F2E  60DF               	cpfslt	indf2,c
  3005   000F30  EF9C  F007         	goto	u1151
  3006   000F34  EF9E  F007         	goto	u1150
  3007   000F38                     u1151:
  3008   000F38  EFA4  F007         	goto	l2138
  3009   000F3C                     u1150:
  3010   000F3C  C01A  FFD9         	movff	left_45@mL,fsr2l
  3011   000F40  C01B  FFDA         	movff	left_45@mL+1,fsr2h
  3012   000F44  0E0A               	movlw	10
  3013   000F46  26DF               	addwf	indf2,f,c
  3014   000F48                     l2138:
  3015                           
  3016                           ;dc_motor.c: 197:         if (mR->power <= 30){mR->power += 10;}
  3017   000F48  C01C  FFD9         	movff	left_45@mR,fsr2l
  3018   000F4C  C01D  FFDA         	movff	left_45@mR+1,fsr2h
  3019   000F50  0E1F               	movlw	31
  3020   000F52  60DF               	cpfslt	indf2,c
  3021   000F54  EFAE  F007         	goto	u1161
  3022   000F58  EFB0  F007         	goto	u1160
  3023   000F5C                     u1161:
  3024   000F5C  EFB6  F007         	goto	l2142
  3025   000F60                     u1160:
  3026   000F60  C01C  FFD9         	movff	left_45@mR,fsr2l
  3027   000F64  C01D  FFDA         	movff	left_45@mR+1,fsr2h
  3028   000F68  0E0A               	movlw	10
  3029   000F6A  26DF               	addwf	indf2,f,c
  3030   000F6C                     l2142:
  3031                           
  3032                           ;dc_motor.c: 198:         setMotorPWM(mL);
  3033   000F6C  C01A  F00E         	movff	left_45@mL,setMotorPWM@m
  3034   000F70  C01B  F00F         	movff	left_45@mL+1,setMotorPWM@m+1
  3035   000F74  ECBB  F006         	call	_setMotorPWM	;wreg free
  3036   000F78                     
  3037                           ;dc_motor.c: 199:         setMotorPWM(mR);
  3038   000F78  C01C  F00E         	movff	left_45@mR,setMotorPWM@m
  3039   000F7C  C01D  F00F         	movff	left_45@mR+1,setMotorPWM@m+1
  3040   000F80  ECBB  F006         	call	_setMotorPWM	;wreg free
  3041   000F84                     
  3042                           ;dc_motor.c: 200:         _delay((unsigned long)((20)*(64000000/4000000.0)));
  3043   000F84  0E6A               	movlw	106
  3044   000F86                     u2147:
  3045   000F86  2EE8               	decfsz	wreg,f,c
  3046   000F88  D7FE               	bra	u2147
  3047   000F8A  D000               	nop2	
  3048   000F8C                     l2148:
  3049                           
  3050                           ;dc_motor.c: 195:     while ((mL->power <= 30) || (mR->power <= 30)){
  3051   000F8C  C01A  FFD9         	movff	left_45@mL,fsr2l
  3052   000F90  C01B  FFDA         	movff	left_45@mL+1,fsr2h
  3053   000F94  0E1E               	movlw	30
  3054   000F96  64DF               	cpfsgt	indf2,c
  3055   000F98  EFD0  F007         	goto	u1171
  3056   000F9C  EFD2  F007         	goto	u1170
  3057   000FA0                     u1171:
  3058   000FA0  EF92  F007         	goto	l2134
  3059   000FA4                     u1170:
  3060   000FA4  C01C  FFD9         	movff	left_45@mR,fsr2l
  3061   000FA8  C01D  FFDA         	movff	left_45@mR+1,fsr2h
  3062   000FAC  0E1E               	movlw	30
  3063   000FAE  64DF               	cpfsgt	indf2,c
  3064   000FB0  EFDC  F007         	goto	u1181
  3065   000FB4  EFDE  F007         	goto	u1180
  3066   000FB8                     u1181:
  3067   000FB8  EF92  F007         	goto	l2134
  3068   000FBC                     u1180:
  3069   000FBC                     
  3070                           ;dc_motor.c: 202:     _delay((unsigned long)((230)*(64000000/4000.0)));
  3071   000FBC  0E13               	movlw	19
  3072   000FBE  6E21               	movwf	(??_left_45+1)^0,c
  3073   000FC0  0EAC               	movlw	172
  3074   000FC2  6E20               	movwf	??_left_45^0,c
  3075   000FC4  0E2A               	movlw	42
  3076   000FC6                     u2157:
  3077   000FC6  2EE8               	decfsz	wreg,f,c
  3078   000FC8  D7FE               	bra	u2157
  3079   000FCA  2E20               	decfsz	??_left_45^0,f,c
  3080   000FCC  D7FC               	bra	u2157
  3081   000FCE  2E21               	decfsz	(??_left_45+1)^0,f,c
  3082   000FD0  D7FA               	bra	u2157
  3083   000FD2                     
  3084                           ;dc_motor.c: 203:     stop(mL,mR);
  3085   000FD2  C01A  F014         	movff	left_45@mL,stop@mL
  3086   000FD6  C01B  F015         	movff	left_45@mL+1,stop@mL+1
  3087   000FDA  C01C  F016         	movff	left_45@mR,stop@mR
  3088   000FDE  C01D  F017         	movff	left_45@mR+1,stop@mR+1
  3089   000FE2  ECFD  F00A         	call	_stop	;wreg free
  3090   000FE6                     
  3091                           ;dc_motor.c: 204:     _delay((unsigned long)((150)*(64000000/4000.0)));
  3092   000FE6  0E0D               	movlw	13
  3093   000FE8  6E21               	movwf	(??_left_45+1)^0,c
  3094   000FEA  0E2D               	movlw	45
  3095   000FEC  6E20               	movwf	??_left_45^0,c
  3096   000FEE  0ED8               	movlw	216
  3097   000FF0                     u2167:
  3098   000FF0  2EE8               	decfsz	wreg,f,c
  3099   000FF2  D7FE               	bra	u2167
  3100   000FF4  2E20               	decfsz	??_left_45^0,f,c
  3101   000FF6  D7FC               	bra	u2167
  3102   000FF8  2E21               	decfsz	(??_left_45+1)^0,f,c
  3103   000FFA  D7FA               	bra	u2167
  3104   000FFC                     
  3105                           ;dc_motor.c: 205:     LATFbits.LATF0 = 0;
  3106   000FFC  907E               	bcf	126,0,c	;volatile
  3107   000FFE                     
  3108                           ;dc_motor.c: 206:     }
  3109   000FFE  4A22               	infsnz	left_45@i^0,f,c
  3110   001000  2A23               	incf	(left_45@i+1)^0,f,c
  3111   001002                     l2162:
  3112   001002  501E               	movf	left_45@count^0,w,c
  3113   001004  5C22               	subwf	left_45@i^0,w,c
  3114   001006  5023               	movf	(left_45@i+1)^0,w,c
  3115   001008  0A80               	xorlw	128
  3116   00100A  6E20               	movwf	??_left_45^0,c
  3117   00100C  501F               	movf	(left_45@count+1)^0,w,c
  3118   00100E  0A80               	xorlw	128
  3119   001010  5820               	subwfb	??_left_45^0,w,c
  3120   001012  A0D8               	btfss	status,0,c
  3121   001014  EF0E  F008         	goto	u1191
  3122   001018  EF10  F008         	goto	u1190
  3123   00101C                     u1191:
  3124   00101C  EFC6  F007         	goto	l2148
  3125   001020                     u1190:
  3126   001020  0012               	return		;funcret
  3127   001022                     __end_of_left_45:
  3128                           	callstack 0
  3129                           
  3130 ;; *************** function _forward *****************
  3131 ;; Defined at:
  3132 ;;		line 128 in file "dc_motor.c"
  3133 ;; Parameters:    Size  Location     Type
  3134 ;;  mL              2   25[COMRAM] PTR struct DC_motor
  3135 ;;		 -> motorL(9), 
  3136 ;;  mR              2   27[COMRAM] PTR struct DC_motor
  3137 ;;		 -> motorR(9), 
  3138 ;; Auto vars:     Size  Location     Type
  3139 ;;		None
  3140 ;; Return value:  Size  Location     Type
  3141 ;;                  1    wreg      void 
  3142 ;; Registers used:
  3143 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3144 ;; Tracked objects:
  3145 ;;		On entry : 0/0
  3146 ;;		On exit  : 0/0
  3147 ;;		Unchanged: 0/0
  3148 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3149 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3150 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3151 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3152 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3153 ;;Total ram usage:        5 bytes
  3154 ;; Hardware stack levels used: 1
  3155 ;; Hardware stack levels required when called: 4
  3156 ;; This function calls:
  3157 ;;		_setMotorPWM
  3158 ;;		_stop
  3159 ;; This function is called by:
  3160 ;;		_buggy_color_response
  3161 ;; This function uses a non-reentrant model
  3162 ;;
  3163                           
  3164                           	psect	text16
  3165   00153C                     __ptext16:
  3166                           	callstack 0
  3167   00153C                     _forward:
  3168                           	callstack 25
  3169   00153C                     
  3170                           ;dc_motor.c: 128: void forward(DC_motor *mL, DC_motor *mR);dc_motor.c: 129: {;dc_motor.c
      +                          : 130:     stop(mL,mR);
  3171   00153C  C01A  F014         	movff	forward@mL,stop@mL
  3172   001540  C01B  F015         	movff	forward@mL+1,stop@mL+1
  3173   001544  C01C  F016         	movff	forward@mR,stop@mR
  3174   001548  C01D  F017         	movff	forward@mR+1,stop@mR+1
  3175   00154C  ECFD  F00A         	call	_stop	;wreg free
  3176   001550                     
  3177                           ;dc_motor.c: 131:     mL-> direction = 1;
  3178   001550  EE20 F001          	lfsr	2,1
  3179   001554  501A               	movf	forward@mL^0,w,c
  3180   001556  26D9               	addwf	fsr2l,f,c
  3181   001558  501B               	movf	(forward@mL+1)^0,w,c
  3182   00155A  22DA               	addwfc	fsr2h,f,c
  3183   00155C  0E01               	movlw	1
  3184   00155E  6EDF               	movwf	indf2,c
  3185   001560                     
  3186                           ;dc_motor.c: 132:     mR-> direction = 1;
  3187   001560  EE20 F001          	lfsr	2,1
  3188   001564  501C               	movf	forward@mR^0,w,c
  3189   001566  26D9               	addwf	fsr2l,f,c
  3190   001568  501D               	movf	(forward@mR+1)^0,w,c
  3191   00156A  22DA               	addwfc	fsr2h,f,c
  3192   00156C  0E01               	movlw	1
  3193   00156E  6EDF               	movwf	indf2,c
  3194   001570                     
  3195                           ;dc_motor.c: 133:     LATDbits.LATD3 = 1;
  3196   001570  867C               	bsf	124,3,c	;volatile
  3197                           
  3198                           ;dc_motor.c: 134:     setMotorPWM(mR);
  3199   001572  C01C  F00E         	movff	forward@mR,setMotorPWM@m
  3200   001576  C01D  F00F         	movff	forward@mR+1,setMotorPWM@m+1
  3201   00157A  ECBB  F006         	call	_setMotorPWM	;wreg free
  3202                           
  3203                           ;dc_motor.c: 135:     setMotorPWM(mL);
  3204   00157E  C01A  F00E         	movff	forward@mL,setMotorPWM@m
  3205   001582  C01B  F00F         	movff	forward@mL+1,setMotorPWM@m+1
  3206   001586  ECBB  F006         	call	_setMotorPWM	;wreg free
  3207                           
  3208                           ;dc_motor.c: 136:     while ((mL->power <40) && (mR->power <40)){
  3209   00158A  EFE3  F00A         	goto	l2498
  3210   00158E                     l2490:
  3211                           
  3212                           ;dc_motor.c: 137:         mL->power += 10;
  3213   00158E  C01A  FFD9         	movff	forward@mL,fsr2l
  3214   001592  C01B  FFDA         	movff	forward@mL+1,fsr2h
  3215   001596  0E0A               	movlw	10
  3216   001598  26DF               	addwf	indf2,f,c
  3217                           
  3218                           ;dc_motor.c: 138:         mR->power += 10;
  3219   00159A  C01C  FFD9         	movff	forward@mR,fsr2l
  3220   00159E  C01D  FFDA         	movff	forward@mR+1,fsr2h
  3221   0015A2  0E0A               	movlw	10
  3222   0015A4  26DF               	addwf	indf2,f,c
  3223   0015A6                     
  3224                           ;dc_motor.c: 139:         setMotorPWM(mL);
  3225   0015A6  C01A  F00E         	movff	forward@mL,setMotorPWM@m
  3226   0015AA  C01B  F00F         	movff	forward@mL+1,setMotorPWM@m+1
  3227   0015AE  ECBB  F006         	call	_setMotorPWM	;wreg free
  3228   0015B2                     
  3229                           ;dc_motor.c: 140:         setMotorPWM(mR);
  3230   0015B2  C01C  F00E         	movff	forward@mR,setMotorPWM@m
  3231   0015B6  C01D  F00F         	movff	forward@mR+1,setMotorPWM@m+1
  3232   0015BA  ECBB  F006         	call	_setMotorPWM	;wreg free
  3233   0015BE                     
  3234                           ;dc_motor.c: 141:         _delay((unsigned long)((20)*(64000000/4000000.0)));
  3235   0015BE  0E6A               	movlw	106
  3236   0015C0                     u2177:
  3237   0015C0  2EE8               	decfsz	wreg,f,c
  3238   0015C2  D7FE               	bra	u2177
  3239   0015C4  D000               	nop2	
  3240   0015C6                     l2498:
  3241                           
  3242                           ;dc_motor.c: 136:     while ((mL->power <40) && (mR->power <40)){
  3243   0015C6  C01A  FFD9         	movff	forward@mL,fsr2l
  3244   0015CA  C01B  FFDA         	movff	forward@mL+1,fsr2h
  3245   0015CE  0E28               	movlw	40
  3246   0015D0  60DF               	cpfslt	indf2,c
  3247   0015D2  EFED  F00A         	goto	u1671
  3248   0015D6  EFEF  F00A         	goto	u1670
  3249   0015DA                     u1671:
  3250   0015DA  EFFB  F00A         	goto	l299
  3251   0015DE                     u1670:
  3252   0015DE  C01C  FFD9         	movff	forward@mR,fsr2l
  3253   0015E2  C01D  FFDA         	movff	forward@mR+1,fsr2h
  3254   0015E6  0E27               	movlw	39
  3255   0015E8  64DF               	cpfsgt	indf2,c
  3256   0015EA  EFF9  F00A         	goto	u1681
  3257   0015EE  EFFB  F00A         	goto	u1680
  3258   0015F2                     u1681:
  3259   0015F2  EFC7  F00A         	goto	l2490
  3260   0015F6                     u1680:
  3261   0015F6                     l299:
  3262                           
  3263                           ;dc_motor.c: 143:     LATDbits.LATD3 = 0;
  3264   0015F6  967C               	bcf	124,3,c	;volatile
  3265   0015F8  0012               	return		;funcret
  3266   0015FA                     __end_of_forward:
  3267                           	callstack 0
  3268                           
  3269 ;; *************** function _stop *****************
  3270 ;; Defined at:
  3271 ;;		line 165 in file "dc_motor.c"
  3272 ;; Parameters:    Size  Location     Type
  3273 ;;  mL              2   19[COMRAM] PTR struct DC_motor
  3274 ;;		 -> motorL(9), 
  3275 ;;  mR              2   21[COMRAM] PTR struct DC_motor
  3276 ;;		 -> motorR(9), 
  3277 ;; Auto vars:     Size  Location     Type
  3278 ;;  i               2   23[COMRAM] int 
  3279 ;; Return value:  Size  Location     Type
  3280 ;;                  1    wreg      void 
  3281 ;; Registers used:
  3282 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3283 ;; Tracked objects:
  3284 ;;		On entry : 0/0
  3285 ;;		On exit  : 0/0
  3286 ;;		Unchanged: 0/0
  3287 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3288 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3289 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3290 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3291 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3292 ;;Total ram usage:        6 bytes
  3293 ;; Hardware stack levels used: 1
  3294 ;; Hardware stack levels required when called: 3
  3295 ;; This function calls:
  3296 ;;		_setMotorPWM
  3297 ;; This function is called by:
  3298 ;;		_buggy_color_response
  3299 ;;		_forward
  3300 ;;		_reverse
  3301 ;;		_left_45
  3302 ;;		_right_45
  3303 ;;		_space
  3304 ;;		_instructions
  3305 ;; This function uses a non-reentrant model
  3306 ;;
  3307                           
  3308                           	psect	text17
  3309   0015FA                     __ptext17:
  3310                           	callstack 0
  3311   0015FA                     _stop:
  3312                           	callstack 26
  3313   0015FA                     
  3314                           ;dc_motor.c: 165: void stop(DC_motor *mL, DC_motor *mR);dc_motor.c: 166: {;dc_motor.c: 1
      +                          67:     mL->brakemode = 1;
  3315   0015FA  EE20 F002          	lfsr	2,2
  3316   0015FE  5014               	movf	stop@mL^0,w,c
  3317   001600  26D9               	addwf	fsr2l,f,c
  3318   001602  5015               	movf	(stop@mL+1)^0,w,c
  3319   001604  22DA               	addwfc	fsr2h,f,c
  3320   001606  0E01               	movlw	1
  3321   001608  6EDF               	movwf	indf2,c
  3322                           
  3323                           ;dc_motor.c: 168:     mR->brakemode = 1;
  3324   00160A  EE20 F002          	lfsr	2,2
  3325   00160E  5016               	movf	stop@mR^0,w,c
  3326   001610  26D9               	addwf	fsr2l,f,c
  3327   001612  5017               	movf	(stop@mR+1)^0,w,c
  3328   001614  22DA               	addwfc	fsr2h,f,c
  3329   001616  0E01               	movlw	1
  3330   001618  6EDF               	movwf	indf2,c
  3331   00161A                     
  3332                           ;dc_motor.c: 169:     LATDbits.LATD4 = 1;
  3333   00161A  887C               	bsf	124,4,c	;volatile
  3334   00161C                     
  3335                           ;dc_motor.c: 171:     for (int i = 70; i >= 0; i=i-10) {
  3336   00161C  0E00               	movlw	0
  3337   00161E  6E19               	movwf	(stop@i+1)^0,c
  3338   001620  0E46               	movlw	70
  3339   001622  6E18               	movwf	stop@i^0,c
  3340   001624                     l2060:
  3341                           
  3342                           ;dc_motor.c: 172:         mL -> power = i;
  3343   001624  C014  FFD9         	movff	stop@mL,fsr2l
  3344   001628  C015  FFDA         	movff	stop@mL+1,fsr2h
  3345   00162C  C018  FFDF         	movff	stop@i,indf2
  3346                           
  3347                           ;dc_motor.c: 173:         mR -> power = i;
  3348   001630  C016  FFD9         	movff	stop@mR,fsr2l
  3349   001634  C017  FFDA         	movff	stop@mR+1,fsr2h
  3350   001638  C018  FFDF         	movff	stop@i,indf2
  3351   00163C                     
  3352                           ;dc_motor.c: 174:         setMotorPWM(mL);
  3353   00163C  C014  F00E         	movff	stop@mL,setMotorPWM@m
  3354   001640  C015  F00F         	movff	stop@mL+1,setMotorPWM@m+1
  3355   001644  ECBB  F006         	call	_setMotorPWM	;wreg free
  3356   001648                     
  3357                           ;dc_motor.c: 175:         setMotorPWM(mR);
  3358   001648  C016  F00E         	movff	stop@mR,setMotorPWM@m
  3359   00164C  C017  F00F         	movff	stop@mR+1,setMotorPWM@m+1
  3360   001650  ECBB  F006         	call	_setMotorPWM	;wreg free
  3361   001654                     
  3362                           ;dc_motor.c: 176:         _delay((unsigned long)((20)*(64000000/4000000.0)));
  3363   001654  0E6A               	movlw	106
  3364   001656                     u2187:
  3365   001656  2EE8               	decfsz	wreg,f,c
  3366   001658  D7FE               	bra	u2187
  3367   00165A  D000               	nop2	
  3368   00165C                     
  3369                           ;dc_motor.c: 177:     }
  3370   00165C  0EF6               	movlw	246
  3371   00165E  2418               	addwf	stop@i^0,w,c
  3372   001660  6E18               	movwf	stop@i^0,c
  3373   001662  0EFF               	movlw	255
  3374   001664  2019               	addwfc	(stop@i+1)^0,w,c
  3375   001666  6E19               	movwf	(stop@i+1)^0,c
  3376   001668  BE19               	btfsc	(stop@i+1)^0,7,c
  3377   00166A  EF3B  F00B         	goto	u1120
  3378   00166E  EF39  F00B         	goto	u1121
  3379   001672                     u1121:
  3380   001672  EF12  F00B         	goto	l2060
  3381   001676                     u1120:
  3382   001676                     
  3383                           ;dc_motor.c: 179:     mL->power = 0;
  3384   001676  C014  FFD9         	movff	stop@mL,fsr2l
  3385   00167A  C015  FFDA         	movff	stop@mL+1,fsr2h
  3386   00167E  0E00               	movlw	0
  3387   001680  6EDF               	movwf	indf2,c
  3388                           
  3389                           ;dc_motor.c: 180:     mR->power = 0;
  3390   001682  C016  FFD9         	movff	stop@mR,fsr2l
  3391   001686  C017  FFDA         	movff	stop@mR+1,fsr2h
  3392   00168A  0E00               	movlw	0
  3393   00168C  6EDF               	movwf	indf2,c
  3394   00168E                     
  3395                           ;dc_motor.c: 181:     setMotorPWM(mL);
  3396   00168E  C014  F00E         	movff	stop@mL,setMotorPWM@m
  3397   001692  C015  F00F         	movff	stop@mL+1,setMotorPWM@m+1
  3398   001696  ECBB  F006         	call	_setMotorPWM	;wreg free
  3399   00169A                     
  3400                           ;dc_motor.c: 182:     setMotorPWM(mR);
  3401   00169A  C016  F00E         	movff	stop@mR,setMotorPWM@m
  3402   00169E  C017  F00F         	movff	stop@mR+1,setMotorPWM@m+1
  3403   0016A2  ECBB  F006         	call	_setMotorPWM	;wreg free
  3404   0016A6                     
  3405                           ;dc_motor.c: 183:     LATDbits.LATD4 = 0;
  3406   0016A6  987C               	bcf	124,4,c	;volatile
  3407   0016A8  0012               	return		;funcret
  3408   0016AA                     __end_of_stop:
  3409                           	callstack 0
  3410                           
  3411 ;; *************** function _setMotorPWM *****************
  3412 ;; Defined at:
  3413 ;;		line 72 in file "dc_motor.c"
  3414 ;; Parameters:    Size  Location     Type
  3415 ;;  m               2   13[COMRAM] PTR struct DC_motor
  3416 ;;		 -> motorR(9), motorL(9), 
  3417 ;; Auto vars:     Size  Location     Type
  3418 ;;  negDuty         1   18[COMRAM] unsigned char 
  3419 ;;  posDuty         1   17[COMRAM] unsigned char 
  3420 ;; Return value:  Size  Location     Type
  3421 ;;                  1    wreg      void 
  3422 ;; Registers used:
  3423 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3424 ;; Tracked objects:
  3425 ;;		On entry : 0/0
  3426 ;;		On exit  : 0/0
  3427 ;;		Unchanged: 0/0
  3428 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3429 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3430 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3431 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3432 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3433 ;;Total ram usage:        6 bytes
  3434 ;; Hardware stack levels used: 1
  3435 ;; Hardware stack levels required when called: 2
  3436 ;; This function calls:
  3437 ;;		___lwdiv
  3438 ;;		___wmul
  3439 ;; This function is called by:
  3440 ;;		_forward
  3441 ;;		_reverse
  3442 ;;		_stop
  3443 ;;		_left_45
  3444 ;;		_right_45
  3445 ;;		_space
  3446 ;; This function uses a non-reentrant model
  3447 ;;
  3448                           
  3449                           	psect	text18
  3450   000D76                     __ptext18:
  3451                           	callstack 0
  3452   000D76                     _setMotorPWM:
  3453                           	callstack 26
  3454   000D76                     
  3455                           ;dc_motor.c: 72: void setMotorPWM(DC_motor *m);dc_motor.c: 73: {;dc_motor.c: 74:     uns
      +                          igned char posDuty, negDuty;;dc_motor.c: 76:     if(m->brakemode) {
  3456   000D76  EE20 F002          	lfsr	2,2
  3457   000D7A  500E               	movf	setMotorPWM@m^0,w,c
  3458   000D7C  26D9               	addwf	fsr2l,f,c
  3459   000D7E  500F               	movf	(setMotorPWM@m+1)^0,w,c
  3460   000D80  22DA               	addwfc	fsr2h,f,c
  3461   000D82  50DF               	movf	indf2,w,c
  3462   000D84  B4D8               	btfsc	status,2,c
  3463   000D86  EFC7  F006         	goto	u1081
  3464   000D8A  EFC9  F006         	goto	u1080
  3465   000D8E                     u1081:
  3466   000D8E  EFFD  F006         	goto	l2010
  3467   000D92                     u1080:
  3468   000D92                     
  3469                           ;dc_motor.c: 77:         posDuty = m->PWMperiod - ((unsigned int)(m->power)*(m->PWMperio
      +                          d))/100;
  3470   000D92  C00E  FFD9         	movff	setMotorPWM@m,fsr2l
  3471   000D96  C00F  FFDA         	movff	setMotorPWM@m+1,fsr2h
  3472   000D9A  50DF               	movf	indf2,w,c
  3473   000D9C  6E10               	movwf	??_setMotorPWM^0,c
  3474   000D9E  5010               	movf	??_setMotorPWM^0,w,c
  3475   000DA0  6E01               	movwf	___wmul@multiplier^0,c
  3476   000DA2  6A02               	clrf	(___wmul@multiplier+1)^0,c
  3477   000DA4  EE20 F003          	lfsr	2,3
  3478   000DA8  500E               	movf	setMotorPWM@m^0,w,c
  3479   000DAA  26D9               	addwf	fsr2l,f,c
  3480   000DAC  500F               	movf	(setMotorPWM@m+1)^0,w,c
  3481   000DAE  22DA               	addwfc	fsr2h,f,c
  3482   000DB0  CFDE F003          	movff	postinc2,___wmul@multiplicand
  3483   000DB4  CFDD F004          	movff	postdec2,___wmul@multiplicand+1
  3484   000DB8  EC8F  F00D         	call	___wmul	;wreg free
  3485   000DBC  C001  F007         	movff	?___wmul,___lwdiv@dividend
  3486   000DC0  C002  F008         	movff	?___wmul+1,___lwdiv@dividend+1
  3487   000DC4  0E00               	movlw	0
  3488   000DC6  6E0A               	movwf	(___lwdiv@divisor+1)^0,c
  3489   000DC8  0E64               	movlw	100
  3490   000DCA  6E09               	movwf	___lwdiv@divisor^0,c
  3491   000DCC  EC9D  F00B         	call	___lwdiv	;wreg free
  3492   000DD0  EE20 F003          	lfsr	2,3
  3493   000DD4  500E               	movf	setMotorPWM@m^0,w,c
  3494   000DD6  26D9               	addwf	fsr2l,f,c
  3495   000DD8  500F               	movf	(setMotorPWM@m+1)^0,w,c
  3496   000DDA  22DA               	addwfc	fsr2h,f,c
  3497   000DDC  50DF               	movf	indf2,w,c
  3498   000DDE  6E11               	movwf	(??_setMotorPWM+1)^0,c
  3499   000DE0  5007               	movf	?___lwdiv^0,w,c
  3500   000DE2  5C11               	subwf	(??_setMotorPWM+1)^0,w,c
  3501   000DE4  6E12               	movwf	setMotorPWM@posDuty^0,c
  3502   000DE6                     
  3503                           ;dc_motor.c: 78:         negDuty = m->PWMperiod;
  3504   000DE6  EE20 F003          	lfsr	2,3
  3505   000DEA  500E               	movf	setMotorPWM@m^0,w,c
  3506   000DEC  26D9               	addwf	fsr2l,f,c
  3507   000DEE  500F               	movf	(setMotorPWM@m+1)^0,w,c
  3508   000DF0  22DA               	addwfc	fsr2h,f,c
  3509   000DF2  50DF               	movf	indf2,w,c
  3510   000DF4  6E13               	movwf	setMotorPWM@negDuty^0,c
  3511                           
  3512                           ;dc_motor.c: 79:     }
  3513   000DF6  EF20  F007         	goto	l2014
  3514   000DFA                     l2010:
  3515                           
  3516                           ;dc_motor.c: 81:         posDuty=0;
  3517   000DFA  0E00               	movlw	0
  3518   000DFC  6E12               	movwf	setMotorPWM@posDuty^0,c
  3519   000DFE                     
  3520                           ;dc_motor.c: 82:   negDuty=((unsigned int)(m->power)*(m->PWMperiod))/100;
  3521   000DFE  C00E  FFD9         	movff	setMotorPWM@m,fsr2l
  3522   000E02  C00F  FFDA         	movff	setMotorPWM@m+1,fsr2h
  3523   000E06  50DF               	movf	indf2,w,c
  3524   000E08  6E10               	movwf	??_setMotorPWM^0,c
  3525   000E0A  5010               	movf	??_setMotorPWM^0,w,c
  3526   000E0C  6E01               	movwf	___wmul@multiplier^0,c
  3527   000E0E  6A02               	clrf	(___wmul@multiplier+1)^0,c
  3528   000E10  EE20 F003          	lfsr	2,3
  3529   000E14  500E               	movf	setMotorPWM@m^0,w,c
  3530   000E16  26D9               	addwf	fsr2l,f,c
  3531   000E18  500F               	movf	(setMotorPWM@m+1)^0,w,c
  3532   000E1A  22DA               	addwfc	fsr2h,f,c
  3533   000E1C  CFDE F003          	movff	postinc2,___wmul@multiplicand
  3534   000E20  CFDD F004          	movff	postdec2,___wmul@multiplicand+1
  3535   000E24  EC8F  F00D         	call	___wmul	;wreg free
  3536   000E28  C001  F007         	movff	?___wmul,___lwdiv@dividend
  3537   000E2C  C002  F008         	movff	?___wmul+1,___lwdiv@dividend+1
  3538   000E30  0E00               	movlw	0
  3539   000E32  6E0A               	movwf	(___lwdiv@divisor+1)^0,c
  3540   000E34  0E64               	movlw	100
  3541   000E36  6E09               	movwf	___lwdiv@divisor^0,c
  3542   000E38  EC9D  F00B         	call	___lwdiv	;wreg free
  3543   000E3C  5007               	movf	?___lwdiv^0,w,c
  3544   000E3E  6E13               	movwf	setMotorPWM@negDuty^0,c
  3545   000E40                     l2014:
  3546                           
  3547                           ;dc_motor.c: 85:     if (m->direction) {
  3548   000E40  EE20 F001          	lfsr	2,1
  3549   000E44  500E               	movf	setMotorPWM@m^0,w,c
  3550   000E46  26D9               	addwf	fsr2l,f,c
  3551   000E48  500F               	movf	(setMotorPWM@m+1)^0,w,c
  3552   000E4A  22DA               	addwfc	fsr2h,f,c
  3553   000E4C  50DF               	movf	indf2,w,c
  3554   000E4E  B4D8               	btfsc	status,2,c
  3555   000E50  EF2C  F007         	goto	u1091
  3556   000E54  EF2E  F007         	goto	u1090
  3557   000E58                     u1091:
  3558   000E58  EF50  F007         	goto	l2018
  3559   000E5C                     u1090:
  3560   000E5C                     
  3561                           ;dc_motor.c: 86:         *(m->posDutyHighByte)= posDuty;
  3562   000E5C  EE20 F005          	lfsr	2,5
  3563   000E60  500E               	movf	setMotorPWM@m^0,w,c
  3564   000E62  26D9               	addwf	fsr2l,f,c
  3565   000E64  500F               	movf	(setMotorPWM@m+1)^0,w,c
  3566   000E66  22DA               	addwfc	fsr2h,f,c
  3567   000E68  CFDE F010          	movff	postinc2,??_setMotorPWM
  3568   000E6C  CFDD F011          	movff	postdec2,??_setMotorPWM+1
  3569   000E70  C010  FFD9         	movff	??_setMotorPWM,fsr2l
  3570   000E74  C011  FFDA         	movff	??_setMotorPWM+1,fsr2h
  3571   000E78  C012  FFDF         	movff	setMotorPWM@posDuty,indf2
  3572                           
  3573                           ;dc_motor.c: 87:         *(m->negDutyHighByte)= negDuty;
  3574   000E7C  EE20 F007          	lfsr	2,7
  3575   000E80  500E               	movf	setMotorPWM@m^0,w,c
  3576   000E82  26D9               	addwf	fsr2l,f,c
  3577   000E84  500F               	movf	(setMotorPWM@m+1)^0,w,c
  3578   000E86  22DA               	addwfc	fsr2h,f,c
  3579   000E88  CFDE F010          	movff	postinc2,??_setMotorPWM
  3580   000E8C  CFDD F011          	movff	postdec2,??_setMotorPWM+1
  3581   000E90  C010  FFD9         	movff	??_setMotorPWM,fsr2l
  3582   000E94  C011  FFDA         	movff	??_setMotorPWM+1,fsr2h
  3583   000E98  C013  FFDF         	movff	setMotorPWM@negDuty,indf2
  3584                           
  3585                           ;dc_motor.c: 88:     } else {
  3586   000E9C  EF70  F007         	goto	l286
  3587   000EA0                     l2018:
  3588                           
  3589                           ;dc_motor.c: 89:         *(m->posDutyHighByte)= negDuty;
  3590   000EA0  EE20 F005          	lfsr	2,5
  3591   000EA4  500E               	movf	setMotorPWM@m^0,w,c
  3592   000EA6  26D9               	addwf	fsr2l,f,c
  3593   000EA8  500F               	movf	(setMotorPWM@m+1)^0,w,c
  3594   000EAA  22DA               	addwfc	fsr2h,f,c
  3595   000EAC  CFDE F010          	movff	postinc2,??_setMotorPWM
  3596   000EB0  CFDD F011          	movff	postdec2,??_setMotorPWM+1
  3597   000EB4  C010  FFD9         	movff	??_setMotorPWM,fsr2l
  3598   000EB8  C011  FFDA         	movff	??_setMotorPWM+1,fsr2h
  3599   000EBC  C013  FFDF         	movff	setMotorPWM@negDuty,indf2
  3600                           
  3601                           ;dc_motor.c: 90:         *(m->negDutyHighByte)= posDuty;
  3602   000EC0  EE20 F007          	lfsr	2,7
  3603   000EC4  500E               	movf	setMotorPWM@m^0,w,c
  3604   000EC6  26D9               	addwf	fsr2l,f,c
  3605   000EC8  500F               	movf	(setMotorPWM@m+1)^0,w,c
  3606   000ECA  22DA               	addwfc	fsr2h,f,c
  3607   000ECC  CFDE F010          	movff	postinc2,??_setMotorPWM
  3608   000ED0  CFDD F011          	movff	postdec2,??_setMotorPWM+1
  3609   000ED4  C010  FFD9         	movff	??_setMotorPWM,fsr2l
  3610   000ED8  C011  FFDA         	movff	??_setMotorPWM+1,fsr2h
  3611   000EDC  C012  FFDF         	movff	setMotorPWM@posDuty,indf2
  3612   000EE0                     l286:
  3613   000EE0  0012               	return		;funcret
  3614   000EE2                     __end_of_setMotorPWM:
  3615                           	callstack 0
  3616                           
  3617 ;; *************** function ___wmul *****************
  3618 ;; Defined at:
  3619 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\Umul16.c"
  3620 ;; Parameters:    Size  Location     Type
  3621 ;;  multiplier      2    0[COMRAM] unsigned int 
  3622 ;;  multiplicand    2    2[COMRAM] unsigned int 
  3623 ;; Auto vars:     Size  Location     Type
  3624 ;;  product         2    4[COMRAM] unsigned int 
  3625 ;; Return value:  Size  Location     Type
  3626 ;;                  2    0[COMRAM] unsigned int 
  3627 ;; Registers used:
  3628 ;;		wreg, status,2, status,0, prodl, prodh
  3629 ;; Tracked objects:
  3630 ;;		On entry : 0/0
  3631 ;;		On exit  : 0/0
  3632 ;;		Unchanged: 0/0
  3633 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3634 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3635 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3636 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3637 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3638 ;;Total ram usage:        6 bytes
  3639 ;; Hardware stack levels used: 1
  3640 ;; Hardware stack levels required when called: 1
  3641 ;; This function calls:
  3642 ;;		Nothing
  3643 ;; This function is called by:
  3644 ;;		_setMotorPWM
  3645 ;; This function uses a non-reentrant model
  3646 ;;
  3647                           
  3648                           	psect	text19
  3649   001B1E                     __ptext19:
  3650                           	callstack 0
  3651   001B1E                     ___wmul:
  3652                           	callstack 26
  3653   001B1E  5001               	movf	___wmul@multiplier^0,w,c
  3654   001B20  0203               	mulwf	___wmul@multiplicand^0,c
  3655   001B22  CFF3 F005          	movff	prodl,___wmul@product
  3656   001B26  CFF4 F006          	movff	prodh,___wmul@product+1
  3657   001B2A  5001               	movf	___wmul@multiplier^0,w,c
  3658   001B2C  0204               	mulwf	(___wmul@multiplicand+1)^0,c
  3659   001B2E  50F3               	movf	243,w,c
  3660   001B30  2606               	addwf	(___wmul@product+1)^0,f,c
  3661   001B32  5002               	movf	(___wmul@multiplier+1)^0,w,c
  3662   001B34  0203               	mulwf	___wmul@multiplicand^0,c
  3663   001B36  50F3               	movf	243,w,c
  3664   001B38  2606               	addwf	(___wmul@product+1)^0,f,c
  3665   001B3A  C005  F001         	movff	___wmul@product,?___wmul
  3666   001B3E  C006  F002         	movff	___wmul@product+1,?___wmul+1
  3667   001B42  0012               	return		;funcret
  3668   001B44                     __end_of___wmul:
  3669                           	callstack 0
  3670                           
  3671 ;; *************** function ___lwdiv *****************
  3672 ;; Defined at:
  3673 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\lwdiv.c"
  3674 ;; Parameters:    Size  Location     Type
  3675 ;;  dividend        2    6[COMRAM] unsigned int 
  3676 ;;  divisor         2    8[COMRAM] unsigned int 
  3677 ;; Auto vars:     Size  Location     Type
  3678 ;;  quotient        2   10[COMRAM] unsigned int 
  3679 ;;  counter         1   12[COMRAM] unsigned char 
  3680 ;; Return value:  Size  Location     Type
  3681 ;;                  2    6[COMRAM] unsigned int 
  3682 ;; Registers used:
  3683 ;;		wreg, status,2, status,0
  3684 ;; Tracked objects:
  3685 ;;		On entry : 0/0
  3686 ;;		On exit  : 0/0
  3687 ;;		Unchanged: 0/0
  3688 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3689 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3690 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3691 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3692 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3693 ;;Total ram usage:        7 bytes
  3694 ;; Hardware stack levels used: 1
  3695 ;; Hardware stack levels required when called: 1
  3696 ;; This function calls:
  3697 ;;		Nothing
  3698 ;; This function is called by:
  3699 ;;		_setMotorPWM
  3700 ;; This function uses a non-reentrant model
  3701 ;;
  3702                           
  3703                           	psect	text20
  3704   00173A                     __ptext20:
  3705                           	callstack 0
  3706   00173A                     ___lwdiv:
  3707                           	callstack 26
  3708   00173A  0E00               	movlw	0
  3709   00173C  6E0C               	movwf	(___lwdiv@quotient+1)^0,c
  3710   00173E  0E00               	movlw	0
  3711   001740  6E0B               	movwf	___lwdiv@quotient^0,c
  3712   001742  5009               	movf	___lwdiv@divisor^0,w,c
  3713   001744  100A               	iorwf	(___lwdiv@divisor+1)^0,w,c
  3714   001746  B4D8               	btfsc	status,2,c
  3715   001748  EFA8  F00B         	goto	u1031
  3716   00174C  EFAA  F00B         	goto	u1030
  3717   001750                     u1031:
  3718   001750  EFD2  F00B         	goto	l972
  3719   001754                     u1030:
  3720   001754  0E01               	movlw	1
  3721   001756  6E0D               	movwf	___lwdiv@counter^0,c
  3722   001758  EFB2  F00B         	goto	l1986
  3723   00175C                     l1984:
  3724   00175C  90D8               	bcf	status,0,c
  3725   00175E  3609               	rlcf	___lwdiv@divisor^0,f,c
  3726   001760  360A               	rlcf	(___lwdiv@divisor+1)^0,f,c
  3727   001762  2A0D               	incf	___lwdiv@counter^0,f,c
  3728   001764                     l1986:
  3729   001764  AE0A               	btfss	(___lwdiv@divisor+1)^0,7,c
  3730   001766  EFB7  F00B         	goto	u1041
  3731   00176A  EFB9  F00B         	goto	u1040
  3732   00176E                     u1041:
  3733   00176E  EFAE  F00B         	goto	l1984
  3734   001772                     u1040:
  3735   001772                     l1988:
  3736   001772  90D8               	bcf	status,0,c
  3737   001774  360B               	rlcf	___lwdiv@quotient^0,f,c
  3738   001776  360C               	rlcf	(___lwdiv@quotient+1)^0,f,c
  3739   001778  5009               	movf	___lwdiv@divisor^0,w,c
  3740   00177A  5C07               	subwf	___lwdiv@dividend^0,w,c
  3741   00177C  500A               	movf	(___lwdiv@divisor+1)^0,w,c
  3742   00177E  5808               	subwfb	(___lwdiv@dividend+1)^0,w,c
  3743   001780  A0D8               	btfss	status,0,c
  3744   001782  EFC5  F00B         	goto	u1051
  3745   001786  EFC7  F00B         	goto	u1050
  3746   00178A                     u1051:
  3747   00178A  EFCC  F00B         	goto	l1996
  3748   00178E                     u1050:
  3749   00178E  5009               	movf	___lwdiv@divisor^0,w,c
  3750   001790  5E07               	subwf	___lwdiv@dividend^0,f,c
  3751   001792  500A               	movf	(___lwdiv@divisor+1)^0,w,c
  3752   001794  5A08               	subwfb	(___lwdiv@dividend+1)^0,f,c
  3753   001796  800B               	bsf	___lwdiv@quotient^0,0,c
  3754   001798                     l1996:
  3755   001798  90D8               	bcf	status,0,c
  3756   00179A  320A               	rrcf	(___lwdiv@divisor+1)^0,f,c
  3757   00179C  3209               	rrcf	___lwdiv@divisor^0,f,c
  3758   00179E  2E0D               	decfsz	___lwdiv@counter^0,f,c
  3759   0017A0  EFB9  F00B         	goto	l1988
  3760   0017A4                     l972:
  3761   0017A4  C00B  F007         	movff	___lwdiv@quotient,?___lwdiv
  3762   0017A8  C00C  F008         	movff	___lwdiv@quotient+1,?___lwdiv+1
  3763   0017AC  0012               	return		;funcret
  3764   0017AE                     __end_of___lwdiv:
  3765                           	callstack 0
  3766                           
  3767 ;; *************** function _colourcards_normaliseRGBC *****************
  3768 ;; Defined at:
  3769 ;;		line 136 in file "color.c"
  3770 ;; Parameters:    Size  Location     Type
  3771 ;;  c               2   39[COMRAM] PTR struct colors
  3772 ;;		 -> color(20), 
  3773 ;; Auto vars:     Size  Location     Type
  3774 ;;  C               2   47[COMRAM] unsigned int 
  3775 ;;  B               2   45[COMRAM] unsigned int 
  3776 ;;  G               2   43[COMRAM] unsigned int 
  3777 ;;  R               2   41[COMRAM] unsigned int 
  3778 ;; Return value:  Size  Location     Type
  3779 ;;                  1    wreg      void 
  3780 ;; Registers used:
  3781 ;;		wreg, status,2, status,0, cstack
  3782 ;; Tracked objects:
  3783 ;;		On entry : 0/0
  3784 ;;		On exit  : 0/0
  3785 ;;		Unchanged: 0/0
  3786 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3787 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3788 ;;      Locals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3789 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3790 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3791 ;;Total ram usage:       10 bytes
  3792 ;; Hardware stack levels used: 1
  3793 ;; Hardware stack levels required when called: 2
  3794 ;; This function calls:
  3795 ;;		___fldiv
  3796 ;;		___xxtofl
  3797 ;; This function is called by:
  3798 ;;		_buggy_color_response
  3799 ;; This function uses a non-reentrant model
  3800 ;;
  3801                           
  3802                           	psect	text21
  3803   001150                     __ptext21:
  3804                           	callstack 0
  3805   001150                     _colourcards_normaliseRGBC:
  3806                           	callstack 27
  3807   001150                     
  3808                           ;color.c: 136: void colourcards_normaliseRGBC(colors *c);color.c: 137: {;color.c: 138:  
      +                             unsigned int R = color.R;
  3809   001150  C03F  F02A         	movff	_color,colourcards_normaliseRGBC@R
  3810   001154  C040  F02B         	movff	_color+1,colourcards_normaliseRGBC@R+1
  3811                           
  3812                           ;color.c: 139:     unsigned int G = color.G;
  3813   001158  C043  F02C         	movff	_color+4,colourcards_normaliseRGBC@G
  3814   00115C  C044  F02D         	movff	_color+5,colourcards_normaliseRGBC@G+1
  3815                           
  3816                           ;color.c: 140:     unsigned int B = color.B;
  3817   001160  C041  F02E         	movff	_color+2,colourcards_normaliseRGBC@B
  3818   001164  C042  F02F         	movff	_color+3,colourcards_normaliseRGBC@B+1
  3819                           
  3820                           ;color.c: 141:     unsigned int C = color.C;
  3821   001168  C045  F030         	movff	_color+6,colourcards_normaliseRGBC@C
  3822   00116C  C046  F031         	movff	_color+7,colourcards_normaliseRGBC@C+1
  3823   001170                     
  3824                           ;color.c: 143:     color.R_norm = (float)R/(float)C;
  3825   001170  C02A  F001         	movff	colourcards_normaliseRGBC@R,___xxtofl@val
  3826   001174  C02B  F002         	movff	colourcards_normaliseRGBC@R+1,___xxtofl@val+1
  3827   001178  6A03               	clrf	(___xxtofl@val+2)^0,c
  3828   00117A  6A04               	clrf	(___xxtofl@val+3)^0,c
  3829   00117C  0E00               	movlw	0
  3830   00117E  ECE1  F005         	call	___xxtofl
  3831   001182  C001  F00F         	movff	?___xxtofl,___fldiv@b
  3832   001186  C002  F010         	movff	?___xxtofl+1,___fldiv@b+1
  3833   00118A  C003  F011         	movff	?___xxtofl+2,___fldiv@b+2
  3834   00118E  C004  F012         	movff	?___xxtofl+3,___fldiv@b+3
  3835   001192  C030  F001         	movff	colourcards_normaliseRGBC@C,___xxtofl@val
  3836   001196  C031  F002         	movff	colourcards_normaliseRGBC@C+1,___xxtofl@val+1
  3837   00119A  6A03               	clrf	(___xxtofl@val+2)^0,c
  3838   00119C  6A04               	clrf	(___xxtofl@val+3)^0,c
  3839   00119E  0E00               	movlw	0
  3840   0011A0  ECE1  F005         	call	___xxtofl
  3841   0011A4  C001  F013         	movff	?___xxtofl,___fldiv@a
  3842   0011A8  C002  F014         	movff	?___xxtofl+1,___fldiv@a+1
  3843   0011AC  C003  F015         	movff	?___xxtofl+2,___fldiv@a+2
  3844   0011B0  C004  F016         	movff	?___xxtofl+3,___fldiv@a+3
  3845   0011B4  ECA2  F002         	call	___fldiv	;wreg free
  3846   0011B8  C00F  F047         	movff	?___fldiv,_color+8
  3847   0011BC  C010  F048         	movff	?___fldiv+1,_color+9
  3848   0011C0  C011  F049         	movff	?___fldiv+2,_color+10
  3849   0011C4  C012  F04A         	movff	?___fldiv+3,_color+11
  3850                           
  3851                           ;color.c: 144:     color.G_norm = (float)G/(float)C;
  3852   0011C8  C02C  F001         	movff	colourcards_normaliseRGBC@G,___xxtofl@val
  3853   0011CC  C02D  F002         	movff	colourcards_normaliseRGBC@G+1,___xxtofl@val+1
  3854   0011D0  6A03               	clrf	(___xxtofl@val+2)^0,c
  3855   0011D2  6A04               	clrf	(___xxtofl@val+3)^0,c
  3856   0011D4  0E00               	movlw	0
  3857   0011D6  ECE1  F005         	call	___xxtofl
  3858   0011DA  C001  F00F         	movff	?___xxtofl,___fldiv@b
  3859   0011DE  C002  F010         	movff	?___xxtofl+1,___fldiv@b+1
  3860   0011E2  C003  F011         	movff	?___xxtofl+2,___fldiv@b+2
  3861   0011E6  C004  F012         	movff	?___xxtofl+3,___fldiv@b+3
  3862   0011EA  C030  F001         	movff	colourcards_normaliseRGBC@C,___xxtofl@val
  3863   0011EE  C031  F002         	movff	colourcards_normaliseRGBC@C+1,___xxtofl@val+1
  3864   0011F2  6A03               	clrf	(___xxtofl@val+2)^0,c
  3865   0011F4  6A04               	clrf	(___xxtofl@val+3)^0,c
  3866   0011F6  0E00               	movlw	0
  3867   0011F8  ECE1  F005         	call	___xxtofl
  3868   0011FC  C001  F013         	movff	?___xxtofl,___fldiv@a
  3869   001200  C002  F014         	movff	?___xxtofl+1,___fldiv@a+1
  3870   001204  C003  F015         	movff	?___xxtofl+2,___fldiv@a+2
  3871   001208  C004  F016         	movff	?___xxtofl+3,___fldiv@a+3
  3872   00120C  ECA2  F002         	call	___fldiv	;wreg free
  3873   001210  C00F  F04F         	movff	?___fldiv,_color+16
  3874   001214  C010  F050         	movff	?___fldiv+1,_color+17
  3875   001218  C011  F051         	movff	?___fldiv+2,_color+18
  3876   00121C  C012  F052         	movff	?___fldiv+3,_color+19
  3877                           
  3878                           ;color.c: 145:     color.B_norm = (float)B/(float)C;
  3879   001220  C02E  F001         	movff	colourcards_normaliseRGBC@B,___xxtofl@val
  3880   001224  C02F  F002         	movff	colourcards_normaliseRGBC@B+1,___xxtofl@val+1
  3881   001228  6A03               	clrf	(___xxtofl@val+2)^0,c
  3882   00122A  6A04               	clrf	(___xxtofl@val+3)^0,c
  3883   00122C  0E00               	movlw	0
  3884   00122E  ECE1  F005         	call	___xxtofl
  3885   001232  C001  F00F         	movff	?___xxtofl,___fldiv@b
  3886   001236  C002  F010         	movff	?___xxtofl+1,___fldiv@b+1
  3887   00123A  C003  F011         	movff	?___xxtofl+2,___fldiv@b+2
  3888   00123E  C004  F012         	movff	?___xxtofl+3,___fldiv@b+3
  3889   001242  C030  F001         	movff	colourcards_normaliseRGBC@C,___xxtofl@val
  3890   001246  C031  F002         	movff	colourcards_normaliseRGBC@C+1,___xxtofl@val+1
  3891   00124A  6A03               	clrf	(___xxtofl@val+2)^0,c
  3892   00124C  6A04               	clrf	(___xxtofl@val+3)^0,c
  3893   00124E  0E00               	movlw	0
  3894   001250  ECE1  F005         	call	___xxtofl
  3895   001254  C001  F013         	movff	?___xxtofl,___fldiv@a
  3896   001258  C002  F014         	movff	?___xxtofl+1,___fldiv@a+1
  3897   00125C  C003  F015         	movff	?___xxtofl+2,___fldiv@a+2
  3898   001260  C004  F016         	movff	?___xxtofl+3,___fldiv@a+3
  3899   001264  ECA2  F002         	call	___fldiv	;wreg free
  3900   001268  C00F  F04B         	movff	?___fldiv,_color+12
  3901   00126C  C010  F04C         	movff	?___fldiv+1,_color+13
  3902   001270  C011  F04D         	movff	?___fldiv+2,_color+14
  3903   001274  C012  F04E         	movff	?___fldiv+3,_color+15
  3904   001278  0012               	return		;funcret
  3905   00127A                     __end_of_colourcards_normaliseRGBC:
  3906                           	callstack 0
  3907                           
  3908 ;; *************** function ___xxtofl *****************
  3909 ;; Defined at:
  3910 ;;		line 10 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\xxtofl.c"
  3911 ;; Parameters:    Size  Location     Type
  3912 ;;  sign            1    wreg     unsigned char 
  3913 ;;  val             4    0[COMRAM] long 
  3914 ;; Auto vars:     Size  Location     Type
  3915 ;;  sign            1    8[COMRAM] unsigned char 
  3916 ;;  arg             4   10[COMRAM] unsigned long 
  3917 ;;  exp             1    9[COMRAM] unsigned char 
  3918 ;; Return value:  Size  Location     Type
  3919 ;;                  4    0[COMRAM] unsigned char 
  3920 ;; Registers used:
  3921 ;;		wreg, status,2, status,0
  3922 ;; Tracked objects:
  3923 ;;		On entry : 0/0
  3924 ;;		On exit  : 0/0
  3925 ;;		Unchanged: 0/0
  3926 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3927 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3928 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3929 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3930 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3931 ;;Total ram usage:       14 bytes
  3932 ;; Hardware stack levels used: 1
  3933 ;; Hardware stack levels required when called: 1
  3934 ;; This function calls:
  3935 ;;		Nothing
  3936 ;; This function is called by:
  3937 ;;		_colourcards_normaliseRGBC
  3938 ;; This function uses a non-reentrant model
  3939 ;;
  3940                           
  3941                           	psect	text22
  3942   000BC2                     __ptext22:
  3943                           	callstack 0
  3944   000BC2                     ___xxtofl:
  3945                           	callstack 27
  3946                           
  3947                           ;incstack = 0
  3948                           ;___xxtofl@sign stored from wreg
  3949   000BC2  6E09               	movwf	___xxtofl@sign^0,c
  3950   000BC4  5009               	movf	___xxtofl@sign^0,w,c
  3951   000BC6  B4D8               	btfsc	status,2,c
  3952   000BC8  EFE8  F005         	goto	u1501
  3953   000BCC  EFEA  F005         	goto	u1500
  3954   000BD0                     u1501:
  3955   000BD0  EF0C  F006         	goto	l1136
  3956   000BD4                     u1500:
  3957   000BD4  BE04               	btfsc	(___xxtofl@val+3)^0,7,c
  3958   000BD6  EFF1  F005         	goto	u1510
  3959   000BDA  EFEF  F005         	goto	u1511
  3960   000BDE                     u1511:
  3961   000BDE  EF0C  F006         	goto	l1136
  3962   000BE2                     u1510:
  3963   000BE2  C001  F005         	movff	___xxtofl@val,??___xxtofl
  3964   000BE6  C002  F006         	movff	___xxtofl@val+1,??___xxtofl+1
  3965   000BEA  C003  F007         	movff	___xxtofl@val+2,??___xxtofl+2
  3966   000BEE  C004  F008         	movff	___xxtofl@val+3,??___xxtofl+3
  3967   000BF2  1E05               	comf	??___xxtofl^0,f,c
  3968   000BF4  1E06               	comf	(??___xxtofl+1)^0,f,c
  3969   000BF6  1E07               	comf	(??___xxtofl+2)^0,f,c
  3970   000BF8  1E08               	comf	(??___xxtofl+3)^0,f,c
  3971   000BFA  2A05               	incf	??___xxtofl^0,f,c
  3972   000BFC  0E00               	movlw	0
  3973   000BFE  2206               	addwfc	(??___xxtofl+1)^0,f,c
  3974   000C00  2207               	addwfc	(??___xxtofl+2)^0,f,c
  3975   000C02  2208               	addwfc	(??___xxtofl+3)^0,f,c
  3976   000C04  C005  F00B         	movff	??___xxtofl,___xxtofl@arg
  3977   000C08  C006  F00C         	movff	??___xxtofl+1,___xxtofl@arg+1
  3978   000C0C  C007  F00D         	movff	??___xxtofl+2,___xxtofl@arg+2
  3979   000C10  C008  F00E         	movff	??___xxtofl+3,___xxtofl@arg+3
  3980   000C14  EF14  F006         	goto	l2372
  3981   000C18                     l1136:
  3982   000C18  C001  F00B         	movff	___xxtofl@val,___xxtofl@arg
  3983   000C1C  C002  F00C         	movff	___xxtofl@val+1,___xxtofl@arg+1
  3984   000C20  C003  F00D         	movff	___xxtofl@val+2,___xxtofl@arg+2
  3985   000C24  C004  F00E         	movff	___xxtofl@val+3,___xxtofl@arg+3
  3986   000C28                     l2372:
  3987   000C28  5001               	movf	___xxtofl@val^0,w,c
  3988   000C2A  1002               	iorwf	(___xxtofl@val+1)^0,w,c
  3989   000C2C  1003               	iorwf	(___xxtofl@val+2)^0,w,c
  3990   000C2E  1004               	iorwf	(___xxtofl@val+3)^0,w,c
  3991   000C30  A4D8               	btfss	status,2,c
  3992   000C32  EF1D  F006         	goto	u1521
  3993   000C36  EF1F  F006         	goto	u1520
  3994   000C3A                     u1521:
  3995   000C3A  EF29  F006         	goto	l2378
  3996   000C3E                     u1520:
  3997   000C3E  0E00               	movlw	0
  3998   000C40  6E01               	movwf	?___xxtofl^0,c
  3999   000C42  0E00               	movlw	0
  4000   000C44  6E02               	movwf	(?___xxtofl+1)^0,c
  4001   000C46  0E00               	movlw	0
  4002   000C48  6E03               	movwf	(?___xxtofl+2)^0,c
  4003   000C4A  0E00               	movlw	0
  4004   000C4C  6E04               	movwf	(?___xxtofl+3)^0,c
  4005   000C4E  EFBA  F006         	goto	l1139
  4006   000C52                     l2378:
  4007   000C52  0E96               	movlw	150
  4008   000C54  6E0A               	movwf	___xxtofl@exp^0,c
  4009   000C56  EF33  F006         	goto	l2382
  4010   000C5A                     l2380:
  4011   000C5A  2A0A               	incf	___xxtofl@exp^0,f,c
  4012   000C5C  90D8               	bcf	status,0,c
  4013   000C5E  320E               	rrcf	(___xxtofl@arg+3)^0,f,c
  4014   000C60  320D               	rrcf	(___xxtofl@arg+2)^0,f,c
  4015   000C62  320C               	rrcf	(___xxtofl@arg+1)^0,f,c
  4016   000C64  320B               	rrcf	___xxtofl@arg^0,f,c
  4017   000C66                     l2382:
  4018   000C66  0E00               	movlw	0
  4019   000C68  140B               	andwf	___xxtofl@arg^0,w,c
  4020   000C6A  6E05               	movwf	??___xxtofl^0,c
  4021   000C6C  0E00               	movlw	0
  4022   000C6E  140C               	andwf	(___xxtofl@arg+1)^0,w,c
  4023   000C70  6E06               	movwf	(??___xxtofl+1)^0,c
  4024   000C72  0E00               	movlw	0
  4025   000C74  140D               	andwf	(___xxtofl@arg+2)^0,w,c
  4026   000C76  6E07               	movwf	(??___xxtofl+2)^0,c
  4027   000C78  0EFE               	movlw	254
  4028   000C7A  140E               	andwf	(___xxtofl@arg+3)^0,w,c
  4029   000C7C  6E08               	movwf	(??___xxtofl+3)^0,c
  4030   000C7E  5005               	movf	??___xxtofl^0,w,c
  4031   000C80  1006               	iorwf	(??___xxtofl+1)^0,w,c
  4032   000C82  1007               	iorwf	(??___xxtofl+2)^0,w,c
  4033   000C84  1008               	iorwf	(??___xxtofl+3)^0,w,c
  4034   000C86  A4D8               	btfss	status,2,c
  4035   000C88  EF48  F006         	goto	u1531
  4036   000C8C  EF4A  F006         	goto	u1530
  4037   000C90                     u1531:
  4038   000C90  EF2D  F006         	goto	l2380
  4039   000C94                     u1530:
  4040   000C94  EF58  F006         	goto	l1143
  4041   000C98                     l2384:
  4042   000C98  2A0A               	incf	___xxtofl@exp^0,f,c
  4043   000C9A  0E01               	movlw	1
  4044   000C9C  260B               	addwf	___xxtofl@arg^0,f,c
  4045   000C9E  0E00               	movlw	0
  4046   000CA0  220C               	addwfc	(___xxtofl@arg+1)^0,f,c
  4047   000CA2  220D               	addwfc	(___xxtofl@arg+2)^0,f,c
  4048   000CA4  220E               	addwfc	(___xxtofl@arg+3)^0,f,c
  4049   000CA6  90D8               	bcf	status,0,c
  4050   000CA8  320E               	rrcf	(___xxtofl@arg+3)^0,f,c
  4051   000CAA  320D               	rrcf	(___xxtofl@arg+2)^0,f,c
  4052   000CAC  320C               	rrcf	(___xxtofl@arg+1)^0,f,c
  4053   000CAE  320B               	rrcf	___xxtofl@arg^0,f,c
  4054   000CB0                     l1143:
  4055   000CB0  0E00               	movlw	0
  4056   000CB2  140B               	andwf	___xxtofl@arg^0,w,c
  4057   000CB4  6E05               	movwf	??___xxtofl^0,c
  4058   000CB6  0E00               	movlw	0
  4059   000CB8  140C               	andwf	(___xxtofl@arg+1)^0,w,c
  4060   000CBA  6E06               	movwf	(??___xxtofl+1)^0,c
  4061   000CBC  0E00               	movlw	0
  4062   000CBE  140D               	andwf	(___xxtofl@arg+2)^0,w,c
  4063   000CC0  6E07               	movwf	(??___xxtofl+2)^0,c
  4064   000CC2  0EFF               	movlw	255
  4065   000CC4  140E               	andwf	(___xxtofl@arg+3)^0,w,c
  4066   000CC6  6E08               	movwf	(??___xxtofl+3)^0,c
  4067   000CC8  5005               	movf	??___xxtofl^0,w,c
  4068   000CCA  1006               	iorwf	(??___xxtofl+1)^0,w,c
  4069   000CCC  1007               	iorwf	(??___xxtofl+2)^0,w,c
  4070   000CCE  1008               	iorwf	(??___xxtofl+3)^0,w,c
  4071   000CD0  A4D8               	btfss	status,2,c
  4072   000CD2  EF6D  F006         	goto	u1541
  4073   000CD6  EF6F  F006         	goto	u1540
  4074   000CDA                     u1541:
  4075   000CDA  EF4C  F006         	goto	l2384
  4076   000CDE                     u1540:
  4077   000CDE  EF77  F006         	goto	l2392
  4078   000CE2                     l2390:
  4079   000CE2  060A               	decf	___xxtofl@exp^0,f,c
  4080   000CE4  90D8               	bcf	status,0,c
  4081   000CE6  360B               	rlcf	___xxtofl@arg^0,f,c
  4082   000CE8  360C               	rlcf	(___xxtofl@arg+1)^0,f,c
  4083   000CEA  360D               	rlcf	(___xxtofl@arg+2)^0,f,c
  4084   000CEC  360E               	rlcf	(___xxtofl@arg+3)^0,f,c
  4085   000CEE                     l2392:
  4086   000CEE  BE0D               	btfsc	(___xxtofl@arg+2)^0,7,c
  4087   000CF0  EF7C  F006         	goto	u1551
  4088   000CF4  EF7E  F006         	goto	u1550
  4089   000CF8                     u1551:
  4090   000CF8  EF86  F006         	goto	l1150
  4091   000CFC                     u1550:
  4092   000CFC  0E02               	movlw	2
  4093   000CFE  600A               	cpfslt	___xxtofl@exp^0,c
  4094   000D00  EF84  F006         	goto	u1561
  4095   000D04  EF86  F006         	goto	u1560
  4096   000D08                     u1561:
  4097   000D08  EF71  F006         	goto	l2390
  4098   000D0C                     u1560:
  4099   000D0C                     l1150:
  4100   000D0C  B00A               	btfsc	___xxtofl@exp^0,0,c
  4101   000D0E  EF8B  F006         	goto	u1571
  4102   000D12  EF8D  F006         	goto	u1570
  4103   000D16                     u1571:
  4104   000D16  EF8E  F006         	goto	l2398
  4105   000D1A                     u1570:
  4106   000D1A  9E0D               	bcf	(___xxtofl@arg+2)^0,7,c
  4107   000D1C                     l2398:
  4108   000D1C  90D8               	bcf	status,0,c
  4109   000D1E  320A               	rrcf	___xxtofl@exp^0,f,c
  4110   000D20  C00A  F005         	movff	___xxtofl@exp,??___xxtofl
  4111   000D24  6A06               	clrf	(??___xxtofl+1)^0,c
  4112   000D26  6A07               	clrf	(??___xxtofl+2)^0,c
  4113   000D28  6A08               	clrf	(??___xxtofl+3)^0,c
  4114   000D2A  C005  F008         	movff	??___xxtofl,??___xxtofl+3
  4115   000D2E  6A07               	clrf	(??___xxtofl+2)^0,c
  4116   000D30  6A06               	clrf	(??___xxtofl+1)^0,c
  4117   000D32  6A05               	clrf	??___xxtofl^0,c
  4118   000D34  5005               	movf	??___xxtofl^0,w,c
  4119   000D36  120B               	iorwf	___xxtofl@arg^0,f,c
  4120   000D38  5006               	movf	(??___xxtofl+1)^0,w,c
  4121   000D3A  120C               	iorwf	(___xxtofl@arg+1)^0,f,c
  4122   000D3C  5007               	movf	(??___xxtofl+2)^0,w,c
  4123   000D3E  120D               	iorwf	(___xxtofl@arg+2)^0,f,c
  4124   000D40  5008               	movf	(??___xxtofl+3)^0,w,c
  4125   000D42  120E               	iorwf	(___xxtofl@arg+3)^0,f,c
  4126   000D44  5009               	movf	___xxtofl@sign^0,w,c
  4127   000D46  B4D8               	btfsc	status,2,c
  4128   000D48  EFA8  F006         	goto	u1581
  4129   000D4C  EFAA  F006         	goto	u1580
  4130   000D50                     u1581:
  4131   000D50  EFB2  F006         	goto	l2408
  4132   000D54                     u1580:
  4133   000D54  BE04               	btfsc	(___xxtofl@val+3)^0,7,c
  4134   000D56  EFB1  F006         	goto	u1590
  4135   000D5A  EFAF  F006         	goto	u1591
  4136   000D5E                     u1591:
  4137   000D5E  EFB2  F006         	goto	l2408
  4138   000D62                     u1590:
  4139   000D62  8E0E               	bsf	(___xxtofl@arg+3)^0,7,c
  4140   000D64                     l2408:
  4141   000D64  C00B  F001         	movff	___xxtofl@arg,?___xxtofl
  4142   000D68  C00C  F002         	movff	___xxtofl@arg+1,?___xxtofl+1
  4143   000D6C  C00D  F003         	movff	___xxtofl@arg+2,?___xxtofl+2
  4144   000D70  C00E  F004         	movff	___xxtofl@arg+3,?___xxtofl+3
  4145   000D74                     l1139:
  4146   000D74  0012               	return		;funcret
  4147   000D76                     __end_of___xxtofl:
  4148                           	callstack 0
  4149                           
  4150 ;; *************** function ___fldiv *****************
  4151 ;; Defined at:
  4152 ;;		line 11 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\sprcdiv.c"
  4153 ;; Parameters:    Size  Location     Type
  4154 ;;  b               4   14[COMRAM] unsigned char 
  4155 ;;  a               4   18[COMRAM] unsigned char 
  4156 ;; Auto vars:     Size  Location     Type
  4157 ;;  grs             4   33[COMRAM] unsigned long 
  4158 ;;  rem             4   26[COMRAM] unsigned long 
  4159 ;;  new_exp         2   31[COMRAM] short 
  4160 ;;  aexp            1   38[COMRAM] unsigned char 
  4161 ;;  bexp            1   37[COMRAM] unsigned char 
  4162 ;;  sign            1   30[COMRAM] unsigned char 
  4163 ;; Return value:  Size  Location     Type
  4164 ;;                  4   14[COMRAM] unsigned char 
  4165 ;; Registers used:
  4166 ;;		wreg, status,2, status,0
  4167 ;; Tracked objects:
  4168 ;;		On entry : 0/0
  4169 ;;		On exit  : 0/0
  4170 ;;		Unchanged: 0/0
  4171 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4172 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4173 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4174 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4175 ;;      Totals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4176 ;;Total ram usage:       25 bytes
  4177 ;; Hardware stack levels used: 1
  4178 ;; Hardware stack levels required when called: 1
  4179 ;; This function calls:
  4180 ;;		Nothing
  4181 ;; This function is called by:
  4182 ;;		_colourcards_normaliseRGBC
  4183 ;; This function uses a non-reentrant model
  4184 ;;
  4185                           
  4186                           	psect	text23
  4187   000544                     __ptext23:
  4188                           	callstack 0
  4189   000544                     ___fldiv:
  4190                           	callstack 27
  4191   000544  5012               	movf	(___fldiv@b+3)^0,w,c
  4192   000546  0B80               	andlw	128
  4193   000548  6E1F               	movwf	___fldiv@sign^0,c
  4194   00054A  5012               	movf	(___fldiv@b+3)^0,w,c
  4195   00054C  2412               	addwf	(___fldiv@b+3)^0,w,c
  4196   00054E  6E26               	movwf	___fldiv@bexp^0,c
  4197   000550  AE11               	btfss	(___fldiv@b+2)^0,7,c
  4198   000552  EFAD  F002         	goto	u1271
  4199   000556  EFAF  F002         	goto	u1270
  4200   00055A                     u1271:
  4201   00055A  EFB0  F002         	goto	l2234
  4202   00055E                     u1270:
  4203   00055E  8026               	bsf	___fldiv@bexp^0,0,c
  4204   000560                     l2234:
  4205   000560  5026               	movf	___fldiv@bexp^0,w,c
  4206   000562  B4D8               	btfsc	status,2,c
  4207   000564  EFB6  F002         	goto	u1281
  4208   000568  EFB8  F002         	goto	u1280
  4209   00056C                     u1281:
  4210   00056C  EFCD  F002         	goto	l2244
  4211   000570                     u1280:
  4212   000570  2826               	incf	___fldiv@bexp^0,w,c
  4213   000572  A4D8               	btfss	status,2,c
  4214   000574  EFBE  F002         	goto	u1291
  4215   000578  EFC0  F002         	goto	u1290
  4216   00057C                     u1291:
  4217   00057C  EFC8  F002         	goto	l2240
  4218   000580                     u1290:
  4219   000580  0E00               	movlw	0
  4220   000582  6E0F               	movwf	___fldiv@b^0,c
  4221   000584  0E00               	movlw	0
  4222   000586  6E10               	movwf	(___fldiv@b+1)^0,c
  4223   000588  0E00               	movlw	0
  4224   00058A  6E11               	movwf	(___fldiv@b+2)^0,c
  4225   00058C  0E00               	movlw	0
  4226   00058E  6E12               	movwf	(___fldiv@b+3)^0,c
  4227   000590                     l2240:
  4228   000590  8E11               	bsf	(___fldiv@b+2)^0,7,c
  4229   000592  0E00               	movlw	0
  4230   000594  6E12               	movwf	(___fldiv@b+3)^0,c
  4231   000596  EFD5  F002         	goto	l2246
  4232   00059A                     l2244:
  4233   00059A  0E00               	movlw	0
  4234   00059C  6E0F               	movwf	___fldiv@b^0,c
  4235   00059E  0E00               	movlw	0
  4236   0005A0  6E10               	movwf	(___fldiv@b+1)^0,c
  4237   0005A2  0E00               	movlw	0
  4238   0005A4  6E11               	movwf	(___fldiv@b+2)^0,c
  4239   0005A6  0E00               	movlw	0
  4240   0005A8  6E12               	movwf	(___fldiv@b+3)^0,c
  4241   0005AA                     l2246:
  4242   0005AA  5016               	movf	(___fldiv@a+3)^0,w,c
  4243   0005AC  0B80               	andlw	128
  4244   0005AE  1A1F               	xorwf	___fldiv@sign^0,f,c
  4245   0005B0  5016               	movf	(___fldiv@a+3)^0,w,c
  4246   0005B2  2416               	addwf	(___fldiv@a+3)^0,w,c
  4247   0005B4  6E27               	movwf	___fldiv@aexp^0,c
  4248   0005B6  AE15               	btfss	(___fldiv@a+2)^0,7,c
  4249   0005B8  EFE0  F002         	goto	u1301
  4250   0005BC  EFE2  F002         	goto	u1300
  4251   0005C0                     u1301:
  4252   0005C0  EFE3  F002         	goto	l2254
  4253   0005C4                     u1300:
  4254   0005C4  8027               	bsf	___fldiv@aexp^0,0,c
  4255   0005C6                     l2254:
  4256   0005C6  5027               	movf	___fldiv@aexp^0,w,c
  4257   0005C8  B4D8               	btfsc	status,2,c
  4258   0005CA  EFE9  F002         	goto	u1311
  4259   0005CE  EFEB  F002         	goto	u1310
  4260   0005D2                     u1311:
  4261   0005D2  EF00  F003         	goto	l2264
  4262   0005D6                     u1310:
  4263   0005D6  2827               	incf	___fldiv@aexp^0,w,c
  4264   0005D8  A4D8               	btfss	status,2,c
  4265   0005DA  EFF1  F002         	goto	u1321
  4266   0005DE  EFF3  F002         	goto	u1320
  4267   0005E2                     u1321:
  4268   0005E2  EFFB  F002         	goto	l2260
  4269   0005E6                     u1320:
  4270   0005E6  0E00               	movlw	0
  4271   0005E8  6E13               	movwf	___fldiv@a^0,c
  4272   0005EA  0E00               	movlw	0
  4273   0005EC  6E14               	movwf	(___fldiv@a+1)^0,c
  4274   0005EE  0E00               	movlw	0
  4275   0005F0  6E15               	movwf	(___fldiv@a+2)^0,c
  4276   0005F2  0E00               	movlw	0
  4277   0005F4  6E16               	movwf	(___fldiv@a+3)^0,c
  4278   0005F6                     l2260:
  4279   0005F6  8E15               	bsf	(___fldiv@a+2)^0,7,c
  4280   0005F8  0E00               	movlw	0
  4281   0005FA  6E16               	movwf	(___fldiv@a+3)^0,c
  4282   0005FC  EF08  F003         	goto	l2266
  4283   000600                     l2264:
  4284   000600  0E00               	movlw	0
  4285   000602  6E13               	movwf	___fldiv@a^0,c
  4286   000604  0E00               	movlw	0
  4287   000606  6E14               	movwf	(___fldiv@a+1)^0,c
  4288   000608  0E00               	movlw	0
  4289   00060A  6E15               	movwf	(___fldiv@a+2)^0,c
  4290   00060C  0E00               	movlw	0
  4291   00060E  6E16               	movwf	(___fldiv@a+3)^0,c
  4292   000610                     l2266:
  4293   000610  5013               	movf	___fldiv@a^0,w,c
  4294   000612  1014               	iorwf	(___fldiv@a+1)^0,w,c
  4295   000614  1015               	iorwf	(___fldiv@a+2)^0,w,c
  4296   000616  1016               	iorwf	(___fldiv@a+3)^0,w,c
  4297   000618  A4D8               	btfss	status,2,c
  4298   00061A  EF11  F003         	goto	u1331
  4299   00061E  EF13  F003         	goto	u1330
  4300   000622                     u1331:
  4301   000622  EF2B  F003         	goto	l2278
  4302   000626                     u1330:
  4303   000626  0E00               	movlw	0
  4304   000628  6E0F               	movwf	___fldiv@b^0,c
  4305   00062A  0E00               	movlw	0
  4306   00062C  6E10               	movwf	(___fldiv@b+1)^0,c
  4307   00062E  0E00               	movlw	0
  4308   000630  6E11               	movwf	(___fldiv@b+2)^0,c
  4309   000632  0E00               	movlw	0
  4310   000634  6E12               	movwf	(___fldiv@b+3)^0,c
  4311   000636  0E80               	movlw	128
  4312   000638  1211               	iorwf	(___fldiv@b+2)^0,f,c
  4313   00063A  0E7F               	movlw	127
  4314   00063C  1212               	iorwf	(___fldiv@b+3)^0,f,c
  4315   00063E                     l2272:
  4316   00063E  501F               	movf	___fldiv@sign^0,w,c
  4317   000640  1212               	iorwf	(___fldiv@b+3)^0,f,c
  4318   000642  C00F  F00F         	movff	___fldiv@b,?___fldiv
  4319   000646  C010  F010         	movff	___fldiv@b+1,?___fldiv+1
  4320   00064A  C011  F011         	movff	___fldiv@b+2,?___fldiv+2
  4321   00064E  C012  F012         	movff	___fldiv@b+3,?___fldiv+3
  4322   000652  EF6E  F004         	goto	l1063
  4323   000656                     l2278:
  4324   000656  5026               	movf	___fldiv@bexp^0,w,c
  4325   000658  A4D8               	btfss	status,2,c
  4326   00065A  EF31  F003         	goto	u1341
  4327   00065E  EF33  F003         	goto	u1340
  4328   000662                     u1341:
  4329   000662  EF3D  F003         	goto	l2286
  4330   000666                     u1340:
  4331   000666  0E00               	movlw	0
  4332   000668  6E0F               	movwf	?___fldiv^0,c
  4333   00066A  0E00               	movlw	0
  4334   00066C  6E10               	movwf	(?___fldiv+1)^0,c
  4335   00066E  0E00               	movlw	0
  4336   000670  6E11               	movwf	(?___fldiv+2)^0,c
  4337   000672  0E00               	movlw	0
  4338   000674  6E12               	movwf	(?___fldiv+3)^0,c
  4339   000676  EF6E  F004         	goto	l1063
  4340   00067A                     l2286:
  4341   00067A  5027               	movf	___fldiv@aexp^0,w,c
  4342   00067C  C026  F017         	movff	___fldiv@bexp,??___fldiv
  4343   000680  6A18               	clrf	(??___fldiv+1)^0,c
  4344   000682  5E17               	subwf	??___fldiv^0,f,c
  4345   000684  0E00               	movlw	0
  4346   000686  5A18               	subwfb	(??___fldiv+1)^0,f,c
  4347   000688  0E7F               	movlw	127
  4348   00068A  2417               	addwf	??___fldiv^0,w,c
  4349   00068C  6E20               	movwf	___fldiv@new_exp^0,c
  4350   00068E  0E00               	movlw	0
  4351   000690  2018               	addwfc	(??___fldiv+1)^0,w,c
  4352   000692  6E21               	movwf	(___fldiv@new_exp+1)^0,c
  4353   000694  C00F  F01B         	movff	___fldiv@b,___fldiv@rem
  4354   000698  C010  F01C         	movff	___fldiv@b+1,___fldiv@rem+1
  4355   00069C  C011  F01D         	movff	___fldiv@b+2,___fldiv@rem+2
  4356   0006A0  C012  F01E         	movff	___fldiv@b+3,___fldiv@rem+3
  4357   0006A4  0E00               	movlw	0
  4358   0006A6  6E0F               	movwf	___fldiv@b^0,c
  4359   0006A8  0E00               	movlw	0
  4360   0006AA  6E10               	movwf	(___fldiv@b+1)^0,c
  4361   0006AC  0E00               	movlw	0
  4362   0006AE  6E11               	movwf	(___fldiv@b+2)^0,c
  4363   0006B0  0E00               	movlw	0
  4364   0006B2  6E12               	movwf	(___fldiv@b+3)^0,c
  4365   0006B4  0E00               	movlw	0
  4366   0006B6  6E22               	movwf	___fldiv@grs^0,c
  4367   0006B8  0E00               	movlw	0
  4368   0006BA  6E23               	movwf	(___fldiv@grs+1)^0,c
  4369   0006BC  0E00               	movlw	0
  4370   0006BE  6E24               	movwf	(___fldiv@grs+2)^0,c
  4371   0006C0  0E00               	movlw	0
  4372   0006C2  6E25               	movwf	(___fldiv@grs+3)^0,c
  4373   0006C4  0E00               	movlw	0
  4374   0006C6  6E27               	movwf	___fldiv@aexp^0,c
  4375   0006C8  EF9E  F003         	goto	l1065
  4376   0006CC                     l2296:
  4377   0006CC  5027               	movf	___fldiv@aexp^0,w,c
  4378   0006CE  B4D8               	btfsc	status,2,c
  4379   0006D0  EF6C  F003         	goto	u1351
  4380   0006D4  EF6E  F003         	goto	u1350
  4381   0006D8                     u1351:
  4382   0006D8  EF85  F003         	goto	l2304
  4383   0006DC                     u1350:
  4384   0006DC  90D8               	bcf	status,0,c
  4385   0006DE  361B               	rlcf	___fldiv@rem^0,f,c
  4386   0006E0  361C               	rlcf	(___fldiv@rem+1)^0,f,c
  4387   0006E2  361D               	rlcf	(___fldiv@rem+2)^0,f,c
  4388   0006E4  361E               	rlcf	(___fldiv@rem+3)^0,f,c
  4389   0006E6  90D8               	bcf	status,0,c
  4390   0006E8  360F               	rlcf	___fldiv@b^0,f,c
  4391   0006EA  3610               	rlcf	(___fldiv@b+1)^0,f,c
  4392   0006EC  3611               	rlcf	(___fldiv@b+2)^0,f,c
  4393   0006EE  3612               	rlcf	(___fldiv@b+3)^0,f,c
  4394   0006F0  AE25               	btfss	(___fldiv@grs+3)^0,7,c
  4395   0006F2  EF7D  F003         	goto	u1361
  4396   0006F6  EF7F  F003         	goto	u1360
  4397   0006FA                     u1361:
  4398   0006FA  EF80  F003         	goto	l1068
  4399   0006FE                     u1360:
  4400   0006FE  800F               	bsf	___fldiv@b^0,0,c
  4401   000700                     l1068:
  4402   000700  90D8               	bcf	status,0,c
  4403   000702  3622               	rlcf	___fldiv@grs^0,f,c
  4404   000704  3623               	rlcf	(___fldiv@grs+1)^0,f,c
  4405   000706  3624               	rlcf	(___fldiv@grs+2)^0,f,c
  4406   000708  3625               	rlcf	(___fldiv@grs+3)^0,f,c
  4407   00070A                     l2304:
  4408   00070A  5013               	movf	___fldiv@a^0,w,c
  4409   00070C  5C1B               	subwf	___fldiv@rem^0,w,c
  4410   00070E  5014               	movf	(___fldiv@a+1)^0,w,c
  4411   000710  581C               	subwfb	(___fldiv@rem+1)^0,w,c
  4412   000712  5015               	movf	(___fldiv@a+2)^0,w,c
  4413   000714  581D               	subwfb	(___fldiv@rem+2)^0,w,c
  4414   000716  5016               	movf	(___fldiv@a+3)^0,w,c
  4415   000718  581E               	subwfb	(___fldiv@rem+3)^0,w,c
  4416   00071A  A0D8               	btfss	status,0,c
  4417   00071C  EF92  F003         	goto	u1371
  4418   000720  EF94  F003         	goto	u1370
  4419   000724                     u1371:
  4420   000724  EF9D  F003         	goto	l2310
  4421   000728                     u1370:
  4422   000728  8C25               	bsf	(___fldiv@grs+3)^0,6,c
  4423   00072A  5013               	movf	___fldiv@a^0,w,c
  4424   00072C  5E1B               	subwf	___fldiv@rem^0,f,c
  4425   00072E  5014               	movf	(___fldiv@a+1)^0,w,c
  4426   000730  5A1C               	subwfb	(___fldiv@rem+1)^0,f,c
  4427   000732  5015               	movf	(___fldiv@a+2)^0,w,c
  4428   000734  5A1D               	subwfb	(___fldiv@rem+2)^0,f,c
  4429   000736  5016               	movf	(___fldiv@a+3)^0,w,c
  4430   000738  5A1E               	subwfb	(___fldiv@rem+3)^0,f,c
  4431   00073A                     l2310:
  4432   00073A  2A27               	incf	___fldiv@aexp^0,f,c
  4433   00073C                     l1065:
  4434   00073C  0E19               	movlw	25
  4435   00073E  6427               	cpfsgt	___fldiv@aexp^0,c
  4436   000740  EFA4  F003         	goto	u1381
  4437   000744  EFA6  F003         	goto	u1380
  4438   000748                     u1381:
  4439   000748  EF66  F003         	goto	l2296
  4440   00074C                     u1380:
  4441   00074C  501B               	movf	___fldiv@rem^0,w,c
  4442   00074E  101C               	iorwf	(___fldiv@rem+1)^0,w,c
  4443   000750  101D               	iorwf	(___fldiv@rem+2)^0,w,c
  4444   000752  101E               	iorwf	(___fldiv@rem+3)^0,w,c
  4445   000754  B4D8               	btfsc	status,2,c
  4446   000756  EFAF  F003         	goto	u1391
  4447   00075A  EFB1  F003         	goto	u1390
  4448   00075E                     u1391:
  4449   00075E  EFC9  F003         	goto	l2322
  4450   000762                     u1390:
  4451   000762  8022               	bsf	___fldiv@grs^0,0,c
  4452   000764  EFC9  F003         	goto	l2322
  4453   000768                     l2316:
  4454   000768  90D8               	bcf	status,0,c
  4455   00076A  360F               	rlcf	___fldiv@b^0,f,c
  4456   00076C  3610               	rlcf	(___fldiv@b+1)^0,f,c
  4457   00076E  3611               	rlcf	(___fldiv@b+2)^0,f,c
  4458   000770  3612               	rlcf	(___fldiv@b+3)^0,f,c
  4459   000772  AE25               	btfss	(___fldiv@grs+3)^0,7,c
  4460   000774  EFBE  F003         	goto	u1401
  4461   000778  EFC0  F003         	goto	u1400
  4462   00077C                     u1401:
  4463   00077C  EFC1  F003         	goto	l1074
  4464   000780                     u1400:
  4465   000780  800F               	bsf	___fldiv@b^0,0,c
  4466   000782                     l1074:
  4467   000782  90D8               	bcf	status,0,c
  4468   000784  3622               	rlcf	___fldiv@grs^0,f,c
  4469   000786  3623               	rlcf	(___fldiv@grs+1)^0,f,c
  4470   000788  3624               	rlcf	(___fldiv@grs+2)^0,f,c
  4471   00078A  3625               	rlcf	(___fldiv@grs+3)^0,f,c
  4472   00078C  0620               	decf	___fldiv@new_exp^0,f,c
  4473   00078E  A0D8               	btfss	status,0,c
  4474   000790  0621               	decf	(___fldiv@new_exp+1)^0,f,c
  4475   000792                     l2322:
  4476   000792  AE11               	btfss	(___fldiv@b+2)^0,7,c
  4477   000794  EFCE  F003         	goto	u1411
  4478   000798  EFD0  F003         	goto	u1410
  4479   00079C                     u1411:
  4480   00079C  EFB4  F003         	goto	l2316
  4481   0007A0                     u1410:
  4482   0007A0  0E00               	movlw	0
  4483   0007A2  6E27               	movwf	___fldiv@aexp^0,c
  4484   0007A4  AE25               	btfss	(___fldiv@grs+3)^0,7,c
  4485   0007A6  EFD7  F003         	goto	u1421
  4486   0007AA  EFD9  F003         	goto	u1420
  4487   0007AE                     u1421:
  4488   0007AE  EFFD  F003         	goto	l1076
  4489   0007B2                     u1420:
  4490   0007B2  0EFF               	movlw	255
  4491   0007B4  1422               	andwf	___fldiv@grs^0,w,c
  4492   0007B6  6E17               	movwf	??___fldiv^0,c
  4493   0007B8  0EFF               	movlw	255
  4494   0007BA  1423               	andwf	(___fldiv@grs+1)^0,w,c
  4495   0007BC  6E18               	movwf	(??___fldiv+1)^0,c
  4496   0007BE  0EFF               	movlw	255
  4497   0007C0  1424               	andwf	(___fldiv@grs+2)^0,w,c
  4498   0007C2  6E19               	movwf	(??___fldiv+2)^0,c
  4499   0007C4  0E7F               	movlw	127
  4500   0007C6  1425               	andwf	(___fldiv@grs+3)^0,w,c
  4501   0007C8  6E1A               	movwf	(??___fldiv+3)^0,c
  4502   0007CA  5017               	movf	??___fldiv^0,w,c
  4503   0007CC  1018               	iorwf	(??___fldiv+1)^0,w,c
  4504   0007CE  1019               	iorwf	(??___fldiv+2)^0,w,c
  4505   0007D0  101A               	iorwf	(??___fldiv+3)^0,w,c
  4506   0007D2  B4D8               	btfsc	status,2,c
  4507   0007D4  EFEE  F003         	goto	u1431
  4508   0007D8  EFF0  F003         	goto	u1430
  4509   0007DC                     u1431:
  4510   0007DC  EFF4  F003         	goto	l1077
  4511   0007E0                     u1430:
  4512   0007E0                     l2330:
  4513   0007E0  0E01               	movlw	1
  4514   0007E2  6E27               	movwf	___fldiv@aexp^0,c
  4515   0007E4  EFFD  F003         	goto	l1076
  4516   0007E8                     l1077:
  4517   0007E8  A00F               	btfss	___fldiv@b^0,0,c
  4518   0007EA  EFF9  F003         	goto	u1441
  4519   0007EE  EFFB  F003         	goto	u1440
  4520   0007F2                     u1441:
  4521   0007F2  EFFD  F003         	goto	l1076
  4522   0007F6                     u1440:
  4523   0007F6  EFF0  F003         	goto	l2330
  4524   0007FA                     l1076:
  4525   0007FA  5027               	movf	___fldiv@aexp^0,w,c
  4526   0007FC  B4D8               	btfsc	status,2,c
  4527   0007FE  EF03  F004         	goto	u1451
  4528   000802  EF05  F004         	goto	u1450
  4529   000806                     u1451:
  4530   000806  EF29  F004         	goto	l2342
  4531   00080A                     u1450:
  4532   00080A  0E01               	movlw	1
  4533   00080C  260F               	addwf	___fldiv@b^0,f,c
  4534   00080E  0E00               	movlw	0
  4535   000810  2210               	addwfc	(___fldiv@b+1)^0,f,c
  4536   000812  2211               	addwfc	(___fldiv@b+2)^0,f,c
  4537   000814  2212               	addwfc	(___fldiv@b+3)^0,f,c
  4538   000816  A012               	btfss	(___fldiv@b+3)^0,0,c
  4539   000818  EF10  F004         	goto	u1461
  4540   00081C  EF12  F004         	goto	u1460
  4541   000820                     u1461:
  4542   000820  EF29  F004         	goto	l2342
  4543   000824                     u1460:
  4544   000824  C00F  F017         	movff	___fldiv@b,??___fldiv
  4545   000828  C010  F018         	movff	___fldiv@b+1,??___fldiv+1
  4546   00082C  C011  F019         	movff	___fldiv@b+2,??___fldiv+2
  4547   000830  C012  F01A         	movff	___fldiv@b+3,??___fldiv+3
  4548   000834  341A               	rlcf	(??___fldiv+3)^0,w,c
  4549   000836  321A               	rrcf	(??___fldiv+3)^0,f,c
  4550   000838  3219               	rrcf	(??___fldiv+2)^0,f,c
  4551   00083A  3218               	rrcf	(??___fldiv+1)^0,f,c
  4552   00083C  3217               	rrcf	??___fldiv^0,f,c
  4553   00083E  C017  F00F         	movff	??___fldiv,___fldiv@b
  4554   000842  C018  F010         	movff	??___fldiv+1,___fldiv@b+1
  4555   000846  C019  F011         	movff	??___fldiv+2,___fldiv@b+2
  4556   00084A  C01A  F012         	movff	??___fldiv+3,___fldiv@b+3
  4557   00084E  4A20               	infsnz	___fldiv@new_exp^0,f,c
  4558   000850  2A21               	incf	(___fldiv@new_exp+1)^0,f,c
  4559   000852                     l2342:
  4560   000852  BE21               	btfsc	(___fldiv@new_exp+1)^0,7,c
  4561   000854  EF34  F004         	goto	u1471
  4562   000858  5021               	movf	(___fldiv@new_exp+1)^0,w,c
  4563   00085A  E108               	bnz	u1470
  4564   00085C  2820               	incf	___fldiv@new_exp^0,w,c
  4565   00085E  A0D8               	btfss	status,0,c
  4566   000860  EF34  F004         	goto	u1471
  4567   000864  EF36  F004         	goto	u1470
  4568   000868                     u1471:
  4569   000868  EF41  F004         	goto	l2346
  4570   00086C                     u1470:
  4571   00086C  0E00               	movlw	0
  4572   00086E  6E21               	movwf	(___fldiv@new_exp+1)^0,c
  4573   000870  6820               	setf	___fldiv@new_exp^0,c
  4574   000872  0E00               	movlw	0
  4575   000874  6E0F               	movwf	___fldiv@b^0,c
  4576   000876  0E00               	movlw	0
  4577   000878  6E10               	movwf	(___fldiv@b+1)^0,c
  4578   00087A  0E00               	movlw	0
  4579   00087C  6E11               	movwf	(___fldiv@b+2)^0,c
  4580   00087E  0E00               	movlw	0
  4581   000880  6E12               	movwf	(___fldiv@b+3)^0,c
  4582   000882                     l2346:
  4583   000882  BE21               	btfsc	(___fldiv@new_exp+1)^0,7,c
  4584   000884  EF4E  F004         	goto	u1480
  4585   000888  5021               	movf	(___fldiv@new_exp+1)^0,w,c
  4586   00088A  E106               	bnz	u1481
  4587   00088C  0420               	decf	___fldiv@new_exp^0,w,c
  4588   00088E  B0D8               	btfsc	status,0,c
  4589   000890  EF4C  F004         	goto	u1481
  4590   000894  EF4E  F004         	goto	u1480
  4591   000898                     u1481:
  4592   000898  EF5C  F004         	goto	l2350
  4593   00089C                     u1480:
  4594   00089C  0E00               	movlw	0
  4595   00089E  6E21               	movwf	(___fldiv@new_exp+1)^0,c
  4596   0008A0  0E00               	movlw	0
  4597   0008A2  6E20               	movwf	___fldiv@new_exp^0,c
  4598   0008A4  0E00               	movlw	0
  4599   0008A6  6E0F               	movwf	___fldiv@b^0,c
  4600   0008A8  0E00               	movlw	0
  4601   0008AA  6E10               	movwf	(___fldiv@b+1)^0,c
  4602   0008AC  0E00               	movlw	0
  4603   0008AE  6E11               	movwf	(___fldiv@b+2)^0,c
  4604   0008B0  0E00               	movlw	0
  4605   0008B2  6E12               	movwf	(___fldiv@b+3)^0,c
  4606   0008B4  0E00               	movlw	0
  4607   0008B6  6E1F               	movwf	___fldiv@sign^0,c
  4608   0008B8                     l2350:
  4609   0008B8  C020  F026         	movff	___fldiv@new_exp,___fldiv@bexp
  4610   0008BC  A026               	btfss	___fldiv@bexp^0,0,c
  4611   0008BE  EF63  F004         	goto	u1491
  4612   0008C2  EF65  F004         	goto	u1490
  4613   0008C6                     u1491:
  4614   0008C6  EF68  F004         	goto	l2356
  4615   0008CA                     u1490:
  4616   0008CA  8E11               	bsf	(___fldiv@b+2)^0,7,c
  4617   0008CC  EF69  F004         	goto	l2358
  4618   0008D0                     l2356:
  4619   0008D0  9E11               	bcf	(___fldiv@b+2)^0,7,c
  4620   0008D2                     l2358:
  4621   0008D2  90D8               	bcf	status,0,c
  4622   0008D4  3026               	rrcf	___fldiv@bexp^0,w,c
  4623   0008D6  6E12               	movwf	(___fldiv@b+3)^0,c
  4624   0008D8  EF1F  F003         	goto	l2272
  4625   0008DC                     l1063:
  4626   0008DC  0012               	return		;funcret
  4627   0008DE                     __end_of___fldiv:
  4628                           	callstack 0
  4629                           
  4630 ;; *************** function ___flge *****************
  4631 ;; Defined at:
  4632 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\flge.c"
  4633 ;; Parameters:    Size  Location     Type
  4634 ;;  ff1             4    0[COMRAM] unsigned char 
  4635 ;;  ff2             4    4[COMRAM] unsigned char 
  4636 ;; Auto vars:     Size  Location     Type
  4637 ;;		None
  4638 ;; Return value:  Size  Location     Type
  4639 ;;		None               void
  4640 ;; Registers used:
  4641 ;;		wreg, status,2, status,0
  4642 ;; Tracked objects:
  4643 ;;		On entry : 0/0
  4644 ;;		On exit  : 0/0
  4645 ;;		Unchanged: 0/0
  4646 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4647 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4648 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4649 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4650 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4651 ;;Total ram usage:       12 bytes
  4652 ;; Hardware stack levels used: 1
  4653 ;; Hardware stack levels required when called: 1
  4654 ;; This function calls:
  4655 ;;		Nothing
  4656 ;; This function is called by:
  4657 ;;		_buggy_color_response
  4658 ;; This function uses a non-reentrant model
  4659 ;;
  4660                           
  4661                           	psect	text24
  4662   00127A                     __ptext24:
  4663                           	callstack 0
  4664   00127A                     ___flge:
  4665                           	callstack 28
  4666   00127A  0E00               	movlw	0
  4667   00127C  1401               	andwf	___flge@ff1^0,w,c
  4668   00127E  6E09               	movwf	??___flge^0,c
  4669   001280  0E00               	movlw	0
  4670   001282  1402               	andwf	(___flge@ff1+1)^0,w,c
  4671   001284  6E0A               	movwf	(??___flge+1)^0,c
  4672   001286  0E80               	movlw	128
  4673   001288  1403               	andwf	(___flge@ff1+2)^0,w,c
  4674   00128A  6E0B               	movwf	(??___flge+2)^0,c
  4675   00128C  0E7F               	movlw	127
  4676   00128E  1404               	andwf	(___flge@ff1+3)^0,w,c
  4677   001290  6E0C               	movwf	(??___flge+3)^0,c
  4678   001292  5009               	movf	??___flge^0,w,c
  4679   001294  100A               	iorwf	(??___flge+1)^0,w,c
  4680   001296  100B               	iorwf	(??___flge+2)^0,w,c
  4681   001298  100C               	iorwf	(??___flge+3)^0,w,c
  4682   00129A  A4D8               	btfss	status,2,c
  4683   00129C  EF52  F009         	goto	u1691
  4684   0012A0  EF54  F009         	goto	u1690
  4685   0012A4                     u1691:
  4686   0012A4  EF5C  F009         	goto	l2508
  4687   0012A8                     u1690:
  4688   0012A8  0E00               	movlw	0
  4689   0012AA  6E01               	movwf	___flge@ff1^0,c
  4690   0012AC  0E00               	movlw	0
  4691   0012AE  6E02               	movwf	(___flge@ff1+1)^0,c
  4692   0012B0  0E00               	movlw	0
  4693   0012B2  6E03               	movwf	(___flge@ff1+2)^0,c
  4694   0012B4  0E00               	movlw	0
  4695   0012B6  6E04               	movwf	(___flge@ff1+3)^0,c
  4696   0012B8                     l2508:
  4697   0012B8  0E00               	movlw	0
  4698   0012BA  1405               	andwf	___flge@ff2^0,w,c
  4699   0012BC  6E09               	movwf	??___flge^0,c
  4700   0012BE  0E00               	movlw	0
  4701   0012C0  1406               	andwf	(___flge@ff2+1)^0,w,c
  4702   0012C2  6E0A               	movwf	(??___flge+1)^0,c
  4703   0012C4  0E80               	movlw	128
  4704   0012C6  1407               	andwf	(___flge@ff2+2)^0,w,c
  4705   0012C8  6E0B               	movwf	(??___flge+2)^0,c
  4706   0012CA  0E7F               	movlw	127
  4707   0012CC  1408               	andwf	(___flge@ff2+3)^0,w,c
  4708   0012CE  6E0C               	movwf	(??___flge+3)^0,c
  4709   0012D0  5009               	movf	??___flge^0,w,c
  4710   0012D2  100A               	iorwf	(??___flge+1)^0,w,c
  4711   0012D4  100B               	iorwf	(??___flge+2)^0,w,c
  4712   0012D6  100C               	iorwf	(??___flge+3)^0,w,c
  4713   0012D8  A4D8               	btfss	status,2,c
  4714   0012DA  EF71  F009         	goto	u1701
  4715   0012DE  EF73  F009         	goto	u1700
  4716   0012E2                     u1701:
  4717   0012E2  EF7B  F009         	goto	l2512
  4718   0012E6                     u1700:
  4719   0012E6  0E00               	movlw	0
  4720   0012E8  6E05               	movwf	___flge@ff2^0,c
  4721   0012EA  0E00               	movlw	0
  4722   0012EC  6E06               	movwf	(___flge@ff2+1)^0,c
  4723   0012EE  0E00               	movlw	0
  4724   0012F0  6E07               	movwf	(___flge@ff2+2)^0,c
  4725   0012F2  0E00               	movlw	0
  4726   0012F4  6E08               	movwf	(___flge@ff2+3)^0,c
  4727   0012F6                     l2512:
  4728   0012F6  AE04               	btfss	(___flge@ff1+3)^0,7,c
  4729   0012F8  EF80  F009         	goto	u1711
  4730   0012FC  EF82  F009         	goto	u1710
  4731   001300                     u1711:
  4732   001300  EF8B  F009         	goto	l2516
  4733   001304                     u1710:
  4734   001304  6C01               	negf	___flge@ff1^0,c
  4735   001306  1E02               	comf	(___flge@ff1+1)^0,f,c
  4736   001308  B0D8               	btfsc	status,0,c
  4737   00130A  2A02               	incf	(___flge@ff1+1)^0,f,c
  4738   00130C  1E03               	comf	(___flge@ff1+2)^0,f,c
  4739   00130E  B0D8               	btfsc	status,0,c
  4740   001310  2A03               	incf	(___flge@ff1+2)^0,f,c
  4741   001312  0E80               	movlw	128
  4742   001314  5604               	subfwb	(___flge@ff1+3)^0,f,c
  4743   001316                     l2516:
  4744   001316  AE08               	btfss	(___flge@ff2+3)^0,7,c
  4745   001318  EF90  F009         	goto	u1721
  4746   00131C  EF92  F009         	goto	u1720
  4747   001320                     u1721:
  4748   001320  EF9B  F009         	goto	l746
  4749   001324                     u1720:
  4750   001324  6C05               	negf	___flge@ff2^0,c
  4751   001326  1E06               	comf	(___flge@ff2+1)^0,f,c
  4752   001328  B0D8               	btfsc	status,0,c
  4753   00132A  2A06               	incf	(___flge@ff2+1)^0,f,c
  4754   00132C  1E07               	comf	(___flge@ff2+2)^0,f,c
  4755   00132E  B0D8               	btfsc	status,0,c
  4756   001330  2A07               	incf	(___flge@ff2+2)^0,f,c
  4757   001332  0E80               	movlw	128
  4758   001334  5608               	subfwb	(___flge@ff2+3)^0,f,c
  4759   001336                     l746:
  4760   001336  0E00               	movlw	0
  4761   001338  1A01               	xorwf	___flge@ff1^0,f,c
  4762   00133A  0E00               	movlw	0
  4763   00133C  1A02               	xorwf	(___flge@ff1+1)^0,f,c
  4764   00133E  0E00               	movlw	0
  4765   001340  1A03               	xorwf	(___flge@ff1+2)^0,f,c
  4766   001342  0E80               	movlw	128
  4767   001344  1A04               	xorwf	(___flge@ff1+3)^0,f,c
  4768   001346  0E00               	movlw	0
  4769   001348  1A05               	xorwf	___flge@ff2^0,f,c
  4770   00134A  0E00               	movlw	0
  4771   00134C  1A06               	xorwf	(___flge@ff2+1)^0,f,c
  4772   00134E  0E00               	movlw	0
  4773   001350  1A07               	xorwf	(___flge@ff2+2)^0,f,c
  4774   001352  0E80               	movlw	128
  4775   001354  1A08               	xorwf	(___flge@ff2+3)^0,f,c
  4776   001356  5005               	movf	___flge@ff2^0,w,c
  4777   001358  5C01               	subwf	___flge@ff1^0,w,c
  4778   00135A  5006               	movf	(___flge@ff2+1)^0,w,c
  4779   00135C  5802               	subwfb	(___flge@ff1+1)^0,w,c
  4780   00135E  5007               	movf	(___flge@ff2+2)^0,w,c
  4781   001360  5803               	subwfb	(___flge@ff1+2)^0,w,c
  4782   001362  5008               	movf	(___flge@ff2+3)^0,w,c
  4783   001364  5804               	subwfb	(___flge@ff1+3)^0,w,c
  4784   001366  B0D8               	btfsc	status,0,c
  4785   001368  EFB8  F009         	goto	u1731
  4786   00136C  EFBA  F009         	goto	u1730
  4787   001370                     u1731:
  4788   001370  EFBD  F009         	goto	l2522
  4789   001374                     u1730:
  4790   001374  90D8               	bcf	status,0,c
  4791   001376  EFBE  F009         	goto	l751
  4792   00137A                     l2522:
  4793   00137A  80D8               	bsf	status,0,c
  4794   00137C                     l751:
  4795   00137C  0012               	return		;funcret
  4796   00137E                     __end_of___flge:
  4797                           	callstack 0
  4798                           
  4799 ;; *************** function _READcolor *****************
  4800 ;; Defined at:
  4801 ;;		line 89 in file "color.c"
  4802 ;; Parameters:    Size  Location     Type
  4803 ;;  c               2   11[COMRAM] PTR struct colors
  4804 ;;		 -> color(20), 
  4805 ;; Auto vars:     Size  Location     Type
  4806 ;;		None
  4807 ;; Return value:  Size  Location     Type
  4808 ;;                  1    wreg      void 
  4809 ;; Registers used:
  4810 ;;		wreg, status,2, status,0, cstack
  4811 ;; Tracked objects:
  4812 ;;		On entry : 0/0
  4813 ;;		On exit  : 0/0
  4814 ;;		Unchanged: 0/0
  4815 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4816 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4817 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4818 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4819 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4820 ;;Total ram usage:        2 bytes
  4821 ;; Hardware stack levels used: 1
  4822 ;; Hardware stack levels required when called: 4
  4823 ;; This function calls:
  4824 ;;		_color_read_Blue
  4825 ;;		_color_read_Clear
  4826 ;;		_color_read_Green
  4827 ;;		_color_read_Red
  4828 ;; This function is called by:
  4829 ;;		_buggy_color_response
  4830 ;; This function uses a non-reentrant model
  4831 ;;
  4832                           
  4833                           	psect	text25
  4834   001A9A                     __ptext25:
  4835                           	callstack 0
  4836   001A9A                     _READcolor:
  4837                           	callstack 25
  4838   001A9A                     
  4839                           ;color.c: 91:     color.R = color_read_Red();
  4840   001A9A  EC0C  F00C         	call	_color_read_Red	;wreg free
  4841   001A9E  C005  F03F         	movff	?_color_read_Red,_color
  4842   001AA2  C006  F040         	movff	?_color_read_Red+1,_color+1
  4843                           
  4844                           ;color.c: 92:     color.B = color_read_Blue();
  4845   001AA6  EC84  F00C         	call	_color_read_Blue	;wreg free
  4846   001AAA  C005  F041         	movff	?_color_read_Blue,_color+2
  4847   001AAE  C006  F042         	movff	?_color_read_Blue+1,_color+3
  4848                           
  4849                           ;color.c: 93:     color.G = color_read_Green();
  4850   001AB2  EC34  F00C         	call	_color_read_Green	;wreg free
  4851   001AB6  C005  F043         	movff	?_color_read_Green,_color+4
  4852   001ABA  C006  F044         	movff	?_color_read_Green+1,_color+5
  4853                           
  4854                           ;color.c: 94:     color.C = color_read_Clear();
  4855   001ABE  EC5C  F00C         	call	_color_read_Clear	;wreg free
  4856   001AC2  C005  F045         	movff	?_color_read_Clear,_color+6
  4857   001AC6  C006  F046         	movff	?_color_read_Clear+1,_color+7
  4858   001ACA  0012               	return		;funcret
  4859   001ACC                     __end_of_READcolor:
  4860                           	callstack 0
  4861                           
  4862 ;; *************** function _color_read_Red *****************
  4863 ;; Defined at:
  4864 ;;		line 29 in file "color.c"
  4865 ;; Parameters:    Size  Location     Type
  4866 ;;		None
  4867 ;; Auto vars:     Size  Location     Type
  4868 ;;  tmp             2    9[COMRAM] unsigned int 
  4869 ;; Return value:  Size  Location     Type
  4870 ;;                  2    4[COMRAM] unsigned int 
  4871 ;; Registers used:
  4872 ;;		wreg, status,2, status,0, cstack
  4873 ;; Tracked objects:
  4874 ;;		On entry : 0/0
  4875 ;;		On exit  : 0/0
  4876 ;;		Unchanged: 0/0
  4877 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4878 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4879 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4880 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4881 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4882 ;;Total ram usage:        7 bytes
  4883 ;; Hardware stack levels used: 1
  4884 ;; Hardware stack levels required when called: 3
  4885 ;; This function calls:
  4886 ;;		_I2C_2_Master_Read
  4887 ;;		_I2C_2_Master_RepStart
  4888 ;;		_I2C_2_Master_Start
  4889 ;;		_I2C_2_Master_Stop
  4890 ;;		_I2C_2_Master_Write
  4891 ;; This function is called by:
  4892 ;;		_READcolor
  4893 ;; This function uses a non-reentrant model
  4894 ;;
  4895                           
  4896                           	psect	text26
  4897   001818                     __ptext26:
  4898                           	callstack 0
  4899   001818                     _color_read_Red:
  4900                           	callstack 25
  4901   001818                     
  4902                           ;color.c: 31:  unsigned int tmp;;color.c: 32:  I2C_2_Master_Start();
  4903   001818  ECF3  F00D         	call	_I2C_2_Master_Start	;wreg free
  4904                           
  4905                           ;color.c: 33:  I2C_2_Master_Write(0x52 | 0x00);
  4906   00181C  0E52               	movlw	82
  4907   00181E  ECE8  F00D         	call	_I2C_2_Master_Write
  4908                           
  4909                           ;color.c: 35:  I2C_2_Master_Write(0xA0 | 0x16);
  4910   001822  0EB6               	movlw	182
  4911   001824  ECE8  F00D         	call	_I2C_2_Master_Write
  4912                           
  4913                           ;color.c: 36:  I2C_2_Master_RepStart();
  4914   001828  ECF8  F00D         	call	_I2C_2_Master_RepStart	;wreg free
  4915                           
  4916                           ;color.c: 37:  I2C_2_Master_Write(0x52 | 0x01);
  4917   00182C  0E53               	movlw	83
  4918   00182E  ECE8  F00D         	call	_I2C_2_Master_Write
  4919                           
  4920                           ;color.c: 38:  tmp=I2C_2_Master_Read(1);
  4921   001832  0E01               	movlw	1
  4922   001834  ECF3  F00C         	call	_I2C_2_Master_Read
  4923   001838  6E07               	movwf	??_color_read_Red^0,c
  4924   00183A  5007               	movf	??_color_read_Red^0,w,c
  4925   00183C  6E0A               	movwf	color_read_Red@tmp^0,c
  4926   00183E  6A0B               	clrf	(color_read_Red@tmp+1)^0,c
  4927                           
  4928                           ;color.c: 39:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  4929   001840  0E00               	movlw	0
  4930   001842  ECF3  F00C         	call	_I2C_2_Master_Read
  4931   001846  6E07               	movwf	??_color_read_Red^0,c
  4932   001848  5007               	movf	??_color_read_Red^0,w,c
  4933   00184A  6E09               	movwf	(??_color_read_Red+2)^0,c
  4934   00184C  6A08               	clrf	(??_color_read_Red+1)^0,c
  4935   00184E  500A               	movf	color_read_Red@tmp^0,w,c
  4936   001850  1008               	iorwf	(??_color_read_Red+1)^0,w,c
  4937   001852  6E0A               	movwf	color_read_Red@tmp^0,c
  4938   001854  500B               	movf	(color_read_Red@tmp+1)^0,w,c
  4939   001856  1009               	iorwf	(??_color_read_Red+2)^0,w,c
  4940   001858  6E0B               	movwf	(color_read_Red@tmp+1)^0,c
  4941                           
  4942                           ;color.c: 40:  I2C_2_Master_Stop();
  4943   00185A  ECEE  F00D         	call	_I2C_2_Master_Stop	;wreg free
  4944   00185E                     
  4945                           ;color.c: 41:  return tmp;
  4946   00185E  C00A  F005         	movff	color_read_Red@tmp,?_color_read_Red
  4947   001862  C00B  F006         	movff	color_read_Red@tmp+1,?_color_read_Red+1
  4948   001866  0012               	return		;funcret
  4949   001868                     __end_of_color_read_Red:
  4950                           	callstack 0
  4951                           
  4952 ;; *************** function _color_read_Green *****************
  4953 ;; Defined at:
  4954 ;;		line 59 in file "color.c"
  4955 ;; Parameters:    Size  Location     Type
  4956 ;;		None
  4957 ;; Auto vars:     Size  Location     Type
  4958 ;;  tmp             2    9[COMRAM] unsigned int 
  4959 ;; Return value:  Size  Location     Type
  4960 ;;                  2    4[COMRAM] unsigned int 
  4961 ;; Registers used:
  4962 ;;		wreg, status,2, status,0, cstack
  4963 ;; Tracked objects:
  4964 ;;		On entry : 0/0
  4965 ;;		On exit  : 0/0
  4966 ;;		Unchanged: 0/0
  4967 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4968 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4969 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4970 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4971 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4972 ;;Total ram usage:        7 bytes
  4973 ;; Hardware stack levels used: 1
  4974 ;; Hardware stack levels required when called: 3
  4975 ;; This function calls:
  4976 ;;		_I2C_2_Master_Read
  4977 ;;		_I2C_2_Master_RepStart
  4978 ;;		_I2C_2_Master_Start
  4979 ;;		_I2C_2_Master_Stop
  4980 ;;		_I2C_2_Master_Write
  4981 ;; This function is called by:
  4982 ;;		_READcolor
  4983 ;; This function uses a non-reentrant model
  4984 ;;
  4985                           
  4986                           	psect	text27
  4987   001868                     __ptext27:
  4988                           	callstack 0
  4989   001868                     _color_read_Green:
  4990                           	callstack 25
  4991   001868                     
  4992                           ;color.c: 61:  unsigned int tmp;;color.c: 62:  I2C_2_Master_Start();
  4993   001868  ECF3  F00D         	call	_I2C_2_Master_Start	;wreg free
  4994                           
  4995                           ;color.c: 63:  I2C_2_Master_Write(0x52 | 0x00);
  4996   00186C  0E52               	movlw	82
  4997   00186E  ECE8  F00D         	call	_I2C_2_Master_Write
  4998                           
  4999                           ;color.c: 65:  I2C_2_Master_Write(0xA0 | 0x18);
  5000   001872  0EB8               	movlw	184
  5001   001874  ECE8  F00D         	call	_I2C_2_Master_Write
  5002                           
  5003                           ;color.c: 66:  I2C_2_Master_RepStart();
  5004   001878  ECF8  F00D         	call	_I2C_2_Master_RepStart	;wreg free
  5005                           
  5006                           ;color.c: 67:  I2C_2_Master_Write(0x52 | 0x01);
  5007   00187C  0E53               	movlw	83
  5008   00187E  ECE8  F00D         	call	_I2C_2_Master_Write
  5009                           
  5010                           ;color.c: 68:  tmp=I2C_2_Master_Read(1);
  5011   001882  0E01               	movlw	1
  5012   001884  ECF3  F00C         	call	_I2C_2_Master_Read
  5013   001888  6E07               	movwf	??_color_read_Green^0,c
  5014   00188A  5007               	movf	??_color_read_Green^0,w,c
  5015   00188C  6E0A               	movwf	color_read_Green@tmp^0,c
  5016   00188E  6A0B               	clrf	(color_read_Green@tmp+1)^0,c
  5017                           
  5018                           ;color.c: 69:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  5019   001890  0E00               	movlw	0
  5020   001892  ECF3  F00C         	call	_I2C_2_Master_Read
  5021   001896  6E07               	movwf	??_color_read_Green^0,c
  5022   001898  5007               	movf	??_color_read_Green^0,w,c
  5023   00189A  6E09               	movwf	(??_color_read_Green+2)^0,c
  5024   00189C  6A08               	clrf	(??_color_read_Green+1)^0,c
  5025   00189E  500A               	movf	color_read_Green@tmp^0,w,c
  5026   0018A0  1008               	iorwf	(??_color_read_Green+1)^0,w,c
  5027   0018A2  6E0A               	movwf	color_read_Green@tmp^0,c
  5028   0018A4  500B               	movf	(color_read_Green@tmp+1)^0,w,c
  5029   0018A6  1009               	iorwf	(??_color_read_Green+2)^0,w,c
  5030   0018A8  6E0B               	movwf	(color_read_Green@tmp+1)^0,c
  5031                           
  5032                           ;color.c: 70:  I2C_2_Master_Stop();
  5033   0018AA  ECEE  F00D         	call	_I2C_2_Master_Stop	;wreg free
  5034   0018AE                     
  5035                           ;color.c: 71:  return tmp;
  5036   0018AE  C00A  F005         	movff	color_read_Green@tmp,?_color_read_Green
  5037   0018B2  C00B  F006         	movff	color_read_Green@tmp+1,?_color_read_Green+1
  5038   0018B6  0012               	return		;funcret
  5039   0018B8                     __end_of_color_read_Green:
  5040                           	callstack 0
  5041                           
  5042 ;; *************** function _color_read_Clear *****************
  5043 ;; Defined at:
  5044 ;;		line 74 in file "color.c"
  5045 ;; Parameters:    Size  Location     Type
  5046 ;;		None
  5047 ;; Auto vars:     Size  Location     Type
  5048 ;;  tmp             2    9[COMRAM] unsigned int 
  5049 ;; Return value:  Size  Location     Type
  5050 ;;                  2    4[COMRAM] unsigned int 
  5051 ;; Registers used:
  5052 ;;		wreg, status,2, status,0, cstack
  5053 ;; Tracked objects:
  5054 ;;		On entry : 0/0
  5055 ;;		On exit  : 0/0
  5056 ;;		Unchanged: 0/0
  5057 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5058 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5059 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5060 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5061 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5062 ;;Total ram usage:        7 bytes
  5063 ;; Hardware stack levels used: 1
  5064 ;; Hardware stack levels required when called: 3
  5065 ;; This function calls:
  5066 ;;		_I2C_2_Master_Read
  5067 ;;		_I2C_2_Master_RepStart
  5068 ;;		_I2C_2_Master_Start
  5069 ;;		_I2C_2_Master_Stop
  5070 ;;		_I2C_2_Master_Write
  5071 ;; This function is called by:
  5072 ;;		_READcolor
  5073 ;; This function uses a non-reentrant model
  5074 ;;
  5075                           
  5076                           	psect	text28
  5077   0018B8                     __ptext28:
  5078                           	callstack 0
  5079   0018B8                     _color_read_Clear:
  5080                           	callstack 25
  5081   0018B8                     
  5082                           ;color.c: 76:  unsigned int tmp;;color.c: 77:  I2C_2_Master_Start();
  5083   0018B8  ECF3  F00D         	call	_I2C_2_Master_Start	;wreg free
  5084                           
  5085                           ;color.c: 78:  I2C_2_Master_Write(0x52 | 0x00);
  5086   0018BC  0E52               	movlw	82
  5087   0018BE  ECE8  F00D         	call	_I2C_2_Master_Write
  5088                           
  5089                           ;color.c: 80:  I2C_2_Master_Write(0xA0 | 0x14);
  5090   0018C2  0EB4               	movlw	180
  5091   0018C4  ECE8  F00D         	call	_I2C_2_Master_Write
  5092                           
  5093                           ;color.c: 81:  I2C_2_Master_RepStart();
  5094   0018C8  ECF8  F00D         	call	_I2C_2_Master_RepStart	;wreg free
  5095                           
  5096                           ;color.c: 82:  I2C_2_Master_Write(0x52 | 0x01);
  5097   0018CC  0E53               	movlw	83
  5098   0018CE  ECE8  F00D         	call	_I2C_2_Master_Write
  5099                           
  5100                           ;color.c: 83:  tmp=I2C_2_Master_Read(1);
  5101   0018D2  0E01               	movlw	1
  5102   0018D4  ECF3  F00C         	call	_I2C_2_Master_Read
  5103   0018D8  6E07               	movwf	??_color_read_Clear^0,c
  5104   0018DA  5007               	movf	??_color_read_Clear^0,w,c
  5105   0018DC  6E0A               	movwf	color_read_Clear@tmp^0,c
  5106   0018DE  6A0B               	clrf	(color_read_Clear@tmp+1)^0,c
  5107                           
  5108                           ;color.c: 84:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  5109   0018E0  0E00               	movlw	0
  5110   0018E2  ECF3  F00C         	call	_I2C_2_Master_Read
  5111   0018E6  6E07               	movwf	??_color_read_Clear^0,c
  5112   0018E8  5007               	movf	??_color_read_Clear^0,w,c
  5113   0018EA  6E09               	movwf	(??_color_read_Clear+2)^0,c
  5114   0018EC  6A08               	clrf	(??_color_read_Clear+1)^0,c
  5115   0018EE  500A               	movf	color_read_Clear@tmp^0,w,c
  5116   0018F0  1008               	iorwf	(??_color_read_Clear+1)^0,w,c
  5117   0018F2  6E0A               	movwf	color_read_Clear@tmp^0,c
  5118   0018F4  500B               	movf	(color_read_Clear@tmp+1)^0,w,c
  5119   0018F6  1009               	iorwf	(??_color_read_Clear+2)^0,w,c
  5120   0018F8  6E0B               	movwf	(color_read_Clear@tmp+1)^0,c
  5121                           
  5122                           ;color.c: 85:  I2C_2_Master_Stop();
  5123   0018FA  ECEE  F00D         	call	_I2C_2_Master_Stop	;wreg free
  5124   0018FE                     
  5125                           ;color.c: 86:  return tmp;
  5126   0018FE  C00A  F005         	movff	color_read_Clear@tmp,?_color_read_Clear
  5127   001902  C00B  F006         	movff	color_read_Clear@tmp+1,?_color_read_Clear+1
  5128   001906  0012               	return		;funcret
  5129   001908                     __end_of_color_read_Clear:
  5130                           	callstack 0
  5131                           
  5132 ;; *************** function _color_read_Blue *****************
  5133 ;; Defined at:
  5134 ;;		line 44 in file "color.c"
  5135 ;; Parameters:    Size  Location     Type
  5136 ;;		None
  5137 ;; Auto vars:     Size  Location     Type
  5138 ;;  tmp             2    9[COMRAM] unsigned int 
  5139 ;; Return value:  Size  Location     Type
  5140 ;;                  2    4[COMRAM] unsigned int 
  5141 ;; Registers used:
  5142 ;;		wreg, status,2, status,0, cstack
  5143 ;; Tracked objects:
  5144 ;;		On entry : 0/0
  5145 ;;		On exit  : 0/0
  5146 ;;		Unchanged: 0/0
  5147 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5148 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5149 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5150 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5151 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5152 ;;Total ram usage:        7 bytes
  5153 ;; Hardware stack levels used: 1
  5154 ;; Hardware stack levels required when called: 3
  5155 ;; This function calls:
  5156 ;;		_I2C_2_Master_Read
  5157 ;;		_I2C_2_Master_RepStart
  5158 ;;		_I2C_2_Master_Start
  5159 ;;		_I2C_2_Master_Stop
  5160 ;;		_I2C_2_Master_Write
  5161 ;; This function is called by:
  5162 ;;		_READcolor
  5163 ;; This function uses a non-reentrant model
  5164 ;;
  5165                           
  5166                           	psect	text29
  5167   001908                     __ptext29:
  5168                           	callstack 0
  5169   001908                     _color_read_Blue:
  5170                           	callstack 25
  5171   001908                     
  5172                           ;color.c: 46:  unsigned int tmp;;color.c: 47:  I2C_2_Master_Start();
  5173   001908  ECF3  F00D         	call	_I2C_2_Master_Start	;wreg free
  5174                           
  5175                           ;color.c: 48:  I2C_2_Master_Write(0x52 | 0x00);
  5176   00190C  0E52               	movlw	82
  5177   00190E  ECE8  F00D         	call	_I2C_2_Master_Write
  5178                           
  5179                           ;color.c: 50:  I2C_2_Master_Write(0xA0 | 0x1A);
  5180   001912  0EBA               	movlw	186
  5181   001914  ECE8  F00D         	call	_I2C_2_Master_Write
  5182                           
  5183                           ;color.c: 51:  I2C_2_Master_RepStart();
  5184   001918  ECF8  F00D         	call	_I2C_2_Master_RepStart	;wreg free
  5185                           
  5186                           ;color.c: 52:  I2C_2_Master_Write(0x52 | 0x01);
  5187   00191C  0E53               	movlw	83
  5188   00191E  ECE8  F00D         	call	_I2C_2_Master_Write
  5189                           
  5190                           ;color.c: 53:  tmp=I2C_2_Master_Read(1);
  5191   001922  0E01               	movlw	1
  5192   001924  ECF3  F00C         	call	_I2C_2_Master_Read
  5193   001928  6E07               	movwf	??_color_read_Blue^0,c
  5194   00192A  5007               	movf	??_color_read_Blue^0,w,c
  5195   00192C  6E0A               	movwf	color_read_Blue@tmp^0,c
  5196   00192E  6A0B               	clrf	(color_read_Blue@tmp+1)^0,c
  5197                           
  5198                           ;color.c: 54:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  5199   001930  0E00               	movlw	0
  5200   001932  ECF3  F00C         	call	_I2C_2_Master_Read
  5201   001936  6E07               	movwf	??_color_read_Blue^0,c
  5202   001938  5007               	movf	??_color_read_Blue^0,w,c
  5203   00193A  6E09               	movwf	(??_color_read_Blue+2)^0,c
  5204   00193C  6A08               	clrf	(??_color_read_Blue+1)^0,c
  5205   00193E  500A               	movf	color_read_Blue@tmp^0,w,c
  5206   001940  1008               	iorwf	(??_color_read_Blue+1)^0,w,c
  5207   001942  6E0A               	movwf	color_read_Blue@tmp^0,c
  5208   001944  500B               	movf	(color_read_Blue@tmp+1)^0,w,c
  5209   001946  1009               	iorwf	(??_color_read_Blue+2)^0,w,c
  5210   001948  6E0B               	movwf	(color_read_Blue@tmp+1)^0,c
  5211                           
  5212                           ;color.c: 55:  I2C_2_Master_Stop();
  5213   00194A  ECEE  F00D         	call	_I2C_2_Master_Stop	;wreg free
  5214   00194E                     
  5215                           ;color.c: 56:  return tmp;
  5216   00194E  C00A  F005         	movff	color_read_Blue@tmp,?_color_read_Blue
  5217   001952  C00B  F006         	movff	color_read_Blue@tmp+1,?_color_read_Blue+1
  5218   001956  0012               	return		;funcret
  5219   001958                     __end_of_color_read_Blue:
  5220                           	callstack 0
  5221                           
  5222 ;; *************** function _I2C_2_Master_Write *****************
  5223 ;; Defined at:
  5224 ;;		line 45 in file "i2c.c"
  5225 ;; Parameters:    Size  Location     Type
  5226 ;;  data_byte       1    wreg     unsigned char 
  5227 ;; Auto vars:     Size  Location     Type
  5228 ;;  data_byte       1    1[COMRAM] unsigned char 
  5229 ;; Return value:  Size  Location     Type
  5230 ;;                  1    wreg      void 
  5231 ;; Registers used:
  5232 ;;		wreg, status,2, status,0, cstack
  5233 ;; Tracked objects:
  5234 ;;		On entry : 0/0
  5235 ;;		On exit  : 0/0
  5236 ;;		Unchanged: 0/0
  5237 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5238 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5239 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5240 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5241 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5242 ;;Total ram usage:        1 bytes
  5243 ;; Hardware stack levels used: 1
  5244 ;; Hardware stack levels required when called: 2
  5245 ;; This function calls:
  5246 ;;		_I2C_2_Master_Idle
  5247 ;; This function is called by:
  5248 ;;		_color_writetoaddr
  5249 ;;		_color_read_Red
  5250 ;;		_color_read_Blue
  5251 ;;		_color_read_Green
  5252 ;;		_color_read_Clear
  5253 ;;		_interrupts_clear
  5254 ;; This function uses a non-reentrant model
  5255 ;;
  5256                           
  5257                           	psect	text30
  5258   001BD0                     __ptext30:
  5259                           	callstack 0
  5260   001BD0                     _I2C_2_Master_Write:
  5261                           	callstack 26
  5262                           
  5263                           ;incstack = 0
  5264                           ;I2C_2_Master_Write@data_byte stored from wreg
  5265   001BD0  6E02               	movwf	I2C_2_Master_Write@data_byte^0,c
  5266   001BD2                     
  5267                           ;i2c.c: 45: void I2C_2_Master_Write(unsigned char data_byte);i2c.c: 46: {;i2c.c: 47:   I
      +                          2C_2_Master_Idle();
  5268   001BD2  EC7B  F00D         	call	_I2C_2_Master_Idle	;wreg free
  5269   001BD6                     
  5270                           ;i2c.c: 48:   SSP2BUF = data_byte;
  5271   001BD6  C002  FED5         	movff	I2C_2_Master_Write@data_byte,3797	;volatile
  5272   001BDA  0012               	return		;funcret
  5273   001BDC                     __end_of_I2C_2_Master_Write:
  5274                           	callstack 0
  5275                           
  5276 ;; *************** function _I2C_2_Master_Stop *****************
  5277 ;; Defined at:
  5278 ;;		line 39 in file "i2c.c"
  5279 ;; Parameters:    Size  Location     Type
  5280 ;;		None
  5281 ;; Auto vars:     Size  Location     Type
  5282 ;;		None
  5283 ;; Return value:  Size  Location     Type
  5284 ;;                  1    wreg      void 
  5285 ;; Registers used:
  5286 ;;		wreg, status,2, status,0, cstack
  5287 ;; Tracked objects:
  5288 ;;		On entry : 0/0
  5289 ;;		On exit  : 0/0
  5290 ;;		Unchanged: 0/0
  5291 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5292 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5293 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5294 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5295 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5296 ;;Total ram usage:        0 bytes
  5297 ;; Hardware stack levels used: 1
  5298 ;; Hardware stack levels required when called: 2
  5299 ;; This function calls:
  5300 ;;		_I2C_2_Master_Idle
  5301 ;; This function is called by:
  5302 ;;		_color_writetoaddr
  5303 ;;		_color_read_Red
  5304 ;;		_color_read_Blue
  5305 ;;		_color_read_Green
  5306 ;;		_color_read_Clear
  5307 ;;		_interrupts_clear
  5308 ;; This function uses a non-reentrant model
  5309 ;;
  5310                           
  5311                           	psect	text31
  5312   001BDC                     __ptext31:
  5313                           	callstack 0
  5314   001BDC                     _I2C_2_Master_Stop:
  5315                           	callstack 26
  5316   001BDC                     
  5317                           ;i2c.c: 41:   I2C_2_Master_Idle();
  5318   001BDC  EC7B  F00D         	call	_I2C_2_Master_Idle	;wreg free
  5319   001BE0                     
  5320                           ;i2c.c: 42:   SSP2CON2bits.PEN = 1;
  5321   001BE0  010E               	movlb	14	; () banked
  5322   001BE2  85DA               	bsf	218,2,b	;volatile
  5323   001BE4                     
  5324                           ; BSR set to: 14
  5325   001BE4  0012               	return		;funcret
  5326   001BE6                     __end_of_I2C_2_Master_Stop:
  5327                           	callstack 0
  5328                           
  5329 ;; *************** function _I2C_2_Master_Start *****************
  5330 ;; Defined at:
  5331 ;;		line 27 in file "i2c.c"
  5332 ;; Parameters:    Size  Location     Type
  5333 ;;		None
  5334 ;; Auto vars:     Size  Location     Type
  5335 ;;		None
  5336 ;; Return value:  Size  Location     Type
  5337 ;;                  1    wreg      void 
  5338 ;; Registers used:
  5339 ;;		wreg, status,2, status,0, cstack
  5340 ;; Tracked objects:
  5341 ;;		On entry : 0/0
  5342 ;;		On exit  : 0/0
  5343 ;;		Unchanged: 0/0
  5344 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5345 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5346 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5347 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5348 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5349 ;;Total ram usage:        0 bytes
  5350 ;; Hardware stack levels used: 1
  5351 ;; Hardware stack levels required when called: 2
  5352 ;; This function calls:
  5353 ;;		_I2C_2_Master_Idle
  5354 ;; This function is called by:
  5355 ;;		_color_writetoaddr
  5356 ;;		_color_read_Red
  5357 ;;		_color_read_Blue
  5358 ;;		_color_read_Green
  5359 ;;		_color_read_Clear
  5360 ;;		_interrupts_clear
  5361 ;; This function uses a non-reentrant model
  5362 ;;
  5363                           
  5364                           	psect	text32
  5365   001BE6                     __ptext32:
  5366                           	callstack 0
  5367   001BE6                     _I2C_2_Master_Start:
  5368                           	callstack 26
  5369   001BE6                     
  5370                           ;i2c.c: 29:   I2C_2_Master_Idle();
  5371   001BE6  EC7B  F00D         	call	_I2C_2_Master_Idle	;wreg free
  5372   001BEA                     
  5373                           ;i2c.c: 30:   SSP2CON2bits.SEN = 1;
  5374   001BEA  010E               	movlb	14	; () banked
  5375   001BEC  81DA               	bsf	218,0,b	;volatile
  5376   001BEE                     
  5377                           ; BSR set to: 14
  5378   001BEE  0012               	return		;funcret
  5379   001BF0                     __end_of_I2C_2_Master_Start:
  5380                           	callstack 0
  5381                           
  5382 ;; *************** function _I2C_2_Master_RepStart *****************
  5383 ;; Defined at:
  5384 ;;		line 33 in file "i2c.c"
  5385 ;; Parameters:    Size  Location     Type
  5386 ;;		None
  5387 ;; Auto vars:     Size  Location     Type
  5388 ;;		None
  5389 ;; Return value:  Size  Location     Type
  5390 ;;                  1    wreg      void 
  5391 ;; Registers used:
  5392 ;;		wreg, status,2, status,0, cstack
  5393 ;; Tracked objects:
  5394 ;;		On entry : 0/0
  5395 ;;		On exit  : 0/0
  5396 ;;		Unchanged: 0/0
  5397 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5398 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5399 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5400 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5401 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5402 ;;Total ram usage:        0 bytes
  5403 ;; Hardware stack levels used: 1
  5404 ;; Hardware stack levels required when called: 2
  5405 ;; This function calls:
  5406 ;;		_I2C_2_Master_Idle
  5407 ;; This function is called by:
  5408 ;;		_color_read_Red
  5409 ;;		_color_read_Blue
  5410 ;;		_color_read_Green
  5411 ;;		_color_read_Clear
  5412 ;; This function uses a non-reentrant model
  5413 ;;
  5414                           
  5415                           	psect	text33
  5416   001BF0                     __ptext33:
  5417                           	callstack 0
  5418   001BF0                     _I2C_2_Master_RepStart:
  5419                           	callstack 25
  5420   001BF0                     
  5421                           ;i2c.c: 35:   I2C_2_Master_Idle();
  5422   001BF0  EC7B  F00D         	call	_I2C_2_Master_Idle	;wreg free
  5423   001BF4                     
  5424                           ;i2c.c: 36:   SSP2CON2bits.RSEN = 1;
  5425   001BF4  010E               	movlb	14	; () banked
  5426   001BF6  83DA               	bsf	218,1,b	;volatile
  5427   001BF8                     
  5428                           ; BSR set to: 14
  5429   001BF8  0012               	return		;funcret
  5430   001BFA                     __end_of_I2C_2_Master_RepStart:
  5431                           	callstack 0
  5432                           
  5433 ;; *************** function _I2C_2_Master_Read *****************
  5434 ;; Defined at:
  5435 ;;		line 51 in file "i2c.c"
  5436 ;; Parameters:    Size  Location     Type
  5437 ;;  ack             1    wreg     unsigned char 
  5438 ;; Auto vars:     Size  Location     Type
  5439 ;;  ack             1    2[COMRAM] unsigned char 
  5440 ;;  tmp             1    3[COMRAM] unsigned char 
  5441 ;; Return value:  Size  Location     Type
  5442 ;;                  1    wreg      unsigned char 
  5443 ;; Registers used:
  5444 ;;		wreg, status,2, status,0, cstack
  5445 ;; Tracked objects:
  5446 ;;		On entry : 0/0
  5447 ;;		On exit  : 0/0
  5448 ;;		Unchanged: 0/0
  5449 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5450 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5451 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5452 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5453 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5454 ;;Total ram usage:        3 bytes
  5455 ;; Hardware stack levels used: 1
  5456 ;; Hardware stack levels required when called: 2
  5457 ;; This function calls:
  5458 ;;		_I2C_2_Master_Idle
  5459 ;; This function is called by:
  5460 ;;		_color_read_Red
  5461 ;;		_color_read_Blue
  5462 ;;		_color_read_Green
  5463 ;;		_color_read_Clear
  5464 ;; This function uses a non-reentrant model
  5465 ;;
  5466                           
  5467                           	psect	text34
  5468   0019E6                     __ptext34:
  5469                           	callstack 0
  5470   0019E6                     _I2C_2_Master_Read:
  5471                           	callstack 25
  5472                           
  5473                           ; BSR set to: 14
  5474                           ;incstack = 0
  5475                           ;I2C_2_Master_Read@ack stored from wreg
  5476   0019E6  6E03               	movwf	I2C_2_Master_Read@ack^0,c
  5477   0019E8                     
  5478                           ;i2c.c: 51: unsigned char I2C_2_Master_Read(unsigned char ack);i2c.c: 52: {;i2c.c: 53:  
      +                           unsigned char tmp;;i2c.c: 54:   I2C_2_Master_Idle();
  5479   0019E8  EC7B  F00D         	call	_I2C_2_Master_Idle	;wreg free
  5480   0019EC                     
  5481                           ;i2c.c: 55:   SSP2CON2bits.RCEN = 1;
  5482   0019EC  010E               	movlb	14	; () banked
  5483   0019EE  87DA               	bsf	218,3,b	;volatile
  5484                           
  5485                           ;i2c.c: 56:   I2C_2_Master_Idle();
  5486   0019F0  EC7B  F00D         	call	_I2C_2_Master_Idle	;wreg free
  5487   0019F4                     
  5488                           ;i2c.c: 57:   tmp = SSP2BUF;
  5489   0019F4  CED5 F004          	movff	3797,I2C_2_Master_Read@tmp	;volatile
  5490                           
  5491                           ;i2c.c: 58:   I2C_2_Master_Idle();
  5492   0019F8  EC7B  F00D         	call	_I2C_2_Master_Idle	;wreg free
  5493   0019FC                     
  5494                           ;i2c.c: 59:   SSP2CON2bits.ACKDT = !ack;
  5495   0019FC  5003               	movf	I2C_2_Master_Read@ack^0,w,c
  5496   0019FE  B4D8               	btfsc	status,2,c
  5497   001A00  EF04  F00D         	goto	u1101
  5498   001A04  EF08  F00D         	goto	u1100
  5499   001A08                     u1101:
  5500   001A08  6A02               	clrf	??_I2C_2_Master_Read^0,c
  5501   001A0A  2A02               	incf	??_I2C_2_Master_Read^0,f,c
  5502   001A0C  EF09  F00D         	goto	u1118
  5503   001A10                     u1100:
  5504   001A10  6A02               	clrf	??_I2C_2_Master_Read^0,c
  5505   001A12                     u1118:
  5506   001A12  3A02               	swapf	??_I2C_2_Master_Read^0,f,c
  5507   001A14  4602               	rlncf	??_I2C_2_Master_Read^0,f,c
  5508   001A16  010E               	movlb	14	; () banked
  5509   001A18  51DA               	movf	218,w,b	;volatile
  5510   001A1A  1802               	xorwf	??_I2C_2_Master_Read^0,w,c
  5511   001A1C  0BDF               	andlw	-33
  5512   001A1E  1802               	xorwf	??_I2C_2_Master_Read^0,w,c
  5513   001A20  6FDA               	movwf	218,b	;volatile
  5514   001A22                     
  5515                           ; BSR set to: 14
  5516                           ;i2c.c: 60:   SSP2CON2bits.ACKEN = 1;
  5517   001A22  89DA               	bsf	218,4,b	;volatile
  5518   001A24                     
  5519                           ; BSR set to: 14
  5520                           ;i2c.c: 61:   return tmp;
  5521   001A24  5004               	movf	I2C_2_Master_Read@tmp^0,w,c
  5522   001A26                     
  5523                           ; BSR set to: 14
  5524   001A26  0012               	return		;funcret
  5525   001A28                     __end_of_I2C_2_Master_Read:
  5526                           	callstack 0
  5527                           
  5528 ;; *************** function _I2C_2_Master_Idle *****************
  5529 ;; Defined at:
  5530 ;;		line 22 in file "i2c.c"
  5531 ;; Parameters:    Size  Location     Type
  5532 ;;		None
  5533 ;; Auto vars:     Size  Location     Type
  5534 ;;		None
  5535 ;; Return value:  Size  Location     Type
  5536 ;;                  1    wreg      void 
  5537 ;; Registers used:
  5538 ;;		wreg, status,2, status,0
  5539 ;; Tracked objects:
  5540 ;;		On entry : 0/0
  5541 ;;		On exit  : 0/0
  5542 ;;		Unchanged: 0/0
  5543 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5544 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5545 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5546 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5547 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5548 ;;Total ram usage:        1 bytes
  5549 ;; Hardware stack levels used: 1
  5550 ;; Hardware stack levels required when called: 1
  5551 ;; This function calls:
  5552 ;;		Nothing
  5553 ;; This function is called by:
  5554 ;;		_I2C_2_Master_Start
  5555 ;;		_I2C_2_Master_RepStart
  5556 ;;		_I2C_2_Master_Stop
  5557 ;;		_I2C_2_Master_Write
  5558 ;;		_I2C_2_Master_Read
  5559 ;; This function uses a non-reentrant model
  5560 ;;
  5561                           
  5562                           	psect	text35
  5563   001AF6                     __ptext35:
  5564                           	callstack 0
  5565   001AF6                     _I2C_2_Master_Idle:
  5566                           	callstack 26
  5567   001AF6                     l30:
  5568   001AF6  010E               	movlb	14	; () banked
  5569   001AF8  B5D8               	btfsc	216,2,b	;volatile
  5570   001AFA  EF81  F00D         	goto	u1061
  5571   001AFE  EF83  F00D         	goto	u1060
  5572   001B02                     u1061:
  5573   001B02  EF7B  F00D         	goto	l30
  5574   001B06                     u1060:
  5575   001B06                     
  5576                           ; BSR set to: 14
  5577   001B06  CEDA F001          	movff	3802,??_I2C_2_Master_Idle	;volatile
  5578   001B0A  0E1F               	movlw	31
  5579   001B0C  1601               	andwf	??_I2C_2_Master_Idle^0,f,c
  5580   001B0E  A4D8               	btfss	status,2,c
  5581   001B10  EF8C  F00D         	goto	u1071
  5582   001B14  EF8E  F00D         	goto	u1070
  5583   001B18                     u1071:
  5584   001B18  EF7B  F00D         	goto	l30
  5585   001B1C                     u1070:
  5586   001B1C                     
  5587                           ; BSR set to: 14
  5588   001B1C  0012               	return		;funcret
  5589   001B1E                     __end_of_I2C_2_Master_Idle:
  5590                           	callstack 0
  5591                           
  5592 ;; *************** function _buggyLEDs_init *****************
  5593 ;; Defined at:
  5594 ;;		line 113 in file "dc_motor.c"
  5595 ;; Parameters:    Size  Location     Type
  5596 ;;		None
  5597 ;; Auto vars:     Size  Location     Type
  5598 ;;		None
  5599 ;; Return value:  Size  Location     Type
  5600 ;;                  1    wreg      void 
  5601 ;; Registers used:
  5602 ;;		None
  5603 ;; Tracked objects:
  5604 ;;		On entry : 0/0
  5605 ;;		On exit  : 0/0
  5606 ;;		Unchanged: 0/0
  5607 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5608 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5609 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5610 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5611 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5612 ;;Total ram usage:        0 bytes
  5613 ;; Hardware stack levels used: 1
  5614 ;; Hardware stack levels required when called: 1
  5615 ;; This function calls:
  5616 ;;		Nothing
  5617 ;; This function is called by:
  5618 ;;		_main
  5619 ;; This function uses a non-reentrant model
  5620 ;;
  5621                           
  5622                           	psect	text36
  5623   001BBA                     __ptext36:
  5624                           	callstack 0
  5625   001BBA                     _buggyLEDs_init:
  5626                           	callstack 29
  5627   001BBA                     
  5628                           ;dc_motor.c: 114:     LATHbits.LATH1 = 0;
  5629   001BBA  9280               	bcf	128,1,c	;volatile
  5630                           
  5631                           ;dc_motor.c: 115:     LATDbits.LATD3 = 0;
  5632   001BBC  967C               	bcf	124,3,c	;volatile
  5633                           
  5634                           ;dc_motor.c: 116:     LATDbits.LATD4 = 0;
  5635   001BBE  987C               	bcf	124,4,c	;volatile
  5636                           
  5637                           ;dc_motor.c: 117:     LATFbits.LATF0 = 0;
  5638   001BC0  907E               	bcf	126,0,c	;volatile
  5639                           
  5640                           ;dc_motor.c: 118:     LATHbits.LATH0 = 0;
  5641   001BC2  9080               	bcf	128,0,c	;volatile
  5642                           
  5643                           ;dc_motor.c: 120:     TRISHbits.TRISH1 = 0;
  5644   001BC4  9288               	bcf	136,1,c	;volatile
  5645                           
  5646                           ;dc_motor.c: 121:     TRISDbits.TRISD3 = 0;
  5647   001BC6  9684               	bcf	132,3,c	;volatile
  5648                           
  5649                           ;dc_motor.c: 122:     TRISDbits.TRISD4 = 0;
  5650   001BC8  9884               	bcf	132,4,c	;volatile
  5651                           
  5652                           ;dc_motor.c: 123:     TRISFbits.TRISF0 = 0;
  5653   001BCA  9086               	bcf	134,0,c	;volatile
  5654                           
  5655                           ;dc_motor.c: 124:     TRISHbits.TRISH0 = 0;
  5656   001BCC  9088               	bcf	136,0,c	;volatile
  5657   001BCE  0012               	return		;funcret
  5658   001BD0                     __end_of_buggyLEDs_init:
  5659                           	callstack 0
  5660                           
  5661 ;; *************** function _HighISR *****************
  5662 ;; Defined at:
  5663 ;;		line 46 in file "interrupts.c"
  5664 ;; Parameters:    Size  Location     Type
  5665 ;;		None
  5666 ;; Auto vars:     Size  Location     Type
  5667 ;;		None
  5668 ;; Return value:  Size  Location     Type
  5669 ;;                  1    wreg      void 
  5670 ;; Registers used:
  5671 ;;		wreg, status,2
  5672 ;; Tracked objects:
  5673 ;;		On entry : 0/0
  5674 ;;		On exit  : 0/0
  5675 ;;		Unchanged: 0/0
  5676 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5677 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5678 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5679 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5680 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5681 ;;Total ram usage:        0 bytes
  5682 ;; Hardware stack levels used: 1
  5683 ;; This function calls:
  5684 ;;		Nothing
  5685 ;; This function is called by:
  5686 ;;		Interrupt level 2
  5687 ;; This function uses a non-reentrant model
  5688 ;;
  5689                           
  5690                           	psect	intcode
  5691   000008                     __pintcode:
  5692                           	callstack 0
  5693   000008                     _HighISR:
  5694                           	callstack 24
  5695                           
  5696                           ;incstack = 0
  5697   000008  8257               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  5698   00000A                     
  5699                           ;interrupts.c: 47:    if (PIR0bits.INT0IF) {
  5700   00000A  010E               	movlb	14	; () banked
  5701   00000C  A133               	btfss	51,0,b	;volatile
  5702   00000E  EF0B  F000         	goto	i2u102_41
  5703   000012  EF0D  F000         	goto	i2u102_40
  5704   000016                     i2u102_41:
  5705   000016  EF10  F000         	goto	i2l478
  5706   00001A                     i2u102_40:
  5707   00001A                     
  5708                           ; BSR set to: 14
  5709                           ;interrupts.c: 48:        read_color_flag = 1;
  5710   00001A  0E01               	movlw	1
  5711   00001C  6E3E               	movwf	_read_color_flag^0,c
  5712   00001E                     
  5713                           ; BSR set to: 14
  5714                           ;interrupts.c: 49:        PIR0bits.INT0IF = 0;
  5715   00001E  9133               	bcf	51,0,b	;volatile
  5716   000020                     i2l478:
  5717                           
  5718                           ; BSR set to: 14
  5719   000020  9257               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  5720   000022  0011               	retfie		f
  5721   000024                     __end_of_HighISR:
  5722                           	callstack 0
  5723   000000                     
  5724                           	psect	rparam
  5725   000000                     
  5726                           	psect	temp
  5727   000057                     btemp:
  5728                           	callstack 0
  5729   000057                     	ds	1
  5730   000000                     int$flags	set	btemp
  5731   000000                     wtemp8	set	btemp+1
  5732   000000                     ttemp5	set	btemp+1
  5733   000000                     ttemp6	set	btemp+4
  5734   000000                     ttemp7	set	btemp+8
  5735                           
  5736                           	psect	idloc
  5737                           
  5738                           ;Config register IDLOC0 @ 0x200000
  5739                           ;	unspecified, using default values
  5740   200000                     	org	2097152
  5741   200000  0FFF               	dw	4095
  5742                           
  5743                           ;Config register IDLOC1 @ 0x200002
  5744                           ;	unspecified, using default values
  5745   200002                     	org	2097154
  5746   200002  0FFF               	dw	4095
  5747                           
  5748                           ;Config register IDLOC2 @ 0x200004
  5749                           ;	unspecified, using default values
  5750   200004                     	org	2097156
  5751   200004  0FFF               	dw	4095
  5752                           
  5753                           ;Config register IDLOC3 @ 0x200006
  5754                           ;	unspecified, using default values
  5755   200006                     	org	2097158
  5756   200006  0FFF               	dw	4095
  5757                           
  5758                           ;Config register IDLOC4 @ 0x200008
  5759                           ;	unspecified, using default values
  5760   200008                     	org	2097160
  5761   200008  0FFF               	dw	4095
  5762                           
  5763                           ;Config register IDLOC5 @ 0x20000A
  5764                           ;	unspecified, using default values
  5765   20000A                     	org	2097162
  5766   20000A  0FFF               	dw	4095
  5767                           
  5768                           ;Config register IDLOC6 @ 0x20000C
  5769                           ;	unspecified, using default values
  5770   20000C                     	org	2097164
  5771   20000C  0FFF               	dw	4095
  5772                           
  5773                           ;Config register IDLOC7 @ 0x20000E
  5774                           ;	unspecified, using default values
  5775   20000E                     	org	2097166
  5776   20000E  0FFF               	dw	4095
  5777                           
  5778                           	psect	config
  5779                           
  5780                           ;Config register CONFIG1L @ 0x300000
  5781                           ;	External Oscillator mode Selection bits
  5782                           ;	FEXTOSC = HS, HS (crystal oscillator) above 8 MHz; PFM set to high power
  5783                           ;	Power-up default value for COSC bits
  5784                           ;	RSTOSC = EXTOSC_4PLL, EXTOSC with 4x PLL, with EXTOSC operating per FEXTOSC bits
  5785   300000                     	org	3145728
  5786   300000  AA                 	db	170
  5787                           
  5788                           ;Config register CONFIG1H @ 0x300001
  5789                           ;	unspecified, using default values
  5790                           ;	Clock Out Enable bit
  5791                           ;	CLKOUTEN = 0x1, unprogrammed default
  5792                           ;	Clock Switch Enable bit
  5793                           ;	CSWEN = 0x1, unprogrammed default
  5794                           ;	Fail-Safe Clock Monitor Enable bit
  5795                           ;	FCMEN = 0x1, unprogrammed default
  5796   300001                     	org	3145729
  5797   300001  FF                 	db	255
  5798                           
  5799                           ;Config register CONFIG2L @ 0x300002
  5800                           ;	unspecified, using default values
  5801                           ;	Master Clear Enable bit
  5802                           ;	MCLRE = 0x1, unprogrammed default
  5803                           ;	Power-up Timer Enable bit
  5804                           ;	PWRTE = 0x1, unprogrammed default
  5805                           ;	Low-power BOR enable bit
  5806                           ;	LPBOREN = 0x1, unprogrammed default
  5807                           ;	Brown-out Reset Enable bits
  5808                           ;	BOREN = 0x3, unprogrammed default
  5809   300002                     	org	3145730
  5810   300002  FF                 	db	255
  5811                           
  5812                           ;Config register CONFIG2H @ 0x300003
  5813                           ;	unspecified, using default values
  5814                           ;	Brown Out Reset Voltage selection bits
  5815                           ;	BORV = 0x3, unprogrammed default
  5816                           ;	ZCD Disable bit
  5817                           ;	ZCD = 0x1, unprogrammed default
  5818                           ;	PPSLOCK bit One-Way Set Enable bit
  5819                           ;	PPS1WAY = 0x1, unprogrammed default
  5820                           ;	Stack Full/Underflow Reset Enable bit
  5821                           ;	STVREN = 0x1, unprogrammed default
  5822                           ;	Debugger Enable bit
  5823                           ;	DEBUG = 0x1, unprogrammed default
  5824                           ;	Extended Instruction Set Enable bit
  5825                           ;	XINST = 0x1, unprogrammed default
  5826   300003                     	org	3145731
  5827   300003  FF                 	db	255
  5828                           
  5829                           ;Config register CONFIG3L @ 0x300004
  5830                           ;	WDT Period Select bits
  5831                           ;	WDTCPS = WDTCPS_31, Divider ratio 1:65536; software control of WDTPS
  5832                           ;	WDT operating mode
  5833                           ;	WDTE = OFF, WDT Disabled
  5834   300004                     	org	3145732
  5835   300004  9F                 	db	159
  5836                           
  5837                           ;Config register CONFIG3H @ 0x300005
  5838                           ;	unspecified, using default values
  5839                           ;	WDT Window Select bits
  5840                           ;	WDTCWS = 0x7, unprogrammed default
  5841                           ;	WDT input clock selector
  5842                           ;	WDTCCS = 0x7, unprogrammed default
  5843   300005                     	org	3145733
  5844   300005  FF                 	db	255
  5845                           
  5846                           ;Config register CONFIG4L @ 0x300006
  5847                           ;	unspecified, using default values
  5848                           ;	Write Protection Block 0
  5849                           ;	WRT0 = 0x1, unprogrammed default
  5850                           ;	Write Protection Block 1
  5851                           ;	WRT1 = 0x1, unprogrammed default
  5852                           ;	Write Protection Block 2
  5853                           ;	WRT2 = 0x1, unprogrammed default
  5854                           ;	Write Protection Block 3
  5855                           ;	WRT3 = 0x1, unprogrammed default
  5856                           ;	Write Protection Block 3
  5857                           ;	WRT4 = 0x1, unprogrammed default
  5858                           ;	Write Protection Block 3
  5859                           ;	WRT5 = 0x1, unprogrammed default
  5860                           ;	Write Protection Block 3
  5861                           ;	WRT6 = 0x1, unprogrammed default
  5862                           ;	Write Protection Block 3
  5863                           ;	WRT7 = 0x1, unprogrammed default
  5864   300006                     	org	3145734
  5865   300006  FF                 	db	255
  5866                           
  5867                           ;Config register CONFIG4H @ 0x300007
  5868                           ;	unspecified, using default values
  5869                           ;	Configuration Register Write Protection bit
  5870                           ;	WRTC = 0x1, unprogrammed default
  5871                           ;	Boot Block Write Protection bit
  5872                           ;	WRTB = 0x1, unprogrammed default
  5873                           ;	Data EEPROM Write Protection bit
  5874                           ;	WRTD = 0x1, unprogrammed default
  5875                           ;	Scanner Enable bit
  5876                           ;	SCANE = 0x1, unprogrammed default
  5877                           ;	Low Voltage Programming Enable bit
  5878                           ;	LVP = 0x1, unprogrammed default
  5879   300007                     	org	3145735
  5880   300007  FF                 	db	255
  5881                           
  5882                           ;Config register CONFIG5L @ 0x300008
  5883                           ;	unspecified, using default values
  5884                           ;	UserNVM Program Memory Code Protection bit
  5885                           ;	CP = 0x1, unprogrammed default
  5886                           ;	DataNVM Memory Code Protection bit
  5887                           ;	CPD = 0x1, unprogrammed default
  5888   300008                     	org	3145736
  5889   300008  FF                 	db	255
  5890                           
  5891                           ;Config register CONFIG5H @ 0x300009
  5892                           ;	unspecified, using default values
  5893   300009                     	org	3145737
  5894   300009  FF                 	db	255
  5895                           
  5896                           ;Config register CONFIG6L @ 0x30000A
  5897                           ;	unspecified, using default values
  5898                           ;	Table Read Protection Block 0
  5899                           ;	EBTR0 = 0x1, unprogrammed default
  5900                           ;	Table Read Protection Block 1
  5901                           ;	EBTR1 = 0x1, unprogrammed default
  5902                           ;	Table Read Protection Block 2
  5903                           ;	EBTR2 = 0x1, unprogrammed default
  5904                           ;	Table Read Protection Block 3
  5905                           ;	EBTR3 = 0x1, unprogrammed default
  5906                           ;	Table Read Protection Block 4
  5907                           ;	EBTR4 = 0x1, unprogrammed default
  5908                           ;	Table Read Protection Block 5
  5909                           ;	EBTR5 = 0x1, unprogrammed default
  5910                           ;	Table Read Protection Block 6
  5911                           ;	EBTR6 = 0x1, unprogrammed default
  5912                           ;	Table Read Protection Block 7
  5913                           ;	EBTR7 = 0x1, unprogrammed default
  5914   30000A                     	org	3145738
  5915   30000A  FF                 	db	255
  5916                           
  5917                           ;Config register CONFIG6H @ 0x30000B
  5918                           ;	unspecified, using default values
  5919                           ;	Boot Block Table Read Protection bit
  5920                           ;	EBTRB = 0x1, unprogrammed default
  5921   30000B                     	org	3145739
  5922   30000B  FF                 	db	255
  5923                           tosu	equ	0xFFF
  5924                           tosh	equ	0xFFE
  5925                           tosl	equ	0xFFD
  5926                           stkptr	equ	0xFFC
  5927                           pclatu	equ	0xFFB
  5928                           pclath	equ	0xFFA
  5929                           pcl	equ	0xFF9
  5930                           tblptru	equ	0xFF8
  5931                           tblptrh	equ	0xFF7
  5932                           tblptrl	equ	0xFF6
  5933                           tablat	equ	0xFF5
  5934                           prodh	equ	0xFF4
  5935                           prodl	equ	0xFF3
  5936                           indf0	equ	0xFEF
  5937                           postinc0	equ	0xFEE
  5938                           postdec0	equ	0xFED
  5939                           preinc0	equ	0xFEC
  5940                           plusw0	equ	0xFEB
  5941                           fsr0h	equ	0xFEA
  5942                           fsr0l	equ	0xFE9
  5943                           wreg	equ	0xFE8
  5944                           indf1	equ	0xFE7
  5945                           postinc1	equ	0xFE6
  5946                           postdec1	equ	0xFE5
  5947                           preinc1	equ	0xFE4
  5948                           plusw1	equ	0xFE3
  5949                           fsr1h	equ	0xFE2
  5950                           fsr1l	equ	0xFE1
  5951                           bsr	equ	0xFE0
  5952                           indf2	equ	0xFDF
  5953                           postinc2	equ	0xFDE
  5954                           postdec2	equ	0xFDD
  5955                           preinc2	equ	0xFDC
  5956                           plusw2	equ	0xFDB
  5957                           fsr2h	equ	0xFDA
  5958                           fsr2l	equ	0xFD9
  5959                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    0
    Data        4
    BSS         123
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     57      86
    BANK0           160      0      98
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          234      0       0

Pointer List with Targets:

    buggy_color_response@c	PTR struct colors size(2) Largest target is 20
		 -> color(COMRAM[20]), 

    motor_init@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> motorR(BANK0[9]), 

    motor_init@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> motorL(BANK0[9]), 

    colourcards_normaliseRGBC@c	PTR struct colors size(2) Largest target is 20
		 -> color(COMRAM[20]), 

    READcolor@c	PTR struct colors size(2) Largest target is 20
		 -> color(COMRAM[20]), 

    instructions@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> motorR(BANK0[9]), 

    instructions@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> motorL(BANK0[9]), 

    space@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlhllll[1]), CCPR2H(BITBIGSFRhhhlll[1]), 

    space@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlhllll[1]), CCPR1H(BITBIGSFRhhhlll[1]), 

    space@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlhllll[1]), CCPR2H(BITBIGSFRhhhlll[1]), 

    space@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlhllll[1]), CCPR1H(BITBIGSFRhhhlll[1]), 

    space@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> motorR(BANK0[9]), 

    space@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> motorL(BANK0[9]), 

    right_45@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlhllll[1]), CCPR2H(BITBIGSFRhhhlll[1]), 

    right_45@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlhllll[1]), CCPR1H(BITBIGSFRhhhlll[1]), 

    right_45@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> motorR(BANK0[9]), 

    right_45@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlhllll[1]), CCPR2H(BITBIGSFRhhhlll[1]), 

    right_45@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlhllll[1]), CCPR1H(BITBIGSFRhhhlll[1]), 

    right_45@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> motorL(BANK0[9]), 

    left_45@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlhllll[1]), CCPR2H(BITBIGSFRhhhlll[1]), 

    left_45@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlhllll[1]), CCPR1H(BITBIGSFRhhhlll[1]), 

    left_45@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlhllll[1]), CCPR2H(BITBIGSFRhhhlll[1]), 

    left_45@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlhllll[1]), CCPR1H(BITBIGSFRhhhlll[1]), 

    left_45@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> motorR(BANK0[9]), 

    left_45@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> motorL(BANK0[9]), 

    stop@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlhllll[1]), CCPR2H(BITBIGSFRhhhlll[1]), 

    stop@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlhllll[1]), CCPR1H(BITBIGSFRhhhlll[1]), 

    stop@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> motorR(BANK0[9]), 

    stop@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlhllll[1]), CCPR2H(BITBIGSFRhhhlll[1]), 

    stop@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlhllll[1]), CCPR1H(BITBIGSFRhhhlll[1]), 

    stop@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> motorL(BANK0[9]), 

    reverse@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlhllll[1]), CCPR2H(BITBIGSFRhhhlll[1]), 

    reverse@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlhllll[1]), CCPR1H(BITBIGSFRhhhlll[1]), 

    reverse@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlhllll[1]), CCPR2H(BITBIGSFRhhhlll[1]), 

    reverse@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlhllll[1]), CCPR1H(BITBIGSFRhhhlll[1]), 

    reverse@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> motorR(BANK0[9]), 

    reverse@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> motorL(BANK0[9]), 

    forward@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlhllll[1]), CCPR2H(BITBIGSFRhhhlll[1]), 

    forward@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlhllll[1]), CCPR1H(BITBIGSFRhhhlll[1]), 

    forward@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlhllll[1]), CCPR2H(BITBIGSFRhhhlll[1]), 

    forward@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlhllll[1]), CCPR1H(BITBIGSFRhhhlll[1]), 

    forward@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> motorR(BANK0[9]), 

    forward@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> motorL(BANK0[9]), 

    setMotorPWM@m.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlhllll[1]), CCPR2H(BITBIGSFRhhhlll[1]), 

    setMotorPWM@m.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlhllll[1]), CCPR1H(BITBIGSFRhhhlll[1]), 

    setMotorPWM@m	PTR struct DC_motor size(2) Largest target is 11
		 -> motorR(BANK0[9]), motorL(BANK0[9]), 

    buggy_color_response@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> motorR(BANK0[9]), 

    buggy_color_response@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> motorL(BANK0[9]), 

    motorR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlhllll[1]), CCPR2H(BITBIGSFRhhhlll[1]), 

    motorR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlhllll[1]), CCPR1H(BITBIGSFRhhhlll[1]), 

    S236DC_motor$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlhllll[1]), CCPR2H(BITBIGSFRhhhlll[1]), 

    motorL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlhllll[1]), CCPR2H(BITBIGSFRhhhlll[1]), 

    S236DC_motor$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlhllll[1]), CCPR1H(BITBIGSFRhhhlll[1]), 

    motorL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlhllll[1]), CCPR1H(BITBIGSFRhhhlll[1]), 


Critical Paths under _main in COMRAM

    _main->_buggy_color_response
    _interrupts_clear->_I2C_2_Master_Write
    _colorclick_interrupts_init->_color_writetoaddr
    _color_click_init->_color_writetoaddr
    _color_writetoaddr->_I2C_2_Master_Write
    _buggy_color_response->_colourcards_normaliseRGBC
    _instructions->_left_45
    _instructions->_right_45
    _space->_stop
    _right_45->_stop
    _reverse->_stop
    _left_45->_stop
    _forward->_stop
    _stop->_setMotorPWM
    _setMotorPWM->___lwdiv
    ___lwdiv->___wmul
    _colourcards_normaliseRGBC->___fldiv
    ___fldiv->___xxtofl
    _READcolor->_color_read_Blue
    _READcolor->_color_read_Clear
    _READcolor->_color_read_Green
    _READcolor->_color_read_Red
    _color_read_Red->_I2C_2_Master_Read
    _color_read_Green->_I2C_2_Master_Read
    _color_read_Clear->_I2C_2_Master_Read
    _color_read_Blue->_I2C_2_Master_Read
    _I2C_2_Master_Write->_I2C_2_Master_Idle
    _I2C_2_Master_Stop->_I2C_2_Master_Idle
    _I2C_2_Master_Start->_I2C_2_Master_Idle
    _I2C_2_Master_RepStart->_I2C_2_Master_Idle
    _I2C_2_Master_Read->_I2C_2_Master_Idle

Critical Paths under _HighISR in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _HighISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _HighISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _HighISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _HighISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _HighISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _HighISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _HighISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _HighISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _HighISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _HighISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _HighISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _HighISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _HighISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _HighISR in BANK13

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   67869
                     _buggyLEDs_init
               _buggy_color_response
                   _color_click_init
         _colorclick_interrupts_init
                    _initDCmotorsPWM
                         _initUSART4
                    _interrupts_init
                         _motor_init
 ---------------------------------------------------------------------------------
 (1) _motor_init                                           4     0      4     152
                                              0 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (1) _interrupts_init                                      0     0      0      22
                   _interrupts_clear
 ---------------------------------------------------------------------------------
 (2) _interrupts_clear                                     0     0      0      22
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (1) _initUSART4                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initDCmotorsPWM                                      2     0      2      98
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _colorclick_interrupts_init                           0     0      0     750
                  _color_writetoaddr
 ---------------------------------------------------------------------------------
 (1) _color_click_init                                     1     1      0     750
                                              4 COMRAM     1     1      0
                  _I2C_2_Master_Init
                  _color_writetoaddr
 ---------------------------------------------------------------------------------
 (2) _color_writetoaddr                                    2     1      1     750
                                              2 COMRAM     2     1      1
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Init                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _buggy_color_response                                 8     2      6   66097
                                             49 COMRAM     8     2      6
                          _READcolor
                             ___flge
          _colourcards_normaliseRGBC
                            _forward
                       _instructions
                               _stop
 ---------------------------------------------------------------------------------
 (2) _instructions                                         8     2      6   44559
                                             35 COMRAM     8     2      6
                            _left_45
                            _reverse
                           _right_45
                              _space
                               _stop
 ---------------------------------------------------------------------------------
 (3) _space                                                6     2      4    8706
                                             25 COMRAM     6     2      4
                        _setMotorPWM
                               _stop
 ---------------------------------------------------------------------------------
 (3) _right_45                                            10     4      6    9468
                                             25 COMRAM    10     4      6
                        _setMotorPWM
                               _stop
 ---------------------------------------------------------------------------------
 (3) _reverse                                              5     1      4    8814
                                             25 COMRAM     5     1      4
                        _setMotorPWM
                               _stop
 ---------------------------------------------------------------------------------
 (3) _left_45                                             10     4      6    9284
                                             25 COMRAM    10     4      6
                        _setMotorPWM
                               _stop
 ---------------------------------------------------------------------------------
 (2) _forward                                              5     1      4    8662
                                             25 COMRAM     5     1      4
                        _setMotorPWM
                               _stop
 ---------------------------------------------------------------------------------
 (2) _stop                                                 6     2      4    5657
                                             19 COMRAM     6     2      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (3) _setMotorPWM                                          6     4      2    2589
                                             13 COMRAM     6     4      2
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     355
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              7     3      4     358
                                              6 COMRAM     7     3      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) _colourcards_normaliseRGBC                           10     8      2    2769
                                             39 COMRAM    10     8      2
                            ___fldiv
                           ___xxtofl
 ---------------------------------------------------------------------------------
 (3) ___xxtofl                                            14    10      4     778
                                              0 COMRAM    14    10      4
 ---------------------------------------------------------------------------------
 (3) ___fldiv                                             25    17      8    1703
                                             14 COMRAM    25    17      8
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (2) ___flge                                              12     4      8    3222
                                              0 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (2) _READcolor                                            2     0      2     604
                                             11 COMRAM     2     0      2
                    _color_read_Blue
                   _color_read_Clear
                   _color_read_Green
                     _color_read_Red
 ---------------------------------------------------------------------------------
 (3) _color_read_Red                                       7     5      2     113
                                              4 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (3) _color_read_Green                                     7     5      2     113
                                              4 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (3) _color_read_Clear                                     7     5      2     113
                                              4 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (3) _color_read_Blue                                      7     5      2     113
                                              4 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Write                                   1     1      0      22
                                              1 COMRAM     1     1      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Stop                                    0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Start                                   0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (4) _I2C_2_Master_RepStart                                0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (4) _I2C_2_Master_Read                                    3     3      0      45
                                              1 COMRAM     3     3      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (4) _I2C_2_Master_Idle                                    1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _buggyLEDs_init                                       0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _HighISR                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _buggyLEDs_init
   _buggy_color_response
     _READcolor
       _color_read_Blue
         _I2C_2_Master_Read
           _I2C_2_Master_Idle
         _I2C_2_Master_RepStart
           _I2C_2_Master_Idle
         _I2C_2_Master_Start
           _I2C_2_Master_Idle
         _I2C_2_Master_Stop
           _I2C_2_Master_Idle
         _I2C_2_Master_Write
           _I2C_2_Master_Idle
       _color_read_Clear
         _I2C_2_Master_Read
         _I2C_2_Master_RepStart
         _I2C_2_Master_Start
         _I2C_2_Master_Stop
         _I2C_2_Master_Write
       _color_read_Green
         _I2C_2_Master_Read
         _I2C_2_Master_RepStart
         _I2C_2_Master_Start
         _I2C_2_Master_Stop
         _I2C_2_Master_Write
       _color_read_Red
         _I2C_2_Master_Read
         _I2C_2_Master_RepStart
         _I2C_2_Master_Start
         _I2C_2_Master_Stop
         _I2C_2_Master_Write
     ___flge
     _colourcards_normaliseRGBC
       ___fldiv
         ___xxtofl (ARG)
       ___xxtofl
     _forward
       _setMotorPWM
         ___lwdiv
           ___wmul (ARG)
         ___wmul
       _stop
         _setMotorPWM
     _instructions
       _left_45
         _setMotorPWM
         _stop
       _reverse
         _setMotorPWM
         _stop
       _right_45
         _setMotorPWM
         _stop
       _space
         _setMotorPWM
         _stop
       _stop
     _stop
   _color_click_init
     _I2C_2_Master_Init
     _color_writetoaddr
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
   _colorclick_interrupts_init
     _color_writetoaddr
   _initDCmotorsPWM
   _initUSART4
   _interrupts_init
     _interrupts_clear
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
   _motor_init

 _HighISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             DE9      0       0      63        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK13           EA      0       0      30        0.0%
BANK13              EA      0       0      31        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0      62       5       61.3%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     39      56       1       91.5%
BITBIGSFRhlhllh     52      0       0      39        0.0%
BITBIGSFRhlhlll     37      0       0      41        0.0%
BITBIGSFRhhhhl      32      0       0      33        0.0%
BITBIGSFRlllhll     2A      0       0      53        0.0%
BITBIGSFRlllllh     23      0       0      60        0.0%
BITBIGSFRllhh       20      0       0      44        0.0%
BITBIGSFRhhhlll     1D      0       0      37        0.0%
BITBIGSFRlllhhh     11      0       0      47        0.0%
BITBIGSFRlllhhh     11      0       0      48        0.0%
BITBIGSFRhhhlhh      E      0       0      34        0.0%
BITBIGSFRhhhhh       D      0       0      32        0.0%
BITBIGSFRlllhhh      C      0       0      46        0.0%
BITBIGSFRllhl        C      0       0      45        0.0%
BITBIGSFRlllhll      9      0       0      57        0.0%
BITBIGSFRhllll       8      0       0      42        0.0%
BITBIGSFRllllh       6      0       0      59        0.0%
BITBIGSFRlllhlh      6      0       0      52        0.0%
BITBIGSFRlllhlh      5      0       0      51        0.0%
BITBIGSFRlllhll      5      0       0      55        0.0%
BITBIGSFRlllhll      3      0       0      54        0.0%
BITBIGSFRlllhll      3      0       0      56        0.0%
BITBIGSFRlllhhl      3      0       0      50        0.0%
BITBIGSFRhlhlll      2      0       0      40        0.0%
BITBIGSFRhhhllh      2      0       0      36        0.0%
BITBIGSFRllllll      2      0       0      61        0.0%
BITBIGSFRhlhllh      1      0       0      38        0.0%
BITBIGSFRhhhlhl      1      0       0      35        0.0%
BITBIGSFRlllhhh      1      0       0      49        0.0%
BITBIGSFRlllhll      1      0       0      58        0.0%
BITBIGSFRlh          1      0       0      43        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      B8      62        0.0%
DATA                 0      0      B8       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.40 build 20220703182018 
Symbol Table                                                                                   Sun Mar 12 13:29:58 2023

                    _color_read_Red 1818                        ___fldiv@aexp 0027  
                      ___fldiv@bexp 0026                        ___fldiv@sign 001F  
                   _color_read_Blue 1908                                  l30 1AF6  
                                l33 1B1C                                  l42 1BE4  
                                l27 1AF4                                  l36 1BEE  
                                l45 1BDA                                  l39 1BF8  
                                l48 1A26                                  l90 1BA2  
                                l93 1866                                  l87 1A98  
                                l96 1956                                  l99 18B6  
               ___wmul@multiplicand 0003                    _color_read_Clear 18B8  
                  _color_read_Green 1868                                 l102 1906  
                               l105 1ACA                                 l121 1278  
                               l300 15F8                                 l118 0542  
                               l160 1B82                                 l313 16A8  
                               l307 1538                                 l324 1020  
                               l308 153A                                 l335 114E  
                               l343 147C                                 l353 0BC0  
                               l292 1BCE                                 l286 0EE0  
                               l279 1738                                 l472 1BB8  
                               l481 1B42                                 l289 19A2  
                               l466 1B62                                 l299 15F6  
                               l469 1A64                                 l751 137C  
                               l746 1336                                 l972 17A4  
                               l979 17AC                                 wreg 000FE8  
                              l2000 1AF6                                l2002 1B06  
                              l2010 0DFA                                l2020 1BE6  
                              l2100 18FE                                l2012 0DFE  
                              l2004 0D76                                l2022 1BEA  
                              l2030 1BE0                                l1150 0D0C  
                              l2014 0E40                                l2006 0D92  
                              l2110 14B2                                l1063 08DC  
                              l1143 0CB0                                l2040 19F4  
                              l2024 1BF0                                l2032 1BD2  
                              l1136 0C18                                l2016 0E5C  
                              l2008 0DE6                                l2112 14D0  
                              l2120 1508                                l2104 147E  
                              l2200 137E                                l1065 073C  
                              l2042 19FC                                l2026 1BF4  
                              l2034 1BD6                                l1074 0782  
                              l2018 0EA0                                l2050 15FA  
                              l2130 0F16                                l2122 1520  
                              l2114 14E8                                l2106 1492  
                              l2210 13E8                                l2202 1392  
                              l1139 0D74                                l2044 1A22  
                              l2036 19E8                                l2028 1BDC  
                              l1076 07FA                                l1068 0700  
                              l2300 06F0                                l2060 1624  
                              l2052 161A                                l2140 0F60  
                              l2132 0F18                                l2124 0EE2  
                              l2116 14F4                                l2108 14A2  
                              l2220 1438                                l2212 13F4  
                              l2204 1394                                l1077 07E8  
                              l2046 1A24                                l2038 19EC  
                              l2310 073A                                l2302 06FE  
                              l2230 0550                                l2070 1668  
                              l2062 163C                                l2054 161C  
                              l2150 0FA4                                l2142 0F6C  
                              l2134 0F24                                l2126 0EF6  
                              l2118 1500                                l2222 144E  
                              l2214 1400                                l2206 13A4  
                              l2080 1818                                l2320 0780  
                              l2312 074C                                l2304 070A  
                              l2240 0590                                l2232 055E  
                              l2400 0D20                                l2072 1676  
                              l2064 1648                                l2160 0FFE  
                              l2152 0FBC                                l2144 0F78  
                              l2136 0F3C                                l2128 0F06  
                              l2224 1462                                l2208 13D0  
                              l2216 1408                                l2082 185E  
                              l2330 07E0                                l2314 0762  
                              l2322 0792                                l2306 0728  
                              l2250 05B6                                l2242 0592  
                              l2234 0560                                l2402 0D44  
                              l2074 168E                                l2066 1654  
                              l2154 0FD2                                l2146 0F84  
                              l2138 0F48                                l2162 1002  
                              l2170 1050                                l2226 147A  
                              l2218 1420                                l2092 1868  
                              l2340 084E                                l2324 07A0  
                              l2316 0768                                l2308 072A  
                              l2260 05F6                                l2252 05C4  
                              l2236 0570                                l2244 059A  
                              l2228 0544                                l2404 0D54  
                              l2076 169A                                l2068 165C  
                              l2500 15DE                                l2156 0FE6  
                              l2148 0F8C                                l2180 10A4  
                              l2172 1068                                l2164 1022  
                              l2420 1AE0                                l2412 1ACC  
                              l2086 1908                                l2094 18AE  
                              l2510 12E6                                l2350 08B8  
                              l2334 080A                                l2342 0852  
                              l2326 07A4                                l2318 0772  
                              l2270 0636                                l2262 05F8  
                              l2254 05C6                                l2246 05AA  
                              l2238 0580                                l2406 0D62  
                              l2430 1170                                l2078 16A6  
                              l2158 0FFC                                l2190 1100  
                              l2182 10B0                                l2174 1074  
                              l2166 1042                                l2422 1AE2  
                              l2414 1AD6                                l2502 1BA4  
                              l2088 194E                                l2520 1374  
                              l2512 12F6                                l2504 127A  
                              l2352 08BC                                l2344 086C  
                              l2336 0816                                l2328 07B2  
                              l2280 0666                                l2272 063E  
                              l2256 05D6                                l2264 0600  
                              l2248 05B0                                l2408 0D64  
                              l2192 1114                                l2184 10B8  
                              l2176 108C                                l2168 1044  
                              l2440 0948                                l2432 08DE  
                              l2600 04FE                                l2416 1ADC  
                              l2424 1B86                                l2098 18B8  
                              l2426 1A9A                                l2522 137A  
                              l2514 1304                                l2506 12A8  
                              l2354 08CA                                l2346 0882  
                              l2338 0824                                l2290 06A4  
                              l2282 0666                                l2274 0642  
                              l2266 0610                                l2258 05E6  
                              l2370 0BE2                                l2194 112A  
                              l2186 10D0                                l2178 1098  
                              l2450 0A00                                l2442 0978  
                              l2434 08F2                                l2602 051A  
                              l2418 1ADE                                l2530 1A74  
                              l2610 1B64                                l2516 1316  
                              l2508 12B8                                l2356 08D0  
                              l2348 089C                                l2292 06B4  
                              l2268 0626                                l2380 0C5A  
                              l2372 0C28                                l2428 1150  
                              l2196 112C                                l2188 10E8  
                              l2460 0A88                                l2452 0A14  
                              l2444 098C                                l2436 090A  
                              l2540 0044                                l2532 1A84  
                              l2620 1B7E                                l2612 1B6E  
                              l2518 1324                                l2358 08D2  
                              l2294 06C4                                l2286 067A  
                              l2278 0656                                l2390 0CE2  
                              l2382 0C66                                l2374 0C3E  
                              l2366 0BC4                                l2198 1130  
                              l2470 0B08                                l2454 0A28  
                              l2462 0A9C                                l2446 09BC  
                              l2438 0936                                l2550 00A0  
                              l2542 0058                                l2534 1A8E  
                              l2526 1A66                                l2622 1B80  
                              l2614 1B70                                l2296 06CC  
                              l2288 0694                                l2392 0CEE  
                              l2384 0C98                                l2368 0BD4  
                              l2480 0B90                                l2472 0B24  
                              l2464 0AB0                                l2456 0A40  
                              l2448 09D0                                l2608 053E  
                              l2560 0184                                l2552 00D2  
                              l2544 0070                                l2536 0028  
                              l2528 1A6A                                l2640 1708  
                              l2632 16AA                                l2616 1B72  
                              l2298 06DC                                l2394 0CFC  
                              l2386 0C9A                                l2378 0C52  
                              l2490 158E                                l2482 153C  
                              l2466 0AC4                                l2474 0B38  
                              l2458 0A6C                                l2570 0268  
                              l2562 01B6                                l2554 0104  
                              l2546 007C                                l2538 0040  
                              l2650 172A                                l2642 1712  
                              l2634 16BA                                l2618 1B7C  
                              l2730 17D2                                l2396 0D1A  
                              l2388 0CA6                                l2492 15A6  
                              l2484 1550                                l2476 0B4C  
                              l2468 0ADC                                l2580 0336  
                              l2572 0284                                l2564 01D2  
                              l2556 0136                                l2548 0088  
                              l2652 172C                                l2644 1714  
                              l2636 16E0                                l2660 196E  
                              l2740 17E4                                l2732 17D6  
                              l2724 17AE                                l2398 0D1C  
                              l2494 15B2                                l2486 1560  
                              l2478 0B7C                                l2590 041A  
                              l2582 0368                                l2574 02B6  
                              l2566 0204                                l2558 0152  
                              l2654 1736                                l2646 171E  
                              l2638 16E4                                l2670 1B44  
                              l2662 198A                                l2750 17EE  
                              l2742 17E6                                l2734 17DA  
                              l2726 17BA                                l2496 15BE  
                              l2488 1570                                l2592 044C  
                              l2584 039A                                l2576 02E8  
                              l2568 0236                                l2648 1720  
                              l2680 1B5A                                l2672 1B4A  
                              l2664 1992                                l2656 1958  
                              l2752 17F0                                l2744 17E8  
                              l2736 17DE                                l2728 17CE  
                              l2666 1BBA                                l2498 15C6  
                              l2594 0468                                l2586 03B6  
                              l2578 0304                                l2682 1B5C  
                              l2674 1B50                                l2658 1966  
                              l2754 17F4                                l2746 17EA  
                              l2738 17E2                                l1980 1742  
                              l1972 1B1E                                l2596 049A  
                              l2588 03E8                                l2668 1A28  
                              l2684 1B5E                                l2676 1B54  
                              l2748 17EC                                l1990 1778  
                              l1982 1754                                l1974 1B3A  
                              l2598 04CC                                l2686 1B60  
                              l2678 1B56                                l1992 178E  
                              l1984 175C                                l1994 1796  
                              l1986 1764                                l1978 173A  
                              l1996 1798                                l1988 1772  
                              l1998 179E                                u1100 1A10  
                              u1101 1A08                                u1030 1754  
                              u1031 1750                                u1040 1772  
                              u1120 1676                                u1200 1068  
                              u1041 176E                                u1121 1672  
                              u1201 1064                                u1050 178E  
                              u1130 1520                                u1210 108C  
                              u1051 178A                                u1131 151C  
                              u1211 1088                                u1060 1B06  
                              u1300 05C4                                u1140 1538  
                              u1220 10D0                                u1061 1B02  
                              u1301 05C0                                u1141 1534  
                              u1221 10CC                                u1070 1B1C  
                              u1118 1A12                                u1310 05D6  
                              u1150 0F3C                                u1230 10E8  
                              u1071 1B18                                u1311 05D2  
                              u1151 0F38                                u1231 10E4  
                              u2007 0092                                u1400 0780  
                              u1320 05E6                                u1080 0D92  
                              u1160 0F60                                u1240 114E  
                              u1401 077C                                u1321 05E2  
                              u1081 0D8E                                u1161 0F5C  
                              u1241 114A                                u2017 08FC  
                              u1410 07A0                                u1330 0626  
                              u1090 0E5C                                u1170 0FA4  
                              u1250 1420                                u1411 079C  
                              u1331 0622                                u1091 0E58  
                              u1171 0FA0                                u2107 10B2  
                              u1251 141C                                u2027 0928  
                              u1420 07B2                                u1340 0666  
                              u1500 0BD4                                u1180 0FBC  
                              u1260 1438                                u1421 07AE  
                              u1341 0662                                u1501 0BD0  
                              u1181 0FB8                                u2117 10F2  
                              u1261 1434                                u2037 0A32  
                              u1430 07E0                                u1350 06DC  
                              u1270 055E                                u1510 0BE2  
                              u1190 1020                                u1431 07DC  
                              u1351 06D8                                u1271 055A  
                              u1511 0BDE                                u1191 101C  
                              u2127 111E                                u2047 0A5E  
                              u1440 07F6                                u1360 06FE  
                              u1280 0570                                u1520 0C3E  
                              u1600 0948                        _BAUD4CONbits 000EE9  
                              u1441 07F2                                u1361 06FA  
                              u1281 056C                                u1521 0C3A  
                              u2137 1502                                u2057 0ACE  
                              u1601 0944                                u1450 080A  
                              u1370 0728                                u1290 0580  
                              u1530 0C94                                u1610 098C  
                              u1451 0806                                u1371 0724  
                              u1291 057C                                u1531 0C90  
                              u2147 0F86                                u2067 0AFA  
                              u1611 0988                                u1700 12E6  
                              u1460 0824                                u1380 074C  
                              u1540 0CDE                                u1620 09D0  
                              u1701 12E2                                u1461 0820  
                              u1381 0748                                u1541 0CDA  
                              u2157 0FC6                                u2077 1402  
                              u1621 09CC                                u1710 1304  
                              u1470 086C                                u1390 0762  
                              u1550 0CFC                                u1630 0A14  
                              u1711 1300                                u1471 0868  
                              u1391 075E                                u1551 0CF8  
                              u2167 0FF0                                u2087 1442  
                              u1631 0A10                                u1720 1324  
                              u1480 089C                                u1560 0D0C  
                              u1640 0AB0                                u1800 0236  
                              u1721 1320                                u1481 0898  
                              u1561 0D08                                u2177 15C0  
                              u2097 146C                                u1641 0AAC  
                              u1801 0232                                u1730 1374  
                              u1490 08CA                                u1570 0D1A  
                              u1650 0B4C                                u1810 0268  
                              _T2PR 000FBC                                u1731 1370  
                              u1491 08C6                                u1571 0D16  
                              u2187 1656                                u1651 0B48  
                              u1811 0264                                u1580 0D54  
                              u1660 0B90                                u1900 049A  
                              u1820 02B6                                u1740 00D2  
                              u1581 0D50                                u1661 0B8C  
                              u1901 0496                                u1821 02B2  
                              u1741 00CE                                u1590 0D62  
                              u1670 15DE                                u1910 04CC  
                              u1830 02E8                                u1750 0104  
                              u1591 0D5E                                u1671 15DA  
                              u1911 04C8                                u1831 02E4  
                              u1751 0100                                u1680 15F6  
                              u1920 04FE                                u1840 0336  
                              u1760 0136                                u1681 15F2  
                              u1921 04FA                                u1841 0332  
                              u1761 0132                                u1690 12A8  
                              u1850 0368                                u1770 0184  
                              u1691 12A4                                u1851 0364  
                              u1771 0180                                u1860 039A  
                              u1780 01B6                                u1861 0396  
                              u1781 01B2                                u1870 03E8  
                              u1790 0204                                u1871 03E4  
                              u1791 0200                                u1880 041A  
                              u1881 0416                                u1890 044C  
                              u1891 0448                                u1987 1A7A  
                              u1997 0062             __end_of_interrupts_init 1B64  
                              _main 17AE                                fsr2h 000FDA  
                              indf2 000FDF                                fsr1l 000FE1  
                              fsr2l 000FD9                                btemp 0057  
                              _stop 15FA                                prodh 000FF4  
                              prodl 000FF3        ??_colorclick_interrupts_init 0005  
                              start 0024                     ___fldiv@new_exp 0020  
            __end_of_color_read_Red 1868                     __end_of_HighISR 0024  
                      ___param_bank 000000                    _color_lowerbound 0055  
                             ?_main 0001                     __end_of___fldiv 08DE  
                             ?_stop 0014                     __end_of___lwdiv 17AE  
                             i2l478 0020            __end_of_interrupts_clear 1BBA  
                      left_45@count 001E          __end_of_I2C_2_Master_Start 1BF0  
        __end_of_I2C_2_Master_Write 1BDC                     __end_of_left_45 1022  
                             _color 003F                     __end_of_forward 15FA  
                             _space 137E                               tablat 000FF5  
                   __end_of_reverse 153C                               ttemp5 0058  
                             ttemp6 005B                               ttemp7 005F  
                             stop@i 0018                               status 000FD8  
                             wtemp8 0058             __end_of_color_read_Blue 1958  
             _I2C_2_Master_RepStart 1BF0                     ?_color_read_Red 0005  
                   __initialization 19A4                        __end_of_main 1818  
                      __end_of_stop 16AA                    _color_upperbound 0053  
                            ??_main 003A                              ??_stop 0018  
                     __activetblptr 000000                        ?_setMotorPWM 000E  
                            _CCPR1H 000FAA                              _CCPR2H 000FA6  
                            _CCPR3H 000F25                              _CCPR4H 000F21  
                            ?_space 001A                   __end_of_READcolor 1ACC  
                            _RC0PPS 000E62                              _RC4REG 000EE3  
                            _RE2PPS 000E74                              _RC7PPS 000E69  
                            _RD5PPS 000E6F                              _RE4PPS 000E76  
                            _RD6PPS 000E70                              i2l1970 001E  
                            i2l1966 000A                              i2l1968 001A  
                            _RG6PPS 000E88                    ?_interrupts_init 0001  
                         ??_HighISR 0001            __end_of_color_click_init 1A9A  
                            _RX4PPS 000E15                              _TX4REG 000EE4  
                  __end_of___xxtofl 0D76                        _CCPTMRS0bits 000FAD  
                            ___flge 127A                              ___wmul 1B1E  
                         ??___fldiv 0017                           ??___lwdiv 000B  
                  ??_buggyLEDs_init 0001                              clear_0 19CA  
                            clear_1 19D6                              _motorL 00B9  
                            _motorR 00B0                              isa$std 000001  
 __end_of_colourcards_normaliseRGBC 127A                           ??_left_45 0020  
                  __end_of_right_45 1150                        __pdataCOMRAM 0053  
                         ??_forward 001E                              tblptrh 000FF7  
                            tblptrl 000FF6                              tblptru 000FF8  
                         ??_reverse 001E                              stop@mL 0014  
                            stop@mR 0016                   ??_initDCmotorsPWM 0003  
      __end_of_buggy_color_response 0544                          ___flge@ff1 0001  
                        ___flge@ff2 0005                        ___xxtofl@arg 000B  
                      ___xxtofl@exp 000A                        ___xxtofl@val 0001  
                        __accesstop 0060             __end_of__initialization 19DC  
          __end_of_color_read_Clear 1908            __end_of_color_read_Green 18B8  
__end_of_colorclick_interrupts_init 1A66          _colorclick_interrupts_init 1A28  
            ?_I2C_2_Master_RepStart 0001                       ___rparam_used 000001  
                  ?_color_read_Blue 0005                      __pcstackCOMRAM 0001  
                     __end_of_space 147E                             ??_space 001E  
                        __pbssBANK0 0060                       ?_instructions 0024  
                 _color_writetoaddr 1B84                        _T2CLKCONbits 000FBF  
                           ?___flge 0001                  ?_color_writetoaddr 0003  
                           ?___wmul 0001                     _read_color_flag 003E  
               ??_color_writetoaddr 0004                             _INT1PPS 000DF1  
                         ?___xxtofl 0001                             _SP4BRGH 000EE6  
                           _SP4BRGL 000EE5                   ?_interrupts_clear 0001  
                           _SSP2ADD 000ED6                             _SSP2BUF 000ED5  
                ??_interrupts_clear 0003              color_writetoaddr@value 0003  
                  ??_color_read_Red 0007                             _HighISR 0008  
                    ??_instructions 002A           __end_of_color_writetoaddr 1BA4  
                _I2C_2_Master_Start 1BE6                          _initUSART4 1B64  
                _I2C_2_Master_Write 1BD0                           ?_right_45 001A  
                           __Hparam 0000                             __Lparam 0000  
                 color_read_Red@tmp 000A                             ___fldiv 0544  
               ?_I2C_2_Master_Start 0001                             ___lwdiv 173A  
               ?_I2C_2_Master_Write 0001                _buggy_color_response 0028  
                           __pcinit 19A4                             __ramtop 0E00  
                           __ptext0 17AE                             __ptext1 1958  
                           __ptext2 1B44                             __ptext3 1BA4  
                           __ptext4 1B64                             __ptext5 16AA  
                           __ptext6 1A28                             __ptext7 1A66  
                           __ptext8 1B84                             __ptext9 1ACC  
                           _left_45 0EE2                           _T2CONbits 000FBD  
                           _forward 153C                          ??___xxtofl 0005  
                         _T2HLTbits 000FBE                             _reverse 147E  
                     right_45@count 001E                       _RxBufWriteCnt 003D  
              ??_I2C_2_Master_Start 0002                ??_I2C_2_Master_Write 0002  
              end_of_initialization 19DC                   ?_color_click_init 0001  
                         _READcolor 1A9A                          ??_right_45 0020  
                ??_color_click_init 0005                             space@mL 001A  
                           space@mR 001C                             postdec1 000FE5  
                           postdec2 000FDD                             postinc0 000FEE  
                           postinc2 000FDE                          _motor_init 1958  
             ?_buggy_color_response 0032                     _initDCmotorsPWM 16AA  
                setMotorPWM@negDuty 0013                       ___xxtofl@sign 0009  
                         _TRISAbits 000F81                  setMotorPWM@posDuty 0012  
                         _TRISBbits 000F82                           _TRISCbits 000F83  
                         _TRISDbits 000F84                           _TRISEbits 000F85  
                         _TRISFbits 000F86                           _TRISGbits 000F87  
                         _TRISHbits 000F88                         ___fldiv@grs 0022  
                       ___fldiv@rem 001B            color_writetoaddr@address 0004  
           ??_I2C_2_Master_RepStart 0002                         _CCP1CONbits 000FAB  
                 ?_color_read_Clear 0005                        _EUSART4RXbuf 009C  
       ?_colorclick_interrupts_init 0001                        _EUSART4TXbuf 0060  
                       _CCP2CONbits 000FA7                   ?_color_read_Green 0005  
                        ?_READcolor 000C                         _CCP3CONbits 000F26  
                       ?_initUSART4 0001                         _CCP4CONbits 000F22  
                ??_color_read_Clear 0007                  ??_color_read_Green 0007  
                    __end_of___flge 137E                      __end_of___wmul 1B44  
                     __pidataCOMRAM 1BFA                __end_of_instructions 0BC2  
        ?_colourcards_normaliseRGBC 0028                 color_read_Clear@tmp 000A  
               start_initialization 19A4                       _TxBufWriteCnt 003B  
            buggy_color_response@mL 0032              buggy_color_response@mR 0034  
               color_read_Green@tmp 000A             __end_of_initDCmotorsPWM 173A  
        colourcards_normaliseRGBC@B 002E          colourcards_normaliseRGBC@C 0030  
        colourcards_normaliseRGBC@G 002C          colourcards_normaliseRGBC@R 002A  
        colourcards_normaliseRGBC@c 0028                            ??___flge 0009  
            ??_buggy_color_response 0038                            ??___wmul 0005  
                       ?_motor_init 0001                          READcolor@c 000C  
                         ___fldiv@a 0013                           ___fldiv@b 000F  
                       __pbssCOMRAM 003A                            ?_HighISR 0001  
                       ??_READcolor 000E                    ___lwdiv@dividend 0007  
                         __pintcode 0008                            ?___fldiv 000F  
                          ?___lwdiv 0007                          right_45@mL 001A  
                        right_45@mR 001C                I2C_2_Master_Read@ack 0003  
                 ??_interrupts_init 0003                I2C_2_Master_Read@tmp 0004  
                          ?_left_45 001A                            ?_forward 001A  
                 _I2C_2_Master_Idle 1AF6                   _I2C_2_Master_Init 1ACC  
                 _I2C_2_Master_Read 19E6                   _I2C_2_Master_Stop 1BDC  
                      _RxBufReadCnt 003C                            ?_reverse 001A  
                ?_I2C_2_Master_Idle 0001                  ?_I2C_2_Master_Init 0001  
                ?_I2C_2_Master_Read 0001                       ??_setMotorPWM 0010  
                ?_I2C_2_Master_Stop 0001                    ___lwdiv@quotient 000B  
          initDCmotorsPWM@PWMperiod 0001                 ??_I2C_2_Master_Idle 0001  
               ??_I2C_2_Master_Init 0001                 ??_I2C_2_Master_Read 0002  
                    ___wmul@product 0005                            _LATAbits 000F79  
               ??_I2C_2_Master_Stop 0002                            _LATCbits 000F7B  
                          _LATDbits 000F7C                            _LATEbits 000F7D  
                          _LATFbits 000F7E                            _LATGbits 000F7F  
                          _LATHbits 000F80                            _IPR0bits 000E1F  
                          _PIE0bits 000E29                            _PIE4bits 000E2D  
                          i2u102_40 001A                            i2u102_41 0016  
                          _PIR0bits 000E33                            _PIR4bits 000E37  
                  ?_initDCmotorsPWM 0001                            _SSP2CON2 000EDA  
                          _SSP2STAT 000ED8           __end_of_I2C_2_Master_Idle 1B1E  
         __end_of_I2C_2_Master_Init 1AF6           __end_of_I2C_2_Master_Read 1A28  
                 ___wmul@multiplier 0001           __end_of_I2C_2_Master_Stop 1BE6  
                      setMotorPWM@m 000E         I2C_2_Master_Write@data_byte 0002  
                         left_45@mL 001A                           left_45@mR 001C  
                 ??_color_read_Blue 0007                        _TxBufReadCnt 003A  
                         copy_data0 19B8       __end_of_I2C_2_Master_RepStart 1BFA  
                color_read_Blue@tmp 000A                 __end_of_setMotorPWM 0EE2  
                      _instructions 08DE                        ??_initUSART4 0001  
             buggy_color_response@c 0036                            __Hrparam 0000  
                          __Lrparam 0000                           forward@mL 001A  
                         forward@mR 001C                          _ANSELBbits 000E9A  
                        _ANSELDbits 000EA7                          _ANSELFbits 000EB4  
       ??_colourcards_normaliseRGBC 002A                            ___xxtofl 0BC2  
                    _buggyLEDs_init 1BBA                     ___lwdiv@divisor 0009  
                __end_of_initUSART4 1B84                     ___lwdiv@counter 000D  
                          __ptext10 0028                            __ptext11 08DE  
                          __ptext20 173A                            __ptext12 137E  
                          __ptext21 1150                            __ptext13 1022  
                          __ptext30 1BD0                            __ptext22 0BC2  
                          __ptext14 147E                            __ptext31 1BDC  
                          __ptext23 0544                            __ptext15 0EE2  
                          __ptext32 1BE6                            __ptext24 127A  
                          __ptext16 153C                            __ptext33 1BF0  
                          __ptext25 1A9A                            __ptext17 15FA  
                          __ptext34 19E6                            __ptext26 1818  
                          __ptext18 0D76                            __ptext35 1AF6  
                          __ptext27 1868                            __ptext19 1B1E  
                          __ptext36 1BBA                            __ptext28 18B8  
                          __ptext29 1908                           right_45@i 0022  
                      _SSP2CON1bits 000ED9                        _SSP2CON2bits 000EDA  
                    instructions@mL 0024                      instructions@mR 0026  
                  _interrupts_clear 1BA4                            _right_45 1022  
                         reverse@mL 001A                           reverse@mR 001C  
                 instructions@count 0028                            isa$xinst 000000  
                        _RC4STAbits 000EE7                            int$flags 0057  
                      ??_motor_init 0005                            left_45@i 0022  
            __end_of_buggyLEDs_init 1BD0                          _INTCONbits 000FF2  
                       _setMotorPWM 0D76                            intlevel2 0000  
                __end_of_motor_init 19A4           _colourcards_normaliseRGBC 1150  
                   _interrupts_init 1B44                        motor_init@mL 0001  
                      motor_init@mR 0003                    _color_click_init 1A66  
                   ?_buggyLEDs_init 0001                          _SSP2DATPPS 000E1D  
                        _SSP2CLKPPS 000E1C                          _TX4STAbits 000EE8  
