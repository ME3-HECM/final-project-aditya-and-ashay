

Microchip MPLAB XC8 Assembler V2.40 build 20220703182018 
                                                                                               Thu Mar 16 11:41:55 2023

Microchip MPLAB XC8 C Compiler v2.40 (Free license) build 20220703182018 Og1 
     1                           	processor	18F67K40
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1,group=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1,group=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1,group=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1
    47                           	psect	text33,global,reloc=2,class=CODE,delta=1
    48                           	psect	text34,global,reloc=2,class=CODE,delta=1
    49                           	psect	text35,global,reloc=2,class=CODE,delta=1
    50                           	psect	text36,global,reloc=2,class=CODE,delta=1
    51                           	psect	text37,global,reloc=2,class=CODE,delta=1
    52                           	psect	text38,global,reloc=2,class=CODE,delta=1
    53                           	psect	text39,global,reloc=2,class=CODE,delta=1
    54                           	psect	text40,global,reloc=2,class=CODE,delta=1
    55                           	psect	text41,global,reloc=2,class=CODE,delta=1
    56                           	psect	text42,global,reloc=2,class=CODE,delta=1
    57                           	psect	text43,global,reloc=2,class=CODE,delta=1,group=1
    58                           	psect	text44,global,reloc=2,class=CODE,delta=1,group=1
    59                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    60                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    61                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    62                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    63                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    64                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    65   000000                     
    66                           ; Generated 06/04/2022 GMT
    67                           ; 
    68                           ; Copyright Â© 2022, Microchip Technology Inc. and its subsidiaries ("Microchip")
    69                           ; All rights reserved.
    70                           ; 
    71                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    72                           ; 
    73                           ; Redistribution and use in source and binary forms, with or without modification, are
    74                           ; permitted provided that the following conditions are met:
    75                           ; 
    76                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    77                           ;        conditions and the following disclaimer.
    78                           ; 
    79                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    80                           ;        of conditions and the following disclaimer in the documentation and/or other
    81                           ;        materials provided with the distribution. Publication is not required when
    82                           ;        this file is used in an embedded application.
    83                           ; 
    84                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    85                           ;        software without specific prior written permission.
    86                           ; 
    87                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    88                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    89                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    90                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    91                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    92                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    93                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    94                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    95                           ; 
    96                           ; 
    97                           ; Code-generator required, PIC18F67K40 Definitions
    98                           ; 
    99                           ; SFR Addresses
   100   000000                     
   101                           	psect	idataCOMRAM
   102   0024EA                     __pidataCOMRAM:
   103                           	callstack 0
   104                           
   105                           ;initializer for _right_timer
   106   0024EA  0060               	dw	96
   107                           
   108                           ;initializer for _left_timer
   109   0024EC  0062               	dw	98
   110                           
   111                           	psect	idataBANK0
   112   0024EE                     __pidataBANK0:
   113                           	callstack 0
   114                           
   115                           ;initializer for _color_upperbound
   116   0024EE  09C4               	dw	2500
   117                           
   118                           ;initializer for _square_timer
   119   0024F0  0384               	dw	900
   120   000000                     _TRISFbits	set	3974
   121   000000                     _LATDbits	set	3964
   122   000000                     _TRISGbits	set	3975
   123   000000                     _TRISEbits	set	3973
   124   000000                     _TX4REG	set	3812
   125   000000                     _RC4STAbits	set	3815
   126   000000                     _SP4BRGH	set	3814
   127   000000                     _SSP2CON2bits	set	3802
   128   000000                     _RX4PPS	set	3605
   129   000000                     _SSP2CLKPPS	set	3612
   130   000000                     _SSP2DATPPS	set	3613
   131   000000                     _ANSELDbits	set	3751
   132   000000                     _SSP2ADD	set	3798
   133   000000                     _SSP2CON1bits	set	3801
   134   000000                     _RC4REG	set	3811
   135   000000                     _SP4BRGL	set	3813
   136   000000                     _TX4STAbits	set	3816
   137   000000                     _BAUD4CONbits	set	3817
   138   000000                     _LATAbits	set	3961
   139   000000                     _LATGbits	set	3967
   140   000000                     _SSP2CON2	set	3802
   141   000000                     _TRISDbits	set	3972
   142   000000                     _SSP2STAT	set	3800
   143   000000                     _ANSELFbits	set	3764
   144   000000                     _SSP2BUF	set	3797
   145   000000                     _IPR0bits	set	3615
   146   000000                     _PIE0bits	set	3625
   147   000000                     _PIR4bits	set	3639
   148   000000                     _RC0PPS	set	3682
   149   000000                     _RD5PPS	set	3695
   150   000000                     _RE2PPS	set	3700
   151   000000                     _RD6PPS	set	3696
   152   000000                     _TRISAbits	set	3969
   153   000000                     _LATHbits	set	3968
   154   000000                     _TRISCbits	set	3971
   155   000000                     _LATCbits	set	3963
   156   000000                     _LATEbits	set	3965
   157   000000                     _LATFbits	set	3966
   158   000000                     _RC7PPS	set	3689
   159   000000                     _CCPR4H	set	3873
   160   000000                     _CCPR3H	set	3877
   161   000000                     _TRISHbits	set	3976
   162   000000                     _PORTFbits	set	3982
   163   000000                     _T2PR	set	4028
   164   000000                     _T2CONbits	set	4029
   165   000000                     _CCPR2H	set	4006
   166   000000                     _CCPR1H	set	4010
   167   000000                     _RE4PPS	set	3702
   168   000000                     _RG6PPS	set	3720
   169   000000                     _TMR0L	set	4051
   170   000000                     _TMR0H	set	4052
   171   000000                     _T0CON0bits	set	4053
   172   000000                     _T0CON1bits	set	4054
   173   000000                     _INTCONbits	set	4082
   174   000000                     _T2CLKCONbits	set	4031
   175   000000                     _T2HLTbits	set	4030
   176   000000                     _CCP1CONbits	set	4011
   177   000000                     _CCPTMRS0bits	set	4013
   178   000000                     _CCP2CONbits	set	4007
   179   000000                     _ADREFbits	set	3928
   180   000000                     _CCP3CONbits	set	3878
   181   000000                     _CCP4CONbits	set	3874
   182   000000                     _PIR0bits	set	3635
   183   000000                     _ADPCH	set	3935
   184   000000                     _ADRESH	set	3940
   185   000000                     _ADCON0bits	set	3936
   186                           
   187                           ; #config settings
   188                           
   189                           	psect	cinit
   190   002050                     __pcinit:
   191                           	callstack 0
   192   002050                     start_initialization:
   193                           	callstack 0
   194   002050                     __initialization:
   195                           	callstack 0
   196                           
   197                           ; Initialize objects allocated to BANK0 (4 bytes)
   198                           ; load TBLPTR registers with __pidataBANK0
   199   002050  0EEE               	movlw	low __pidataBANK0
   200   002052  6EF6               	movwf	tblptrl,c
   201   002054  0E24               	movlw	high __pidataBANK0
   202   002056  6EF7               	movwf	tblptrh,c
   203   002058  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   204   00205A  6EF8               	movwf	tblptru,c
   205   00205C  EE00  F0C2         	lfsr	0,__pdataBANK0
   206   002060  EE10 F004          	lfsr	1,4
   207   002064                     copy_data0:
   208   002064  0009               	tblrd		*+
   209   002066  CFF5 FFEE          	movff	tablat,postinc0
   210   00206A  50E5               	movf	postdec1,w,c
   211   00206C  50E1               	movf	fsr1l,w,c
   212   00206E  E1FA               	bnz	copy_data0
   213                           
   214                           ; Initialize objects allocated to COMRAM (4 bytes)
   215                           ; load TBLPTR registers with __pidataCOMRAM
   216   002070  0EEA               	movlw	low __pidataCOMRAM
   217   002072  6EF6               	movwf	tblptrl,c
   218   002074  0E24               	movlw	high __pidataCOMRAM
   219   002076  6EF7               	movwf	tblptrh,c
   220   002078  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   221   00207A  6EF8               	movwf	tblptru,c
   222   00207C  EE00  F058         	lfsr	0,__pdataCOMRAM
   223   002080  EE10 F004          	lfsr	1,4
   224   002084                     copy_data1:
   225   002084  0009               	tblrd		*+
   226   002086  CFF5 FFEE          	movff	tablat,postinc0
   227   00208A  50E5               	movf	postdec1,w,c
   228   00208C  50E1               	movf	fsr1l,w,c
   229   00208E  E1FA               	bnz	copy_data1
   230                           
   231                           ; Clear objects allocated to BANK0 (98 bytes)
   232   002090  EE00  F060         	lfsr	0,__pbssBANK0
   233   002094  0E62               	movlw	98
   234   002096                     clear_0:
   235   002096  6AEE               	clrf	postinc0,c
   236   002098  06E8               	decf	wreg,f,c
   237   00209A  E1FD               	bnz	clear_0
   238                           
   239                           ; Clear objects allocated to COMRAM (24 bytes)
   240   00209C  EE00  F040         	lfsr	0,__pbssCOMRAM
   241   0020A0  0E18               	movlw	24
   242   0020A2                     clear_1:
   243   0020A2  6AEE               	clrf	postinc0,c
   244   0020A4  06E8               	decf	wreg,f,c
   245   0020A6  E1FD               	bnz	clear_1
   246   0020A8                     end_of_initialization:
   247                           	callstack 0
   248   0020A8                     __end_of__initialization:
   249                           	callstack 0
   250   0020A8  905C               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   251   0020AA  925C               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   252   0020AC  0100               	movlb	0
   253   0020AE  EFBC  F00F         	goto	_main	;jump to C main() function
   254                           
   255                           	psect	bssCOMRAM
   256   000040                     __pbssCOMRAM:
   257                           	callstack 0
   258   000040                     _timer_val:
   259                           	callstack 0
   260   000040                     	ds	2
   261   000042                     _timer_index:
   262                           	callstack 0
   263   000042                     	ds	1
   264   000043                     _card_count:
   265                           	callstack 0
   266   000043                     	ds	1
   267   000044                     _color:
   268                           	callstack 0
   269   000044                     	ds	20
   270                           
   271                           	psect	dataCOMRAM
   272   000058                     __pdataCOMRAM:
   273                           	callstack 0
   274   000058                     _right_timer:
   275                           	callstack 0
   276   000058                     	ds	2
   277   00005A                     _left_timer:
   278                           	callstack 0
   279   00005A                     	ds	2
   280                           
   281                           	psect	bssBANK0
   282   000060                     __pbssBANK0:
   283                           	callstack 0
   284   000060                     _timer_memory:
   285                           	callstack 0
   286   000060                     	ds	40
   287   000088                     _card_memory:
   288                           	callstack 0
   289   000088                     	ds	40
   290   0000B0                     _motorR:
   291                           	callstack 0
   292   0000B0                     	ds	9
   293   0000B9                     _motorL:
   294                           	callstack 0
   295   0000B9                     	ds	9
   296                           
   297                           	psect	dataBANK0
   298   0000C2                     __pdataBANK0:
   299                           	callstack 0
   300   0000C2                     _color_upperbound:
   301                           	callstack 0
   302   0000C2                     	ds	2
   303   0000C4                     _square_timer:
   304                           	callstack 0
   305   0000C4                     	ds	2
   306                           
   307                           	psect	cstackBANK0
   308   0000C6                     __pcstackBANK0:
   309                           	callstack 0
   310   0000C6                     ??_main:
   311                           
   312                           ; 1 bytes @ 0x0
   313   0000C6                     	ds	2
   314                           
   315                           	psect	cstackCOMRAM
   316   000001                     __pcstackCOMRAM:
   317                           	callstack 0
   318   000001                     ??_LowISR:
   319   000001                     
   320                           ; 1 bytes @ 0x0
   321   000001                     	ds	2
   322   000003                     ??_I2C_2_Master_Idle:
   323   000003                     ?___wmul:
   324                           	callstack 0
   325   000003                     ?___xxtofl:
   326                           	callstack 0
   327   000003                     delay_ms_func@time:
   328                           	callstack 0
   329   000003                     initDCmotorsPWM@PWMperiod:
   330                           	callstack 0
   331   000003                     motor_init@mL:
   332                           	callstack 0
   333   000003                     custom_delay@temp:
   334                           	callstack 0
   335   000003                     ___wmul@multiplier:
   336                           	callstack 0
   337   000003                     ___flge@ff1:
   338                           	callstack 0
   339   000003                     ___xxtofl@val:
   340                           	callstack 0
   341                           
   342                           ; 4 bytes @ 0x2
   343   000003                     	ds	1
   344   000004                     ??_I2C_2_Master_Read:
   345   000004                     I2C_2_Master_Write@data_byte:
   346                           	callstack 0
   347                           
   348                           ; 1 bytes @ 0x3
   349   000004                     	ds	1
   350   000005                     ??_delay_ms_func:
   351   000005                     ??_custom_delay:
   352   000005                     I2C_2_Master_Read@ack:
   353                           	callstack 0
   354   000005                     color_writetoaddr@value:
   355                           	callstack 0
   356   000005                     motor_init@mR:
   357                           	callstack 0
   358   000005                     ___wmul@multiplicand:
   359                           	callstack 0
   360                           
   361                           ; 2 bytes @ 0x4
   362   000005                     	ds	1
   363   000006                     I2C_2_Master_Read@tmp:
   364                           	callstack 0
   365   000006                     color_writetoaddr@address:
   366                           	callstack 0
   367   000006                     custom_delay@i:
   368                           	callstack 0
   369                           
   370                           ; 2 bytes @ 0x5
   371   000006                     	ds	1
   372   000007                     ??_color_click_init:
   373   000007                     ??___xxtofl:
   374   000007                     ?_color_read_Red:
   375                           	callstack 0
   376   000007                     ?_color_read_Blue:
   377                           	callstack 0
   378   000007                     ?_color_read_Green:
   379                           	callstack 0
   380   000007                     ?_color_read_Clear:
   381                           	callstack 0
   382   000007                     delay_ms_func@i:
   383                           	callstack 0
   384   000007                     ___wmul@product:
   385                           	callstack 0
   386   000007                     ___flge@ff2:
   387                           	callstack 0
   388                           
   389                           ; 4 bytes @ 0x6
   390   000007                     	ds	1
   391   000008                     
   392                           ; 1 bytes @ 0x7
   393   000008                     	ds	1
   394   000009                     ??_color_read_Red:
   395   000009                     ??_color_read_Blue:
   396   000009                     ??_color_read_Green:
   397   000009                     ??_color_read_Clear:
   398   000009                     ?___lwdiv:
   399                           	callstack 0
   400   000009                     ___lwdiv@dividend:
   401                           	callstack 0
   402                           
   403                           ; 2 bytes @ 0x8
   404   000009                     	ds	2
   405   00000B                     ??___flge:
   406   00000B                     ___xxtofl@sign:
   407                           	callstack 0
   408   00000B                     ___lwdiv@divisor:
   409                           	callstack 0
   410                           
   411                           ; 2 bytes @ 0xA
   412   00000B                     	ds	1
   413   00000C                     ___xxtofl@exp:
   414                           	callstack 0
   415   00000C                     color_read_Red@tmp:
   416                           	callstack 0
   417   00000C                     color_read_Blue@tmp:
   418                           	callstack 0
   419   00000C                     color_read_Green@tmp:
   420                           	callstack 0
   421   00000C                     color_read_Clear@tmp:
   422                           	callstack 0
   423                           
   424                           ; 2 bytes @ 0xB
   425   00000C                     	ds	1
   426   00000D                     ___lwdiv@quotient:
   427                           	callstack 0
   428   00000D                     ___xxtofl@arg:
   429                           	callstack 0
   430                           
   431                           ; 4 bytes @ 0xC
   432   00000D                     	ds	2
   433   00000F                     ___lwdiv@counter:
   434                           	callstack 0
   435                           
   436                           ; 1 bytes @ 0xE
   437   00000F                     	ds	1
   438   000010                     setMotorPWM@m:
   439                           	callstack 0
   440                           
   441                           ; 2 bytes @ 0xF
   442   000010                     	ds	1
   443   000011                     ?___fldiv:
   444                           	callstack 0
   445   000011                     ___fldiv@b:
   446                           	callstack 0
   447                           
   448                           ; 4 bytes @ 0x10
   449   000011                     	ds	1
   450   000012                     ??_setMotorPWM:
   451                           
   452                           ; 1 bytes @ 0x11
   453   000012                     	ds	2
   454   000014                     setMotorPWM@posDuty:
   455                           	callstack 0
   456                           
   457                           ; 1 bytes @ 0x13
   458   000014                     	ds	1
   459   000015                     setMotorPWM@negDuty:
   460                           	callstack 0
   461   000015                     ___fldiv@a:
   462                           	callstack 0
   463                           
   464                           ; 4 bytes @ 0x14
   465   000015                     	ds	1
   466   000016                     stop@mL:
   467                           	callstack 0
   468                           
   469                           ; 2 bytes @ 0x15
   470   000016                     	ds	2
   471   000018                     stop@mR:
   472                           	callstack 0
   473                           
   474                           ; 2 bytes @ 0x17
   475   000018                     	ds	1
   476   000019                     ??___fldiv:
   477                           
   478                           ; 1 bytes @ 0x18
   479   000019                     	ds	1
   480   00001A                     stop@i:
   481                           	callstack 0
   482                           
   483                           ; 1 bytes @ 0x19
   484   00001A                     	ds	1
   485   00001B                     forward@mL:
   486                           	callstack 0
   487   00001B                     reverse@mL:
   488                           	callstack 0
   489   00001B                     left_45@mL:
   490                           	callstack 0
   491   00001B                     right_45@mL:
   492                           	callstack 0
   493   00001B                     space@mL:
   494                           	callstack 0
   495                           
   496                           ; 2 bytes @ 0x1A
   497   00001B                     	ds	2
   498   00001D                     forward@mR:
   499                           	callstack 0
   500   00001D                     reverse@mR:
   501                           	callstack 0
   502   00001D                     left_45@mR:
   503                           	callstack 0
   504   00001D                     right_45@mR:
   505                           	callstack 0
   506   00001D                     space@mR:
   507                           	callstack 0
   508   00001D                     ___fldiv@rem:
   509                           	callstack 0
   510                           
   511                           ; 4 bytes @ 0x1C
   512   00001D                     	ds	2
   513   00001F                     ??_space:
   514   00001F                     left_45@count:
   515                           	callstack 0
   516   00001F                     right_45@count:
   517                           	callstack 0
   518                           
   519                           ; 1 bytes @ 0x1E
   520   00001F                     	ds	1
   521   000020                     left_45@left_timer:
   522                           	callstack 0
   523   000020                     right_45@right_timer:
   524                           	callstack 0
   525                           
   526                           ; 2 bytes @ 0x1F
   527   000020                     	ds	1
   528   000021                     ___fldiv@sign:
   529                           	callstack 0
   530                           
   531                           ; 1 bytes @ 0x20
   532   000021                     	ds	1
   533   000022                     ??_left_45:
   534   000022                     ??_right_45:
   535   000022                     ___fldiv@new_exp:
   536                           	callstack 0
   537                           
   538                           ; 2 bytes @ 0x21
   539   000022                     	ds	2
   540   000024                     left_45@i:
   541                           	callstack 0
   542   000024                     right_45@i:
   543                           	callstack 0
   544   000024                     ___fldiv@grs:
   545                           	callstack 0
   546                           
   547                           ; 4 bytes @ 0x23
   548   000024                     	ds	1
   549   000025                     reverse_yellow@mL:
   550                           	callstack 0
   551   000025                     reverse_pink@mL:
   552                           	callstack 0
   553   000025                     movement@mL:
   554                           	callstack 0
   555                           
   556                           ; 2 bytes @ 0x24
   557   000025                     	ds	2
   558   000027                     reverse_yellow@mR:
   559                           	callstack 0
   560   000027                     reverse_pink@mR:
   561                           	callstack 0
   562   000027                     movement@mR:
   563                           	callstack 0
   564                           
   565                           ; 2 bytes @ 0x26
   566   000027                     	ds	1
   567   000028                     ___fldiv@bexp:
   568                           	callstack 0
   569                           
   570                           ; 1 bytes @ 0x27
   571   000028                     	ds	1
   572   000029                     ??_reverse_yellow:
   573   000029                     ??_reverse_pink:
   574   000029                     movement@count:
   575                           	callstack 0
   576   000029                     ___fldiv@aexp:
   577                           	callstack 0
   578                           
   579                           ; 1 bytes @ 0x28
   580   000029                     	ds	1
   581   00002A                     ??_movement:
   582   00002A                     READcolor@c:
   583                           	callstack 0
   584                           
   585                           ; 2 bytes @ 0x29
   586   00002A                     	ds	1
   587   00002B                     movement_return@mL:
   588                           	callstack 0
   589                           
   590                           ; 2 bytes @ 0x2A
   591   00002B                     	ds	1
   592   00002C                     
   593                           ; 1 bytes @ 0x2B
   594   00002C                     	ds	1
   595   00002D                     movement_return@mR:
   596                           	callstack 0
   597                           
   598                           ; 2 bytes @ 0x2C
   599   00002D                     	ds	2
   600   00002F                     movement_return@count:
   601                           	callstack 0
   602                           
   603                           ; 1 bytes @ 0x2E
   604   00002F                     	ds	1
   605   000030                     return_home@mL:
   606                           	callstack 0
   607                           
   608                           ; 2 bytes @ 0x2F
   609   000030                     	ds	2
   610   000032                     return_home@mR:
   611                           	callstack 0
   612                           
   613                           ; 2 bytes @ 0x31
   614   000032                     	ds	2
   615   000034                     ??_return_home:
   616                           
   617                           ; 1 bytes @ 0x33
   618   000034                     	ds	2
   619   000036                     buggy_color_response@mL:
   620                           	callstack 0
   621                           
   622                           ; 2 bytes @ 0x35
   623   000036                     	ds	2
   624   000038                     buggy_color_response@mR:
   625                           	callstack 0
   626                           
   627                           ; 2 bytes @ 0x37
   628   000038                     	ds	2
   629   00003A                     buggy_color_response@c:
   630                           	callstack 0
   631                           
   632                           ; 2 bytes @ 0x39
   633   00003A                     	ds	2
   634   00003C                     ??_buggy_color_response:
   635                           
   636                           ; 1 bytes @ 0x3B
   637   00003C                     	ds	2
   638   00003E                     buggy_color_response@count2:
   639                           	callstack 0
   640                           
   641                           ; 1 bytes @ 0x3D
   642   00003E                     	ds	1
   643   00003F                     buggy_color_response@j:
   644                           	callstack 0
   645                           
   646                           ; 1 bytes @ 0x3E
   647   00003F                     	ds	1
   648                           
   649 ;;
   650 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   651 ;;
   652 ;; *************** function _main *****************
   653 ;; Defined at:
   654 ;;		line 19 in file "main.c"
   655 ;; Parameters:    Size  Location     Type
   656 ;;		None
   657 ;; Auto vars:     Size  Location     Type
   658 ;;		None
   659 ;; Return value:  Size  Location     Type
   660 ;;                  1    wreg      void 
   661 ;; Registers used:
   662 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   663 ;; Tracked objects:
   664 ;;		On entry : 0/0
   665 ;;		On exit  : 0/0
   666 ;;		Unchanged: 0/0
   667 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   668 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   669 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   670 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   671 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   672 ;;Total ram usage:        2 bytes
   673 ;; Hardware stack levels required when called: 9
   674 ;; This function calls:
   675 ;;		_buggy_color_response
   676 ;;		_complete_initialisation
   677 ;;		_timer_reset
   678 ;; This function is called by:
   679 ;;		Startup code after reset
   680 ;; This function uses a non-reentrant model
   681 ;;
   682                           
   683                           	psect	text0
   684   001F78                     __ptext0:
   685                           	callstack 0
   686   001F78                     _main:
   687                           	callstack 22
   688   001F78                     
   689                           ;main.c: 21:     complete_initialisation();
   690   001F78  EC1F  F011         	call	_complete_initialisation	;wreg free
   691   001F7C                     l406:
   692   001F7C  A48E               	btfss	142,2,c	;volatile
   693   001F7E  EFC3  F00F         	goto	u2631
   694   001F82  EFC5  F00F         	goto	u2630
   695   001F86                     u2631:
   696   001F86  EFCC  F00F         	goto	l410
   697   001F8A                     u2630:
   698   001F8A  B68E               	btfsc	142,3,c	;volatile
   699   001F8C  EFCA  F00F         	goto	u2641
   700   001F90  EFCC  F00F         	goto	u2640
   701   001F94                     u2641:
   702   001F94  EFBE  F00F         	goto	l406
   703   001F98                     u2640:
   704   001F98                     l410:
   705                           
   706                           ;main.c: 27:     if (!PORTFbits.RF3){_delay((unsigned long)((500)*(64000000/4000.0)));ti
      +                          mer_reset();
   707   001F98  B68E               	btfsc	142,3,c	;volatile
   708   001F9A  EFD1  F00F         	goto	u2651
   709   001F9E  EFD3  F00F         	goto	u2650
   710   001FA2                     u2651:
   711   001FA2  EFF1  F00F         	goto	l415
   712   001FA6                     u2650:
   713   001FA6  0E29               	movlw	41
   714   001FA8  0100               	movlb	0	; () banked
   715   001FAA  6FC7               	movwf	(??_main+1)& (0+255),b
   716   001FAC  0E96               	movlw	150
   717   001FAE  6FC6               	movwf	??_main& (0+255),b
   718   001FB0  0E7F               	movlw	127
   719   001FB2                     u2667:
   720   001FB2  2EE8               	decfsz	wreg,f,c
   721   001FB4  D7FE               	bra	u2667
   722   001FB6  2FC6               	decfsz	??_main& (0+255),f,b
   723   001FB8  D7FC               	bra	u2667
   724   001FBA  2FC7               	decfsz	(??_main+1)& (0+255),f,b
   725   001FBC  D7FA               	bra	u2667
   726   001FBE  EC4F  F012         	call	_timer_reset	;wreg free
   727   001FC2                     l3353:
   728                           
   729                           ;main.c: 31:         buggy_color_response(&motorL,&motorR,&color);
   730   001FC2  0EB9               	movlw	low _motorL
   731   001FC4  6E36               	movwf	buggy_color_response@mL^0,c
   732   001FC6  0E00               	movlw	high _motorL
   733   001FC8  6E37               	movwf	(buggy_color_response@mL+1)^0,c
   734   001FCA  0EB0               	movlw	low _motorR
   735   001FCC  6E38               	movwf	buggy_color_response@mR^0,c
   736   001FCE  0E00               	movlw	high _motorR
   737   001FD0  6E39               	movwf	(buggy_color_response@mR+1)^0,c
   738   001FD2  0E44               	movlw	low _color
   739   001FD4  6E3A               	movwf	buggy_color_response@c^0,c
   740   001FD6  0E00               	movlw	high _color
   741   001FD8  6E3B               	movwf	(buggy_color_response@c+1)^0,c
   742   001FDA  EC24  F000         	call	_buggy_color_response	;wreg free
   743   001FDE  EFE1  F00F         	goto	l3353
   744   001FE2                     l415:
   745   001FE2  EF22  F000         	goto	start
   746   001FE6                     __end_of_main:
   747                           	callstack 0
   748                           
   749 ;; *************** function _complete_initialisation *****************
   750 ;; Defined at:
   751 ;;		line 16 in file "initialisation.c"
   752 ;; Parameters:    Size  Location     Type
   753 ;;		None
   754 ;; Auto vars:     Size  Location     Type
   755 ;;		None
   756 ;; Return value:  Size  Location     Type
   757 ;;                  1    wreg      void 
   758 ;; Registers used:
   759 ;;		wreg, status,2, status,0, cstack
   760 ;; Tracked objects:
   761 ;;		On entry : 0/0
   762 ;;		On exit  : 0/0
   763 ;;		Unchanged: 0/0
   764 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   765 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   766 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   767 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   768 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   769 ;;Total ram usage:        0 bytes
   770 ;; Hardware stack levels used: 1
   771 ;; Hardware stack levels required when called: 5
   772 ;; This function calls:
   773 ;;		_ADC_init
   774 ;;		_I2C_2_Master_Init
   775 ;;		_Timer0_init
   776 ;;		_buggyLEDs_init
   777 ;;		_color_click_init
   778 ;;		_initDCmotorsPWM
   779 ;;		_initUSART4
   780 ;;		_interrupts_init
   781 ;;		_motor_init
   782 ;;		_ports_init
   783 ;; This function is called by:
   784 ;;		_main
   785 ;; This function uses a non-reentrant model
   786 ;;
   787                           
   788                           	psect	text1
   789   00223E                     __ptext1:
   790                           	callstack 0
   791   00223E                     _complete_initialisation:
   792                           	callstack 25
   793   00223E                     
   794                           ;initialisation.c: 18:     initDCmotorsPWM(99);
   795   00223E  0E00               	movlw	0
   796   002240  6E04               	movwf	(initDCmotorsPWM@PWMperiod+1)^0,c
   797   002242  0E63               	movlw	99
   798   002244  6E03               	movwf	initDCmotorsPWM@PWMperiod^0,c
   799   002246  ECB8  F00E         	call	_initDCmotorsPWM	;wreg free
   800   00224A                     
   801                           ;initialisation.c: 19:     buggyLEDs_init();
   802   00224A  EC44  F012         	call	_buggyLEDs_init	;wreg free
   803   00224E                     
   804                           ;initialisation.c: 20:     ports_init();
   805   00224E  ECF7  F011         	call	_ports_init	;wreg free
   806   002252                     
   807                           ;initialisation.c: 21:     motor_init(&motorL,&motorR);
   808   002252  0EB9               	movlw	low _motorL
   809   002254  6E03               	movwf	motor_init@mL^0,c
   810   002256  0E00               	movlw	high _motorL
   811   002258  6E04               	movwf	(motor_init@mL+1)^0,c
   812   00225A  0EB0               	movlw	low _motorR
   813   00225C  6E05               	movwf	motor_init@mR^0,c
   814   00225E  0E00               	movlw	high _motorR
   815   002260  6E06               	movwf	(motor_init@mR+1)^0,c
   816   002262  ECF9  F010         	call	_motor_init	;wreg free
   817   002266                     
   818                           ;initialisation.c: 22:     I2C_2_Master_Init();
   819   002266  ECBB  F011         	call	_I2C_2_Master_Init	;wreg free
   820                           
   821                           ;initialisation.c: 23:     color_click_init();
   822   00226A  ECA1  F011         	call	_color_click_init	;wreg free
   823   00226E                     
   824                           ;initialisation.c: 24:     Timer0_init();
   825   00226E  EC27  F012         	call	_Timer0_init	;wreg free
   826   002272                     
   827                           ;initialisation.c: 25:     interrupts_init();
   828   002272  EC58  F012         	call	_interrupts_init	;wreg free
   829   002276                     
   830                           ;initialisation.c: 26:     initUSART4();
   831   002276  EC07  F012         	call	_initUSART4	;wreg free
   832   00227A                     
   833                           ;initialisation.c: 27:     ADC_init();
   834   00227A  EC37  F012         	call	_ADC_init	;wreg free
   835   00227E  0012               	return		;funcret
   836   002280                     __end_of_complete_initialisation:
   837                           	callstack 0
   838                           
   839 ;; *************** function _ports_init *****************
   840 ;; Defined at:
   841 ;;		line 8 in file "lights_buttons.c"
   842 ;; Parameters:    Size  Location     Type
   843 ;;		None
   844 ;; Auto vars:     Size  Location     Type
   845 ;;		None
   846 ;; Return value:  Size  Location     Type
   847 ;;                  1    wreg      void 
   848 ;; Registers used:
   849 ;;		None
   850 ;; Tracked objects:
   851 ;;		On entry : 0/0
   852 ;;		On exit  : 0/0
   853 ;;		Unchanged: 0/0
   854 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   855 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   856 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   857 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   858 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   859 ;;Total ram usage:        0 bytes
   860 ;; Hardware stack levels used: 1
   861 ;; Hardware stack levels required when called: 1
   862 ;; This function calls:
   863 ;;		Nothing
   864 ;; This function is called by:
   865 ;;		_complete_initialisation
   866 ;; This function uses a non-reentrant model
   867 ;;
   868                           
   869                           	psect	text2
   870   0023EE                     __ptext2:
   871                           	callstack 0
   872   0023EE                     _ports_init:
   873                           	callstack 28
   874   0023EE                     
   875                           ;lights_buttons.c: 10:     TRISGbits.TRISG1 = 0;
   876   0023EE  9287               	bcf	135,1,c	;volatile
   877                           
   878                           ;lights_buttons.c: 11:     TRISAbits.TRISA4 = 0;
   879   0023F0  9881               	bcf	129,4,c	;volatile
   880                           
   881                           ;lights_buttons.c: 12:     TRISFbits.TRISF7 = 0;
   882   0023F2  9E86               	bcf	134,7,c	;volatile
   883                           
   884                           ;lights_buttons.c: 14:     LATGbits.LATG1 = 1;
   885   0023F4  827F               	bsf	127,1,c	;volatile
   886                           
   887                           ;lights_buttons.c: 15:     LATAbits.LATA4 = 1;
   888   0023F6  8879               	bsf	121,4,c	;volatile
   889                           
   890                           ;lights_buttons.c: 16:     LATFbits.LATF7 = 1;
   891   0023F8  8E7E               	bsf	126,7,c	;volatile
   892                           
   893                           ;lights_buttons.c: 18:     TRISFbits.TRISF2=1;
   894   0023FA  8486               	bsf	134,2,c	;volatile
   895                           
   896                           ;lights_buttons.c: 19:     ANSELFbits.ANSELF2=0;
   897   0023FC  010E               	movlb	14	; () banked
   898   0023FE  95B4               	bcf	180,2,b	;volatile
   899                           
   900                           ;lights_buttons.c: 21:     TRISFbits.TRISF3= 1;
   901   002400  8686               	bsf	134,3,c	;volatile
   902                           
   903                           ;lights_buttons.c: 22:     ANSELFbits.ANSELF3 = 0;
   904   002402  97B4               	bcf	180,3,b	;volatile
   905                           
   906                           ;lights_buttons.c: 24:     TRISDbits.TRISD7 = 0;
   907   002404  9E84               	bcf	132,7,c	;volatile
   908                           
   909                           ;lights_buttons.c: 25:     LATDbits.LATD7 = 0;
   910   002406  9E7C               	bcf	124,7,c	;volatile
   911                           
   912                           ;lights_buttons.c: 27:     TRISHbits.TRISH3 = 0;
   913   002408  9688               	bcf	136,3,c	;volatile
   914                           
   915                           ;lights_buttons.c: 28:     LATHbits.LATH3 = 0;
   916   00240A  9680               	bcf	128,3,c	;volatile
   917   00240C                     
   918                           ; BSR set to: 14
   919   00240C  0012               	return		;funcret
   920   00240E                     __end_of_ports_init:
   921                           	callstack 0
   922                           
   923 ;; *************** function _motor_init *****************
   924 ;; Defined at:
   925 ;;		line 104 in file "dc_motor.c"
   926 ;; Parameters:    Size  Location     Type
   927 ;;  mL              2    2[COMRAM] PTR struct DC_motor
   928 ;;		 -> motorL(9), 
   929 ;;  mR              2    4[COMRAM] PTR struct DC_motor
   930 ;;		 -> motorR(9), 
   931 ;; Auto vars:     Size  Location     Type
   932 ;;		None
   933 ;; Return value:  Size  Location     Type
   934 ;;                  1    wreg      void 
   935 ;; Registers used:
   936 ;;		wreg, status,2, status,0
   937 ;; Tracked objects:
   938 ;;		On entry : 0/0
   939 ;;		On exit  : 0/0
   940 ;;		Unchanged: 0/0
   941 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   942 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   943 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   944 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   945 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   946 ;;Total ram usage:        4 bytes
   947 ;; Hardware stack levels used: 1
   948 ;; Hardware stack levels required when called: 1
   949 ;; This function calls:
   950 ;;		Nothing
   951 ;; This function is called by:
   952 ;;		_complete_initialisation
   953 ;; This function uses a non-reentrant model
   954 ;;
   955                           
   956                           	psect	text3
   957   0021F2                     __ptext3:
   958                           	callstack 0
   959   0021F2                     _motor_init:
   960                           	callstack 28
   961   0021F2                     
   962                           ;dc_motor.c: 104: void motor_init(DC_motor *mL, DC_motor *mR);dc_motor.c: 105: {;dc_moto
      +                          r.c: 106:     motorL.power=0;
   963   0021F2  0E00               	movlw	0
   964   0021F4  0100               	movlb	0	; () banked
   965   0021F6  6FB9               	movwf	_motorL& (0+255),b
   966                           
   967                           ;dc_motor.c: 107:     motorL.direction=1;
   968   0021F8  0E01               	movlw	1
   969   0021FA  6FBA               	movwf	(_motorL+1)& (0+255),b
   970                           
   971                           ;dc_motor.c: 108:     motorL.brakemode=1;
   972   0021FC  0E01               	movlw	1
   973   0021FE  6FBB               	movwf	(_motorL+2)& (0+255),b
   974   002200                     
   975                           ; BSR set to: 0
   976                           ;dc_motor.c: 109:     motorL.posDutyHighByte=(unsigned char *)(&CCPR1H);
   977   002200  0EAA               	movlw	170
   978   002202  6FBE               	movwf	(_motorL+5)& (0+255),b
   979   002204  0E0F               	movlw	15
   980   002206  6FBF               	movwf	(_motorL+6)& (0+255),b
   981   002208                     
   982                           ; BSR set to: 0
   983                           ;dc_motor.c: 110:     motorL.negDutyHighByte=(unsigned char *)(&CCPR2H);
   984   002208  0EA6               	movlw	166
   985   00220A  6FC0               	movwf	(_motorL+7)& (0+255),b
   986   00220C  0E0F               	movlw	15
   987   00220E  6FC1               	movwf	(_motorL+8)& (0+255),b
   988                           
   989                           ;dc_motor.c: 111:     motorL.PWMperiod=99;
   990   002210  0E00               	movlw	0
   991   002212  6FBD               	movwf	(_motorL+4)& (0+255),b
   992   002214  0E63               	movlw	99
   993   002216  6FBC               	movwf	(_motorL+3)& (0+255),b
   994                           
   995                           ;dc_motor.c: 113:     motorR.power=0;
   996   002218  0E00               	movlw	0
   997   00221A  6FB0               	movwf	_motorR& (0+255),b
   998                           
   999                           ;dc_motor.c: 114:     motorR.direction=1;
  1000   00221C  0E01               	movlw	1
  1001   00221E  6FB1               	movwf	(_motorR+1)& (0+255),b
  1002                           
  1003                           ;dc_motor.c: 115:     motorR.brakemode=1;
  1004   002220  0E01               	movlw	1
  1005   002222  6FB2               	movwf	(_motorR+2)& (0+255),b
  1006   002224                     
  1007                           ; BSR set to: 0
  1008                           ;dc_motor.c: 116:     motorR.posDutyHighByte=(unsigned char *)(&CCPR3H);
  1009   002224  0E25               	movlw	37
  1010   002226  6FB5               	movwf	(_motorR+5)& (0+255),b
  1011   002228  0E0F               	movlw	15
  1012   00222A  6FB6               	movwf	(_motorR+6)& (0+255),b
  1013   00222C                     
  1014                           ; BSR set to: 0
  1015                           ;dc_motor.c: 117:     motorR.negDutyHighByte=(unsigned char *)(&CCPR4H);
  1016   00222C  0E21               	movlw	33
  1017   00222E  6FB7               	movwf	(_motorR+7)& (0+255),b
  1018   002230  0E0F               	movlw	15
  1019   002232  6FB8               	movwf	(_motorR+8)& (0+255),b
  1020                           
  1021                           ;dc_motor.c: 118:     motorR.PWMperiod=99;
  1022   002234  0E00               	movlw	0
  1023   002236  6FB4               	movwf	(_motorR+4)& (0+255),b
  1024   002238  0E63               	movlw	99
  1025   00223A  6FB3               	movwf	(_motorR+3)& (0+255),b
  1026   00223C                     
  1027                           ; BSR set to: 0
  1028   00223C  0012               	return		;funcret
  1029   00223E                     __end_of_motor_init:
  1030                           	callstack 0
  1031                           
  1032 ;; *************** function _interrupts_init *****************
  1033 ;; Defined at:
  1034 ;;		line 9 in file "interrupts.c"
  1035 ;; Parameters:    Size  Location     Type
  1036 ;;		None
  1037 ;; Auto vars:     Size  Location     Type
  1038 ;;		None
  1039 ;; Return value:  Size  Location     Type
  1040 ;;                  1    wreg      void 
  1041 ;; Registers used:
  1042 ;;		None
  1043 ;; Tracked objects:
  1044 ;;		On entry : 0/0
  1045 ;;		On exit  : 0/0
  1046 ;;		Unchanged: 0/0
  1047 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1048 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1049 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1050 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1051 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1052 ;;Total ram usage:        0 bytes
  1053 ;; Hardware stack levels used: 1
  1054 ;; Hardware stack levels required when called: 1
  1055 ;; This function calls:
  1056 ;;		Nothing
  1057 ;; This function is called by:
  1058 ;;		_complete_initialisation
  1059 ;; This function uses a non-reentrant model
  1060 ;;
  1061                           
  1062                           	psect	text4
  1063   0024B0                     __ptext4:
  1064                           	callstack 0
  1065   0024B0                     _interrupts_init:
  1066                           	callstack 28
  1067   0024B0                     
  1068                           ;interrupts.c: 11:     PIE0bits.TMR0IE = 1;
  1069   0024B0  010E               	movlb	14	; () banked
  1070   0024B2  8B29               	bsf	41,5,b	;volatile
  1071                           
  1072                           ;interrupts.c: 12:     PIR0bits.TMR0IF = 0;
  1073   0024B4  9B33               	bcf	51,5,b	;volatile
  1074                           
  1075                           ;interrupts.c: 13:     IPR0bits.TMR0IP = 0;
  1076   0024B6  9B1F               	bcf	31,5,b	;volatile
  1077                           
  1078                           ;interrupts.c: 15:     INTCONbits.IPEN = 1;
  1079   0024B8  8AF2               	bsf	242,5,c	;volatile
  1080                           
  1081                           ;interrupts.c: 16:     INTCONbits.PEIE = 1;
  1082   0024BA  8CF2               	bsf	242,6,c	;volatile
  1083                           
  1084                           ;interrupts.c: 17:     INTCONbits.GIE = 1;
  1085   0024BC  8EF2               	bsf	242,7,c	;volatile
  1086   0024BE                     
  1087                           ; BSR set to: 14
  1088   0024BE  0012               	return		;funcret
  1089   0024C0                     __end_of_interrupts_init:
  1090                           	callstack 0
  1091                           
  1092 ;; *************** function _initUSART4 *****************
  1093 ;; Defined at:
  1094 ;;		line 7 in file "serial.c"
  1095 ;; Parameters:    Size  Location     Type
  1096 ;;		None
  1097 ;; Auto vars:     Size  Location     Type
  1098 ;;		None
  1099 ;; Return value:  Size  Location     Type
  1100 ;;                  1    wreg      void 
  1101 ;; Registers used:
  1102 ;;		wreg, status,2
  1103 ;; Tracked objects:
  1104 ;;		On entry : 0/0
  1105 ;;		On exit  : 0/0
  1106 ;;		Unchanged: 0/0
  1107 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1108 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1109 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1110 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1111 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1112 ;;Total ram usage:        0 bytes
  1113 ;; Hardware stack levels used: 1
  1114 ;; Hardware stack levels required when called: 1
  1115 ;; This function calls:
  1116 ;;		Nothing
  1117 ;; This function is called by:
  1118 ;;		_complete_initialisation
  1119 ;; This function uses a non-reentrant model
  1120 ;;
  1121                           
  1122                           	psect	text5
  1123   00240E                     __ptext5:
  1124                           	callstack 0
  1125   00240E                     _initUSART4:
  1126                           	callstack 28
  1127   00240E                     
  1128                           ;serial.c: 9:     RC0PPS = 0x12;
  1129   00240E  0E12               	movlw	18
  1130   002410  010E               	movlb	14	; () banked
  1131   002412  6F62               	movwf	98,b	;volatile
  1132                           
  1133                           ;serial.c: 10:     RX4PPS = 0x11;
  1134   002414  0E11               	movlw	17
  1135   002416  6F15               	movwf	21,b	;volatile
  1136   002418                     
  1137                           ; BSR set to: 14
  1138                           ;serial.c: 11:     TRISCbits.TRISC1 = 1;
  1139   002418  8283               	bsf	131,1,c	;volatile
  1140   00241A                     
  1141                           ; BSR set to: 14
  1142                           ;serial.c: 14:     BAUD4CONbits.BRG16 = 0;
  1143   00241A  97E9               	bcf	233,3,b	;volatile
  1144   00241C                     
  1145                           ; BSR set to: 14
  1146                           ;serial.c: 15:     TX4STAbits.BRGH = 0;
  1147   00241C  95E8               	bcf	232,2,b	;volatile
  1148                           
  1149                           ;serial.c: 16:     SP4BRGL = 51;
  1150   00241E  0E33               	movlw	51
  1151   002420  6FE5               	movwf	229,b	;volatile
  1152                           
  1153                           ;serial.c: 17:     SP4BRGH = 0;
  1154   002422  0E00               	movlw	0
  1155   002424  6FE6               	movwf	230,b	;volatile
  1156   002426                     
  1157                           ; BSR set to: 14
  1158                           ;serial.c: 19:     RC4STAbits.CREN = 1;
  1159   002426  89E7               	bsf	231,4,b	;volatile
  1160   002428                     
  1161                           ; BSR set to: 14
  1162                           ;serial.c: 20:     TX4STAbits.TXEN = 1;
  1163   002428  8BE8               	bsf	232,5,b	;volatile
  1164   00242A                     
  1165                           ; BSR set to: 14
  1166                           ;serial.c: 21:     RC4STAbits.SPEN = 1;
  1167   00242A  8FE7               	bsf	231,7,b	;volatile
  1168   00242C                     
  1169                           ; BSR set to: 14
  1170   00242C  0012               	return		;funcret
  1171   00242E                     __end_of_initUSART4:
  1172                           	callstack 0
  1173                           
  1174 ;; *************** function _initDCmotorsPWM *****************
  1175 ;; Defined at:
  1176 ;;		line 11 in file "dc_motor.c"
  1177 ;; Parameters:    Size  Location     Type
  1178 ;;  PWMperiod       2    2[COMRAM] unsigned int 
  1179 ;; Auto vars:     Size  Location     Type
  1180 ;;		None
  1181 ;; Return value:  Size  Location     Type
  1182 ;;                  1    wreg      void 
  1183 ;; Registers used:
  1184 ;;		wreg, status,2
  1185 ;; Tracked objects:
  1186 ;;		On entry : 0/0
  1187 ;;		On exit  : 0/0
  1188 ;;		Unchanged: 0/0
  1189 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1190 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1191 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1192 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1193 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1194 ;;Total ram usage:        2 bytes
  1195 ;; Hardware stack levels used: 1
  1196 ;; Hardware stack levels required when called: 1
  1197 ;; This function calls:
  1198 ;;		Nothing
  1199 ;; This function is called by:
  1200 ;;		_complete_initialisation
  1201 ;; This function uses a non-reentrant model
  1202 ;;
  1203                           
  1204                           	psect	text6
  1205   001D70                     __ptext6:
  1206                           	callstack 0
  1207   001D70                     _initDCmotorsPWM:
  1208                           	callstack 28
  1209   001D70                     
  1210                           ;dc_motor.c: 13:     TRISEbits.TRISE2 = 0;
  1211   001D70  9485               	bcf	133,2,c	;volatile
  1212                           
  1213                           ;dc_motor.c: 14:     TRISEbits.TRISE4 = 0;
  1214   001D72  9885               	bcf	133,4,c	;volatile
  1215                           
  1216                           ;dc_motor.c: 15:     TRISCbits.TRISC7 = 0;
  1217   001D74  9E83               	bcf	131,7,c	;volatile
  1218                           
  1219                           ;dc_motor.c: 16:     TRISGbits.TRISG6 = 0;
  1220   001D76  9C87               	bcf	135,6,c	;volatile
  1221                           
  1222                           ;dc_motor.c: 18:     LATEbits.LATE2 = 0;
  1223   001D78  947D               	bcf	125,2,c	;volatile
  1224                           
  1225                           ;dc_motor.c: 19:     LATEbits.LATE4 = 0;
  1226   001D7A  987D               	bcf	125,4,c	;volatile
  1227                           
  1228                           ;dc_motor.c: 20:     LATCbits.LATC7 = 0;
  1229   001D7C  9E7B               	bcf	123,7,c	;volatile
  1230                           
  1231                           ;dc_motor.c: 21:     LATGbits.LATG6 = 0;
  1232   001D7E  9C7F               	bcf	127,6,c	;volatile
  1233   001D80                     
  1234                           ;dc_motor.c: 24:     RE2PPS=0x05;
  1235   001D80  0E05               	movlw	5
  1236   001D82  010E               	movlb	14	; () banked
  1237   001D84  6F74               	movwf	116,b	;volatile
  1238                           
  1239                           ;dc_motor.c: 25:     RE4PPS=0x06;
  1240   001D86  0E06               	movlw	6
  1241   001D88  6F76               	movwf	118,b	;volatile
  1242                           
  1243                           ;dc_motor.c: 26:     RC7PPS=0x07;
  1244   001D8A  0E07               	movlw	7
  1245   001D8C  6F69               	movwf	105,b	;volatile
  1246                           
  1247                           ;dc_motor.c: 27:     RG6PPS=0x08;
  1248   001D8E  0E08               	movlw	8
  1249   001D90  6F88               	movwf	136,b	;volatile
  1250                           
  1251                           ;dc_motor.c: 30:     T2CONbits.CKPS=0b100;
  1252   001D92  50BD               	movf	189,w,c	;volatile
  1253   001D94  0B8F               	andlw	-113
  1254   001D96  0940               	iorlw	64
  1255   001D98  6EBD               	movwf	189,c	;volatile
  1256                           
  1257                           ;dc_motor.c: 31:     T2HLTbits.MODE=0b00000;
  1258   001D9A  0EE0               	movlw	-32
  1259   001D9C  16BE               	andwf	190,f,c	;volatile
  1260                           
  1261                           ;dc_motor.c: 32:     T2CLKCONbits.CS=0b0001;
  1262   001D9E  50BF               	movf	191,w,c	;volatile
  1263   001DA0  0BF0               	andlw	-16
  1264   001DA2  0901               	iorlw	1
  1265   001DA4  6EBF               	movwf	191,c	;volatile
  1266   001DA6                     
  1267                           ; BSR set to: 14
  1268                           ;dc_motor.c: 36:     T2PR=PWMperiod;
  1269   001DA6  C003  FFBC         	movff	initDCmotorsPWM@PWMperiod,4028	;volatile
  1270   001DAA                     
  1271                           ; BSR set to: 14
  1272                           ;dc_motor.c: 37:     T2CONbits.ON=1;
  1273   001DAA  8EBD               	bsf	189,7,c	;volatile
  1274                           
  1275                           ;dc_motor.c: 41:     CCPR1H=0;
  1276   001DAC  0E00               	movlw	0
  1277   001DAE  6EAA               	movwf	170,c	;volatile
  1278                           
  1279                           ;dc_motor.c: 42:     CCPR2H=0;
  1280   001DB0  0E00               	movlw	0
  1281   001DB2  6EA6               	movwf	166,c	;volatile
  1282                           
  1283                           ;dc_motor.c: 43:     CCPR3H=0;
  1284   001DB4  0E00               	movlw	0
  1285   001DB6  010F               	movlb	15	; () banked
  1286   001DB8  6F25               	movwf	37,b	;volatile
  1287                           
  1288                           ;dc_motor.c: 44:     CCPR4H=0;
  1289   001DBA  0E00               	movlw	0
  1290   001DBC  6F21               	movwf	33,b	;volatile
  1291                           
  1292                           ;dc_motor.c: 47:     CCPTMRS0bits.C1TSEL=0;
  1293   001DBE  0EFC               	movlw	-4
  1294   001DC0  16AD               	andwf	173,f,c	;volatile
  1295                           
  1296                           ;dc_motor.c: 48:     CCPTMRS0bits.C2TSEL=0;
  1297   001DC2  0EF3               	movlw	-13
  1298   001DC4  16AD               	andwf	173,f,c	;volatile
  1299                           
  1300                           ;dc_motor.c: 49:     CCPTMRS0bits.C3TSEL=0;
  1301   001DC6  0ECF               	movlw	-49
  1302   001DC8  16AD               	andwf	173,f,c	;volatile
  1303                           
  1304                           ;dc_motor.c: 50:     CCPTMRS0bits.C4TSEL=0;
  1305   001DCA  0E3F               	movlw	-193
  1306   001DCC  16AD               	andwf	173,f,c	;volatile
  1307   001DCE                     
  1308                           ; BSR set to: 15
  1309                           ;dc_motor.c: 53:     CCP1CONbits.FMT=1;
  1310   001DCE  88AB               	bsf	171,4,c	;volatile
  1311                           
  1312                           ;dc_motor.c: 54:     CCP1CONbits.CCP1MODE=0b1100;
  1313   001DD0  50AB               	movf	171,w,c	;volatile
  1314   001DD2  0BF0               	andlw	-16
  1315   001DD4  090C               	iorlw	12
  1316   001DD6  6EAB               	movwf	171,c	;volatile
  1317   001DD8                     
  1318                           ; BSR set to: 15
  1319                           ;dc_motor.c: 55:     CCP1CONbits.EN=1;
  1320   001DD8  8EAB               	bsf	171,7,c	;volatile
  1321   001DDA                     
  1322                           ; BSR set to: 15
  1323                           ;dc_motor.c: 58:     CCP2CONbits.FMT=1;
  1324   001DDA  88A7               	bsf	167,4,c	;volatile
  1325                           
  1326                           ;dc_motor.c: 59:     CCP2CONbits.CCP2MODE=0b1100;
  1327   001DDC  50A7               	movf	167,w,c	;volatile
  1328   001DDE  0BF0               	andlw	-16
  1329   001DE0  090C               	iorlw	12
  1330   001DE2  6EA7               	movwf	167,c	;volatile
  1331   001DE4                     
  1332                           ; BSR set to: 15
  1333                           ;dc_motor.c: 60:     CCP2CONbits.EN=1;
  1334   001DE4  8EA7               	bsf	167,7,c	;volatile
  1335   001DE6                     
  1336                           ; BSR set to: 15
  1337                           ;dc_motor.c: 64:     CCP3CONbits.FMT=1;
  1338   001DE6  8926               	bsf	38,4,b	;volatile
  1339                           
  1340                           ;dc_motor.c: 65:     CCP3CONbits.CCP3MODE=0b1100;
  1341   001DE8  5126               	movf	38,w,b	;volatile
  1342   001DEA  0BF0               	andlw	-16
  1343   001DEC  090C               	iorlw	12
  1344   001DEE  6F26               	movwf	38,b	;volatile
  1345   001DF0                     
  1346                           ; BSR set to: 15
  1347                           ;dc_motor.c: 66:     CCP3CONbits.EN=1;
  1348   001DF0  8F26               	bsf	38,7,b	;volatile
  1349   001DF2                     
  1350                           ; BSR set to: 15
  1351                           ;dc_motor.c: 69:     CCP4CONbits.FMT=1;
  1352   001DF2  8922               	bsf	34,4,b	;volatile
  1353                           
  1354                           ;dc_motor.c: 70:     CCP4CONbits.CCP4MODE=0b1100;
  1355   001DF4  5122               	movf	34,w,b	;volatile
  1356   001DF6  0BF0               	andlw	-16
  1357   001DF8  090C               	iorlw	12
  1358   001DFA  6F22               	movwf	34,b	;volatile
  1359   001DFC                     
  1360                           ; BSR set to: 15
  1361                           ;dc_motor.c: 71:     CCP4CONbits.EN=1;
  1362   001DFC  8F22               	bsf	34,7,b	;volatile
  1363   001DFE                     
  1364                           ; BSR set to: 15
  1365   001DFE  0012               	return		;funcret
  1366   001E00                     __end_of_initDCmotorsPWM:
  1367                           	callstack 0
  1368                           
  1369 ;; *************** function _color_click_init *****************
  1370 ;; Defined at:
  1371 ;;		line 13 in file "color.c"
  1372 ;; Parameters:    Size  Location     Type
  1373 ;;		None
  1374 ;; Auto vars:     Size  Location     Type
  1375 ;;		None
  1376 ;; Return value:  Size  Location     Type
  1377 ;;                  1    wreg      void 
  1378 ;; Registers used:
  1379 ;;		wreg, status,2, status,0, cstack
  1380 ;; Tracked objects:
  1381 ;;		On entry : 0/0
  1382 ;;		On exit  : 0/0
  1383 ;;		Unchanged: 0/0
  1384 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1385 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1386 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1387 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1388 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1389 ;;Total ram usage:        1 bytes
  1390 ;; Hardware stack levels used: 1
  1391 ;; Hardware stack levels required when called: 4
  1392 ;; This function calls:
  1393 ;;		_I2C_2_Master_Init
  1394 ;;		_color_writetoaddr
  1395 ;; This function is called by:
  1396 ;;		_complete_initialisation
  1397 ;; This function uses a non-reentrant model
  1398 ;;
  1399                           
  1400                           	psect	text7
  1401   002342                     __ptext7:
  1402                           	callstack 0
  1403   002342                     _color_click_init:
  1404                           	callstack 25
  1405   002342                     
  1406                           ;color.c: 16:     I2C_2_Master_Init();
  1407   002342  ECBB  F011         	call	_I2C_2_Master_Init	;wreg free
  1408   002346                     
  1409                           ;color.c: 18:   color_writetoaddr(0x00, 0x01);
  1410   002346  0E01               	movlw	1
  1411   002348  6E05               	movwf	color_writetoaddr@value^0,c
  1412   00234A  0E00               	movlw	0
  1413   00234C  EC17  F012         	call	_color_writetoaddr
  1414   002350                     
  1415                           ;color.c: 19:     _delay((unsigned long)((3)*(64000000/4000.0)));
  1416   002350  0E3F               	movlw	63
  1417   002352  6E07               	movwf	??_color_click_init^0,c
  1418   002354  0E55               	movlw	85
  1419   002356                     u2677:
  1420   002356  2EE8               	decfsz	wreg,f,c
  1421   002358  D7FE               	bra	u2677
  1422   00235A  2E07               	decfsz	??_color_click_init^0,f,c
  1423   00235C  D7FC               	bra	u2677
  1424   00235E  F000               	nop	
  1425   002360                     
  1426                           ;color.c: 21:  color_writetoaddr(0x00, 0x03);
  1427   002360  0E03               	movlw	3
  1428   002362  6E05               	movwf	color_writetoaddr@value^0,c
  1429   002364  0E00               	movlw	0
  1430   002366  EC17  F012         	call	_color_writetoaddr
  1431   00236A                     
  1432                           ;color.c: 23:  color_writetoaddr(0x01, 0xD5);
  1433   00236A  0ED5               	movlw	213
  1434   00236C  6E05               	movwf	color_writetoaddr@value^0,c
  1435   00236E  0E01               	movlw	1
  1436   002370  EC17  F012         	call	_color_writetoaddr
  1437   002374  0012               	return		;funcret
  1438   002376                     __end_of_color_click_init:
  1439                           	callstack 0
  1440                           
  1441 ;; *************** function _color_writetoaddr *****************
  1442 ;; Defined at:
  1443 ;;		line 28 in file "color.c"
  1444 ;; Parameters:    Size  Location     Type
  1445 ;;  address         1    wreg     unsigned char 
  1446 ;;  value           1    4[COMRAM] unsigned char 
  1447 ;; Auto vars:     Size  Location     Type
  1448 ;;  address         1    5[COMRAM] unsigned char 
  1449 ;; Return value:  Size  Location     Type
  1450 ;;                  1    wreg      void 
  1451 ;; Registers used:
  1452 ;;		wreg, status,2, status,0, cstack
  1453 ;; Tracked objects:
  1454 ;;		On entry : 0/0
  1455 ;;		On exit  : 0/0
  1456 ;;		Unchanged: 0/0
  1457 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1458 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1459 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1460 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1461 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1462 ;;Total ram usage:        2 bytes
  1463 ;; Hardware stack levels used: 1
  1464 ;; Hardware stack levels required when called: 3
  1465 ;; This function calls:
  1466 ;;		_I2C_2_Master_Start
  1467 ;;		_I2C_2_Master_Stop
  1468 ;;		_I2C_2_Master_Write
  1469 ;; This function is called by:
  1470 ;;		_color_click_init
  1471 ;; This function uses a non-reentrant model
  1472 ;;
  1473                           
  1474                           	psect	text8
  1475   00242E                     __ptext8:
  1476                           	callstack 0
  1477   00242E                     _color_writetoaddr:
  1478                           	callstack 25
  1479                           
  1480                           ;incstack = 0
  1481                           ;color_writetoaddr@address stored from wreg
  1482   00242E  6E06               	movwf	color_writetoaddr@address^0,c
  1483   002430                     
  1484                           ;color.c: 29:     I2C_2_Master_Start();
  1485   002430  EC6B  F012         	call	_I2C_2_Master_Start	;wreg free
  1486                           
  1487                           ;color.c: 30:     I2C_2_Master_Write(0x52 | 0x00);
  1488   002434  0E52               	movlw	82
  1489   002436  EC60  F012         	call	_I2C_2_Master_Write
  1490                           
  1491                           ;color.c: 31:     I2C_2_Master_Write(0x80 | address);
  1492   00243A  5006               	movf	color_writetoaddr@address^0,w,c
  1493   00243C  0980               	iorlw	128
  1494   00243E  EC60  F012         	call	_I2C_2_Master_Write
  1495                           
  1496                           ;color.c: 32:     I2C_2_Master_Write(value);
  1497   002442  5005               	movf	color_writetoaddr@value^0,w,c
  1498   002444  EC60  F012         	call	_I2C_2_Master_Write
  1499                           
  1500                           ;color.c: 33:     I2C_2_Master_Stop();
  1501   002448  EC66  F012         	call	_I2C_2_Master_Stop	;wreg free
  1502   00244C  0012               	return		;funcret
  1503   00244E                     __end_of_color_writetoaddr:
  1504                           	callstack 0
  1505                           
  1506 ;; *************** function _I2C_2_Master_Init *****************
  1507 ;; Defined at:
  1508 ;;		line 7 in file "i2c.c"
  1509 ;; Parameters:    Size  Location     Type
  1510 ;;		None
  1511 ;; Auto vars:     Size  Location     Type
  1512 ;;		None
  1513 ;; Return value:  Size  Location     Type
  1514 ;;                  1    wreg      void 
  1515 ;; Registers used:
  1516 ;;		wreg, status,2
  1517 ;; Tracked objects:
  1518 ;;		On entry : 0/0
  1519 ;;		On exit  : 0/0
  1520 ;;		Unchanged: 0/0
  1521 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1522 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1523 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1524 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1525 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1526 ;;Total ram usage:        0 bytes
  1527 ;; Hardware stack levels used: 1
  1528 ;; Hardware stack levels required when called: 1
  1529 ;; This function calls:
  1530 ;;		Nothing
  1531 ;; This function is called by:
  1532 ;;		_color_click_init
  1533 ;;		_complete_initialisation
  1534 ;; This function uses a non-reentrant model
  1535 ;;
  1536                           
  1537                           	psect	text9
  1538   002376                     __ptext9:
  1539                           	callstack 0
  1540   002376                     _I2C_2_Master_Init:
  1541                           	callstack 27
  1542   002376                     
  1543                           ;i2c.c: 10:   SSP2CON1bits.SSPM= 0b1000;
  1544   002376  010E               	movlb	14	; () banked
  1545   002378  51D9               	movf	217,w,b	;volatile
  1546   00237A  0BF0               	andlw	-16
  1547   00237C  0908               	iorlw	8
  1548   00237E  6FD9               	movwf	217,b	;volatile
  1549   002380                     
  1550                           ; BSR set to: 14
  1551                           ;i2c.c: 11:   SSP2CON1bits.SSPEN = 1;
  1552   002380  8BD9               	bsf	217,5,b	;volatile
  1553                           
  1554                           ;i2c.c: 12:   SSP2ADD = (64000000/(4*100000))-1;
  1555   002382  0E9F               	movlw	159
  1556   002384  6FD6               	movwf	214,b	;volatile
  1557   002386                     
  1558                           ; BSR set to: 14
  1559                           ;i2c.c: 15:   TRISDbits.TRISD5 = 1;
  1560   002386  8A84               	bsf	132,5,c	;volatile
  1561   002388                     
  1562                           ; BSR set to: 14
  1563                           ;i2c.c: 16:   TRISDbits.TRISD6 = 1;
  1564   002388  8C84               	bsf	132,6,c	;volatile
  1565   00238A                     
  1566                           ; BSR set to: 14
  1567                           ;i2c.c: 17:   ANSELDbits.ANSELD5=0;
  1568   00238A  9BA7               	bcf	167,5,b	;volatile
  1569   00238C                     
  1570                           ; BSR set to: 14
  1571                           ;i2c.c: 18:   ANSELDbits.ANSELD6=0;
  1572   00238C  9DA7               	bcf	167,6,b	;volatile
  1573                           
  1574                           ;i2c.c: 19:   SSP2DATPPS=0x1D;
  1575   00238E  0E1D               	movlw	29
  1576   002390  6F1D               	movwf	29,b	;volatile
  1577                           
  1578                           ;i2c.c: 20:   SSP2CLKPPS=0x1E;
  1579   002392  0E1E               	movlw	30
  1580   002394  6F1C               	movwf	28,b	;volatile
  1581                           
  1582                           ;i2c.c: 21:   RD5PPS=0x1C;
  1583   002396  0E1C               	movlw	28
  1584   002398  6F6F               	movwf	111,b	;volatile
  1585                           
  1586                           ;i2c.c: 22:   RD6PPS=0x1B;
  1587   00239A  0E1B               	movlw	27
  1588   00239C  6F70               	movwf	112,b	;volatile
  1589   00239E                     
  1590                           ; BSR set to: 14
  1591   00239E  0012               	return		;funcret
  1592   0023A0                     __end_of_I2C_2_Master_Init:
  1593                           	callstack 0
  1594                           
  1595 ;; *************** function _buggyLEDs_init *****************
  1596 ;; Defined at:
  1597 ;;		line 34 in file "lights_buttons.c"
  1598 ;; Parameters:    Size  Location     Type
  1599 ;;		None
  1600 ;; Auto vars:     Size  Location     Type
  1601 ;;		None
  1602 ;; Return value:  Size  Location     Type
  1603 ;;                  1    wreg      void 
  1604 ;; Registers used:
  1605 ;;		None
  1606 ;; Tracked objects:
  1607 ;;		On entry : 0/0
  1608 ;;		On exit  : 0/0
  1609 ;;		Unchanged: 0/0
  1610 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1611 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1612 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1613 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1614 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1615 ;;Total ram usage:        0 bytes
  1616 ;; Hardware stack levels used: 1
  1617 ;; Hardware stack levels required when called: 1
  1618 ;; This function calls:
  1619 ;;		Nothing
  1620 ;; This function is called by:
  1621 ;;		_complete_initialisation
  1622 ;; This function uses a non-reentrant model
  1623 ;;
  1624                           
  1625                           	psect	text10
  1626   002488                     __ptext10:
  1627                           	callstack 0
  1628   002488                     _buggyLEDs_init:
  1629                           	callstack 28
  1630   002488                     
  1631                           ;lights_buttons.c: 35:     LATHbits.LATH1 = 0;
  1632   002488  9280               	bcf	128,1,c	;volatile
  1633                           
  1634                           ;lights_buttons.c: 36:     LATDbits.LATD3 = 0;
  1635   00248A  967C               	bcf	124,3,c	;volatile
  1636                           
  1637                           ;lights_buttons.c: 37:     LATDbits.LATD4 = 0;
  1638   00248C  987C               	bcf	124,4,c	;volatile
  1639                           
  1640                           ;lights_buttons.c: 38:     LATFbits.LATF0 = 0;
  1641   00248E  907E               	bcf	126,0,c	;volatile
  1642                           
  1643                           ;lights_buttons.c: 39:     LATHbits.LATH0 = 0;
  1644   002490  9080               	bcf	128,0,c	;volatile
  1645                           
  1646                           ;lights_buttons.c: 41:     TRISHbits.TRISH1 = 0;
  1647   002492  9288               	bcf	136,1,c	;volatile
  1648                           
  1649                           ;lights_buttons.c: 42:     TRISDbits.TRISD3 = 0;
  1650   002494  9684               	bcf	132,3,c	;volatile
  1651                           
  1652                           ;lights_buttons.c: 43:     TRISDbits.TRISD4 = 0;
  1653   002496  9884               	bcf	132,4,c	;volatile
  1654                           
  1655                           ;lights_buttons.c: 44:     TRISFbits.TRISF0 = 0;
  1656   002498  9086               	bcf	134,0,c	;volatile
  1657                           
  1658                           ;lights_buttons.c: 45:     TRISHbits.TRISH0 = 0;
  1659   00249A  9088               	bcf	136,0,c	;volatile
  1660   00249C  0012               	return		;funcret
  1661   00249E                     __end_of_buggyLEDs_init:
  1662                           	callstack 0
  1663                           
  1664 ;; *************** function _Timer0_init *****************
  1665 ;; Defined at:
  1666 ;;		line 8 in file "timers.c"
  1667 ;; Parameters:    Size  Location     Type
  1668 ;;		None
  1669 ;; Auto vars:     Size  Location     Type
  1670 ;;		None
  1671 ;; Return value:  Size  Location     Type
  1672 ;;                  1    wreg      void 
  1673 ;; Registers used:
  1674 ;;		wreg, status,2
  1675 ;; Tracked objects:
  1676 ;;		On entry : 0/0
  1677 ;;		On exit  : 0/0
  1678 ;;		Unchanged: 0/0
  1679 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1680 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1681 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1682 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1683 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1684 ;;Total ram usage:        0 bytes
  1685 ;; Hardware stack levels used: 1
  1686 ;; Hardware stack levels required when called: 1
  1687 ;; This function calls:
  1688 ;;		Nothing
  1689 ;; This function is called by:
  1690 ;;		_complete_initialisation
  1691 ;; This function uses a non-reentrant model
  1692 ;;
  1693                           
  1694                           	psect	text11
  1695   00244E                     __ptext11:
  1696                           	callstack 0
  1697   00244E                     _Timer0_init:
  1698                           	callstack 28
  1699   00244E                     
  1700                           ;timers.c: 10:     T0CON1bits.T0CS=0b010;
  1701   00244E  50D6               	movf	214,w,c	;volatile
  1702   002450  0B1F               	andlw	-225
  1703   002452  0940               	iorlw	64
  1704   002454  6ED6               	movwf	214,c	;volatile
  1705   002456                     
  1706                           ;timers.c: 11:     T0CON1bits.T0ASYNC=1;
  1707   002456  88D6               	bsf	214,4,c	;volatile
  1708                           
  1709                           ;timers.c: 12:     T0CON1bits.T0CKPS=0b0101;
  1710   002458  50D6               	movf	214,w,c	;volatile
  1711   00245A  0BF0               	andlw	-16
  1712   00245C  0905               	iorlw	5
  1713   00245E  6ED6               	movwf	214,c	;volatile
  1714   002460                     
  1715                           ;timers.c: 13:     T0CON0bits.T016BIT=1;
  1716   002460  88D5               	bsf	213,4,c	;volatile
  1717                           
  1718                           ;timers.c: 16:     TMR0H=0;
  1719   002462  0E00               	movlw	0
  1720   002464  6ED4               	movwf	212,c	;volatile
  1721                           
  1722                           ;timers.c: 17:     TMR0L=0b00100011;
  1723   002466  0E23               	movlw	35
  1724   002468  6ED3               	movwf	211,c	;volatile
  1725   00246A                     
  1726                           ;timers.c: 18:     T0CON0bits.T0EN=1;
  1727   00246A  8ED5               	bsf	213,7,c	;volatile
  1728   00246C  0012               	return		;funcret
  1729   00246E                     __end_of_Timer0_init:
  1730                           	callstack 0
  1731                           
  1732 ;; *************** function _ADC_init *****************
  1733 ;; Defined at:
  1734 ;;		line 8 in file "ADC.c"
  1735 ;; Parameters:    Size  Location     Type
  1736 ;;		None
  1737 ;; Auto vars:     Size  Location     Type
  1738 ;;		None
  1739 ;; Return value:  Size  Location     Type
  1740 ;;                  1    wreg      void 
  1741 ;; Registers used:
  1742 ;;		wreg, status,2
  1743 ;; Tracked objects:
  1744 ;;		On entry : 0/0
  1745 ;;		On exit  : 0/0
  1746 ;;		Unchanged: 0/0
  1747 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1748 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1749 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1750 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1751 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1752 ;;Total ram usage:        0 bytes
  1753 ;; Hardware stack levels used: 1
  1754 ;; Hardware stack levels required when called: 1
  1755 ;; This function calls:
  1756 ;;		Nothing
  1757 ;; This function is called by:
  1758 ;;		_complete_initialisation
  1759 ;; This function uses a non-reentrant model
  1760 ;;
  1761                           
  1762                           	psect	text12
  1763   00246E                     __ptext12:
  1764                           	callstack 0
  1765   00246E                     _ADC_init:
  1766                           	callstack 28
  1767   00246E                     
  1768                           ;ADC.c: 10:     TRISFbits.TRISF6=1;
  1769   00246E  8C86               	bsf	134,6,c	;volatile
  1770                           
  1771                           ;ADC.c: 11:     ANSELFbits.ANSELF6=1;
  1772   002470  010E               	movlb	14	; () banked
  1773   002472  8DB4               	bsf	180,6,b	;volatile
  1774                           
  1775                           ;ADC.c: 13:     ADREFbits.ADNREF = 0;
  1776   002474  010F               	movlb	15	; () banked
  1777   002476  9958               	bcf	88,4,b	;volatile
  1778   002478                     
  1779                           ; BSR set to: 15
  1780                           ;ADC.c: 14:     ADREFbits.ADPREF = 0b00;
  1781   002478  0EFC               	movlw	-4
  1782   00247A  1758               	andwf	88,f,b	;volatile
  1783                           
  1784                           ;ADC.c: 15:     ADPCH=0b101110;
  1785   00247C  0E2E               	movlw	46
  1786   00247E  6F5F               	movwf	95,b	;volatile
  1787   002480                     
  1788                           ; BSR set to: 15
  1789                           ;ADC.c: 16:     ADCON0bits.ADFM = 0;
  1790   002480  9460               	bcf	96,2,c	;volatile
  1791   002482                     
  1792                           ; BSR set to: 15
  1793                           ;ADC.c: 17:     ADCON0bits.ADCS = 1;
  1794   002482  8860               	bsf	96,4,c	;volatile
  1795   002484                     
  1796                           ; BSR set to: 15
  1797                           ;ADC.c: 18:     ADCON0bits.ADON = 1;
  1798   002484  8E60               	bsf	96,7,c	;volatile
  1799   002486                     
  1800                           ; BSR set to: 15
  1801   002486  0012               	return		;funcret
  1802   002488                     __end_of_ADC_init:
  1803                           	callstack 0
  1804                           
  1805 ;; *************** function _buggy_color_response *****************
  1806 ;; Defined at:
  1807 ;;		line 128 in file "color.c"
  1808 ;; Parameters:    Size  Location     Type
  1809 ;;  mL              2   53[COMRAM] PTR struct DC_motor
  1810 ;;		 -> motorL(9), 
  1811 ;;  mR              2   55[COMRAM] PTR struct DC_motor
  1812 ;;		 -> motorR(9), 
  1813 ;;  c               2   57[COMRAM] PTR struct colors
  1814 ;;		 -> color(20), 
  1815 ;; Auto vars:     Size  Location     Type
  1816 ;;  j               1   62[COMRAM] unsigned char 
  1817 ;;  count2          1   61[COMRAM] unsigned char 
  1818 ;; Return value:  Size  Location     Type
  1819 ;;                  1    wreg      void 
  1820 ;; Registers used:
  1821 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1822 ;; Tracked objects:
  1823 ;;		On entry : 0/0
  1824 ;;		On exit  : 0/0
  1825 ;;		Unchanged: 0/0
  1826 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1827 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1828 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1829 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1830 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1831 ;;Total ram usage:       10 bytes
  1832 ;; Hardware stack levels used: 1
  1833 ;; Hardware stack levels required when called: 8
  1834 ;; This function calls:
  1835 ;;		_READcolor
  1836 ;;		___flge
  1837 ;;		_forward
  1838 ;;		_movement
  1839 ;;		_movement_return
  1840 ;;		_return_home
  1841 ;;		_reverse
  1842 ;;		_space
  1843 ;;		_stop
  1844 ;;		_timer_reset
  1845 ;; This function is called by:
  1846 ;;		_main
  1847 ;; This function uses a non-reentrant model
  1848 ;;
  1849                           
  1850                           	psect	text13
  1851   000048                     __ptext13:
  1852                           	callstack 0
  1853   000048                     _buggy_color_response:
  1854                           	callstack 22
  1855   000048                     
  1856                           ;color.c: 130:     READcolor(&color);
  1857   000048  0E44               	movlw	low _color
  1858   00004A  6E2A               	movwf	READcolor@c^0,c
  1859   00004C  0E00               	movlw	high _color
  1860   00004E  6E2B               	movwf	(READcolor@c+1)^0,c
  1861   000050  EC04  F00B         	call	_READcolor	;wreg free
  1862   000054  0EC5               	movlw	197
  1863   000056  5C4A               	subwf	(_color+6)^0,w,c
  1864   000058  0E09               	movlw	9
  1865   00005A  584B               	subwfb	(_color+7)^0,w,c
  1866   00005C  A0D8               	btfss	status,0,c
  1867   00005E  EF33  F000         	goto	u2221
  1868   000062  EF35  F000         	goto	u2220
  1869   000066                     u2221:
  1870   000066  EF77  F003         	goto	l3199
  1871   00006A                     u2220:
  1872   00006A                     
  1873                           ;color.c: 133:         timer_memory[timer_index] = timer_val;
  1874   00006A  0E60               	movlw	low _timer_memory
  1875   00006C  2442               	addwf	_timer_index^0,w,c
  1876   00006E  6ED9               	movwf	fsr2l,c
  1877   000070  6ADA               	clrf	fsr2h,c
  1878   000072  0E00               	movlw	high _timer_memory
  1879   000074  22DA               	addwfc	fsr2h,f,c
  1880   000076  C040  FFDF         	movff	_timer_val,indf2
  1881   00007A                     
  1882                           ;color.c: 134:         timer_index ++;
  1883   00007A  2A42               	incf	_timer_index^0,f,c
  1884   00007C                     
  1885                           ;color.c: 135:         forward(mL,mR);
  1886   00007C  C036  F01B         	movff	buggy_color_response@mL,forward@mL
  1887   000080  C037  F01C         	movff	buggy_color_response@mL+1,forward@mL+1
  1888   000084  C038  F01D         	movff	buggy_color_response@mR,forward@mR
  1889   000088  C039  F01E         	movff	buggy_color_response@mR+1,forward@mR+1
  1890   00008C  ECCE  F00D         	call	_forward	;wreg free
  1891   000090                     
  1892                           ;color.c: 136:         _delay((unsigned long)((50)*(64000000/4000.0)));
  1893   000090  0E05               	movlw	5
  1894   000092  6E3D               	movwf	(??_buggy_color_response+1)^0,c
  1895   000094  0E0F               	movlw	15
  1896   000096  6E3C               	movwf	??_buggy_color_response^0,c
  1897   000098  0EF1               	movlw	241
  1898   00009A                     u2687:
  1899   00009A  2EE8               	decfsz	wreg,f,c
  1900   00009C  D7FE               	bra	u2687
  1901   00009E  2E3C               	decfsz	??_buggy_color_response^0,f,c
  1902   0000A0  D7FC               	bra	u2687
  1903   0000A2  2E3D               	decfsz	(??_buggy_color_response+1)^0,f,c
  1904   0000A4  D7FA               	bra	u2687
  1905   0000A6  F000               	nop	
  1906   0000A8                     
  1907                           ;color.c: 137:         stop(mL,mR); _delay((unsigned long)((500)*(64000000/4000.0)));
  1908   0000A8  C036  F016         	movff	buggy_color_response@mL,stop@mL
  1909   0000AC  C037  F017         	movff	buggy_color_response@mL+1,stop@mL+1
  1910   0000B0  C038  F018         	movff	buggy_color_response@mR,stop@mR
  1911   0000B4  C039  F019         	movff	buggy_color_response@mR+1,stop@mR+1
  1912   0000B8  ECF3  F00F         	call	_stop	;wreg free
  1913   0000BC  0E29               	movlw	41
  1914   0000BE  6E3D               	movwf	(??_buggy_color_response+1)^0,c
  1915   0000C0  0E96               	movlw	150
  1916   0000C2  6E3C               	movwf	??_buggy_color_response^0,c
  1917   0000C4  0E7F               	movlw	127
  1918   0000C6                     u2697:
  1919   0000C6  2EE8               	decfsz	wreg,f,c
  1920   0000C8  D7FE               	bra	u2697
  1921   0000CA  2E3C               	decfsz	??_buggy_color_response^0,f,c
  1922   0000CC  D7FC               	bra	u2697
  1923   0000CE  2E3D               	decfsz	(??_buggy_color_response+1)^0,f,c
  1924   0000D0  D7FA               	bra	u2697
  1925   0000D2  F000               	nop	
  1926   0000D4                     
  1927                           ;color.c: 138:         READcolor(&color); _delay((unsigned long)((500)*(64000000/4000.0)
      +                          ));
  1928   0000D4  0E44               	movlw	low _color
  1929   0000D6  6E2A               	movwf	READcolor@c^0,c
  1930   0000D8  0E00               	movlw	high _color
  1931   0000DA  6E2B               	movwf	(READcolor@c+1)^0,c
  1932   0000DC  EC04  F00B         	call	_READcolor	;wreg free
  1933   0000E0  0E29               	movlw	41
  1934   0000E2  6E3D               	movwf	(??_buggy_color_response+1)^0,c
  1935   0000E4  0E96               	movlw	150
  1936   0000E6  6E3C               	movwf	??_buggy_color_response^0,c
  1937   0000E8  0E7F               	movlw	127
  1938   0000EA                     u2707:
  1939   0000EA  2EE8               	decfsz	wreg,f,c
  1940   0000EC  D7FE               	bra	u2707
  1941   0000EE  2E3C               	decfsz	??_buggy_color_response^0,f,c
  1942   0000F0  D7FC               	bra	u2707
  1943   0000F2  2E3D               	decfsz	(??_buggy_color_response+1)^0,f,c
  1944   0000F4  D7FA               	bra	u2707
  1945   0000F6  F000               	nop	
  1946   0000F8                     
  1947                           ;color.c: 140:         if (color.R_norm > 0.77 && color.B_norm < 0.18 && color.G_norm < 
      +                          0.14){
  1948   0000F8  0EB8               	movlw	184
  1949   0000FA  6E03               	movwf	___flge@ff1^0,c
  1950   0000FC  0E1E               	movlw	30
  1951   0000FE  6E04               	movwf	(___flge@ff1+1)^0,c
  1952   000100  0E45               	movlw	69
  1953   000102  6E05               	movwf	(___flge@ff1+2)^0,c
  1954   000104  0E3F               	movlw	63
  1955   000106  6E06               	movwf	(___flge@ff1+3)^0,c
  1956   000108  C04C  F007         	movff	_color+8,___flge@ff2
  1957   00010C  C04D  F008         	movff	_color+9,___flge@ff2+1
  1958   000110  C04E  F009         	movff	_color+10,___flge@ff2+2
  1959   000114  C04F  F00A         	movff	_color+11,___flge@ff2+3
  1960   000118  ECCB  F00C         	call	___flge	;wreg free
  1961   00011C  B0D8               	btfsc	status,0,c
  1962   00011E  EF93  F000         	goto	u2231
  1963   000122  EF95  F000         	goto	u2230
  1964   000126                     u2231:
  1965   000126  EFDC  F000         	goto	l3099
  1966   00012A                     u2230:
  1967   00012A  C050  F003         	movff	_color+12,___flge@ff1
  1968   00012E  C051  F004         	movff	_color+13,___flge@ff1+1
  1969   000132  C052  F005         	movff	_color+14,___flge@ff1+2
  1970   000136  C053  F006         	movff	_color+15,___flge@ff1+3
  1971   00013A  0EEC               	movlw	236
  1972   00013C  6E07               	movwf	___flge@ff2^0,c
  1973   00013E  0E51               	movlw	81
  1974   000140  6E08               	movwf	(___flge@ff2+1)^0,c
  1975   000142  0E38               	movlw	56
  1976   000144  6E09               	movwf	(___flge@ff2+2)^0,c
  1977   000146  0E3E               	movlw	62
  1978   000148  6E0A               	movwf	(___flge@ff2+3)^0,c
  1979   00014A  ECCB  F00C         	call	___flge	;wreg free
  1980   00014E  B0D8               	btfsc	status,0,c
  1981   000150  EFAC  F000         	goto	u2241
  1982   000154  EFAE  F000         	goto	u2240
  1983   000158                     u2241:
  1984   000158  EFDC  F000         	goto	l3099
  1985   00015C                     u2240:
  1986   00015C  C054  F003         	movff	_color+16,___flge@ff1
  1987   000160  C055  F004         	movff	_color+17,___flge@ff1+1
  1988   000164  C056  F005         	movff	_color+18,___flge@ff1+2
  1989   000168  C057  F006         	movff	_color+19,___flge@ff1+3
  1990   00016C  0E29               	movlw	41
  1991   00016E  6E07               	movwf	___flge@ff2^0,c
  1992   000170  0E5C               	movlw	92
  1993   000172  6E08               	movwf	(___flge@ff2+1)^0,c
  1994   000174  0E0F               	movlw	15
  1995   000176  6E09               	movwf	(___flge@ff2+2)^0,c
  1996   000178  0E3E               	movlw	62
  1997   00017A  6E0A               	movwf	(___flge@ff2+3)^0,c
  1998   00017C  ECCB  F00C         	call	___flge	;wreg free
  1999   000180  B0D8               	btfsc	status,0,c
  2000   000182  EFC5  F000         	goto	u2251
  2001   000186  EFC7  F000         	goto	u2250
  2002   00018A                     u2251:
  2003   00018A  EFDC  F000         	goto	l3099
  2004   00018E                     u2250:
  2005   00018E                     
  2006                           ;color.c: 141:             card_memory[card_count] = 2;
  2007   00018E  0E88               	movlw	low _card_memory
  2008   000190  2443               	addwf	_card_count^0,w,c
  2009   000192  6ED9               	movwf	fsr2l,c
  2010   000194  6ADA               	clrf	fsr2h,c
  2011   000196  0E00               	movlw	high _card_memory
  2012   000198  22DA               	addwfc	fsr2h,f,c
  2013   00019A  0E02               	movlw	2
  2014   00019C  6EDF               	movwf	indf2,c
  2015   00019E                     
  2016                           ;color.c: 142:             card_count ++;
  2017   00019E  2A43               	incf	_card_count^0,f,c
  2018   0001A0                     
  2019                           ;color.c: 143:             movement(mL,mR,1);
  2020   0001A0  C036  F025         	movff	buggy_color_response@mL,movement@mL
  2021   0001A4  C037  F026         	movff	buggy_color_response@mL+1,movement@mL+1
  2022   0001A8  C038  F027         	movff	buggy_color_response@mR,movement@mR
  2023   0001AC  C039  F028         	movff	buggy_color_response@mR+1,movement@mR+1
  2024   0001B0  0E01               	movlw	1
  2025   0001B2  6E29               	movwf	movement@count^0,c
  2026   0001B4  EC77  F006         	call	_movement	;wreg free
  2027   0001B8                     l3099:
  2028                           
  2029                           ;color.c: 147:         if (color.B_norm < 0.25 && color.G_norm > 0.40) {
  2030   0001B8  C050  F003         	movff	_color+12,___flge@ff1
  2031   0001BC  C051  F004         	movff	_color+13,___flge@ff1+1
  2032   0001C0  C052  F005         	movff	_color+14,___flge@ff1+2
  2033   0001C4  C053  F006         	movff	_color+15,___flge@ff1+3
  2034   0001C8  0E00               	movlw	0
  2035   0001CA  6E07               	movwf	___flge@ff2^0,c
  2036   0001CC  0E00               	movlw	0
  2037   0001CE  6E08               	movwf	(___flge@ff2+1)^0,c
  2038   0001D0  0E80               	movlw	128
  2039   0001D2  6E09               	movwf	(___flge@ff2+2)^0,c
  2040   0001D4  0E3E               	movlw	62
  2041   0001D6  6E0A               	movwf	(___flge@ff2+3)^0,c
  2042   0001D8  ECCB  F00C         	call	___flge	;wreg free
  2043   0001DC  B0D8               	btfsc	status,0,c
  2044   0001DE  EFF3  F000         	goto	u2261
  2045   0001E2  EFF5  F000         	goto	u2260
  2046   0001E6                     u2261:
  2047   0001E6  EF23  F001         	goto	l3109
  2048   0001EA                     u2260:
  2049   0001EA  0ECD               	movlw	205
  2050   0001EC  6E03               	movwf	___flge@ff1^0,c
  2051   0001EE  0ECC               	movlw	204
  2052   0001F0  6E04               	movwf	(___flge@ff1+1)^0,c
  2053   0001F2  0ECC               	movlw	204
  2054   0001F4  6E05               	movwf	(___flge@ff1+2)^0,c
  2055   0001F6  0E3E               	movlw	62
  2056   0001F8  6E06               	movwf	(___flge@ff1+3)^0,c
  2057   0001FA  C054  F007         	movff	_color+16,___flge@ff2
  2058   0001FE  C055  F008         	movff	_color+17,___flge@ff2+1
  2059   000202  C056  F009         	movff	_color+18,___flge@ff2+2
  2060   000206  C057  F00A         	movff	_color+19,___flge@ff2+3
  2061   00020A  ECCB  F00C         	call	___flge	;wreg free
  2062   00020E  B0D8               	btfsc	status,0,c
  2063   000210  EF0C  F001         	goto	u2271
  2064   000214  EF0E  F001         	goto	u2270
  2065   000218                     u2271:
  2066   000218  EF23  F001         	goto	l3109
  2067   00021C                     u2270:
  2068   00021C                     
  2069                           ;color.c: 148:             card_memory[card_count] = 1;
  2070   00021C  0E88               	movlw	low _card_memory
  2071   00021E  2443               	addwf	_card_count^0,w,c
  2072   000220  6ED9               	movwf	fsr2l,c
  2073   000222  6ADA               	clrf	fsr2h,c
  2074   000224  0E00               	movlw	high _card_memory
  2075   000226  22DA               	addwfc	fsr2h,f,c
  2076   000228  0E01               	movlw	1
  2077   00022A  6EDF               	movwf	indf2,c
  2078   00022C                     
  2079                           ;color.c: 149:             card_count ++;
  2080   00022C  2A43               	incf	_card_count^0,f,c
  2081   00022E                     
  2082                           ;color.c: 150:             movement(mL,mR,2);
  2083   00022E  C036  F025         	movff	buggy_color_response@mL,movement@mL
  2084   000232  C037  F026         	movff	buggy_color_response@mL+1,movement@mL+1
  2085   000236  C038  F027         	movff	buggy_color_response@mR,movement@mR
  2086   00023A  C039  F028         	movff	buggy_color_response@mR+1,movement@mR+1
  2087   00023E  0E02               	movlw	2
  2088   000240  6E29               	movwf	movement@count^0,c
  2089   000242  EC77  F006         	call	_movement	;wreg free
  2090   000246                     l3109:
  2091                           
  2092                           ;color.c: 154:         if (color.R_norm < 0.38 && color.B_norm > 0.32 && color.G_norm > 
      +                          0.34){
  2093   000246  C04C  F003         	movff	_color+8,___flge@ff1
  2094   00024A  C04D  F004         	movff	_color+9,___flge@ff1+1
  2095   00024E  C04E  F005         	movff	_color+10,___flge@ff1+2
  2096   000252  C04F  F006         	movff	_color+11,___flge@ff1+3
  2097   000256  0E5C               	movlw	92
  2098   000258  6E07               	movwf	___flge@ff2^0,c
  2099   00025A  0E8F               	movlw	143
  2100   00025C  6E08               	movwf	(___flge@ff2+1)^0,c
  2101   00025E  0EC2               	movlw	194
  2102   000260  6E09               	movwf	(___flge@ff2+2)^0,c
  2103   000262  0E3E               	movlw	62
  2104   000264  6E0A               	movwf	(___flge@ff2+3)^0,c
  2105   000266  ECCB  F00C         	call	___flge	;wreg free
  2106   00026A  B0D8               	btfsc	status,0,c
  2107   00026C  EF3A  F001         	goto	u2281
  2108   000270  EF3C  F001         	goto	u2280
  2109   000274                     u2281:
  2110   000274  EF83  F001         	goto	l3121
  2111   000278                     u2280:
  2112   000278  0E0A               	movlw	10
  2113   00027A  6E03               	movwf	___flge@ff1^0,c
  2114   00027C  0ED7               	movlw	215
  2115   00027E  6E04               	movwf	(___flge@ff1+1)^0,c
  2116   000280  0EA3               	movlw	163
  2117   000282  6E05               	movwf	(___flge@ff1+2)^0,c
  2118   000284  0E3E               	movlw	62
  2119   000286  6E06               	movwf	(___flge@ff1+3)^0,c
  2120   000288  C050  F007         	movff	_color+12,___flge@ff2
  2121   00028C  C051  F008         	movff	_color+13,___flge@ff2+1
  2122   000290  C052  F009         	movff	_color+14,___flge@ff2+2
  2123   000294  C053  F00A         	movff	_color+15,___flge@ff2+3
  2124   000298  ECCB  F00C         	call	___flge	;wreg free
  2125   00029C  B0D8               	btfsc	status,0,c
  2126   00029E  EF53  F001         	goto	u2291
  2127   0002A2  EF55  F001         	goto	u2290
  2128   0002A6                     u2291:
  2129   0002A6  EF83  F001         	goto	l3121
  2130   0002AA                     u2290:
  2131   0002AA  0E7B               	movlw	123
  2132   0002AC  6E03               	movwf	___flge@ff1^0,c
  2133   0002AE  0E14               	movlw	20
  2134   0002B0  6E04               	movwf	(___flge@ff1+1)^0,c
  2135   0002B2  0EAE               	movlw	174
  2136   0002B4  6E05               	movwf	(___flge@ff1+2)^0,c
  2137   0002B6  0E3E               	movlw	62
  2138   0002B8  6E06               	movwf	(___flge@ff1+3)^0,c
  2139   0002BA  C054  F007         	movff	_color+16,___flge@ff2
  2140   0002BE  C055  F008         	movff	_color+17,___flge@ff2+1
  2141   0002C2  C056  F009         	movff	_color+18,___flge@ff2+2
  2142   0002C6  C057  F00A         	movff	_color+19,___flge@ff2+3
  2143   0002CA  ECCB  F00C         	call	___flge	;wreg free
  2144   0002CE  B0D8               	btfsc	status,0,c
  2145   0002D0  EF6C  F001         	goto	u2301
  2146   0002D4  EF6E  F001         	goto	u2300
  2147   0002D8                     u2301:
  2148   0002D8  EF83  F001         	goto	l3121
  2149   0002DC                     u2300:
  2150   0002DC                     
  2151                           ;color.c: 155:             card_memory[card_count] = 3;
  2152   0002DC  0E88               	movlw	low _card_memory
  2153   0002DE  2443               	addwf	_card_count^0,w,c
  2154   0002E0  6ED9               	movwf	fsr2l,c
  2155   0002E2  6ADA               	clrf	fsr2h,c
  2156   0002E4  0E00               	movlw	high _card_memory
  2157   0002E6  22DA               	addwfc	fsr2h,f,c
  2158   0002E8  0E03               	movlw	3
  2159   0002EA  6EDF               	movwf	indf2,c
  2160   0002EC                     
  2161                           ;color.c: 156:             card_count ++;
  2162   0002EC  2A43               	incf	_card_count^0,f,c
  2163   0002EE                     
  2164                           ;color.c: 157:             movement(mL,mR,3);
  2165   0002EE  C036  F025         	movff	buggy_color_response@mL,movement@mL
  2166   0002F2  C037  F026         	movff	buggy_color_response@mL+1,movement@mL+1
  2167   0002F6  C038  F027         	movff	buggy_color_response@mR,movement@mR
  2168   0002FA  C039  F028         	movff	buggy_color_response@mR+1,movement@mR+1
  2169   0002FE  0E03               	movlw	3
  2170   000300  6E29               	movwf	movement@count^0,c
  2171   000302  EC77  F006         	call	_movement	;wreg free
  2172   000306                     l3121:
  2173                           
  2174                           ;color.c: 161:         if (color.R_norm > 0.52 && color.G_norm > 0.32){
  2175   000306  0EB8               	movlw	184
  2176   000308  6E03               	movwf	___flge@ff1^0,c
  2177   00030A  0E1E               	movlw	30
  2178   00030C  6E04               	movwf	(___flge@ff1+1)^0,c
  2179   00030E  0E05               	movlw	5
  2180   000310  6E05               	movwf	(___flge@ff1+2)^0,c
  2181   000312  0E3F               	movlw	63
  2182   000314  6E06               	movwf	(___flge@ff1+3)^0,c
  2183   000316  C04C  F007         	movff	_color+8,___flge@ff2
  2184   00031A  C04D  F008         	movff	_color+9,___flge@ff2+1
  2185   00031E  C04E  F009         	movff	_color+10,___flge@ff2+2
  2186   000322  C04F  F00A         	movff	_color+11,___flge@ff2+3
  2187   000326  ECCB  F00C         	call	___flge	;wreg free
  2188   00032A  B0D8               	btfsc	status,0,c
  2189   00032C  EF9A  F001         	goto	u2311
  2190   000330  EF9C  F001         	goto	u2310
  2191   000334                     u2311:
  2192   000334  EFCA  F001         	goto	l3131
  2193   000338                     u2310:
  2194   000338  0E0A               	movlw	10
  2195   00033A  6E03               	movwf	___flge@ff1^0,c
  2196   00033C  0ED7               	movlw	215
  2197   00033E  6E04               	movwf	(___flge@ff1+1)^0,c
  2198   000340  0EA3               	movlw	163
  2199   000342  6E05               	movwf	(___flge@ff1+2)^0,c
  2200   000344  0E3E               	movlw	62
  2201   000346  6E06               	movwf	(___flge@ff1+3)^0,c
  2202   000348  C054  F007         	movff	_color+16,___flge@ff2
  2203   00034C  C055  F008         	movff	_color+17,___flge@ff2+1
  2204   000350  C056  F009         	movff	_color+18,___flge@ff2+2
  2205   000354  C057  F00A         	movff	_color+19,___flge@ff2+3
  2206   000358  ECCB  F00C         	call	___flge	;wreg free
  2207   00035C  B0D8               	btfsc	status,0,c
  2208   00035E  EFB3  F001         	goto	u2321
  2209   000362  EFB5  F001         	goto	u2320
  2210   000366                     u2321:
  2211   000366  EFCA  F001         	goto	l3131
  2212   00036A                     u2320:
  2213   00036A                     
  2214                           ;color.c: 162:             card_memory[card_count] = 9;
  2215   00036A  0E88               	movlw	low _card_memory
  2216   00036C  2443               	addwf	_card_count^0,w,c
  2217   00036E  6ED9               	movwf	fsr2l,c
  2218   000370  6ADA               	clrf	fsr2h,c
  2219   000372  0E00               	movlw	high _card_memory
  2220   000374  22DA               	addwfc	fsr2h,f,c
  2221   000376  0E09               	movlw	9
  2222   000378  6EDF               	movwf	indf2,c
  2223   00037A                     
  2224                           ;color.c: 163:             card_count ++;
  2225   00037A  2A43               	incf	_card_count^0,f,c
  2226   00037C                     
  2227                           ;color.c: 164:             movement(mL,mR,4);
  2228   00037C  C036  F025         	movff	buggy_color_response@mL,movement@mL
  2229   000380  C037  F026         	movff	buggy_color_response@mL+1,movement@mL+1
  2230   000384  C038  F027         	movff	buggy_color_response@mR,movement@mR
  2231   000388  C039  F028         	movff	buggy_color_response@mR+1,movement@mR+1
  2232   00038C  0E04               	movlw	4
  2233   00038E  6E29               	movwf	movement@count^0,c
  2234   000390  EC77  F006         	call	_movement	;wreg free
  2235   000394                     l3131:
  2236                           
  2237                           ;color.c: 168:         if (color.R_norm > 0.50 && color.B_norm > 0.24 && color.G_norm < 
      +                          0.33){
  2238   000394  0E00               	movlw	0
  2239   000396  6E03               	movwf	___flge@ff1^0,c
  2240   000398  0E00               	movlw	0
  2241   00039A  6E04               	movwf	(___flge@ff1+1)^0,c
  2242   00039C  0E00               	movlw	0
  2243   00039E  6E05               	movwf	(___flge@ff1+2)^0,c
  2244   0003A0  0E3F               	movlw	63
  2245   0003A2  6E06               	movwf	(___flge@ff1+3)^0,c
  2246   0003A4  C04C  F007         	movff	_color+8,___flge@ff2
  2247   0003A8  C04D  F008         	movff	_color+9,___flge@ff2+1
  2248   0003AC  C04E  F009         	movff	_color+10,___flge@ff2+2
  2249   0003B0  C04F  F00A         	movff	_color+11,___flge@ff2+3
  2250   0003B4  ECCB  F00C         	call	___flge	;wreg free
  2251   0003B8  B0D8               	btfsc	status,0,c
  2252   0003BA  EFE1  F001         	goto	u2331
  2253   0003BE  EFE3  F001         	goto	u2330
  2254   0003C2                     u2331:
  2255   0003C2  EF2A  F002         	goto	l3143
  2256   0003C6                     u2330:
  2257   0003C6  0E8F               	movlw	143
  2258   0003C8  6E03               	movwf	___flge@ff1^0,c
  2259   0003CA  0EC2               	movlw	194
  2260   0003CC  6E04               	movwf	(___flge@ff1+1)^0,c
  2261   0003CE  0E75               	movlw	117
  2262   0003D0  6E05               	movwf	(___flge@ff1+2)^0,c
  2263   0003D2  0E3E               	movlw	62
  2264   0003D4  6E06               	movwf	(___flge@ff1+3)^0,c
  2265   0003D6  C050  F007         	movff	_color+12,___flge@ff2
  2266   0003DA  C051  F008         	movff	_color+13,___flge@ff2+1
  2267   0003DE  C052  F009         	movff	_color+14,___flge@ff2+2
  2268   0003E2  C053  F00A         	movff	_color+15,___flge@ff2+3
  2269   0003E6  ECCB  F00C         	call	___flge	;wreg free
  2270   0003EA  B0D8               	btfsc	status,0,c
  2271   0003EC  EFFA  F001         	goto	u2341
  2272   0003F0  EFFC  F001         	goto	u2340
  2273   0003F4                     u2341:
  2274   0003F4  EF2A  F002         	goto	l3143
  2275   0003F8                     u2340:
  2276   0003F8  C054  F003         	movff	_color+16,___flge@ff1
  2277   0003FC  C055  F004         	movff	_color+17,___flge@ff1+1
  2278   000400  C056  F005         	movff	_color+18,___flge@ff1+2
  2279   000404  C057  F006         	movff	_color+19,___flge@ff1+3
  2280   000408  0EC3               	movlw	195
  2281   00040A  6E07               	movwf	___flge@ff2^0,c
  2282   00040C  0EF5               	movlw	245
  2283   00040E  6E08               	movwf	(___flge@ff2+1)^0,c
  2284   000410  0EA8               	movlw	168
  2285   000412  6E09               	movwf	(___flge@ff2+2)^0,c
  2286   000414  0E3E               	movlw	62
  2287   000416  6E0A               	movwf	(___flge@ff2+3)^0,c
  2288   000418  ECCB  F00C         	call	___flge	;wreg free
  2289   00041C  B0D8               	btfsc	status,0,c
  2290   00041E  EF13  F002         	goto	u2351
  2291   000422  EF15  F002         	goto	u2350
  2292   000426                     u2351:
  2293   000426  EF2A  F002         	goto	l3143
  2294   00042A                     u2350:
  2295   00042A                     
  2296                           ;color.c: 169:             card_memory[card_count] = 10;
  2297   00042A  0E88               	movlw	low _card_memory
  2298   00042C  2443               	addwf	_card_count^0,w,c
  2299   00042E  6ED9               	movwf	fsr2l,c
  2300   000430  6ADA               	clrf	fsr2h,c
  2301   000432  0E00               	movlw	high _card_memory
  2302   000434  22DA               	addwfc	fsr2h,f,c
  2303   000436  0E0A               	movlw	10
  2304   000438  6EDF               	movwf	indf2,c
  2305   00043A                     
  2306                           ;color.c: 170:             card_count ++;
  2307   00043A  2A43               	incf	_card_count^0,f,c
  2308   00043C                     
  2309                           ;color.c: 171:             movement(mL,mR,5);
  2310   00043C  C036  F025         	movff	buggy_color_response@mL,movement@mL
  2311   000440  C037  F026         	movff	buggy_color_response@mL+1,movement@mL+1
  2312   000444  C038  F027         	movff	buggy_color_response@mR,movement@mR
  2313   000448  C039  F028         	movff	buggy_color_response@mR+1,movement@mR+1
  2314   00044C  0E05               	movlw	5
  2315   00044E  6E29               	movwf	movement@count^0,c
  2316   000450  EC77  F006         	call	_movement	;wreg free
  2317   000454                     l3143:
  2318                           
  2319                           ;color.c: 175:         if (color.R_norm > 0.60 && color.B_norm < 0.22 && color.G_norm > 
      +                          0.23){
  2320   000454  0E9A               	movlw	154
  2321   000456  6E03               	movwf	___flge@ff1^0,c
  2322   000458  0E99               	movlw	153
  2323   00045A  6E04               	movwf	(___flge@ff1+1)^0,c
  2324   00045C  0E19               	movlw	25
  2325   00045E  6E05               	movwf	(___flge@ff1+2)^0,c
  2326   000460  0E3F               	movlw	63
  2327   000462  6E06               	movwf	(___flge@ff1+3)^0,c
  2328   000464  C04C  F007         	movff	_color+8,___flge@ff2
  2329   000468  C04D  F008         	movff	_color+9,___flge@ff2+1
  2330   00046C  C04E  F009         	movff	_color+10,___flge@ff2+2
  2331   000470  C04F  F00A         	movff	_color+11,___flge@ff2+3
  2332   000474  ECCB  F00C         	call	___flge	;wreg free
  2333   000478  B0D8               	btfsc	status,0,c
  2334   00047A  EF41  F002         	goto	u2361
  2335   00047E  EF43  F002         	goto	u2360
  2336   000482                     u2361:
  2337   000482  EF8A  F002         	goto	l3155
  2338   000486                     u2360:
  2339   000486  C050  F003         	movff	_color+12,___flge@ff1
  2340   00048A  C051  F004         	movff	_color+13,___flge@ff1+1
  2341   00048E  C052  F005         	movff	_color+14,___flge@ff1+2
  2342   000492  C053  F006         	movff	_color+15,___flge@ff1+3
  2343   000496  0EAE               	movlw	174
  2344   000498  6E07               	movwf	___flge@ff2^0,c
  2345   00049A  0E47               	movlw	71
  2346   00049C  6E08               	movwf	(___flge@ff2+1)^0,c
  2347   00049E  0E61               	movlw	97
  2348   0004A0  6E09               	movwf	(___flge@ff2+2)^0,c
  2349   0004A2  0E3E               	movlw	62
  2350   0004A4  6E0A               	movwf	(___flge@ff2+3)^0,c
  2351   0004A6  ECCB  F00C         	call	___flge	;wreg free
  2352   0004AA  B0D8               	btfsc	status,0,c
  2353   0004AC  EF5A  F002         	goto	u2371
  2354   0004B0  EF5C  F002         	goto	u2370
  2355   0004B4                     u2371:
  2356   0004B4  EF8A  F002         	goto	l3155
  2357   0004B8                     u2370:
  2358   0004B8  0E1F               	movlw	31
  2359   0004BA  6E03               	movwf	___flge@ff1^0,c
  2360   0004BC  0E85               	movlw	133
  2361   0004BE  6E04               	movwf	(___flge@ff1+1)^0,c
  2362   0004C0  0E6B               	movlw	107
  2363   0004C2  6E05               	movwf	(___flge@ff1+2)^0,c
  2364   0004C4  0E3E               	movlw	62
  2365   0004C6  6E06               	movwf	(___flge@ff1+3)^0,c
  2366   0004C8  C054  F007         	movff	_color+16,___flge@ff2
  2367   0004CC  C055  F008         	movff	_color+17,___flge@ff2+1
  2368   0004D0  C056  F009         	movff	_color+18,___flge@ff2+2
  2369   0004D4  C057  F00A         	movff	_color+19,___flge@ff2+3
  2370   0004D8  ECCB  F00C         	call	___flge	;wreg free
  2371   0004DC  B0D8               	btfsc	status,0,c
  2372   0004DE  EF73  F002         	goto	u2381
  2373   0004E2  EF75  F002         	goto	u2380
  2374   0004E6                     u2381:
  2375   0004E6  EF8A  F002         	goto	l3155
  2376   0004EA                     u2380:
  2377   0004EA                     
  2378                           ;color.c: 176:             card_memory[card_count] = 7;
  2379   0004EA  0E88               	movlw	low _card_memory
  2380   0004EC  2443               	addwf	_card_count^0,w,c
  2381   0004EE  6ED9               	movwf	fsr2l,c
  2382   0004F0  6ADA               	clrf	fsr2h,c
  2383   0004F2  0E00               	movlw	high _card_memory
  2384   0004F4  22DA               	addwfc	fsr2h,f,c
  2385   0004F6  0E07               	movlw	7
  2386   0004F8  6EDF               	movwf	indf2,c
  2387   0004FA                     
  2388                           ;color.c: 177:             card_count ++;
  2389   0004FA  2A43               	incf	_card_count^0,f,c
  2390   0004FC                     
  2391                           ;color.c: 178:             movement(mL,mR,6);
  2392   0004FC  C036  F025         	movff	buggy_color_response@mL,movement@mL
  2393   000500  C037  F026         	movff	buggy_color_response@mL+1,movement@mL+1
  2394   000504  C038  F027         	movff	buggy_color_response@mR,movement@mR
  2395   000508  C039  F028         	movff	buggy_color_response@mR+1,movement@mR+1
  2396   00050C  0E06               	movlw	6
  2397   00050E  6E29               	movwf	movement@count^0,c
  2398   000510  EC77  F006         	call	_movement	;wreg free
  2399   000514                     l3155:
  2400                           
  2401                           ;color.c: 182:         if (color.R_norm < 0.40 && color.B_norm > 0.30 && color.G_norm > 
      +                          0.4){
  2402   000514  C04C  F003         	movff	_color+8,___flge@ff1
  2403   000518  C04D  F004         	movff	_color+9,___flge@ff1+1
  2404   00051C  C04E  F005         	movff	_color+10,___flge@ff1+2
  2405   000520  C04F  F006         	movff	_color+11,___flge@ff1+3
  2406   000524  0ECD               	movlw	205
  2407   000526  6E07               	movwf	___flge@ff2^0,c
  2408   000528  0ECC               	movlw	204
  2409   00052A  6E08               	movwf	(___flge@ff2+1)^0,c
  2410   00052C  0ECC               	movlw	204
  2411   00052E  6E09               	movwf	(___flge@ff2+2)^0,c
  2412   000530  0E3E               	movlw	62
  2413   000532  6E0A               	movwf	(___flge@ff2+3)^0,c
  2414   000534  ECCB  F00C         	call	___flge	;wreg free
  2415   000538  B0D8               	btfsc	status,0,c
  2416   00053A  EFA1  F002         	goto	u2391
  2417   00053E  EFA3  F002         	goto	u2390
  2418   000542                     u2391:
  2419   000542  EFEA  F002         	goto	l3167
  2420   000546                     u2390:
  2421   000546  0E9A               	movlw	154
  2422   000548  6E03               	movwf	___flge@ff1^0,c
  2423   00054A  0E99               	movlw	153
  2424   00054C  6E04               	movwf	(___flge@ff1+1)^0,c
  2425   00054E  0E99               	movlw	153
  2426   000550  6E05               	movwf	(___flge@ff1+2)^0,c
  2427   000552  0E3E               	movlw	62
  2428   000554  6E06               	movwf	(___flge@ff1+3)^0,c
  2429   000556  C050  F007         	movff	_color+12,___flge@ff2
  2430   00055A  C051  F008         	movff	_color+13,___flge@ff2+1
  2431   00055E  C052  F009         	movff	_color+14,___flge@ff2+2
  2432   000562  C053  F00A         	movff	_color+15,___flge@ff2+3
  2433   000566  ECCB  F00C         	call	___flge	;wreg free
  2434   00056A  B0D8               	btfsc	status,0,c
  2435   00056C  EFBA  F002         	goto	u2401
  2436   000570  EFBC  F002         	goto	u2400
  2437   000574                     u2401:
  2438   000574  EFEA  F002         	goto	l3167
  2439   000578                     u2400:
  2440   000578  0ECD               	movlw	205
  2441   00057A  6E03               	movwf	___flge@ff1^0,c
  2442   00057C  0ECC               	movlw	204
  2443   00057E  6E04               	movwf	(___flge@ff1+1)^0,c
  2444   000580  0ECC               	movlw	204
  2445   000582  6E05               	movwf	(___flge@ff1+2)^0,c
  2446   000584  0E3E               	movlw	62
  2447   000586  6E06               	movwf	(___flge@ff1+3)^0,c
  2448   000588  C054  F007         	movff	_color+16,___flge@ff2
  2449   00058C  C055  F008         	movff	_color+17,___flge@ff2+1
  2450   000590  C056  F009         	movff	_color+18,___flge@ff2+2
  2451   000594  C057  F00A         	movff	_color+19,___flge@ff2+3
  2452   000598  ECCB  F00C         	call	___flge	;wreg free
  2453   00059C  B0D8               	btfsc	status,0,c
  2454   00059E  EFD3  F002         	goto	u2411
  2455   0005A2  EFD5  F002         	goto	u2410
  2456   0005A6                     u2411:
  2457   0005A6  EFEA  F002         	goto	l3167
  2458   0005AA                     u2410:
  2459   0005AA                     
  2460                           ;color.c: 183:             card_memory[card_count] = 6;
  2461   0005AA  0E88               	movlw	low _card_memory
  2462   0005AC  2443               	addwf	_card_count^0,w,c
  2463   0005AE  6ED9               	movwf	fsr2l,c
  2464   0005B0  6ADA               	clrf	fsr2h,c
  2465   0005B2  0E00               	movlw	high _card_memory
  2466   0005B4  22DA               	addwfc	fsr2h,f,c
  2467   0005B6  0E06               	movlw	6
  2468   0005B8  6EDF               	movwf	indf2,c
  2469   0005BA                     
  2470                           ;color.c: 184:             card_count ++;
  2471   0005BA  2A43               	incf	_card_count^0,f,c
  2472   0005BC                     
  2473                           ;color.c: 185:             movement(mL,mR,7);
  2474   0005BC  C036  F025         	movff	buggy_color_response@mL,movement@mL
  2475   0005C0  C037  F026         	movff	buggy_color_response@mL+1,movement@mL+1
  2476   0005C4  C038  F027         	movff	buggy_color_response@mR,movement@mR
  2477   0005C8  C039  F028         	movff	buggy_color_response@mR+1,movement@mR+1
  2478   0005CC  0E07               	movlw	7
  2479   0005CE  6E29               	movwf	movement@count^0,c
  2480   0005D0  EC77  F006         	call	_movement	;wreg free
  2481   0005D4                     l3167:
  2482                           
  2483                           ;color.c: 189:         if (color.R_norm < 0.5 && color.C > 16000 ){
  2484   0005D4  C04C  F003         	movff	_color+8,___flge@ff1
  2485   0005D8  C04D  F004         	movff	_color+9,___flge@ff1+1
  2486   0005DC  C04E  F005         	movff	_color+10,___flge@ff1+2
  2487   0005E0  C04F  F006         	movff	_color+11,___flge@ff1+3
  2488   0005E4  0E00               	movlw	0
  2489   0005E6  6E07               	movwf	___flge@ff2^0,c
  2490   0005E8  0E00               	movlw	0
  2491   0005EA  6E08               	movwf	(___flge@ff2+1)^0,c
  2492   0005EC  0E00               	movlw	0
  2493   0005EE  6E09               	movwf	(___flge@ff2+2)^0,c
  2494   0005F0  0E3F               	movlw	63
  2495   0005F2  6E0A               	movwf	(___flge@ff2+3)^0,c
  2496   0005F4  ECCB  F00C         	call	___flge	;wreg free
  2497   0005F8  B0D8               	btfsc	status,0,c
  2498   0005FA  EF01  F003         	goto	u2421
  2499   0005FE  EF03  F003         	goto	u2420
  2500   000602                     u2421:
  2501   000602  EF73  F003         	goto	l3197
  2502   000606                     u2420:
  2503   000606  0E81               	movlw	129
  2504   000608  5C4A               	subwf	(_color+6)^0,w,c
  2505   00060A  0E3E               	movlw	62
  2506   00060C  584B               	subwfb	(_color+7)^0,w,c
  2507   00060E  A0D8               	btfss	status,0,c
  2508   000610  EF0C  F003         	goto	u2431
  2509   000614  EF0E  F003         	goto	u2430
  2510   000618                     u2431:
  2511   000618  EF73  F003         	goto	l3197
  2512   00061C                     u2430:
  2513   00061C                     
  2514                           ;color.c: 192:             card_memory[card_count] = 3;
  2515   00061C  0E88               	movlw	low _card_memory
  2516   00061E  2443               	addwf	_card_count^0,w,c
  2517   000620  6ED9               	movwf	fsr2l,c
  2518   000622  6ADA               	clrf	fsr2h,c
  2519   000624  0E00               	movlw	high _card_memory
  2520   000626  22DA               	addwfc	fsr2h,f,c
  2521   000628  0E03               	movlw	3
  2522   00062A  6EDF               	movwf	indf2,c
  2523   00062C                     
  2524                           ;color.c: 193:             card_count ++;
  2525   00062C  2A43               	incf	_card_count^0,f,c
  2526   00062E                     
  2527                           ;color.c: 195:             LATGbits.LATG1 = 0;
  2528   00062E  927F               	bcf	127,1,c	;volatile
  2529   000630                     
  2530                           ;color.c: 196:             LATAbits.LATA4 = 0;
  2531   000630  9879               	bcf	121,4,c	;volatile
  2532   000632                     
  2533                           ;color.c: 197:             LATFbits.LATF7 = 0;
  2534   000632  9E7E               	bcf	126,7,c	;volatile
  2535   000634                     
  2536                           ;color.c: 199:             space(mL,mR);
  2537   000634  C036  F01B         	movff	buggy_color_response@mL,space@mL
  2538   000638  C037  F01C         	movff	buggy_color_response@mL+1,space@mL+1
  2539   00063C  C038  F01D         	movff	buggy_color_response@mR,space@mR
  2540   000640  C039  F01E         	movff	buggy_color_response@mR+1,space@mR+1
  2541   000644  EC4D  F00D         	call	_space	;wreg free
  2542   000648                     
  2543                           ;color.c: 200:             _delay((unsigned long)((500)*(64000000/4000.0)));
  2544   000648  0E29               	movlw	41
  2545   00064A  6E3D               	movwf	(??_buggy_color_response+1)^0,c
  2546   00064C  0E96               	movlw	150
  2547   00064E  6E3C               	movwf	??_buggy_color_response^0,c
  2548   000650  0E7F               	movlw	127
  2549   000652                     u2717:
  2550   000652  2EE8               	decfsz	wreg,f,c
  2551   000654  D7FE               	bra	u2717
  2552   000656  2E3C               	decfsz	??_buggy_color_response^0,f,c
  2553   000658  D7FC               	bra	u2717
  2554   00065A  2E3D               	decfsz	(??_buggy_color_response+1)^0,f,c
  2555   00065C  D7FA               	bra	u2717
  2556   00065E  F000               	nop	
  2557   000660                     
  2558                           ;color.c: 201:             stop(mL,mR);
  2559   000660  C036  F016         	movff	buggy_color_response@mL,stop@mL
  2560   000664  C037  F017         	movff	buggy_color_response@mL+1,stop@mL+1
  2561   000668  C038  F018         	movff	buggy_color_response@mR,stop@mR
  2562   00066C  C039  F019         	movff	buggy_color_response@mR+1,stop@mR+1
  2563   000670  ECF3  F00F         	call	_stop	;wreg free
  2564   000674                     
  2565                           ;color.c: 202:             _delay((unsigned long)((500)*(64000000/4000.0)));
  2566   000674  0E29               	movlw	41
  2567   000676  6E3D               	movwf	(??_buggy_color_response+1)^0,c
  2568   000678  0E96               	movlw	150
  2569   00067A  6E3C               	movwf	??_buggy_color_response^0,c
  2570   00067C  0E7F               	movlw	127
  2571   00067E                     u2727:
  2572   00067E  2EE8               	decfsz	wreg,f,c
  2573   000680  D7FE               	bra	u2727
  2574   000682  2E3C               	decfsz	??_buggy_color_response^0,f,c
  2575   000684  D7FC               	bra	u2727
  2576   000686  2E3D               	decfsz	(??_buggy_color_response+1)^0,f,c
  2577   000688  D7FA               	bra	u2727
  2578   00068A  F000               	nop	
  2579   00068C                     
  2580                           ;color.c: 204:             return_home(mL,mR);
  2581   00068C  C036  F030         	movff	buggy_color_response@mL,return_home@mL
  2582   000690  C037  F031         	movff	buggy_color_response@mL+1,return_home@mL+1
  2583   000694  C038  F032         	movff	buggy_color_response@mR,return_home@mR
  2584   000698  C039  F033         	movff	buggy_color_response@mR+1,return_home@mR+1
  2585   00069C  EC93  F009         	call	_return_home	;wreg free
  2586   0006A0                     
  2587                           ;color.c: 206:             stop(mL,mR);
  2588   0006A0  C036  F016         	movff	buggy_color_response@mL,stop@mL
  2589   0006A4  C037  F017         	movff	buggy_color_response@mL+1,stop@mL+1
  2590   0006A8  C038  F018         	movff	buggy_color_response@mR,stop@mR
  2591   0006AC  C039  F019         	movff	buggy_color_response@mR+1,stop@mR+1
  2592   0006B0  ECF3  F00F         	call	_stop	;wreg free
  2593   0006B4                     
  2594                           ;color.c: 207:             _delay((unsigned long)((500)*(64000000/4000.0)));
  2595   0006B4  0E29               	movlw	41
  2596   0006B6  6E3D               	movwf	(??_buggy_color_response+1)^0,c
  2597   0006B8  0E96               	movlw	150
  2598   0006BA  6E3C               	movwf	??_buggy_color_response^0,c
  2599   0006BC  0E7F               	movlw	127
  2600   0006BE                     u2737:
  2601   0006BE  2EE8               	decfsz	wreg,f,c
  2602   0006C0  D7FE               	bra	u2737
  2603   0006C2  2E3C               	decfsz	??_buggy_color_response^0,f,c
  2604   0006C4  D7FC               	bra	u2737
  2605   0006C6  2E3D               	decfsz	(??_buggy_color_response+1)^0,f,c
  2606   0006C8  D7FA               	bra	u2737
  2607   0006CA  F000               	nop	
  2608   0006CC                     
  2609                           ;color.c: 209:             movement_return(mL,mR,3);
  2610   0006CC  C036  F02B         	movff	buggy_color_response@mL,movement_return@mL
  2611   0006D0  C037  F02C         	movff	buggy_color_response@mL+1,movement_return@mL+1
  2612   0006D4  C038  F02D         	movff	buggy_color_response@mR,movement_return@mR
  2613   0006D8  C039  F02E         	movff	buggy_color_response@mR+1,movement_return@mR+1
  2614   0006DC  0E03               	movlw	3
  2615   0006DE  6E2F               	movwf	movement_return@count^0,c
  2616   0006E0  ECBE  F008         	call	_movement_return	;wreg free
  2617   0006E4  0003               	sleep		;# 
  2618   0006E6                     l3197:
  2619                           
  2620                           ;color.c: 213:         timer_reset();
  2621   0006E6  EC4F  F012         	call	_timer_reset	;wreg free
  2622                           
  2623                           ;color.c: 214:     }
  2624   0006EA  EFA9  F004         	goto	l152
  2625   0006EE                     l3199:
  2626   0006EE  0E98               	movlw	152
  2627   0006F0  5C4A               	subwf	(_color+6)^0,w,c
  2628   0006F2  0E08               	movlw	8
  2629   0006F4  584B               	subwfb	(_color+7)^0,w,c
  2630   0006F6  B0D8               	btfsc	status,0,c
  2631   0006F8  EF80  F003         	goto	u2441
  2632   0006FC  EF82  F003         	goto	u2440
  2633   000700                     u2441:
  2634   000700  EF9F  F004         	goto	l3255
  2635   000704                     u2440:
  2636   000704  0EF4               	movlw	244
  2637   000706  5C46               	subwf	(_color+2)^0,w,c
  2638   000708  0E01               	movlw	1
  2639   00070A  5847               	subwfb	(_color+3)^0,w,c
  2640   00070C  B0D8               	btfsc	status,0,c
  2641   00070E  EF8B  F003         	goto	u2451
  2642   000712  EF8D  F003         	goto	u2450
  2643   000716                     u2451:
  2644   000716  EF9F  F004         	goto	l3255
  2645   00071A                     u2450:
  2646   00071A  C050  F003         	movff	_color+12,___flge@ff1
  2647   00071E  C051  F004         	movff	_color+13,___flge@ff1+1
  2648   000722  C052  F005         	movff	_color+14,___flge@ff1+2
  2649   000726  C053  F006         	movff	_color+15,___flge@ff1+3
  2650   00072A  0E8F               	movlw	143
  2651   00072C  6E07               	movwf	___flge@ff2^0,c
  2652   00072E  0EC2               	movlw	194
  2653   000730  6E08               	movwf	(___flge@ff2+1)^0,c
  2654   000732  0E75               	movlw	117
  2655   000734  6E09               	movwf	(___flge@ff2+2)^0,c
  2656   000736  0E3E               	movlw	62
  2657   000738  6E0A               	movwf	(___flge@ff2+3)^0,c
  2658   00073A  ECCB  F00C         	call	___flge	;wreg free
  2659   00073E  B0D8               	btfsc	status,0,c
  2660   000740  EFA4  F003         	goto	u2461
  2661   000744  EFA6  F003         	goto	u2460
  2662   000748                     u2461:
  2663   000748  EF9F  F004         	goto	l3255
  2664   00074C                     u2460:
  2665   00074C                     
  2666                           ;color.c: 218:             card_memory[card_count] = 3;
  2667   00074C  0E88               	movlw	low _card_memory
  2668   00074E  2443               	addwf	_card_count^0,w,c
  2669   000750  6ED9               	movwf	fsr2l,c
  2670   000752  6ADA               	clrf	fsr2h,c
  2671   000754  0E00               	movlw	high _card_memory
  2672   000756  22DA               	addwfc	fsr2h,f,c
  2673   000758  0E03               	movlw	3
  2674   00075A  6EDF               	movwf	indf2,c
  2675   00075C                     
  2676                           ;color.c: 219:             card_count ++;
  2677   00075C  2A43               	incf	_card_count^0,f,c
  2678   00075E                     
  2679                           ;color.c: 220:             char count2 = 0;
  2680   00075E  0E00               	movlw	0
  2681   000760  6E3E               	movwf	buggy_color_response@count2^0,c
  2682   000762                     
  2683                           ;color.c: 222:             for (char j = 0; j <= 5; j++){
  2684   000762  0E00               	movlw	0
  2685   000764  6E3F               	movwf	buggy_color_response@j^0,c
  2686   000766                     l3213:
  2687   000766  0E05               	movlw	5
  2688   000768  643F               	cpfsgt	buggy_color_response@j^0,c
  2689   00076A  EFB9  F003         	goto	u2471
  2690   00076E  EFBB  F003         	goto	u2470
  2691   000772                     u2471:
  2692   000772  EFBD  F003         	goto	l3217
  2693   000776                     u2470:
  2694   000776  EF38  F004         	goto	l3239
  2695   00077A                     l3217:
  2696                           
  2697                           ;color.c: 223:                 reverse(mL,mR);
  2698   00077A  C036  F01B         	movff	buggy_color_response@mL,reverse@mL
  2699   00077E  C037  F01C         	movff	buggy_color_response@mL+1,reverse@mL+1
  2700   000782  C038  F01D         	movff	buggy_color_response@mR,reverse@mR
  2701   000786  C039  F01E         	movff	buggy_color_response@mR+1,reverse@mR+1
  2702   00078A  EC43  F00E         	call	_reverse	;wreg free
  2703   00078E                     
  2704                           ;color.c: 224:                 _delay((unsigned long)((200)*(64000000/4000.0)));
  2705   00078E  0E11               	movlw	17
  2706   000790  6E3D               	movwf	(??_buggy_color_response+1)^0,c
  2707   000792  0E3C               	movlw	60
  2708   000794  6E3C               	movwf	??_buggy_color_response^0,c
  2709   000796  0ECB               	movlw	203
  2710   000798                     u2747:
  2711   000798  2EE8               	decfsz	wreg,f,c
  2712   00079A  D7FE               	bra	u2747
  2713   00079C  2E3C               	decfsz	??_buggy_color_response^0,f,c
  2714   00079E  D7FC               	bra	u2747
  2715   0007A0  2E3D               	decfsz	(??_buggy_color_response+1)^0,f,c
  2716   0007A2  D7FA               	bra	u2747
  2717   0007A4  F000               	nop	
  2718   0007A6                     
  2719                           ;color.c: 225:                 stop(mL,mR);
  2720   0007A6  C036  F016         	movff	buggy_color_response@mL,stop@mL
  2721   0007AA  C037  F017         	movff	buggy_color_response@mL+1,stop@mL+1
  2722   0007AE  C038  F018         	movff	buggy_color_response@mR,stop@mR
  2723   0007B2  C039  F019         	movff	buggy_color_response@mR+1,stop@mR+1
  2724   0007B6  ECF3  F00F         	call	_stop	;wreg free
  2725                           
  2726                           ;color.c: 226:                 _delay((unsigned long)((200)*(64000000/4000.0)));
  2727   0007BA  0E11               	movlw	17
  2728   0007BC  6E3D               	movwf	(??_buggy_color_response+1)^0,c
  2729   0007BE  0E3C               	movlw	60
  2730   0007C0  6E3C               	movwf	??_buggy_color_response^0,c
  2731   0007C2  0ECB               	movlw	203
  2732   0007C4                     u2757:
  2733   0007C4  2EE8               	decfsz	wreg,f,c
  2734   0007C6  D7FE               	bra	u2757
  2735   0007C8  2E3C               	decfsz	??_buggy_color_response^0,f,c
  2736   0007CA  D7FC               	bra	u2757
  2737   0007CC  2E3D               	decfsz	(??_buggy_color_response+1)^0,f,c
  2738   0007CE  D7FA               	bra	u2757
  2739   0007D0  F000               	nop	
  2740   0007D2                     
  2741                           ;color.c: 227:                 forward(mL,mR);
  2742   0007D2  C036  F01B         	movff	buggy_color_response@mL,forward@mL
  2743   0007D6  C037  F01C         	movff	buggy_color_response@mL+1,forward@mL+1
  2744   0007DA  C038  F01D         	movff	buggy_color_response@mR,forward@mR
  2745   0007DE  C039  F01E         	movff	buggy_color_response@mR+1,forward@mR+1
  2746   0007E2  ECCE  F00D         	call	_forward	;wreg free
  2747   0007E6                     
  2748                           ;color.c: 228:                 _delay((unsigned long)((200)*(64000000/4000.0)));
  2749   0007E6  0E11               	movlw	17
  2750   0007E8  6E3D               	movwf	(??_buggy_color_response+1)^0,c
  2751   0007EA  0E3C               	movlw	60
  2752   0007EC  6E3C               	movwf	??_buggy_color_response^0,c
  2753   0007EE  0ECB               	movlw	203
  2754   0007F0                     u2767:
  2755   0007F0  2EE8               	decfsz	wreg,f,c
  2756   0007F2  D7FE               	bra	u2767
  2757   0007F4  2E3C               	decfsz	??_buggy_color_response^0,f,c
  2758   0007F6  D7FC               	bra	u2767
  2759   0007F8  2E3D               	decfsz	(??_buggy_color_response+1)^0,f,c
  2760   0007FA  D7FA               	bra	u2767
  2761   0007FC  F000               	nop	
  2762   0007FE                     
  2763                           ;color.c: 229:                 READcolor(&color);
  2764   0007FE  0E44               	movlw	low _color
  2765   000800  6E2A               	movwf	READcolor@c^0,c
  2766   000802  0E00               	movlw	high _color
  2767   000804  6E2B               	movwf	(READcolor@c+1)^0,c
  2768   000806  EC04  F00B         	call	_READcolor	;wreg free
  2769   00080A                     
  2770                           ;color.c: 230:                 if (color.C < 2200 && color.B < 500 && color.B_norm < 0.2
      +                          4){count2 += 1;}
  2771   00080A  0E98               	movlw	152
  2772   00080C  5C4A               	subwf	(_color+6)^0,w,c
  2773   00080E  0E08               	movlw	8
  2774   000810  584B               	subwfb	(_color+7)^0,w,c
  2775   000812  B0D8               	btfsc	status,0,c
  2776   000814  EF0E  F004         	goto	u2481
  2777   000818  EF10  F004         	goto	u2480
  2778   00081C                     u2481:
  2779   00081C  EF35  F004         	goto	l149
  2780   000820                     u2480:
  2781   000820  0EF4               	movlw	244
  2782   000822  5C46               	subwf	(_color+2)^0,w,c
  2783   000824  0E01               	movlw	1
  2784   000826  5847               	subwfb	(_color+3)^0,w,c
  2785   000828  B0D8               	btfsc	status,0,c
  2786   00082A  EF19  F004         	goto	u2491
  2787   00082E  EF1B  F004         	goto	u2490
  2788   000832                     u2491:
  2789   000832  EF35  F004         	goto	l149
  2790   000836                     u2490:
  2791   000836  C050  F003         	movff	_color+12,___flge@ff1
  2792   00083A  C051  F004         	movff	_color+13,___flge@ff1+1
  2793   00083E  C052  F005         	movff	_color+14,___flge@ff1+2
  2794   000842  C053  F006         	movff	_color+15,___flge@ff1+3
  2795   000846  0E8F               	movlw	143
  2796   000848  6E07               	movwf	___flge@ff2^0,c
  2797   00084A  0EC2               	movlw	194
  2798   00084C  6E08               	movwf	(___flge@ff2+1)^0,c
  2799   00084E  0E75               	movlw	117
  2800   000850  6E09               	movwf	(___flge@ff2+2)^0,c
  2801   000852  0E3E               	movlw	62
  2802   000854  6E0A               	movwf	(___flge@ff2+3)^0,c
  2803   000856  ECCB  F00C         	call	___flge	;wreg free
  2804   00085A  B0D8               	btfsc	status,0,c
  2805   00085C  EF32  F004         	goto	u2501
  2806   000860  EF34  F004         	goto	u2500
  2807   000864                     u2501:
  2808   000864  EF35  F004         	goto	l149
  2809   000868                     u2500:
  2810   000868  2A3E               	incf	buggy_color_response@count2^0,f,c
  2811   00086A                     l149:
  2812                           
  2813                           ;color.c: 231:             }
  2814   00086A  2A3F               	incf	buggy_color_response@j^0,f,c
  2815   00086C  EFB3  F003         	goto	l3213
  2816   000870                     l3239:
  2817                           
  2818                           ;color.c: 233:             if (count2 == 5){
  2819   000870  0E05               	movlw	5
  2820   000872  183E               	xorwf	buggy_color_response@count2^0,w,c
  2821   000874  A4D8               	btfss	status,2,c
  2822   000876  EF3F  F004         	goto	u2511
  2823   00087A  EF41  F004         	goto	u2510
  2824   00087E                     u2511:
  2825   00087E  EFA9  F004         	goto	l152
  2826   000882                     u2510:
  2827   000882                     
  2828                           ;color.c: 235:                 LATGbits.LATG1 = 0;
  2829   000882  927F               	bcf	127,1,c	;volatile
  2830                           
  2831                           ;color.c: 236:                 LATAbits.LATA4 = 0;
  2832   000884  9879               	bcf	121,4,c	;volatile
  2833                           
  2834                           ;color.c: 237:                 LATFbits.LATF7 = 0;
  2835   000886  9E7E               	bcf	126,7,c	;volatile
  2836   000888                     
  2837                           ;color.c: 239:                 space(mL,mR);
  2838   000888  C036  F01B         	movff	buggy_color_response@mL,space@mL
  2839   00088C  C037  F01C         	movff	buggy_color_response@mL+1,space@mL+1
  2840   000890  C038  F01D         	movff	buggy_color_response@mR,space@mR
  2841   000894  C039  F01E         	movff	buggy_color_response@mR+1,space@mR+1
  2842   000898  EC4D  F00D         	call	_space	;wreg free
  2843   00089C                     
  2844                           ;color.c: 240:                 _delay((unsigned long)((500)*(64000000/4000.0)));
  2845   00089C  0E29               	movlw	41
  2846   00089E  6E3D               	movwf	(??_buggy_color_response+1)^0,c
  2847   0008A0  0E96               	movlw	150
  2848   0008A2  6E3C               	movwf	??_buggy_color_response^0,c
  2849   0008A4  0E7F               	movlw	127
  2850   0008A6                     u2777:
  2851   0008A6  2EE8               	decfsz	wreg,f,c
  2852   0008A8  D7FE               	bra	u2777
  2853   0008AA  2E3C               	decfsz	??_buggy_color_response^0,f,c
  2854   0008AC  D7FC               	bra	u2777
  2855   0008AE  2E3D               	decfsz	(??_buggy_color_response+1)^0,f,c
  2856   0008B0  D7FA               	bra	u2777
  2857   0008B2  F000               	nop	
  2858   0008B4                     
  2859                           ;color.c: 241:                 stop(mL,mR);
  2860   0008B4  C036  F016         	movff	buggy_color_response@mL,stop@mL
  2861   0008B8  C037  F017         	movff	buggy_color_response@mL+1,stop@mL+1
  2862   0008BC  C038  F018         	movff	buggy_color_response@mR,stop@mR
  2863   0008C0  C039  F019         	movff	buggy_color_response@mR+1,stop@mR+1
  2864   0008C4  ECF3  F00F         	call	_stop	;wreg free
  2865                           
  2866                           ;color.c: 242:                 _delay((unsigned long)((500)*(64000000/4000.0)));
  2867   0008C8  0E29               	movlw	41
  2868   0008CA  6E3D               	movwf	(??_buggy_color_response+1)^0,c
  2869   0008CC  0E96               	movlw	150
  2870   0008CE  6E3C               	movwf	??_buggy_color_response^0,c
  2871   0008D0  0E7F               	movlw	127
  2872   0008D2                     u2787:
  2873   0008D2  2EE8               	decfsz	wreg,f,c
  2874   0008D4  D7FE               	bra	u2787
  2875   0008D6  2E3C               	decfsz	??_buggy_color_response^0,f,c
  2876   0008D8  D7FC               	bra	u2787
  2877   0008DA  2E3D               	decfsz	(??_buggy_color_response+1)^0,f,c
  2878   0008DC  D7FA               	bra	u2787
  2879   0008DE  F000               	nop	
  2880   0008E0                     
  2881                           ;color.c: 244:                 return_home(mL,mR);
  2882   0008E0  C036  F030         	movff	buggy_color_response@mL,return_home@mL
  2883   0008E4  C037  F031         	movff	buggy_color_response@mL+1,return_home@mL+1
  2884   0008E8  C038  F032         	movff	buggy_color_response@mR,return_home@mR
  2885   0008EC  C039  F033         	movff	buggy_color_response@mR+1,return_home@mR+1
  2886   0008F0  EC93  F009         	call	_return_home	;wreg free
  2887   0008F4                     
  2888                           ;color.c: 246:                 stop(mL,mR);
  2889   0008F4  C036  F016         	movff	buggy_color_response@mL,stop@mL
  2890   0008F8  C037  F017         	movff	buggy_color_response@mL+1,stop@mL+1
  2891   0008FC  C038  F018         	movff	buggy_color_response@mR,stop@mR
  2892   000900  C039  F019         	movff	buggy_color_response@mR+1,stop@mR+1
  2893   000904  ECF3  F00F         	call	_stop	;wreg free
  2894                           
  2895                           ;color.c: 247:                 _delay((unsigned long)((500)*(64000000/4000.0)));
  2896   000908  0E29               	movlw	41
  2897   00090A  6E3D               	movwf	(??_buggy_color_response+1)^0,c
  2898   00090C  0E96               	movlw	150
  2899   00090E  6E3C               	movwf	??_buggy_color_response^0,c
  2900   000910  0E7F               	movlw	127
  2901   000912                     u2797:
  2902   000912  2EE8               	decfsz	wreg,f,c
  2903   000914  D7FE               	bra	u2797
  2904   000916  2E3C               	decfsz	??_buggy_color_response^0,f,c
  2905   000918  D7FC               	bra	u2797
  2906   00091A  2E3D               	decfsz	(??_buggy_color_response+1)^0,f,c
  2907   00091C  D7FA               	bra	u2797
  2908   00091E  F000               	nop	
  2909   000920                     
  2910                           ;color.c: 249:                 movement_return(mL,mR,3);
  2911   000920  C036  F02B         	movff	buggy_color_response@mL,movement_return@mL
  2912   000924  C037  F02C         	movff	buggy_color_response@mL+1,movement_return@mL+1
  2913   000928  C038  F02D         	movff	buggy_color_response@mR,movement_return@mR
  2914   00092C  C039  F02E         	movff	buggy_color_response@mR+1,movement_return@mR+1
  2915   000930  0E03               	movlw	3
  2916   000932  6E2F               	movwf	movement_return@count^0,c
  2917   000934  ECBE  F008         	call	_movement_return	;wreg free
  2918   000938  0003               	sleep		;# 
  2919   00093A  EFA9  F004         	goto	l152
  2920   00093E                     l3255:
  2921   00093E  C036  F01B         	movff	buggy_color_response@mL,forward@mL
  2922   000942  C037  F01C         	movff	buggy_color_response@mL+1,forward@mL+1
  2923   000946  C038  F01D         	movff	buggy_color_response@mR,forward@mR
  2924   00094A  C039  F01E         	movff	buggy_color_response@mR+1,forward@mR+1
  2925   00094E  ECCE  F00D         	call	_forward	;wreg free
  2926   000952                     l152:
  2927   000952  0012               	return		;funcret
  2928   000954                     __end_of_buggy_color_response:
  2929                           	callstack 0
  2930                           
  2931 ;; *************** function _timer_reset *****************
  2932 ;; Defined at:
  2933 ;;		line 25 in file "timers.c"
  2934 ;; Parameters:    Size  Location     Type
  2935 ;;		None
  2936 ;; Auto vars:     Size  Location     Type
  2937 ;;		None
  2938 ;; Return value:  Size  Location     Type
  2939 ;;                  1    wreg      void 
  2940 ;; Registers used:
  2941 ;;		wreg, status,2
  2942 ;; Tracked objects:
  2943 ;;		On entry : 0/0
  2944 ;;		On exit  : 0/0
  2945 ;;		Unchanged: 0/0
  2946 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2947 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2948 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2949 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2950 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2951 ;;Total ram usage:        0 bytes
  2952 ;; Hardware stack levels used: 1
  2953 ;; Hardware stack levels required when called: 1
  2954 ;; This function calls:
  2955 ;;		Nothing
  2956 ;; This function is called by:
  2957 ;;		_buggy_color_response
  2958 ;;		_main
  2959 ;; This function uses a non-reentrant model
  2960 ;;
  2961                           
  2962                           	psect	text14
  2963   00249E                     __ptext14:
  2964                           	callstack 0
  2965   00249E                     _timer_reset:
  2966                           	callstack 29
  2967   00249E                     
  2968                           ;timers.c: 26:     timer_val = 0;
  2969   00249E  0E00               	movlw	0
  2970   0024A0  6E41               	movwf	(_timer_val+1)^0,c
  2971   0024A2  0E00               	movlw	0
  2972   0024A4  6E40               	movwf	_timer_val^0,c
  2973                           
  2974                           ;timers.c: 27:     TMR0H=0;
  2975   0024A6  0E00               	movlw	0
  2976   0024A8  6ED4               	movwf	212,c	;volatile
  2977                           
  2978                           ;timers.c: 28:     TMR0L=0b00100011;
  2979   0024AA  0E23               	movlw	35
  2980   0024AC  6ED3               	movwf	211,c	;volatile
  2981   0024AE  0012               	return		;funcret
  2982   0024B0                     __end_of_timer_reset:
  2983                           	callstack 0
  2984                           
  2985 ;; *************** function _return_home *****************
  2986 ;; Defined at:
  2987 ;;		line 262 in file "color.c"
  2988 ;; Parameters:    Size  Location     Type
  2989 ;;  mL              2   47[COMRAM] PTR struct DC_motor
  2990 ;;		 -> motorL(9), 
  2991 ;;  mR              2   49[COMRAM] PTR struct DC_motor
  2992 ;;		 -> motorR(9), 
  2993 ;; Auto vars:     Size  Location     Type
  2994 ;;		None
  2995 ;; Return value:  Size  Location     Type
  2996 ;;                  1    wreg      void 
  2997 ;; Registers used:
  2998 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2999 ;; Tracked objects:
  3000 ;;		On entry : 0/0
  3001 ;;		On exit  : 0/0
  3002 ;;		Unchanged: 0/0
  3003 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3004 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3005 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3006 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3007 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3008 ;;Total ram usage:        6 bytes
  3009 ;; Hardware stack levels used: 1
  3010 ;; Hardware stack levels required when called: 7
  3011 ;; This function calls:
  3012 ;;		_delay_ms_func
  3013 ;;		_forward
  3014 ;;		_movement_return
  3015 ;;		_reverse
  3016 ;;		_stop
  3017 ;; This function is called by:
  3018 ;;		_buggy_color_response
  3019 ;; This function uses a non-reentrant model
  3020 ;;
  3021                           
  3022                           	psect	text15
  3023   001326                     __ptext15:
  3024                           	callstack 0
  3025   001326                     _return_home:
  3026                           	callstack 22
  3027   001326                     
  3028                           ;color.c: 263:     while(timer_index > 0 && card_count > 0 ) {
  3029   001326  EF3D  F00A         	goto	l2967
  3030   00132A                     l2935:
  3031                           
  3032                           ;color.c: 265:         movement_return(mL,mR,card_memory[card_count-1]);
  3033   00132A  C030  F02B         	movff	return_home@mL,movement_return@mL
  3034   00132E  C031  F02C         	movff	return_home@mL+1,movement_return@mL+1
  3035   001332  C032  F02D         	movff	return_home@mR,movement_return@mR
  3036   001336  C033  F02E         	movff	return_home@mR+1,movement_return@mR+1
  3037   00133A  0E87               	movlw	low (_card_memory+65535)
  3038   00133C  2443               	addwf	_card_count^0,w,c
  3039   00133E  6ED9               	movwf	fsr2l,c
  3040   001340  6ADA               	clrf	fsr2h,c
  3041   001342  0E00               	movlw	high (_card_memory+65535)
  3042   001344  22DA               	addwfc	fsr2h,f,c
  3043   001346  50DF               	movf	indf2,w,c
  3044   001348  6E2F               	movwf	movement_return@count^0,c
  3045   00134A  ECBE  F008         	call	_movement_return	;wreg free
  3046   00134E                     
  3047                           ;color.c: 266:         card_count--;
  3048   00134E  0643               	decf	_card_count^0,f,c
  3049   001350                     
  3050                           ;color.c: 267:         _delay((unsigned long)((250)*(64000000/4000.0)));
  3051   001350  0E15               	movlw	21
  3052   001352  6E35               	movwf	(??_return_home+1)^0,c
  3053   001354  0E4B               	movlw	75
  3054   001356  6E34               	movwf	??_return_home^0,c
  3055   001358  0EBE               	movlw	190
  3056   00135A                     u2807:
  3057   00135A  2EE8               	decfsz	wreg,f,c
  3058   00135C  D7FE               	bra	u2807
  3059   00135E  2E34               	decfsz	??_return_home^0,f,c
  3060   001360  D7FC               	bra	u2807
  3061   001362  2E35               	decfsz	(??_return_home+1)^0,f,c
  3062   001364  D7FA               	bra	u2807
  3063   001366  D000               	nop2	
  3064   001368                     
  3065                           ;color.c: 268:         reverse(mL,mR);
  3066   001368  C030  F01B         	movff	return_home@mL,reverse@mL
  3067   00136C  C031  F01C         	movff	return_home@mL+1,reverse@mL+1
  3068   001370  C032  F01D         	movff	return_home@mR,reverse@mR
  3069   001374  C033  F01E         	movff	return_home@mR+1,reverse@mR+1
  3070   001378  EC43  F00E         	call	_reverse	;wreg free
  3071   00137C                     
  3072                           ;color.c: 269:         _delay((unsigned long)((500)*(64000000/4000.0)));
  3073   00137C  0E29               	movlw	41
  3074   00137E  6E35               	movwf	(??_return_home+1)^0,c
  3075   001380  0E96               	movlw	150
  3076   001382  6E34               	movwf	??_return_home^0,c
  3077   001384  0E7F               	movlw	127
  3078   001386                     u2817:
  3079   001386  2EE8               	decfsz	wreg,f,c
  3080   001388  D7FE               	bra	u2817
  3081   00138A  2E34               	decfsz	??_return_home^0,f,c
  3082   00138C  D7FC               	bra	u2817
  3083   00138E  2E35               	decfsz	(??_return_home+1)^0,f,c
  3084   001390  D7FA               	bra	u2817
  3085   001392  F000               	nop	
  3086   001394                     
  3087                           ;color.c: 270:         stop(mL,mR);
  3088   001394  C030  F016         	movff	return_home@mL,stop@mL
  3089   001398  C031  F017         	movff	return_home@mL+1,stop@mL+1
  3090   00139C  C032  F018         	movff	return_home@mR,stop@mR
  3091   0013A0  C033  F019         	movff	return_home@mR+1,stop@mR+1
  3092   0013A4  ECF3  F00F         	call	_stop	;wreg free
  3093   0013A8                     
  3094                           ;color.c: 271:         _delay((unsigned long)((500)*(64000000/4000.0)));
  3095   0013A8  0E29               	movlw	41
  3096   0013AA  6E35               	movwf	(??_return_home+1)^0,c
  3097   0013AC  0E96               	movlw	150
  3098   0013AE  6E34               	movwf	??_return_home^0,c
  3099   0013B0  0E7F               	movlw	127
  3100   0013B2                     u2827:
  3101   0013B2  2EE8               	decfsz	wreg,f,c
  3102   0013B4  D7FE               	bra	u2827
  3103   0013B6  2E34               	decfsz	??_return_home^0,f,c
  3104   0013B8  D7FC               	bra	u2827
  3105   0013BA  2E35               	decfsz	(??_return_home+1)^0,f,c
  3106   0013BC  D7FA               	bra	u2827
  3107   0013BE  F000               	nop	
  3108   0013C0                     
  3109                           ;color.c: 272:         forward(mL,mR);
  3110   0013C0  C030  F01B         	movff	return_home@mL,forward@mL
  3111   0013C4  C031  F01C         	movff	return_home@mL+1,forward@mL+1
  3112   0013C8  C032  F01D         	movff	return_home@mR,forward@mR
  3113   0013CC  C033  F01E         	movff	return_home@mR+1,forward@mR+1
  3114   0013D0  ECCE  F00D         	call	_forward	;wreg free
  3115   0013D4                     
  3116                           ;color.c: 273:         delay_ms_func(timer_memory[timer_index-1]-2);
  3117   0013D4  0E5F               	movlw	low (_timer_memory+65535)
  3118   0013D6  2442               	addwf	_timer_index^0,w,c
  3119   0013D8  6ED9               	movwf	fsr2l,c
  3120   0013DA  6ADA               	clrf	fsr2h,c
  3121   0013DC  0E00               	movlw	high (_timer_memory+65535)
  3122   0013DE  22DA               	addwfc	fsr2h,f,c
  3123   0013E0  50DF               	movf	indf2,w,c
  3124   0013E2  6E34               	movwf	??_return_home^0,c
  3125   0013E4  0EFE               	movlw	254
  3126   0013E6  2434               	addwf	??_return_home^0,w,c
  3127   0013E8  6E03               	movwf	delay_ms_func@time^0,c
  3128   0013EA  6A04               	clrf	(delay_ms_func@time+1)^0,c
  3129   0013EC  0EFF               	movlw	255
  3130   0013EE  2204               	addwfc	(delay_ms_func@time+1)^0,f,c
  3131   0013F0  EC61  F011         	call	_delay_ms_func	;wreg free
  3132   0013F4                     
  3133                           ;color.c: 274:         timer_index--;
  3134   0013F4  0642               	decf	_timer_index^0,f,c
  3135   0013F6                     
  3136                           ;color.c: 275:         stop(mL,mR);
  3137   0013F6  C030  F016         	movff	return_home@mL,stop@mL
  3138   0013FA  C031  F017         	movff	return_home@mL+1,stop@mL+1
  3139   0013FE  C032  F018         	movff	return_home@mR,stop@mR
  3140   001402  C033  F019         	movff	return_home@mR+1,stop@mR+1
  3141   001406  ECF3  F00F         	call	_stop	;wreg free
  3142   00140A                     
  3143                           ;color.c: 276:         _delay((unsigned long)((200)*(64000000/4000.0)));
  3144   00140A  0E11               	movlw	17
  3145   00140C  6E35               	movwf	(??_return_home+1)^0,c
  3146   00140E  0E3C               	movlw	60
  3147   001410  6E34               	movwf	??_return_home^0,c
  3148   001412  0ECB               	movlw	203
  3149   001414                     u2837:
  3150   001414  2EE8               	decfsz	wreg,f,c
  3151   001416  D7FE               	bra	u2837
  3152   001418  2E34               	decfsz	??_return_home^0,f,c
  3153   00141A  D7FC               	bra	u2837
  3154   00141C  2E35               	decfsz	(??_return_home+1)^0,f,c
  3155   00141E  D7FA               	bra	u2837
  3156   001420  F000               	nop	
  3157   001422                     
  3158                           ;color.c: 277:          reverse(mL,mR);
  3159   001422  C030  F01B         	movff	return_home@mL,reverse@mL
  3160   001426  C031  F01C         	movff	return_home@mL+1,reverse@mL+1
  3161   00142A  C032  F01D         	movff	return_home@mR,reverse@mR
  3162   00142E  C033  F01E         	movff	return_home@mR+1,reverse@mR+1
  3163   001432  EC43  F00E         	call	_reverse	;wreg free
  3164   001436                     
  3165                           ;color.c: 278:         _delay((unsigned long)((100)*(64000000/4000.0)));
  3166   001436  0E09               	movlw	9
  3167   001438  6E35               	movwf	(??_return_home+1)^0,c
  3168   00143A  0E1E               	movlw	30
  3169   00143C  6E34               	movwf	??_return_home^0,c
  3170   00143E  0EE4               	movlw	228
  3171   001440                     u2847:
  3172   001440  2EE8               	decfsz	wreg,f,c
  3173   001442  D7FE               	bra	u2847
  3174   001444  2E34               	decfsz	??_return_home^0,f,c
  3175   001446  D7FC               	bra	u2847
  3176   001448  2E35               	decfsz	(??_return_home+1)^0,f,c
  3177   00144A  D7FA               	bra	u2847
  3178   00144C  D000               	nop2	
  3179   00144E                     
  3180                           ;color.c: 279:         stop(mL,mR);
  3181   00144E  C030  F016         	movff	return_home@mL,stop@mL
  3182   001452  C031  F017         	movff	return_home@mL+1,stop@mL+1
  3183   001456  C032  F018         	movff	return_home@mR,stop@mR
  3184   00145A  C033  F019         	movff	return_home@mR+1,stop@mR+1
  3185   00145E  ECF3  F00F         	call	_stop	;wreg free
  3186   001462                     
  3187                           ;color.c: 280:         _delay((unsigned long)((250)*(64000000/4000.0)));
  3188   001462  0E15               	movlw	21
  3189   001464  6E35               	movwf	(??_return_home+1)^0,c
  3190   001466  0E4B               	movlw	75
  3191   001468  6E34               	movwf	??_return_home^0,c
  3192   00146A  0EBE               	movlw	190
  3193   00146C                     u2857:
  3194   00146C  2EE8               	decfsz	wreg,f,c
  3195   00146E  D7FE               	bra	u2857
  3196   001470  2E34               	decfsz	??_return_home^0,f,c
  3197   001472  D7FC               	bra	u2857
  3198   001474  2E35               	decfsz	(??_return_home+1)^0,f,c
  3199   001476  D7FA               	bra	u2857
  3200   001478  D000               	nop2	
  3201   00147A                     l2967:
  3202                           
  3203                           ;color.c: 263:     while(timer_index > 0 && card_count > 0 ) {
  3204   00147A  5042               	movf	_timer_index^0,w,c
  3205   00147C  B4D8               	btfsc	status,2,c
  3206   00147E  EF43  F00A         	goto	u2151
  3207   001482  EF45  F00A         	goto	u2150
  3208   001486                     u2151:
  3209   001486  EF4D  F00A         	goto	l160
  3210   00148A                     u2150:
  3211   00148A  5043               	movf	_card_count^0,w,c
  3212   00148C  A4D8               	btfss	status,2,c
  3213   00148E  EF4B  F00A         	goto	u2161
  3214   001492  EF4D  F00A         	goto	u2160
  3215   001496                     u2161:
  3216   001496  EF95  F009         	goto	l2935
  3217   00149A                     u2160:
  3218   00149A                     l160:
  3219   00149A  0012               	return		;funcret
  3220   00149C                     __end_of_return_home:
  3221                           	callstack 0
  3222                           
  3223 ;; *************** function _movement_return *****************
  3224 ;; Defined at:
  3225 ;;		line 324 in file "dc_motor.c"
  3226 ;; Parameters:    Size  Location     Type
  3227 ;;  mL              2   42[COMRAM] PTR struct DC_motor
  3228 ;;		 -> motorL(9), 
  3229 ;;  mR              2   44[COMRAM] PTR struct DC_motor
  3230 ;;		 -> motorR(9), 
  3231 ;;  count           1   46[COMRAM] unsigned char 
  3232 ;; Auto vars:     Size  Location     Type
  3233 ;;		None
  3234 ;; Return value:  Size  Location     Type
  3235 ;;                  1    wreg      void 
  3236 ;; Registers used:
  3237 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3238 ;; Tracked objects:
  3239 ;;		On entry : 0/0
  3240 ;;		On exit  : 0/0
  3241 ;;		Unchanged: 0/0
  3242 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3243 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3244 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3245 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3246 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3247 ;;Total ram usage:        5 bytes
  3248 ;; Hardware stack levels used: 1
  3249 ;; Hardware stack levels required when called: 6
  3250 ;; This function calls:
  3251 ;;		_left_45
  3252 ;;		_reverse_pink
  3253 ;;		_reverse_yellow
  3254 ;;		_right_45
  3255 ;;		_stop
  3256 ;; This function is called by:
  3257 ;;		_buggy_color_response
  3258 ;;		_return_home
  3259 ;; This function uses a non-reentrant model
  3260 ;;
  3261                           
  3262                           	psect	text16
  3263   00117C                     __ptext16:
  3264                           	callstack 0
  3265   00117C                     _movement_return:
  3266                           	callstack 22
  3267   00117C                     
  3268                           ;dc_motor.c: 324: void movement_return(DC_motor *mL, DC_motor *mR, char count);dc_motor.
      +                          c: 325: {;dc_motor.c: 327:     if (count == 1){right_45(mL,mR,2,right_timer); stop(mL,mR
      +                          );}
  3269   00117C  042F               	decf	movement_return@count^0,w,c
  3270   00117E  A4D8               	btfss	status,2,c
  3271   001180  EFC4  F008         	goto	u1671
  3272   001184  EFC6  F008         	goto	u1670
  3273   001188                     u1671:
  3274   001188  EFE0  F008         	goto	l2653
  3275   00118C                     u1670:
  3276   00118C  C02B  F01B         	movff	movement_return@mL,right_45@mL
  3277   001190  C02C  F01C         	movff	movement_return@mL+1,right_45@mL+1
  3278   001194  C02D  F01D         	movff	movement_return@mR,right_45@mR
  3279   001198  C02E  F01E         	movff	movement_return@mR+1,right_45@mR+1
  3280   00119C  0E02               	movlw	2
  3281   00119E  6E1F               	movwf	right_45@count^0,c
  3282   0011A0  C058  F020         	movff	_right_timer,right_45@right_timer
  3283   0011A4  C059  F021         	movff	_right_timer+1,right_45@right_timer+1
  3284   0011A8  ECA1  F00B         	call	_right_45	;wreg free
  3285   0011AC  C02B  F016         	movff	movement_return@mL,stop@mL
  3286   0011B0  C02C  F017         	movff	movement_return@mL+1,stop@mL+1
  3287   0011B4  C02D  F018         	movff	movement_return@mR,stop@mR
  3288   0011B8  C02E  F019         	movff	movement_return@mR+1,stop@mR+1
  3289   0011BC  ECF3  F00F         	call	_stop	;wreg free
  3290   0011C0                     l2653:
  3291                           
  3292                           ;dc_motor.c: 328:     if (count == 2){left_45(mL,mR,2,left_timer); stop(mL,mR);}
  3293   0011C0  0E02               	movlw	2
  3294   0011C2  182F               	xorwf	movement_return@count^0,w,c
  3295   0011C4  A4D8               	btfss	status,2,c
  3296   0011C6  EFE7  F008         	goto	u1681
  3297   0011CA  EFE9  F008         	goto	u1680
  3298   0011CE                     u1681:
  3299   0011CE  EF03  F009         	goto	l2657
  3300   0011D2                     u1680:
  3301   0011D2  C02B  F01B         	movff	movement_return@mL,left_45@mL
  3302   0011D6  C02C  F01C         	movff	movement_return@mL+1,left_45@mL+1
  3303   0011DA  C02D  F01D         	movff	movement_return@mR,left_45@mR
  3304   0011DE  C02E  F01E         	movff	movement_return@mR+1,left_45@mR+1
  3305   0011E2  0E02               	movlw	2
  3306   0011E4  6E1F               	movwf	left_45@count^0,c
  3307   0011E6  C05A  F020         	movff	_left_timer,left_45@left_timer
  3308   0011EA  C05B  F021         	movff	_left_timer+1,left_45@left_timer+1
  3309   0011EE  EC36  F00C         	call	_left_45	;wreg free
  3310   0011F2  C02B  F016         	movff	movement_return@mL,stop@mL
  3311   0011F6  C02C  F017         	movff	movement_return@mL+1,stop@mL+1
  3312   0011FA  C02D  F018         	movff	movement_return@mR,stop@mR
  3313   0011FE  C02E  F019         	movff	movement_return@mR+1,stop@mR+1
  3314   001202  ECF3  F00F         	call	_stop	;wreg free
  3315   001206                     l2657:
  3316                           
  3317                           ;dc_motor.c: 329:     if (count == 3){right_45(mL,mR,4,right_timer); stop(mL,mR);}
  3318   001206  0E03               	movlw	3
  3319   001208  182F               	xorwf	movement_return@count^0,w,c
  3320   00120A  A4D8               	btfss	status,2,c
  3321   00120C  EF0A  F009         	goto	u1691
  3322   001210  EF0C  F009         	goto	u1690
  3323   001214                     u1691:
  3324   001214  EF26  F009         	goto	l2661
  3325   001218                     u1690:
  3326   001218  C02B  F01B         	movff	movement_return@mL,right_45@mL
  3327   00121C  C02C  F01C         	movff	movement_return@mL+1,right_45@mL+1
  3328   001220  C02D  F01D         	movff	movement_return@mR,right_45@mR
  3329   001224  C02E  F01E         	movff	movement_return@mR+1,right_45@mR+1
  3330   001228  0E04               	movlw	4
  3331   00122A  6E1F               	movwf	right_45@count^0,c
  3332   00122C  C058  F020         	movff	_right_timer,right_45@right_timer
  3333   001230  C059  F021         	movff	_right_timer+1,right_45@right_timer+1
  3334   001234  ECA1  F00B         	call	_right_45	;wreg free
  3335   001238  C02B  F016         	movff	movement_return@mL,stop@mL
  3336   00123C  C02C  F017         	movff	movement_return@mL+1,stop@mL+1
  3337   001240  C02D  F018         	movff	movement_return@mR,stop@mR
  3338   001244  C02E  F019         	movff	movement_return@mR+1,stop@mR+1
  3339   001248  ECF3  F00F         	call	_stop	;wreg free
  3340   00124C                     l2661:
  3341                           
  3342                           ;dc_motor.c: 330:     if (count == 6){right_45(mL,mR,3,right_timer); stop(mL,mR);}
  3343   00124C  0E06               	movlw	6
  3344   00124E  182F               	xorwf	movement_return@count^0,w,c
  3345   001250  A4D8               	btfss	status,2,c
  3346   001252  EF2D  F009         	goto	u1701
  3347   001256  EF2F  F009         	goto	u1700
  3348   00125A                     u1701:
  3349   00125A  EF49  F009         	goto	l2665
  3350   00125E                     u1700:
  3351   00125E  C02B  F01B         	movff	movement_return@mL,right_45@mL
  3352   001262  C02C  F01C         	movff	movement_return@mL+1,right_45@mL+1
  3353   001266  C02D  F01D         	movff	movement_return@mR,right_45@mR
  3354   00126A  C02E  F01E         	movff	movement_return@mR+1,right_45@mR+1
  3355   00126E  0E03               	movlw	3
  3356   001270  6E1F               	movwf	right_45@count^0,c
  3357   001272  C058  F020         	movff	_right_timer,right_45@right_timer
  3358   001276  C059  F021         	movff	_right_timer+1,right_45@right_timer+1
  3359   00127A  ECA1  F00B         	call	_right_45	;wreg free
  3360   00127E  C02B  F016         	movff	movement_return@mL,stop@mL
  3361   001282  C02C  F017         	movff	movement_return@mL+1,stop@mL+1
  3362   001286  C02D  F018         	movff	movement_return@mR,stop@mR
  3363   00128A  C02E  F019         	movff	movement_return@mR+1,stop@mR+1
  3364   00128E  ECF3  F00F         	call	_stop	;wreg free
  3365   001292                     l2665:
  3366                           
  3367                           ;dc_motor.c: 331:     if (count == 7){left_45(mL,mR,3,right_timer); stop(mL,mR);}
  3368   001292  0E07               	movlw	7
  3369   001294  182F               	xorwf	movement_return@count^0,w,c
  3370   001296  A4D8               	btfss	status,2,c
  3371   001298  EF50  F009         	goto	u1711
  3372   00129C  EF52  F009         	goto	u1710
  3373   0012A0                     u1711:
  3374   0012A0  EF6C  F009         	goto	l2669
  3375   0012A4                     u1710:
  3376   0012A4  C02B  F01B         	movff	movement_return@mL,left_45@mL
  3377   0012A8  C02C  F01C         	movff	movement_return@mL+1,left_45@mL+1
  3378   0012AC  C02D  F01D         	movff	movement_return@mR,left_45@mR
  3379   0012B0  C02E  F01E         	movff	movement_return@mR+1,left_45@mR+1
  3380   0012B4  0E03               	movlw	3
  3381   0012B6  6E1F               	movwf	left_45@count^0,c
  3382   0012B8  C058  F020         	movff	_right_timer,left_45@left_timer
  3383   0012BC  C059  F021         	movff	_right_timer+1,left_45@left_timer+1
  3384   0012C0  EC36  F00C         	call	_left_45	;wreg free
  3385   0012C4  C02B  F016         	movff	movement_return@mL,stop@mL
  3386   0012C8  C02C  F017         	movff	movement_return@mL+1,stop@mL+1
  3387   0012CC  C02D  F018         	movff	movement_return@mR,stop@mR
  3388   0012D0  C02E  F019         	movff	movement_return@mR+1,stop@mR+1
  3389   0012D4  ECF3  F00F         	call	_stop	;wreg free
  3390   0012D8                     l2669:
  3391                           
  3392                           ;dc_motor.c: 333:     if (count == 9){reverse_yellow(mL,mR);}
  3393   0012D8  0E09               	movlw	9
  3394   0012DA  182F               	xorwf	movement_return@count^0,w,c
  3395   0012DC  A4D8               	btfss	status,2,c
  3396   0012DE  EF73  F009         	goto	u1721
  3397   0012E2  EF75  F009         	goto	u1720
  3398   0012E6                     u1721:
  3399   0012E6  EF7F  F009         	goto	l2673
  3400   0012EA                     u1720:
  3401   0012EA  C02B  F025         	movff	movement_return@mL,reverse_yellow@mL
  3402   0012EE  C02C  F026         	movff	movement_return@mL+1,reverse_yellow@mL+1
  3403   0012F2  C02D  F027         	movff	movement_return@mR,reverse_yellow@mR
  3404   0012F6  C02E  F028         	movff	movement_return@mR+1,reverse_yellow@mR+1
  3405   0012FA  EC00  F00F         	call	_reverse_yellow	;wreg free
  3406   0012FE                     l2673:
  3407                           
  3408                           ;dc_motor.c: 334:     if (count == 10) {reverse_pink(mL,mR);}
  3409   0012FE  0E0A               	movlw	10
  3410   001300  182F               	xorwf	movement_return@count^0,w,c
  3411   001302  A4D8               	btfss	status,2,c
  3412   001304  EF86  F009         	goto	u1731
  3413   001308  EF88  F009         	goto	u1730
  3414   00130C                     u1731:
  3415   00130C  EF92  F009         	goto	l367
  3416   001310                     u1730:
  3417   001310  C02B  F025         	movff	movement_return@mL,reverse_pink@mL
  3418   001314  C02C  F026         	movff	movement_return@mL+1,reverse_pink@mL+1
  3419   001318  C02D  F027         	movff	movement_return@mR,reverse_pink@mR
  3420   00131C  C02E  F028         	movff	movement_return@mR+1,reverse_pink@mR+1
  3421   001320  EC41  F00F         	call	_reverse_pink	;wreg free
  3422   001324                     l367:
  3423   001324  0012               	return		;funcret
  3424   001326                     __end_of_movement_return:
  3425                           	callstack 0
  3426                           
  3427 ;; *************** function _reverse_yellow *****************
  3428 ;; Defined at:
  3429 ;;		line 272 in file "dc_motor.c"
  3430 ;; Parameters:    Size  Location     Type
  3431 ;;  mL              2   36[COMRAM] PTR struct DC_motor
  3432 ;;		 -> motorL(9), 
  3433 ;;  mR              2   38[COMRAM] PTR struct DC_motor
  3434 ;;		 -> motorR(9), 
  3435 ;; Auto vars:     Size  Location     Type
  3436 ;;		None
  3437 ;; Return value:  Size  Location     Type
  3438 ;;                  1    wreg      void 
  3439 ;; Registers used:
  3440 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3441 ;; Tracked objects:
  3442 ;;		On entry : 0/0
  3443 ;;		On exit  : 0/0
  3444 ;;		Unchanged: 0/0
  3445 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3446 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3447 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3448 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3449 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3450 ;;Total ram usage:        6 bytes
  3451 ;; Hardware stack levels used: 1
  3452 ;; Hardware stack levels required when called: 5
  3453 ;; This function calls:
  3454 ;;		_custom_delay
  3455 ;;		_left_45
  3456 ;;		_reverse
  3457 ;;		_stop
  3458 ;; This function is called by:
  3459 ;;		_movement_return
  3460 ;; This function uses a non-reentrant model
  3461 ;;
  3462                           
  3463                           	psect	text17
  3464   001E00                     __ptext17:
  3465                           	callstack 0
  3466   001E00                     _reverse_yellow:
  3467                           	callstack 22
  3468   001E00                     
  3469                           ;dc_motor.c: 274:     left_45(mL,mR,2,left_timer);
  3470   001E00  C025  F01B         	movff	reverse_yellow@mL,left_45@mL
  3471   001E04  C026  F01C         	movff	reverse_yellow@mL+1,left_45@mL+1
  3472   001E08  C027  F01D         	movff	reverse_yellow@mR,left_45@mR
  3473   001E0C  C028  F01E         	movff	reverse_yellow@mR+1,left_45@mR+1
  3474   001E10  0E02               	movlw	2
  3475   001E12  6E1F               	movwf	left_45@count^0,c
  3476   001E14  C05A  F020         	movff	_left_timer,left_45@left_timer
  3477   001E18  C05B  F021         	movff	_left_timer+1,left_45@left_timer+1
  3478   001E1C  EC36  F00C         	call	_left_45	;wreg free
  3479                           
  3480                           ;dc_motor.c: 275:     stop(mL,mR);
  3481   001E20  C025  F016         	movff	reverse_yellow@mL,stop@mL
  3482   001E24  C026  F017         	movff	reverse_yellow@mL+1,stop@mL+1
  3483   001E28  C027  F018         	movff	reverse_yellow@mR,stop@mR
  3484   001E2C  C028  F019         	movff	reverse_yellow@mR+1,stop@mR+1
  3485   001E30  ECF3  F00F         	call	_stop	;wreg free
  3486   001E34                     
  3487                           ;dc_motor.c: 276:     _delay((unsigned long)((200)*(64000000/4000.0)));
  3488   001E34  0E11               	movlw	17
  3489   001E36  6E2A               	movwf	(??_reverse_yellow+1)^0,c
  3490   001E38  0E3C               	movlw	60
  3491   001E3A  6E29               	movwf	??_reverse_yellow^0,c
  3492   001E3C  0ECB               	movlw	203
  3493   001E3E                     u2867:
  3494   001E3E  2EE8               	decfsz	wreg,f,c
  3495   001E40  D7FE               	bra	u2867
  3496   001E42  2E29               	decfsz	??_reverse_yellow^0,f,c
  3497   001E44  D7FC               	bra	u2867
  3498   001E46  2E2A               	decfsz	(??_reverse_yellow+1)^0,f,c
  3499   001E48  D7FA               	bra	u2867
  3500   001E4A  F000               	nop	
  3501   001E4C                     
  3502                           ;dc_motor.c: 278:      reverse(mL,mR);
  3503   001E4C  C025  F01B         	movff	reverse_yellow@mL,reverse@mL
  3504   001E50  C026  F01C         	movff	reverse_yellow@mL+1,reverse@mL+1
  3505   001E54  C027  F01D         	movff	reverse_yellow@mR,reverse@mR
  3506   001E58  C028  F01E         	movff	reverse_yellow@mR+1,reverse@mR+1
  3507   001E5C  EC43  F00E         	call	_reverse	;wreg free
  3508   001E60  0E03               	movlw	3
  3509   001E62  6E04               	movwf	(custom_delay@temp+1)^0,c
  3510   001E64  0E84               	movlw	132
  3511   001E66  6E03               	movwf	custom_delay@temp^0,c
  3512   001E68  EC81  F011         	call	_custom_delay	;wreg free
  3513   001E6C                     
  3514                           ;dc_motor.c: 280:     stop(mL,mR);
  3515   001E6C  C025  F016         	movff	reverse_yellow@mL,stop@mL
  3516   001E70  C026  F017         	movff	reverse_yellow@mL+1,stop@mL+1
  3517   001E74  C027  F018         	movff	reverse_yellow@mR,stop@mR
  3518   001E78  C028  F019         	movff	reverse_yellow@mR+1,stop@mR+1
  3519   001E7C  ECF3  F00F         	call	_stop	;wreg free
  3520   001E80  0012               	return		;funcret
  3521   001E82                     __end_of_reverse_yellow:
  3522                           	callstack 0
  3523                           
  3524 ;; *************** function _reverse_pink *****************
  3525 ;; Defined at:
  3526 ;;		line 286 in file "dc_motor.c"
  3527 ;; Parameters:    Size  Location     Type
  3528 ;;  mL              2   36[COMRAM] PTR struct DC_motor
  3529 ;;		 -> motorL(9), 
  3530 ;;  mR              2   38[COMRAM] PTR struct DC_motor
  3531 ;;		 -> motorR(9), 
  3532 ;; Auto vars:     Size  Location     Type
  3533 ;;		None
  3534 ;; Return value:  Size  Location     Type
  3535 ;;                  1    wreg      void 
  3536 ;; Registers used:
  3537 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3538 ;; Tracked objects:
  3539 ;;		On entry : 0/0
  3540 ;;		On exit  : 0/0
  3541 ;;		Unchanged: 0/0
  3542 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3543 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3544 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3545 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3546 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3547 ;;Total ram usage:        6 bytes
  3548 ;; Hardware stack levels used: 1
  3549 ;; Hardware stack levels required when called: 5
  3550 ;; This function calls:
  3551 ;;		_custom_delay
  3552 ;;		_reverse
  3553 ;;		_right_45
  3554 ;;		_stop
  3555 ;; This function is called by:
  3556 ;;		_movement_return
  3557 ;; This function uses a non-reentrant model
  3558 ;;
  3559                           
  3560                           	psect	text18
  3561   001E82                     __ptext18:
  3562                           	callstack 0
  3563   001E82                     _reverse_pink:
  3564                           	callstack 22
  3565   001E82                     
  3566                           ;dc_motor.c: 288:     right_45(mL,mR,2,right_timer);
  3567   001E82  C025  F01B         	movff	reverse_pink@mL,right_45@mL
  3568   001E86  C026  F01C         	movff	reverse_pink@mL+1,right_45@mL+1
  3569   001E8A  C027  F01D         	movff	reverse_pink@mR,right_45@mR
  3570   001E8E  C028  F01E         	movff	reverse_pink@mR+1,right_45@mR+1
  3571   001E92  0E02               	movlw	2
  3572   001E94  6E1F               	movwf	right_45@count^0,c
  3573   001E96  C058  F020         	movff	_right_timer,right_45@right_timer
  3574   001E9A  C059  F021         	movff	_right_timer+1,right_45@right_timer+1
  3575   001E9E  ECA1  F00B         	call	_right_45	;wreg free
  3576                           
  3577                           ;dc_motor.c: 289:     stop(mL,mR);
  3578   001EA2  C025  F016         	movff	reverse_pink@mL,stop@mL
  3579   001EA6  C026  F017         	movff	reverse_pink@mL+1,stop@mL+1
  3580   001EAA  C027  F018         	movff	reverse_pink@mR,stop@mR
  3581   001EAE  C028  F019         	movff	reverse_pink@mR+1,stop@mR+1
  3582   001EB2  ECF3  F00F         	call	_stop	;wreg free
  3583   001EB6                     
  3584                           ;dc_motor.c: 290:     _delay((unsigned long)((200)*(64000000/4000.0)));
  3585   001EB6  0E11               	movlw	17
  3586   001EB8  6E2A               	movwf	(??_reverse_pink+1)^0,c
  3587   001EBA  0E3C               	movlw	60
  3588   001EBC  6E29               	movwf	??_reverse_pink^0,c
  3589   001EBE  0ECB               	movlw	203
  3590   001EC0                     u2877:
  3591   001EC0  2EE8               	decfsz	wreg,f,c
  3592   001EC2  D7FE               	bra	u2877
  3593   001EC4  2E29               	decfsz	??_reverse_pink^0,f,c
  3594   001EC6  D7FC               	bra	u2877
  3595   001EC8  2E2A               	decfsz	(??_reverse_pink+1)^0,f,c
  3596   001ECA  D7FA               	bra	u2877
  3597   001ECC  F000               	nop	
  3598   001ECE                     
  3599                           ;dc_motor.c: 292:     reverse(mL,mR);
  3600   001ECE  C025  F01B         	movff	reverse_pink@mL,reverse@mL
  3601   001ED2  C026  F01C         	movff	reverse_pink@mL+1,reverse@mL+1
  3602   001ED6  C027  F01D         	movff	reverse_pink@mR,reverse@mR
  3603   001EDA  C028  F01E         	movff	reverse_pink@mR+1,reverse@mR+1
  3604   001EDE  EC43  F00E         	call	_reverse	;wreg free
  3605   001EE2  0E03               	movlw	3
  3606   001EE4  6E04               	movwf	(custom_delay@temp+1)^0,c
  3607   001EE6  0E84               	movlw	132
  3608   001EE8  6E03               	movwf	custom_delay@temp^0,c
  3609   001EEA  EC81  F011         	call	_custom_delay	;wreg free
  3610   001EEE                     
  3611                           ;dc_motor.c: 294:     stop(mL,mR);
  3612   001EEE  C025  F016         	movff	reverse_pink@mL,stop@mL
  3613   001EF2  C026  F017         	movff	reverse_pink@mL+1,stop@mL+1
  3614   001EF6  C027  F018         	movff	reverse_pink@mR,stop@mR
  3615   001EFA  C028  F019         	movff	reverse_pink@mR+1,stop@mR+1
  3616   001EFE  ECF3  F00F         	call	_stop	;wreg free
  3617   001F02  0012               	return		;funcret
  3618   001F04                     __end_of_reverse_pink:
  3619                           	callstack 0
  3620                           
  3621 ;; *************** function _forward *****************
  3622 ;; Defined at:
  3623 ;;		line 127 in file "dc_motor.c"
  3624 ;; Parameters:    Size  Location     Type
  3625 ;;  mL              2   26[COMRAM] PTR struct DC_motor
  3626 ;;		 -> motorL(9), 
  3627 ;;  mR              2   28[COMRAM] PTR struct DC_motor
  3628 ;;		 -> motorR(9), 
  3629 ;; Auto vars:     Size  Location     Type
  3630 ;;		None
  3631 ;; Return value:  Size  Location     Type
  3632 ;;                  1    wreg      void 
  3633 ;; Registers used:
  3634 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3635 ;; Tracked objects:
  3636 ;;		On entry : 0/0
  3637 ;;		On exit  : 0/0
  3638 ;;		Unchanged: 0/0
  3639 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3640 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3641 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3642 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3643 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3644 ;;Total ram usage:        5 bytes
  3645 ;; Hardware stack levels used: 1
  3646 ;; Hardware stack levels required when called: 4
  3647 ;; This function calls:
  3648 ;;		_setMotorPWM
  3649 ;;		_stop
  3650 ;; This function is called by:
  3651 ;;		_buggy_color_response
  3652 ;;		_return_home
  3653 ;; This function uses a non-reentrant model
  3654 ;;
  3655                           
  3656                           	psect	text19
  3657   001B9C                     __ptext19:
  3658                           	callstack 0
  3659   001B9C                     _forward:
  3660                           	callstack 24
  3661   001B9C                     
  3662                           ;dc_motor.c: 127: void forward(DC_motor *mL, DC_motor *mR);dc_motor.c: 128: {;dc_motor.c
      +                          : 129:     stop(mL,mR);
  3663   001B9C  C01B  F016         	movff	forward@mL,stop@mL
  3664   001BA0  C01C  F017         	movff	forward@mL+1,stop@mL+1
  3665   001BA4  C01D  F018         	movff	forward@mR,stop@mR
  3666   001BA8  C01E  F019         	movff	forward@mR+1,stop@mR+1
  3667   001BAC  ECF3  F00F         	call	_stop	;wreg free
  3668   001BB0                     
  3669                           ;dc_motor.c: 130:     mL-> direction = 1;
  3670   001BB0  EE20 F001          	lfsr	2,1
  3671   001BB4  501B               	movf	forward@mL^0,w,c
  3672   001BB6  26D9               	addwf	fsr2l,f,c
  3673   001BB8  501C               	movf	(forward@mL+1)^0,w,c
  3674   001BBA  22DA               	addwfc	fsr2h,f,c
  3675   001BBC  0E01               	movlw	1
  3676   001BBE  6EDF               	movwf	indf2,c
  3677   001BC0                     
  3678                           ;dc_motor.c: 131:     mR-> direction = 1;
  3679   001BC0  EE20 F001          	lfsr	2,1
  3680   001BC4  501D               	movf	forward@mR^0,w,c
  3681   001BC6  26D9               	addwf	fsr2l,f,c
  3682   001BC8  501E               	movf	(forward@mR+1)^0,w,c
  3683   001BCA  22DA               	addwfc	fsr2h,f,c
  3684   001BCC  0E01               	movlw	1
  3685   001BCE  6EDF               	movwf	indf2,c
  3686   001BD0                     
  3687                           ;dc_motor.c: 132:     LATDbits.LATD3 = 1;
  3688   001BD0  867C               	bsf	124,3,c	;volatile
  3689                           
  3690                           ;dc_motor.c: 133:     setMotorPWM(mR);
  3691   001BD2  C01D  F010         	movff	forward@mR,setMotorPWM@m
  3692   001BD6  C01E  F011         	movff	forward@mR+1,setMotorPWM@m+1
  3693   001BDA  EC4E  F00A         	call	_setMotorPWM	;wreg free
  3694                           
  3695                           ;dc_motor.c: 134:     setMotorPWM(mL);
  3696   001BDE  C01B  F010         	movff	forward@mL,setMotorPWM@m
  3697   001BE2  C01C  F011         	movff	forward@mL+1,setMotorPWM@m+1
  3698   001BE6  EC4E  F00A         	call	_setMotorPWM	;wreg free
  3699                           
  3700                           ;dc_motor.c: 135:     while ((mL->power <= 50) || (mR->power <= 55)){
  3701   001BEA  EF29  F00E         	goto	l293
  3702   001BEE                     l2605:
  3703                           
  3704                           ;dc_motor.c: 136:         if (mL->power <= 50){mL->power += 1;}
  3705   001BEE  C01B  FFD9         	movff	forward@mL,fsr2l
  3706   001BF2  C01C  FFDA         	movff	forward@mL+1,fsr2h
  3707   001BF6  0E33               	movlw	51
  3708   001BF8  60DF               	cpfslt	indf2,c
  3709   001BFA  EF01  F00E         	goto	u1611
  3710   001BFE  EF03  F00E         	goto	u1610
  3711   001C02                     u1611:
  3712   001C02  EF08  F00E         	goto	l2609
  3713   001C06                     u1610:
  3714   001C06  C01B  FFD9         	movff	forward@mL,fsr2l
  3715   001C0A  C01C  FFDA         	movff	forward@mL+1,fsr2h
  3716   001C0E  2ADF               	incf	indf2,f,c
  3717   001C10                     l2609:
  3718                           
  3719                           ;dc_motor.c: 137:         if (mR->power <= 55){mR->power += 1;}
  3720   001C10  C01D  FFD9         	movff	forward@mR,fsr2l
  3721   001C14  C01E  FFDA         	movff	forward@mR+1,fsr2h
  3722   001C18  0E38               	movlw	56
  3723   001C1A  60DF               	cpfslt	indf2,c
  3724   001C1C  EF12  F00E         	goto	u1621
  3725   001C20  EF14  F00E         	goto	u1620
  3726   001C24                     u1621:
  3727   001C24  EF19  F00E         	goto	l2613
  3728   001C28                     u1620:
  3729   001C28  C01D  FFD9         	movff	forward@mR,fsr2l
  3730   001C2C  C01E  FFDA         	movff	forward@mR+1,fsr2h
  3731   001C30  2ADF               	incf	indf2,f,c
  3732   001C32                     l2613:
  3733                           
  3734                           ;dc_motor.c: 138:         setMotorPWM(mL);
  3735   001C32  C01B  F010         	movff	forward@mL,setMotorPWM@m
  3736   001C36  C01C  F011         	movff	forward@mL+1,setMotorPWM@m+1
  3737   001C3A  EC4E  F00A         	call	_setMotorPWM	;wreg free
  3738   001C3E                     
  3739                           ;dc_motor.c: 139:         setMotorPWM(mR);
  3740   001C3E  C01D  F010         	movff	forward@mR,setMotorPWM@m
  3741   001C42  C01E  F011         	movff	forward@mR+1,setMotorPWM@m+1
  3742   001C46  EC4E  F00A         	call	_setMotorPWM	;wreg free
  3743   001C4A                     
  3744                           ;dc_motor.c: 140:         _delay((unsigned long)((5)*(64000000/4000000.0)));
  3745   001C4A  0E1A               	movlw	26
  3746   001C4C                     u2887:
  3747   001C4C  2EE8               	decfsz	wreg,f,c
  3748   001C4E  D7FE               	bra	u2887
  3749   001C50  D000               	nop2	
  3750   001C52                     l293:
  3751                           
  3752                           ;dc_motor.c: 135:     while ((mL->power <= 50) || (mR->power <= 55)){
  3753   001C52  C01B  FFD9         	movff	forward@mL,fsr2l
  3754   001C56  C01C  FFDA         	movff	forward@mL+1,fsr2h
  3755   001C5A  0E32               	movlw	50
  3756   001C5C  64DF               	cpfsgt	indf2,c
  3757   001C5E  EF33  F00E         	goto	u1631
  3758   001C62  EF35  F00E         	goto	u1630
  3759   001C66                     u1631:
  3760   001C66  EFF7  F00D         	goto	l2605
  3761   001C6A                     u1630:
  3762   001C6A  C01D  FFD9         	movff	forward@mR,fsr2l
  3763   001C6E  C01E  FFDA         	movff	forward@mR+1,fsr2h
  3764   001C72  0E37               	movlw	55
  3765   001C74  64DF               	cpfsgt	indf2,c
  3766   001C76  EF3F  F00E         	goto	u1641
  3767   001C7A  EF41  F00E         	goto	u1640
  3768   001C7E                     u1641:
  3769   001C7E  EFF7  F00D         	goto	l2605
  3770   001C82                     u1640:
  3771   001C82                     
  3772                           ;dc_motor.c: 142:     LATDbits.LATD3 = 0;
  3773   001C82  967C               	bcf	124,3,c	;volatile
  3774   001C84  0012               	return		;funcret
  3775   001C86                     __end_of_forward:
  3776                           	callstack 0
  3777                           
  3778 ;; *************** function _delay_ms_func *****************
  3779 ;; Defined at:
  3780 ;;		line 289 in file "color.c"
  3781 ;; Parameters:    Size  Location     Type
  3782 ;;  time            2    2[COMRAM] unsigned int 
  3783 ;; Auto vars:     Size  Location     Type
  3784 ;;  i               2    6[COMRAM] unsigned int 
  3785 ;; Return value:  Size  Location     Type
  3786 ;;                  1    wreg      void 
  3787 ;; Registers used:
  3788 ;;		wreg, status,2, status,0
  3789 ;; Tracked objects:
  3790 ;;		On entry : 0/0
  3791 ;;		On exit  : 0/0
  3792 ;;		Unchanged: 0/0
  3793 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3794 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3795 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3796 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3797 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3798 ;;Total ram usage:        6 bytes
  3799 ;; Hardware stack levels used: 1
  3800 ;; Hardware stack levels required when called: 1
  3801 ;; This function calls:
  3802 ;;		Nothing
  3803 ;; This function is called by:
  3804 ;;		_return_home
  3805 ;; This function uses a non-reentrant model
  3806 ;;
  3807                           
  3808                           	psect	text20
  3809   0022C2                     __ptext20:
  3810                           	callstack 0
  3811   0022C2                     _delay_ms_func:
  3812                           	callstack 27
  3813   0022C2                     
  3814                           ;color.c: 290:     unsigned int i;;color.c: 291:     for (i=0; i < time; i++) {_delay((u
      +                          nsigned long)((131)*(64000000/4000.0)));}
  3815   0022C2  0E00               	movlw	0
  3816   0022C4  6E08               	movwf	(delay_ms_func@i+1)^0,c
  3817   0022C6  0E00               	movlw	0
  3818   0022C8  6E07               	movwf	delay_ms_func@i^0,c
  3819   0022CA  EF75  F011         	goto	l163
  3820   0022CE                     l2679:
  3821   0022CE  0E0B               	movlw	11
  3822   0022D0  6E06               	movwf	(??_delay_ms_func+1)^0,c
  3823   0022D2  0EA3               	movlw	163
  3824   0022D4  6E05               	movwf	??_delay_ms_func^0,c
  3825   0022D6  0E0A               	movlw	10
  3826   0022D8                     u2897:
  3827   0022D8  2EE8               	decfsz	wreg,f,c
  3828   0022DA  D7FE               	bra	u2897
  3829   0022DC  2E05               	decfsz	??_delay_ms_func^0,f,c
  3830   0022DE  D7FC               	bra	u2897
  3831   0022E0  2E06               	decfsz	(??_delay_ms_func+1)^0,f,c
  3832   0022E2  D7FA               	bra	u2897
  3833   0022E4  D000               	nop2	
  3834   0022E6  4A07               	infsnz	delay_ms_func@i^0,f,c
  3835   0022E8  2A08               	incf	(delay_ms_func@i+1)^0,f,c
  3836   0022EA                     l163:
  3837   0022EA  5003               	movf	delay_ms_func@time^0,w,c
  3838   0022EC  5C07               	subwf	delay_ms_func@i^0,w,c
  3839   0022EE  5004               	movf	(delay_ms_func@time+1)^0,w,c
  3840   0022F0  5808               	subwfb	(delay_ms_func@i+1)^0,w,c
  3841   0022F2  A0D8               	btfss	status,0,c
  3842   0022F4  EF7E  F011         	goto	u1741
  3843   0022F8  EF80  F011         	goto	u1740
  3844   0022FC                     u1741:
  3845   0022FC  EF67  F011         	goto	l2679
  3846   002300                     u1740:
  3847   002300  0012               	return		;funcret
  3848   002302                     __end_of_delay_ms_func:
  3849                           	callstack 0
  3850                           
  3851 ;; *************** function _movement *****************
  3852 ;; Defined at:
  3853 ;;		line 302 in file "dc_motor.c"
  3854 ;; Parameters:    Size  Location     Type
  3855 ;;  mL              2   36[COMRAM] PTR struct DC_motor
  3856 ;;		 -> motorL(9), 
  3857 ;;  mR              2   38[COMRAM] PTR struct DC_motor
  3858 ;;		 -> motorR(9), 
  3859 ;;  count           1   40[COMRAM] unsigned char 
  3860 ;; Auto vars:     Size  Location     Type
  3861 ;;		None
  3862 ;; Return value:  Size  Location     Type
  3863 ;;                  1    wreg      void 
  3864 ;; Registers used:
  3865 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3866 ;; Tracked objects:
  3867 ;;		On entry : 0/0
  3868 ;;		On exit  : 0/0
  3869 ;;		Unchanged: 0/0
  3870 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3871 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3872 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3873 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3874 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3875 ;;Total ram usage:        7 bytes
  3876 ;; Hardware stack levels used: 1
  3877 ;; Hardware stack levels required when called: 5
  3878 ;; This function calls:
  3879 ;;		_custom_delay
  3880 ;;		_left_45
  3881 ;;		_reverse
  3882 ;;		_right_45
  3883 ;;		_space
  3884 ;;		_stop
  3885 ;; This function is called by:
  3886 ;;		_buggy_color_response
  3887 ;; This function uses a non-reentrant model
  3888 ;;
  3889                           
  3890                           	psect	text21
  3891   000CEE                     __ptext21:
  3892                           	callstack 0
  3893   000CEE                     _movement:
  3894                           	callstack 24
  3895   000CEE                     
  3896                           ;dc_motor.c: 302: void movement(DC_motor *mL, DC_motor *mR, char count);dc_motor.c: 303:
      +                           {;dc_motor.c: 304:     space(mL,mR);
  3897   000CEE  C025  F01B         	movff	movement@mL,space@mL
  3898   000CF2  C026  F01C         	movff	movement@mL+1,space@mL+1
  3899   000CF6  C027  F01D         	movff	movement@mR,space@mR
  3900   000CFA  C028  F01E         	movff	movement@mR+1,space@mR+1
  3901   000CFE  EC4D  F00D         	call	_space	;wreg free
  3902   000D02                     
  3903                           ;dc_motor.c: 305:     _delay((unsigned long)((500)*(64000000/4000.0)));
  3904   000D02  0E29               	movlw	41
  3905   000D04  6E2B               	movwf	(??_movement+1)^0,c
  3906   000D06  0E96               	movlw	150
  3907   000D08  6E2A               	movwf	??_movement^0,c
  3908   000D0A  0E7F               	movlw	127
  3909   000D0C                     u2907:
  3910   000D0C  2EE8               	decfsz	wreg,f,c
  3911   000D0E  D7FE               	bra	u2907
  3912   000D10  2E2A               	decfsz	??_movement^0,f,c
  3913   000D12  D7FC               	bra	u2907
  3914   000D14  2E2B               	decfsz	(??_movement+1)^0,f,c
  3915   000D16  D7FA               	bra	u2907
  3916   000D18  F000               	nop	
  3917   000D1A                     
  3918                           ;dc_motor.c: 306:     stop(mL,mR);
  3919   000D1A  C025  F016         	movff	movement@mL,stop@mL
  3920   000D1E  C026  F017         	movff	movement@mL+1,stop@mL+1
  3921   000D22  C027  F018         	movff	movement@mR,stop@mR
  3922   000D26  C028  F019         	movff	movement@mR+1,stop@mR+1
  3923   000D2A  ECF3  F00F         	call	_stop	;wreg free
  3924                           
  3925                           ;dc_motor.c: 307:     _delay((unsigned long)((500)*(64000000/4000.0)));
  3926   000D2E  0E29               	movlw	41
  3927   000D30  6E2B               	movwf	(??_movement+1)^0,c
  3928   000D32  0E96               	movlw	150
  3929   000D34  6E2A               	movwf	??_movement^0,c
  3930   000D36  0E7F               	movlw	127
  3931   000D38                     u2917:
  3932   000D38  2EE8               	decfsz	wreg,f,c
  3933   000D3A  D7FE               	bra	u2917
  3934   000D3C  2E2A               	decfsz	??_movement^0,f,c
  3935   000D3E  D7FC               	bra	u2917
  3936   000D40  2E2B               	decfsz	(??_movement+1)^0,f,c
  3937   000D42  D7FA               	bra	u2917
  3938   000D44  F000               	nop	
  3939   000D46                     
  3940                           ;dc_motor.c: 309:     if (count == 1){right_45(mL,mR,2,right_timer); stop(mL,mR);}
  3941   000D46  0429               	decf	movement@count^0,w,c
  3942   000D48  A4D8               	btfss	status,2,c
  3943   000D4A  EFA9  F006         	goto	u2081
  3944   000D4E  EFAB  F006         	goto	u2080
  3945   000D52                     u2081:
  3946   000D52  EFC5  F006         	goto	l2889
  3947   000D56                     u2080:
  3948   000D56  C025  F01B         	movff	movement@mL,right_45@mL
  3949   000D5A  C026  F01C         	movff	movement@mL+1,right_45@mL+1
  3950   000D5E  C027  F01D         	movff	movement@mR,right_45@mR
  3951   000D62  C028  F01E         	movff	movement@mR+1,right_45@mR+1
  3952   000D66  0E02               	movlw	2
  3953   000D68  6E1F               	movwf	right_45@count^0,c
  3954   000D6A  C058  F020         	movff	_right_timer,right_45@right_timer
  3955   000D6E  C059  F021         	movff	_right_timer+1,right_45@right_timer+1
  3956   000D72  ECA1  F00B         	call	_right_45	;wreg free
  3957   000D76  C025  F016         	movff	movement@mL,stop@mL
  3958   000D7A  C026  F017         	movff	movement@mL+1,stop@mL+1
  3959   000D7E  C027  F018         	movff	movement@mR,stop@mR
  3960   000D82  C028  F019         	movff	movement@mR+1,stop@mR+1
  3961   000D86  ECF3  F00F         	call	_stop	;wreg free
  3962   000D8A                     l2889:
  3963                           
  3964                           ;dc_motor.c: 310:     if (count == 2){left_45(mL,mR,2,left_timer); stop(mL,mR);}
  3965   000D8A  0E02               	movlw	2
  3966   000D8C  1829               	xorwf	movement@count^0,w,c
  3967   000D8E  A4D8               	btfss	status,2,c
  3968   000D90  EFCC  F006         	goto	u2091
  3969   000D94  EFCE  F006         	goto	u2090
  3970   000D98                     u2091:
  3971   000D98  EFE8  F006         	goto	l2893
  3972   000D9C                     u2090:
  3973   000D9C  C025  F01B         	movff	movement@mL,left_45@mL
  3974   000DA0  C026  F01C         	movff	movement@mL+1,left_45@mL+1
  3975   000DA4  C027  F01D         	movff	movement@mR,left_45@mR
  3976   000DA8  C028  F01E         	movff	movement@mR+1,left_45@mR+1
  3977   000DAC  0E02               	movlw	2
  3978   000DAE  6E1F               	movwf	left_45@count^0,c
  3979   000DB0  C05A  F020         	movff	_left_timer,left_45@left_timer
  3980   000DB4  C05B  F021         	movff	_left_timer+1,left_45@left_timer+1
  3981   000DB8  EC36  F00C         	call	_left_45	;wreg free
  3982   000DBC  C025  F016         	movff	movement@mL,stop@mL
  3983   000DC0  C026  F017         	movff	movement@mL+1,stop@mL+1
  3984   000DC4  C027  F018         	movff	movement@mR,stop@mR
  3985   000DC8  C028  F019         	movff	movement@mR+1,stop@mR+1
  3986   000DCC  ECF3  F00F         	call	_stop	;wreg free
  3987   000DD0                     l2893:
  3988                           
  3989                           ;dc_motor.c: 311:     if (count == 3){right_45(mL,mR,4,right_timer); stop(mL,mR);}
  3990   000DD0  0E03               	movlw	3
  3991   000DD2  1829               	xorwf	movement@count^0,w,c
  3992   000DD4  A4D8               	btfss	status,2,c
  3993   000DD6  EFEF  F006         	goto	u2101
  3994   000DDA  EFF1  F006         	goto	u2100
  3995   000DDE                     u2101:
  3996   000DDE  EF0B  F007         	goto	l2897
  3997   000DE2                     u2100:
  3998   000DE2  C025  F01B         	movff	movement@mL,right_45@mL
  3999   000DE6  C026  F01C         	movff	movement@mL+1,right_45@mL+1
  4000   000DEA  C027  F01D         	movff	movement@mR,right_45@mR
  4001   000DEE  C028  F01E         	movff	movement@mR+1,right_45@mR+1
  4002   000DF2  0E04               	movlw	4
  4003   000DF4  6E1F               	movwf	right_45@count^0,c
  4004   000DF6  C058  F020         	movff	_right_timer,right_45@right_timer
  4005   000DFA  C059  F021         	movff	_right_timer+1,right_45@right_timer+1
  4006   000DFE  ECA1  F00B         	call	_right_45	;wreg free
  4007   000E02  C025  F016         	movff	movement@mL,stop@mL
  4008   000E06  C026  F017         	movff	movement@mL+1,stop@mL+1
  4009   000E0A  C027  F018         	movff	movement@mR,stop@mR
  4010   000E0E  C028  F019         	movff	movement@mR+1,stop@mR+1
  4011   000E12  ECF3  F00F         	call	_stop	;wreg free
  4012   000E16                     l2897:
  4013                           
  4014                           ;dc_motor.c: 312:     if (count == 4){reverse(mL,mR); custom_delay(square_timer);stop(mL
      +                          ,mR);_delay((unsigned long)((500)*(64000000/4000.0)));right_45(mL,mR,2,right_timer); sto
      +                          p(mL,mR);}
  4015   000E16  0E04               	movlw	4
  4016   000E18  1829               	xorwf	movement@count^0,w,c
  4017   000E1A  A4D8               	btfss	status,2,c
  4018   000E1C  EF12  F007         	goto	u2111
  4019   000E20  EF14  F007         	goto	u2110
  4020   000E24                     u2111:
  4021   000E24  EF54  F007         	goto	l2911
  4022   000E28                     u2110:
  4023   000E28  C025  F01B         	movff	movement@mL,reverse@mL
  4024   000E2C  C026  F01C         	movff	movement@mL+1,reverse@mL+1
  4025   000E30  C027  F01D         	movff	movement@mR,reverse@mR
  4026   000E34  C028  F01E         	movff	movement@mR+1,reverse@mR+1
  4027   000E38  EC43  F00E         	call	_reverse	;wreg free
  4028   000E3C  0E03               	movlw	3
  4029   000E3E  6E04               	movwf	(custom_delay@temp+1)^0,c
  4030   000E40  0E84               	movlw	132
  4031   000E42  6E03               	movwf	custom_delay@temp^0,c
  4032   000E44  EC81  F011         	call	_custom_delay	;wreg free
  4033   000E48  C025  F016         	movff	movement@mL,stop@mL
  4034   000E4C  C026  F017         	movff	movement@mL+1,stop@mL+1
  4035   000E50  C027  F018         	movff	movement@mR,stop@mR
  4036   000E54  C028  F019         	movff	movement@mR+1,stop@mR+1
  4037   000E58  ECF3  F00F         	call	_stop	;wreg free
  4038   000E5C  0E29               	movlw	41
  4039   000E5E  6E2B               	movwf	(??_movement+1)^0,c
  4040   000E60  0E96               	movlw	150
  4041   000E62  6E2A               	movwf	??_movement^0,c
  4042   000E64  0E7F               	movlw	127
  4043   000E66                     u2927:
  4044   000E66  2EE8               	decfsz	wreg,f,c
  4045   000E68  D7FE               	bra	u2927
  4046   000E6A  2E2A               	decfsz	??_movement^0,f,c
  4047   000E6C  D7FC               	bra	u2927
  4048   000E6E  2E2B               	decfsz	(??_movement+1)^0,f,c
  4049   000E70  D7FA               	bra	u2927
  4050   000E72  F000               	nop	
  4051   000E74  C025  F01B         	movff	movement@mL,right_45@mL
  4052   000E78  C026  F01C         	movff	movement@mL+1,right_45@mL+1
  4053   000E7C  C027  F01D         	movff	movement@mR,right_45@mR
  4054   000E80  C028  F01E         	movff	movement@mR+1,right_45@mR+1
  4055   000E84  0E02               	movlw	2
  4056   000E86  6E1F               	movwf	right_45@count^0,c
  4057   000E88  C058  F020         	movff	_right_timer,right_45@right_timer
  4058   000E8C  C059  F021         	movff	_right_timer+1,right_45@right_timer+1
  4059   000E90  ECA1  F00B         	call	_right_45	;wreg free
  4060   000E94  C025  F016         	movff	movement@mL,stop@mL
  4061   000E98  C026  F017         	movff	movement@mL+1,stop@mL+1
  4062   000E9C  C027  F018         	movff	movement@mR,stop@mR
  4063   000EA0  C028  F019         	movff	movement@mR+1,stop@mR+1
  4064   000EA4  ECF3  F00F         	call	_stop	;wreg free
  4065   000EA8                     l2911:
  4066                           
  4067                           ;dc_motor.c: 313:     if (count == 5){reverse(mL,mR); custom_delay(square_timer);stop(mL
      +                          ,mR);_delay((unsigned long)((500)*(64000000/4000.0)));left_45(mL,mR,2,left_timer); stop(
      +                          mL,mR);}
  4068   000EA8  0E05               	movlw	5
  4069   000EAA  1829               	xorwf	movement@count^0,w,c
  4070   000EAC  A4D8               	btfss	status,2,c
  4071   000EAE  EF5B  F007         	goto	u2121
  4072   000EB2  EF5D  F007         	goto	u2120
  4073   000EB6                     u2121:
  4074   000EB6  EF9D  F007         	goto	l2925
  4075   000EBA                     u2120:
  4076   000EBA  C025  F01B         	movff	movement@mL,reverse@mL
  4077   000EBE  C026  F01C         	movff	movement@mL+1,reverse@mL+1
  4078   000EC2  C027  F01D         	movff	movement@mR,reverse@mR
  4079   000EC6  C028  F01E         	movff	movement@mR+1,reverse@mR+1
  4080   000ECA  EC43  F00E         	call	_reverse	;wreg free
  4081   000ECE  0E03               	movlw	3
  4082   000ED0  6E04               	movwf	(custom_delay@temp+1)^0,c
  4083   000ED2  0E84               	movlw	132
  4084   000ED4  6E03               	movwf	custom_delay@temp^0,c
  4085   000ED6  EC81  F011         	call	_custom_delay	;wreg free
  4086   000EDA  C025  F016         	movff	movement@mL,stop@mL
  4087   000EDE  C026  F017         	movff	movement@mL+1,stop@mL+1
  4088   000EE2  C027  F018         	movff	movement@mR,stop@mR
  4089   000EE6  C028  F019         	movff	movement@mR+1,stop@mR+1
  4090   000EEA  ECF3  F00F         	call	_stop	;wreg free
  4091   000EEE  0E29               	movlw	41
  4092   000EF0  6E2B               	movwf	(??_movement+1)^0,c
  4093   000EF2  0E96               	movlw	150
  4094   000EF4  6E2A               	movwf	??_movement^0,c
  4095   000EF6  0E7F               	movlw	127
  4096   000EF8                     u2937:
  4097   000EF8  2EE8               	decfsz	wreg,f,c
  4098   000EFA  D7FE               	bra	u2937
  4099   000EFC  2E2A               	decfsz	??_movement^0,f,c
  4100   000EFE  D7FC               	bra	u2937
  4101   000F00  2E2B               	decfsz	(??_movement+1)^0,f,c
  4102   000F02  D7FA               	bra	u2937
  4103   000F04  F000               	nop	
  4104   000F06  C025  F01B         	movff	movement@mL,left_45@mL
  4105   000F0A  C026  F01C         	movff	movement@mL+1,left_45@mL+1
  4106   000F0E  C027  F01D         	movff	movement@mR,left_45@mR
  4107   000F12  C028  F01E         	movff	movement@mR+1,left_45@mR+1
  4108   000F16  0E02               	movlw	2
  4109   000F18  6E1F               	movwf	left_45@count^0,c
  4110   000F1A  C05A  F020         	movff	_left_timer,left_45@left_timer
  4111   000F1E  C05B  F021         	movff	_left_timer+1,left_45@left_timer+1
  4112   000F22  EC36  F00C         	call	_left_45	;wreg free
  4113   000F26  C025  F016         	movff	movement@mL,stop@mL
  4114   000F2A  C026  F017         	movff	movement@mL+1,stop@mL+1
  4115   000F2E  C027  F018         	movff	movement@mR,stop@mR
  4116   000F32  C028  F019         	movff	movement@mR+1,stop@mR+1
  4117   000F36  ECF3  F00F         	call	_stop	;wreg free
  4118   000F3A                     l2925:
  4119                           
  4120                           ;dc_motor.c: 314:     if (count == 6){right_45(mL,mR,3,right_timer); stop(mL,mR);}
  4121   000F3A  0E06               	movlw	6
  4122   000F3C  1829               	xorwf	movement@count^0,w,c
  4123   000F3E  A4D8               	btfss	status,2,c
  4124   000F40  EFA4  F007         	goto	u2131
  4125   000F44  EFA6  F007         	goto	u2130
  4126   000F48                     u2131:
  4127   000F48  EFC0  F007         	goto	l2929
  4128   000F4C                     u2130:
  4129   000F4C  C025  F01B         	movff	movement@mL,right_45@mL
  4130   000F50  C026  F01C         	movff	movement@mL+1,right_45@mL+1
  4131   000F54  C027  F01D         	movff	movement@mR,right_45@mR
  4132   000F58  C028  F01E         	movff	movement@mR+1,right_45@mR+1
  4133   000F5C  0E03               	movlw	3
  4134   000F5E  6E1F               	movwf	right_45@count^0,c
  4135   000F60  C058  F020         	movff	_right_timer,right_45@right_timer
  4136   000F64  C059  F021         	movff	_right_timer+1,right_45@right_timer+1
  4137   000F68  ECA1  F00B         	call	_right_45	;wreg free
  4138   000F6C  C025  F016         	movff	movement@mL,stop@mL
  4139   000F70  C026  F017         	movff	movement@mL+1,stop@mL+1
  4140   000F74  C027  F018         	movff	movement@mR,stop@mR
  4141   000F78  C028  F019         	movff	movement@mR+1,stop@mR+1
  4142   000F7C  ECF3  F00F         	call	_stop	;wreg free
  4143   000F80                     l2929:
  4144                           
  4145                           ;dc_motor.c: 315:     if (count == 7){left_45(mL,mR,3,left_timer); stop(mL,mR);}
  4146   000F80  0E07               	movlw	7
  4147   000F82  1829               	xorwf	movement@count^0,w,c
  4148   000F84  A4D8               	btfss	status,2,c
  4149   000F86  EFC7  F007         	goto	u2141
  4150   000F8A  EFC9  F007         	goto	u2140
  4151   000F8E                     u2141:
  4152   000F8E  EFE3  F007         	goto	l357
  4153   000F92                     u2140:
  4154   000F92  C025  F01B         	movff	movement@mL,left_45@mL
  4155   000F96  C026  F01C         	movff	movement@mL+1,left_45@mL+1
  4156   000F9A  C027  F01D         	movff	movement@mR,left_45@mR
  4157   000F9E  C028  F01E         	movff	movement@mR+1,left_45@mR+1
  4158   000FA2  0E03               	movlw	3
  4159   000FA4  6E1F               	movwf	left_45@count^0,c
  4160   000FA6  C05A  F020         	movff	_left_timer,left_45@left_timer
  4161   000FAA  C05B  F021         	movff	_left_timer+1,left_45@left_timer+1
  4162   000FAE  EC36  F00C         	call	_left_45	;wreg free
  4163   000FB2  C025  F016         	movff	movement@mL,stop@mL
  4164   000FB6  C026  F017         	movff	movement@mL+1,stop@mL+1
  4165   000FBA  C027  F018         	movff	movement@mR,stop@mR
  4166   000FBE  C028  F019         	movff	movement@mR+1,stop@mR+1
  4167   000FC2  ECF3  F00F         	call	_stop	;wreg free
  4168   000FC6                     l357:
  4169   000FC6  0012               	return		;funcret
  4170   000FC8                     __end_of_movement:
  4171                           	callstack 0
  4172                           
  4173 ;; *************** function _space *****************
  4174 ;; Defined at:
  4175 ;;		line 247 in file "dc_motor.c"
  4176 ;; Parameters:    Size  Location     Type
  4177 ;;  mL              2   26[COMRAM] PTR struct DC_motor
  4178 ;;		 -> motorL(9), 
  4179 ;;  mR              2   28[COMRAM] PTR struct DC_motor
  4180 ;;		 -> motorR(9), 
  4181 ;; Auto vars:     Size  Location     Type
  4182 ;;		None
  4183 ;; Return value:  Size  Location     Type
  4184 ;;                  1    wreg      void 
  4185 ;; Registers used:
  4186 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4187 ;; Tracked objects:
  4188 ;;		On entry : 0/0
  4189 ;;		On exit  : 0/0
  4190 ;;		Unchanged: 0/0
  4191 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4192 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4193 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4194 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4195 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4196 ;;Total ram usage:        6 bytes
  4197 ;; Hardware stack levels used: 1
  4198 ;; Hardware stack levels required when called: 4
  4199 ;; This function calls:
  4200 ;;		_setMotorPWM
  4201 ;;		_stop
  4202 ;; This function is called by:
  4203 ;;		_buggy_color_response
  4204 ;;		_movement
  4205 ;; This function uses a non-reentrant model
  4206 ;;
  4207                           
  4208                           	psect	text22
  4209   001A9A                     __ptext22:
  4210                           	callstack 0
  4211   001A9A                     _space:
  4212                           	callstack 25
  4213   001A9A                     
  4214                           ;dc_motor.c: 247: void space(DC_motor *mL, DC_motor *mR);dc_motor.c: 248: {;dc_motor.c: 
      +                          249:     stop(mL,mR);
  4215   001A9A  C01B  F016         	movff	space@mL,stop@mL
  4216   001A9E  C01C  F017         	movff	space@mL+1,stop@mL+1
  4217   001AA2  C01D  F018         	movff	space@mR,stop@mR
  4218   001AA6  C01E  F019         	movff	space@mR+1,stop@mR+1
  4219   001AAA  ECF3  F00F         	call	_stop	;wreg free
  4220   001AAE                     
  4221                           ;dc_motor.c: 250:     LATHbits.LATH1 = 1;
  4222   001AAE  8280               	bsf	128,1,c	;volatile
  4223   001AB0                     
  4224                           ;dc_motor.c: 251:     mL-> direction = 0;
  4225   001AB0  EE20 F001          	lfsr	2,1
  4226   001AB4  501B               	movf	space@mL^0,w,c
  4227   001AB6  26D9               	addwf	fsr2l,f,c
  4228   001AB8  501C               	movf	(space@mL+1)^0,w,c
  4229   001ABA  22DA               	addwfc	fsr2h,f,c
  4230   001ABC  0E00               	movlw	0
  4231   001ABE  6EDF               	movwf	indf2,c
  4232   001AC0                     
  4233                           ;dc_motor.c: 252:     mR-> direction = 0;
  4234   001AC0  EE20 F001          	lfsr	2,1
  4235   001AC4  501D               	movf	space@mR^0,w,c
  4236   001AC6  26D9               	addwf	fsr2l,f,c
  4237   001AC8  501E               	movf	(space@mR+1)^0,w,c
  4238   001ACA  22DA               	addwfc	fsr2h,f,c
  4239   001ACC  0E00               	movlw	0
  4240   001ACE  6EDF               	movwf	indf2,c
  4241                           
  4242                           ;dc_motor.c: 253:     setMotorPWM(mR);
  4243   001AD0  C01D  F010         	movff	space@mR,setMotorPWM@m
  4244   001AD4  C01E  F011         	movff	space@mR+1,setMotorPWM@m+1
  4245   001AD8  EC4E  F00A         	call	_setMotorPWM	;wreg free
  4246                           
  4247                           ;dc_motor.c: 254:     setMotorPWM(mL);
  4248   001ADC  C01B  F010         	movff	space@mL,setMotorPWM@m
  4249   001AE0  C01C  F011         	movff	space@mL+1,setMotorPWM@m+1
  4250   001AE4  EC4E  F00A         	call	_setMotorPWM	;wreg free
  4251                           
  4252                           ;dc_motor.c: 255:     while ((mL->power <30) && (mR->power <30)){
  4253   001AE8  EF92  F00D         	goto	l2637
  4254   001AEC                     l2629:
  4255                           
  4256                           ;dc_motor.c: 256:         mL->power += 10;
  4257   001AEC  C01B  FFD9         	movff	space@mL,fsr2l
  4258   001AF0  C01C  FFDA         	movff	space@mL+1,fsr2h
  4259   001AF4  0E0A               	movlw	10
  4260   001AF6  26DF               	addwf	indf2,f,c
  4261                           
  4262                           ;dc_motor.c: 257:         mR->power += 10;
  4263   001AF8  C01D  FFD9         	movff	space@mR,fsr2l
  4264   001AFC  C01E  FFDA         	movff	space@mR+1,fsr2h
  4265   001B00  0E0A               	movlw	10
  4266   001B02  26DF               	addwf	indf2,f,c
  4267   001B04                     
  4268                           ;dc_motor.c: 258:         setMotorPWM(mL);
  4269   001B04  C01B  F010         	movff	space@mL,setMotorPWM@m
  4270   001B08  C01C  F011         	movff	space@mL+1,setMotorPWM@m+1
  4271   001B0C  EC4E  F00A         	call	_setMotorPWM	;wreg free
  4272   001B10                     
  4273                           ;dc_motor.c: 259:         setMotorPWM(mR);
  4274   001B10  C01D  F010         	movff	space@mR,setMotorPWM@m
  4275   001B14  C01E  F011         	movff	space@mR+1,setMotorPWM@m+1
  4276   001B18  EC4E  F00A         	call	_setMotorPWM	;wreg free
  4277   001B1C                     
  4278                           ;dc_motor.c: 260:         _delay((unsigned long)((20)*(64000000/4000000.0)));
  4279   001B1C  0E6A               	movlw	106
  4280   001B1E                     u2947:
  4281   001B1E  2EE8               	decfsz	wreg,f,c
  4282   001B20  D7FE               	bra	u2947
  4283   001B22  D000               	nop2	
  4284   001B24                     l2637:
  4285                           
  4286                           ;dc_motor.c: 255:     while ((mL->power <30) && (mR->power <30)){
  4287   001B24  C01B  FFD9         	movff	space@mL,fsr2l
  4288   001B28  C01C  FFDA         	movff	space@mL+1,fsr2h
  4289   001B2C  0E1E               	movlw	30
  4290   001B2E  60DF               	cpfslt	indf2,c
  4291   001B30  EF9C  F00D         	goto	u1651
  4292   001B34  EF9E  F00D         	goto	u1650
  4293   001B38                     u1651:
  4294   001B38  EFAA  F00D         	goto	l2641
  4295   001B3C                     u1650:
  4296   001B3C  C01D  FFD9         	movff	space@mR,fsr2l
  4297   001B40  C01E  FFDA         	movff	space@mR+1,fsr2h
  4298   001B44  0E1D               	movlw	29
  4299   001B46  64DF               	cpfsgt	indf2,c
  4300   001B48  EFA8  F00D         	goto	u1661
  4301   001B4C  EFAA  F00D         	goto	u1660
  4302   001B50                     u1661:
  4303   001B50  EF76  F00D         	goto	l2629
  4304   001B54                     u1660:
  4305   001B54                     l2641:
  4306                           
  4307                           ;dc_motor.c: 262:     _delay((unsigned long)((350)*(64000000/4000.0)));
  4308   001B54  0E1D               	movlw	29
  4309   001B56  6E20               	movwf	(??_space+1)^0,c
  4310   001B58  0E69               	movlw	105
  4311   001B5A  6E1F               	movwf	??_space^0,c
  4312   001B5C  0EA5               	movlw	165
  4313   001B5E                     u2957:
  4314   001B5E  2EE8               	decfsz	wreg,f,c
  4315   001B60  D7FE               	bra	u2957
  4316   001B62  2E1F               	decfsz	??_space^0,f,c
  4317   001B64  D7FC               	bra	u2957
  4318   001B66  2E20               	decfsz	(??_space+1)^0,f,c
  4319   001B68  D7FA               	bra	u2957
  4320   001B6A  F000               	nop	
  4321   001B6C                     
  4322                           ;dc_motor.c: 263:     stop(mL,mR);
  4323   001B6C  C01B  F016         	movff	space@mL,stop@mL
  4324   001B70  C01C  F017         	movff	space@mL+1,stop@mL+1
  4325   001B74  C01D  F018         	movff	space@mR,stop@mR
  4326   001B78  C01E  F019         	movff	space@mR+1,stop@mR+1
  4327   001B7C  ECF3  F00F         	call	_stop	;wreg free
  4328   001B80                     
  4329                           ;dc_motor.c: 264:     _delay((unsigned long)((200)*(64000000/4000.0)));
  4330   001B80  0E11               	movlw	17
  4331   001B82  6E20               	movwf	(??_space+1)^0,c
  4332   001B84  0E3C               	movlw	60
  4333   001B86  6E1F               	movwf	??_space^0,c
  4334   001B88  0ECB               	movlw	203
  4335   001B8A                     u2967:
  4336   001B8A  2EE8               	decfsz	wreg,f,c
  4337   001B8C  D7FE               	bra	u2967
  4338   001B8E  2E1F               	decfsz	??_space^0,f,c
  4339   001B90  D7FC               	bra	u2967
  4340   001B92  2E20               	decfsz	(??_space+1)^0,f,c
  4341   001B94  D7FA               	bra	u2967
  4342   001B96  F000               	nop	
  4343   001B98                     
  4344                           ;dc_motor.c: 265:     LATHbits.LATH1 = 0;
  4345   001B98  9280               	bcf	128,1,c	;volatile
  4346   001B9A  0012               	return		;funcret
  4347   001B9C                     __end_of_space:
  4348                           	callstack 0
  4349                           
  4350 ;; *************** function _right_45 *****************
  4351 ;; Defined at:
  4352 ;;		line 222 in file "dc_motor.c"
  4353 ;; Parameters:    Size  Location     Type
  4354 ;;  mL              2   26[COMRAM] PTR struct DC_motor
  4355 ;;		 -> motorL(9), 
  4356 ;;  mR              2   28[COMRAM] PTR struct DC_motor
  4357 ;;		 -> motorR(9), 
  4358 ;;  count           1   30[COMRAM] unsigned char 
  4359 ;;  right_timer     2   31[COMRAM] int 
  4360 ;; Auto vars:     Size  Location     Type
  4361 ;;  i               1   35[COMRAM] unsigned char 
  4362 ;; Return value:  Size  Location     Type
  4363 ;;                  1    wreg      void 
  4364 ;; Registers used:
  4365 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4366 ;; Tracked objects:
  4367 ;;		On entry : 0/0
  4368 ;;		On exit  : 0/0
  4369 ;;		Unchanged: 0/0
  4370 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4371 ;;      Params:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4372 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4373 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4374 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4375 ;;Total ram usage:       10 bytes
  4376 ;; Hardware stack levels used: 1
  4377 ;; Hardware stack levels required when called: 4
  4378 ;; This function calls:
  4379 ;;		_custom_delay
  4380 ;;		_setMotorPWM
  4381 ;;		_stop
  4382 ;; This function is called by:
  4383 ;;		_reverse_pink
  4384 ;;		_movement
  4385 ;;		_movement_return
  4386 ;;		_right_turn_calibration
  4387 ;; This function uses a non-reentrant model
  4388 ;;
  4389                           
  4390                           	psect	text23
  4391   001742                     __ptext23:
  4392                           	callstack 0
  4393   001742                     _right_45:
  4394                           	callstack 23
  4395   001742                     
  4396                           ;dc_motor.c: 222: void right_45(DC_motor *mL, DC_motor *mR, char count, int right_timer)
      +                          ;dc_motor.c: 223: {;dc_motor.c: 224:     stop(mL,mR);
  4397   001742  C01B  F016         	movff	right_45@mL,stop@mL
  4398   001746  C01C  F017         	movff	right_45@mL+1,stop@mL+1
  4399   00174A  C01D  F018         	movff	right_45@mR,stop@mR
  4400   00174E  C01E  F019         	movff	right_45@mR+1,stop@mR+1
  4401   001752  ECF3  F00F         	call	_stop	;wreg free
  4402   001756                     
  4403                           ;dc_motor.c: 225:     mL-> direction = 1;
  4404   001756  EE20 F001          	lfsr	2,1
  4405   00175A  501B               	movf	right_45@mL^0,w,c
  4406   00175C  26D9               	addwf	fsr2l,f,c
  4407   00175E  501C               	movf	(right_45@mL+1)^0,w,c
  4408   001760  22DA               	addwfc	fsr2h,f,c
  4409   001762  0E01               	movlw	1
  4410   001764  6EDF               	movwf	indf2,c
  4411   001766                     
  4412                           ;dc_motor.c: 226:     mR-> direction = 0;
  4413   001766  EE20 F001          	lfsr	2,1
  4414   00176A  501D               	movf	right_45@mR^0,w,c
  4415   00176C  26D9               	addwf	fsr2l,f,c
  4416   00176E  501E               	movf	(right_45@mR+1)^0,w,c
  4417   001770  22DA               	addwfc	fsr2h,f,c
  4418   001772  0E00               	movlw	0
  4419   001774  6EDF               	movwf	indf2,c
  4420   001776                     
  4421                           ;dc_motor.c: 227:     LATHbits.LATH0 = 1;
  4422   001776  8080               	bsf	128,0,c	;volatile
  4423   001778                     
  4424                           ;dc_motor.c: 228:     char i;;dc_motor.c: 229:     for (i = 0;i<count;i++){
  4425   001778  0E00               	movlw	0
  4426   00177A  6E24               	movwf	right_45@i^0,c
  4427   00177C  EF2C  F00C         	goto	l2507
  4428   001780                     l2479:
  4429                           
  4430                           ;dc_motor.c: 231:         if (mL->power <= 50){mL->power += 10;}
  4431   001780  C01B  FFD9         	movff	right_45@mL,fsr2l
  4432   001784  C01C  FFDA         	movff	right_45@mL+1,fsr2h
  4433   001788  0E33               	movlw	51
  4434   00178A  60DF               	cpfslt	indf2,c
  4435   00178C  EFCA  F00B         	goto	u1541
  4436   001790  EFCC  F00B         	goto	u1540
  4437   001794                     u1541:
  4438   001794  EFD2  F00B         	goto	l2483
  4439   001798                     u1540:
  4440   001798  C01B  FFD9         	movff	right_45@mL,fsr2l
  4441   00179C  C01C  FFDA         	movff	right_45@mL+1,fsr2h
  4442   0017A0  0E0A               	movlw	10
  4443   0017A2  26DF               	addwf	indf2,f,c
  4444   0017A4                     l2483:
  4445                           
  4446                           ;dc_motor.c: 232:         if (mR->power <= 50){mR->power += 10;}
  4447   0017A4  C01D  FFD9         	movff	right_45@mR,fsr2l
  4448   0017A8  C01E  FFDA         	movff	right_45@mR+1,fsr2h
  4449   0017AC  0E33               	movlw	51
  4450   0017AE  60DF               	cpfslt	indf2,c
  4451   0017B0  EFDC  F00B         	goto	u1551
  4452   0017B4  EFDE  F00B         	goto	u1550
  4453   0017B8                     u1551:
  4454   0017B8  EFE4  F00B         	goto	l2487
  4455   0017BC                     u1550:
  4456   0017BC  C01D  FFD9         	movff	right_45@mR,fsr2l
  4457   0017C0  C01E  FFDA         	movff	right_45@mR+1,fsr2h
  4458   0017C4  0E0A               	movlw	10
  4459   0017C6  26DF               	addwf	indf2,f,c
  4460   0017C8                     l2487:
  4461                           
  4462                           ;dc_motor.c: 233:         setMotorPWM(mL);
  4463   0017C8  C01B  F010         	movff	right_45@mL,setMotorPWM@m
  4464   0017CC  C01C  F011         	movff	right_45@mL+1,setMotorPWM@m+1
  4465   0017D0  EC4E  F00A         	call	_setMotorPWM	;wreg free
  4466   0017D4                     
  4467                           ;dc_motor.c: 234:         setMotorPWM(mR);
  4468   0017D4  C01D  F010         	movff	right_45@mR,setMotorPWM@m
  4469   0017D8  C01E  F011         	movff	right_45@mR+1,setMotorPWM@m+1
  4470   0017DC  EC4E  F00A         	call	_setMotorPWM	;wreg free
  4471   0017E0                     
  4472                           ;dc_motor.c: 235:         _delay((unsigned long)((10)*(64000000/4000.0)));
  4473   0017E0  0ED0               	movlw	208
  4474   0017E2  6E22               	movwf	??_right_45^0,c
  4475   0017E4  0ECA               	movlw	202
  4476   0017E6                     u2977:
  4477   0017E6  2EE8               	decfsz	wreg,f,c
  4478   0017E8  D7FE               	bra	u2977
  4479   0017EA  2E22               	decfsz	??_right_45^0,f,c
  4480   0017EC  D7FC               	bra	u2977
  4481   0017EE                     l2493:
  4482                           
  4483                           ;dc_motor.c: 230:     while ((mL->power <= 50) || (mR->power <= 50)){
  4484   0017EE  C01B  FFD9         	movff	right_45@mL,fsr2l
  4485   0017F2  C01C  FFDA         	movff	right_45@mL+1,fsr2h
  4486   0017F6  0E32               	movlw	50
  4487   0017F8  64DF               	cpfsgt	indf2,c
  4488   0017FA  EF01  F00C         	goto	u1561
  4489   0017FE  EF03  F00C         	goto	u1560
  4490   001802                     u1561:
  4491   001802  EFC0  F00B         	goto	l2479
  4492   001806                     u1560:
  4493   001806  C01D  FFD9         	movff	right_45@mR,fsr2l
  4494   00180A  C01E  FFDA         	movff	right_45@mR+1,fsr2h
  4495   00180E  0E32               	movlw	50
  4496   001810  64DF               	cpfsgt	indf2,c
  4497   001812  EF0D  F00C         	goto	u1571
  4498   001816  EF0F  F00C         	goto	u1570
  4499   00181A                     u1571:
  4500   00181A  EFC0  F00B         	goto	l2479
  4501   00181E                     u1570:
  4502   00181E                     
  4503                           ;dc_motor.c: 237:     custom_delay(right_timer);
  4504   00181E  C020  F003         	movff	right_45@right_timer,custom_delay@temp
  4505   001822  C021  F004         	movff	right_45@right_timer+1,custom_delay@temp+1
  4506   001826  EC81  F011         	call	_custom_delay	;wreg free
  4507   00182A                     
  4508                           ;dc_motor.c: 238:     stop(mL,mR);
  4509   00182A  C01B  F016         	movff	right_45@mL,stop@mL
  4510   00182E  C01C  F017         	movff	right_45@mL+1,stop@mL+1
  4511   001832  C01D  F018         	movff	right_45@mR,stop@mR
  4512   001836  C01E  F019         	movff	right_45@mR+1,stop@mR+1
  4513   00183A  ECF3  F00F         	call	_stop	;wreg free
  4514   00183E                     
  4515                           ;dc_motor.c: 239:     _delay((unsigned long)((150)*(64000000/4000.0)));
  4516   00183E  0E0D               	movlw	13
  4517   001840  6E23               	movwf	(??_right_45+1)^0,c
  4518   001842  0E2D               	movlw	45
  4519   001844  6E22               	movwf	??_right_45^0,c
  4520   001846  0ED8               	movlw	216
  4521   001848                     u2987:
  4522   001848  2EE8               	decfsz	wreg,f,c
  4523   00184A  D7FE               	bra	u2987
  4524   00184C  2E22               	decfsz	??_right_45^0,f,c
  4525   00184E  D7FC               	bra	u2987
  4526   001850  2E23               	decfsz	(??_right_45+1)^0,f,c
  4527   001852  D7FA               	bra	u2987
  4528   001854                     
  4529                           ;dc_motor.c: 240:     LATHbits.LATH0 = 0;
  4530   001854  9080               	bcf	128,0,c	;volatile
  4531   001856                     
  4532                           ;dc_motor.c: 241:     }
  4533   001856  2A24               	incf	right_45@i^0,f,c
  4534   001858                     l2507:
  4535   001858  501F               	movf	right_45@count^0,w,c
  4536   00185A  5C24               	subwf	right_45@i^0,w,c
  4537   00185C  A0D8               	btfss	status,0,c
  4538   00185E  EF33  F00C         	goto	u1581
  4539   001862  EF35  F00C         	goto	u1580
  4540   001866                     u1581:
  4541   001866  EFF7  F00B         	goto	l2493
  4542   00186A                     u1580:
  4543   00186A  0012               	return		;funcret
  4544   00186C                     __end_of_right_45:
  4545                           	callstack 0
  4546                           
  4547 ;; *************** function _reverse *****************
  4548 ;; Defined at:
  4549 ;;		line 148 in file "dc_motor.c"
  4550 ;; Parameters:    Size  Location     Type
  4551 ;;  mL              2   26[COMRAM] PTR struct DC_motor
  4552 ;;		 -> motorL(9), 
  4553 ;;  mR              2   28[COMRAM] PTR struct DC_motor
  4554 ;;		 -> motorR(9), 
  4555 ;; Auto vars:     Size  Location     Type
  4556 ;;		None
  4557 ;; Return value:  Size  Location     Type
  4558 ;;                  1    wreg      void 
  4559 ;; Registers used:
  4560 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4561 ;; Tracked objects:
  4562 ;;		On entry : 0/0
  4563 ;;		On exit  : 0/0
  4564 ;;		Unchanged: 0/0
  4565 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4566 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4567 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4568 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4569 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4570 ;;Total ram usage:        5 bytes
  4571 ;; Hardware stack levels used: 1
  4572 ;; Hardware stack levels required when called: 4
  4573 ;; This function calls:
  4574 ;;		_setMotorPWM
  4575 ;;		_stop
  4576 ;; This function is called by:
  4577 ;;		_buggy_color_response
  4578 ;;		_return_home
  4579 ;;		_reverse_yellow
  4580 ;;		_reverse_pink
  4581 ;;		_movement
  4582 ;; This function uses a non-reentrant model
  4583 ;;
  4584                           
  4585                           	psect	text24
  4586   001C86                     __ptext24:
  4587                           	callstack 0
  4588   001C86                     _reverse:
  4589                           	callstack 25
  4590   001C86                     
  4591                           ;dc_motor.c: 148: void reverse(DC_motor *mL, DC_motor *mR);dc_motor.c: 149: {;dc_motor.c
      +                          : 150:     stop(mL,mR);
  4592   001C86  C01B  F016         	movff	reverse@mL,stop@mL
  4593   001C8A  C01C  F017         	movff	reverse@mL+1,stop@mL+1
  4594   001C8E  C01D  F018         	movff	reverse@mR,stop@mR
  4595   001C92  C01E  F019         	movff	reverse@mR+1,stop@mR+1
  4596   001C96  ECF3  F00F         	call	_stop	;wreg free
  4597   001C9A                     
  4598                           ;dc_motor.c: 151:     mL-> direction = 0;
  4599   001C9A  EE20 F001          	lfsr	2,1
  4600   001C9E  501B               	movf	reverse@mL^0,w,c
  4601   001CA0  26D9               	addwf	fsr2l,f,c
  4602   001CA2  501C               	movf	(reverse@mL+1)^0,w,c
  4603   001CA4  22DA               	addwfc	fsr2h,f,c
  4604   001CA6  0E00               	movlw	0
  4605   001CA8  6EDF               	movwf	indf2,c
  4606   001CAA                     
  4607                           ;dc_motor.c: 152:     mR-> direction = 0;
  4608   001CAA  EE20 F001          	lfsr	2,1
  4609   001CAE  501D               	movf	reverse@mR^0,w,c
  4610   001CB0  26D9               	addwf	fsr2l,f,c
  4611   001CB2  501E               	movf	(reverse@mR+1)^0,w,c
  4612   001CB4  22DA               	addwfc	fsr2h,f,c
  4613   001CB6  0E00               	movlw	0
  4614   001CB8  6EDF               	movwf	indf2,c
  4615   001CBA                     
  4616                           ;dc_motor.c: 153:     LATHbits.LATH1 = 1;
  4617   001CBA  8280               	bsf	128,1,c	;volatile
  4618                           
  4619                           ;dc_motor.c: 154:     setMotorPWM(mR);
  4620   001CBC  C01D  F010         	movff	reverse@mR,setMotorPWM@m
  4621   001CC0  C01E  F011         	movff	reverse@mR+1,setMotorPWM@m+1
  4622   001CC4  EC4E  F00A         	call	_setMotorPWM	;wreg free
  4623                           
  4624                           ;dc_motor.c: 155:     setMotorPWM(mL);
  4625   001CC8  C01B  F010         	movff	reverse@mL,setMotorPWM@m
  4626   001CCC  C01C  F011         	movff	reverse@mL+1,setMotorPWM@m+1
  4627   001CD0  EC4E  F00A         	call	_setMotorPWM	;wreg free
  4628                           
  4629                           ;dc_motor.c: 156:     while ((mL->power <= 50) || (mR->power <= 55)){
  4630   001CD4  EF9E  F00E         	goto	l301
  4631   001CD8                     l2413:
  4632                           
  4633                           ;dc_motor.c: 157:         if (mL->power <= 50){mL->power += 1;}
  4634   001CD8  C01B  FFD9         	movff	reverse@mL,fsr2l
  4635   001CDC  C01C  FFDA         	movff	reverse@mL+1,fsr2h
  4636   001CE0  0E33               	movlw	51
  4637   001CE2  60DF               	cpfslt	indf2,c
  4638   001CE4  EF76  F00E         	goto	u1451
  4639   001CE8  EF78  F00E         	goto	u1450
  4640   001CEC                     u1451:
  4641   001CEC  EF7D  F00E         	goto	l2417
  4642   001CF0                     u1450:
  4643   001CF0  C01B  FFD9         	movff	reverse@mL,fsr2l
  4644   001CF4  C01C  FFDA         	movff	reverse@mL+1,fsr2h
  4645   001CF8  2ADF               	incf	indf2,f,c
  4646   001CFA                     l2417:
  4647                           
  4648                           ;dc_motor.c: 158:         if (mR->power <= 55){mR->power += 1;}
  4649   001CFA  C01D  FFD9         	movff	reverse@mR,fsr2l
  4650   001CFE  C01E  FFDA         	movff	reverse@mR+1,fsr2h
  4651   001D02  0E38               	movlw	56
  4652   001D04  60DF               	cpfslt	indf2,c
  4653   001D06  EF87  F00E         	goto	u1461
  4654   001D0A  EF89  F00E         	goto	u1460
  4655   001D0E                     u1461:
  4656   001D0E  EF8E  F00E         	goto	l2421
  4657   001D12                     u1460:
  4658   001D12  C01D  FFD9         	movff	reverse@mR,fsr2l
  4659   001D16  C01E  FFDA         	movff	reverse@mR+1,fsr2h
  4660   001D1A  2ADF               	incf	indf2,f,c
  4661   001D1C                     l2421:
  4662                           
  4663                           ;dc_motor.c: 159:         setMotorPWM(mL);
  4664   001D1C  C01B  F010         	movff	reverse@mL,setMotorPWM@m
  4665   001D20  C01C  F011         	movff	reverse@mL+1,setMotorPWM@m+1
  4666   001D24  EC4E  F00A         	call	_setMotorPWM	;wreg free
  4667   001D28                     
  4668                           ;dc_motor.c: 160:         setMotorPWM(mR);
  4669   001D28  C01D  F010         	movff	reverse@mR,setMotorPWM@m
  4670   001D2C  C01E  F011         	movff	reverse@mR+1,setMotorPWM@m+1
  4671   001D30  EC4E  F00A         	call	_setMotorPWM	;wreg free
  4672   001D34                     
  4673                           ;dc_motor.c: 161:         _delay((unsigned long)((5)*(64000000/4000000.0)));
  4674   001D34  0E1A               	movlw	26
  4675   001D36                     u2997:
  4676   001D36  2EE8               	decfsz	wreg,f,c
  4677   001D38  D7FE               	bra	u2997
  4678   001D3A  D000               	nop2	
  4679   001D3C                     l301:
  4680                           
  4681                           ;dc_motor.c: 156:     while ((mL->power <= 50) || (mR->power <= 55)){
  4682   001D3C  C01B  FFD9         	movff	reverse@mL,fsr2l
  4683   001D40  C01C  FFDA         	movff	reverse@mL+1,fsr2h
  4684   001D44  0E32               	movlw	50
  4685   001D46  64DF               	cpfsgt	indf2,c
  4686   001D48  EFA8  F00E         	goto	u1471
  4687   001D4C  EFAA  F00E         	goto	u1470
  4688   001D50                     u1471:
  4689   001D50  EF6C  F00E         	goto	l2413
  4690   001D54                     u1470:
  4691   001D54  C01D  FFD9         	movff	reverse@mR,fsr2l
  4692   001D58  C01E  FFDA         	movff	reverse@mR+1,fsr2h
  4693   001D5C  0E37               	movlw	55
  4694   001D5E  64DF               	cpfsgt	indf2,c
  4695   001D60  EFB4  F00E         	goto	u1481
  4696   001D64  EFB6  F00E         	goto	u1480
  4697   001D68                     u1481:
  4698   001D68  EF6C  F00E         	goto	l2413
  4699   001D6C                     u1480:
  4700   001D6C                     
  4701                           ;dc_motor.c: 163:     LATHbits.LATH1 = 0;
  4702   001D6C  9280               	bcf	128,1,c	;volatile
  4703   001D6E  0012               	return		;funcret
  4704   001D70                     __end_of_reverse:
  4705                           	callstack 0
  4706                           
  4707 ;; *************** function _left_45 *****************
  4708 ;; Defined at:
  4709 ;;		line 195 in file "dc_motor.c"
  4710 ;; Parameters:    Size  Location     Type
  4711 ;;  mL              2   26[COMRAM] PTR struct DC_motor
  4712 ;;		 -> motorL(9), 
  4713 ;;  mR              2   28[COMRAM] PTR struct DC_motor
  4714 ;;		 -> motorR(9), 
  4715 ;;  count           1   30[COMRAM] unsigned char 
  4716 ;;  left_timer      2   31[COMRAM] int 
  4717 ;; Auto vars:     Size  Location     Type
  4718 ;;  i               1   35[COMRAM] unsigned char 
  4719 ;; Return value:  Size  Location     Type
  4720 ;;                  1    wreg      void 
  4721 ;; Registers used:
  4722 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4723 ;; Tracked objects:
  4724 ;;		On entry : 0/0
  4725 ;;		On exit  : 0/0
  4726 ;;		Unchanged: 0/0
  4727 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4728 ;;      Params:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4729 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4730 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4731 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4732 ;;Total ram usage:       10 bytes
  4733 ;; Hardware stack levels used: 1
  4734 ;; Hardware stack levels required when called: 4
  4735 ;; This function calls:
  4736 ;;		_custom_delay
  4737 ;;		_setMotorPWM
  4738 ;;		_stop
  4739 ;; This function is called by:
  4740 ;;		_reverse_yellow
  4741 ;;		_movement
  4742 ;;		_movement_return
  4743 ;;		_left_turn_calibration
  4744 ;; This function uses a non-reentrant model
  4745 ;;
  4746                           
  4747                           	psect	text25
  4748   00186C                     __ptext25:
  4749                           	callstack 0
  4750   00186C                     _left_45:
  4751                           	callstack 22
  4752   00186C                     
  4753                           ;dc_motor.c: 195: void left_45(DC_motor *mL, DC_motor *mR, char count, int left_timer);d
      +                          c_motor.c: 196: {;dc_motor.c: 197:     stop(mL,mR);
  4754   00186C  C01B  F016         	movff	left_45@mL,stop@mL
  4755   001870  C01C  F017         	movff	left_45@mL+1,stop@mL+1
  4756   001874  C01D  F018         	movff	left_45@mR,stop@mR
  4757   001878  C01E  F019         	movff	left_45@mR+1,stop@mR+1
  4758   00187C  ECF3  F00F         	call	_stop	;wreg free
  4759   001880                     
  4760                           ;dc_motor.c: 198:     mL-> direction = 0;
  4761   001880  EE20 F001          	lfsr	2,1
  4762   001884  501B               	movf	left_45@mL^0,w,c
  4763   001886  26D9               	addwf	fsr2l,f,c
  4764   001888  501C               	movf	(left_45@mL+1)^0,w,c
  4765   00188A  22DA               	addwfc	fsr2h,f,c
  4766   00188C  0E00               	movlw	0
  4767   00188E  6EDF               	movwf	indf2,c
  4768   001890                     
  4769                           ;dc_motor.c: 199:     mR-> direction = 1;
  4770   001890  EE20 F001          	lfsr	2,1
  4771   001894  501D               	movf	left_45@mR^0,w,c
  4772   001896  26D9               	addwf	fsr2l,f,c
  4773   001898  501E               	movf	(left_45@mR+1)^0,w,c
  4774   00189A  22DA               	addwfc	fsr2h,f,c
  4775   00189C  0E01               	movlw	1
  4776   00189E  6EDF               	movwf	indf2,c
  4777   0018A0                     
  4778                           ;dc_motor.c: 200:     LATFbits.LATF0 = 1;
  4779   0018A0  807E               	bsf	126,0,c	;volatile
  4780   0018A2                     
  4781                           ;dc_motor.c: 201:     char i;;dc_motor.c: 202:     for (i = 0;i<count;i++){
  4782   0018A2  0E00               	movlw	0
  4783   0018A4  6E24               	movwf	left_45@i^0,c
  4784   0018A6  EFC1  F00C         	goto	l2467
  4785   0018AA                     l2439:
  4786                           
  4787                           ;dc_motor.c: 204:         if (mL->power <= 50){mL->power += 10;}
  4788   0018AA  C01B  FFD9         	movff	left_45@mL,fsr2l
  4789   0018AE  C01C  FFDA         	movff	left_45@mL+1,fsr2h
  4790   0018B2  0E33               	movlw	51
  4791   0018B4  60DF               	cpfslt	indf2,c
  4792   0018B6  EF5F  F00C         	goto	u1491
  4793   0018BA  EF61  F00C         	goto	u1490
  4794   0018BE                     u1491:
  4795   0018BE  EF67  F00C         	goto	l2443
  4796   0018C2                     u1490:
  4797   0018C2  C01B  FFD9         	movff	left_45@mL,fsr2l
  4798   0018C6  C01C  FFDA         	movff	left_45@mL+1,fsr2h
  4799   0018CA  0E0A               	movlw	10
  4800   0018CC  26DF               	addwf	indf2,f,c
  4801   0018CE                     l2443:
  4802                           
  4803                           ;dc_motor.c: 205:         if (mR->power <= 50){mR->power += 10;}
  4804   0018CE  C01D  FFD9         	movff	left_45@mR,fsr2l
  4805   0018D2  C01E  FFDA         	movff	left_45@mR+1,fsr2h
  4806   0018D6  0E33               	movlw	51
  4807   0018D8  60DF               	cpfslt	indf2,c
  4808   0018DA  EF71  F00C         	goto	u1501
  4809   0018DE  EF73  F00C         	goto	u1500
  4810   0018E2                     u1501:
  4811   0018E2  EF79  F00C         	goto	l2447
  4812   0018E6                     u1500:
  4813   0018E6  C01D  FFD9         	movff	left_45@mR,fsr2l
  4814   0018EA  C01E  FFDA         	movff	left_45@mR+1,fsr2h
  4815   0018EE  0E0A               	movlw	10
  4816   0018F0  26DF               	addwf	indf2,f,c
  4817   0018F2                     l2447:
  4818                           
  4819                           ;dc_motor.c: 206:         setMotorPWM(mL);
  4820   0018F2  C01B  F010         	movff	left_45@mL,setMotorPWM@m
  4821   0018F6  C01C  F011         	movff	left_45@mL+1,setMotorPWM@m+1
  4822   0018FA  EC4E  F00A         	call	_setMotorPWM	;wreg free
  4823   0018FE                     
  4824                           ;dc_motor.c: 207:         setMotorPWM(mR);
  4825   0018FE  C01D  F010         	movff	left_45@mR,setMotorPWM@m
  4826   001902  C01E  F011         	movff	left_45@mR+1,setMotorPWM@m+1
  4827   001906  EC4E  F00A         	call	_setMotorPWM	;wreg free
  4828   00190A                     
  4829                           ;dc_motor.c: 208:         _delay((unsigned long)((10)*(64000000/4000.0)));
  4830   00190A  0ED0               	movlw	208
  4831   00190C  6E22               	movwf	??_left_45^0,c
  4832   00190E  0ECA               	movlw	202
  4833   001910                     u3007:
  4834   001910  2EE8               	decfsz	wreg,f,c
  4835   001912  D7FE               	bra	u3007
  4836   001914  2E22               	decfsz	??_left_45^0,f,c
  4837   001916  D7FC               	bra	u3007
  4838   001918                     l2453:
  4839                           
  4840                           ;dc_motor.c: 203:     while ((mL->power <= 50) || (mR->power <= 50)){
  4841   001918  C01B  FFD9         	movff	left_45@mL,fsr2l
  4842   00191C  C01C  FFDA         	movff	left_45@mL+1,fsr2h
  4843   001920  0E32               	movlw	50
  4844   001922  64DF               	cpfsgt	indf2,c
  4845   001924  EF96  F00C         	goto	u1511
  4846   001928  EF98  F00C         	goto	u1510
  4847   00192C                     u1511:
  4848   00192C  EF55  F00C         	goto	l2439
  4849   001930                     u1510:
  4850   001930  C01D  FFD9         	movff	left_45@mR,fsr2l
  4851   001934  C01E  FFDA         	movff	left_45@mR+1,fsr2h
  4852   001938  0E32               	movlw	50
  4853   00193A  64DF               	cpfsgt	indf2,c
  4854   00193C  EFA2  F00C         	goto	u1521
  4855   001940  EFA4  F00C         	goto	u1520
  4856   001944                     u1521:
  4857   001944  EF55  F00C         	goto	l2439
  4858   001948                     u1520:
  4859   001948                     
  4860                           ;dc_motor.c: 210:     custom_delay(left_timer);
  4861   001948  C020  F003         	movff	left_45@left_timer,custom_delay@temp
  4862   00194C  C021  F004         	movff	left_45@left_timer+1,custom_delay@temp+1
  4863   001950  EC81  F011         	call	_custom_delay	;wreg free
  4864   001954                     
  4865                           ;dc_motor.c: 211:     stop(mL,mR);
  4866   001954  C01B  F016         	movff	left_45@mL,stop@mL
  4867   001958  C01C  F017         	movff	left_45@mL+1,stop@mL+1
  4868   00195C  C01D  F018         	movff	left_45@mR,stop@mR
  4869   001960  C01E  F019         	movff	left_45@mR+1,stop@mR+1
  4870   001964  ECF3  F00F         	call	_stop	;wreg free
  4871   001968                     
  4872                           ;dc_motor.c: 212:     _delay((unsigned long)((150)*(64000000/4000.0)));
  4873   001968  0E0D               	movlw	13
  4874   00196A  6E23               	movwf	(??_left_45+1)^0,c
  4875   00196C  0E2D               	movlw	45
  4876   00196E  6E22               	movwf	??_left_45^0,c
  4877   001970  0ED8               	movlw	216
  4878   001972                     u3017:
  4879   001972  2EE8               	decfsz	wreg,f,c
  4880   001974  D7FE               	bra	u3017
  4881   001976  2E22               	decfsz	??_left_45^0,f,c
  4882   001978  D7FC               	bra	u3017
  4883   00197A  2E23               	decfsz	(??_left_45+1)^0,f,c
  4884   00197C  D7FA               	bra	u3017
  4885   00197E                     
  4886                           ;dc_motor.c: 213:     LATFbits.LATF0 = 0;
  4887   00197E  907E               	bcf	126,0,c	;volatile
  4888   001980                     
  4889                           ;dc_motor.c: 214:     }
  4890   001980  2A24               	incf	left_45@i^0,f,c
  4891   001982                     l2467:
  4892   001982  501F               	movf	left_45@count^0,w,c
  4893   001984  5C24               	subwf	left_45@i^0,w,c
  4894   001986  A0D8               	btfss	status,0,c
  4895   001988  EFC8  F00C         	goto	u1531
  4896   00198C  EFCA  F00C         	goto	u1530
  4897   001990                     u1531:
  4898   001990  EF8C  F00C         	goto	l2453
  4899   001994                     u1530:
  4900   001994  0012               	return		;funcret
  4901   001996                     __end_of_left_45:
  4902                           	callstack 0
  4903                           
  4904 ;; *************** function _stop *****************
  4905 ;; Defined at:
  4906 ;;		line 169 in file "dc_motor.c"
  4907 ;; Parameters:    Size  Location     Type
  4908 ;;  mL              2   21[COMRAM] PTR struct DC_motor
  4909 ;;		 -> motorL(9), 
  4910 ;;  mR              2   23[COMRAM] PTR struct DC_motor
  4911 ;;		 -> motorR(9), 
  4912 ;; Auto vars:     Size  Location     Type
  4913 ;;  i               1   25[COMRAM] unsigned char 
  4914 ;; Return value:  Size  Location     Type
  4915 ;;                  1    wreg      void 
  4916 ;; Registers used:
  4917 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4918 ;; Tracked objects:
  4919 ;;		On entry : 0/0
  4920 ;;		On exit  : 0/0
  4921 ;;		Unchanged: 0/0
  4922 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4923 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4924 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4925 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4926 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4927 ;;Total ram usage:        5 bytes
  4928 ;; Hardware stack levels used: 1
  4929 ;; Hardware stack levels required when called: 3
  4930 ;; This function calls:
  4931 ;;		_setMotorPWM
  4932 ;; This function is called by:
  4933 ;;		_buggy_color_response
  4934 ;;		_return_home
  4935 ;;		_forward
  4936 ;;		_reverse
  4937 ;;		_left_45
  4938 ;;		_right_45
  4939 ;;		_space
  4940 ;;		_reverse_yellow
  4941 ;;		_reverse_pink
  4942 ;;		_movement
  4943 ;;		_movement_return
  4944 ;; This function uses a non-reentrant model
  4945 ;;
  4946                           
  4947                           	psect	text26
  4948   001FE6                     __ptext26:
  4949                           	callstack 0
  4950   001FE6                     _stop:
  4951                           	callstack 26
  4952   001FE6                     
  4953                           ;dc_motor.c: 169: void stop(DC_motor *mL, DC_motor *mR);dc_motor.c: 170: {;dc_motor.c: 1
      +                          71:     mL->brakemode = 1;
  4954   001FE6  EE20 F002          	lfsr	2,2
  4955   001FEA  5016               	movf	stop@mL^0,w,c
  4956   001FEC  26D9               	addwf	fsr2l,f,c
  4957   001FEE  5017               	movf	(stop@mL+1)^0,w,c
  4958   001FF0  22DA               	addwfc	fsr2h,f,c
  4959   001FF2  0E01               	movlw	1
  4960   001FF4  6EDF               	movwf	indf2,c
  4961                           
  4962                           ;dc_motor.c: 172:     mR->brakemode = 1;
  4963   001FF6  EE20 F002          	lfsr	2,2
  4964   001FFA  5018               	movf	stop@mR^0,w,c
  4965   001FFC  26D9               	addwf	fsr2l,f,c
  4966   001FFE  5019               	movf	(stop@mR+1)^0,w,c
  4967   002000  22DA               	addwfc	fsr2h,f,c
  4968   002002  0E01               	movlw	1
  4969   002004  6EDF               	movwf	indf2,c
  4970   002006                     
  4971                           ;dc_motor.c: 173:     LATDbits.LATD4 = 1;
  4972   002006  887C               	bsf	124,4,c	;volatile
  4973   002008                     
  4974                           ;dc_motor.c: 175:     for (char i = 70; i >= 0; i=i-10) {
  4975   002008  0E46               	movlw	70
  4976   00200A  6E1A               	movwf	stop@i^0,c
  4977   00200C                     l2377:
  4978                           
  4979                           ;dc_motor.c: 176:         mL -> power = i;
  4980   00200C  C016  FFD9         	movff	stop@mL,fsr2l
  4981   002010  C017  FFDA         	movff	stop@mL+1,fsr2h
  4982   002014  C01A  FFDF         	movff	stop@i,indf2
  4983                           
  4984                           ;dc_motor.c: 177:         mR -> power = i;
  4985   002018  C018  FFD9         	movff	stop@mR,fsr2l
  4986   00201C  C019  FFDA         	movff	stop@mR+1,fsr2h
  4987   002020  C01A  FFDF         	movff	stop@i,indf2
  4988   002024                     
  4989                           ;dc_motor.c: 178:         setMotorPWM(mL);
  4990   002024  C016  F010         	movff	stop@mL,setMotorPWM@m
  4991   002028  C017  F011         	movff	stop@mL+1,setMotorPWM@m+1
  4992   00202C  EC4E  F00A         	call	_setMotorPWM	;wreg free
  4993   002030                     
  4994                           ;dc_motor.c: 179:         setMotorPWM(mR);
  4995   002030  C018  F010         	movff	stop@mR,setMotorPWM@m
  4996   002034  C019  F011         	movff	stop@mR+1,setMotorPWM@m+1
  4997   002038  EC4E  F00A         	call	_setMotorPWM	;wreg free
  4998   00203C                     
  4999                           ;dc_motor.c: 180:         _delay((unsigned long)((20)*(64000000/4000000.0)));
  5000   00203C  0E6A               	movlw	106
  5001   00203E                     u3027:
  5002   00203E  2EE8               	decfsz	wreg,f,c
  5003   002040  D7FE               	bra	u3027
  5004   002042  D000               	nop2	
  5005   002044                     
  5006                           ;dc_motor.c: 181:     }
  5007   002044  501A               	movf	stop@i^0,w,c
  5008   002046  0FF6               	addlw	246
  5009   002048  6E1A               	movwf	stop@i^0,c
  5010   00204A  EF06  F010         	goto	l2377
  5011   00204E  0012               	return		;funcret
  5012   002050                     __end_of_stop:
  5013                           	callstack 0
  5014                           
  5015 ;; *************** function _setMotorPWM *****************
  5016 ;; Defined at:
  5017 ;;		line 78 in file "dc_motor.c"
  5018 ;; Parameters:    Size  Location     Type
  5019 ;;  m               2   15[COMRAM] PTR struct DC_motor
  5020 ;;		 -> motorR(9), motorL(9), 
  5021 ;; Auto vars:     Size  Location     Type
  5022 ;;  negDuty         1   20[COMRAM] unsigned char 
  5023 ;;  posDuty         1   19[COMRAM] unsigned char 
  5024 ;; Return value:  Size  Location     Type
  5025 ;;                  1    wreg      void 
  5026 ;; Registers used:
  5027 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5028 ;; Tracked objects:
  5029 ;;		On entry : 0/0
  5030 ;;		On exit  : 0/0
  5031 ;;		Unchanged: 0/0
  5032 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5033 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5034 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5035 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5036 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5037 ;;Total ram usage:        6 bytes
  5038 ;; Hardware stack levels used: 1
  5039 ;; Hardware stack levels required when called: 2
  5040 ;; This function calls:
  5041 ;;		___lwdiv
  5042 ;;		___wmul
  5043 ;; This function is called by:
  5044 ;;		_forward
  5045 ;;		_reverse
  5046 ;;		_stop
  5047 ;;		_left_45
  5048 ;;		_right_45
  5049 ;;		_space
  5050 ;; This function uses a non-reentrant model
  5051 ;;
  5052                           
  5053                           	psect	text27
  5054   00149C                     __ptext27:
  5055                           	callstack 0
  5056   00149C                     _setMotorPWM:
  5057                           	callstack 26
  5058   00149C                     
  5059                           ;dc_motor.c: 78: void setMotorPWM(DC_motor *m);dc_motor.c: 79: {;dc_motor.c: 80:     uns
      +                          igned char posDuty, negDuty;;dc_motor.c: 82:     if(m->brakemode) {
  5060   00149C  EE20 F002          	lfsr	2,2
  5061   0014A0  5010               	movf	setMotorPWM@m^0,w,c
  5062   0014A2  26D9               	addwf	fsr2l,f,c
  5063   0014A4  5011               	movf	(setMotorPWM@m+1)^0,w,c
  5064   0014A6  22DA               	addwfc	fsr2h,f,c
  5065   0014A8  50DF               	movf	indf2,w,c
  5066   0014AA  B4D8               	btfsc	status,2,c
  5067   0014AC  EF5A  F00A         	goto	u1401
  5068   0014B0  EF5C  F00A         	goto	u1400
  5069   0014B4                     u1401:
  5070   0014B4  EF90  F00A         	goto	l2359
  5071   0014B8                     u1400:
  5072   0014B8                     
  5073                           ;dc_motor.c: 83:         posDuty = m->PWMperiod - ((unsigned int)(m->power)*(m->PWMperio
      +                          d))/100;
  5074   0014B8  C010  FFD9         	movff	setMotorPWM@m,fsr2l
  5075   0014BC  C011  FFDA         	movff	setMotorPWM@m+1,fsr2h
  5076   0014C0  50DF               	movf	indf2,w,c
  5077   0014C2  6E12               	movwf	??_setMotorPWM^0,c
  5078   0014C4  5012               	movf	??_setMotorPWM^0,w,c
  5079   0014C6  6E03               	movwf	___wmul@multiplier^0,c
  5080   0014C8  6A04               	clrf	(___wmul@multiplier+1)^0,c
  5081   0014CA  EE20 F003          	lfsr	2,3
  5082   0014CE  5010               	movf	setMotorPWM@m^0,w,c
  5083   0014D0  26D9               	addwf	fsr2l,f,c
  5084   0014D2  5011               	movf	(setMotorPWM@m+1)^0,w,c
  5085   0014D4  22DA               	addwfc	fsr2h,f,c
  5086   0014D6  CFDE F005          	movff	postinc2,___wmul@multiplicand
  5087   0014DA  CFDD F006          	movff	postdec2,___wmul@multiplicand+1
  5088   0014DE  ECE4  F011         	call	___wmul	;wreg free
  5089   0014E2  C003  F009         	movff	?___wmul,___lwdiv@dividend
  5090   0014E6  C004  F00A         	movff	?___wmul+1,___lwdiv@dividend+1
  5091   0014EA  0E00               	movlw	0
  5092   0014EC  6E0C               	movwf	(___lwdiv@divisor+1)^0,c
  5093   0014EE  0E64               	movlw	100
  5094   0014F0  6E0B               	movwf	___lwdiv@divisor^0,c
  5095   0014F2  EC82  F00F         	call	___lwdiv	;wreg free
  5096   0014F6  EE20 F003          	lfsr	2,3
  5097   0014FA  5010               	movf	setMotorPWM@m^0,w,c
  5098   0014FC  26D9               	addwf	fsr2l,f,c
  5099   0014FE  5011               	movf	(setMotorPWM@m+1)^0,w,c
  5100   001500  22DA               	addwfc	fsr2h,f,c
  5101   001502  50DF               	movf	indf2,w,c
  5102   001504  6E13               	movwf	(??_setMotorPWM+1)^0,c
  5103   001506  5009               	movf	?___lwdiv^0,w,c
  5104   001508  5C13               	subwf	(??_setMotorPWM+1)^0,w,c
  5105   00150A  6E14               	movwf	setMotorPWM@posDuty^0,c
  5106   00150C                     
  5107                           ;dc_motor.c: 84:         negDuty = m->PWMperiod;
  5108   00150C  EE20 F003          	lfsr	2,3
  5109   001510  5010               	movf	setMotorPWM@m^0,w,c
  5110   001512  26D9               	addwf	fsr2l,f,c
  5111   001514  5011               	movf	(setMotorPWM@m+1)^0,w,c
  5112   001516  22DA               	addwfc	fsr2h,f,c
  5113   001518  50DF               	movf	indf2,w,c
  5114   00151A  6E15               	movwf	setMotorPWM@negDuty^0,c
  5115                           
  5116                           ;dc_motor.c: 85:     }
  5117   00151C  EFB3  F00A         	goto	l2363
  5118   001520                     l2359:
  5119                           
  5120                           ;dc_motor.c: 87:         posDuty=0;
  5121   001520  0E00               	movlw	0
  5122   001522  6E14               	movwf	setMotorPWM@posDuty^0,c
  5123   001524                     
  5124                           ;dc_motor.c: 88:   negDuty=((unsigned int)(m->power)*(m->PWMperiod))/100;
  5125   001524  C010  FFD9         	movff	setMotorPWM@m,fsr2l
  5126   001528  C011  FFDA         	movff	setMotorPWM@m+1,fsr2h
  5127   00152C  50DF               	movf	indf2,w,c
  5128   00152E  6E12               	movwf	??_setMotorPWM^0,c
  5129   001530  5012               	movf	??_setMotorPWM^0,w,c
  5130   001532  6E03               	movwf	___wmul@multiplier^0,c
  5131   001534  6A04               	clrf	(___wmul@multiplier+1)^0,c
  5132   001536  EE20 F003          	lfsr	2,3
  5133   00153A  5010               	movf	setMotorPWM@m^0,w,c
  5134   00153C  26D9               	addwf	fsr2l,f,c
  5135   00153E  5011               	movf	(setMotorPWM@m+1)^0,w,c
  5136   001540  22DA               	addwfc	fsr2h,f,c
  5137   001542  CFDE F005          	movff	postinc2,___wmul@multiplicand
  5138   001546  CFDD F006          	movff	postdec2,___wmul@multiplicand+1
  5139   00154A  ECE4  F011         	call	___wmul	;wreg free
  5140   00154E  C003  F009         	movff	?___wmul,___lwdiv@dividend
  5141   001552  C004  F00A         	movff	?___wmul+1,___lwdiv@dividend+1
  5142   001556  0E00               	movlw	0
  5143   001558  6E0C               	movwf	(___lwdiv@divisor+1)^0,c
  5144   00155A  0E64               	movlw	100
  5145   00155C  6E0B               	movwf	___lwdiv@divisor^0,c
  5146   00155E  EC82  F00F         	call	___lwdiv	;wreg free
  5147   001562  5009               	movf	?___lwdiv^0,w,c
  5148   001564  6E15               	movwf	setMotorPWM@negDuty^0,c
  5149   001566                     l2363:
  5150                           
  5151                           ;dc_motor.c: 91:     if (m->direction) {
  5152   001566  EE20 F001          	lfsr	2,1
  5153   00156A  5010               	movf	setMotorPWM@m^0,w,c
  5154   00156C  26D9               	addwf	fsr2l,f,c
  5155   00156E  5011               	movf	(setMotorPWM@m+1)^0,w,c
  5156   001570  22DA               	addwfc	fsr2h,f,c
  5157   001572  50DF               	movf	indf2,w,c
  5158   001574  B4D8               	btfsc	status,2,c
  5159   001576  EFBF  F00A         	goto	u1411
  5160   00157A  EFC1  F00A         	goto	u1410
  5161   00157E                     u1411:
  5162   00157E  EFE3  F00A         	goto	l2367
  5163   001582                     u1410:
  5164   001582                     
  5165                           ;dc_motor.c: 92:         *(m->posDutyHighByte)= posDuty;
  5166   001582  EE20 F005          	lfsr	2,5
  5167   001586  5010               	movf	setMotorPWM@m^0,w,c
  5168   001588  26D9               	addwf	fsr2l,f,c
  5169   00158A  5011               	movf	(setMotorPWM@m+1)^0,w,c
  5170   00158C  22DA               	addwfc	fsr2h,f,c
  5171   00158E  CFDE F012          	movff	postinc2,??_setMotorPWM
  5172   001592  CFDD F013          	movff	postdec2,??_setMotorPWM+1
  5173   001596  C012  FFD9         	movff	??_setMotorPWM,fsr2l
  5174   00159A  C013  FFDA         	movff	??_setMotorPWM+1,fsr2h
  5175   00159E  C014  FFDF         	movff	setMotorPWM@posDuty,indf2
  5176                           
  5177                           ;dc_motor.c: 93:         *(m->negDutyHighByte)= negDuty;
  5178   0015A2  EE20 F007          	lfsr	2,7
  5179   0015A6  5010               	movf	setMotorPWM@m^0,w,c
  5180   0015A8  26D9               	addwf	fsr2l,f,c
  5181   0015AA  5011               	movf	(setMotorPWM@m+1)^0,w,c
  5182   0015AC  22DA               	addwfc	fsr2h,f,c
  5183   0015AE  CFDE F012          	movff	postinc2,??_setMotorPWM
  5184   0015B2  CFDD F013          	movff	postdec2,??_setMotorPWM+1
  5185   0015B6  C012  FFD9         	movff	??_setMotorPWM,fsr2l
  5186   0015BA  C013  FFDA         	movff	??_setMotorPWM+1,fsr2h
  5187   0015BE  C015  FFDF         	movff	setMotorPWM@negDuty,indf2
  5188                           
  5189                           ;dc_motor.c: 94:     } else {
  5190   0015C2  EF03  F00B         	goto	l287
  5191   0015C6                     l2367:
  5192                           
  5193                           ;dc_motor.c: 95:         *(m->posDutyHighByte)= negDuty;
  5194   0015C6  EE20 F005          	lfsr	2,5
  5195   0015CA  5010               	movf	setMotorPWM@m^0,w,c
  5196   0015CC  26D9               	addwf	fsr2l,f,c
  5197   0015CE  5011               	movf	(setMotorPWM@m+1)^0,w,c
  5198   0015D0  22DA               	addwfc	fsr2h,f,c
  5199   0015D2  CFDE F012          	movff	postinc2,??_setMotorPWM
  5200   0015D6  CFDD F013          	movff	postdec2,??_setMotorPWM+1
  5201   0015DA  C012  FFD9         	movff	??_setMotorPWM,fsr2l
  5202   0015DE  C013  FFDA         	movff	??_setMotorPWM+1,fsr2h
  5203   0015E2  C015  FFDF         	movff	setMotorPWM@negDuty,indf2
  5204                           
  5205                           ;dc_motor.c: 96:         *(m->negDutyHighByte)= posDuty;
  5206   0015E6  EE20 F007          	lfsr	2,7
  5207   0015EA  5010               	movf	setMotorPWM@m^0,w,c
  5208   0015EC  26D9               	addwf	fsr2l,f,c
  5209   0015EE  5011               	movf	(setMotorPWM@m+1)^0,w,c
  5210   0015F0  22DA               	addwfc	fsr2h,f,c
  5211   0015F2  CFDE F012          	movff	postinc2,??_setMotorPWM
  5212   0015F6  CFDD F013          	movff	postdec2,??_setMotorPWM+1
  5213   0015FA  C012  FFD9         	movff	??_setMotorPWM,fsr2l
  5214   0015FE  C013  FFDA         	movff	??_setMotorPWM+1,fsr2h
  5215   001602  C014  FFDF         	movff	setMotorPWM@posDuty,indf2
  5216   001606                     l287:
  5217   001606  0012               	return		;funcret
  5218   001608                     __end_of_setMotorPWM:
  5219                           	callstack 0
  5220                           
  5221 ;; *************** function ___wmul *****************
  5222 ;; Defined at:
  5223 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\Umul16.c"
  5224 ;; Parameters:    Size  Location     Type
  5225 ;;  multiplier      2    2[COMRAM] unsigned int 
  5226 ;;  multiplicand    2    4[COMRAM] unsigned int 
  5227 ;; Auto vars:     Size  Location     Type
  5228 ;;  product         2    6[COMRAM] unsigned int 
  5229 ;; Return value:  Size  Location     Type
  5230 ;;                  2    2[COMRAM] unsigned int 
  5231 ;; Registers used:
  5232 ;;		wreg, status,2, status,0, prodl, prodh
  5233 ;; Tracked objects:
  5234 ;;		On entry : 0/0
  5235 ;;		On exit  : 0/0
  5236 ;;		Unchanged: 0/0
  5237 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5238 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5239 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5240 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5241 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5242 ;;Total ram usage:        6 bytes
  5243 ;; Hardware stack levels used: 1
  5244 ;; Hardware stack levels required when called: 1
  5245 ;; This function calls:
  5246 ;;		Nothing
  5247 ;; This function is called by:
  5248 ;;		_setMotorPWM
  5249 ;; This function uses a non-reentrant model
  5250 ;;
  5251                           
  5252                           	psect	text28
  5253   0023C8                     __ptext28:
  5254                           	callstack 0
  5255   0023C8                     ___wmul:
  5256                           	callstack 26
  5257   0023C8  5003               	movf	___wmul@multiplier^0,w,c
  5258   0023CA  0205               	mulwf	___wmul@multiplicand^0,c
  5259   0023CC  CFF3 F007          	movff	prodl,___wmul@product
  5260   0023D0  CFF4 F008          	movff	prodh,___wmul@product+1
  5261   0023D4  5003               	movf	___wmul@multiplier^0,w,c
  5262   0023D6  0206               	mulwf	(___wmul@multiplicand+1)^0,c
  5263   0023D8  50F3               	movf	243,w,c
  5264   0023DA  2608               	addwf	(___wmul@product+1)^0,f,c
  5265   0023DC  5004               	movf	(___wmul@multiplier+1)^0,w,c
  5266   0023DE  0205               	mulwf	___wmul@multiplicand^0,c
  5267   0023E0  50F3               	movf	243,w,c
  5268   0023E2  2608               	addwf	(___wmul@product+1)^0,f,c
  5269   0023E4  C007  F003         	movff	___wmul@product,?___wmul
  5270   0023E8  C008  F004         	movff	___wmul@product+1,?___wmul+1
  5271   0023EC  0012               	return		;funcret
  5272   0023EE                     __end_of___wmul:
  5273                           	callstack 0
  5274                           
  5275 ;; *************** function ___lwdiv *****************
  5276 ;; Defined at:
  5277 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\lwdiv.c"
  5278 ;; Parameters:    Size  Location     Type
  5279 ;;  dividend        2    8[COMRAM] unsigned int 
  5280 ;;  divisor         2   10[COMRAM] unsigned int 
  5281 ;; Auto vars:     Size  Location     Type
  5282 ;;  quotient        2   12[COMRAM] unsigned int 
  5283 ;;  counter         1   14[COMRAM] unsigned char 
  5284 ;; Return value:  Size  Location     Type
  5285 ;;                  2    8[COMRAM] unsigned int 
  5286 ;; Registers used:
  5287 ;;		wreg, status,2, status,0
  5288 ;; Tracked objects:
  5289 ;;		On entry : 0/0
  5290 ;;		On exit  : 0/0
  5291 ;;		Unchanged: 0/0
  5292 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5293 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5294 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5295 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5296 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5297 ;;Total ram usage:        7 bytes
  5298 ;; Hardware stack levels used: 1
  5299 ;; Hardware stack levels required when called: 1
  5300 ;; This function calls:
  5301 ;;		Nothing
  5302 ;; This function is called by:
  5303 ;;		_setMotorPWM
  5304 ;; This function uses a non-reentrant model
  5305 ;;
  5306                           
  5307                           	psect	text29
  5308   001F04                     __ptext29:
  5309                           	callstack 0
  5310   001F04                     ___lwdiv:
  5311                           	callstack 26
  5312   001F04  0E00               	movlw	0
  5313   001F06  6E0E               	movwf	(___lwdiv@quotient+1)^0,c
  5314   001F08  0E00               	movlw	0
  5315   001F0A  6E0D               	movwf	___lwdiv@quotient^0,c
  5316   001F0C  500B               	movf	___lwdiv@divisor^0,w,c
  5317   001F0E  100C               	iorwf	(___lwdiv@divisor+1)^0,w,c
  5318   001F10  B4D8               	btfsc	status,2,c
  5319   001F12  EF8D  F00F         	goto	u1371
  5320   001F16  EF8F  F00F         	goto	u1370
  5321   001F1A                     u1371:
  5322   001F1A  EFB7  F00F         	goto	l1093
  5323   001F1E                     u1370:
  5324   001F1E  0E01               	movlw	1
  5325   001F20  6E0F               	movwf	___lwdiv@counter^0,c
  5326   001F22  EF97  F00F         	goto	l2339
  5327   001F26                     l2337:
  5328   001F26  90D8               	bcf	status,0,c
  5329   001F28  360B               	rlcf	___lwdiv@divisor^0,f,c
  5330   001F2A  360C               	rlcf	(___lwdiv@divisor+1)^0,f,c
  5331   001F2C  2A0F               	incf	___lwdiv@counter^0,f,c
  5332   001F2E                     l2339:
  5333   001F2E  AE0C               	btfss	(___lwdiv@divisor+1)^0,7,c
  5334   001F30  EF9C  F00F         	goto	u1381
  5335   001F34  EF9E  F00F         	goto	u1380
  5336   001F38                     u1381:
  5337   001F38  EF93  F00F         	goto	l2337
  5338   001F3C                     u1380:
  5339   001F3C                     l2341:
  5340   001F3C  90D8               	bcf	status,0,c
  5341   001F3E  360D               	rlcf	___lwdiv@quotient^0,f,c
  5342   001F40  360E               	rlcf	(___lwdiv@quotient+1)^0,f,c
  5343   001F42  500B               	movf	___lwdiv@divisor^0,w,c
  5344   001F44  5C09               	subwf	___lwdiv@dividend^0,w,c
  5345   001F46  500C               	movf	(___lwdiv@divisor+1)^0,w,c
  5346   001F48  580A               	subwfb	(___lwdiv@dividend+1)^0,w,c
  5347   001F4A  A0D8               	btfss	status,0,c
  5348   001F4C  EFAA  F00F         	goto	u1391
  5349   001F50  EFAC  F00F         	goto	u1390
  5350   001F54                     u1391:
  5351   001F54  EFB1  F00F         	goto	l2349
  5352   001F58                     u1390:
  5353   001F58  500B               	movf	___lwdiv@divisor^0,w,c
  5354   001F5A  5E09               	subwf	___lwdiv@dividend^0,f,c
  5355   001F5C  500C               	movf	(___lwdiv@divisor+1)^0,w,c
  5356   001F5E  5A0A               	subwfb	(___lwdiv@dividend+1)^0,f,c
  5357   001F60  800D               	bsf	___lwdiv@quotient^0,0,c
  5358   001F62                     l2349:
  5359   001F62  90D8               	bcf	status,0,c
  5360   001F64  320C               	rrcf	(___lwdiv@divisor+1)^0,f,c
  5361   001F66  320B               	rrcf	___lwdiv@divisor^0,f,c
  5362   001F68  2E0F               	decfsz	___lwdiv@counter^0,f,c
  5363   001F6A  EF9E  F00F         	goto	l2341
  5364   001F6E                     l1093:
  5365   001F6E  C00D  F009         	movff	___lwdiv@quotient,?___lwdiv
  5366   001F72  C00E  F00A         	movff	___lwdiv@quotient+1,?___lwdiv+1
  5367   001F76  0012               	return		;funcret
  5368   001F78                     __end_of___lwdiv:
  5369                           	callstack 0
  5370                           
  5371 ;; *************** function _custom_delay *****************
  5372 ;; Defined at:
  5373 ;;		line 37 in file "calibration.c"
  5374 ;; Parameters:    Size  Location     Type
  5375 ;;  temp            2    2[COMRAM] int 
  5376 ;; Auto vars:     Size  Location     Type
  5377 ;;  i               2    5[COMRAM] int 
  5378 ;; Return value:  Size  Location     Type
  5379 ;;                  1    wreg      void 
  5380 ;; Registers used:
  5381 ;;		wreg, status,2, status,0
  5382 ;; Tracked objects:
  5383 ;;		On entry : 0/0
  5384 ;;		On exit  : 0/0
  5385 ;;		Unchanged: 0/0
  5386 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5387 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5388 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5389 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5390 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5391 ;;Total ram usage:        5 bytes
  5392 ;; Hardware stack levels used: 1
  5393 ;; Hardware stack levels required when called: 1
  5394 ;; This function calls:
  5395 ;;		Nothing
  5396 ;; This function is called by:
  5397 ;;		_left_45
  5398 ;;		_right_45
  5399 ;;		_reverse_yellow
  5400 ;;		_reverse_pink
  5401 ;;		_movement
  5402 ;; This function uses a non-reentrant model
  5403 ;;
  5404                           
  5405                           	psect	text30
  5406   002302                     __ptext30:
  5407                           	callstack 0
  5408   002302                     _custom_delay:
  5409                           	callstack 25
  5410   002302                     
  5411                           ;calibration.c: 38: int i;;calibration.c: 39: for (i = 0; i < temp; i++){_delay((unsigne
      +                          d long)((1)*(64000000/4000.0)));}
  5412   002302  0E00               	movlw	0
  5413   002304  6E07               	movwf	(custom_delay@i+1)^0,c
  5414   002306  0E00               	movlw	0
  5415   002308  6E06               	movwf	custom_delay@i^0,c
  5416   00230A  EF91  F011         	goto	l521
  5417   00230E                     l2397:
  5418   00230E  0E15               	movlw	21
  5419   002310  6E05               	movwf	??_custom_delay^0,c
  5420   002312  0EC6               	movlw	198
  5421   002314                     u3037:
  5422   002314  2EE8               	decfsz	wreg,f,c
  5423   002316  D7FE               	bra	u3037
  5424   002318  2E05               	decfsz	??_custom_delay^0,f,c
  5425   00231A  D7FC               	bra	u3037
  5426   00231C  D000               	nop2	
  5427   00231E  4A06               	infsnz	custom_delay@i^0,f,c
  5428   002320  2A07               	incf	(custom_delay@i+1)^0,f,c
  5429   002322                     l521:
  5430   002322  5003               	movf	custom_delay@temp^0,w,c
  5431   002324  5C06               	subwf	custom_delay@i^0,w,c
  5432   002326  5007               	movf	(custom_delay@i+1)^0,w,c
  5433   002328  0A80               	xorlw	128
  5434   00232A  6E05               	movwf	??_custom_delay^0,c
  5435   00232C  5004               	movf	(custom_delay@temp+1)^0,w,c
  5436   00232E  0A80               	xorlw	128
  5437   002330  5805               	subwfb	??_custom_delay^0,w,c
  5438   002332  A0D8               	btfss	status,0,c
  5439   002334  EF9E  F011         	goto	u1421
  5440   002338  EFA0  F011         	goto	u1420
  5441   00233C                     u1421:
  5442   00233C  EF87  F011         	goto	l2397
  5443   002340                     u1420:
  5444   002340  0012               	return		;funcret
  5445   002342                     __end_of_custom_delay:
  5446                           	callstack 0
  5447                           
  5448 ;; *************** function ___flge *****************
  5449 ;; Defined at:
  5450 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\flge.c"
  5451 ;; Parameters:    Size  Location     Type
  5452 ;;  ff1             4    2[COMRAM] void 
  5453 ;;  ff2             4    6[COMRAM] void 
  5454 ;; Auto vars:     Size  Location     Type
  5455 ;;		None
  5456 ;; Return value:  Size  Location     Type
  5457 ;;		None               void
  5458 ;; Registers used:
  5459 ;;		wreg, status,2, status,0
  5460 ;; Tracked objects:
  5461 ;;		On entry : 0/0
  5462 ;;		On exit  : 0/0
  5463 ;;		Unchanged: 0/0
  5464 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5465 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5466 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5467 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5468 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5469 ;;Total ram usage:       12 bytes
  5470 ;; Hardware stack levels used: 1
  5471 ;; Hardware stack levels required when called: 1
  5472 ;; This function calls:
  5473 ;;		Nothing
  5474 ;; This function is called by:
  5475 ;;		_buggy_color_response
  5476 ;; This function uses a non-reentrant model
  5477 ;;
  5478                           
  5479                           	psect	text31
  5480   001996                     __ptext31:
  5481                           	callstack 0
  5482   001996                     ___flge:
  5483                           	callstack 28
  5484   001996  0E00               	movlw	0
  5485   001998  1403               	andwf	___flge@ff1^0,w,c
  5486   00199A  6E0B               	movwf	??___flge^0,c
  5487   00199C  0E00               	movlw	0
  5488   00199E  1404               	andwf	(___flge@ff1+1)^0,w,c
  5489   0019A0  6E0C               	movwf	(??___flge+1)^0,c
  5490   0019A2  0E80               	movlw	128
  5491   0019A4  1405               	andwf	(___flge@ff1+2)^0,w,c
  5492   0019A6  6E0D               	movwf	(??___flge+2)^0,c
  5493   0019A8  0E7F               	movlw	127
  5494   0019AA  1406               	andwf	(___flge@ff1+3)^0,w,c
  5495   0019AC  6E0E               	movwf	(??___flge+3)^0,c
  5496   0019AE  500B               	movf	??___flge^0,w,c
  5497   0019B0  100C               	iorwf	(??___flge+1)^0,w,c
  5498   0019B2  100D               	iorwf	(??___flge+2)^0,w,c
  5499   0019B4  100E               	iorwf	(??___flge+3)^0,w,c
  5500   0019B6  A4D8               	btfss	status,2,c
  5501   0019B8  EFE0  F00C         	goto	u2171
  5502   0019BC  EFE2  F00C         	goto	u2170
  5503   0019C0                     u2171:
  5504   0019C0  EFEA  F00C         	goto	l3049
  5505   0019C4                     u2170:
  5506   0019C4  0E00               	movlw	0
  5507   0019C6  6E03               	movwf	___flge@ff1^0,c
  5508   0019C8  0E00               	movlw	0
  5509   0019CA  6E04               	movwf	(___flge@ff1+1)^0,c
  5510   0019CC  0E00               	movlw	0
  5511   0019CE  6E05               	movwf	(___flge@ff1+2)^0,c
  5512   0019D0  0E00               	movlw	0
  5513   0019D2  6E06               	movwf	(___flge@ff1+3)^0,c
  5514   0019D4                     l3049:
  5515   0019D4  0E00               	movlw	0
  5516   0019D6  1407               	andwf	___flge@ff2^0,w,c
  5517   0019D8  6E0B               	movwf	??___flge^0,c
  5518   0019DA  0E00               	movlw	0
  5519   0019DC  1408               	andwf	(___flge@ff2+1)^0,w,c
  5520   0019DE  6E0C               	movwf	(??___flge+1)^0,c
  5521   0019E0  0E80               	movlw	128
  5522   0019E2  1409               	andwf	(___flge@ff2+2)^0,w,c
  5523   0019E4  6E0D               	movwf	(??___flge+2)^0,c
  5524   0019E6  0E7F               	movlw	127
  5525   0019E8  140A               	andwf	(___flge@ff2+3)^0,w,c
  5526   0019EA  6E0E               	movwf	(??___flge+3)^0,c
  5527   0019EC  500B               	movf	??___flge^0,w,c
  5528   0019EE  100C               	iorwf	(??___flge+1)^0,w,c
  5529   0019F0  100D               	iorwf	(??___flge+2)^0,w,c
  5530   0019F2  100E               	iorwf	(??___flge+3)^0,w,c
  5531   0019F4  A4D8               	btfss	status,2,c
  5532   0019F6  EFFF  F00C         	goto	u2181
  5533   0019FA  EF01  F00D         	goto	u2180
  5534   0019FE                     u2181:
  5535   0019FE  EF09  F00D         	goto	l3053
  5536   001A02                     u2180:
  5537   001A02  0E00               	movlw	0
  5538   001A04  6E07               	movwf	___flge@ff2^0,c
  5539   001A06  0E00               	movlw	0
  5540   001A08  6E08               	movwf	(___flge@ff2+1)^0,c
  5541   001A0A  0E00               	movlw	0
  5542   001A0C  6E09               	movwf	(___flge@ff2+2)^0,c
  5543   001A0E  0E00               	movlw	0
  5544   001A10  6E0A               	movwf	(___flge@ff2+3)^0,c
  5545   001A12                     l3053:
  5546   001A12  AE06               	btfss	(___flge@ff1+3)^0,7,c
  5547   001A14  EF0E  F00D         	goto	u2191
  5548   001A18  EF10  F00D         	goto	u2190
  5549   001A1C                     u2191:
  5550   001A1C  EF19  F00D         	goto	l3057
  5551   001A20                     u2190:
  5552   001A20  6C03               	negf	___flge@ff1^0,c
  5553   001A22  1E04               	comf	(___flge@ff1+1)^0,f,c
  5554   001A24  B0D8               	btfsc	status,0,c
  5555   001A26  2A04               	incf	(___flge@ff1+1)^0,f,c
  5556   001A28  1E05               	comf	(___flge@ff1+2)^0,f,c
  5557   001A2A  B0D8               	btfsc	status,0,c
  5558   001A2C  2A05               	incf	(___flge@ff1+2)^0,f,c
  5559   001A2E  0E80               	movlw	128
  5560   001A30  5606               	subfwb	(___flge@ff1+3)^0,f,c
  5561   001A32                     l3057:
  5562   001A32  AE0A               	btfss	(___flge@ff2+3)^0,7,c
  5563   001A34  EF1E  F00D         	goto	u2201
  5564   001A38  EF20  F00D         	goto	u2200
  5565   001A3C                     u2201:
  5566   001A3C  EF29  F00D         	goto	l867
  5567   001A40                     u2200:
  5568   001A40  6C07               	negf	___flge@ff2^0,c
  5569   001A42  1E08               	comf	(___flge@ff2+1)^0,f,c
  5570   001A44  B0D8               	btfsc	status,0,c
  5571   001A46  2A08               	incf	(___flge@ff2+1)^0,f,c
  5572   001A48  1E09               	comf	(___flge@ff2+2)^0,f,c
  5573   001A4A  B0D8               	btfsc	status,0,c
  5574   001A4C  2A09               	incf	(___flge@ff2+2)^0,f,c
  5575   001A4E  0E80               	movlw	128
  5576   001A50  560A               	subfwb	(___flge@ff2+3)^0,f,c
  5577   001A52                     l867:
  5578   001A52  0E00               	movlw	0
  5579   001A54  1A03               	xorwf	___flge@ff1^0,f,c
  5580   001A56  0E00               	movlw	0
  5581   001A58  1A04               	xorwf	(___flge@ff1+1)^0,f,c
  5582   001A5A  0E00               	movlw	0
  5583   001A5C  1A05               	xorwf	(___flge@ff1+2)^0,f,c
  5584   001A5E  0E80               	movlw	128
  5585   001A60  1A06               	xorwf	(___flge@ff1+3)^0,f,c
  5586   001A62  0E00               	movlw	0
  5587   001A64  1A07               	xorwf	___flge@ff2^0,f,c
  5588   001A66  0E00               	movlw	0
  5589   001A68  1A08               	xorwf	(___flge@ff2+1)^0,f,c
  5590   001A6A  0E00               	movlw	0
  5591   001A6C  1A09               	xorwf	(___flge@ff2+2)^0,f,c
  5592   001A6E  0E80               	movlw	128
  5593   001A70  1A0A               	xorwf	(___flge@ff2+3)^0,f,c
  5594   001A72  5007               	movf	___flge@ff2^0,w,c
  5595   001A74  5C03               	subwf	___flge@ff1^0,w,c
  5596   001A76  5008               	movf	(___flge@ff2+1)^0,w,c
  5597   001A78  5804               	subwfb	(___flge@ff1+1)^0,w,c
  5598   001A7A  5009               	movf	(___flge@ff2+2)^0,w,c
  5599   001A7C  5805               	subwfb	(___flge@ff1+2)^0,w,c
  5600   001A7E  500A               	movf	(___flge@ff2+3)^0,w,c
  5601   001A80  5806               	subwfb	(___flge@ff1+3)^0,w,c
  5602   001A82  B0D8               	btfsc	status,0,c
  5603   001A84  EF46  F00D         	goto	u2211
  5604   001A88  EF48  F00D         	goto	u2210
  5605   001A8C                     u2211:
  5606   001A8C  EF4B  F00D         	goto	l3063
  5607   001A90                     u2210:
  5608   001A90  90D8               	bcf	status,0,c
  5609   001A92  EF4C  F00D         	goto	l872
  5610   001A96                     l3063:
  5611   001A96  80D8               	bsf	status,0,c
  5612   001A98                     l872:
  5613   001A98  0012               	return		;funcret
  5614   001A9A                     __end_of___flge:
  5615                           	callstack 0
  5616                           
  5617 ;; *************** function _READcolor *****************
  5618 ;; Defined at:
  5619 ;;		line 112 in file "color.c"
  5620 ;; Parameters:    Size  Location     Type
  5621 ;;  c               2   41[COMRAM] PTR struct colors
  5622 ;;		 -> color(20), 
  5623 ;; Auto vars:     Size  Location     Type
  5624 ;;		None
  5625 ;; Return value:  Size  Location     Type
  5626 ;;                  1    wreg      void 
  5627 ;; Registers used:
  5628 ;;		wreg, status,2, status,0, cstack
  5629 ;; Tracked objects:
  5630 ;;		On entry : 0/0
  5631 ;;		On exit  : 0/0
  5632 ;;		Unchanged: 0/0
  5633 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5634 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5635 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5636 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5637 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5638 ;;Total ram usage:        2 bytes
  5639 ;; Hardware stack levels used: 1
  5640 ;; Hardware stack levels required when called: 4
  5641 ;; This function calls:
  5642 ;;		___fldiv
  5643 ;;		___xxtofl
  5644 ;;		_color_read_Blue
  5645 ;;		_color_read_Clear
  5646 ;;		_color_read_Green
  5647 ;;		_color_read_Red
  5648 ;; This function is called by:
  5649 ;;		_buggy_color_response
  5650 ;; This function uses a non-reentrant model
  5651 ;;
  5652                           
  5653                           	psect	text32
  5654   001608                     __ptext32:
  5655                           	callstack 0
  5656   001608                     _READcolor:
  5657                           	callstack 25
  5658   001608                     
  5659                           ;color.c: 114:     color.R = color_read_Red();
  5660   001608  EC59  F010         	call	_color_read_Red	;wreg free
  5661   00160C  C007  F044         	movff	?_color_read_Red,_color
  5662   001610  C008  F045         	movff	?_color_read_Red+1,_color+1
  5663                           
  5664                           ;color.c: 115:     color.B = color_read_Blue();
  5665   001614  ECD1  F010         	call	_color_read_Blue	;wreg free
  5666   001618  C007  F046         	movff	?_color_read_Blue,_color+2
  5667   00161C  C008  F047         	movff	?_color_read_Blue+1,_color+3
  5668                           
  5669                           ;color.c: 116:     color.G = color_read_Green();
  5670   001620  EC81  F010         	call	_color_read_Green	;wreg free
  5671   001624  C007  F048         	movff	?_color_read_Green,_color+4
  5672   001628  C008  F049         	movff	?_color_read_Green+1,_color+5
  5673                           
  5674                           ;color.c: 117:     color.C = color_read_Clear();
  5675   00162C  ECA9  F010         	call	_color_read_Clear	;wreg free
  5676   001630  C007  F04A         	movff	?_color_read_Clear,_color+6
  5677   001634  C008  F04B         	movff	?_color_read_Clear+1,_color+7
  5678                           
  5679                           ;color.c: 119:     color.R_norm = (float)color.R / (float)color.C;
  5680   001638  C044  F003         	movff	_color,___xxtofl@val
  5681   00163C  C045  F004         	movff	_color+1,___xxtofl@val+1
  5682   001640  6A05               	clrf	(___xxtofl@val+2)^0,c
  5683   001642  6A06               	clrf	(___xxtofl@val+3)^0,c
  5684   001644  0E00               	movlw	0
  5685   001646  ECE4  F007         	call	___xxtofl
  5686   00164A  C003  F011         	movff	?___xxtofl,___fldiv@b
  5687   00164E  C004  F012         	movff	?___xxtofl+1,___fldiv@b+1
  5688   001652  C005  F013         	movff	?___xxtofl+2,___fldiv@b+2
  5689   001656  C006  F014         	movff	?___xxtofl+3,___fldiv@b+3
  5690   00165A  C04A  F003         	movff	_color+6,___xxtofl@val
  5691   00165E  C04B  F004         	movff	_color+7,___xxtofl@val+1
  5692   001662  6A05               	clrf	(___xxtofl@val+2)^0,c
  5693   001664  6A06               	clrf	(___xxtofl@val+3)^0,c
  5694   001666  0E00               	movlw	0
  5695   001668  ECE4  F007         	call	___xxtofl
  5696   00166C  C003  F015         	movff	?___xxtofl,___fldiv@a
  5697   001670  C004  F016         	movff	?___xxtofl+1,___fldiv@a+1
  5698   001674  C005  F017         	movff	?___xxtofl+2,___fldiv@a+2
  5699   001678  C006  F018         	movff	?___xxtofl+3,___fldiv@a+3
  5700   00167C  ECAA  F004         	call	___fldiv	;wreg free
  5701   001680  C011  F04C         	movff	?___fldiv,_color+8
  5702   001684  C012  F04D         	movff	?___fldiv+1,_color+9
  5703   001688  C013  F04E         	movff	?___fldiv+2,_color+10
  5704   00168C  C014  F04F         	movff	?___fldiv+3,_color+11
  5705                           
  5706                           ;color.c: 120:     color.B_norm = (float)color.B / (float)color.C;
  5707   001690  C046  F003         	movff	_color+2,___xxtofl@val
  5708   001694  C047  F004         	movff	_color+3,___xxtofl@val+1
  5709   001698  6A05               	clrf	(___xxtofl@val+2)^0,c
  5710   00169A  6A06               	clrf	(___xxtofl@val+3)^0,c
  5711   00169C  0E00               	movlw	0
  5712   00169E  ECE4  F007         	call	___xxtofl
  5713   0016A2  C003  F011         	movff	?___xxtofl,___fldiv@b
  5714   0016A6  C004  F012         	movff	?___xxtofl+1,___fldiv@b+1
  5715   0016AA  C005  F013         	movff	?___xxtofl+2,___fldiv@b+2
  5716   0016AE  C006  F014         	movff	?___xxtofl+3,___fldiv@b+3
  5717   0016B2  C04A  F003         	movff	_color+6,___xxtofl@val
  5718   0016B6  C04B  F004         	movff	_color+7,___xxtofl@val+1
  5719   0016BA  6A05               	clrf	(___xxtofl@val+2)^0,c
  5720   0016BC  6A06               	clrf	(___xxtofl@val+3)^0,c
  5721   0016BE  0E00               	movlw	0
  5722   0016C0  ECE4  F007         	call	___xxtofl
  5723   0016C4  C003  F015         	movff	?___xxtofl,___fldiv@a
  5724   0016C8  C004  F016         	movff	?___xxtofl+1,___fldiv@a+1
  5725   0016CC  C005  F017         	movff	?___xxtofl+2,___fldiv@a+2
  5726   0016D0  C006  F018         	movff	?___xxtofl+3,___fldiv@a+3
  5727   0016D4  ECAA  F004         	call	___fldiv	;wreg free
  5728   0016D8  C011  F050         	movff	?___fldiv,_color+12
  5729   0016DC  C012  F051         	movff	?___fldiv+1,_color+13
  5730   0016E0  C013  F052         	movff	?___fldiv+2,_color+14
  5731   0016E4  C014  F053         	movff	?___fldiv+3,_color+15
  5732                           
  5733                           ;color.c: 121:     color.G_norm = (float)color.G / (float)color.C;
  5734   0016E8  C048  F003         	movff	_color+4,___xxtofl@val
  5735   0016EC  C049  F004         	movff	_color+5,___xxtofl@val+1
  5736   0016F0  6A05               	clrf	(___xxtofl@val+2)^0,c
  5737   0016F2  6A06               	clrf	(___xxtofl@val+3)^0,c
  5738   0016F4  0E00               	movlw	0
  5739   0016F6  ECE4  F007         	call	___xxtofl
  5740   0016FA  C003  F011         	movff	?___xxtofl,___fldiv@b
  5741   0016FE  C004  F012         	movff	?___xxtofl+1,___fldiv@b+1
  5742   001702  C005  F013         	movff	?___xxtofl+2,___fldiv@b+2
  5743   001706  C006  F014         	movff	?___xxtofl+3,___fldiv@b+3
  5744   00170A  C04A  F003         	movff	_color+6,___xxtofl@val
  5745   00170E  C04B  F004         	movff	_color+7,___xxtofl@val+1
  5746   001712  6A05               	clrf	(___xxtofl@val+2)^0,c
  5747   001714  6A06               	clrf	(___xxtofl@val+3)^0,c
  5748   001716  0E00               	movlw	0
  5749   001718  ECE4  F007         	call	___xxtofl
  5750   00171C  C003  F015         	movff	?___xxtofl,___fldiv@a
  5751   001720  C004  F016         	movff	?___xxtofl+1,___fldiv@a+1
  5752   001724  C005  F017         	movff	?___xxtofl+2,___fldiv@a+2
  5753   001728  C006  F018         	movff	?___xxtofl+3,___fldiv@a+3
  5754   00172C  ECAA  F004         	call	___fldiv	;wreg free
  5755   001730  C011  F054         	movff	?___fldiv,_color+16
  5756   001734  C012  F055         	movff	?___fldiv+1,_color+17
  5757   001738  C013  F056         	movff	?___fldiv+2,_color+18
  5758   00173C  C014  F057         	movff	?___fldiv+3,_color+19
  5759   001740  0012               	return		;funcret
  5760   001742                     __end_of_READcolor:
  5761                           	callstack 0
  5762                           
  5763 ;; *************** function _color_read_Red *****************
  5764 ;; Defined at:
  5765 ;;		line 39 in file "color.c"
  5766 ;; Parameters:    Size  Location     Type
  5767 ;;		None
  5768 ;; Auto vars:     Size  Location     Type
  5769 ;;  tmp             2   11[COMRAM] unsigned int 
  5770 ;; Return value:  Size  Location     Type
  5771 ;;                  2    6[COMRAM] unsigned int 
  5772 ;; Registers used:
  5773 ;;		wreg, status,2, status,0, cstack
  5774 ;; Tracked objects:
  5775 ;;		On entry : 0/0
  5776 ;;		On exit  : 0/0
  5777 ;;		Unchanged: 0/0
  5778 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5779 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5780 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5781 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5782 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5783 ;;Total ram usage:        7 bytes
  5784 ;; Hardware stack levels used: 1
  5785 ;; Hardware stack levels required when called: 3
  5786 ;; This function calls:
  5787 ;;		_I2C_2_Master_Read
  5788 ;;		_I2C_2_Master_RepStart
  5789 ;;		_I2C_2_Master_Start
  5790 ;;		_I2C_2_Master_Stop
  5791 ;;		_I2C_2_Master_Write
  5792 ;; This function is called by:
  5793 ;;		_READcolor
  5794 ;; This function uses a non-reentrant model
  5795 ;;
  5796                           
  5797                           	psect	text33
  5798   0020B2                     __ptext33:
  5799                           	callstack 0
  5800   0020B2                     _color_read_Red:
  5801                           	callstack 25
  5802   0020B2                     
  5803                           ;color.c: 41:  unsigned int tmp;;color.c: 42:  I2C_2_Master_Start();
  5804   0020B2  EC6B  F012         	call	_I2C_2_Master_Start	;wreg free
  5805                           
  5806                           ;color.c: 43:  I2C_2_Master_Write(0x52 | 0x00);
  5807   0020B6  0E52               	movlw	82
  5808   0020B8  EC60  F012         	call	_I2C_2_Master_Write
  5809                           
  5810                           ;color.c: 45:  I2C_2_Master_Write(0xA0 | 0x16);
  5811   0020BC  0EB6               	movlw	182
  5812   0020BE  EC60  F012         	call	_I2C_2_Master_Write
  5813                           
  5814                           ;color.c: 46:  I2C_2_Master_RepStart();
  5815   0020C2  EC70  F012         	call	_I2C_2_Master_RepStart	;wreg free
  5816                           
  5817                           ;color.c: 47:  I2C_2_Master_Write(0x52 | 0x01);
  5818   0020C6  0E53               	movlw	83
  5819   0020C8  EC60  F012         	call	_I2C_2_Master_Write
  5820                           
  5821                           ;color.c: 48:  tmp=I2C_2_Master_Read(1);
  5822   0020CC  0E01               	movlw	1
  5823   0020CE  EC40  F011         	call	_I2C_2_Master_Read
  5824   0020D2  6E09               	movwf	??_color_read_Red^0,c
  5825   0020D4  5009               	movf	??_color_read_Red^0,w,c
  5826   0020D6  6E0C               	movwf	color_read_Red@tmp^0,c
  5827   0020D8  6A0D               	clrf	(color_read_Red@tmp+1)^0,c
  5828                           
  5829                           ;color.c: 49:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  5830   0020DA  0E00               	movlw	0
  5831   0020DC  EC40  F011         	call	_I2C_2_Master_Read
  5832   0020E0  6E09               	movwf	??_color_read_Red^0,c
  5833   0020E2  5009               	movf	??_color_read_Red^0,w,c
  5834   0020E4  6E0B               	movwf	(??_color_read_Red+2)^0,c
  5835   0020E6  6A0A               	clrf	(??_color_read_Red+1)^0,c
  5836   0020E8  500C               	movf	color_read_Red@tmp^0,w,c
  5837   0020EA  100A               	iorwf	(??_color_read_Red+1)^0,w,c
  5838   0020EC  6E0C               	movwf	color_read_Red@tmp^0,c
  5839   0020EE  500D               	movf	(color_read_Red@tmp+1)^0,w,c
  5840   0020F0  100B               	iorwf	(??_color_read_Red+2)^0,w,c
  5841   0020F2  6E0D               	movwf	(color_read_Red@tmp+1)^0,c
  5842                           
  5843                           ;color.c: 50:  I2C_2_Master_Stop();
  5844   0020F4  EC66  F012         	call	_I2C_2_Master_Stop	;wreg free
  5845   0020F8                     
  5846                           ;color.c: 51:  return tmp;
  5847   0020F8  C00C  F007         	movff	color_read_Red@tmp,?_color_read_Red
  5848   0020FC  C00D  F008         	movff	color_read_Red@tmp+1,?_color_read_Red+1
  5849   002100  0012               	return		;funcret
  5850   002102                     __end_of_color_read_Red:
  5851                           	callstack 0
  5852                           
  5853 ;; *************** function _color_read_Green *****************
  5854 ;; Defined at:
  5855 ;;		line 75 in file "color.c"
  5856 ;; Parameters:    Size  Location     Type
  5857 ;;		None
  5858 ;; Auto vars:     Size  Location     Type
  5859 ;;  tmp             2   11[COMRAM] unsigned int 
  5860 ;; Return value:  Size  Location     Type
  5861 ;;                  2    6[COMRAM] unsigned int 
  5862 ;; Registers used:
  5863 ;;		wreg, status,2, status,0, cstack
  5864 ;; Tracked objects:
  5865 ;;		On entry : 0/0
  5866 ;;		On exit  : 0/0
  5867 ;;		Unchanged: 0/0
  5868 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5869 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5870 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5871 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5872 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5873 ;;Total ram usage:        7 bytes
  5874 ;; Hardware stack levels used: 1
  5875 ;; Hardware stack levels required when called: 3
  5876 ;; This function calls:
  5877 ;;		_I2C_2_Master_Read
  5878 ;;		_I2C_2_Master_RepStart
  5879 ;;		_I2C_2_Master_Start
  5880 ;;		_I2C_2_Master_Stop
  5881 ;;		_I2C_2_Master_Write
  5882 ;; This function is called by:
  5883 ;;		_READcolor
  5884 ;; This function uses a non-reentrant model
  5885 ;;
  5886                           
  5887                           	psect	text34
  5888   002102                     __ptext34:
  5889                           	callstack 0
  5890   002102                     _color_read_Green:
  5891                           	callstack 25
  5892   002102                     
  5893                           ;color.c: 77:  unsigned int tmp;;color.c: 78:  I2C_2_Master_Start();
  5894   002102  EC6B  F012         	call	_I2C_2_Master_Start	;wreg free
  5895                           
  5896                           ;color.c: 79:  I2C_2_Master_Write(0x52 | 0x00);
  5897   002106  0E52               	movlw	82
  5898   002108  EC60  F012         	call	_I2C_2_Master_Write
  5899                           
  5900                           ;color.c: 81:  I2C_2_Master_Write(0xA0 | 0x18);
  5901   00210C  0EB8               	movlw	184
  5902   00210E  EC60  F012         	call	_I2C_2_Master_Write
  5903                           
  5904                           ;color.c: 82:  I2C_2_Master_RepStart();
  5905   002112  EC70  F012         	call	_I2C_2_Master_RepStart	;wreg free
  5906                           
  5907                           ;color.c: 83:  I2C_2_Master_Write(0x52 | 0x01);
  5908   002116  0E53               	movlw	83
  5909   002118  EC60  F012         	call	_I2C_2_Master_Write
  5910                           
  5911                           ;color.c: 84:  tmp=I2C_2_Master_Read(1);
  5912   00211C  0E01               	movlw	1
  5913   00211E  EC40  F011         	call	_I2C_2_Master_Read
  5914   002122  6E09               	movwf	??_color_read_Green^0,c
  5915   002124  5009               	movf	??_color_read_Green^0,w,c
  5916   002126  6E0C               	movwf	color_read_Green@tmp^0,c
  5917   002128  6A0D               	clrf	(color_read_Green@tmp+1)^0,c
  5918                           
  5919                           ;color.c: 85:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  5920   00212A  0E00               	movlw	0
  5921   00212C  EC40  F011         	call	_I2C_2_Master_Read
  5922   002130  6E09               	movwf	??_color_read_Green^0,c
  5923   002132  5009               	movf	??_color_read_Green^0,w,c
  5924   002134  6E0B               	movwf	(??_color_read_Green+2)^0,c
  5925   002136  6A0A               	clrf	(??_color_read_Green+1)^0,c
  5926   002138  500C               	movf	color_read_Green@tmp^0,w,c
  5927   00213A  100A               	iorwf	(??_color_read_Green+1)^0,w,c
  5928   00213C  6E0C               	movwf	color_read_Green@tmp^0,c
  5929   00213E  500D               	movf	(color_read_Green@tmp+1)^0,w,c
  5930   002140  100B               	iorwf	(??_color_read_Green+2)^0,w,c
  5931   002142  6E0D               	movwf	(color_read_Green@tmp+1)^0,c
  5932                           
  5933                           ;color.c: 86:  I2C_2_Master_Stop();
  5934   002144  EC66  F012         	call	_I2C_2_Master_Stop	;wreg free
  5935   002148                     
  5936                           ;color.c: 87:  return tmp;
  5937   002148  C00C  F007         	movff	color_read_Green@tmp,?_color_read_Green
  5938   00214C  C00D  F008         	movff	color_read_Green@tmp+1,?_color_read_Green+1
  5939   002150  0012               	return		;funcret
  5940   002152                     __end_of_color_read_Green:
  5941                           	callstack 0
  5942                           
  5943 ;; *************** function _color_read_Clear *****************
  5944 ;; Defined at:
  5945 ;;		line 93 in file "color.c"
  5946 ;; Parameters:    Size  Location     Type
  5947 ;;		None
  5948 ;; Auto vars:     Size  Location     Type
  5949 ;;  tmp             2   11[COMRAM] unsigned int 
  5950 ;; Return value:  Size  Location     Type
  5951 ;;                  2    6[COMRAM] unsigned int 
  5952 ;; Registers used:
  5953 ;;		wreg, status,2, status,0, cstack
  5954 ;; Tracked objects:
  5955 ;;		On entry : 0/0
  5956 ;;		On exit  : 0/0
  5957 ;;		Unchanged: 0/0
  5958 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5959 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5960 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5961 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5962 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5963 ;;Total ram usage:        7 bytes
  5964 ;; Hardware stack levels used: 1
  5965 ;; Hardware stack levels required when called: 3
  5966 ;; This function calls:
  5967 ;;		_I2C_2_Master_Read
  5968 ;;		_I2C_2_Master_RepStart
  5969 ;;		_I2C_2_Master_Start
  5970 ;;		_I2C_2_Master_Stop
  5971 ;;		_I2C_2_Master_Write
  5972 ;; This function is called by:
  5973 ;;		_READcolor
  5974 ;; This function uses a non-reentrant model
  5975 ;;
  5976                           
  5977                           	psect	text35
  5978   002152                     __ptext35:
  5979                           	callstack 0
  5980   002152                     _color_read_Clear:
  5981                           	callstack 25
  5982   002152                     
  5983                           ;color.c: 95:  unsigned int tmp;;color.c: 96:  I2C_2_Master_Start();
  5984   002152  EC6B  F012         	call	_I2C_2_Master_Start	;wreg free
  5985                           
  5986                           ;color.c: 97:  I2C_2_Master_Write(0x52 | 0x00);
  5987   002156  0E52               	movlw	82
  5988   002158  EC60  F012         	call	_I2C_2_Master_Write
  5989                           
  5990                           ;color.c: 99:  I2C_2_Master_Write(0xA0 | 0x14);
  5991   00215C  0EB4               	movlw	180
  5992   00215E  EC60  F012         	call	_I2C_2_Master_Write
  5993                           
  5994                           ;color.c: 100:  I2C_2_Master_RepStart();
  5995   002162  EC70  F012         	call	_I2C_2_Master_RepStart	;wreg free
  5996                           
  5997                           ;color.c: 101:  I2C_2_Master_Write(0x52 | 0x01);
  5998   002166  0E53               	movlw	83
  5999   002168  EC60  F012         	call	_I2C_2_Master_Write
  6000                           
  6001                           ;color.c: 102:  tmp=I2C_2_Master_Read(1);
  6002   00216C  0E01               	movlw	1
  6003   00216E  EC40  F011         	call	_I2C_2_Master_Read
  6004   002172  6E09               	movwf	??_color_read_Clear^0,c
  6005   002174  5009               	movf	??_color_read_Clear^0,w,c
  6006   002176  6E0C               	movwf	color_read_Clear@tmp^0,c
  6007   002178  6A0D               	clrf	(color_read_Clear@tmp+1)^0,c
  6008                           
  6009                           ;color.c: 103:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  6010   00217A  0E00               	movlw	0
  6011   00217C  EC40  F011         	call	_I2C_2_Master_Read
  6012   002180  6E09               	movwf	??_color_read_Clear^0,c
  6013   002182  5009               	movf	??_color_read_Clear^0,w,c
  6014   002184  6E0B               	movwf	(??_color_read_Clear+2)^0,c
  6015   002186  6A0A               	clrf	(??_color_read_Clear+1)^0,c
  6016   002188  500C               	movf	color_read_Clear@tmp^0,w,c
  6017   00218A  100A               	iorwf	(??_color_read_Clear+1)^0,w,c
  6018   00218C  6E0C               	movwf	color_read_Clear@tmp^0,c
  6019   00218E  500D               	movf	(color_read_Clear@tmp+1)^0,w,c
  6020   002190  100B               	iorwf	(??_color_read_Clear+2)^0,w,c
  6021   002192  6E0D               	movwf	(color_read_Clear@tmp+1)^0,c
  6022                           
  6023                           ;color.c: 104:  I2C_2_Master_Stop();
  6024   002194  EC66  F012         	call	_I2C_2_Master_Stop	;wreg free
  6025   002198                     
  6026                           ;color.c: 105:  return tmp;
  6027   002198  C00C  F007         	movff	color_read_Clear@tmp,?_color_read_Clear
  6028   00219C  C00D  F008         	movff	color_read_Clear@tmp+1,?_color_read_Clear+1
  6029   0021A0  0012               	return		;funcret
  6030   0021A2                     __end_of_color_read_Clear:
  6031                           	callstack 0
  6032                           
  6033 ;; *************** function _color_read_Blue *****************
  6034 ;; Defined at:
  6035 ;;		line 57 in file "color.c"
  6036 ;; Parameters:    Size  Location     Type
  6037 ;;		None
  6038 ;; Auto vars:     Size  Location     Type
  6039 ;;  tmp             2   11[COMRAM] unsigned int 
  6040 ;; Return value:  Size  Location     Type
  6041 ;;                  2    6[COMRAM] unsigned int 
  6042 ;; Registers used:
  6043 ;;		wreg, status,2, status,0, cstack
  6044 ;; Tracked objects:
  6045 ;;		On entry : 0/0
  6046 ;;		On exit  : 0/0
  6047 ;;		Unchanged: 0/0
  6048 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6049 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6050 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6051 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6052 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6053 ;;Total ram usage:        7 bytes
  6054 ;; Hardware stack levels used: 1
  6055 ;; Hardware stack levels required when called: 3
  6056 ;; This function calls:
  6057 ;;		_I2C_2_Master_Read
  6058 ;;		_I2C_2_Master_RepStart
  6059 ;;		_I2C_2_Master_Start
  6060 ;;		_I2C_2_Master_Stop
  6061 ;;		_I2C_2_Master_Write
  6062 ;; This function is called by:
  6063 ;;		_READcolor
  6064 ;; This function uses a non-reentrant model
  6065 ;;
  6066                           
  6067                           	psect	text36
  6068   0021A2                     __ptext36:
  6069                           	callstack 0
  6070   0021A2                     _color_read_Blue:
  6071                           	callstack 25
  6072   0021A2                     
  6073                           ;color.c: 59:  unsigned int tmp;;color.c: 60:  I2C_2_Master_Start();
  6074   0021A2  EC6B  F012         	call	_I2C_2_Master_Start	;wreg free
  6075                           
  6076                           ;color.c: 61:  I2C_2_Master_Write(0x52 | 0x00);
  6077   0021A6  0E52               	movlw	82
  6078   0021A8  EC60  F012         	call	_I2C_2_Master_Write
  6079                           
  6080                           ;color.c: 63:  I2C_2_Master_Write(0xA0 | 0x1A);
  6081   0021AC  0EBA               	movlw	186
  6082   0021AE  EC60  F012         	call	_I2C_2_Master_Write
  6083                           
  6084                           ;color.c: 64:  I2C_2_Master_RepStart();
  6085   0021B2  EC70  F012         	call	_I2C_2_Master_RepStart	;wreg free
  6086                           
  6087                           ;color.c: 65:  I2C_2_Master_Write(0x52 | 0x01);
  6088   0021B6  0E53               	movlw	83
  6089   0021B8  EC60  F012         	call	_I2C_2_Master_Write
  6090                           
  6091                           ;color.c: 66:  tmp=I2C_2_Master_Read(1);
  6092   0021BC  0E01               	movlw	1
  6093   0021BE  EC40  F011         	call	_I2C_2_Master_Read
  6094   0021C2  6E09               	movwf	??_color_read_Blue^0,c
  6095   0021C4  5009               	movf	??_color_read_Blue^0,w,c
  6096   0021C6  6E0C               	movwf	color_read_Blue@tmp^0,c
  6097   0021C8  6A0D               	clrf	(color_read_Blue@tmp+1)^0,c
  6098                           
  6099                           ;color.c: 67:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  6100   0021CA  0E00               	movlw	0
  6101   0021CC  EC40  F011         	call	_I2C_2_Master_Read
  6102   0021D0  6E09               	movwf	??_color_read_Blue^0,c
  6103   0021D2  5009               	movf	??_color_read_Blue^0,w,c
  6104   0021D4  6E0B               	movwf	(??_color_read_Blue+2)^0,c
  6105   0021D6  6A0A               	clrf	(??_color_read_Blue+1)^0,c
  6106   0021D8  500C               	movf	color_read_Blue@tmp^0,w,c
  6107   0021DA  100A               	iorwf	(??_color_read_Blue+1)^0,w,c
  6108   0021DC  6E0C               	movwf	color_read_Blue@tmp^0,c
  6109   0021DE  500D               	movf	(color_read_Blue@tmp+1)^0,w,c
  6110   0021E0  100B               	iorwf	(??_color_read_Blue+2)^0,w,c
  6111   0021E2  6E0D               	movwf	(color_read_Blue@tmp+1)^0,c
  6112                           
  6113                           ;color.c: 68:  I2C_2_Master_Stop();
  6114   0021E4  EC66  F012         	call	_I2C_2_Master_Stop	;wreg free
  6115   0021E8                     
  6116                           ;color.c: 69:  return tmp;
  6117   0021E8  C00C  F007         	movff	color_read_Blue@tmp,?_color_read_Blue
  6118   0021EC  C00D  F008         	movff	color_read_Blue@tmp+1,?_color_read_Blue+1
  6119   0021F0  0012               	return		;funcret
  6120   0021F2                     __end_of_color_read_Blue:
  6121                           	callstack 0
  6122                           
  6123 ;; *************** function _I2C_2_Master_Write *****************
  6124 ;; Defined at:
  6125 ;;		line 63 in file "i2c.c"
  6126 ;; Parameters:    Size  Location     Type
  6127 ;;  data_byte       1    wreg     unsigned char 
  6128 ;; Auto vars:     Size  Location     Type
  6129 ;;  data_byte       1    3[COMRAM] unsigned char 
  6130 ;; Return value:  Size  Location     Type
  6131 ;;                  1    wreg      void 
  6132 ;; Registers used:
  6133 ;;		wreg, status,2, status,0, cstack
  6134 ;; Tracked objects:
  6135 ;;		On entry : 0/0
  6136 ;;		On exit  : 0/0
  6137 ;;		Unchanged: 0/0
  6138 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6139 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6140 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6141 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6142 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6143 ;;Total ram usage:        1 bytes
  6144 ;; Hardware stack levels used: 1
  6145 ;; Hardware stack levels required when called: 2
  6146 ;; This function calls:
  6147 ;;		_I2C_2_Master_Idle
  6148 ;; This function is called by:
  6149 ;;		_color_writetoaddr
  6150 ;;		_color_read_Red
  6151 ;;		_color_read_Blue
  6152 ;;		_color_read_Green
  6153 ;;		_color_read_Clear
  6154 ;; This function uses a non-reentrant model
  6155 ;;
  6156                           
  6157                           	psect	text37
  6158   0024C0                     __ptext37:
  6159                           	callstack 0
  6160   0024C0                     _I2C_2_Master_Write:
  6161                           	callstack 25
  6162                           
  6163                           ;incstack = 0
  6164                           ;I2C_2_Master_Write@data_byte stored from wreg
  6165   0024C0  6E04               	movwf	I2C_2_Master_Write@data_byte^0,c
  6166   0024C2                     
  6167                           ;i2c.c: 63: void I2C_2_Master_Write(unsigned char data_byte);i2c.c: 64: {;i2c.c: 65:   I
      +                          2C_2_Master_Idle();
  6168   0024C2  ECD0  F011         	call	_I2C_2_Master_Idle	;wreg free
  6169   0024C6                     
  6170                           ;i2c.c: 66:   SSP2BUF = data_byte;
  6171   0024C6  C004  FED5         	movff	I2C_2_Master_Write@data_byte,3797	;volatile
  6172   0024CA  0012               	return		;funcret
  6173   0024CC                     __end_of_I2C_2_Master_Write:
  6174                           	callstack 0
  6175                           
  6176 ;; *************** function _I2C_2_Master_Stop *****************
  6177 ;; Defined at:
  6178 ;;		line 54 in file "i2c.c"
  6179 ;; Parameters:    Size  Location     Type
  6180 ;;		None
  6181 ;; Auto vars:     Size  Location     Type
  6182 ;;		None
  6183 ;; Return value:  Size  Location     Type
  6184 ;;                  1    wreg      void 
  6185 ;; Registers used:
  6186 ;;		wreg, status,2, status,0, cstack
  6187 ;; Tracked objects:
  6188 ;;		On entry : 0/0
  6189 ;;		On exit  : 0/0
  6190 ;;		Unchanged: 0/0
  6191 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6192 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6193 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6194 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6195 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6196 ;;Total ram usage:        0 bytes
  6197 ;; Hardware stack levels used: 1
  6198 ;; Hardware stack levels required when called: 2
  6199 ;; This function calls:
  6200 ;;		_I2C_2_Master_Idle
  6201 ;; This function is called by:
  6202 ;;		_color_writetoaddr
  6203 ;;		_color_read_Red
  6204 ;;		_color_read_Blue
  6205 ;;		_color_read_Green
  6206 ;;		_color_read_Clear
  6207 ;; This function uses a non-reentrant model
  6208 ;;
  6209                           
  6210                           	psect	text38
  6211   0024CC                     __ptext38:
  6212                           	callstack 0
  6213   0024CC                     _I2C_2_Master_Stop:
  6214                           	callstack 25
  6215   0024CC                     
  6216                           ;i2c.c: 56:   I2C_2_Master_Idle();
  6217   0024CC  ECD0  F011         	call	_I2C_2_Master_Idle	;wreg free
  6218   0024D0                     
  6219                           ;i2c.c: 57:   SSP2CON2bits.PEN = 1;
  6220   0024D0  010E               	movlb	14	; () banked
  6221   0024D2  85DA               	bsf	218,2,b	;volatile
  6222   0024D4                     
  6223                           ; BSR set to: 14
  6224   0024D4  0012               	return		;funcret
  6225   0024D6                     __end_of_I2C_2_Master_Stop:
  6226                           	callstack 0
  6227                           
  6228 ;; *************** function _I2C_2_Master_Start *****************
  6229 ;; Defined at:
  6230 ;;		line 36 in file "i2c.c"
  6231 ;; Parameters:    Size  Location     Type
  6232 ;;		None
  6233 ;; Auto vars:     Size  Location     Type
  6234 ;;		None
  6235 ;; Return value:  Size  Location     Type
  6236 ;;                  1    wreg      void 
  6237 ;; Registers used:
  6238 ;;		wreg, status,2, status,0, cstack
  6239 ;; Tracked objects:
  6240 ;;		On entry : 0/0
  6241 ;;		On exit  : 0/0
  6242 ;;		Unchanged: 0/0
  6243 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6244 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6245 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6246 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6247 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6248 ;;Total ram usage:        0 bytes
  6249 ;; Hardware stack levels used: 1
  6250 ;; Hardware stack levels required when called: 2
  6251 ;; This function calls:
  6252 ;;		_I2C_2_Master_Idle
  6253 ;; This function is called by:
  6254 ;;		_color_writetoaddr
  6255 ;;		_color_read_Red
  6256 ;;		_color_read_Blue
  6257 ;;		_color_read_Green
  6258 ;;		_color_read_Clear
  6259 ;; This function uses a non-reentrant model
  6260 ;;
  6261                           
  6262                           	psect	text39
  6263   0024D6                     __ptext39:
  6264                           	callstack 0
  6265   0024D6                     _I2C_2_Master_Start:
  6266                           	callstack 25
  6267   0024D6                     
  6268                           ;i2c.c: 38:   I2C_2_Master_Idle();
  6269   0024D6  ECD0  F011         	call	_I2C_2_Master_Idle	;wreg free
  6270   0024DA                     
  6271                           ;i2c.c: 39:   SSP2CON2bits.SEN = 1;
  6272   0024DA  010E               	movlb	14	; () banked
  6273   0024DC  81DA               	bsf	218,0,b	;volatile
  6274   0024DE                     
  6275                           ; BSR set to: 14
  6276   0024DE  0012               	return		;funcret
  6277   0024E0                     __end_of_I2C_2_Master_Start:
  6278                           	callstack 0
  6279                           
  6280 ;; *************** function _I2C_2_Master_RepStart *****************
  6281 ;; Defined at:
  6282 ;;		line 45 in file "i2c.c"
  6283 ;; Parameters:    Size  Location     Type
  6284 ;;		None
  6285 ;; Auto vars:     Size  Location     Type
  6286 ;;		None
  6287 ;; Return value:  Size  Location     Type
  6288 ;;                  1    wreg      void 
  6289 ;; Registers used:
  6290 ;;		wreg, status,2, status,0, cstack
  6291 ;; Tracked objects:
  6292 ;;		On entry : 0/0
  6293 ;;		On exit  : 0/0
  6294 ;;		Unchanged: 0/0
  6295 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6296 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6297 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6298 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6299 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6300 ;;Total ram usage:        0 bytes
  6301 ;; Hardware stack levels used: 1
  6302 ;; Hardware stack levels required when called: 2
  6303 ;; This function calls:
  6304 ;;		_I2C_2_Master_Idle
  6305 ;; This function is called by:
  6306 ;;		_color_read_Red
  6307 ;;		_color_read_Blue
  6308 ;;		_color_read_Green
  6309 ;;		_color_read_Clear
  6310 ;; This function uses a non-reentrant model
  6311 ;;
  6312                           
  6313                           	psect	text40
  6314   0024E0                     __ptext40:
  6315                           	callstack 0
  6316   0024E0                     _I2C_2_Master_RepStart:
  6317                           	callstack 25
  6318   0024E0                     
  6319                           ;i2c.c: 47:   I2C_2_Master_Idle();
  6320   0024E0  ECD0  F011         	call	_I2C_2_Master_Idle	;wreg free
  6321   0024E4                     
  6322                           ;i2c.c: 48:   SSP2CON2bits.RSEN = 1;
  6323   0024E4  010E               	movlb	14	; () banked
  6324   0024E6  83DA               	bsf	218,1,b	;volatile
  6325   0024E8                     
  6326                           ; BSR set to: 14
  6327   0024E8  0012               	return		;funcret
  6328   0024EA                     __end_of_I2C_2_Master_RepStart:
  6329                           	callstack 0
  6330                           
  6331 ;; *************** function _I2C_2_Master_Read *****************
  6332 ;; Defined at:
  6333 ;;		line 72 in file "i2c.c"
  6334 ;; Parameters:    Size  Location     Type
  6335 ;;  ack             1    wreg     unsigned char 
  6336 ;; Auto vars:     Size  Location     Type
  6337 ;;  ack             1    4[COMRAM] unsigned char 
  6338 ;;  tmp             1    5[COMRAM] unsigned char 
  6339 ;; Return value:  Size  Location     Type
  6340 ;;                  1    wreg      unsigned char 
  6341 ;; Registers used:
  6342 ;;		wreg, status,2, status,0, cstack
  6343 ;; Tracked objects:
  6344 ;;		On entry : 0/0
  6345 ;;		On exit  : 0/0
  6346 ;;		Unchanged: 0/0
  6347 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6348 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6349 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6350 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6351 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6352 ;;Total ram usage:        3 bytes
  6353 ;; Hardware stack levels used: 1
  6354 ;; Hardware stack levels required when called: 2
  6355 ;; This function calls:
  6356 ;;		_I2C_2_Master_Idle
  6357 ;; This function is called by:
  6358 ;;		_color_read_Red
  6359 ;;		_color_read_Blue
  6360 ;;		_color_read_Green
  6361 ;;		_color_read_Clear
  6362 ;; This function uses a non-reentrant model
  6363 ;;
  6364                           
  6365                           	psect	text41
  6366   002280                     __ptext41:
  6367                           	callstack 0
  6368   002280                     _I2C_2_Master_Read:
  6369                           	callstack 25
  6370                           
  6371                           ; BSR set to: 14
  6372                           ;incstack = 0
  6373                           ;I2C_2_Master_Read@ack stored from wreg
  6374   002280  6E05               	movwf	I2C_2_Master_Read@ack^0,c
  6375   002282                     
  6376                           ;i2c.c: 72: unsigned char I2C_2_Master_Read(unsigned char ack);i2c.c: 73: {;i2c.c: 74:  
      +                           unsigned char tmp;;i2c.c: 75:   I2C_2_Master_Idle();
  6377   002282  ECD0  F011         	call	_I2C_2_Master_Idle	;wreg free
  6378   002286                     
  6379                           ;i2c.c: 76:   SSP2CON2bits.RCEN = 1;
  6380   002286  010E               	movlb	14	; () banked
  6381   002288  87DA               	bsf	218,3,b	;volatile
  6382                           
  6383                           ;i2c.c: 77:   I2C_2_Master_Idle();
  6384   00228A  ECD0  F011         	call	_I2C_2_Master_Idle	;wreg free
  6385   00228E                     
  6386                           ;i2c.c: 78:   tmp = SSP2BUF;
  6387   00228E  CED5 F006          	movff	3797,I2C_2_Master_Read@tmp	;volatile
  6388                           
  6389                           ;i2c.c: 79:   I2C_2_Master_Idle();
  6390   002292  ECD0  F011         	call	_I2C_2_Master_Idle	;wreg free
  6391   002296                     
  6392                           ;i2c.c: 80:   SSP2CON2bits.ACKDT = !ack;
  6393   002296  5005               	movf	I2C_2_Master_Read@ack^0,w,c
  6394   002298  B4D8               	btfsc	status,2,c
  6395   00229A  EF51  F011         	goto	u1591
  6396   00229E  EF55  F011         	goto	u1590
  6397   0022A2                     u1591:
  6398   0022A2  6A04               	clrf	??_I2C_2_Master_Read^0,c
  6399   0022A4  2A04               	incf	??_I2C_2_Master_Read^0,f,c
  6400   0022A6  EF56  F011         	goto	u1608
  6401   0022AA                     u1590:
  6402   0022AA  6A04               	clrf	??_I2C_2_Master_Read^0,c
  6403   0022AC                     u1608:
  6404   0022AC  3A04               	swapf	??_I2C_2_Master_Read^0,f,c
  6405   0022AE  4604               	rlncf	??_I2C_2_Master_Read^0,f,c
  6406   0022B0  010E               	movlb	14	; () banked
  6407   0022B2  51DA               	movf	218,w,b	;volatile
  6408   0022B4  1804               	xorwf	??_I2C_2_Master_Read^0,w,c
  6409   0022B6  0BDF               	andlw	-33
  6410   0022B8  1804               	xorwf	??_I2C_2_Master_Read^0,w,c
  6411   0022BA  6FDA               	movwf	218,b	;volatile
  6412   0022BC                     
  6413                           ; BSR set to: 14
  6414                           ;i2c.c: 81:   SSP2CON2bits.ACKEN = 1;
  6415   0022BC  89DA               	bsf	218,4,b	;volatile
  6416   0022BE                     
  6417                           ; BSR set to: 14
  6418                           ;i2c.c: 82:   return tmp;
  6419   0022BE  5006               	movf	I2C_2_Master_Read@tmp^0,w,c
  6420   0022C0                     
  6421                           ; BSR set to: 14
  6422   0022C0  0012               	return		;funcret
  6423   0022C2                     __end_of_I2C_2_Master_Read:
  6424                           	callstack 0
  6425                           
  6426 ;; *************** function _I2C_2_Master_Idle *****************
  6427 ;; Defined at:
  6428 ;;		line 28 in file "i2c.c"
  6429 ;; Parameters:    Size  Location     Type
  6430 ;;		None
  6431 ;; Auto vars:     Size  Location     Type
  6432 ;;		None
  6433 ;; Return value:  Size  Location     Type
  6434 ;;                  1    wreg      void 
  6435 ;; Registers used:
  6436 ;;		wreg, status,2, status,0
  6437 ;; Tracked objects:
  6438 ;;		On entry : 0/0
  6439 ;;		On exit  : 0/0
  6440 ;;		Unchanged: 0/0
  6441 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6442 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6443 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6444 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6445 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6446 ;;Total ram usage:        1 bytes
  6447 ;; Hardware stack levels used: 1
  6448 ;; Hardware stack levels required when called: 1
  6449 ;; This function calls:
  6450 ;;		Nothing
  6451 ;; This function is called by:
  6452 ;;		_I2C_2_Master_Start
  6453 ;;		_I2C_2_Master_RepStart
  6454 ;;		_I2C_2_Master_Stop
  6455 ;;		_I2C_2_Master_Write
  6456 ;;		_I2C_2_Master_Read
  6457 ;; This function uses a non-reentrant model
  6458 ;;
  6459                           
  6460                           	psect	text42
  6461   0023A0                     __ptext42:
  6462                           	callstack 0
  6463   0023A0                     _I2C_2_Master_Idle:
  6464                           	callstack 25
  6465   0023A0                     l30:
  6466   0023A0  010E               	movlb	14	; () banked
  6467   0023A2  B5D8               	btfsc	216,2,b	;volatile
  6468   0023A4  EFD6  F011         	goto	u1431
  6469   0023A8  EFD8  F011         	goto	u1430
  6470   0023AC                     u1431:
  6471   0023AC  EFD0  F011         	goto	l30
  6472   0023B0                     u1430:
  6473   0023B0                     
  6474                           ; BSR set to: 14
  6475   0023B0  CEDA F003          	movff	3802,??_I2C_2_Master_Idle	;volatile
  6476   0023B4  0E1F               	movlw	31
  6477   0023B6  1603               	andwf	??_I2C_2_Master_Idle^0,f,c
  6478   0023B8  A4D8               	btfss	status,2,c
  6479   0023BA  EFE1  F011         	goto	u1441
  6480   0023BE  EFE3  F011         	goto	u1440
  6481   0023C2                     u1441:
  6482   0023C2  EFD0  F011         	goto	l30
  6483   0023C6                     u1440:
  6484   0023C6                     
  6485                           ; BSR set to: 14
  6486   0023C6  0012               	return		;funcret
  6487   0023C8                     __end_of_I2C_2_Master_Idle:
  6488                           	callstack 0
  6489                           
  6490 ;; *************** function ___xxtofl *****************
  6491 ;; Defined at:
  6492 ;;		line 10 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\xxtofl.c"
  6493 ;; Parameters:    Size  Location     Type
  6494 ;;  sign            1    wreg     unsigned char 
  6495 ;;  val             4    2[COMRAM] long 
  6496 ;; Auto vars:     Size  Location     Type
  6497 ;;  sign            1   10[COMRAM] unsigned char 
  6498 ;;  arg             4   12[COMRAM] unsigned long 
  6499 ;;  exp             1   11[COMRAM] unsigned char 
  6500 ;; Return value:  Size  Location     Type
  6501 ;;                  4    2[COMRAM] unsigned char 
  6502 ;; Registers used:
  6503 ;;		wreg, status,2, status,0
  6504 ;; Tracked objects:
  6505 ;;		On entry : 0/0
  6506 ;;		On exit  : 0/0
  6507 ;;		Unchanged: 0/0
  6508 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6509 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6510 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6511 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6512 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6513 ;;Total ram usage:       14 bytes
  6514 ;; Hardware stack levels used: 1
  6515 ;; Hardware stack levels required when called: 1
  6516 ;; This function calls:
  6517 ;;		Nothing
  6518 ;; This function is called by:
  6519 ;;		_READcolor
  6520 ;; This function uses a non-reentrant model
  6521 ;;
  6522                           
  6523                           	psect	text43
  6524   000FC8                     __ptext43:
  6525                           	callstack 0
  6526   000FC8                     ___xxtofl:
  6527                           	callstack 27
  6528                           
  6529                           ; BSR set to: 14
  6530                           ;incstack = 0
  6531                           ;___xxtofl@sign stored from wreg
  6532   000FC8  6E0B               	movwf	___xxtofl@sign^0,c
  6533   000FCA  500B               	movf	___xxtofl@sign^0,w,c
  6534   000FCC  B4D8               	btfsc	status,2,c
  6535   000FCE  EFEB  F007         	goto	u1981
  6536   000FD2  EFED  F007         	goto	u1980
  6537   000FD6                     u1981:
  6538   000FD6  EF0F  F008         	goto	l1257
  6539   000FDA                     u1980:
  6540   000FDA  BE06               	btfsc	(___xxtofl@val+3)^0,7,c
  6541   000FDC  EFF4  F007         	goto	u1990
  6542   000FE0  EFF2  F007         	goto	u1991
  6543   000FE4                     u1991:
  6544   000FE4  EF0F  F008         	goto	l1257
  6545   000FE8                     u1990:
  6546   000FE8  C003  F007         	movff	___xxtofl@val,??___xxtofl
  6547   000FEC  C004  F008         	movff	___xxtofl@val+1,??___xxtofl+1
  6548   000FF0  C005  F009         	movff	___xxtofl@val+2,??___xxtofl+2
  6549   000FF4  C006  F00A         	movff	___xxtofl@val+3,??___xxtofl+3
  6550   000FF8  1E07               	comf	??___xxtofl^0,f,c
  6551   000FFA  1E08               	comf	(??___xxtofl+1)^0,f,c
  6552   000FFC  1E09               	comf	(??___xxtofl+2)^0,f,c
  6553   000FFE  1E0A               	comf	(??___xxtofl+3)^0,f,c
  6554   001000  2A07               	incf	??___xxtofl^0,f,c
  6555   001002  0E00               	movlw	0
  6556   001004  2208               	addwfc	(??___xxtofl+1)^0,f,c
  6557   001006  2209               	addwfc	(??___xxtofl+2)^0,f,c
  6558   001008  220A               	addwfc	(??___xxtofl+3)^0,f,c
  6559   00100A  C007  F00D         	movff	??___xxtofl,___xxtofl@arg
  6560   00100E  C008  F00E         	movff	??___xxtofl+1,___xxtofl@arg+1
  6561   001012  C009  F00F         	movff	??___xxtofl+2,___xxtofl@arg+2
  6562   001016  C00A  F010         	movff	??___xxtofl+3,___xxtofl@arg+3
  6563   00101A  EF17  F008         	goto	l2827
  6564   00101E                     l1257:
  6565   00101E  C003  F00D         	movff	___xxtofl@val,___xxtofl@arg
  6566   001022  C004  F00E         	movff	___xxtofl@val+1,___xxtofl@arg+1
  6567   001026  C005  F00F         	movff	___xxtofl@val+2,___xxtofl@arg+2
  6568   00102A  C006  F010         	movff	___xxtofl@val+3,___xxtofl@arg+3
  6569   00102E                     l2827:
  6570   00102E  5003               	movf	___xxtofl@val^0,w,c
  6571   001030  1004               	iorwf	(___xxtofl@val+1)^0,w,c
  6572   001032  1005               	iorwf	(___xxtofl@val+2)^0,w,c
  6573   001034  1006               	iorwf	(___xxtofl@val+3)^0,w,c
  6574   001036  A4D8               	btfss	status,2,c
  6575   001038  EF20  F008         	goto	u2001
  6576   00103C  EF22  F008         	goto	u2000
  6577   001040                     u2001:
  6578   001040  EF2C  F008         	goto	l2833
  6579   001044                     u2000:
  6580   001044  0E00               	movlw	0
  6581   001046  6E03               	movwf	?___xxtofl^0,c
  6582   001048  0E00               	movlw	0
  6583   00104A  6E04               	movwf	(?___xxtofl+1)^0,c
  6584   00104C  0E00               	movlw	0
  6585   00104E  6E05               	movwf	(?___xxtofl+2)^0,c
  6586   001050  0E00               	movlw	0
  6587   001052  6E06               	movwf	(?___xxtofl+3)^0,c
  6588   001054  EFBD  F008         	goto	l1260
  6589   001058                     l2833:
  6590   001058  0E96               	movlw	150
  6591   00105A  6E0C               	movwf	___xxtofl@exp^0,c
  6592   00105C  EF36  F008         	goto	l2837
  6593   001060                     l2835:
  6594   001060  2A0C               	incf	___xxtofl@exp^0,f,c
  6595   001062  90D8               	bcf	status,0,c
  6596   001064  3210               	rrcf	(___xxtofl@arg+3)^0,f,c
  6597   001066  320F               	rrcf	(___xxtofl@arg+2)^0,f,c
  6598   001068  320E               	rrcf	(___xxtofl@arg+1)^0,f,c
  6599   00106A  320D               	rrcf	___xxtofl@arg^0,f,c
  6600   00106C                     l2837:
  6601   00106C  0E00               	movlw	0
  6602   00106E  140D               	andwf	___xxtofl@arg^0,w,c
  6603   001070  6E07               	movwf	??___xxtofl^0,c
  6604   001072  0E00               	movlw	0
  6605   001074  140E               	andwf	(___xxtofl@arg+1)^0,w,c
  6606   001076  6E08               	movwf	(??___xxtofl+1)^0,c
  6607   001078  0E00               	movlw	0
  6608   00107A  140F               	andwf	(___xxtofl@arg+2)^0,w,c
  6609   00107C  6E09               	movwf	(??___xxtofl+2)^0,c
  6610   00107E  0EFE               	movlw	254
  6611   001080  1410               	andwf	(___xxtofl@arg+3)^0,w,c
  6612   001082  6E0A               	movwf	(??___xxtofl+3)^0,c
  6613   001084  5007               	movf	??___xxtofl^0,w,c
  6614   001086  1008               	iorwf	(??___xxtofl+1)^0,w,c
  6615   001088  1009               	iorwf	(??___xxtofl+2)^0,w,c
  6616   00108A  100A               	iorwf	(??___xxtofl+3)^0,w,c
  6617   00108C  A4D8               	btfss	status,2,c
  6618   00108E  EF4B  F008         	goto	u2011
  6619   001092  EF4D  F008         	goto	u2010
  6620   001096                     u2011:
  6621   001096  EF30  F008         	goto	l2835
  6622   00109A                     u2010:
  6623   00109A  EF5B  F008         	goto	l1264
  6624   00109E                     l2839:
  6625   00109E  2A0C               	incf	___xxtofl@exp^0,f,c
  6626   0010A0  0E01               	movlw	1
  6627   0010A2  260D               	addwf	___xxtofl@arg^0,f,c
  6628   0010A4  0E00               	movlw	0
  6629   0010A6  220E               	addwfc	(___xxtofl@arg+1)^0,f,c
  6630   0010A8  220F               	addwfc	(___xxtofl@arg+2)^0,f,c
  6631   0010AA  2210               	addwfc	(___xxtofl@arg+3)^0,f,c
  6632   0010AC  90D8               	bcf	status,0,c
  6633   0010AE  3210               	rrcf	(___xxtofl@arg+3)^0,f,c
  6634   0010B0  320F               	rrcf	(___xxtofl@arg+2)^0,f,c
  6635   0010B2  320E               	rrcf	(___xxtofl@arg+1)^0,f,c
  6636   0010B4  320D               	rrcf	___xxtofl@arg^0,f,c
  6637   0010B6                     l1264:
  6638   0010B6  0E00               	movlw	0
  6639   0010B8  140D               	andwf	___xxtofl@arg^0,w,c
  6640   0010BA  6E07               	movwf	??___xxtofl^0,c
  6641   0010BC  0E00               	movlw	0
  6642   0010BE  140E               	andwf	(___xxtofl@arg+1)^0,w,c
  6643   0010C0  6E08               	movwf	(??___xxtofl+1)^0,c
  6644   0010C2  0E00               	movlw	0
  6645   0010C4  140F               	andwf	(___xxtofl@arg+2)^0,w,c
  6646   0010C6  6E09               	movwf	(??___xxtofl+2)^0,c
  6647   0010C8  0EFF               	movlw	255
  6648   0010CA  1410               	andwf	(___xxtofl@arg+3)^0,w,c
  6649   0010CC  6E0A               	movwf	(??___xxtofl+3)^0,c
  6650   0010CE  5007               	movf	??___xxtofl^0,w,c
  6651   0010D0  1008               	iorwf	(??___xxtofl+1)^0,w,c
  6652   0010D2  1009               	iorwf	(??___xxtofl+2)^0,w,c
  6653   0010D4  100A               	iorwf	(??___xxtofl+3)^0,w,c
  6654   0010D6  A4D8               	btfss	status,2,c
  6655   0010D8  EF70  F008         	goto	u2021
  6656   0010DC  EF72  F008         	goto	u2020
  6657   0010E0                     u2021:
  6658   0010E0  EF4F  F008         	goto	l2839
  6659   0010E4                     u2020:
  6660   0010E4  EF7A  F008         	goto	l2847
  6661   0010E8                     l2845:
  6662   0010E8  060C               	decf	___xxtofl@exp^0,f,c
  6663   0010EA  90D8               	bcf	status,0,c
  6664   0010EC  360D               	rlcf	___xxtofl@arg^0,f,c
  6665   0010EE  360E               	rlcf	(___xxtofl@arg+1)^0,f,c
  6666   0010F0  360F               	rlcf	(___xxtofl@arg+2)^0,f,c
  6667   0010F2  3610               	rlcf	(___xxtofl@arg+3)^0,f,c
  6668   0010F4                     l2847:
  6669   0010F4  BE0F               	btfsc	(___xxtofl@arg+2)^0,7,c
  6670   0010F6  EF7F  F008         	goto	u2031
  6671   0010FA  EF81  F008         	goto	u2030
  6672   0010FE                     u2031:
  6673   0010FE  EF89  F008         	goto	l1271
  6674   001102                     u2030:
  6675   001102  0E02               	movlw	2
  6676   001104  600C               	cpfslt	___xxtofl@exp^0,c
  6677   001106  EF87  F008         	goto	u2041
  6678   00110A  EF89  F008         	goto	u2040
  6679   00110E                     u2041:
  6680   00110E  EF74  F008         	goto	l2845
  6681   001112                     u2040:
  6682   001112                     l1271:
  6683   001112  B00C               	btfsc	___xxtofl@exp^0,0,c
  6684   001114  EF8E  F008         	goto	u2051
  6685   001118  EF90  F008         	goto	u2050
  6686   00111C                     u2051:
  6687   00111C  EF91  F008         	goto	l2853
  6688   001120                     u2050:
  6689   001120  9E0F               	bcf	(___xxtofl@arg+2)^0,7,c
  6690   001122                     l2853:
  6691   001122  90D8               	bcf	status,0,c
  6692   001124  320C               	rrcf	___xxtofl@exp^0,f,c
  6693   001126  C00C  F007         	movff	___xxtofl@exp,??___xxtofl
  6694   00112A  6A08               	clrf	(??___xxtofl+1)^0,c
  6695   00112C  6A09               	clrf	(??___xxtofl+2)^0,c
  6696   00112E  6A0A               	clrf	(??___xxtofl+3)^0,c
  6697   001130  C007  F00A         	movff	??___xxtofl,??___xxtofl+3
  6698   001134  6A09               	clrf	(??___xxtofl+2)^0,c
  6699   001136  6A08               	clrf	(??___xxtofl+1)^0,c
  6700   001138  6A07               	clrf	??___xxtofl^0,c
  6701   00113A  5007               	movf	??___xxtofl^0,w,c
  6702   00113C  120D               	iorwf	___xxtofl@arg^0,f,c
  6703   00113E  5008               	movf	(??___xxtofl+1)^0,w,c
  6704   001140  120E               	iorwf	(___xxtofl@arg+1)^0,f,c
  6705   001142  5009               	movf	(??___xxtofl+2)^0,w,c
  6706   001144  120F               	iorwf	(___xxtofl@arg+2)^0,f,c
  6707   001146  500A               	movf	(??___xxtofl+3)^0,w,c
  6708   001148  1210               	iorwf	(___xxtofl@arg+3)^0,f,c
  6709   00114A  500B               	movf	___xxtofl@sign^0,w,c
  6710   00114C  B4D8               	btfsc	status,2,c
  6711   00114E  EFAB  F008         	goto	u2061
  6712   001152  EFAD  F008         	goto	u2060
  6713   001156                     u2061:
  6714   001156  EFB5  F008         	goto	l2863
  6715   00115A                     u2060:
  6716   00115A  BE06               	btfsc	(___xxtofl@val+3)^0,7,c
  6717   00115C  EFB4  F008         	goto	u2070
  6718   001160  EFB2  F008         	goto	u2071
  6719   001164                     u2071:
  6720   001164  EFB5  F008         	goto	l2863
  6721   001168                     u2070:
  6722   001168  8E10               	bsf	(___xxtofl@arg+3)^0,7,c
  6723   00116A                     l2863:
  6724   00116A  C00D  F003         	movff	___xxtofl@arg,?___xxtofl
  6725   00116E  C00E  F004         	movff	___xxtofl@arg+1,?___xxtofl+1
  6726   001172  C00F  F005         	movff	___xxtofl@arg+2,?___xxtofl+2
  6727   001176  C010  F006         	movff	___xxtofl@arg+3,?___xxtofl+3
  6728   00117A                     l1260:
  6729   00117A  0012               	return		;funcret
  6730   00117C                     __end_of___xxtofl:
  6731                           	callstack 0
  6732                           
  6733 ;; *************** function ___fldiv *****************
  6734 ;; Defined at:
  6735 ;;		line 11 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\sprcdiv.c"
  6736 ;; Parameters:    Size  Location     Type
  6737 ;;  b               4   16[COMRAM] unsigned char 
  6738 ;;  a               4   20[COMRAM] unsigned char 
  6739 ;; Auto vars:     Size  Location     Type
  6740 ;;  grs             4   35[COMRAM] unsigned long 
  6741 ;;  rem             4   28[COMRAM] unsigned long 
  6742 ;;  new_exp         2   33[COMRAM] short 
  6743 ;;  aexp            1   40[COMRAM] unsigned char 
  6744 ;;  bexp            1   39[COMRAM] unsigned char 
  6745 ;;  sign            1   32[COMRAM] unsigned char 
  6746 ;; Return value:  Size  Location     Type
  6747 ;;                  4   16[COMRAM] unsigned char 
  6748 ;; Registers used:
  6749 ;;		wreg, status,2, status,0
  6750 ;; Tracked objects:
  6751 ;;		On entry : 0/0
  6752 ;;		On exit  : 0/0
  6753 ;;		Unchanged: 0/0
  6754 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6755 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6756 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6757 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6758 ;;      Totals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6759 ;;Total ram usage:       25 bytes
  6760 ;; Hardware stack levels used: 1
  6761 ;; Hardware stack levels required when called: 1
  6762 ;; This function calls:
  6763 ;;		Nothing
  6764 ;; This function is called by:
  6765 ;;		_READcolor
  6766 ;; This function uses a non-reentrant model
  6767 ;;
  6768                           
  6769                           	psect	text44
  6770   000954                     __ptext44:
  6771                           	callstack 0
  6772   000954                     ___fldiv:
  6773                           	callstack 27
  6774   000954  5014               	movf	(___fldiv@b+3)^0,w,c
  6775   000956  0B80               	andlw	128
  6776   000958  6E21               	movwf	___fldiv@sign^0,c
  6777   00095A  5014               	movf	(___fldiv@b+3)^0,w,c
  6778   00095C  2414               	addwf	(___fldiv@b+3)^0,w,c
  6779   00095E  6E28               	movwf	___fldiv@bexp^0,c
  6780   000960  AE13               	btfss	(___fldiv@b+2)^0,7,c
  6781   000962  EFB5  F004         	goto	u1751
  6782   000966  EFB7  F004         	goto	u1750
  6783   00096A                     u1751:
  6784   00096A  EFB8  F004         	goto	l2689
  6785   00096E                     u1750:
  6786   00096E  8028               	bsf	___fldiv@bexp^0,0,c
  6787   000970                     l2689:
  6788   000970  5028               	movf	___fldiv@bexp^0,w,c
  6789   000972  B4D8               	btfsc	status,2,c
  6790   000974  EFBE  F004         	goto	u1761
  6791   000978  EFC0  F004         	goto	u1760
  6792   00097C                     u1761:
  6793   00097C  EFD5  F004         	goto	l2699
  6794   000980                     u1760:
  6795   000980  2828               	incf	___fldiv@bexp^0,w,c
  6796   000982  A4D8               	btfss	status,2,c
  6797   000984  EFC6  F004         	goto	u1771
  6798   000988  EFC8  F004         	goto	u1770
  6799   00098C                     u1771:
  6800   00098C  EFD0  F004         	goto	l2695
  6801   000990                     u1770:
  6802   000990  0E00               	movlw	0
  6803   000992  6E11               	movwf	___fldiv@b^0,c
  6804   000994  0E00               	movlw	0
  6805   000996  6E12               	movwf	(___fldiv@b+1)^0,c
  6806   000998  0E00               	movlw	0
  6807   00099A  6E13               	movwf	(___fldiv@b+2)^0,c
  6808   00099C  0E00               	movlw	0
  6809   00099E  6E14               	movwf	(___fldiv@b+3)^0,c
  6810   0009A0                     l2695:
  6811   0009A0  8E13               	bsf	(___fldiv@b+2)^0,7,c
  6812   0009A2  0E00               	movlw	0
  6813   0009A4  6E14               	movwf	(___fldiv@b+3)^0,c
  6814   0009A6  EFDD  F004         	goto	l2701
  6815   0009AA                     l2699:
  6816   0009AA  0E00               	movlw	0
  6817   0009AC  6E11               	movwf	___fldiv@b^0,c
  6818   0009AE  0E00               	movlw	0
  6819   0009B0  6E12               	movwf	(___fldiv@b+1)^0,c
  6820   0009B2  0E00               	movlw	0
  6821   0009B4  6E13               	movwf	(___fldiv@b+2)^0,c
  6822   0009B6  0E00               	movlw	0
  6823   0009B8  6E14               	movwf	(___fldiv@b+3)^0,c
  6824   0009BA                     l2701:
  6825   0009BA  5018               	movf	(___fldiv@a+3)^0,w,c
  6826   0009BC  0B80               	andlw	128
  6827   0009BE  1A21               	xorwf	___fldiv@sign^0,f,c
  6828   0009C0  5018               	movf	(___fldiv@a+3)^0,w,c
  6829   0009C2  2418               	addwf	(___fldiv@a+3)^0,w,c
  6830   0009C4  6E29               	movwf	___fldiv@aexp^0,c
  6831   0009C6  AE17               	btfss	(___fldiv@a+2)^0,7,c
  6832   0009C8  EFE8  F004         	goto	u1781
  6833   0009CC  EFEA  F004         	goto	u1780
  6834   0009D0                     u1781:
  6835   0009D0  EFEB  F004         	goto	l2709
  6836   0009D4                     u1780:
  6837   0009D4  8029               	bsf	___fldiv@aexp^0,0,c
  6838   0009D6                     l2709:
  6839   0009D6  5029               	movf	___fldiv@aexp^0,w,c
  6840   0009D8  B4D8               	btfsc	status,2,c
  6841   0009DA  EFF1  F004         	goto	u1791
  6842   0009DE  EFF3  F004         	goto	u1790
  6843   0009E2                     u1791:
  6844   0009E2  EF08  F005         	goto	l2719
  6845   0009E6                     u1790:
  6846   0009E6  2829               	incf	___fldiv@aexp^0,w,c
  6847   0009E8  A4D8               	btfss	status,2,c
  6848   0009EA  EFF9  F004         	goto	u1801
  6849   0009EE  EFFB  F004         	goto	u1800
  6850   0009F2                     u1801:
  6851   0009F2  EF03  F005         	goto	l2715
  6852   0009F6                     u1800:
  6853   0009F6  0E00               	movlw	0
  6854   0009F8  6E15               	movwf	___fldiv@a^0,c
  6855   0009FA  0E00               	movlw	0
  6856   0009FC  6E16               	movwf	(___fldiv@a+1)^0,c
  6857   0009FE  0E00               	movlw	0
  6858   000A00  6E17               	movwf	(___fldiv@a+2)^0,c
  6859   000A02  0E00               	movlw	0
  6860   000A04  6E18               	movwf	(___fldiv@a+3)^0,c
  6861   000A06                     l2715:
  6862   000A06  8E17               	bsf	(___fldiv@a+2)^0,7,c
  6863   000A08  0E00               	movlw	0
  6864   000A0A  6E18               	movwf	(___fldiv@a+3)^0,c
  6865   000A0C  EF10  F005         	goto	l2721
  6866   000A10                     l2719:
  6867   000A10  0E00               	movlw	0
  6868   000A12  6E15               	movwf	___fldiv@a^0,c
  6869   000A14  0E00               	movlw	0
  6870   000A16  6E16               	movwf	(___fldiv@a+1)^0,c
  6871   000A18  0E00               	movlw	0
  6872   000A1A  6E17               	movwf	(___fldiv@a+2)^0,c
  6873   000A1C  0E00               	movlw	0
  6874   000A1E  6E18               	movwf	(___fldiv@a+3)^0,c
  6875   000A20                     l2721:
  6876   000A20  5015               	movf	___fldiv@a^0,w,c
  6877   000A22  1016               	iorwf	(___fldiv@a+1)^0,w,c
  6878   000A24  1017               	iorwf	(___fldiv@a+2)^0,w,c
  6879   000A26  1018               	iorwf	(___fldiv@a+3)^0,w,c
  6880   000A28  A4D8               	btfss	status,2,c
  6881   000A2A  EF19  F005         	goto	u1811
  6882   000A2E  EF1B  F005         	goto	u1810
  6883   000A32                     u1811:
  6884   000A32  EF33  F005         	goto	l2733
  6885   000A36                     u1810:
  6886   000A36  0E00               	movlw	0
  6887   000A38  6E11               	movwf	___fldiv@b^0,c
  6888   000A3A  0E00               	movlw	0
  6889   000A3C  6E12               	movwf	(___fldiv@b+1)^0,c
  6890   000A3E  0E00               	movlw	0
  6891   000A40  6E13               	movwf	(___fldiv@b+2)^0,c
  6892   000A42  0E00               	movlw	0
  6893   000A44  6E14               	movwf	(___fldiv@b+3)^0,c
  6894   000A46  0E80               	movlw	128
  6895   000A48  1213               	iorwf	(___fldiv@b+2)^0,f,c
  6896   000A4A  0E7F               	movlw	127
  6897   000A4C  1214               	iorwf	(___fldiv@b+3)^0,f,c
  6898   000A4E                     l2727:
  6899   000A4E  5021               	movf	___fldiv@sign^0,w,c
  6900   000A50  1214               	iorwf	(___fldiv@b+3)^0,f,c
  6901   000A52  C011  F011         	movff	___fldiv@b,?___fldiv
  6902   000A56  C012  F012         	movff	___fldiv@b+1,?___fldiv+1
  6903   000A5A  C013  F013         	movff	___fldiv@b+2,?___fldiv+2
  6904   000A5E  C014  F014         	movff	___fldiv@b+3,?___fldiv+3
  6905   000A62  EF76  F006         	goto	l1184
  6906   000A66                     l2733:
  6907   000A66  5028               	movf	___fldiv@bexp^0,w,c
  6908   000A68  A4D8               	btfss	status,2,c
  6909   000A6A  EF39  F005         	goto	u1821
  6910   000A6E  EF3B  F005         	goto	u1820
  6911   000A72                     u1821:
  6912   000A72  EF45  F005         	goto	l2741
  6913   000A76                     u1820:
  6914   000A76  0E00               	movlw	0
  6915   000A78  6E11               	movwf	?___fldiv^0,c
  6916   000A7A  0E00               	movlw	0
  6917   000A7C  6E12               	movwf	(?___fldiv+1)^0,c
  6918   000A7E  0E00               	movlw	0
  6919   000A80  6E13               	movwf	(?___fldiv+2)^0,c
  6920   000A82  0E00               	movlw	0
  6921   000A84  6E14               	movwf	(?___fldiv+3)^0,c
  6922   000A86  EF76  F006         	goto	l1184
  6923   000A8A                     l2741:
  6924   000A8A  5029               	movf	___fldiv@aexp^0,w,c
  6925   000A8C  C028  F019         	movff	___fldiv@bexp,??___fldiv
  6926   000A90  6A1A               	clrf	(??___fldiv+1)^0,c
  6927   000A92  5E19               	subwf	??___fldiv^0,f,c
  6928   000A94  0E00               	movlw	0
  6929   000A96  5A1A               	subwfb	(??___fldiv+1)^0,f,c
  6930   000A98  0E7F               	movlw	127
  6931   000A9A  2419               	addwf	??___fldiv^0,w,c
  6932   000A9C  6E22               	movwf	___fldiv@new_exp^0,c
  6933   000A9E  0E00               	movlw	0
  6934   000AA0  201A               	addwfc	(??___fldiv+1)^0,w,c
  6935   000AA2  6E23               	movwf	(___fldiv@new_exp+1)^0,c
  6936   000AA4  C011  F01D         	movff	___fldiv@b,___fldiv@rem
  6937   000AA8  C012  F01E         	movff	___fldiv@b+1,___fldiv@rem+1
  6938   000AAC  C013  F01F         	movff	___fldiv@b+2,___fldiv@rem+2
  6939   000AB0  C014  F020         	movff	___fldiv@b+3,___fldiv@rem+3
  6940   000AB4  0E00               	movlw	0
  6941   000AB6  6E11               	movwf	___fldiv@b^0,c
  6942   000AB8  0E00               	movlw	0
  6943   000ABA  6E12               	movwf	(___fldiv@b+1)^0,c
  6944   000ABC  0E00               	movlw	0
  6945   000ABE  6E13               	movwf	(___fldiv@b+2)^0,c
  6946   000AC0  0E00               	movlw	0
  6947   000AC2  6E14               	movwf	(___fldiv@b+3)^0,c
  6948   000AC4  0E00               	movlw	0
  6949   000AC6  6E24               	movwf	___fldiv@grs^0,c
  6950   000AC8  0E00               	movlw	0
  6951   000ACA  6E25               	movwf	(___fldiv@grs+1)^0,c
  6952   000ACC  0E00               	movlw	0
  6953   000ACE  6E26               	movwf	(___fldiv@grs+2)^0,c
  6954   000AD0  0E00               	movlw	0
  6955   000AD2  6E27               	movwf	(___fldiv@grs+3)^0,c
  6956   000AD4  0E00               	movlw	0
  6957   000AD6  6E29               	movwf	___fldiv@aexp^0,c
  6958   000AD8  EFA6  F005         	goto	l1186
  6959   000ADC                     l2751:
  6960   000ADC  5029               	movf	___fldiv@aexp^0,w,c
  6961   000ADE  B4D8               	btfsc	status,2,c
  6962   000AE0  EF74  F005         	goto	u1831
  6963   000AE4  EF76  F005         	goto	u1830
  6964   000AE8                     u1831:
  6965   000AE8  EF8D  F005         	goto	l2759
  6966   000AEC                     u1830:
  6967   000AEC  90D8               	bcf	status,0,c
  6968   000AEE  361D               	rlcf	___fldiv@rem^0,f,c
  6969   000AF0  361E               	rlcf	(___fldiv@rem+1)^0,f,c
  6970   000AF2  361F               	rlcf	(___fldiv@rem+2)^0,f,c
  6971   000AF4  3620               	rlcf	(___fldiv@rem+3)^0,f,c
  6972   000AF6  90D8               	bcf	status,0,c
  6973   000AF8  3611               	rlcf	___fldiv@b^0,f,c
  6974   000AFA  3612               	rlcf	(___fldiv@b+1)^0,f,c
  6975   000AFC  3613               	rlcf	(___fldiv@b+2)^0,f,c
  6976   000AFE  3614               	rlcf	(___fldiv@b+3)^0,f,c
  6977   000B00  AE27               	btfss	(___fldiv@grs+3)^0,7,c
  6978   000B02  EF85  F005         	goto	u1841
  6979   000B06  EF87  F005         	goto	u1840
  6980   000B0A                     u1841:
  6981   000B0A  EF88  F005         	goto	l1189
  6982   000B0E                     u1840:
  6983   000B0E  8011               	bsf	___fldiv@b^0,0,c
  6984   000B10                     l1189:
  6985   000B10  90D8               	bcf	status,0,c
  6986   000B12  3624               	rlcf	___fldiv@grs^0,f,c
  6987   000B14  3625               	rlcf	(___fldiv@grs+1)^0,f,c
  6988   000B16  3626               	rlcf	(___fldiv@grs+2)^0,f,c
  6989   000B18  3627               	rlcf	(___fldiv@grs+3)^0,f,c
  6990   000B1A                     l2759:
  6991   000B1A  5015               	movf	___fldiv@a^0,w,c
  6992   000B1C  5C1D               	subwf	___fldiv@rem^0,w,c
  6993   000B1E  5016               	movf	(___fldiv@a+1)^0,w,c
  6994   000B20  581E               	subwfb	(___fldiv@rem+1)^0,w,c
  6995   000B22  5017               	movf	(___fldiv@a+2)^0,w,c
  6996   000B24  581F               	subwfb	(___fldiv@rem+2)^0,w,c
  6997   000B26  5018               	movf	(___fldiv@a+3)^0,w,c
  6998   000B28  5820               	subwfb	(___fldiv@rem+3)^0,w,c
  6999   000B2A  A0D8               	btfss	status,0,c
  7000   000B2C  EF9A  F005         	goto	u1851
  7001   000B30  EF9C  F005         	goto	u1850
  7002   000B34                     u1851:
  7003   000B34  EFA5  F005         	goto	l2765
  7004   000B38                     u1850:
  7005   000B38  8C27               	bsf	(___fldiv@grs+3)^0,6,c
  7006   000B3A  5015               	movf	___fldiv@a^0,w,c
  7007   000B3C  5E1D               	subwf	___fldiv@rem^0,f,c
  7008   000B3E  5016               	movf	(___fldiv@a+1)^0,w,c
  7009   000B40  5A1E               	subwfb	(___fldiv@rem+1)^0,f,c
  7010   000B42  5017               	movf	(___fldiv@a+2)^0,w,c
  7011   000B44  5A1F               	subwfb	(___fldiv@rem+2)^0,f,c
  7012   000B46  5018               	movf	(___fldiv@a+3)^0,w,c
  7013   000B48  5A20               	subwfb	(___fldiv@rem+3)^0,f,c
  7014   000B4A                     l2765:
  7015   000B4A  2A29               	incf	___fldiv@aexp^0,f,c
  7016   000B4C                     l1186:
  7017   000B4C  0E19               	movlw	25
  7018   000B4E  6429               	cpfsgt	___fldiv@aexp^0,c
  7019   000B50  EFAC  F005         	goto	u1861
  7020   000B54  EFAE  F005         	goto	u1860
  7021   000B58                     u1861:
  7022   000B58  EF6E  F005         	goto	l2751
  7023   000B5C                     u1860:
  7024   000B5C  501D               	movf	___fldiv@rem^0,w,c
  7025   000B5E  101E               	iorwf	(___fldiv@rem+1)^0,w,c
  7026   000B60  101F               	iorwf	(___fldiv@rem+2)^0,w,c
  7027   000B62  1020               	iorwf	(___fldiv@rem+3)^0,w,c
  7028   000B64  B4D8               	btfsc	status,2,c
  7029   000B66  EFB7  F005         	goto	u1871
  7030   000B6A  EFB9  F005         	goto	u1870
  7031   000B6E                     u1871:
  7032   000B6E  EFD1  F005         	goto	l2777
  7033   000B72                     u1870:
  7034   000B72  8024               	bsf	___fldiv@grs^0,0,c
  7035   000B74  EFD1  F005         	goto	l2777
  7036   000B78                     l2771:
  7037   000B78  90D8               	bcf	status,0,c
  7038   000B7A  3611               	rlcf	___fldiv@b^0,f,c
  7039   000B7C  3612               	rlcf	(___fldiv@b+1)^0,f,c
  7040   000B7E  3613               	rlcf	(___fldiv@b+2)^0,f,c
  7041   000B80  3614               	rlcf	(___fldiv@b+3)^0,f,c
  7042   000B82  AE27               	btfss	(___fldiv@grs+3)^0,7,c
  7043   000B84  EFC6  F005         	goto	u1881
  7044   000B88  EFC8  F005         	goto	u1880
  7045   000B8C                     u1881:
  7046   000B8C  EFC9  F005         	goto	l1195
  7047   000B90                     u1880:
  7048   000B90  8011               	bsf	___fldiv@b^0,0,c
  7049   000B92                     l1195:
  7050   000B92  90D8               	bcf	status,0,c
  7051   000B94  3624               	rlcf	___fldiv@grs^0,f,c
  7052   000B96  3625               	rlcf	(___fldiv@grs+1)^0,f,c
  7053   000B98  3626               	rlcf	(___fldiv@grs+2)^0,f,c
  7054   000B9A  3627               	rlcf	(___fldiv@grs+3)^0,f,c
  7055   000B9C  0622               	decf	___fldiv@new_exp^0,f,c
  7056   000B9E  A0D8               	btfss	status,0,c
  7057   000BA0  0623               	decf	(___fldiv@new_exp+1)^0,f,c
  7058   000BA2                     l2777:
  7059   000BA2  AE13               	btfss	(___fldiv@b+2)^0,7,c
  7060   000BA4  EFD6  F005         	goto	u1891
  7061   000BA8  EFD8  F005         	goto	u1890
  7062   000BAC                     u1891:
  7063   000BAC  EFBC  F005         	goto	l2771
  7064   000BB0                     u1890:
  7065   000BB0  0E00               	movlw	0
  7066   000BB2  6E29               	movwf	___fldiv@aexp^0,c
  7067   000BB4  AE27               	btfss	(___fldiv@grs+3)^0,7,c
  7068   000BB6  EFDF  F005         	goto	u1901
  7069   000BBA  EFE1  F005         	goto	u1900
  7070   000BBE                     u1901:
  7071   000BBE  EF05  F006         	goto	l1197
  7072   000BC2                     u1900:
  7073   000BC2  0EFF               	movlw	255
  7074   000BC4  1424               	andwf	___fldiv@grs^0,w,c
  7075   000BC6  6E19               	movwf	??___fldiv^0,c
  7076   000BC8  0EFF               	movlw	255
  7077   000BCA  1425               	andwf	(___fldiv@grs+1)^0,w,c
  7078   000BCC  6E1A               	movwf	(??___fldiv+1)^0,c
  7079   000BCE  0EFF               	movlw	255
  7080   000BD0  1426               	andwf	(___fldiv@grs+2)^0,w,c
  7081   000BD2  6E1B               	movwf	(??___fldiv+2)^0,c
  7082   000BD4  0E7F               	movlw	127
  7083   000BD6  1427               	andwf	(___fldiv@grs+3)^0,w,c
  7084   000BD8  6E1C               	movwf	(??___fldiv+3)^0,c
  7085   000BDA  5019               	movf	??___fldiv^0,w,c
  7086   000BDC  101A               	iorwf	(??___fldiv+1)^0,w,c
  7087   000BDE  101B               	iorwf	(??___fldiv+2)^0,w,c
  7088   000BE0  101C               	iorwf	(??___fldiv+3)^0,w,c
  7089   000BE2  B4D8               	btfsc	status,2,c
  7090   000BE4  EFF6  F005         	goto	u1911
  7091   000BE8  EFF8  F005         	goto	u1910
  7092   000BEC                     u1911:
  7093   000BEC  EFFC  F005         	goto	l1198
  7094   000BF0                     u1910:
  7095   000BF0                     l2785:
  7096   000BF0  0E01               	movlw	1
  7097   000BF2  6E29               	movwf	___fldiv@aexp^0,c
  7098   000BF4  EF05  F006         	goto	l1197
  7099   000BF8                     l1198:
  7100   000BF8  A011               	btfss	___fldiv@b^0,0,c
  7101   000BFA  EF01  F006         	goto	u1921
  7102   000BFE  EF03  F006         	goto	u1920
  7103   000C02                     u1921:
  7104   000C02  EF05  F006         	goto	l1197
  7105   000C06                     u1920:
  7106   000C06  EFF8  F005         	goto	l2785
  7107   000C0A                     l1197:
  7108   000C0A  5029               	movf	___fldiv@aexp^0,w,c
  7109   000C0C  B4D8               	btfsc	status,2,c
  7110   000C0E  EF0B  F006         	goto	u1931
  7111   000C12  EF0D  F006         	goto	u1930
  7112   000C16                     u1931:
  7113   000C16  EF31  F006         	goto	l2797
  7114   000C1A                     u1930:
  7115   000C1A  0E01               	movlw	1
  7116   000C1C  2611               	addwf	___fldiv@b^0,f,c
  7117   000C1E  0E00               	movlw	0
  7118   000C20  2212               	addwfc	(___fldiv@b+1)^0,f,c
  7119   000C22  2213               	addwfc	(___fldiv@b+2)^0,f,c
  7120   000C24  2214               	addwfc	(___fldiv@b+3)^0,f,c
  7121   000C26  A014               	btfss	(___fldiv@b+3)^0,0,c
  7122   000C28  EF18  F006         	goto	u1941
  7123   000C2C  EF1A  F006         	goto	u1940
  7124   000C30                     u1941:
  7125   000C30  EF31  F006         	goto	l2797
  7126   000C34                     u1940:
  7127   000C34  C011  F019         	movff	___fldiv@b,??___fldiv
  7128   000C38  C012  F01A         	movff	___fldiv@b+1,??___fldiv+1
  7129   000C3C  C013  F01B         	movff	___fldiv@b+2,??___fldiv+2
  7130   000C40  C014  F01C         	movff	___fldiv@b+3,??___fldiv+3
  7131   000C44  341C               	rlcf	(??___fldiv+3)^0,w,c
  7132   000C46  321C               	rrcf	(??___fldiv+3)^0,f,c
  7133   000C48  321B               	rrcf	(??___fldiv+2)^0,f,c
  7134   000C4A  321A               	rrcf	(??___fldiv+1)^0,f,c
  7135   000C4C  3219               	rrcf	??___fldiv^0,f,c
  7136   000C4E  C019  F011         	movff	??___fldiv,___fldiv@b
  7137   000C52  C01A  F012         	movff	??___fldiv+1,___fldiv@b+1
  7138   000C56  C01B  F013         	movff	??___fldiv+2,___fldiv@b+2
  7139   000C5A  C01C  F014         	movff	??___fldiv+3,___fldiv@b+3
  7140   000C5E  4A22               	infsnz	___fldiv@new_exp^0,f,c
  7141   000C60  2A23               	incf	(___fldiv@new_exp+1)^0,f,c
  7142   000C62                     l2797:
  7143   000C62  BE23               	btfsc	(___fldiv@new_exp+1)^0,7,c
  7144   000C64  EF3C  F006         	goto	u1951
  7145   000C68  5023               	movf	(___fldiv@new_exp+1)^0,w,c
  7146   000C6A  E108               	bnz	u1950
  7147   000C6C  2822               	incf	___fldiv@new_exp^0,w,c
  7148   000C6E  A0D8               	btfss	status,0,c
  7149   000C70  EF3C  F006         	goto	u1951
  7150   000C74  EF3E  F006         	goto	u1950
  7151   000C78                     u1951:
  7152   000C78  EF49  F006         	goto	l2801
  7153   000C7C                     u1950:
  7154   000C7C  0E00               	movlw	0
  7155   000C7E  6E23               	movwf	(___fldiv@new_exp+1)^0,c
  7156   000C80  6822               	setf	___fldiv@new_exp^0,c
  7157   000C82  0E00               	movlw	0
  7158   000C84  6E11               	movwf	___fldiv@b^0,c
  7159   000C86  0E00               	movlw	0
  7160   000C88  6E12               	movwf	(___fldiv@b+1)^0,c
  7161   000C8A  0E00               	movlw	0
  7162   000C8C  6E13               	movwf	(___fldiv@b+2)^0,c
  7163   000C8E  0E00               	movlw	0
  7164   000C90  6E14               	movwf	(___fldiv@b+3)^0,c
  7165   000C92                     l2801:
  7166   000C92  BE23               	btfsc	(___fldiv@new_exp+1)^0,7,c
  7167   000C94  EF56  F006         	goto	u1960
  7168   000C98  5023               	movf	(___fldiv@new_exp+1)^0,w,c
  7169   000C9A  E106               	bnz	u1961
  7170   000C9C  0422               	decf	___fldiv@new_exp^0,w,c
  7171   000C9E  B0D8               	btfsc	status,0,c
  7172   000CA0  EF54  F006         	goto	u1961
  7173   000CA4  EF56  F006         	goto	u1960
  7174   000CA8                     u1961:
  7175   000CA8  EF64  F006         	goto	l2805
  7176   000CAC                     u1960:
  7177   000CAC  0E00               	movlw	0
  7178   000CAE  6E23               	movwf	(___fldiv@new_exp+1)^0,c
  7179   000CB0  0E00               	movlw	0
  7180   000CB2  6E22               	movwf	___fldiv@new_exp^0,c
  7181   000CB4  0E00               	movlw	0
  7182   000CB6  6E11               	movwf	___fldiv@b^0,c
  7183   000CB8  0E00               	movlw	0
  7184   000CBA  6E12               	movwf	(___fldiv@b+1)^0,c
  7185   000CBC  0E00               	movlw	0
  7186   000CBE  6E13               	movwf	(___fldiv@b+2)^0,c
  7187   000CC0  0E00               	movlw	0
  7188   000CC2  6E14               	movwf	(___fldiv@b+3)^0,c
  7189   000CC4  0E00               	movlw	0
  7190   000CC6  6E21               	movwf	___fldiv@sign^0,c
  7191   000CC8                     l2805:
  7192   000CC8  C022  F028         	movff	___fldiv@new_exp,___fldiv@bexp
  7193   000CCC  A028               	btfss	___fldiv@bexp^0,0,c
  7194   000CCE  EF6B  F006         	goto	u1971
  7195   000CD2  EF6D  F006         	goto	u1970
  7196   000CD6                     u1971:
  7197   000CD6  EF70  F006         	goto	l2811
  7198   000CDA                     u1970:
  7199   000CDA  8E13               	bsf	(___fldiv@b+2)^0,7,c
  7200   000CDC  EF71  F006         	goto	l2813
  7201   000CE0                     l2811:
  7202   000CE0  9E13               	bcf	(___fldiv@b+2)^0,7,c
  7203   000CE2                     l2813:
  7204   000CE2  90D8               	bcf	status,0,c
  7205   000CE4  3028               	rrcf	___fldiv@bexp^0,w,c
  7206   000CE6  6E14               	movwf	(___fldiv@b+3)^0,c
  7207   000CE8  EF27  F005         	goto	l2727
  7208   000CEC                     l1184:
  7209   000CEC  0012               	return		;funcret
  7210   000CEE                     __end_of___fldiv:
  7211                           	callstack 0
  7212                           
  7213 ;; *************** function _LowISR *****************
  7214 ;; Defined at:
  7215 ;;		line 23 in file "interrupts.c"
  7216 ;; Parameters:    Size  Location     Type
  7217 ;;		None
  7218 ;; Auto vars:     Size  Location     Type
  7219 ;;		None
  7220 ;; Return value:  Size  Location     Type
  7221 ;;                  1    wreg      void 
  7222 ;; Registers used:
  7223 ;;		status,2, status,0
  7224 ;; Tracked objects:
  7225 ;;		On entry : 0/0
  7226 ;;		On exit  : 0/0
  7227 ;;		Unchanged: 0/0
  7228 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7229 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7230 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7231 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7232 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7233 ;;Total ram usage:        2 bytes
  7234 ;; Hardware stack levels used: 1
  7235 ;; This function calls:
  7236 ;;		Nothing
  7237 ;; This function is called by:
  7238 ;;		Interrupt level 1
  7239 ;; This function uses a non-reentrant model
  7240 ;;
  7241                           
  7242                           	psect	intcodelo
  7243   000018                     __pintcodelo:
  7244                           	callstack 0
  7245   000018                     _LowISR:
  7246                           	callstack 22
  7247                           
  7248                           ;incstack = 0
  7249   000018  805C               	bsf	int$flags,0,c	;set compiler interrupt flag (level 1)
  7250   00001A  CFD8 F001          	movff	status,??_LowISR
  7251   00001E  CFE0 F002          	movff	bsr,??_LowISR+1
  7252   000022                     
  7253                           ;interrupts.c: 25:     if (PIR0bits.TMR0IF) {
  7254   000022  010E               	movlb	14	; () banked
  7255   000024  AB33               	btfss	51,5,b	;volatile
  7256   000026  EF17  F000         	goto	i1u122_21
  7257   00002A  EF19  F000         	goto	i1u122_20
  7258   00002E                     i1u122_21:
  7259   00002E  EF1C  F000         	goto	i1l434
  7260   000032                     i1u122_20:
  7261   000032                     
  7262                           ; BSR set to: 14
  7263                           ;interrupts.c: 26:         timer_val += 1;
  7264   000032  4A40               	infsnz	_timer_val^0,f,c
  7265   000034  2A41               	incf	(_timer_val+1)^0,f,c
  7266   000036                     
  7267                           ; BSR set to: 14
  7268                           ;interrupts.c: 27:         PIR0bits.TMR0IF = 0;
  7269   000036  9B33               	bcf	51,5,b	;volatile
  7270   000038                     i1l434:
  7271                           
  7272                           ; BSR set to: 14
  7273   000038  C002  FFE0         	movff	??_LowISR+1,bsr
  7274   00003C  C001  FFD8         	movff	??_LowISR,status
  7275   000040  905C               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  7276   000042  0010               	retfie	
  7277   000044                     __end_of_LowISR:
  7278                           	callstack 0
  7279   000000                     
  7280                           	psect	rparam
  7281   000000                     
  7282                           	psect	temp
  7283   00005C                     btemp:
  7284                           	callstack 0
  7285   00005C                     	ds	1
  7286   000000                     int$flags	set	btemp
  7287   000000                     wtemp8	set	btemp+1
  7288   000000                     ttemp5	set	btemp+1
  7289   000000                     ttemp6	set	btemp+4
  7290   000000                     ttemp7	set	btemp+8
  7291                           
  7292                           	psect	idloc
  7293                           
  7294                           ;Config register IDLOC0 @ 0x200000
  7295                           ;	unspecified, using default values
  7296   200000                     	org	2097152
  7297   200000  0FFF               	dw	4095
  7298                           
  7299                           ;Config register IDLOC1 @ 0x200002
  7300                           ;	unspecified, using default values
  7301   200002                     	org	2097154
  7302   200002  0FFF               	dw	4095
  7303                           
  7304                           ;Config register IDLOC2 @ 0x200004
  7305                           ;	unspecified, using default values
  7306   200004                     	org	2097156
  7307   200004  0FFF               	dw	4095
  7308                           
  7309                           ;Config register IDLOC3 @ 0x200006
  7310                           ;	unspecified, using default values
  7311   200006                     	org	2097158
  7312   200006  0FFF               	dw	4095
  7313                           
  7314                           ;Config register IDLOC4 @ 0x200008
  7315                           ;	unspecified, using default values
  7316   200008                     	org	2097160
  7317   200008  0FFF               	dw	4095
  7318                           
  7319                           ;Config register IDLOC5 @ 0x20000A
  7320                           ;	unspecified, using default values
  7321   20000A                     	org	2097162
  7322   20000A  0FFF               	dw	4095
  7323                           
  7324                           ;Config register IDLOC6 @ 0x20000C
  7325                           ;	unspecified, using default values
  7326   20000C                     	org	2097164
  7327   20000C  0FFF               	dw	4095
  7328                           
  7329                           ;Config register IDLOC7 @ 0x20000E
  7330                           ;	unspecified, using default values
  7331   20000E                     	org	2097166
  7332   20000E  0FFF               	dw	4095
  7333                           
  7334                           	psect	config
  7335                           
  7336                           ;Config register CONFIG1L @ 0x300000
  7337                           ;	External Oscillator mode Selection bits
  7338                           ;	FEXTOSC = HS, HS (crystal oscillator) above 8 MHz; PFM set to high power
  7339                           ;	Power-up default value for COSC bits
  7340                           ;	RSTOSC = EXTOSC_4PLL, EXTOSC with 4x PLL, with EXTOSC operating per FEXTOSC bits
  7341   300000                     	org	3145728
  7342   300000  AA                 	db	170
  7343                           
  7344                           ;Config register CONFIG1H @ 0x300001
  7345                           ;	unspecified, using default values
  7346                           ;	Clock Out Enable bit
  7347                           ;	CLKOUTEN = 0x1, unprogrammed default
  7348                           ;	Clock Switch Enable bit
  7349                           ;	CSWEN = 0x1, unprogrammed default
  7350                           ;	Fail-Safe Clock Monitor Enable bit
  7351                           ;	FCMEN = 0x1, unprogrammed default
  7352   300001                     	org	3145729
  7353   300001  FF                 	db	255
  7354                           
  7355                           ;Config register CONFIG2L @ 0x300002
  7356                           ;	unspecified, using default values
  7357                           ;	Master Clear Enable bit
  7358                           ;	MCLRE = 0x1, unprogrammed default
  7359                           ;	Power-up Timer Enable bit
  7360                           ;	PWRTE = 0x1, unprogrammed default
  7361                           ;	Low-power BOR enable bit
  7362                           ;	LPBOREN = 0x1, unprogrammed default
  7363                           ;	Brown-out Reset Enable bits
  7364                           ;	BOREN = 0x3, unprogrammed default
  7365   300002                     	org	3145730
  7366   300002  FF                 	db	255
  7367                           
  7368                           ;Config register CONFIG2H @ 0x300003
  7369                           ;	unspecified, using default values
  7370                           ;	Brown Out Reset Voltage selection bits
  7371                           ;	BORV = 0x3, unprogrammed default
  7372                           ;	ZCD Disable bit
  7373                           ;	ZCD = 0x1, unprogrammed default
  7374                           ;	PPSLOCK bit One-Way Set Enable bit
  7375                           ;	PPS1WAY = 0x1, unprogrammed default
  7376                           ;	Stack Full/Underflow Reset Enable bit
  7377                           ;	STVREN = 0x1, unprogrammed default
  7378                           ;	Debugger Enable bit
  7379                           ;	DEBUG = 0x1, unprogrammed default
  7380                           ;	Extended Instruction Set Enable bit
  7381                           ;	XINST = 0x1, unprogrammed default
  7382   300003                     	org	3145731
  7383   300003  FF                 	db	255
  7384                           
  7385                           ;Config register CONFIG3L @ 0x300004
  7386                           ;	WDT Period Select bits
  7387                           ;	WDTCPS = WDTCPS_31, Divider ratio 1:65536; software control of WDTPS
  7388                           ;	WDT operating mode
  7389                           ;	WDTE = OFF, WDT Disabled
  7390   300004                     	org	3145732
  7391   300004  9F                 	db	159
  7392                           
  7393                           ;Config register CONFIG3H @ 0x300005
  7394                           ;	unspecified, using default values
  7395                           ;	WDT Window Select bits
  7396                           ;	WDTCWS = 0x7, unprogrammed default
  7397                           ;	WDT input clock selector
  7398                           ;	WDTCCS = 0x7, unprogrammed default
  7399   300005                     	org	3145733
  7400   300005  FF                 	db	255
  7401                           
  7402                           ;Config register CONFIG4L @ 0x300006
  7403                           ;	unspecified, using default values
  7404                           ;	Write Protection Block 0
  7405                           ;	WRT0 = 0x1, unprogrammed default
  7406                           ;	Write Protection Block 1
  7407                           ;	WRT1 = 0x1, unprogrammed default
  7408                           ;	Write Protection Block 2
  7409                           ;	WRT2 = 0x1, unprogrammed default
  7410                           ;	Write Protection Block 3
  7411                           ;	WRT3 = 0x1, unprogrammed default
  7412                           ;	Write Protection Block 3
  7413                           ;	WRT4 = 0x1, unprogrammed default
  7414                           ;	Write Protection Block 3
  7415                           ;	WRT5 = 0x1, unprogrammed default
  7416                           ;	Write Protection Block 3
  7417                           ;	WRT6 = 0x1, unprogrammed default
  7418                           ;	Write Protection Block 3
  7419                           ;	WRT7 = 0x1, unprogrammed default
  7420   300006                     	org	3145734
  7421   300006  FF                 	db	255
  7422                           
  7423                           ;Config register CONFIG4H @ 0x300007
  7424                           ;	unspecified, using default values
  7425                           ;	Configuration Register Write Protection bit
  7426                           ;	WRTC = 0x1, unprogrammed default
  7427                           ;	Boot Block Write Protection bit
  7428                           ;	WRTB = 0x1, unprogrammed default
  7429                           ;	Data EEPROM Write Protection bit
  7430                           ;	WRTD = 0x1, unprogrammed default
  7431                           ;	Scanner Enable bit
  7432                           ;	SCANE = 0x1, unprogrammed default
  7433                           ;	Low Voltage Programming Enable bit
  7434                           ;	LVP = 0x1, unprogrammed default
  7435   300007                     	org	3145735
  7436   300007  FF                 	db	255
  7437                           
  7438                           ;Config register CONFIG5L @ 0x300008
  7439                           ;	unspecified, using default values
  7440                           ;	UserNVM Program Memory Code Protection bit
  7441                           ;	CP = 0x1, unprogrammed default
  7442                           ;	DataNVM Memory Code Protection bit
  7443                           ;	CPD = 0x1, unprogrammed default
  7444   300008                     	org	3145736
  7445   300008  FF                 	db	255
  7446                           
  7447                           ;Config register CONFIG5H @ 0x300009
  7448                           ;	unspecified, using default values
  7449   300009                     	org	3145737
  7450   300009  FF                 	db	255
  7451                           
  7452                           ;Config register CONFIG6L @ 0x30000A
  7453                           ;	unspecified, using default values
  7454                           ;	Table Read Protection Block 0
  7455                           ;	EBTR0 = 0x1, unprogrammed default
  7456                           ;	Table Read Protection Block 1
  7457                           ;	EBTR1 = 0x1, unprogrammed default
  7458                           ;	Table Read Protection Block 2
  7459                           ;	EBTR2 = 0x1, unprogrammed default
  7460                           ;	Table Read Protection Block 3
  7461                           ;	EBTR3 = 0x1, unprogrammed default
  7462                           ;	Table Read Protection Block 4
  7463                           ;	EBTR4 = 0x1, unprogrammed default
  7464                           ;	Table Read Protection Block 5
  7465                           ;	EBTR5 = 0x1, unprogrammed default
  7466                           ;	Table Read Protection Block 6
  7467                           ;	EBTR6 = 0x1, unprogrammed default
  7468                           ;	Table Read Protection Block 7
  7469                           ;	EBTR7 = 0x1, unprogrammed default
  7470   30000A                     	org	3145738
  7471   30000A  FF                 	db	255
  7472                           
  7473                           ;Config register CONFIG6H @ 0x30000B
  7474                           ;	unspecified, using default values
  7475                           ;	Boot Block Table Read Protection bit
  7476                           ;	EBTRB = 0x1, unprogrammed default
  7477   30000B                     	org	3145739
  7478   30000B  FF                 	db	255
  7479                           tosu	equ	0xFFF
  7480                           tosh	equ	0xFFE
  7481                           tosl	equ	0xFFD
  7482                           stkptr	equ	0xFFC
  7483                           pclatu	equ	0xFFB
  7484                           pclath	equ	0xFFA
  7485                           pcl	equ	0xFF9
  7486                           tblptru	equ	0xFF8
  7487                           tblptrh	equ	0xFF7
  7488                           tblptrl	equ	0xFF6
  7489                           tablat	equ	0xFF5
  7490                           prodh	equ	0xFF4
  7491                           prodl	equ	0xFF3
  7492                           indf0	equ	0xFEF
  7493                           postinc0	equ	0xFEE
  7494                           postdec0	equ	0xFED
  7495                           preinc0	equ	0xFEC
  7496                           plusw0	equ	0xFEB
  7497                           fsr0h	equ	0xFEA
  7498                           fsr0l	equ	0xFE9
  7499                           wreg	equ	0xFE8
  7500                           indf1	equ	0xFE7
  7501                           postinc1	equ	0xFE6
  7502                           postdec1	equ	0xFE5
  7503                           preinc1	equ	0xFE4
  7504                           plusw1	equ	0xFE3
  7505                           fsr1h	equ	0xFE2
  7506                           fsr1l	equ	0xFE1
  7507                           bsr	equ	0xFE0
  7508                           indf2	equ	0xFDF
  7509                           postinc2	equ	0xFDE
  7510                           postdec2	equ	0xFDD
  7511                           preinc2	equ	0xFDC
  7512                           plusw2	equ	0xFDB
  7513                           fsr2h	equ	0xFDA
  7514                           fsr2l	equ	0xFD9
  7515                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    0
    Data        8
    BSS         122
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     63      91
    BANK0           160      2     104
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          234      0       0

Pointer List with Targets:

    motor_init@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> motorR(BANK0[9]), 

    motor_init@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> motorL(BANK0[9]), 

    buggy_color_response@c	PTR struct colors size(2) Largest target is 20
		 -> color(COMRAM[20]), 

    READcolor@c	PTR struct colors size(2) Largest target is 20
		 -> color(COMRAM[20]), 

    movement_return@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> motorR(BANK0[9]), 

    movement_return@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> motorL(BANK0[9]), 

    movement@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> motorR(BANK0[9]), 

    movement@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> motorL(BANK0[9]), 

    reverse_pink@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> motorR(BANK0[9]), 

    reverse_pink@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> motorL(BANK0[9]), 

    reverse_yellow@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> motorR(BANK0[9]), 

    reverse_yellow@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> motorL(BANK0[9]), 

    space@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllhll[1]), CCPR2H(BITBIGSFRhhhllll[1]), 

    space@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllhll[1]), CCPR1H(BITBIGSFRhhhllll[1]), 

    space@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllhll[1]), CCPR2H(BITBIGSFRhhhllll[1]), 

    space@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllhll[1]), CCPR1H(BITBIGSFRhhhllll[1]), 

    space@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> motorR(BANK0[9]), 

    space@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> motorL(BANK0[9]), 

    right_45@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllhll[1]), CCPR2H(BITBIGSFRhhhllll[1]), 

    right_45@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllhll[1]), CCPR1H(BITBIGSFRhhhllll[1]), 

    right_45@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllhll[1]), CCPR2H(BITBIGSFRhhhllll[1]), 

    right_45@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllhll[1]), CCPR1H(BITBIGSFRhhhllll[1]), 

    right_45@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> motorR(BANK0[9]), 

    right_45@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> motorL(BANK0[9]), 

    left_45@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllhll[1]), CCPR2H(BITBIGSFRhhhllll[1]), 

    left_45@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllhll[1]), CCPR1H(BITBIGSFRhhhllll[1]), 

    left_45@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllhll[1]), CCPR2H(BITBIGSFRhhhllll[1]), 

    left_45@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllhll[1]), CCPR1H(BITBIGSFRhhhllll[1]), 

    left_45@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> motorR(BANK0[9]), 

    left_45@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> motorL(BANK0[9]), 

    stop@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllhll[1]), CCPR2H(BITBIGSFRhhhllll[1]), 

    stop@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllhll[1]), CCPR1H(BITBIGSFRhhhllll[1]), 

    stop@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> motorR(BANK0[9]), 

    stop@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllhll[1]), CCPR2H(BITBIGSFRhhhllll[1]), 

    stop@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllhll[1]), CCPR1H(BITBIGSFRhhhllll[1]), 

    stop@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> motorL(BANK0[9]), 

    reverse@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllhll[1]), CCPR2H(BITBIGSFRhhhllll[1]), 

    reverse@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllhll[1]), CCPR1H(BITBIGSFRhhhllll[1]), 

    reverse@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllhll[1]), CCPR2H(BITBIGSFRhhhllll[1]), 

    reverse@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllhll[1]), CCPR1H(BITBIGSFRhhhllll[1]), 

    reverse@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> motorR(BANK0[9]), 

    reverse@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> motorL(BANK0[9]), 

    forward@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllhll[1]), CCPR2H(BITBIGSFRhhhllll[1]), 

    forward@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllhll[1]), CCPR1H(BITBIGSFRhhhllll[1]), 

    forward@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllhll[1]), CCPR2H(BITBIGSFRhhhllll[1]), 

    forward@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllhll[1]), CCPR1H(BITBIGSFRhhhllll[1]), 

    forward@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> motorR(BANK0[9]), 

    forward@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> motorL(BANK0[9]), 

    setMotorPWM@m.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllhll[1]), CCPR2H(BITBIGSFRhhhllll[1]), 

    setMotorPWM@m.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllhll[1]), CCPR1H(BITBIGSFRhhhllll[1]), 

    setMotorPWM@m	PTR struct DC_motor size(2) Largest target is 11
		 -> motorR(BANK0[9]), motorL(BANK0[9]), 

    return_home@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> motorR(BANK0[9]), 

    return_home@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> motorL(BANK0[9]), 

    buggy_color_response@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> motorR(BANK0[9]), 

    buggy_color_response@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> motorL(BANK0[9]), 

    motorR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllhll[1]), CCPR2H(BITBIGSFRhhhllll[1]), 

    motorR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllhll[1]), CCPR1H(BITBIGSFRhhhllll[1]), 

    S236DC_motor$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllhll[1]), CCPR2H(BITBIGSFRhhhllll[1]), 

    motorL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRhlllhll[1]), CCPR2H(BITBIGSFRhhhllll[1]), 

    S236DC_motor$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllhll[1]), CCPR1H(BITBIGSFRhhhllll[1]), 

    motorL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRhlllhll[1]), CCPR1H(BITBIGSFRhhhllll[1]), 


Critical Paths under _main in COMRAM

    _main->_buggy_color_response
    _complete_initialisation->_color_click_init
    _color_click_init->_color_writetoaddr
    _color_writetoaddr->_I2C_2_Master_Write
    _buggy_color_response->_return_home
    _return_home->_movement_return
    _movement_return->_reverse_pink
    _movement_return->_reverse_yellow
    _reverse_yellow->_left_45
    _reverse_pink->_right_45
    _forward->_stop
    _movement->_left_45
    _movement->_right_45
    _space->_stop
    _right_45->_stop
    _reverse->_stop
    _left_45->_stop
    _stop->_setMotorPWM
    _setMotorPWM->___lwdiv
    ___lwdiv->___wmul
    _READcolor->___fldiv
    _color_read_Red->_I2C_2_Master_Read
    _color_read_Green->_I2C_2_Master_Read
    _color_read_Clear->_I2C_2_Master_Read
    _color_read_Blue->_I2C_2_Master_Read
    _I2C_2_Master_Write->_I2C_2_Master_Idle
    _I2C_2_Master_Stop->_I2C_2_Master_Idle
    _I2C_2_Master_Start->_I2C_2_Master_Idle
    _I2C_2_Master_RepStart->_I2C_2_Master_Idle
    _I2C_2_Master_Read->_I2C_2_Master_Idle
    ___fldiv->___xxtofl

Critical Paths under _LowISR in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _LowISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _LowISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _LowISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _LowISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _LowISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _LowISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _LowISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _LowISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _LowISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _LowISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _LowISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _LowISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _LowISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _LowISR in BANK13

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0  369362
                                              0 BANK0      2     2      0
               _buggy_color_response
            _complete_initialisation
                        _timer_reset
 ---------------------------------------------------------------------------------
 (1) _complete_initialisation                              0     0      0     544
                           _ADC_init
                  _I2C_2_Master_Init
                        _Timer0_init
                     _buggyLEDs_init
                   _color_click_init
                    _initDCmotorsPWM
                         _initUSART4
                    _interrupts_init
                         _motor_init
                         _ports_init
 ---------------------------------------------------------------------------------
 (2) _ports_init                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _motor_init                                           4     0      4     152
                                              2 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (2) _interrupts_init                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _initUSART4                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _initDCmotorsPWM                                      2     0      2      98
                                              2 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _color_click_init                                     1     1      0     294
                                              6 COMRAM     1     1      0
                  _I2C_2_Master_Init
                  _color_writetoaddr
 ---------------------------------------------------------------------------------
 (3) _color_writetoaddr                                    2     1      1     294
                                              4 COMRAM     2     1      1
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Init                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _buggyLEDs_init                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Timer0_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _buggy_color_response                                10     4      6  368818
                                             53 COMRAM    10     4      6
                          _READcolor
                             ___flge
                            _forward
                           _movement
                    _movement_return
                        _return_home
                            _reverse
                              _space
                               _stop
                        _timer_reset
 ---------------------------------------------------------------------------------
 (1) _timer_reset                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _return_home                                          6     2      4  142932
                                             47 COMRAM     6     2      4
                      _delay_ms_func
                            _forward
                    _movement_return
                            _reverse
                               _stop
 ---------------------------------------------------------------------------------
 (3) _movement_return                                      5     0      5  109685
                                             42 COMRAM     5     0      5
                            _left_45
                       _reverse_pink
                     _reverse_yellow
                           _right_45
                               _stop
 ---------------------------------------------------------------------------------
 (4) _reverse_yellow                                       6     2      4   35433
                                             36 COMRAM     6     2      4
                       _custom_delay
                            _left_45
                            _reverse
                               _stop
 ---------------------------------------------------------------------------------
 (4) _reverse_pink                                         6     2      4   36041
                                             36 COMRAM     6     2      4
                       _custom_delay
                            _reverse
                           _right_45
                               _stop
 ---------------------------------------------------------------------------------
 (3) _forward                                              5     1      4   11854
                                             26 COMRAM     5     1      4
                        _setMotorPWM
                               _stop
 ---------------------------------------------------------------------------------
 (3) _delay_ms_func                                        6     4      2     122
                                              2 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (2) _movement                                             7     2      5   63989
                                             36 COMRAM     7     2      5
                       _custom_delay
                            _left_45
                            _reverse
                           _right_45
                              _space
                               _stop
 ---------------------------------------------------------------------------------
 (2) _space                                                6     2      4   11702
                                             26 COMRAM     6     2      4
                        _setMotorPWM
                               _stop
 ---------------------------------------------------------------------------------
 (4) _right_45                                            10     3      7   14552
                                             26 COMRAM    10     3      7
                       _custom_delay
                        _setMotorPWM
                               _stop
 ---------------------------------------------------------------------------------
 (2) _reverse                                              5     1      4   12310
                                             26 COMRAM     5     1      4
                        _setMotorPWM
                               _stop
 ---------------------------------------------------------------------------------
 (5) _left_45                                             10     3      7   13944
                                             26 COMRAM    10     3      7
                       _custom_delay
                        _setMotorPWM
                               _stop
 ---------------------------------------------------------------------------------
 (2) _stop                                                 5     1      4    8349
                                             21 COMRAM     5     1      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (3) _setMotorPWM                                          6     4      2    2589
                                             15 COMRAM     6     4      2
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     355
                                              2 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              7     3      4     358
                                              8 COMRAM     7     3      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (5) _custom_delay                                         5     3      2     502
                                              2 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (2) ___flge                                              12     4      8    3526
                                              2 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (2) _READcolor                                            2     0      2    3161
                                             41 COMRAM     2     0      2
                            ___fldiv
                           ___xxtofl
                    _color_read_Blue
                   _color_read_Clear
                   _color_read_Green
                     _color_read_Red
 ---------------------------------------------------------------------------------
 (3) _color_read_Red                                       7     5      2     113
                                              6 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (3) _color_read_Green                                     7     5      2     113
                                              6 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (3) _color_read_Clear                                     7     5      2     113
                                              6 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (3) _color_read_Blue                                      7     5      2     113
                                              6 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (4) _I2C_2_Master_Write                                   1     1      0      22
                                              3 COMRAM     1     1      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (4) _I2C_2_Master_Stop                                    0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (4) _I2C_2_Master_Start                                   0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (4) _I2C_2_Master_RepStart                                0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (4) _I2C_2_Master_Read                                    3     3      0      45
                                              3 COMRAM     3     3      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (5) _I2C_2_Master_Idle                                    1     1      0       0
                                              2 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) ___xxtofl                                            14    10      4     778
                                              2 COMRAM    14    10      4
 ---------------------------------------------------------------------------------
 (3) ___fldiv                                             25    17      8    1703
                                             16 COMRAM    25    17      8
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _LowISR                                               2     2      0       0
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _buggy_color_response
     _READcolor
       ___fldiv
         ___xxtofl (ARG)
       ___xxtofl
       _color_read_Blue
         _I2C_2_Master_Read
           _I2C_2_Master_Idle
         _I2C_2_Master_RepStart
           _I2C_2_Master_Idle
         _I2C_2_Master_Start
           _I2C_2_Master_Idle
         _I2C_2_Master_Stop
           _I2C_2_Master_Idle
         _I2C_2_Master_Write
           _I2C_2_Master_Idle
       _color_read_Clear
         _I2C_2_Master_Read
         _I2C_2_Master_RepStart
         _I2C_2_Master_Start
         _I2C_2_Master_Stop
         _I2C_2_Master_Write
       _color_read_Green
         _I2C_2_Master_Read
         _I2C_2_Master_RepStart
         _I2C_2_Master_Start
         _I2C_2_Master_Stop
         _I2C_2_Master_Write
       _color_read_Red
         _I2C_2_Master_Read
         _I2C_2_Master_RepStart
         _I2C_2_Master_Start
         _I2C_2_Master_Stop
         _I2C_2_Master_Write
     ___flge
     _forward
       _setMotorPWM
         ___lwdiv
           ___wmul (ARG)
         ___wmul
       _stop
         _setMotorPWM
     _movement
       _custom_delay
       _left_45
         _custom_delay
         _setMotorPWM
         _stop
       _reverse
         _setMotorPWM
         _stop
       _right_45
         _custom_delay
         _setMotorPWM
         _stop
       _space
         _setMotorPWM
         _stop
       _stop
     _movement_return
       _left_45
       _reverse_pink
         _custom_delay
         _reverse
         _right_45
         _stop
       _reverse_yellow
         _custom_delay
         _left_45
         _reverse
         _stop
       _right_45
       _stop
     _return_home
       _delay_ms_func
       _forward
       _movement_return
       _reverse
       _stop
     _reverse
     _space
     _stop
     _timer_reset
   _complete_initialisation
     _ADC_init
     _I2C_2_Master_Init
     _Timer0_init
     _buggyLEDs_init
     _color_click_init
       _I2C_2_Master_Init
       _color_writetoaddr
         _I2C_2_Master_Start
         _I2C_2_Master_Stop
         _I2C_2_Master_Write
     _initDCmotorsPWM
     _initUSART4
     _interrupts_init
     _motor_init
     _ports_init
   _timer_reset

 _LowISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             DE9      0       0      66        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK13           EA      0       0      30        0.0%
BANK13              EA      0       0      31        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      2      68       5       65.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     3F      5B       1       96.8%
BITBIGSFRhlllhl     37      0       0      47        0.0%
BITBIGSFRhlllhh     31      0       0      45        0.0%
BITBIGSFRlllhll     2A      0       0      58        0.0%
BITBIGSFRlllll      26      0       0      64        0.0%
BITBIGSFRllhh       20      0       0      50        0.0%
BITBIGSFRlllhhh     1E      0       0      52        0.0%
BITBIGSFRhhhhlh     1B      0       0      33        0.0%
BITBIGSFRhhhlll     17      0       0      38        0.0%
BITBIGSFRhlllhh     14      0       0      42        0.0%
BITBIGSFRhhhhll     13      0       0      34        0.0%
BITBIGSFRlllhhh     11      0       0      53        0.0%
BITBIGSFRhhhlhh      E      0       0      35        0.0%
BITBIGSFRhhhhh       D      0       0      32        0.0%
BITBIGSFRllhl        C      0       0      51        0.0%
BITBIGSFRlllhll      9      0       0      61        0.0%
BITBIGSFRlllhll      9      0       0      60        0.0%
BITBIGSFRhlllll      8      0       0      48        0.0%
BITBIGSFRhlllhh      6      0       0      44        0.0%
BITBIGSFRllllh       6      0       0      63        0.0%
BITBIGSFRlllhlh      6      0       0      57        0.0%
BITBIGSFRlllhlh      5      0       0      56        0.0%
BITBIGSFRhhhlll      5      0       0      39        0.0%
BITBIGSFRhlllhh      3      0       0      43        0.0%
BITBIGSFRlllhll      3      0       0      59        0.0%
BITBIGSFRlllhhl      3      0       0      55        0.0%
BITBIGSFRhlllhl      2      0       0      46        0.0%
BITBIGSFRhhhllh      2      0       0      37        0.0%
BITBIGSFRhhhlhl      1      0       0      36        0.0%
BITBIGSFRlllhhh      1      0       0      54        0.0%
BITBIGSFRhllhl       1      0       0      41        0.0%
BITBIGSFRhlh         1      0       0      40        0.0%
BITBIGSFRlllhll      1      0       0      62        0.0%
BITBIGSFRlh          1      0       0      49        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      C3      65        0.0%
DATA                 0      0      C3       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.40 build 20220703182018 
Symbol Table                                                                                   Thu Mar 16 11:41:55 2023

                 _color_read_Red 20B2                     ___fldiv@aexp 0029  
                   ___fldiv@bexp 0028                     ___fldiv@sign 0021  
                _color_read_Blue 21A2                               l30 23A0  
                             l33 23C6                               l42 24D4  
                             l27 239E                               l36 24DE  
                             l45 24CA                               l39 24E8  
                             l48 22C0                               bsr 000FE0  
            ___wmul@multiplicand 0005                 custom_delay@temp 0003  
               _color_read_Clear 2152                 _color_read_Green 2102  
        _complete_initialisation 223E                delay_ms_func@time 0003  
                            l121 2100                              l130 21A0  
                            l115 2374                              l124 21F0  
                            l133 1740                              l301 1D3C  
                            l118 244C                              l127 2150  
                            l160 149A                              l152 0952  
                            l305 1D6C                              l322 1994  
                            l306 1D6E                              l410 1F98  
                            l163 22EA                              l333 186A  
                            l341 1B9A                              l149 086A  
                            l166 2300                              l406 1F7C  
                            l191 242C                              l415 1FE2  
                            l344 1E80                              l280 1DFE  
                            l521 2322                              l602 23EC  
                            l450 24AE                              l290 223C  
                            l347 1F02                              l524 2340  
                            l428 24BE                              l357 0FC6  
                            l293 1C52                              l287 1606  
                            l367 1324                              l447 246C  
                            l297 1C82                              l298 1C84  
                            l475 240C                              l478 249C  
                            l593 2486                              l578 227E  
                            l872 1A98                              l867 1A52  
                            wreg 000FE8                    return_home@mL 0030  
                  return_home@mR 0032                             l1100 1F76  
                           l3001 1DE4                             l3003 1DE6  
                           l3011 21F2                             l1260 117A  
                           l1093 1F6E                             l3101 01EA  
                           l3005 1DF0                             l3021 24B0  
                           l3013 2200                             l1271 1112  
                           l3111 0278                             l3103 021C  
                           l3023 244E                             l3007 1DF2  
                           l3015 2208                             l3031 23EE  
                           l1184 0CEC                             l1264 10B6  
                           l1257 101E                             l2401 23A0  
                           l3201 0704                             l3113 02AA  
                           l3121 0306                             l3105 022C  
                           l3041 2482                             l3025 2456  
                           l3033 2488                             l3009 1DFC  
                           l3017 2224                             l1186 0B4C  
                           l1195 0B92                             l2403 23B0  
                           l3051 1A02                             l2331 1F04  
                           l2411 1CBA                             l3211 0762  
                           l3203 071A                             l3123 0338  
                           l3131 0394                             l3115 02DC  
                           l3107 022E                             l3043 2484  
                           l3035 246E                             l3027 2460  
                           l3019 222C                             l1197 0C0A  
                           l1189 0B10                             l3061 1A90  
                           l3053 1A12                             l3045 1996  
                           l2341 1F3C                             l2333 1F0C  
                           l2325 23C8                             l2421 1D1C  
                           l2413 1CD8                             l2405 1C86  
                           l2501 183E                             l3221 07A6  
                           l3213 0766                             l3205 074C  
                           l3141 043C                             l3133 03C6  
                           l3125 036A                             l3117 02EC  
                           l3109 0246                             l3037 2478  
                           l3029 246A                             l1198 0BF8  
                           l2511 24DA                             l3063 1A96  
                           l3055 1A20                             l3047 19C4  
                           l2351 1F68                             l2343 1F42  
                           l2335 1F1E                             l2327 23E4  
                           l2431 1880                             l2423 1D28  
                           l2415 1CF0                             l2407 1C9A  
                           l2503 1854                             l3231 0820  
                           l3223 07D2                             l3207 075C  
                           l3151 04FA                             l3135 03F8  
                           l3143 0454                             l3127 037A  
                           l3119 02EE                             l3071 006A  
                           l3039 2480                             l2513 24E0  
                           l2521 24C2                             l3057 1A32  
                           l3049 19D4                             l2345 1F58  
                           l2337 1F26                             l2361 1524  
                           l2353 149C                             l2441 18C2  
                           l2433 1890                             l2425 1D34  
                           l2417 1CFA                             l2409 1CAA  
                           l2505 1856                             l2601 1BC0  
                           l3241 0882                             l3233 0836  
                           l3225 07E6                             l3217 077A  
                           l3209 075E                             l3161 05AA  
                           l3153 04FC                             l3145 0486  
                           l3137 042A                             l3129 037C  
                           l3081 00BC                             l3073 007A  
                           l2531 2296                             l2515 24E4  
                           l2523 24C6                             l3059 1A40  
                           l2347 1F60                             l2339 1F2E  
                           l2363 1566                             l2355 14B8  
                           l2371 2006                             l2451 190A  
                           l2443 18CE                             l2435 18A0  
                           l2427 1D54                             l2419 1D12  
                           l2507 1858                             l2611 1C28  
                           l2603 1BD0                             l3251 08F4  
                           l3243 0888                             l3235 0868  
                           l3227 07FE                             l3219 078E  
                           l3171 061C                             l3163 05BA  
                           l3147 04B8                             l3155 0514  
                           l3139 043A                             l3091 015C  
                           l3083 00D4                             l3075 007C  
                           l3067 0048                             l2701 09BA  
                           l2533 22BC                             l2525 2282  
                           l2509 24D6                             l2517 24CC  
                           l2349 1F62                             l2365 1582  
                           l2357 150C                             l2381 2030  
                           l2373 2008                             l2461 1968  
                           l2453 1918                             l2445 18E6  
                           l2437 18A2                             l2429 186C  
                           l2621 1A9A                             l2613 1C32  
                           l2605 1BEE                             l2541 1E34  
                           l3253 0920                             l3245 089C  
                           l3229 080A                             l3181 0634  
                           l3173 062C                             l3165 05BC  
                           l3157 0546                             l3149 04EA  
                           l3093 018E                             l3085 00E0  
                           l3077 0090                             l3069 0054  
                           l3261 224E                             l2711 09E6  
                           l2703 09C0                             l2535 22BE  
                           l2527 2286                             l2519 24D0  
                           l2367 15C6                             l2359 1520  
                           l2383 203C                             l2463 197E  
                           l2455 1930                             l2447 18F2  
                           l2439 18AA                             l2471 1756  
                           l2631 1B04                             l2623 1AAE  
                           l2615 1C3E                             l2607 1C06  
                           l2551 1EB6                             l2543 1E4C  
                           l3247 08B4                             l3239 0870  
                           l3255 093E                             l3191 06A0  
                           l3183 0648                             l3175 062E  
                           l3159 0578                             l3167 05D4  
                           l3095 019E                             l3087 00F8  
                           l3079 00A8                             l3271 2276  
                           l3263 2252                             l3351 1FBE  
                           l2801 0C92                             l2721 0A20  
                           l2713 09F6                             l2705 09C6  
                           l2529 228E                             l2385 2044  
                           l2377 200C                             l2369 1FE6  
                           l2465 1980                             l2457 1948  
                           l2449 18FE                             l2481 1798  
                           l2473 1766                             l2641 1B54  
                           l2633 1B10                             l2625 1AB0  
                           l2617 1C4A                             l2609 1C10  
                           l2553 1ECE                             l2545 1E60  
                           l3249 08E0                             l3193 06B4  
                           l3185 0660                             l3177 0630  
                           l3169 0606                             l3097 01A0  
                           l3089 012A                             l2561 2380  
                           l3273 227A                             l3265 2266  
                           l3257 223E                             l3353 1FC2  
                           l3345 1F78                             l2811 0CE0  
                           l2803 0CAC                             l2723 0A36  
                           l2715 0A06                             l2707 09D4  
                           l2395 2302                             l2379 2024  
                           l2459 1954                             l2467 1982  
                           l2491 17E0                             l2483 17A4  
                           l2475 1776                             l2643 1B6C  
                           l2635 1B1C                             l2627 1AC0  
                           l2619 1C6A                             l2555 1EE2  
                           l2547 1E6C                             l2539 1E00  
                           l2651 118C                             l3195 06CC  
                           l3187 0674                             l3179 0632  
                           l3099 01B8                             l2563 2386  
                           l2571 2430                             l3267 226E  
                           l3259 224A                             l3347 1F8A  
                           l2813 0CE2                             l2805 0CC8  
                           l2741 0A8A                             l2725 0A46  
                           l2733 0A66                             l2717 0A08  
                           l2709 09D6                             l2821 0FCA  
                           l2581 21E8                             l2573 20B2  
                           l2397 230E                             l2493 17EE  
                           l2485 17BC                             l2477 1778  
                           l2469 1742                             l2645 1B80  
                           l2629 1AEC                             l2637 1B24  
                           l2901 0E3C                             l2557 1EEE  
                           l2549 1E82                             l2661 124C  
                           l2653 11C0                             l3189 068C  
                           l3197 06E6                             l2565 2388  
                           l3269 2272                             l3349 1FA6  
                           l2807 0CCC                             l2751 0ADC  
                           l2743 0AA4                             l2735 0A76  
                           l2727 0A4E                             l2719 0A10  
                           l2823 0FDA                             l2591 2152  
                           l2575 20F8                             l2399 231E  
                           l2495 1806                             l2487 17C8  
                           l2479 1780                             l2647 1B98  
                           l2639 1B3C                             l2903 0E48  
                           l2911 0EA8                             l2671 12EA  
                           l2663 125E                             l2655 11D2  
                           l3199 06EE                             l2567 238A  
                           l2559 2376                             l2809 0CDA  
                           l2761 0B38                             l2753 0AEC  
                           l2745 0AB4                             l2737 0A76  
                           l2729 0A52                             l2841 10A0  
                           l2833 1058                             l2825 0FE8  
                           l2593 2198                             l2585 2102  
                           l2497 181E                             l2489 17D4  
                           l2921 0F06                             l2913 0EBA  
                           l2905 0E5C                             l2681 22E6  
                           l2673 12FE                             l2665 1292  
                           l2657 1206                             l2649 117C  
                           l2569 238C                             l2771 0B78  
                           l2763 0B3A                             l2755 0B00  
                           l2747 0AC4                             l2691 0980  
                           l2683 0954                             l2851 1120  
                           l2843 10AC                             l2835 1060  
                           l2827 102E                             l2579 21A2  
                           l2587 2148                             l2499 182A  
                           l2931 0F92                             l2923 0F26  
                           l2915 0ECE                             l2907 0E74  
                           l2675 1310                             l2667 12A4  
                           l2659 1218                             l2781 0BB4  
                           l2773 0B82                             l2765 0B4A  
                           l2757 0B0E                             l2749 0AD4  
                           l2693 0990                             l2685 0960  
                           l2861 1168                             l2853 1122  
                           l2845 10E8                             l2837 106C  
                           l2829 1044                             l2917 0EDA  
                           l2925 0F3A                             l2909 0E94  
                           l2677 22C2                             l2597 1B9C  
                           l2669 12D8                             l2941 1368  
                           l2933 1326                             l2791 0C26  
                           l2783 0BC2                             l2775 0B90  
                           l2767 0B5C                             l2759 0B1A  
                           l2695 09A0                             l2687 096E  
                           l2863 116A                             l2855 1126  
                           l2847 10F4                             l2839 109E  
                           l2927 0F4C                             l2919 0EEE  
                           l2679 22CE                             l2599 1BB0  
                           l2951 13D4                             l2943 137C  
                           l2935 132A                             l2871 2350  
                           l2793 0C34                             l2785 0BF0  
                           l2769 0B72                             l2777 0BA2  
                           l2697 09A2                             l2689 0970  
                           l2857 114A                             l2849 1102  
                           l2929 0F80                             l2881 0D02  
                           l2961 1436                             l2953 13F4  
                           l2945 1394                             l2937 134E  
                           l2873 2360                             l2795 0C5E  
                           l2779 0BB0                             l2699 09AA  
                           l2859 115A                             l2891 0D9C  
                           l2883 0D1A                             l2963 144E  
                           l2955 13F6                             l2947 13A8  
                           l2939 1350                             l2971 249E  
                           l2875 236A                             l2867 2342  
                           l2789 0C1A                             l2797 0C62  
                           l2877 1608                             l2893 0DD0  
                           l2885 0D46                             l2965 1462  
                           l2957 140A                             l2949 13C0  
                           l2869 2346                             l2981 2426  
                           l2973 240E                             l2799 0C7C  
                           l2895 0DE2                             l2887 0D56  
                           l2879 0CEE                             l2959 1422  
                           l2967 147A                             l2991 1DA6  
                           l2983 2428                             l2975 2418  
                           l2897 0E16                             l2889 0D8A  
                           l2969 148A                             l2993 1DAA  
                           l2985 242A                             l2977 241A  
                           l2899 0E28                             l2995 1DCE  
                           l2987 1D70                             l2979 241C  
                           l2997 1DD8                             l2989 1D80  
                           l2999 1DDA                             u2000 1044  
                           u2001 1040                             u2010 109A  
                           u2011 1096                             u2020 10E4  
                           u2100 0DE2                             u2021 10E0  
                           u2101 0DDE                             u2030 1102  
                           u2110 0E28                             u2031 10FE  
                           u2111 0E24                             u2040 1112  
                           u2200 1A40                             u1400 14B8  
                           u2120 0EBA                             u2041 110E  
                           u2201 1A3C                             u1401 14B4  
                           u2121 0EB6                             u2050 1120  
                           u2210 1A90                             u1410 1582  
                           u2130 0F4C                             u2051 111C  
                           u2211 1A8C                             u1411 157E  
                           u2131 0F48                             u2060 115A  
                           u1420 2340                             u1500 18E6  
                           u2140 0F92                             u2300 02DC  
                           u2220 006A                             u2061 1156  
                           u1421 233C                             u1501 18E2  
                           u2141 0F8E                             u2301 02D8  
                           u2221 0066                             u2070 1168  
                           u1430 23B0                             u1510 1930  
                           u2150 148A                             u2310 0338  
                           u2230 012A                             u2071 1164  
                           u1431 23AC                             u1511 192C  
                           u3007 1910                             u2151 1486  
                           u2311 0334                             u2231 0126  
                           u1440 23C6                             u1520 1948  
                           u2080 0D56                             u2160 149A  
                           u2400 0578                             u2320 036A  
                           u2240 015C                     _BAUD4CONbits 000EE9  
                           u1441 23C2                             u3017 1972  
                           u1521 1944                             u2081 0D52  
                           u2161 1496                             u2401 0574  
                           u2321 0366                             u2241 0158  
                           u2170 19C4                             u1370 1F1E  
                           u1530 1994                             u1450 1CF0  
                           u2090 0D9C                             u1610 1C06  
                           u2410 05AA                             u2330 03C6  
                           u2250 018E                             u2171 19C0  
                           u1371 1F1A                             u3027 203E  
                           u1531 1990                             u1451 1CEC  
                           u2091 0D98                             u1611 1C02  
                           u2411 05A6                             u2331 03C2  
                           u2251 018A                             u2180 1A02  
                           u1380 1F3C                             u1460 1D12  
                           u1540 1798                             u1620 1C28  
                           u1700 125E                             u2500 0868  
                           u2420 0606                             u2340 03F8  
                           u2260 01EA                             u2181 19FE  
                           u3037 2314                             u1381 1F38  
                           u1461 1D0E                             u1541 1794  
                           u1621 1C24                             u1701 125A  
                           u2501 0864                             u2421 0602  
                           u2341 03F4                             u2261 01E6  
                           u2190 1A20                             u1390 1F58  
                           u1470 1D54                             u1550 17BC  
                           u1630 1C6A                             u1710 12A4  
                           u2510 0882                             u2430 061C  
                           u2350 042A                             u2270 021C  
                           u2191 1A1C                             u1391 1F54  
                           u1471 1D50                             u1551 17B8  
                           u1631 1C66                             u1711 12A0  
                           u2511 087E                             u2431 0618  
                           u2351 0426                             u2271 0218  
                           u1800 09F6                             u1608 22AC  
                           u1480 1D6C                             u1560 1806  
                           u1640 1C82                             u1720 12EA  
                           u2440 0704                             u2360 0486  
                           u2280 0278                             u1801 09F2  
                           u1481 1D68                             u1561 1802  
                           u1641 1C7E                             u1721 12E6  
                           u2441 0700                             u2361 0482  
                           u2281 0274                             u1810 0A36  
                           u1490 18C2                             u1570 181E  
                           u1650 1B3C                             u1730 1310  
                           u2450 071A                             u2370 04B8  
                           u2290 02AA                             _T2PR 000FBC  
                           u1811 0A32                             u1491 18BE  
                           u1571 181A                             u1651 1B38  
                           u1731 130C                             u2451 0716  
                           u2371 04B4                             u2291 02A6  
                           u1900 0BC2                             u1820 0A76  
                           u1580 186A                             u1660 1B54  
                           u1740 2300                             u2460 074C  
                           u2380 04EA                             u1901 0BBE  
                           u1821 0A72                             u1581 1866  
                           u1661 1B50                             u1741 22FC  
                           u2461 0748                             u2381 04E6  
                           u1910 0BF0                             u1830 0AEC  
                           u1750 096E                             u1590 22AA  
                           u1670 118C                             u2470 0776  
                           u2390 0546                             u2630 1F8A  
                           u1911 0BEC                             u1831 0AE8  
                           u1751 096A                             u1591 22A2  
                           u1671 1188                             u2471 0772  
                           u2391 0542                             u2631 1F86  
                           u1920 0C06                             u1840 0B0E  
                           u1760 0980                             u1680 11D2  
                           u2480 0820                             u2640 1F98  
                           u1921 0C02                             u1841 0B0A  
                           u1761 097C                             u1681 11CE  
                           u2481 081C                             u2641 1F94  
                           u1930 0C1A                             u1850 0B38  
                           u1770 0990                             u1690 1218  
                           u2490 0836                             u2650 1FA6  
                           u1931 0C16                             u1851 0B34  
                           u1771 098C                             u1691 1214  
                           u2491 0832                             u2707 00EA  
                           u2651 1FA2                             u1940 0C34  
                           u1860 0B5C                             u1780 09D4  
                           u1941 0C30                             u1861 0B58  
                           u1781 09D0                             u2717 0652  
                           u1950 0C7C                             u1870 0B72  
                           u1790 09E6                             u1951 0C78  
                           u1871 0B6E                             u1791 09E2  
                           u2807 135A                             u2727 067E  
                           u1960 0CAC                             u1880 0B90  
                           u1961 0CA8                             u1881 0B8C  
                           u2817 1386                             u2737 06BE  
                           u1970 0CDA                             u1890 0BB0  
                           u1971 0CD6                             u1891 0BAC  
                           u2907 0D0C                             u2827 13B2  
                           u2747 0798                             u2667 1FB2  
                           u1980 0FDA                             u1981 0FD6  
                           u2917 0D38                             u2837 1414  
                           u2757 07C4                             u2677 2356  
                           u1990 0FE8                             u1991 0FE4  
                           u2927 0E66                             u2847 1440  
                           u2767 07F0                             u2687 009A  
                           u2937 0EF8                             u2857 146C  
                           u2777 08A6                             u2697 00C6  
                           u2947 1B1E                             u2867 1E3E  
                           u2787 08D2                             u2957 1B5E  
                           u2877 1EC0                             u2797 0912  
                           u2967 1B8A                             u2887 1C4C  
                           u2977 17E6                             u2897 22D8  
                           u2987 1848                             u2997 1D36  
        __end_of_interrupts_init 24C0                  _movement_return 117C  
                           _main 1F78                             fsr2h 000FDA  
                           indf2 000FDF                             fsr1l 000FE1  
                           fsr2l 000FD9                             btemp 005C  
                           _stop 1FE6                             prodh 000FF4  
                           prodl 000FF3                             start 0044  
               __end_of_ADC_init 2488                  ___fldiv@new_exp 0022  
         __end_of_color_read_Red 2102                     ___param_bank 000000  
                          ?_main 0001                            _ADPCH 000F5F  
                __end_of___fldiv 0CEE                            ?_stop 0016  
                __end_of___lwdiv 1F78                            i1l434 0038  
                          _TMR0H 000FD4                            _TMR0L 000FD3  
                   _square_timer 00C4                     left_45@count 001F  
     __end_of_I2C_2_Master_Start 24E0       __end_of_I2C_2_Master_Write 24CC  
                __end_of_left_45 1996                            _color 0044  
                __end_of_forward 1C86                            _space 1A9A  
                          tablat 000FF5                  __end_of_reverse 1D70  
                          ttemp5 005D                            ttemp6 0060  
                          ttemp7 0064                            stop@i 001A  
                          status 000FD8                            wtemp8 005D  
        __end_of_color_read_Blue 21F2            _I2C_2_Master_RepStart 24E0  
                 delay_ms_func@i 0007                  ?_color_read_Red 0007  
                __initialization 2050                     __end_of_main 1FE6  
                   __end_of_stop 2050                 _color_upperbound 00C2  
      ??_complete_initialisation 0008                left_45@left_timer 0020  
                         ??_main 00C6                           ??_stop 001A  
                  __activetblptr 000000       buggy_color_response@count2 003E  
        __end_of_movement_return 1326                     ?_setMotorPWM 0010  
                         _ADRESH 000F64                           _CCPR1H 000FAA  
                         _CCPR2H 000FA6                           _CCPR3H 000F25  
                         _CCPR4H 000F21                           ?_space 001B  
          __end_of_delay_ms_func 2302                __end_of_READcolor 1742  
                         _RC0PPS 000E62                           _RC4REG 000EE3  
                         _RE2PPS 000E74                           i1l2253 0022  
                         i1l2255 0032                           i1l2257 0036  
                         _RC7PPS 000E69                           _RD5PPS 000E6F  
                         _RE4PPS 000E76                           _RD6PPS 000E70  
                         _RG6PPS 000E88                 ?_interrupts_init 0001  
       __end_of_color_click_init 2376                           _RX4PPS 000E15  
                         _TX4REG 000EE4                 __end_of___xxtofl 117C  
                         _LowISR 0018                    ??_Timer0_init 0003  
                   _CCPTMRS0bits 000FAD                           ___flge 1996  
                         ___wmul 23C8                        ??___fldiv 0019  
                      ??___lwdiv 000D                 ??_buggyLEDs_init 0003  
                         clear_0 2096                           clear_1 20A2  
                  ?_custom_delay 0003                           _motorL 00B9  
                         _motorR 00B0                           isa$std 000001  
                      ??_left_45 0022                 __end_of_right_45 186C  
                   __pdataCOMRAM 0058                        ??_forward 001F  
               __end_of_movement 0FC8                           tblptrh 000FF7  
                         tblptrl 000FF6                           tblptru 000FF8  
                      ?_ADC_init 0001                        ??_reverse 001F  
                   ?_return_home 0030                           stop@mL 0016  
                         stop@mR 0018                     ?_timer_reset 0001  
              ??_initDCmotorsPWM 0005  __end_of_complete_initialisation 2280  
   __end_of_buggy_color_response 0954                       ___flge@ff1 0003  
                     ___flge@ff2 0007                     ___xxtofl@arg 000D  
                   ___xxtofl@exp 000C                     ___xxtofl@val 0003  
                     __accesstop 0060          __end_of__initialization 20A8  
       __end_of_color_read_Clear 21A2         __end_of_color_read_Green 2152  
         ?_I2C_2_Master_RepStart 0001                    ___rparam_used 000001  
               ?_color_read_Blue 0007                   __pcstackCOMRAM 0001  
                   __pidataBANK0 24EE                   ??_custom_delay 0005  
                  __end_of_space 1B9C              __end_of_Timer0_init 246E  
                     ??_ADC_init 0003                 ?_movement_return 002B  
                        ??_space 001F                       _card_count 0043  
                     __pbssBANK0 0060                          ?_LowISR 0001  
              _color_writetoaddr 242E                     _T2CLKCONbits 000FBF  
                        ?___flge 0003               ?_color_writetoaddr 0005  
                        ?___wmul 0003              ??_color_writetoaddr 0006  
                      ?___xxtofl 0003                          _SP4BRGH 000EE6  
                        _SP4BRGL 000EE5                          _SSP2ADD 000ED6  
                        _SSP2BUF 000ED5           color_writetoaddr@value 0005  
               ??_color_read_Red 0009        __end_of_color_writetoaddr 244E  
                      _ADREFbits 000F58               _I2C_2_Master_Start 24D6  
                     _initUSART4 240E               _I2C_2_Master_Write 24C0  
                      ?_right_45 001B                          __Hparam 0000  
                     _left_timer 005A                          __Lparam 0000  
              color_read_Red@tmp 000C                        ?_movement 0025  
                    _Timer0_init 244E                          ___fldiv 0954  
            ?_I2C_2_Master_Start 0001                          ___lwdiv 1F04  
            ?_I2C_2_Master_Write 0001             _buggy_color_response 0048  
                        __pcinit 2050                          __ramtop 0E00  
                        __ptext0 1F78                          __ptext1 223E  
                        __ptext2 23EE                          __ptext3 21F2  
                        __ptext4 24B0                          __ptext5 240E  
                        __ptext6 1D70                          __ptext7 2342  
                        __ptext8 242E                          __ptext9 2376  
                        _left_45 186C                        _T2CONbits 000FBD  
                        _forward 1B9C                       ??___xxtofl 0007  
                  ?_reverse_pink 0025                        _T2HLTbits 000FBE  
                        _reverse 1C86                    right_45@count 001F  
           ??_I2C_2_Master_Start 0004             ??_I2C_2_Master_Write 0004  
           end_of_initialization 20A8             __end_of_custom_delay 2342  
              ?_color_click_init 0001                        _READcolor 1608  
                     ??_right_45 0022               ??_color_click_init 0007  
                        space@mL 001B                          space@mR 001D  
                     ??_movement 002A                          postdec1 000FE5  
                        postdec2 000FDD                          postinc0 000FEE  
                        postinc2 000FDE                       _motor_init 21F2  
          ?_buggy_color_response 0036                  _initDCmotorsPWM 1D70  
                      _PORTFbits 000F8E               setMotorPWM@negDuty 0015  
                 ??_reverse_pink 0029                    ___xxtofl@sign 000B  
                      _TRISAbits 000F81               setMotorPWM@posDuty 0014  
                      _TRISCbits 000F83                        _TRISDbits 000F84  
                      _TRISEbits 000F85                        _TRISFbits 000F86  
                      _TRISGbits 000F87                        _TRISHbits 000F88  
                    ___fldiv@grs 0024                       _ports_init 23EE  
                    ___fldiv@rem 001D         color_writetoaddr@address 0006  
        ??_I2C_2_Master_RepStart 0004                      _CCP1CONbits 000FAB  
              ?_color_read_Clear 0007                      _CCP2CONbits 000FA7  
              ?_color_read_Green 0007                       ?_READcolor 002A  
                    _CCP3CONbits 000F26                      ?_initUSART4 0001  
                    _CCP4CONbits 000F22               ??_color_read_Clear 0009  
       ?_complete_initialisation 0001               ??_color_read_Green 0009  
                 __end_of_LowISR 0044                   __end_of___flge 1A9A  
                 __end_of___wmul 23EE                    __pidataCOMRAM 24EA  
            color_read_Clear@tmp 000C              start_initialization 2050  
         buggy_color_response@mL 0036           buggy_color_response@mR 0038  
            color_read_Green@tmp 000C                         ??_LowISR 0001  
                 _reverse_yellow 1E00          __end_of_initDCmotorsPWM 1E00  
                       ??___flge 000B           ??_buggy_color_response 003C  
                       ??___wmul 0007                      ?_motor_init 0003  
                     READcolor@c 002A                      __pdataBANK0 00C2  
                    _card_memory 0088                        ___fldiv@a 0015  
                      ___fldiv@b 0011                      __pbssCOMRAM 0040  
                  __pcstackBANK0 00C6                      ?_ports_init 0001  
                  _delay_ms_func 22C2           __end_of_reverse_yellow 1E82  
                    ??_READcolor 002C             __end_of_reverse_pink 1F04  
               ___lwdiv@dividend 0009                     ?_Timer0_init 0001  
                       ?___fldiv 0011                         ?___lwdiv 0009  
                     right_45@mL 001B                       right_45@mR 001D  
                    __pintcodelo 0018                     _custom_delay 2302  
           I2C_2_Master_Read@ack 0005                ??_interrupts_init 0003  
           I2C_2_Master_Read@tmp 0006                         ?_left_45 001B  
                       ?_forward 001B                _I2C_2_Master_Idle 23A0  
              _I2C_2_Master_Init 2376                _I2C_2_Master_Read 2280  
              _I2C_2_Master_Stop 24CC                         _ADC_init 246E  
                       ?_reverse 001B               ?_I2C_2_Master_Idle 0001  
             ?_I2C_2_Master_Init 0001               ?_I2C_2_Master_Read 0001  
                  ??_setMotorPWM 0012               ?_I2C_2_Master_Stop 0001  
               ___lwdiv@quotient 000D         initDCmotorsPWM@PWMperiod 0003  
                 ?_delay_ms_func 0003              ??_I2C_2_Master_Idle 0003  
            ??_I2C_2_Master_Init 0003              ??_I2C_2_Master_Read 0004  
                 ___wmul@product 0007                         _LATAbits 000F79  
            ??_I2C_2_Master_Stop 0004                         _LATCbits 000F7B  
                       _LATDbits 000F7C                       movement@mL 0025  
                       _LATEbits 000F7D                       movement@mR 0027  
                       _LATFbits 000F7E                   reverse_pink@mL 0025  
                       _LATGbits 000F7F                   reverse_pink@mR 0027  
                       _LATHbits 000F80                  ?_reverse_yellow 0025  
                       _IPR0bits 000E1F                         _PIE0bits 000E29  
                       i1u122_20 0032                         i1u122_21 002E  
              movement_return@mL 002B                movement_return@mR 002D  
                       _PIR0bits 000E33                         _PIR4bits 000E37  
               ?_initDCmotorsPWM 0003                         _SSP2CON2 000EDA  
                       _SSP2STAT 000ED8                        _timer_val 0040  
                     _ADCON0bits 000F60        __end_of_I2C_2_Master_Idle 23C8  
      __end_of_I2C_2_Master_Init 23A0        __end_of_I2C_2_Master_Read 22C2  
              ___wmul@multiplier 0003        __end_of_I2C_2_Master_Stop 24D6  
                   setMotorPWM@m 0010      I2C_2_Master_Write@data_byte 0004  
                      left_45@mL 001B                        left_45@mR 001D  
              ??_color_read_Blue 0009                    ??_return_home 0034  
                  ??_timer_reset 0003                        copy_data0 2064  
                      copy_data1 2084                    movement@count 0029  
  __end_of_I2C_2_Master_RepStart 24EA               color_read_Blue@tmp 000C  
            __end_of_setMotorPWM 1608                     ??_initUSART4 0003  
          buggy_color_response@c 003A            buggy_color_response@j 003F  
                       __Hrparam 0000                         __Lrparam 0000  
                      forward@mL 001B                        forward@mR 001D  
              ??_movement_return 0030                       _ANSELDbits 000EA7  
                     _ANSELFbits 000EB4                         ___xxtofl 0FC8  
           movement_return@count 002F                       _T0CON0bits 000FD5  
                     _T0CON1bits 000FD6                   _buggyLEDs_init 2488  
                ___lwdiv@divisor 000B               __end_of_initUSART4 242E  
                ___lwdiv@counter 000F                  ??_delay_ms_func 0005  
                       __ptext10 2488                         __ptext11 244E  
                       __ptext20 22C2                         __ptext12 246E  
                       __ptext21 0CEE                         __ptext13 0048  
                       __ptext30 2302                         __ptext22 1A9A  
                       __ptext14 249E                         __ptext31 1996  
                       __ptext23 1742                         __ptext15 1326  
                       __ptext40 24E0                         __ptext32 1608  
                       __ptext24 1C86                         __ptext16 117C  
                       __ptext41 2280                         __ptext33 20B2  
                       __ptext25 186C                         __ptext17 1E00  
                       __ptext42 23A0                         __ptext34 2102  
                       __ptext26 1FE6                         __ptext18 1E82  
                       __ptext43 0FC8                         __ptext35 2152  
                       __ptext27 149C                         __ptext19 1B9C  
                       __ptext44 0954                         __ptext36 21A2  
                       __ptext28 23C8                         __ptext37 24C0  
                       __ptext29 1F04                         __ptext38 24CC  
                       __ptext39 24D6                        right_45@i 0024  
                   _SSP2CON1bits 000ED9                     _SSP2CON2bits 000EDA  
            __end_of_return_home 149C              __end_of_timer_reset 24B0  
                       _right_45 1742                        reverse@mL 001B  
                      reverse@mR 001D                         _movement 0CEE  
                       isa$xinst 000000                       _RC4STAbits 000EE7  
                       int$flags 005C                     ??_motor_init 0007  
                       left_45@i 0024           __end_of_buggyLEDs_init 249E  
                     _INTCONbits 000FF2                     _reverse_pink 1E82  
                   ??_ports_init 0003                      _setMotorPWM 149C  
                       intlevel1 0000               __end_of_motor_init 223E  
                    _right_timer 0058                 reverse_yellow@mL 0025  
               reverse_yellow@mR 0027                  _interrupts_init 24B0  
                   _timer_memory 0060               __end_of_ports_init 240E  
                   motor_init@mL 0003                     motor_init@mR 0005  
               _color_click_init 2342              right_45@right_timer 0020  
                ?_buggyLEDs_init 0001                       _SSP2DATPPS 000E1D  
                     _SSP2CLKPPS 000E1C                      _timer_index 0042  
                    _return_home 1326                      _timer_reset 249E  
               ??_reverse_yellow 0029                       _TX4STAbits 000EE8  
                  custom_delay@i 0006  
